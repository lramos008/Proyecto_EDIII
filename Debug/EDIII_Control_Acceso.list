
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001477c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018000  0801491c  0801491c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c91c  0802c91c  0002e090  2**0
                  CONTENTS
  4 .ARM          00000008  0802c91c  0802c91c  0002d91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c924  0802c924  0002e090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c924  0802c924  0002d924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802c928  0802c928  0002d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0802c92c  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000104cc  20000090  0802c9bc  0002e090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001055c  0802c9bc  0002e55c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a16d  00000000  00000000  0002e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007008  00000000  00000000  0005822d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002548  00000000  00000000  0005f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b34  00000000  00000000  00061780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e28  00000000  00000000  000632b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000378a2  00000000  00000000  000850dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3732  00000000  00000000  000bc97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  001700b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a230  00000000  00000000  00170164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0017a394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000504b  00000000  00000000  0017a41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001d0  00000000  00000000  0017f465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014904 	.word	0x08014904

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08014904 	.word	0x08014904

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	@ 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea6:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <SELECT+0x14>)
 8000ea8:	f005 f850 	bl	8005f4c <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ebe:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <DESELECT+0x14>)
 8000ec0:	f005 f844 	bl	8005f4c <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40020000 	.word	0x40020000

08000ecc <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000ed6:	bf00      	nop
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <SPI_TxByte+0x30>)
 8000eda:	f007 f939 	bl	8008150 <HAL_SPI_GetState>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d1f9      	bne.n	8000ed8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8000ee4:	1df9      	adds	r1, r7, #7
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <SPI_TxByte+0x30>)
 8000eee:	f006 fe42 	bl	8007b76 <HAL_SPI_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000420 	.word	0x20000420

08000f00 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f06:	23ff      	movs	r3, #255	@ 0xff
 8000f08:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000f0e:	bf00      	nop
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <SPI_RxByte+0x38>)
 8000f12:	f007 f91d 	bl	8008150 <HAL_SPI_GetState>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d1f9      	bne.n	8000f10 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8000f1c:	1dba      	adds	r2, r7, #6
 8000f1e:	1df9      	adds	r1, r7, #7
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <SPI_RxByte+0x38>)
 8000f2a:	f006 ff68 	bl	8007dfe <HAL_SPI_TransmitReceive>
  
  return data;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000420 	.word	0x20000420

08000f3c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f44:	f7ff ffdc 	bl	8000f00 <SPI_RxByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <SD_ReadyWait+0x34>)
 8000f60:	2232      	movs	r2, #50	@ 0x32
 8000f62:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000f64:	f7ff ffcc 	bl	8000f00 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000f68:	f7ff ffca 	bl	8000f00 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	d004      	beq.n	8000f80 <SD_ReadyWait+0x28>
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SD_ReadyWait+0x34>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <SD_ReadyWait+0x10>
  
  return res;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000566 	.word	0x20000566

08000f90 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000f96:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000f9a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000f9c:	f7ff ff8a 	bl	8000eb4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	e005      	b.n	8000fb2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000fa6:	20ff      	movs	r0, #255	@ 0xff
 8000fa8:	f7ff ff90 	bl	8000ecc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	ddf6      	ble.n	8000fa6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000fb8:	f7ff ff70 	bl	8000e9c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000fbc:	2340      	movs	r3, #64	@ 0x40
 8000fbe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000fd0:	2395      	movs	r3, #149	@ 0x95
 8000fd2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e009      	b.n	8000fee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff72 	bl	8000ecc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	ddf2      	ble.n	8000fda <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000ff4:	e002      	b.n	8000ffc <SD_PowerOn+0x6c>
  {
    Count--;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000ffc:	f7ff ff80 	bl	8000f00 <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d002      	beq.n	800100c <SD_PowerOn+0x7c>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f4      	bne.n	8000ff6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800100c:	f7ff ff52 	bl	8000eb4 <DESELECT>
  SPI_TxByte(0XFF);
 8001010:	20ff      	movs	r0, #255	@ 0xff
 8001012:	f7ff ff5b 	bl	8000ecc <SPI_TxByte>
  
  PowerFlag = 1;
 8001016:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <SD_PowerOn+0x94>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000ad 	.word	0x200000ad

08001028 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <SD_PowerOff+0x14>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	200000ad 	.word	0x200000ad

08001040 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <SD_CheckPower+0x14>)
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000ad 	.word	0x200000ad

08001058 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <SD_RxDataBlock+0x68>)
 8001064:	220a      	movs	r2, #10
 8001066:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001068:	f7ff ff4a 	bl	8000f00 <SPI_RxByte>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2bff      	cmp	r3, #255	@ 0xff
 8001074:	d104      	bne.n	8001080 <SD_RxDataBlock+0x28>
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <SD_RxDataBlock+0x68>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f3      	bne.n	8001068 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2bfe      	cmp	r3, #254	@ 0xfe
 8001084:	d001      	beq.n	800108a <SD_RxDataBlock+0x32>
    return FALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	e016      	b.n	80010b8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff53 	bl	8000f3c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff4d 	bl	8000f3c <SPI_RxBytePtr>
  } while(btr -= 2);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3b02      	subs	r3, #2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1ed      	bne.n	800108a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80010ae:	f7ff ff27 	bl	8000f00 <SPI_RxByte>
  SPI_RxByte();
 80010b2:	f7ff ff25 	bl	8000f00 <SPI_RxByte>
  
  return TRUE;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000565 	.word	0x20000565

080010c4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010d4:	f7ff ff40 	bl	8000f58 <SD_ReadyWait>
 80010d8:	4603      	mov	r3, r0
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d001      	beq.n	80010e2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	e040      	b.n	8001164 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fef1 	bl	8000ecc <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80010ee:	d031      	beq.n	8001154 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fee5 	bl	8000ecc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fede 	bl	8000ecc <SPI_TxByte>
    } while (--wc);
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	3b01      	subs	r3, #1
 8001114:	73bb      	strb	r3, [r7, #14]
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1eb      	bne.n	80010f4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800111c:	f7ff fef0 	bl	8000f00 <SPI_RxByte>
    SPI_RxByte();
 8001120:	f7ff feee 	bl	8000f00 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001124:	e00b      	b.n	800113e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001126:	f7ff feeb 	bl	8000f00 <SPI_RxByte>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2b05      	cmp	r3, #5
 8001136:	d006      	beq.n	8001146 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	3301      	adds	r3, #1
 800113c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800113e:	7b7b      	ldrb	r3, [r7, #13]
 8001140:	2b40      	cmp	r3, #64	@ 0x40
 8001142:	d9f0      	bls.n	8001126 <SD_TxDataBlock+0x62>
 8001144:	e000      	b.n	8001148 <SD_TxDataBlock+0x84>
        break;
 8001146:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001148:	bf00      	nop
 800114a:	f7ff fed9 	bl	8000f00 <SPI_RxByte>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0fa      	beq.n	800114a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2b05      	cmp	r3, #5
 800115c:	d101      	bne.n	8001162 <SD_TxDataBlock+0x9e>
    return TRUE;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001178:	f7ff feee 	bl	8000f58 <SD_ReadyWait>
 800117c:	4603      	mov	r3, r0
 800117e:	2bff      	cmp	r3, #255	@ 0xff
 8001180:	d001      	beq.n	8001186 <SD_SendCmd+0x1a>
    return 0xFF;
 8001182:	23ff      	movs	r3, #255	@ 0xff
 8001184:	e040      	b.n	8001208 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe9f 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	0e1b      	lsrs	r3, r3, #24
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe99 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe93 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe8d 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe88 	bl	8000ecc <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b40      	cmp	r3, #64	@ 0x40
 80011c4:	d101      	bne.n	80011ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80011c6:	2395      	movs	r3, #149	@ 0x95
 80011c8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b48      	cmp	r3, #72	@ 0x48
 80011ce:	d101      	bne.n	80011d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80011d0:	2387      	movs	r3, #135	@ 0x87
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fe78 	bl	8000ecc <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b4c      	cmp	r3, #76	@ 0x4c
 80011e0:	d101      	bne.n	80011e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80011e2:	f7ff fe8d 	bl	8000f00 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80011e6:	230a      	movs	r3, #10
 80011e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80011ea:	f7ff fe89 	bl	8000f00 <SPI_RxByte>
 80011ee:	4603      	mov	r3, r0
 80011f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80011f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da05      	bge.n	8001206 <SD_SendCmd+0x9a>
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	73bb      	strb	r3, [r7, #14]
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f1      	bne.n	80011ea <SD_SendCmd+0x7e>
  
  return res;
 8001206:	7b7b      	ldrb	r3, [r7, #13]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001220:	2301      	movs	r3, #1
 8001222:	e0d5      	b.n	80013d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001224:	4b6c      	ldr	r3, [pc, #432]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <SD_disk_initialize+0x2a>
    return Stat;        
 8001232:	4b69      	ldr	r3, [pc, #420]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	e0ca      	b.n	80013d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800123a:	f7ff fea9 	bl	8000f90 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800123e:	f7ff fe2d 	bl	8000e9c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001246:	2100      	movs	r1, #0
 8001248:	2040      	movs	r0, #64	@ 0x40
 800124a:	f7ff ff8f 	bl	800116c <SD_SendCmd>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	f040 80a5 	bne.w	80013a0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001256:	4b61      	ldr	r3, [pc, #388]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001258:	2264      	movs	r2, #100	@ 0x64
 800125a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800125c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001260:	2048      	movs	r0, #72	@ 0x48
 8001262:	f7ff ff83 	bl	800116c <SD_SendCmd>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d158      	bne.n	800131e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e00c      	b.n	800128c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001272:	7bfc      	ldrb	r4, [r7, #15]
 8001274:	f7ff fe44 	bl	8000f00 <SPI_RxByte>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	f104 0310 	add.w	r3, r4, #16
 8001280:	443b      	add	r3, r7
 8001282:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d9ef      	bls.n	8001272 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001292:	7abb      	ldrb	r3, [r7, #10]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8083 	bne.w	80013a0 <SD_disk_initialize+0x190>
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	2baa      	cmp	r3, #170	@ 0xaa
 800129e:	d17f      	bne.n	80013a0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80012a0:	2100      	movs	r1, #0
 80012a2:	2077      	movs	r0, #119	@ 0x77
 80012a4:	f7ff ff62 	bl	800116c <SD_SendCmd>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d807      	bhi.n	80012be <SD_disk_initialize+0xae>
 80012ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012b2:	2069      	movs	r0, #105	@ 0x69
 80012b4:	f7ff ff5a 	bl	800116c <SD_SendCmd>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80012be:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <SD_disk_initialize+0x1cc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1eb      	bne.n	80012a0 <SD_disk_initialize+0x90>
 80012c8:	e000      	b.n	80012cc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80012ca:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <SD_disk_initialize+0x1cc>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d064      	beq.n	80013a0 <SD_disk_initialize+0x190>
 80012d6:	2100      	movs	r1, #0
 80012d8:	207a      	movs	r0, #122	@ 0x7a
 80012da:	f7ff ff47 	bl	800116c <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d15d      	bne.n	80013a0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e00c      	b.n	8001304 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80012ea:	7bfc      	ldrb	r4, [r7, #15]
 80012ec:	f7ff fe08 	bl	8000f00 <SPI_RxByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	443b      	add	r3, r7
 80012fa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9ef      	bls.n	80012ea <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800130a:	7a3b      	ldrb	r3, [r7, #8]
 800130c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SD_disk_initialize+0x108>
 8001314:	2306      	movs	r3, #6
 8001316:	e000      	b.n	800131a <SD_disk_initialize+0x10a>
 8001318:	2302      	movs	r3, #2
 800131a:	73bb      	strb	r3, [r7, #14]
 800131c:	e040      	b.n	80013a0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800131e:	2100      	movs	r1, #0
 8001320:	2077      	movs	r0, #119	@ 0x77
 8001322:	f7ff ff23 	bl	800116c <SD_SendCmd>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d808      	bhi.n	800133e <SD_disk_initialize+0x12e>
 800132c:	2100      	movs	r1, #0
 800132e:	2069      	movs	r0, #105	@ 0x69
 8001330:	f7ff ff1c 	bl	800116c <SD_SendCmd>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d801      	bhi.n	800133e <SD_disk_initialize+0x12e>
 800133a:	2302      	movs	r3, #2
 800133c:	e000      	b.n	8001340 <SD_disk_initialize+0x130>
 800133e:	2301      	movs	r3, #1
 8001340:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d10e      	bne.n	8001366 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001348:	2100      	movs	r1, #0
 800134a:	2077      	movs	r0, #119	@ 0x77
 800134c:	f7ff ff0e 	bl	800116c <SD_SendCmd>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d80e      	bhi.n	8001374 <SD_disk_initialize+0x164>
 8001356:	2100      	movs	r1, #0
 8001358:	2069      	movs	r0, #105	@ 0x69
 800135a:	f7ff ff07 	bl	800116c <SD_SendCmd>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001364:	e00d      	b.n	8001382 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001366:	2100      	movs	r1, #0
 8001368:	2041      	movs	r0, #65	@ 0x41
 800136a:	f7ff feff 	bl	800116c <SD_SendCmd>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e1      	bne.n	8001342 <SD_disk_initialize+0x132>
 800137e:	e000      	b.n	8001382 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001380:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <SD_disk_initialize+0x18c>
 800138c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001390:	2050      	movs	r0, #80	@ 0x50
 8001392:	f7ff feeb 	bl	800116c <SD_SendCmd>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80013a0:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <SD_disk_initialize+0x1d0>)
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80013a6:	f7ff fd85 	bl	8000eb4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80013aa:	f7ff fda9 	bl	8000f00 <SPI_RxByte>
  
  if (type) 
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e001      	b.n	80013ca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80013c6:	f7ff fe2f 	bl	8001028 <SD_PowerOff>
  }
  
  return Stat;
 80013ca:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000565 	.word	0x20000565
 80013e0:	200000ac 	.word	0x200000ac

080013e4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80013f4:	2301      	movs	r3, #1
 80013f6:	e002      	b.n	80013fe <SD_disk_status+0x1a>
  
  return Stat;
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <SD_disk_status+0x28>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000000 	.word	0x20000000

08001410 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <SD_disk_read+0x1c>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <SD_disk_read+0x20>
    return RES_PARERR;
 800142c:	2304      	movs	r3, #4
 800142e:	e051      	b.n	80014d4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <SD_disk_read+0xcc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800143e:	2303      	movs	r3, #3
 8001440:	e048      	b.n	80014d4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001442:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <SD_disk_read+0xd0>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001454:	f7ff fd22 	bl	8000e9c <SELECT>
  
  if (count == 1) 
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d111      	bne.n	8001482 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	2051      	movs	r0, #81	@ 0x51
 8001462:	f7ff fe83 	bl	800116c <SD_SendCmd>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d129      	bne.n	80014c0 <SD_disk_read+0xb0>
 800146c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f7ff fdf1 	bl	8001058 <SD_RxDataBlock>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d021      	beq.n	80014c0 <SD_disk_read+0xb0>
      count = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	e01e      	b.n	80014c0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2052      	movs	r0, #82	@ 0x52
 8001486:	f7ff fe71 	bl	800116c <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d117      	bne.n	80014c0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f7ff fddf 	bl	8001058 <SD_RxDataBlock>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00a      	beq.n	80014b6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80014a6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ed      	bne.n	8001490 <SD_disk_read+0x80>
 80014b4:	e000      	b.n	80014b8 <SD_disk_read+0xa8>
          break;
 80014b6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80014b8:	2100      	movs	r1, #0
 80014ba:	204c      	movs	r0, #76	@ 0x4c
 80014bc:	f7ff fe56 	bl	800116c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80014c0:	f7ff fcf8 	bl	8000eb4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80014c4:	f7ff fd1c 	bl	8000f00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	200000ac 	.word	0x200000ac

080014e4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <SD_disk_write+0x1c>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <SD_disk_write+0x20>
    return RES_PARERR;
 8001500:	2304      	movs	r3, #4
 8001502:	e06b      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001504:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <SD_disk_write+0x100>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001512:	2303      	movs	r3, #3
 8001514:	e062      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001516:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <SD_disk_write+0x100>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001524:	2302      	movs	r3, #2
 8001526:	e059      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <SD_disk_write+0x104>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800153a:	f7ff fcaf 	bl	8000e9c <SELECT>
  
  if (count == 1) 
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d110      	bne.n	8001566 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	2058      	movs	r0, #88	@ 0x58
 8001548:	f7ff fe10 	bl	800116c <SD_SendCmd>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d13a      	bne.n	80015c8 <SD_disk_write+0xe4>
 8001552:	21fe      	movs	r1, #254	@ 0xfe
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f7ff fdb5 	bl	80010c4 <SD_TxDataBlock>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d033      	beq.n	80015c8 <SD_disk_write+0xe4>
      count = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	e030      	b.n	80015c8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <SD_disk_write+0x104>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001572:	2100      	movs	r1, #0
 8001574:	2077      	movs	r0, #119	@ 0x77
 8001576:	f7ff fdf9 	bl	800116c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	2057      	movs	r0, #87	@ 0x57
 800157e:	f7ff fdf5 	bl	800116c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	2059      	movs	r0, #89	@ 0x59
 8001586:	f7ff fdf1 	bl	800116c <SD_SendCmd>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11b      	bne.n	80015c8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001590:	21fc      	movs	r1, #252	@ 0xfc
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff fd96 	bl	80010c4 <SD_TxDataBlock>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <SD_disk_write+0xac>
 80015b2:	e000      	b.n	80015b6 <SD_disk_write+0xd2>
          break;
 80015b4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80015b6:	21fd      	movs	r1, #253	@ 0xfd
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fd83 	bl	80010c4 <SD_TxDataBlock>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80015c8:	f7ff fc74 	bl	8000eb4 <DESELECT>
  SPI_RxByte();
 80015cc:	f7ff fc98 	bl	8000f00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	200000ac 	.word	0x200000ac

080015ec <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08b      	sub	sp, #44	@ 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	603a      	str	r2, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	460b      	mov	r3, r1
 80015fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001606:	2304      	movs	r3, #4
 8001608:	e119      	b.n	800183e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d129      	bne.n	800166a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d017      	beq.n	800164e <SD_disk_ioctl+0x62>
 800161e:	2b02      	cmp	r3, #2
 8001620:	dc1f      	bgt.n	8001662 <SD_disk_ioctl+0x76>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <SD_disk_ioctl+0x40>
 8001626:	2b01      	cmp	r3, #1
 8001628:	d00b      	beq.n	8001642 <SD_disk_ioctl+0x56>
 800162a:	e01a      	b.n	8001662 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800162c:	f7ff fd08 	bl	8001040 <SD_CheckPower>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001636:	f7ff fcf7 	bl	8001028 <SD_PowerOff>
      res = RES_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001640:	e0fb      	b.n	800183a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001642:	f7ff fca5 	bl	8000f90 <SD_PowerOn>
      res = RES_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800164c:	e0f5      	b.n	800183a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5c      	adds	r4, r3, #1
 8001652:	f7ff fcf5 	bl	8001040 <SD_CheckPower>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001660:	e0eb      	b.n	800183a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001662:	2304      	movs	r3, #4
 8001664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001668:	e0e7      	b.n	800183a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800166a:	4b77      	ldr	r3, [pc, #476]	@ (8001848 <SD_disk_ioctl+0x25c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001678:	2303      	movs	r3, #3
 800167a:	e0e0      	b.n	800183e <SD_disk_ioctl+0x252>
    
    SELECT();
 800167c:	f7ff fc0e 	bl	8000e9c <SELECT>
    
    switch (ctrl) 
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b0d      	cmp	r3, #13
 8001684:	f200 80ca 	bhi.w	800181c <SD_disk_ioctl+0x230>
 8001688:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <SD_disk_ioctl+0xa4>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	08001787 	.word	0x08001787
 8001694:	080016c9 	.word	0x080016c9
 8001698:	08001777 	.word	0x08001777
 800169c:	0800181d 	.word	0x0800181d
 80016a0:	0800181d 	.word	0x0800181d
 80016a4:	0800181d 	.word	0x0800181d
 80016a8:	0800181d 	.word	0x0800181d
 80016ac:	0800181d 	.word	0x0800181d
 80016b0:	0800181d 	.word	0x0800181d
 80016b4:	0800181d 	.word	0x0800181d
 80016b8:	0800181d 	.word	0x0800181d
 80016bc:	08001799 	.word	0x08001799
 80016c0:	080017bd 	.word	0x080017bd
 80016c4:	080017e1 	.word	0x080017e1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80016c8:	2100      	movs	r1, #0
 80016ca:	2049      	movs	r0, #73	@ 0x49
 80016cc:	f7ff fd4e 	bl	800116c <SD_SendCmd>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80a6 	bne.w	8001824 <SD_disk_ioctl+0x238>
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fcba 	bl	8001058 <SD_RxDataBlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 809c 	beq.w	8001824 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10d      	bne.n	8001712 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	461a      	mov	r2, r3
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001708:	8bfb      	ldrh	r3, [r7, #30]
 800170a:	029a      	lsls	r2, r3, #10
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e02d      	b.n	800176e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001712:	7c7b      	ldrb	r3, [r7, #17]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b2da      	uxtb	r2, r3
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	09db      	lsrs	r3, r3, #7
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4413      	add	r3, r2
 8001722:	b2da      	uxtb	r2, r3
 8001724:	7d7b      	ldrb	r3, [r7, #21]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0306 	and.w	r3, r3, #6
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	3302      	adds	r3, #2
 8001736:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800173a:	7d3b      	ldrb	r3, [r7, #20]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	7cfb      	ldrb	r3, [r7, #19]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	b29b      	uxth	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b29a      	uxth	r2, r3
 800174c:	7cbb      	ldrb	r3, [r7, #18]
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	b29b      	uxth	r3, r3
 8001752:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001756:	b29b      	uxth	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	3301      	adds	r3, #1
 800175e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001760:	8bfa      	ldrh	r2, [r7, #30]
 8001762:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001766:	3b09      	subs	r3, #9
 8001768:	409a      	lsls	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001774:	e056      	b.n	8001824 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001784:	e055      	b.n	8001832 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001786:	f7ff fbe7 	bl	8000f58 <SD_ReadyWait>
 800178a:	4603      	mov	r3, r0
 800178c:	2bff      	cmp	r3, #255	@ 0xff
 800178e:	d14b      	bne.n	8001828 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001796:	e047      	b.n	8001828 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001798:	2100      	movs	r1, #0
 800179a:	2049      	movs	r0, #73	@ 0x49
 800179c:	f7ff fce6 	bl	800116c <SD_SendCmd>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d142      	bne.n	800182c <SD_disk_ioctl+0x240>
 80017a6:	2110      	movs	r1, #16
 80017a8:	6a38      	ldr	r0, [r7, #32]
 80017aa:	f7ff fc55 	bl	8001058 <SD_RxDataBlock>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03b      	beq.n	800182c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017ba:	e037      	b.n	800182c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017bc:	2100      	movs	r1, #0
 80017be:	204a      	movs	r0, #74	@ 0x4a
 80017c0:	f7ff fcd4 	bl	800116c <SD_SendCmd>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d132      	bne.n	8001830 <SD_disk_ioctl+0x244>
 80017ca:	2110      	movs	r1, #16
 80017cc:	6a38      	ldr	r0, [r7, #32]
 80017ce:	f7ff fc43 	bl	8001058 <SD_RxDataBlock>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02b      	beq.n	8001830 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017de:	e027      	b.n	8001830 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80017e0:	2100      	movs	r1, #0
 80017e2:	207a      	movs	r0, #122	@ 0x7a
 80017e4:	f7ff fcc2 	bl	800116c <SD_SendCmd>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017f4:	e00b      	b.n	800180e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80017f6:	6a3c      	ldr	r4, [r7, #32]
 80017f8:	1c63      	adds	r3, r4, #1
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	f7ff fb80 	bl	8000f00 <SPI_RxByte>
 8001800:	4603      	mov	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001804:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001808:	3301      	adds	r3, #1
 800180a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800180e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001812:	2b03      	cmp	r3, #3
 8001814:	d9ef      	bls.n	80017f6 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 800181c:	2304      	movs	r3, #4
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001822:	e006      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001824:	bf00      	nop
 8001826:	e004      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001828:	bf00      	nop
 800182a:	e002      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001830:	bf00      	nop
    }
    
    DESELECT();
 8001832:	f7ff fb3f 	bl	8000eb4 <DESELECT>
    SPI_RxByte();
 8001836:	f7ff fb63 	bl	8000f00 <SPI_RxByte>
  }
  
  return res;
 800183a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800183e:	4618      	mov	r0, r3
 8001840:	372c      	adds	r7, #44	@ 0x2c
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000

0800184c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <vApplicationGetIdleTaskMemory+0x2c>)
 800185c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	4a06      	ldr	r2, [pc, #24]	@ (800187c <vApplicationGetIdleTaskMemory+0x30>)
 8001862:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2280      	movs	r2, #128	@ 0x80
 8001868:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200000b0 	.word	0x200000b0
 800187c:	20000104 	.word	0x20000104

08001880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001886:	f002 ff5b 	bl	8004740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188a:	f000 f877 	bl	800197c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188e:	f000 fa89 	bl	8001da4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001892:	f000 fa67 	bl	8001d64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001896:	f000 fa3b 	bl	8001d10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800189a:	f000 f92d 	bl	8001af8 <MX_I2C1_Init>
  MX_SPI3_Init();
 800189e:	f000 f9b3 	bl	8001c08 <MX_SPI3_Init>
  MX_RTC_Init();
 80018a2:	f000 f957 	bl	8001b54 <MX_RTC_Init>
  MX_ADC1_Init();
 80018a6:	f000 f8d5 	bl	8001a54 <MX_ADC1_Init>
  MX_TIM3_Init();
 80018aa:	f000 f9e3 	bl	8001c74 <MX_TIM3_Init>
  MX_FATFS_Init();
 80018ae:	f007 fdad 	bl	800940c <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  keypad_sd_sync = xSemaphoreCreateBinary();
 80018b2:	2203      	movs	r2, #3
 80018b4:	2100      	movs	r1, #0
 80018b6:	2001      	movs	r0, #1
 80018b8:	f00d fe71 	bl	800f59e <xQueueGenericCreate>
 80018bc:	4603      	mov	r3, r0
 80018be:	4a23      	ldr	r2, [pc, #140]	@ (800194c <main+0xcc>)
 80018c0:	6013      	str	r3, [r2, #0]
  sd_display_sync = xSemaphoreCreateBinary();
 80018c2:	2203      	movs	r2, #3
 80018c4:	2100      	movs	r1, #0
 80018c6:	2001      	movs	r0, #1
 80018c8:	f00d fe69 	bl	800f59e <xQueueGenericCreate>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a20      	ldr	r2, [pc, #128]	@ (8001950 <main+0xd0>)
 80018d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_message_t));
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	2001      	movs	r0, #1
 80018d8:	f00d fe61 	bl	800f59e <xQueueGenericCreate>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a1d      	ldr	r2, [pc, #116]	@ (8001954 <main+0xd4>)
 80018e0:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 80018e2:	2200      	movs	r2, #0
 80018e4:	2101      	movs	r1, #1
 80018e6:	2001      	movs	r0, #1
 80018e8:	f00d fe59 	bl	800f59e <xQueueGenericCreate>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001958 <main+0xd8>)
 80018f0:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 80018f2:	2300      	movs	r3, #0
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	2304      	movs	r3, #4
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2300      	movs	r3, #0
 80018fc:	2280      	movs	r2, #128	@ 0x80
 80018fe:	4917      	ldr	r1, [pc, #92]	@ (800195c <main+0xdc>)
 8001900:	4817      	ldr	r0, [pc, #92]	@ (8001960 <main+0xe0>)
 8001902:	f00e fc83 	bl	801020c <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 12 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8001906:	2300      	movs	r3, #0
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	2302      	movs	r3, #2
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001914:	4913      	ldr	r1, [pc, #76]	@ (8001964 <main+0xe4>)
 8001916:	4814      	ldr	r0, [pc, #80]	@ (8001968 <main+0xe8>)
 8001918:	f00e fc78 	bl	801020c <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800191c:	2300      	movs	r3, #0
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	2301      	movs	r3, #1
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2300      	movs	r3, #0
 8001926:	2280      	movs	r2, #128	@ 0x80
 8001928:	4910      	ldr	r1, [pc, #64]	@ (800196c <main+0xec>)
 800192a:	4811      	ldr	r0, [pc, #68]	@ (8001970 <main+0xf0>)
 800192c:	f00e fc6e 	bl	801020c <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2300      	movs	r3, #0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	2280      	movs	r2, #128	@ 0x80
 800193c:	490d      	ldr	r1, [pc, #52]	@ (8001974 <main+0xf4>)
 800193e:	480e      	ldr	r0, [pc, #56]	@ (8001978 <main+0xf8>)
 8001940:	f00e fc64 	bl	801020c <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001944:	f00e fdd0 	bl	80104e8 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <main+0xc8>
 800194c:	20000510 	.word	0x20000510
 8001950:	20000514 	.word	0x20000514
 8001954:	2000050c 	.word	0x2000050c
 8001958:	20000508 	.word	0x20000508
 800195c:	0801491c 	.word	0x0801491c
 8001960:	08004239 	.word	0x08004239
 8001964:	0801492c 	.word	0x0801492c
 8001968:	0800447d 	.word	0x0800447d
 800196c:	08014938 	.word	0x08014938
 8001970:	080043dd 	.word	0x080043dd
 8001974:	08014948 	.word	0x08014948
 8001978:	08001ef1 	.word	0x08001ef1

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	@ 0x50
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2230      	movs	r2, #48	@ 0x30
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f011 fee3 	bl	8013756 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <SystemClock_Config+0xd0>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <SystemClock_Config+0xd0>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b0:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <SystemClock_Config+0xd0>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <SystemClock_Config+0xd4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019c8:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <SystemClock_Config+0xd4>)
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <SystemClock_Config+0xd4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019dc:	2309      	movs	r3, #9
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e6:	2301      	movs	r3, #1
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f4:	2304      	movs	r3, #4
 80019f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80019f8:	2340      	movs	r3, #64	@ 0x40
 80019fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a00:	2307      	movs	r3, #7
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 ff67 	bl	80068dc <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a14:	f000 fa99 	bl	8001f4a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2102      	movs	r1, #2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f005 f9c9 	bl	8006dcc <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a40:	f000 fa83 	bl	8001f4a <Error_Handler>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3750      	adds	r7, #80	@ 0x50
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a66:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a68:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <MX_ADC1_Init+0xa0>)
 8001a6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a72:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab6:	480e      	ldr	r0, [pc, #56]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001ab8:	f002 fe84 	bl	80047c4 <HAL_ADC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001ac2:	f000 fa42 	bl	8001f4a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001ad8:	f003 f930 	bl	8004d3c <HAL_ADC_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001ae2:	f000 fa32 	bl	8001f4a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000304 	.word	0x20000304
 8001af4:	40012000 	.word	0x40012000

08001af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001afe:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <MX_I2C1_Init+0x54>)
 8001b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b04:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <MX_I2C1_Init+0x58>)
 8001b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b36:	f004 fa23 	bl	8005f80 <HAL_I2C_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b40:	f000 fa03 	bl	8001f4a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200003ac 	.word	0x200003ac
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	00061a80 	.word	0x00061a80

08001b54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b6c:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b6e:	4a25      	ldr	r2, [pc, #148]	@ (8001c04 <MX_RTC_Init+0xb0>)
 8001b70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b72:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b78:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b7a:	227f      	movs	r2, #127	@ 0x7f
 8001b7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b80:	22ff      	movs	r2, #255	@ 0xff
 8001b82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b96:	481a      	ldr	r0, [pc, #104]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b98:	f005 fc58 	bl	800744c <HAL_RTC_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ba2:	f000 f9d2 	bl	8001f4a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8001ba6:	230f      	movs	r3, #15
 8001ba8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480f      	ldr	r0, [pc, #60]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001bc2:	f005 fcc6 	bl	8007552 <HAL_RTC_SetTime>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001bcc:	f000 f9bd 	bl	8001f4a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8001bd8:	2306      	movs	r3, #6
 8001bda:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001bdc:	2318      	movs	r3, #24
 8001bde:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001be8:	f005 fdab 	bl	8007742 <HAL_RTC_SetDate>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001bf2:	f000 f9aa 	bl	8001f4a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000400 	.word	0x20000400
 8001c04:	40002800 	.word	0x40002800

08001c08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c0e:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <MX_SPI3_Init+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c12:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c54:	220a      	movs	r2, #10
 8001c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c5a:	f005 ff03 	bl	8007a64 <HAL_SPI_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c64:	f000 f971 	bl	8001f4a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000420 	.word	0x20000420
 8001c70:	40003c00 	.word	0x40003c00

08001c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <MX_TIM3_Init+0x98>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5334 - 1;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001ca4:	f241 42d5 	movw	r2, #5333	@ 0x14d5
 8001ca8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cb6:	4814      	ldr	r0, [pc, #80]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cb8:	f006 fb34 	bl	8008324 <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cc2:	f000 f942 	bl	8001f4a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cd4:	f006 fcf7 	bl	80086c6 <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001cde:	f000 f934 	bl	8001f4a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cf0:	f006 fefe 	bl	8008af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cfa:	f000 f926 	bl	8001f4a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000478 	.word	0x20000478
 8001d0c:	40000400 	.word	0x40000400

08001d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <MX_USART2_UART_Init+0x50>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d48:	f006 ff54 	bl	8008bf4 <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d52:	f000 f8fa 	bl	8001f4a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200004c0 	.word	0x200004c0
 8001d60:	40004400 	.word	0x40004400

08001d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a0b      	ldr	r2, [pc, #44]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	2038      	movs	r0, #56	@ 0x38
 8001d8c:	f003 fb38 	bl	8005400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d90:	2038      	movs	r0, #56	@ 0x38
 8001d92:	f003 fb51 	bl	8005438 <HAL_NVIC_EnableIRQ>

}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b48      	ldr	r3, [pc, #288]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a47      	ldr	r2, [pc, #284]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b45      	ldr	r3, [pc, #276]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a40      	ldr	r2, [pc, #256]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a39      	ldr	r2, [pc, #228]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b37      	ldr	r3, [pc, #220]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b33      	ldr	r3, [pc, #204]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a32      	ldr	r2, [pc, #200]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b30      	ldr	r3, [pc, #192]	@ (8001ee0 <MX_GPIO_Init+0x13c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001e30:	482c      	ldr	r0, [pc, #176]	@ (8001ee4 <MX_GPIO_Init+0x140>)
 8001e32:	f004 f88b 	bl	8005f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001e3c:	482a      	ldr	r0, [pc, #168]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e3e:	f004 f885 	bl	8005f4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SDB4_GPIO_Port, CS_SDB4_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2110      	movs	r1, #16
 8001e46:	4829      	ldr	r0, [pc, #164]	@ (8001eec <MX_GPIO_Init+0x148>)
 8001e48:	f004 f880 	bl	8005f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e52:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	4821      	ldr	r0, [pc, #132]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e64:	f003 fed6 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e68:	230f      	movs	r3, #15
 8001e6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e70:	2302      	movs	r3, #2
 8001e72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	481b      	ldr	r0, [pc, #108]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001e7c:	f003 feca 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_SD_Pin;
 8001e80:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <MX_GPIO_Init+0x140>)
 8001e9a:	f003 febb 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e9e:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001ea2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480c      	ldr	r0, [pc, #48]	@ (8001ee8 <MX_GPIO_Init+0x144>)
 8001eb8:	f003 feac 	bl	8005c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SDB4_Pin */
  GPIO_InitStruct.Pin = CS_SDB4_Pin;
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SDB4_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <MX_GPIO_Init+0x148>)
 8001ed4:	f003 fe9e 	bl	8005c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	@ 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020400 	.word	0x40020400

08001ef0 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	while(1);
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <idle_task+0x8>

08001efc <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8001f04:	4806      	ldr	r0, [pc, #24]	@ (8001f20 <HAL_ADC_ConvCpltCallback+0x24>)
 8001f06:	f006 fabf 	bl	8008488 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8001f0a:	4806      	ldr	r0, [pc, #24]	@ (8001f24 <HAL_ADC_ConvCpltCallback+0x28>)
 8001f0c:	f002 fe9e 	bl	8004c4c <HAL_ADC_Stop_DMA>
	conv_cplt_flag = true;
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000478 	.word	0x20000478
 8001f24:	20000304 	.word	0x20000304
 8001f28:	20000518 	.word	0x20000518

08001f2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3c:	d101      	bne.n	8001f42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f3e:	f002 fc21 	bl	8004784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4e:	b672      	cpsid	i
}
 8001f50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f52:	bf00      	nop
 8001f54:	e7fd      	b.n	8001f52 <Error_Handler+0x8>
	...

08001f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_MspInit+0x54>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	4a11      	ldr	r2, [pc, #68]	@ (8001fac <HAL_MspInit+0x54>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <HAL_MspInit+0x54>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_MspInit+0x54>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_MspInit+0x54>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_MspInit+0x54>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	210f      	movs	r1, #15
 8001f9a:	f06f 0001 	mvn.w	r0, #1
 8001f9e:	f003 fa2f 	bl	8005400 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a32      	ldr	r2, [pc, #200]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d15e      	bne.n	8002090 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b31      	ldr	r3, [pc, #196]	@ (800209c <HAL_ADC_MspInit+0xec>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a30      	ldr	r2, [pc, #192]	@ (800209c <HAL_ADC_MspInit+0xec>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800209c <HAL_ADC_MspInit+0xec>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <HAL_ADC_MspInit+0xec>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a29      	ldr	r2, [pc, #164]	@ (800209c <HAL_ADC_MspInit+0xec>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_ADC_MspInit+0xec>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800200a:	2301      	movs	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200e:	2303      	movs	r3, #3
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4820      	ldr	r0, [pc, #128]	@ (80020a0 <HAL_ADC_MspInit+0xf0>)
 800201e:	f003 fdf9 	bl	8005c14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 8002024:	4a20      	ldr	r2, [pc, #128]	@ (80020a8 <HAL_ADC_MspInit+0xf8>)
 8002026:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002028:	4b1e      	ldr	r3, [pc, #120]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002034:	4b1b      	ldr	r3, [pc, #108]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800203a:	4b1a      	ldr	r3, [pc, #104]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 800203c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002040:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002042:	4b18      	ldr	r3, [pc, #96]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 8002044:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002048:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 800204c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002052:	4b14      	ldr	r3, [pc, #80]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 8002054:	2200      	movs	r2, #0
 8002056:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800205e:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 8002060:	2200      	movs	r2, #0
 8002062:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002064:	480f      	ldr	r0, [pc, #60]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 8002066:	f003 f9f5 	bl	8005454 <HAL_DMA_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002070:	f7ff ff6b 	bl	8001f4a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 8002078:	639a      	str	r2, [r3, #56]	@ 0x38
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <HAL_ADC_MspInit+0xf4>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2105      	movs	r1, #5
 8002084:	2012      	movs	r0, #18
 8002086:	f003 f9bb 	bl	8005400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800208a:	2012      	movs	r0, #18
 800208c:	f003 f9d4 	bl	8005438 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002090:	bf00      	nop
 8002092:	3728      	adds	r7, #40	@ 0x28
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40012000 	.word	0x40012000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	2000034c 	.word	0x2000034c
 80020a8:	40026410 	.word	0x40026410

080020ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	@ 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a19      	ldr	r2, [pc, #100]	@ (8002130 <HAL_I2C_MspInit+0x84>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d12b      	bne.n	8002126 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020ea:	23c0      	movs	r3, #192	@ 0xc0
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ee:	2312      	movs	r3, #18
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f6:	2303      	movs	r3, #3
 80020f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020fa:	2304      	movs	r3, #4
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <HAL_I2C_MspInit+0x8c>)
 8002106:	f003 fd85 	bl	8005c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	4a08      	ldr	r2, [pc, #32]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 8002114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002118:	6413      	str	r3, [r2, #64]	@ 0x40
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_I2C_MspInit+0x88>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	@ 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40005400 	.word	0x40005400
 8002134:	40023800 	.word	0x40023800
 8002138:	40020400 	.word	0x40020400

0800213c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0c      	ldr	r2, [pc, #48]	@ (800218c <HAL_RTC_MspInit+0x50>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d111      	bne.n	8002182 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800215e:	2302      	movs	r3, #2
 8002160:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002162:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002166:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	4618      	mov	r0, r3
 800216e:	f005 f87f 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002178:	f7ff fee7 	bl	8001f4a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800217c:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <HAL_RTC_MspInit+0x54>)
 800217e:	2201      	movs	r2, #1
 8002180:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002182:	bf00      	nop
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40002800 	.word	0x40002800
 8002190:	42470e3c 	.word	0x42470e3c

08002194 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a22      	ldr	r2, [pc, #136]	@ (800223c <HAL_SPI_MspInit+0xa8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d13d      	bne.n	8002232 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <HAL_SPI_MspInit+0xac>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	4a20      	ldr	r2, [pc, #128]	@ (8002240 <HAL_SPI_MspInit+0xac>)
 80021c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <HAL_SPI_MspInit+0xac>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_SPI_MspInit+0xac>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a19      	ldr	r2, [pc, #100]	@ (8002240 <HAL_SPI_MspInit+0xac>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_SPI_MspInit+0xac>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002200:	2306      	movs	r3, #6
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	480e      	ldr	r0, [pc, #56]	@ (8002244 <HAL_SPI_MspInit+0xb0>)
 800220c:	f003 fd02 	bl	8005c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002210:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800221a:	2301      	movs	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002222:	2306      	movs	r3, #6
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	@ (8002244 <HAL_SPI_MspInit+0xb0>)
 800222e:	f003 fcf1 	bl	8005c14 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	@ 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40003c00 	.word	0x40003c00
 8002240:	40023800 	.word	0x40023800
 8002244:	40020800 	.word	0x40020800

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0e      	ldr	r2, [pc, #56]	@ (8002290 <HAL_TIM_Base_MspInit+0x48>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d115      	bne.n	8002286 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b0d      	ldr	r3, [pc, #52]	@ (8002294 <HAL_TIM_Base_MspInit+0x4c>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <HAL_TIM_Base_MspInit+0x4c>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6413      	str	r3, [r2, #64]	@ 0x40
 800226a:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <HAL_TIM_Base_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2105      	movs	r1, #5
 800227a:	201d      	movs	r0, #29
 800227c:	f003 f8c0 	bl	8005400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002280:	201d      	movs	r0, #29
 8002282:	f003 f8d9 	bl	8005438 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40000400 	.word	0x40000400
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a19      	ldr	r2, [pc, #100]	@ (800231c <HAL_UART_MspInit+0x84>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d12b      	bne.n	8002312 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <HAL_UART_MspInit+0x88>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <HAL_UART_MspInit+0x88>)
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ca:	4b15      	ldr	r3, [pc, #84]	@ (8002320 <HAL_UART_MspInit+0x88>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_UART_MspInit+0x88>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_UART_MspInit+0x88>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_UART_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022f2:	230c      	movs	r3, #12
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002302:	2307      	movs	r3, #7
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	@ (8002324 <HAL_UART_MspInit+0x8c>)
 800230e:	f003 fc81 	bl	8005c14 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	@ 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004400 	.word	0x40004400
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000

08002328 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	@ 0x38
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b34      	ldr	r3, [pc, #208]	@ (8002410 <HAL_InitTick+0xe8>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	4a33      	ldr	r2, [pc, #204]	@ (8002410 <HAL_InitTick+0xe8>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6413      	str	r3, [r2, #64]	@ 0x40
 8002348:	4b31      	ldr	r3, [pc, #196]	@ (8002410 <HAL_InitTick+0xe8>)
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002354:	f107 0210 	add.w	r2, r7, #16
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f004 ff54 	bl	800720c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800236e:	f004 ff25 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 8002372:	6378      	str	r0, [r7, #52]	@ 0x34
 8002374:	e004      	b.n	8002380 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002376:	f004 ff21 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 800237a:	4603      	mov	r3, r0
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002382:	4a24      	ldr	r2, [pc, #144]	@ (8002414 <HAL_InitTick+0xec>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	0c9b      	lsrs	r3, r3, #18
 800238a:	3b01      	subs	r3, #1
 800238c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800238e:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <HAL_InitTick+0xf0>)
 8002390:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002394:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002396:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <HAL_InitTick+0xf0>)
 8002398:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800239c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800239e:	4a1e      	ldr	r2, [pc, #120]	@ (8002418 <HAL_InitTick+0xf0>)
 80023a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80023a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <HAL_InitTick+0xf0>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <HAL_InitTick+0xf0>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_InitTick+0xf0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80023b6:	4818      	ldr	r0, [pc, #96]	@ (8002418 <HAL_InitTick+0xf0>)
 80023b8:	f005 ffb4 	bl	8008324 <HAL_TIM_Base_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11b      	bne.n	8002402 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80023ca:	4813      	ldr	r0, [pc, #76]	@ (8002418 <HAL_InitTick+0xf0>)
 80023cc:	f005 fffa 	bl	80083c4 <HAL_TIM_Base_Start_IT>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d111      	bne.n	8002402 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023de:	201c      	movs	r0, #28
 80023e0:	f003 f82a 	bl	8005438 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	d808      	bhi.n	80023fc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80023ea:	2200      	movs	r2, #0
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	201c      	movs	r0, #28
 80023f0:	f003 f806 	bl	8005400 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f4:	4a09      	ldr	r2, [pc, #36]	@ (800241c <HAL_InitTick+0xf4>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e002      	b.n	8002402 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002402:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002406:	4618      	mov	r0, r3
 8002408:	3738      	adds	r7, #56	@ 0x38
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	431bde83 	.word	0x431bde83
 8002418:	2000051c 	.word	0x2000051c
 800241c:	20000014 	.word	0x20000014

08002420 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002424:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <SDTimer_Handler+0x40>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <SDTimer_Handler+0x1c>
    Timer1--;
 800242e:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <SDTimer_Handler+0x40>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <SDTimer_Handler+0x40>)
 800243a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800243c:	4b09      	ldr	r3, [pc, #36]	@ (8002464 <SDTimer_Handler+0x44>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <SDTimer_Handler+0x34>
    Timer2--;
 8002446:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <SDTimer_Handler+0x44>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <SDTimer_Handler+0x44>)
 8002452:	701a      	strb	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000565 	.word	0x20000565
 8002464:	20000566 	.word	0x20000566

08002468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800246c:	bf00      	nop
 800246e:	e7fd      	b.n	800246c <NMI_Handler+0x4>

08002470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002474:	bf00      	nop
 8002476:	e7fd      	b.n	8002474 <HardFault_Handler+0x4>

08002478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800247c:	bf00      	nop
 800247e:	e7fd      	b.n	800247c <MemManage_Handler+0x4>

08002480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <UsageFault_Handler+0x4>

08002490 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024a4:	4802      	ldr	r0, [pc, #8]	@ (80024b0 <ADC_IRQHandler+0x10>)
 80024a6:	f002 f9d0 	bl	800484a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000304 	.word	0x20000304

080024b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <TIM2_IRQHandler+0x30>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <TIM2_IRQHandler+0x30>)
 80024c4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 80024c6:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <TIM2_IRQHandler+0x30>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b09      	cmp	r3, #9
 80024ce:	d904      	bls.n	80024da <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 80024d0:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <TIM2_IRQHandler+0x30>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 80024d6:	f7ff ffa3 	bl	8002420 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024da:	4803      	ldr	r0, [pc, #12]	@ (80024e8 <TIM2_IRQHandler+0x34>)
 80024dc:	f006 f803 	bl	80084e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000564 	.word	0x20000564
 80024e8:	2000051c 	.word	0x2000051c

080024ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024f0:	4802      	ldr	r0, [pc, #8]	@ (80024fc <TIM3_IRQHandler+0x10>)
 80024f2:	f005 fff8 	bl	80084e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000478 	.word	0x20000478

08002500 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <DMA2_Stream0_IRQHandler+0x10>)
 8002506:	f003 f91b 	bl	8005740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000034c 	.word	0x2000034c

08002514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return 1;
 8002518:	2301      	movs	r3, #1
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_kill>:

int _kill(int pid, int sig)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800252e:	f011 f9df 	bl	80138f0 <__errno>
 8002532:	4603      	mov	r3, r0
 8002534:	2216      	movs	r2, #22
 8002536:	601a      	str	r2, [r3, #0]
  return -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <_exit>:

void _exit (int status)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ffe7 	bl	8002524 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002556:	bf00      	nop
 8002558:	e7fd      	b.n	8002556 <_exit+0x12>

0800255a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e00a      	b.n	8002582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800256c:	f3af 8000 	nop.w
 8002570:	4601      	mov	r1, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	b2ca      	uxtb	r2, r1
 800257a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	dbf0      	blt.n	800256c <_read+0x12>
  }

  return len;
 800258a:	687b      	ldr	r3, [r7, #4]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e009      	b.n	80025ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	60ba      	str	r2, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	dbf1      	blt.n	80025a6 <_write+0x12>
  }
  return len;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_close>:

int _close(int file)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025f4:	605a      	str	r2, [r3, #4]
  return 0;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_isatty>:

int _isatty(int file)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800261a:	b480      	push	{r7}
 800261c:	b085      	sub	sp, #20
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	@ (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	@ (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f011 f944 	bl	80138f0 <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	4a05      	ldr	r2, [pc, #20]	@ (8002698 <_sbrk+0x64>)
 8002684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20018000 	.word	0x20018000
 8002694:	00000400 	.word	0x00000400
 8002698:	20000568 	.word	0x20000568
 800269c:	20010560 	.word	0x20010560

080026a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a4:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <SystemInit+0x20>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	4a05      	ldr	r2, [pc, #20]	@ (80026c0 <SystemInit+0x20>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026c8:	f7ff ffea 	bl	80026a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026cc:	480c      	ldr	r0, [pc, #48]	@ (8002700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026ce:	490d      	ldr	r1, [pc, #52]	@ (8002704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d4:	e002      	b.n	80026dc <LoopCopyDataInit>

080026d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026da:	3304      	adds	r3, #4

080026dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e0:	d3f9      	bcc.n	80026d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e2:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e8:	e001      	b.n	80026ee <LoopFillZerobss>

080026ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ec:	3204      	adds	r2, #4

080026ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f0:	d3fb      	bcc.n	80026ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f011 f903 	bl	80138fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7ff f8c3 	bl	8001880 <main>
  bx  lr    
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002704:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002708:	0802c92c 	.word	0x0802c92c
  ldr r2, =_sbss
 800270c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002710:	2001055c 	.word	0x2001055c

08002714 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <DMA1_Stream0_IRQHandler>

08002716 <display_init>:

#define LINE_HEIGHT 18  // Altura de la fuente (ajustar según la fuente usada)
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 64
/*================[Public functions]=====================*/
void display_init(void){
 8002716:	b580      	push	{r7, lr}
 8002718:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 800271a:	f000 fa21 	bl	8002b60 <ssd1306_Init>
	return;
 800271e:	bf00      	nop
}
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <display_text>:

void display_text(const char *text,  uint8_t font_size) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af02      	add	r7, sp, #8
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
    uint8_t x = 0;  			// Posición inicial en X
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;  			// Posición inicial en Y
 8002734:	2300      	movs	r3, #0
 8002736:	73bb      	strb	r3, [r7, #14]
    uint8_t char_width = 0;   	// Ancho del carácter actual
 8002738:	2300      	movs	r3, #0
 800273a:	737b      	strb	r3, [r7, #13]
    uint8_t line_height = 0;  	// Altura de la línea actual
 800273c:	2300      	movs	r3, #0
 800273e:	733b      	strb	r3, [r7, #12]
    // Configurar la fuente según el tamaño
    switch (font_size) {
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	2b03      	cmp	r3, #3
 8002744:	d010      	beq.n	8002768 <display_text+0x44>
 8002746:	2b03      	cmp	r3, #3
 8002748:	dc13      	bgt.n	8002772 <display_text+0x4e>
 800274a:	2b01      	cmp	r3, #1
 800274c:	d002      	beq.n	8002754 <display_text+0x30>
 800274e:	2b02      	cmp	r3, #2
 8002750:	d005      	beq.n	800275e <display_text+0x3a>
 8002752:	e00e      	b.n	8002772 <display_text+0x4e>
        case 1: 									// Tamaño pequeño
            char_width = 7;
 8002754:	2307      	movs	r3, #7
 8002756:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8002758:	230a      	movs	r3, #10
 800275a:	733b      	strb	r3, [r7, #12]
            break;
 800275c:	e00e      	b.n	800277c <display_text+0x58>
        case 2: 									// Tamaño mediano
            char_width = 11;
 800275e:	230b      	movs	r3, #11
 8002760:	737b      	strb	r3, [r7, #13]
            line_height = 18;
 8002762:	2312      	movs	r3, #18
 8002764:	733b      	strb	r3, [r7, #12]
            break;
 8002766:	e009      	b.n	800277c <display_text+0x58>
        case 3: 									// Tamaño grande
            char_width = 16;
 8002768:	2310      	movs	r3, #16
 800276a:	737b      	strb	r3, [r7, #13]
            line_height = 24;
 800276c:	2318      	movs	r3, #24
 800276e:	733b      	strb	r3, [r7, #12]
            break;
 8002770:	e004      	b.n	800277c <display_text+0x58>
        default: 									// Tamaño por defecto
            char_width = 7;
 8002772:	2307      	movs	r3, #7
 8002774:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8002776:	230a      	movs	r3, #10
 8002778:	733b      	strb	r3, [r7, #12]
            break;
 800277a:	bf00      	nop
    }

    ssd1306_Fill(Black);  // Limpiar la pantalla
 800277c:	2000      	movs	r0, #0
 800277e:	f000 fa59 	bl	8002c34 <ssd1306_Fill>

    while (*text) {
 8002782:	e053      	b.n	800282c <display_text+0x108>
        // Verificar si es un salto de línea manual
        if (*text == '\n') {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b0a      	cmp	r3, #10
 800278a:	d106      	bne.n	800279a <display_text+0x76>
            y += line_height;  											// Avanzo a la siguiente linea
 800278c:	7bba      	ldrb	r2, [r7, #14]
 800278e:	7b3b      	ldrb	r3, [r7, #12]
 8002790:	4413      	add	r3, r2
 8002792:	73bb      	strb	r3, [r7, #14]
            x = 0;             											// Reinicio x
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e040      	b.n	800281c <display_text+0xf8>
        } else {
            // Escribir el carácter actual
            ssd1306_SetCursor(x, y);
 800279a:	7bba      	ldrb	r2, [r7, #14]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fb91 	bl	8002ec8 <ssd1306_SetCursor>
            if(font_size == 1){
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d108      	bne.n	80027be <display_text+0x9a>
            	ssd1306_WriteChar(*text, Font_7x10, White);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	7818      	ldrb	r0, [r3, #0]
 80027b0:	4b24      	ldr	r3, [pc, #144]	@ (8002844 <display_text+0x120>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	9200      	str	r2, [sp, #0]
 80027b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b8:	f000 fad0 	bl	8002d5c <ssd1306_WriteChar>
 80027bc:	e01f      	b.n	80027fe <display_text+0xda>
            }
            else if(font_size == 2){
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d108      	bne.n	80027d6 <display_text+0xb2>
            	ssd1306_WriteChar(*text, Font_11x18, White);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7818      	ldrb	r0, [r3, #0]
 80027c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002848 <display_text+0x124>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	9200      	str	r2, [sp, #0]
 80027ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d0:	f000 fac4 	bl	8002d5c <ssd1306_WriteChar>
 80027d4:	e013      	b.n	80027fe <display_text+0xda>
            }
            else if(font_size == 3){
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d108      	bne.n	80027ee <display_text+0xca>
            	ssd1306_WriteChar(*text, Font_16x24, White);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7818      	ldrb	r0, [r3, #0]
 80027e0:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <display_text+0x128>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	9200      	str	r2, [sp, #0]
 80027e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e8:	f000 fab8 	bl	8002d5c <ssd1306_WriteChar>
 80027ec:	e007      	b.n	80027fe <display_text+0xda>
            }
            else{
            	ssd1306_WriteChar(*text, Font_7x10, White);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	7818      	ldrb	r0, [r3, #0]
 80027f2:	4b14      	ldr	r3, [pc, #80]	@ (8002844 <display_text+0x120>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	9200      	str	r2, [sp, #0]
 80027f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027fa:	f000 faaf 	bl	8002d5c <ssd1306_WriteChar>
            }

            // Avanzar la posición X
            x += char_width;  // Avanzar por el ancho de la fuente
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	7b7b      	ldrb	r3, [r7, #13]
 8002802:	4413      	add	r3, r2
 8002804:	73fb      	strb	r3, [r7, #15]
            if (x + char_width > DISPLAY_WIDTH) {  							// Si se pasa del ancho de pantalla
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	7b7b      	ldrb	r3, [r7, #13]
 800280a:	4413      	add	r3, r2
 800280c:	2b80      	cmp	r3, #128	@ 0x80
 800280e:	dd05      	ble.n	800281c <display_text+0xf8>
                x = 0;                      								// Reinicio x
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
                y += line_height;           								// Avanzo a la siguiente linea
 8002814:	7bba      	ldrb	r2, [r7, #14]
 8002816:	7b3b      	ldrb	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	73bb      	strb	r3, [r7, #14]
            }
        }

        // Avanzar al siguiente carácter
        text++;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3301      	adds	r3, #1
 8002820:	607b      	str	r3, [r7, #4]

        // Verificar si alcanzamos el final de la pantalla
        if (y + line_height > DISPLAY_HEIGHT) {
 8002822:	7bba      	ldrb	r2, [r7, #14]
 8002824:	7b3b      	ldrb	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	2b40      	cmp	r3, #64	@ 0x40
 800282a:	dc04      	bgt.n	8002836 <display_text+0x112>
    while (*text) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1a7      	bne.n	8002784 <display_text+0x60>
 8002834:	e000      	b.n	8002838 <display_text+0x114>
            break;  // No hay más espacio para mostrar texto
 8002836:	bf00      	nop
        }
    }

    ssd1306_UpdateScreen();  // Actualizar pantalla
 8002838:	f000 fa14 	bl	8002c64 <ssd1306_UpdateScreen>
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	08018690 	.word	0x08018690
 8002848:	0801869c 	.word	0x0801869c
 800284c:	080186b4 	.word	0x080186b4

08002850 <display_start_msg>:

void display_start_msg(void){
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 8002856:	2305      	movs	r3, #5
 8002858:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800285e:	2000      	movs	r0, #0
 8002860:	f000 f9e8 	bl	8002c34 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002864:	79ba      	ldrb	r2, [r7, #6]
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fb2c 	bl	8002ec8 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 8002870:	4b0f      	ldr	r3, [pc, #60]	@ (80028b0 <display_start_msg+0x60>)
 8002872:	2201      	movs	r2, #1
 8002874:	9200      	str	r2, [sp, #0]
 8002876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002878:	480e      	ldr	r0, [pc, #56]	@ (80028b4 <display_start_msg+0x64>)
 800287a:	f000 faff 	bl	8002e7c <ssd1306_WriteString>
	x += 15;
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	330f      	adds	r3, #15
 8002882:	71fb      	strb	r3, [r7, #7]
	y += 28;
 8002884:	79bb      	ldrb	r3, [r7, #6]
 8002886:	331c      	adds	r3, #28
 8002888:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800288a:	79ba      	ldrb	r2, [r7, #6]
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fb19 	bl	8002ec8 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <display_start_msg+0x60>)
 8002898:	2201      	movs	r2, #1
 800289a:	9200      	str	r2, [sp, #0]
 800289c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800289e:	4806      	ldr	r0, [pc, #24]	@ (80028b8 <display_start_msg+0x68>)
 80028a0:	f000 faec 	bl	8002e7c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80028a4:	f000 f9de 	bl	8002c64 <ssd1306_UpdateScreen>
	return;
 80028a8:	bf00      	nop
}
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	080186a8 	.word	0x080186a8
 80028b4:	08014954 	.word	0x08014954
 80028b8:	0801495c 	.word	0x0801495c

080028bc <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af02      	add	r7, sp, #8
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[SEQUENCE_LENGTH + 1] = {0};
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	2100      	movs	r1, #0
 80028d0:	460a      	mov	r2, r1
 80028d2:	801a      	strh	r2, [r3, #0]
 80028d4:	460a      	mov	r2, r1
 80028d6:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 80028d8:	230a      	movs	r3, #10
 80028da:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 80028dc:	231a      	movs	r3, #26
 80028de:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= SEQUENCE_LENGTH){
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d823      	bhi.n	800292e <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
 80028ea:	e008      	b.n	80028fe <display_sequence_entry_msg+0x42>
			message[i] = '*';
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	3318      	adds	r3, #24
 80028f0:	443b      	add	r3, r7
 80028f2:	222a      	movs	r2, #42	@ 0x2a
 80028f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	3301      	adds	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
 80028fe:	7dfa      	ldrb	r2, [r7, #23]
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	429a      	cmp	r2, r3
 8002904:	d3f2      	bcc.n	80028ec <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 8002906:	2000      	movs	r0, #0
 8002908:	f000 f994 	bl	8002c34 <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 800290c:	7d7a      	ldrb	r2, [r7, #21]
 800290e:	7dbb      	ldrb	r3, [r7, #22]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fad8 	bl	8002ec8 <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 8002918:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <display_sequence_entry_msg+0x7c>)
 800291a:	f107 000c 	add.w	r0, r7, #12
 800291e:	2201      	movs	r2, #1
 8002920:	9200      	str	r2, [sp, #0]
 8002922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002924:	f000 faaa 	bl	8002e7c <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002928:	f000 f99c 	bl	8002c64 <ssd1306_UpdateScreen>
	}
	return;
 800292c:	bf00      	nop
 800292e:	bf00      	nop
}
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	080186a8 	.word	0x080186a8

0800293c <display_timeout_msg>:


void display_timeout_msg(void){
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	display_text("\n Timeout!!!", 2);
 8002940:	2102      	movs	r1, #2
 8002942:	4802      	ldr	r0, [pc, #8]	@ (800294c <display_timeout_msg+0x10>)
 8002944:	f7ff feee 	bl	8002724 <display_text>
	return;
 8002948:	bf00      	nop
}
 800294a:	bd80      	pop	{r7, pc}
 800294c:	08014964 	.word	0x08014964

08002950 <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	display_text("  Ingrese\n secuencia\n  valida", 2);
 8002954:	2102      	movs	r1, #2
 8002956:	4802      	ldr	r0, [pc, #8]	@ (8002960 <display_incomplete_entry_msg+0x10>)
 8002958:	f7ff fee4 	bl	8002724 <display_text>
	return;
 800295c:	bf00      	nop
}
 800295e:	bd80      	pop	{r7, pc}
 8002960:	08014974 	.word	0x08014974

08002964 <display_access_granted_msg>:

void display_access_granted_msg(void){
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	display_text("  Acceso\n concedido", 2);
 8002968:	2102      	movs	r1, #2
 800296a:	4802      	ldr	r0, [pc, #8]	@ (8002974 <display_access_granted_msg+0x10>)
 800296c:	f7ff feda 	bl	8002724 <display_text>
	return;
 8002970:	bf00      	nop
}
 8002972:	bd80      	pop	{r7, pc}
 8002974:	08014994 	.word	0x08014994

08002978 <display_user_found_msg>:

void display_user_found_msg(void){
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	display_text("  Usuario\n  hallado", 2);
 800297c:	2102      	movs	r1, #2
 800297e:	4802      	ldr	r0, [pc, #8]	@ (8002988 <display_user_found_msg+0x10>)
 8002980:	f7ff fed0 	bl	8002724 <display_text>
	return;
 8002984:	bf00      	nop
}
 8002986:	bd80      	pop	{r7, pc}
 8002988:	080149a8 	.word	0x080149a8

0800298c <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
	display_text("  Usuario\n    no\n  existe", 2);
 8002990:	2102      	movs	r1, #2
 8002992:	4802      	ldr	r0, [pc, #8]	@ (800299c <display_user_not_found_msg+0x10>)
 8002994:	f7ff fec6 	bl	8002724 <display_text>
	return;
 8002998:	bf00      	nop
}
 800299a:	bd80      	pop	{r7, pc}
 800299c:	080149bc 	.word	0x080149bc

080029a0 <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	display_text("  Comienza\n  captura\n  de voz", 2);
 80029a4:	2102      	movs	r1, #2
 80029a6:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <display_start_voice_recognition_msg+0x10>)
 80029a8:	f7ff febc 	bl	8002724 <display_text>
	return;
 80029ac:	bf00      	nop
}
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	080149d8 	.word	0x080149d8

080029b4 <countdown_msg>:

void countdown_msg(void){
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 80029ba:	2332      	movs	r3, #50	@ 0x32
 80029bc:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 80029be:	231a      	movs	r3, #26
 80029c0:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f000 f936 	bl	8002c34 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80029c8:	79ba      	ldrb	r2, [r7, #6]
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa7a 	bl	8002ec8 <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 80029d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a50 <countdown_msg+0x9c>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029dc:	481d      	ldr	r0, [pc, #116]	@ (8002a54 <countdown_msg+0xa0>)
 80029de:	f000 fa4d 	bl	8002e7c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80029e2:	f000 f93f 	bl	8002c64 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80029e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029ea:	f00d fd47 	bl	801047c <vTaskDelay>
	ssd1306_Fill(Black);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 f920 	bl	8002c34 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80029f4:	79ba      	ldrb	r2, [r7, #6]
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fa64 	bl	8002ec8 <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <countdown_msg+0x9c>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	9200      	str	r2, [sp, #0]
 8002a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a08:	4813      	ldr	r0, [pc, #76]	@ (8002a58 <countdown_msg+0xa4>)
 8002a0a:	f000 fa37 	bl	8002e7c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002a0e:	f000 f929 	bl	8002c64 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002a12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a16:	f00d fd31 	bl	801047c <vTaskDelay>
	ssd1306_Fill(Black);
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f000 f90a 	bl	8002c34 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002a20:	79ba      	ldrb	r2, [r7, #6]
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fa4e 	bl	8002ec8 <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <countdown_msg+0x9c>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	9200      	str	r2, [sp, #0]
 8002a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a34:	4809      	ldr	r0, [pc, #36]	@ (8002a5c <countdown_msg+0xa8>)
 8002a36:	f000 fa21 	bl	8002e7c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002a3a:	f000 f913 	bl	8002c64 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002a3e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a42:	f00d fd1b 	bl	801047c <vTaskDelay>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	080186a8 	.word	0x080186a8
 8002a54:	080149f8 	.word	0x080149f8
 8002a58:	080149fc 	.word	0x080149fc
 8002a5c:	08014a00 	.word	0x08014a00

08002a60 <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	display_text("  Captura\n    ...", 2);
 8002a64:	2102      	movs	r1, #2
 8002a66:	4802      	ldr	r0, [pc, #8]	@ (8002a70 <display_capturing_voice_msg+0x10>)
 8002a68:	f7ff fe5c 	bl	8002724 <display_text>
	return;
 8002a6c:	bf00      	nop
}
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	08014a04 	.word	0x08014a04

08002a74 <display_recognized_voice_msg>:

void display_recognized_voice_msg(void){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	display_text("    Voz\n reconocida", 2);
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <display_recognized_voice_msg+0x10>)
 8002a7c:	f7ff fe52 	bl	8002724 <display_text>
	return;
 8002a80:	bf00      	nop
}
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	08014a18 	.word	0x08014a18

08002a88 <display_not_recognized_voice_msg>:


void display_not_recognized_voice_msg(void){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	display_text("   Voz no\n reconocida", 2);
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <display_not_recognized_voice_msg+0x10>)
 8002a90:	f7ff fe48 	bl	8002724 <display_text>
	return;
 8002a94:	bf00      	nop
}
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	08014a2c 	.word	0x08014a2c

08002a9c <display_processing_data_msg>:

void display_processing_data_msg(void){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	display_text("  Aguarde\n    ...", 2);
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	4802      	ldr	r0, [pc, #8]	@ (8002aac <display_processing_data_msg+0x10>)
 8002aa4:	f7ff fe3e 	bl	8002724 <display_text>
	return;
 8002aa8:	bf00      	nop
}
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	08014a44 	.word	0x08014a44

08002ab0 <display_missing_database_msg>:

void display_missing_database_msg(void){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	display_text("  Database\n  faltante", 2);
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <display_missing_database_msg+0x10>)
 8002ab8:	f7ff fe34 	bl	8002724 <display_text>
	return;
 8002abc:	bf00      	nop
}
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	08014a58 	.word	0x08014a58

08002ac4 <display_missing_template_msg>:

void display_missing_template_msg(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	display_text("  Template\n  faltante", 2);
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <display_missing_template_msg+0x10>)
 8002acc:	f7ff fe2a 	bl	8002724 <display_text>
	return;
 8002ad0:	bf00      	nop
}
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	08014a70 	.word	0x08014a70

08002ad8 <display_template_saved_msg>:

void display_template_saved_msg(void){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	display_text("  Template\n  guardado", 2);
 8002adc:	2102      	movs	r1, #2
 8002ade:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <display_template_saved_msg+0x10>)
 8002ae0:	f7ff fe20 	bl	8002724 <display_text>
	return;
 8002ae4:	bf00      	nop
}
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	08014a88 	.word	0x08014a88

08002aec <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af04      	add	r7, sp, #16
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2301      	movs	r3, #1
 8002b16:	2200      	movs	r2, #0
 8002b18:	2178      	movs	r1, #120	@ 0x78
 8002b1a:	4803      	ldr	r0, [pc, #12]	@ (8002b28 <ssd1306_WriteCommand+0x2c>)
 8002b1c:	f003 fb74 	bl	8006208 <HAL_I2C_Mem_Write>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200003ac 	.word	0x200003ac

08002b2c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af04      	add	r7, sp, #16
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3e:	9202      	str	r2, [sp, #8]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2301      	movs	r3, #1
 8002b48:	2240      	movs	r2, #64	@ 0x40
 8002b4a:	2178      	movs	r1, #120	@ 0x78
 8002b4c:	4803      	ldr	r0, [pc, #12]	@ (8002b5c <ssd1306_WriteData+0x30>)
 8002b4e:	f003 fb5b 	bl	8006208 <HAL_I2C_Mem_Write>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200003ac 	.word	0x200003ac

08002b60 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002b64:	f7ff ffc2 	bl	8002aec <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8002b68:	2064      	movs	r0, #100	@ 0x64
 8002b6a:	f00d fc87 	bl	801047c <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f000 f9d6 	bl	8002f20 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002b74:	2020      	movs	r0, #32
 8002b76:	f7ff ffc1 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7ff ffbe 	bl	8002afc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b80:	20b0      	movs	r0, #176	@ 0xb0
 8002b82:	f7ff ffbb 	bl	8002afc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b86:	20c8      	movs	r0, #200	@ 0xc8
 8002b88:	f7ff ffb8 	bl	8002afc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7ff ffb5 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b92:	2010      	movs	r0, #16
 8002b94:	f7ff ffb2 	bl	8002afc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b98:	2040      	movs	r0, #64	@ 0x40
 8002b9a:	f7ff ffaf 	bl	8002afc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002b9e:	20ff      	movs	r0, #255	@ 0xff
 8002ba0:	f000 f9aa 	bl	8002ef8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002ba4:	20a1      	movs	r0, #161	@ 0xa1
 8002ba6:	f7ff ffa9 	bl	8002afc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002baa:	20a6      	movs	r0, #166	@ 0xa6
 8002bac:	f7ff ffa6 	bl	8002afc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002bb0:	20a8      	movs	r0, #168	@ 0xa8
 8002bb2:	f7ff ffa3 	bl	8002afc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002bb6:	203f      	movs	r0, #63	@ 0x3f
 8002bb8:	f7ff ffa0 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002bbc:	20a4      	movs	r0, #164	@ 0xa4
 8002bbe:	f7ff ff9d 	bl	8002afc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002bc2:	20d3      	movs	r0, #211	@ 0xd3
 8002bc4:	f7ff ff9a 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7ff ff97 	bl	8002afc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002bce:	20d5      	movs	r0, #213	@ 0xd5
 8002bd0:	f7ff ff94 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002bd4:	20f0      	movs	r0, #240	@ 0xf0
 8002bd6:	f7ff ff91 	bl	8002afc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002bda:	20d9      	movs	r0, #217	@ 0xd9
 8002bdc:	f7ff ff8e 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002be0:	2022      	movs	r0, #34	@ 0x22
 8002be2:	f7ff ff8b 	bl	8002afc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002be6:	20da      	movs	r0, #218	@ 0xda
 8002be8:	f7ff ff88 	bl	8002afc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002bec:	2012      	movs	r0, #18
 8002bee:	f7ff ff85 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002bf2:	20db      	movs	r0, #219	@ 0xdb
 8002bf4:	f7ff ff82 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002bf8:	2020      	movs	r0, #32
 8002bfa:	f7ff ff7f 	bl	8002afc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bfe:	208d      	movs	r0, #141	@ 0x8d
 8002c00:	f7ff ff7c 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002c04:	2014      	movs	r0, #20
 8002c06:	f7ff ff79 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f000 f988 	bl	8002f20 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002c10:	2000      	movs	r0, #0
 8002c12:	f000 f80f 	bl	8002c34 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002c16:	f000 f825 	bl	8002c64 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <ssd1306_Init+0xd0>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002c20:	4b03      	ldr	r3, [pc, #12]	@ (8002c30 <ssd1306_Init+0xd0>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002c26:	4b02      	ldr	r3, [pc, #8]	@ (8002c30 <ssd1306_Init+0xd0>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	711a      	strb	r2, [r3, #4]
}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	2000096c 	.word	0x2000096c

08002c34 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <ssd1306_Fill+0x14>
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <ssd1306_Fill+0x16>
 8002c48:	23ff      	movs	r3, #255	@ 0xff
 8002c4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4803      	ldr	r0, [pc, #12]	@ (8002c60 <ssd1306_Fill+0x2c>)
 8002c52:	f010 fd80 	bl	8013756 <memset>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000056c 	.word	0x2000056c

08002c64 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	71fb      	strb	r3, [r7, #7]
 8002c6e:	e016      	b.n	8002c9e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	3b50      	subs	r3, #80	@ 0x50
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff40 	bl	8002afc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7ff ff3d 	bl	8002afc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002c82:	2010      	movs	r0, #16
 8002c84:	f7ff ff3a 	bl	8002afc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	01db      	lsls	r3, r3, #7
 8002c8c:	4a08      	ldr	r2, [pc, #32]	@ (8002cb0 <ssd1306_UpdateScreen+0x4c>)
 8002c8e:	4413      	add	r3, r2
 8002c90:	2180      	movs	r1, #128	@ 0x80
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff4a 	bl	8002b2c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	71fb      	strb	r3, [r7, #7]
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2b07      	cmp	r3, #7
 8002ca2:	d9e5      	bls.n	8002c70 <ssd1306_UpdateScreen+0xc>
    }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2000056c 	.word	0x2000056c

08002cb4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	71bb      	strb	r3, [r7, #6]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	db3d      	blt.n	8002d4a <ssd1306_DrawPixel+0x96>
 8002cce:	79bb      	ldrb	r3, [r7, #6]
 8002cd0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cd2:	d83a      	bhi.n	8002d4a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002cd4:	797b      	ldrb	r3, [r7, #5]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d11a      	bne.n	8002d10 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002cda:	79fa      	ldrb	r2, [r7, #7]
 8002cdc:	79bb      	ldrb	r3, [r7, #6]
 8002cde:	08db      	lsrs	r3, r3, #3
 8002ce0:	b2d8      	uxtb	r0, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	01db      	lsls	r3, r3, #7
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d58 <ssd1306_DrawPixel+0xa4>)
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	b25a      	sxtb	r2, r3
 8002cee:	79bb      	ldrb	r3, [r7, #6]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	b259      	sxtb	r1, r3
 8002d00:	79fa      	ldrb	r2, [r7, #7]
 8002d02:	4603      	mov	r3, r0
 8002d04:	01db      	lsls	r3, r3, #7
 8002d06:	4413      	add	r3, r2
 8002d08:	b2c9      	uxtb	r1, r1
 8002d0a:	4a13      	ldr	r2, [pc, #76]	@ (8002d58 <ssd1306_DrawPixel+0xa4>)
 8002d0c:	54d1      	strb	r1, [r2, r3]
 8002d0e:	e01d      	b.n	8002d4c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d10:	79fa      	ldrb	r2, [r7, #7]
 8002d12:	79bb      	ldrb	r3, [r7, #6]
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	b2d8      	uxtb	r0, r3
 8002d18:	4603      	mov	r3, r0
 8002d1a:	01db      	lsls	r3, r3, #7
 8002d1c:	4413      	add	r3, r2
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d58 <ssd1306_DrawPixel+0xa4>)
 8002d20:	5cd3      	ldrb	r3, [r2, r3]
 8002d22:	b25a      	sxtb	r2, r3
 8002d24:	79bb      	ldrb	r3, [r7, #6]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	b25b      	sxtb	r3, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	4013      	ands	r3, r2
 8002d38:	b259      	sxtb	r1, r3
 8002d3a:	79fa      	ldrb	r2, [r7, #7]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	01db      	lsls	r3, r3, #7
 8002d40:	4413      	add	r3, r2
 8002d42:	b2c9      	uxtb	r1, r1
 8002d44:	4a04      	ldr	r2, [pc, #16]	@ (8002d58 <ssd1306_DrawPixel+0xa4>)
 8002d46:	54d1      	strb	r1, [r2, r3]
 8002d48:	e000      	b.n	8002d4c <ssd1306_DrawPixel+0x98>
        return;
 8002d4a:	bf00      	nop
    }
}
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	2000056c 	.word	0x2000056c

08002d5c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4604      	mov	r4, r0
 8002d64:	4638      	mov	r0, r7
 8002d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b1f      	cmp	r3, #31
 8002d72:	d902      	bls.n	8002d7a <ssd1306_WriteChar+0x1e>
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b7e      	cmp	r3, #126	@ 0x7e
 8002d78:	d901      	bls.n	8002d7e <ssd1306_WriteChar+0x22>
        return 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e077      	b.n	8002e6e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e78 <ssd1306_WriteChar+0x11c>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	783b      	ldrb	r3, [r7, #0]
 8002d86:	4413      	add	r3, r2
 8002d88:	2b80      	cmp	r3, #128	@ 0x80
 8002d8a:	dc06      	bgt.n	8002d9a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e78 <ssd1306_WriteChar+0x11c>)
 8002d8e:	885b      	ldrh	r3, [r3, #2]
 8002d90:	461a      	mov	r2, r3
 8002d92:	787b      	ldrb	r3, [r7, #1]
 8002d94:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002d96:	2b40      	cmp	r3, #64	@ 0x40
 8002d98:	dd01      	ble.n	8002d9e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e067      	b.n	8002e6e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e04e      	b.n	8002e42 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	3b20      	subs	r3, #32
 8002daa:	7879      	ldrb	r1, [r7, #1]
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4619      	mov	r1, r3
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	440b      	add	r3, r1
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	e036      	b.n	8002e32 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d013      	beq.n	8002dfc <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002dd4:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <ssd1306_WriteChar+0x11c>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	b2d8      	uxtb	r0, r3
 8002de2:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <ssd1306_WriteChar+0x11c>)
 8002de4:	885b      	ldrh	r3, [r3, #2]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7ff ff5d 	bl	8002cb4 <ssd1306_DrawPixel>
 8002dfa:	e017      	b.n	8002e2c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e78 <ssd1306_WriteChar+0x11c>)
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	b2d8      	uxtb	r0, r3
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e78 <ssd1306_WriteChar+0x11c>)
 8002e0c:	885b      	ldrh	r3, [r3, #2]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	b2d9      	uxtb	r1, r3
 8002e18:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	f7ff ff44 	bl	8002cb4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	783b      	ldrb	r3, [r7, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d3c3      	bcc.n	8002dc4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	787b      	ldrb	r3, [r7, #1]
 8002e44:	461a      	mov	r2, r3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d3ab      	bcc.n	8002da4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <ssd1306_WriteChar+0x11c>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d005      	beq.n	8002e62 <ssd1306_WriteChar+0x106>
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	3a20      	subs	r2, #32
 8002e5c:	440a      	add	r2, r1
 8002e5e:	7812      	ldrb	r2, [r2, #0]
 8002e60:	e000      	b.n	8002e64 <ssd1306_WriteChar+0x108>
 8002e62:	783a      	ldrb	r2, [r7, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <ssd1306_WriteChar+0x11c>)
 8002e6a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	@ 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000096c 	.word	0x2000096c

08002e7c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	4638      	mov	r0, r7
 8002e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002e8a:	e013      	b.n	8002eb4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	7818      	ldrb	r0, [r3, #0]
 8002e90:	7e3b      	ldrb	r3, [r7, #24]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	463b      	mov	r3, r7
 8002e96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e98:	f7ff ff60 	bl	8002d5c <ssd1306_WriteChar>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d002      	beq.n	8002eae <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	e008      	b.n	8002ec0 <ssd1306_WriteString+0x44>
        }
        str++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e7      	bne.n	8002e8c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	71fb      	strb	r3, [r7, #7]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b05      	ldr	r3, [pc, #20]	@ (8002ef4 <ssd1306_SetCursor+0x2c>)
 8002ede:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002ee0:	79bb      	ldrb	r3, [r7, #6]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b03      	ldr	r3, [pc, #12]	@ (8002ef4 <ssd1306_SetCursor+0x2c>)
 8002ee6:	805a      	strh	r2, [r3, #2]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	2000096c 	.word	0x2000096c

08002ef8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002f02:	2381      	movs	r3, #129	@ 0x81
 8002f04:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fdf7 	bl	8002afc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fdf3 	bl	8002afc <ssd1306_WriteCommand>
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002f30:	23af      	movs	r3, #175	@ 0xaf
 8002f32:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f34:	4b08      	ldr	r3, [pc, #32]	@ (8002f58 <ssd1306_SetDisplayOn+0x38>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	715a      	strb	r2, [r3, #5]
 8002f3a:	e004      	b.n	8002f46 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f3c:	23ae      	movs	r3, #174	@ 0xae
 8002f3e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <ssd1306_SetDisplayOn+0x38>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fdd7 	bl	8002afc <ssd1306_WriteCommand>
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2000096c 	.word	0x2000096c

08002f5c <handle_keypad_input>:
	uint8_t current_index;
	TickType_t start_time;
}keypad_context_t;

/*================[Public functions]=========================*/
display_message_t handle_keypad_input(char input, char *buffer, bool *send_flag){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	73fb      	strb	r3, [r7, #15]
	static keypad_context_t context = { .current_state = WAITING_FOR_DIGIT_1,
										.current_index = 0,
										.start_time = 0,					};
	display_message_t current_message = DISPLAY_IDLE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 8002f6e:	4b62      	ldr	r3, [pc, #392]	@ (80030f8 <handle_keypad_input+0x19c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b07      	cmp	r3, #7
 8002f74:	f000 80a1 	beq.w	80030ba <handle_keypad_input+0x15e>
 8002f78:	2b07      	cmp	r3, #7
 8002f7a:	f300 80aa 	bgt.w	80030d2 <handle_keypad_input+0x176>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <handle_keypad_input+0x36>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f2c0 80a5 	blt.w	80030d2 <handle_keypad_input+0x176>
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	f200 80a1 	bhi.w	80030d2 <handle_keypad_input+0x176>
 8002f90:	e01c      	b.n	8002fcc <handle_keypad_input+0x70>
	case WAITING_FOR_DIGIT_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d016      	beq.n	8002fc6 <handle_keypad_input+0x6a>
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	2b23      	cmp	r3, #35	@ 0x23
 8002f9c:	d013      	beq.n	8002fc6 <handle_keypad_input+0x6a>
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fa2:	d010      	beq.n	8002fc6 <handle_keypad_input+0x6a>
			buffer[0] = input;													//Guardo digito en el buffer
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 8002faa:	4b53      	ldr	r3, [pc, #332]	@ (80030f8 <handle_keypad_input+0x19c>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 8002fb0:	f00d fba8 	bl	8010704 <xTaskGetTickCount>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	4a50      	ldr	r2, [pc, #320]	@ (80030f8 <handle_keypad_input+0x19c>)
 8002fb8:	6053      	str	r3, [r2, #4]
			context.current_state = WAITING_FOR_DIGIT_2;						//Avanzo al siguiente estado
 8002fba:	4b4f      	ldr	r3, [pc, #316]	@ (80030f8 <handle_keypad_input+0x19c>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_ENTER_DIGIT;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = DISPLAY_IDLE;
		}
		break;
 8002fc4:	e093      	b.n	80030ee <handle_keypad_input+0x192>
			current_message = DISPLAY_IDLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
		break;
 8002fca:	e090      	b.n	80030ee <handle_keypad_input+0x192>
	case WAITING_FOR_DIGIT_3:
	case WAITING_FOR_DIGIT_4:
	case WAITING_FOR_DIGIT_5:
	case WAITING_FOR_DIGIT_6:
	case WAITING_FOR_CONFIRMATION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8002fcc:	f00d fb9a 	bl	8010704 <xTaskGetTickCount>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b49      	ldr	r3, [pc, #292]	@ (80030f8 <handle_keypad_input+0x19c>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d866      	bhi.n	80030ae <handle_keypad_input+0x152>
			if(input != 0){
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d060      	beq.n	80030a8 <handle_keypad_input+0x14c>
				if(input == BORRAR_DIGITO){
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b23      	cmp	r3, #35	@ 0x23
 8002fea:	d124      	bne.n	8003036 <handle_keypad_input+0xda>
					if(context.current_index > 0){
 8002fec:	4b42      	ldr	r3, [pc, #264]	@ (80030f8 <handle_keypad_input+0x19c>)
 8002fee:	785b      	ldrb	r3, [r3, #1]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d07b      	beq.n	80030ec <handle_keypad_input+0x190>
						context.current_index--;
 8002ff4:	4b40      	ldr	r3, [pc, #256]	@ (80030f8 <handle_keypad_input+0x19c>)
 8002ff6:	785b      	ldrb	r3, [r3, #1]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80030f8 <handle_keypad_input+0x19c>)
 8002ffe:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 8003000:	4b3d      	ldr	r3, [pc, #244]	@ (80030f8 <handle_keypad_input+0x19c>)
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4413      	add	r3, r2
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 800300e:	f00d fb79 	bl	8010704 <xTaskGetTickCount>
 8003012:	4603      	mov	r3, r0
 8003014:	4a38      	ldr	r2, [pc, #224]	@ (80030f8 <handle_keypad_input+0x19c>)
 8003016:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ERASE_DIGIT;
 8003018:	2303      	movs	r3, #3
 800301a:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > WAITING_FOR_DIGIT_1) ? context.current_state - 1 : WAITING_FOR_DIGIT_1;
 800301c:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <handle_keypad_input+0x19c>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <handle_keypad_input+0xd2>
 8003024:	4b34      	ldr	r3, [pc, #208]	@ (80030f8 <handle_keypad_input+0x19c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	3b01      	subs	r3, #1
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e000      	b.n	8003030 <handle_keypad_input+0xd4>
 800302e:	2300      	movs	r3, #0
 8003030:	4a31      	ldr	r2, [pc, #196]	@ (80030f8 <handle_keypad_input+0x19c>)
 8003032:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = DISPLAY_TIMEOUT_EVENT;
		}
		break;
 8003034:	e05a      	b.n	80030ec <handle_keypad_input+0x190>
				else if(input == ENTER){
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	2b2a      	cmp	r3, #42	@ 0x2a
 800303a:	d10d      	bne.n	8003058 <handle_keypad_input+0xfc>
					if(context.current_state == WAITING_FOR_CONFIRMATION){
 800303c:	4b2e      	ldr	r3, [pc, #184]	@ (80030f8 <handle_keypad_input+0x19c>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b06      	cmp	r3, #6
 8003042:	d103      	bne.n	800304c <handle_keypad_input+0xf0>
						context.current_state = SEND_SEQUENCE_TO_SD;
 8003044:	4b2c      	ldr	r3, [pc, #176]	@ (80030f8 <handle_keypad_input+0x19c>)
 8003046:	2207      	movs	r2, #7
 8003048:	701a      	strb	r2, [r3, #0]
		break;
 800304a:	e04f      	b.n	80030ec <handle_keypad_input+0x190>
						context.current_state = INCOMPLETE_SEQUENCE;
 800304c:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <handle_keypad_input+0x19c>)
 800304e:	2208      	movs	r2, #8
 8003050:	701a      	strb	r2, [r3, #0]
						current_message = DISPLAY_INCOMPLETE_SEQUENCE_EVENT;
 8003052:	230b      	movs	r3, #11
 8003054:	75fb      	strb	r3, [r7, #23]
		break;
 8003056:	e049      	b.n	80030ec <handle_keypad_input+0x190>
					if(context.current_index < SEQUENCE_LENGTH){
 8003058:	4b27      	ldr	r3, [pc, #156]	@ (80030f8 <handle_keypad_input+0x19c>)
 800305a:	785b      	ldrb	r3, [r3, #1]
 800305c:	2b05      	cmp	r3, #5
 800305e:	d845      	bhi.n	80030ec <handle_keypad_input+0x190>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 8003060:	4b25      	ldr	r3, [pc, #148]	@ (80030f8 <handle_keypad_input+0x19c>)
 8003062:	785b      	ldrb	r3, [r3, #1]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	b2d1      	uxtb	r1, r2
 8003068:	4a23      	ldr	r2, [pc, #140]	@ (80030f8 <handle_keypad_input+0x19c>)
 800306a:	7051      	strb	r1, [r2, #1]
 800306c:	461a      	mov	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4413      	add	r3, r2
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <handle_keypad_input+0x19c>)
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	4413      	add	r3, r2
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8003084:	f00d fb3e 	bl	8010704 <xTaskGetTickCount>
 8003088:	4603      	mov	r3, r0
 800308a:	4a1b      	ldr	r2, [pc, #108]	@ (80030f8 <handle_keypad_input+0x19c>)
 800308c:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ENTER_DIGIT;
 800308e:	2302      	movs	r3, #2
 8003090:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != WAITING_FOR_CONFIRMATION){
 8003092:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <handle_keypad_input+0x19c>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d028      	beq.n	80030ec <handle_keypad_input+0x190>
							context.current_state++;
 800309a:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <handle_keypad_input+0x19c>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <handle_keypad_input+0x19c>)
 80030a4:	701a      	strb	r2, [r3, #0]
		break;
 80030a6:	e021      	b.n	80030ec <handle_keypad_input+0x190>
				current_message = DISPLAY_IDLE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	75fb      	strb	r3, [r7, #23]
		break;
 80030ac:	e01e      	b.n	80030ec <handle_keypad_input+0x190>
			context.current_state = TIMEOUT;
 80030ae:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <handle_keypad_input+0x19c>)
 80030b0:	2209      	movs	r2, #9
 80030b2:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_TIMEOUT_EVENT;
 80030b4:	230a      	movs	r3, #10
 80030b6:	75fb      	strb	r3, [r7, #23]
		break;
 80030b8:	e018      	b.n	80030ec <handle_keypad_input+0x190>
	case SEND_SEQUENCE_TO_SD:
		*send_flag = 1;															//Habilito flag para enviar el string
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
		context.current_state = WAITING_FOR_DIGIT_1;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <handle_keypad_input+0x19c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80030c6:	4b0c      	ldr	r3, [pc, #48]	@ (80030f8 <handle_keypad_input+0x19c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;								//Luego del procesamiento se vuelve al estado inicial
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
		break;
 80030d0:	e00d      	b.n	80030ee <handle_keypad_input+0x192>
	case INCOMPLETE_SEQUENCE:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 80030d2:	2107      	movs	r1, #7
 80030d4:	68b8      	ldr	r0, [r7, #8]
 80030d6:	f001 faf5 	bl	80046c4 <clear_buffer>
		context.current_state = WAITING_FOR_DIGIT_1;							//Vuelvo al estado inicial
 80030da:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <handle_keypad_input+0x19c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <handle_keypad_input+0x19c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
		break;
 80030ea:	e000      	b.n	80030ee <handle_keypad_input+0x192>
		break;
 80030ec:	bf00      	nop
	}
	return current_message;
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000974 	.word	0x20000974

080030fc <set_row>:
	      	  	  	  	  		  	  	  	  	  {'4', '5', '6', 'B'},
												  {'7', '8', '9', 'C'},
												  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 8003106:	88fb      	ldrh	r3, [r7, #6]
 8003108:	2201      	movs	r2, #1
 800310a:	4619      	mov	r1, r3
 800310c:	4803      	ldr	r0, [pc, #12]	@ (800311c <set_row+0x20>)
 800310e:	f002 ff1d 	bl	8005f4c <HAL_GPIO_WritePin>
	return;
 8003112:	bf00      	nop
}
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40020800 	.word	0x40020800

08003120 <reset_row>:

static void reset_row(row_t row){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2200      	movs	r2, #0
 800312e:	4619      	mov	r1, r3
 8003130:	4803      	ldr	r0, [pc, #12]	@ (8003140 <reset_row+0x20>)
 8003132:	f002 ff0b 	bl	8005f4c <HAL_GPIO_WritePin>
	return;
 8003136:	bf00      	nop
}
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40020800 	.word	0x40020800

08003144 <read_col>:

static GPIO_PinState read_col(col_t col){
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	b29b      	uxth	r3, r3
 8003152:	4619      	mov	r1, r3
 8003154:	4803      	ldr	r0, [pc, #12]	@ (8003164 <read_col+0x20>)
 8003156:	f002 fee1 	bl	8005f1c <HAL_GPIO_ReadPin>
 800315a:	4603      	mov	r3, r0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40020800 	.word	0x40020800

08003168 <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 800316e:	2300      	movs	r3, #0
 8003170:	71fb      	strb	r3, [r7, #7]
 8003172:	e04c      	b.n	800320e <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	4a2a      	ldr	r2, [pc, #168]	@ (8003220 <read_keypad+0xb8>)
 8003178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ffbd 	bl	80030fc <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8003182:	2300      	movs	r3, #0
 8003184:	71bb      	strb	r3, [r7, #6]
 8003186:	e035      	b.n	80031f4 <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 8003188:	79bb      	ldrb	r3, [r7, #6]
 800318a:	4a26      	ldr	r2, [pc, #152]	@ (8003224 <read_keypad+0xbc>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff ffd8 	bl	8003144 <read_col>
 8003194:	4603      	mov	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d129      	bne.n	80031ee <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 800319a:	2014      	movs	r0, #20
 800319c:	f00d f96e 	bl	801047c <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 80031a0:	79bb      	ldrb	r3, [r7, #6]
 80031a2:	4a20      	ldr	r2, [pc, #128]	@ (8003224 <read_keypad+0xbc>)
 80031a4:	5cd3      	ldrb	r3, [r2, r3]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff ffcc 	bl	8003144 <read_col>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d11d      	bne.n	80031ee <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 80031b2:	79fa      	ldrb	r2, [r7, #7]
 80031b4:	79bb      	ldrb	r3, [r7, #6]
 80031b6:	491c      	ldr	r1, [pc, #112]	@ (8003228 <read_keypad+0xc0>)
 80031b8:	0092      	lsls	r2, r2, #2
 80031ba:	440a      	add	r2, r1
 80031bc:	4413      	add	r3, r2
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 80031c2:	bf00      	nop
 80031c4:	79bb      	ldrb	r3, [r7, #6]
 80031c6:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <read_keypad+0xbc>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ffba 	bl	8003144 <read_col>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d0f6      	beq.n	80031c4 <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	4a11      	ldr	r2, [pc, #68]	@ (8003220 <read_keypad+0xb8>)
 80031da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff9e 	bl	8003120 <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 80031e4:	200a      	movs	r0, #10
 80031e6:	f00d f949 	bl	801047c <vTaskDelay>
					return key_pressed;
 80031ea:	797b      	ldrb	r3, [r7, #5]
 80031ec:	e013      	b.n	8003216 <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 80031ee:	79bb      	ldrb	r3, [r7, #6]
 80031f0:	3301      	adds	r3, #1
 80031f2:	71bb      	strb	r3, [r7, #6]
 80031f4:	79bb      	ldrb	r3, [r7, #6]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d9c6      	bls.n	8003188 <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	4a08      	ldr	r2, [pc, #32]	@ (8003220 <read_keypad+0xb8>)
 80031fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ff8c 	bl	8003120 <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	3301      	adds	r3, #1
 800320c:	71fb      	strb	r3, [r7, #7]
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d9af      	bls.n	8003174 <read_keypad+0xc>
	}
	return 0;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000008 	.word	0x20000008
 8003224:	20000010 	.word	0x20000010
 8003228:	080186c0 	.word	0x080186c0

0800322c <capture_voice>:
extern ADC_HandleTypeDef hadc1;
extern TIM_HandleTypeDef htim3;
extern volatile bool conv_cplt_flag;

/*================[Public functions]=====================*/
void capture_voice(uint16_t *buffer, uint32_t size){
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8003236:	480c      	ldr	r0, [pc, #48]	@ (8003268 <capture_voice+0x3c>)
 8003238:	f005 f8c4 	bl	80083c4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, size);					//Inicio captura de datos con ADC
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	480a      	ldr	r0, [pc, #40]	@ (800326c <capture_voice+0x40>)
 8003242:	f001 fc13 	bl	8004a6c <HAL_ADC_Start_DMA>
	while(!conv_cplt_flag);												//Espero a que termine la captura
 8003246:	bf00      	nop
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <capture_voice+0x44>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f083 0301 	eor.w	r3, r3, #1
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f7      	bne.n	8003248 <capture_voice+0x1c>
	conv_cplt_flag = false;
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <capture_voice+0x44>)
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
	return;
 800325e:	bf00      	nop
}
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000478 	.word	0x20000478
 800326c:	20000304 	.word	0x20000304
 8003270:	20000518 	.word	0x20000518
 8003274:	00000000 	.word	0x00000000

08003278 <get_voltage>:

void get_voltage(uint16_t *in_buffer, float *out_buffer, uint32_t size){
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < size; i++){
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e029      	b.n	80032de <get_voltage+0x66>
		out_buffer[i] = VOLTAGE_REFERENCE * ((float)in_buffer[i]) / ADC_RESOLUTION;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329c:	ee17 0a90 	vmov	r0, s15
 80032a0:	f7fd f9ca 	bl	8000638 <__aeabi_f2d>
 80032a4:	a313      	add	r3, pc, #76	@ (adr r3, 80032f4 <get_voltage+0x7c>)
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f7fd fa1d 	bl	80006e8 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	4b0d      	ldr	r3, [pc, #52]	@ (80032f0 <get_voltage+0x78>)
 80032bc:	f7fd fb3e 	bl	800093c <__aeabi_ddiv>
 80032c0:	4602      	mov	r2, r0
 80032c2:	460b      	mov	r3, r1
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	18d4      	adds	r4, r2, r3
 80032d0:	f7fd fc1c 	bl	8000b0c <__aeabi_d2f>
 80032d4:	4603      	mov	r3, r0
 80032d6:	6023      	str	r3, [r4, #0]
	for(uint32_t i = 0; i < size; i++){
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	3301      	adds	r3, #1
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d3d1      	bcc.n	800328a <get_voltage+0x12>
	}
}
 80032e6:	bf00      	nop
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd90      	pop	{r4, r7, pc}
 80032f0:	40b00000 	.word	0x40b00000
 80032f4:	66666666 	.word	0x66666666
 80032f8:	400a6666 	.word	0x400a6666

080032fc <store_voice>:

void store_voice(uint16_t *voice_buffer, uint32_t buf_size, uint32_t frame_size, char *filename){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
	display_message_t message;
	float *current_frame;
	//Verifico que size sea multiplo de frame_size
	if((buf_size % frame_size) != 0){
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	fb01 f202 	mul.w	r2, r1, r2
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d139      	bne.n	8003392 <store_voice+0x96>
		//Manejar error
		return;
	}

	//Reservo memoria para el bloque de procesamiento
	uint32_t num_of_frames = buf_size / frame_size;
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	61bb      	str	r3, [r7, #24]
	current_frame = pvPortMalloc(FLOAT_SIZE_BYTES(frame_size));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4618      	mov	r0, r3
 800332e:	f00e f96d 	bl	801160c <pvPortMalloc>
 8003332:	6178      	str	r0, [r7, #20]
	if(current_frame == NULL){
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10c      	bne.n	8003354 <store_voice+0x58>
		//Manejar este caso, enviar un print
		message = DISPLAY_ERROR_MEMORY;
 800333a:	2312      	movs	r3, #18
 800333c:	74fb      	strb	r3, [r7, #19]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 800333e:	4b17      	ldr	r3, [pc, #92]	@ (800339c <store_voice+0xa0>)
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	f107 0113 	add.w	r1, r7, #19
 8003346:	2300      	movs	r3, #0
 8003348:	f04f 32ff 	mov.w	r2, #4294967295
 800334c:	f00c f982 	bl	800f654 <xQueueGenericSend>
		while(1);
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <store_voice+0x54>
		return;
	}

	for(uint8_t i = 0; i < num_of_frames; i++){
 8003354:	2300      	movs	r3, #0
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e013      	b.n	8003382 <store_voice+0x86>
		//Convierto los valores obtenidos a tension
		get_voltage(&voice_buffer[i * frame_size], current_frame, frame_size);
 800335a:	7ffb      	ldrb	r3, [r7, #31]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6979      	ldr	r1, [r7, #20]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff83 	bl	8003278 <get_voltage>

		//Guardo en la SD
		save_buffer_on_sd(filename, current_frame, frame_size);
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6979      	ldr	r1, [r7, #20]
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	f000 fb60 	bl	8003a3c <save_buffer_on_sd>
	for(uint8_t i = 0; i < num_of_frames; i++){
 800337c:	7ffb      	ldrb	r3, [r7, #31]
 800337e:	3301      	adds	r3, #1
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	429a      	cmp	r2, r3
 8003388:	d8e7      	bhi.n	800335a <store_voice+0x5e>
	}

	//Libero memoria utilizada
	vPortFree(current_frame);
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f00e fa0c 	bl	80117a8 <vPortFree>
	return;
 8003390:	e000      	b.n	8003394 <store_voice+0x98>
		return;
 8003392:	bf00      	nop
}
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	2000050c 	.word	0x2000050c

080033a0 <extract_and_save_features>:

void extract_and_save_features(char *voice_name, char *feature_name){
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
	display_message_t message;
	float *current_frame = pvPortMalloc(FLOAT_SIZE_BYTES(FRAME_SIZE));
 80033aa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80033ae:	f00e f92d 	bl	801160c <pvPortMalloc>
 80033b2:	6138      	str	r0, [r7, #16]
	float *feature_frame = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 80033b4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80033b8:	f00e f928 	bl	801160c <pvPortMalloc>
 80033bc:	60f8      	str	r0, [r7, #12]
	if(current_frame == NULL || feature_frame == NULL){
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <extract_and_save_features+0x2a>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10c      	bne.n	80033e4 <extract_and_save_features+0x44>
		message = DISPLAY_ERROR_MEMORY;
 80033ca:	2312      	movs	r3, #18
 80033cc:	72fb      	strb	r3, [r7, #11]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 80033ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <extract_and_save_features+0x98>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f107 010b 	add.w	r1, r7, #11
 80033d6:	2300      	movs	r3, #0
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	f00c f93a 	bl	800f654 <xQueueGenericSend>
		while(1);
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <extract_and_save_features+0x40>
	}
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80033e4:	2300      	movs	r3, #0
 80033e6:	75fb      	strb	r3, [r7, #23]
 80033e8:	e016      	b.n	8003418 <extract_and_save_features+0x78>
		read_buffer_from_sd(voice_name, current_frame, FRAME_SIZE, i * FRAME_SIZE);
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	02db      	lsls	r3, r3, #11
 80033ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033f2:	6939      	ldr	r1, [r7, #16]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fb8f 	bl	8003b18 <read_buffer_from_sd>
		process_frame(current_frame, feature_frame, FRAME_SIZE);
 80033fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	6938      	ldr	r0, [r7, #16]
 8003402:	f000 f95f 	bl	80036c4 <process_frame>
		save_buffer_on_sd(feature_name, feature_frame, FEATURE_SIZE);
 8003406:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	6838      	ldr	r0, [r7, #0]
 800340e:	f000 fb15 	bl	8003a3c <save_buffer_on_sd>
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	3301      	adds	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d9e5      	bls.n	80033ea <extract_and_save_features+0x4a>
	}

	//Elimino el archivo de voz para quedarme solo con los features
	f_unlink(voice_name);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f00b fb79 	bl	800eb16 <f_unlink>

	//Libero memoria utilizada
	vPortFree(current_frame);
 8003424:	6938      	ldr	r0, [r7, #16]
 8003426:	f00e f9bf 	bl	80117a8 <vPortFree>
	vPortFree(feature_frame);
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f00e f9bc 	bl	80117a8 <vPortFree>
	return;
 8003430:	bf00      	nop
}
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2000050c 	.word	0x2000050c

0800343c <check_voice>:

bool check_voice(char *template_path, char *feature_path){
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	display_message_t message;
	float32_t *template = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 8003446:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800344a:	f00e f8df 	bl	801160c <pvPortMalloc>
 800344e:	6138      	str	r0, [r7, #16]
	float32_t *extracted_feature = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 8003450:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003454:	f00e f8da 	bl	801160c <pvPortMalloc>
 8003458:	60f8      	str	r0, [r7, #12]
	if(template == NULL || extracted_feature == NULL){
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <check_voice+0x2a>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10c      	bne.n	8003480 <check_voice+0x44>
		message = DISPLAY_ERROR_MEMORY;
 8003466:	2312      	movs	r3, #18
 8003468:	727b      	strb	r3, [r7, #9]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 800346a:	4b24      	ldr	r3, [pc, #144]	@ (80034fc <check_voice+0xc0>)
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	f107 0109 	add.w	r1, r7, #9
 8003472:	2300      	movs	r3, #0
 8003474:	f04f 32ff 	mov.w	r2, #4294967295
 8003478:	f00c f8ec 	bl	800f654 <xQueueGenericSend>
		while(1);
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <check_voice+0x40>
	}
	bool compare_res = false;
 8003480:	2300      	movs	r3, #0
 8003482:	72fb      	strb	r3, [r7, #11]
	bool is_recognized = false;
 8003484:	2300      	movs	r3, #0
 8003486:	72bb      	strb	r3, [r7, #10]
	uint8_t frame_counter = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 800348c:	2300      	movs	r3, #0
 800348e:	75bb      	strb	r3, [r7, #22]
 8003490:	e023      	b.n	80034da <check_voice+0x9e>
		//Leo cada bloque del archivo, y comparo bin a bin
		read_buffer_from_sd(template_path, template, FEATURE_SIZE, i * FEATURE_SIZE);
 8003492:	7dbb      	ldrb	r3, [r7, #22]
 8003494:	029b      	lsls	r3, r3, #10
 8003496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800349a:	6939      	ldr	r1, [r7, #16]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fb3b 	bl	8003b18 <read_buffer_from_sd>
		read_buffer_from_sd(feature_path, extracted_feature, FEATURE_SIZE, i * FEATURE_SIZE);
 80034a2:	7dbb      	ldrb	r3, [r7, #22]
 80034a4:	029b      	lsls	r3, r3, #10
 80034a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034aa:	68f9      	ldr	r1, [r7, #12]
 80034ac:	6838      	ldr	r0, [r7, #0]
 80034ae:	f000 fb33 	bl	8003b18 <read_buffer_from_sd>
		compare_res = compare_features(template, extracted_feature, FEATURE_SIZE);
 80034b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	6938      	ldr	r0, [r7, #16]
 80034ba:	f000 f93d 	bl	8003738 <compare_features>
 80034be:	4603      	mov	r3, r0
 80034c0:	72fb      	strb	r3, [r7, #11]
		if(compare_res == false){
 80034c2:	7afb      	ldrb	r3, [r7, #11]
 80034c4:	f083 0301 	eor.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <check_voice+0xa6>
			break;
		}
		frame_counter++;																	//Aumento el conteo de bloques correctos
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
 80034d0:	3301      	adds	r3, #1
 80034d2:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80034d4:	7dbb      	ldrb	r3, [r7, #22]
 80034d6:	3301      	adds	r3, #1
 80034d8:	75bb      	strb	r3, [r7, #22]
 80034da:	7dbb      	ldrb	r3, [r7, #22]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d9d8      	bls.n	8003492 <check_voice+0x56>
 80034e0:	e000      	b.n	80034e4 <check_voice+0xa8>
			break;
 80034e2:	bf00      	nop
	}

	//Compruebo si hay NUM_OF_BLOCKS bloques correctos
	is_recognized = (frame_counter < NUM_OF_FRAMES) ? false : true;
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	bf8c      	ite	hi
 80034ea:	2301      	movhi	r3, #1
 80034ec:	2300      	movls	r3, #0
 80034ee:	72bb      	strb	r3, [r7, #10]
	return is_recognized;																	//Devuelvo estado del reconocimiento
 80034f0:	7abb      	ldrb	r3, [r7, #10]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	2000050c 	.word	0x2000050c

08003500 <fir_filter>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño de ambos vectores.
 */
static void fir_filter(float32_t *psrc, float32_t *pdst, uint32_t size){
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
	//Reservo memoria para el vector de estado que necesita la instancia del filtro FIR
	float32_t *fir_state = pvPortMalloc(FLOAT_SIZE_BYTES(STATE_SIZE));
 800350c:	f242 00c4 	movw	r0, #8388	@ 0x20c4
 8003510:	f00e f87c 	bl	801160c <pvPortMalloc>
 8003514:	6178      	str	r0, [r7, #20]
	if(fir_state == NULL){
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <fir_filter+0x44>
		//Manejar error
		return;
	}

	//Inicializo instancia de filtro fir predeterminada
	arm_fir_init_f32(&fir_instance, NUM_TAPS, (float32_t *)filter_taps, fir_state, size);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <fir_filter+0x4c>)
 8003524:	2132      	movs	r1, #50	@ 0x32
 8003526:	480a      	ldr	r0, [pc, #40]	@ (8003550 <fir_filter+0x50>)
 8003528:	f00f f84a 	bl	80125c0 <arm_fir_init_f32>

	//Filtro la señal
	arm_fir_f32(&fir_instance, psrc, pdst, size);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	68f9      	ldr	r1, [r7, #12]
 8003532:	4807      	ldr	r0, [pc, #28]	@ (8003550 <fir_filter+0x50>)
 8003534:	f00f f856 	bl	80125e4 <arm_fir_f32>

	//Libero memoria utilizada
	vPortFree(fir_state);
 8003538:	6978      	ldr	r0, [r7, #20]
 800353a:	f00e f935 	bl	80117a8 <vPortFree>
	fir_state = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
	return;
 8003542:	e000      	b.n	8003546 <fir_filter+0x46>
		return;
 8003544:	bf00      	nop
}
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	080186d0 	.word	0x080186d0
 8003550:	2000097c 	.word	0x2000097c

08003554 <hamming_window>:
 *
 * @param psrc Puntero al vector float32_t
 * @param size Tamaño del vector.
 */

static void hamming_window(float32_t *psrc, uint32_t size){
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]

	// Constantes para la ventana de hamming
	const float32_t alpha = 0.54f;
 800355e:	4b21      	ldr	r3, [pc, #132]	@ (80035e4 <hamming_window+0x90>)
 8003560:	613b      	str	r3, [r7, #16]
	const float32_t beta = 0.46f;
 8003562:	4b21      	ldr	r3, [pc, #132]	@ (80035e8 <hamming_window+0x94>)
 8003564:	60fb      	str	r3, [r7, #12]
	float32_t hamming_coeff;

	for(uint32_t i = 0; i < size; i++){
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e033      	b.n	80035d4 <hamming_window+0x80>
		// Calculo el coeficiente de hamming para la muestra actual
		hamming_coeff = alpha - beta * arm_cos_f32((2.0f * PI * i) / (size - 1));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003576:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80035ec <hamming_window+0x98>
 800357a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	3b01      	subs	r3, #1
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800358e:	eeb0 0a66 	vmov.f32	s0, s13
 8003592:	f00f fb73 	bl	8012c7c <arm_cos_f32>
 8003596:	eeb0 7a40 	vmov.f32	s14, s0
 800359a:	edd7 7a03 	vldr	s15, [r7, #12]
 800359e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80035a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035aa:	edc7 7a02 	vstr	s15, [r7, #8]

		// Aplico coeficiente de hamming a la muestra de la señal
		psrc[i] *= hamming_coeff;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	ed93 7a00 	vldr	s14, [r3]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < size; i++){
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	3301      	adds	r3, #1
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d3c7      	bcc.n	800356c <hamming_window+0x18>
	}
	return;
 80035dc:	bf00      	nop
}
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	3f0a3d71 	.word	0x3f0a3d71
 80035e8:	3eeb851f 	.word	0x3eeb851f
 80035ec:	40c90fdb 	.word	0x40c90fdb

080035f0 <calculate_fft>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño de ambos vectores.
 */
static void calculate_fft(float32_t *psrc, float32_t *pdst, uint32_t size){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
	//Inicializo instancia de fft
	arm_rfft_fast_init_f32(&fft_instance, size);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4619      	mov	r1, r3
 8003602:	4806      	ldr	r0, [pc, #24]	@ (800361c <calculate_fft+0x2c>)
 8003604:	f00e faea 	bl	8011bdc <arm_rfft_fast_init_f32>

	/*Calculo la fft*/
	arm_rfft_fast_f32(&fft_instance, psrc, pdst, 0);					//El cero indica que se hace transformada, no antitransformada
 8003608:	2300      	movs	r3, #0
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	68f9      	ldr	r1, [r7, #12]
 800360e:	4803      	ldr	r0, [pc, #12]	@ (800361c <calculate_fft+0x2c>)
 8003610:	f00e fb68 	bl	8011ce4 <arm_rfft_fast_f32>
	return;
 8003614:	bf00      	nop
}
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000988 	.word	0x20000988

08003620 <normalize_array>:
 *
 * @param psrc Puntero al vector float32_t.
 * @param size Tamaño del vector.
 */

static void normalize_array(float32_t *psrc, uint32_t size){
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
	float32_t min_val, max_val;
	uint32_t min_index, max_index;
	float32_t range;
	/*Encuentro el maximo y el minimo del array*/
	arm_min_f32(psrc, size, &min_val, &min_index);
 800362a:	f107 030c 	add.w	r3, r7, #12
 800362e:	f107 0214 	add.w	r2, r7, #20
 8003632:	6839      	ldr	r1, [r7, #0]
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f00e fa01 	bl	8011a3c <arm_min_f32>
	arm_max_f32(psrc, size, &max_val, &max_index);
 800363a:	f107 0308 	add.w	r3, r7, #8
 800363e:	f107 0210 	add.w	r2, r7, #16
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f00e fa61 	bl	8011b0c <arm_max_f32>
	/*Calculo el rango*/
	range = max_val - min_val;
 800364a:	ed97 7a04 	vldr	s14, [r7, #16]
 800364e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003652:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003656:	edc7 7a06 	vstr	s15, [r7, #24]
	/*Normalizo el array*/
	for(size_t i = 0; i < size; i++){
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e016      	b.n	800368e <normalize_array+0x6e>
		psrc[i] = (psrc[i] - min_val) / range;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	ed93 7a00 	vldr	s14, [r3]
 800366c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003670:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	4413      	add	r3, r2
 800367c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003684:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < size; i++){
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	3301      	adds	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d3e4      	bcc.n	8003660 <normalize_array+0x40>
	}
	return;
 8003696:	bf00      	nop
}
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <get_fft_norm_mag>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño del vector pdst.
 */
static void get_fft_norm_mag(float32_t *psrc, float32_t *pdst, uint32_t size){
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
	/*Se tienen en cuenta la cantidad de numeros complejos, no de elementos en p_src*/
	/*Calculo la magnitud de la fft*/
	arm_cmplx_mag_f32(psrc, pdst, size);
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f00f f9fc 	bl	8012aac <arm_cmplx_mag_f32>

	/*Normalizo*/
	normalize_array(pdst, size);
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	68b8      	ldr	r0, [r7, #8]
 80036b8:	f7ff ffb2 	bl	8003620 <normalize_array>
	return;
 80036bc:	bf00      	nop
}
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <process_frame>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño del vector psrc.
 */
void process_frame(float32_t *psrc, float32_t *pdst, uint32_t size){
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
	//Reservo memoria para salida filtrada
	float32_t *filtered = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f00d ff99 	bl	801160c <pvPortMalloc>
 80036da:	6178      	str	r0, [r7, #20]
	if(filtered == NULL){
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d025      	beq.n	800372e <process_frame+0x6a>
		//Manejar error
		return;
	}

	//Filtro la señal
	fir_filter(psrc, filtered, size);
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6979      	ldr	r1, [r7, #20]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f7ff ff0a 	bl	8003500 <fir_filter>

	//Aplico ventana de hamming al vector
	hamming_window(filtered, size);
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	6978      	ldr	r0, [r7, #20]
 80036f0:	f7ff ff30 	bl	8003554 <hamming_window>

	/*Reservo memoria para la salida de FFT y calculo la fft. Libero memoria de salida filtrada*/
	float32_t *fft_output = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f00d ff87 	bl	801160c <pvPortMalloc>
 80036fe:	6138      	str	r0, [r7, #16]
	calculate_fft(filtered, fft_output, size);
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6939      	ldr	r1, [r7, #16]
 8003704:	6978      	ldr	r0, [r7, #20]
 8003706:	f7ff ff73 	bl	80035f0 <calculate_fft>
	vPortFree(filtered);
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f00e f84c 	bl	80117a8 <vPortFree>
	filtered = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]

	/*Calculo la magnitud de la fft y libero la memoria ocupada por la fft.*/
	get_fft_norm_mag(fft_output, pdst, size / 2);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	461a      	mov	r2, r3
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	6938      	ldr	r0, [r7, #16]
 800371e:	f7ff ffbe 	bl	800369e <get_fft_norm_mag>
	vPortFree(fft_output);
 8003722:	6938      	ldr	r0, [r7, #16]
 8003724:	f00e f840 	bl	80117a8 <vPortFree>
	fft_output = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
	return;
 800372c:	e000      	b.n	8003730 <process_frame+0x6c>
		return;
 800372e:	bf00      	nop
}
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <compare_features>:
 * @param template Puntero al template con los features guardados de antemano.
 * @param target Puntero al vector con los features obtenidos de la voz actual.
 * @param size Tamaño de los vectores template y target.
 * @return comp_state Estado de la comparacion de features.
 */
bool compare_features(float32_t *template, float32_t *target, uint32_t size){
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
	uint32_t accepted_bins = 0;										//Bins dentro del threshold
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
	float32_t accepted_bins_ratio;									//Proporcion de bins aceptados con respecto al total
	float32_t *diff = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4618      	mov	r0, r3
 800374e:	f00d ff5d 	bl	801160c <pvPortMalloc>
 8003752:	61f8      	str	r0, [r7, #28]
	float32_t *abs_diff = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f00d ff57 	bl	801160c <pvPortMalloc>
 800375e:	61b8      	str	r0, [r7, #24]
	bool comp_state;												//Estado de comparacion de los features

	//Resto bin a bin los features y calculo el valor absoluto
	arm_sub_f32(template, target, diff, size);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f00f fac8 	bl	8012cfc <arm_sub_f32>
	arm_abs_f32(diff, abs_diff, size);
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	69f8      	ldr	r0, [r7, #28]
 8003772:	f00f fb85 	bl	8012e80 <arm_abs_f32>

	//Cuento cuantos bins estan por debajo del threshold
	for(uint32_t i = 0; i < size; i++){
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
 800377a:	e012      	b.n	80037a2 <compare_features+0x6a>
		if(abs_diff[i] < DIF_THRESHOLD){
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 800378c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003794:	d502      	bpl.n	800379c <compare_features+0x64>
			accepted_bins++;
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	3301      	adds	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
	for(uint32_t i = 0; i < size; i++){
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	3301      	adds	r3, #1
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d3e8      	bcc.n	800377c <compare_features+0x44>
		}
	}

	/*Libero la memoria utilizada*/
	vPortFree(diff);
 80037aa:	69f8      	ldr	r0, [r7, #28]
 80037ac:	f00d fffc 	bl	80117a8 <vPortFree>
	vPortFree(abs_diff);
 80037b0:	69b8      	ldr	r0, [r7, #24]
 80037b2:	f00d fff9 	bl	80117a8 <vPortFree>

	//Calculo el ratio de bins aceptados
	accepted_bins_ratio = ((float32_t) accepted_bins) / size;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	ee07 3a90 	vmov	s15, r3
 80037bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ce:	edc7 7a05 	vstr	s15, [r7, #20]

	//Verifico si el ratio de bins aceptados es mayor al threshold BIN_RATIO_THRESHOLD
	comp_state = (accepted_bins_ratio >= BIN_RATIO_THRESHOLD) ? true : false;
 80037d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80037f4 <compare_features+0xbc>
 80037da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e2:	bfac      	ite	ge
 80037e4:	2301      	movge	r3, #1
 80037e6:	2300      	movlt	r3, #0
 80037e8:	74fb      	strb	r3, [r7, #19]
	return comp_state;
 80037ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3728      	adds	r7, #40	@ 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	3f4ccccd 	.word	0x3f4ccccd

080037f8 <send_uart>:

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC


void send_uart(char *string){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fc fd57 	bl	80002b4 <strlen>
 8003806:	4603      	mov	r3, r0
 8003808:	b29a      	uxth	r2, r3
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4803      	ldr	r0, [pc, #12]	@ (8003820 <send_uart+0x28>)
 8003812:	f005 fa3f 	bl	8008c94 <HAL_UART_Transmit>
	return;
 8003816:	bf00      	nop
}
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200004c0 	.word	0x200004c0

08003824 <mount_sd>:
		send_uart(str);
	}
	return;
}

FRESULT mount_sd(char* path){
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800382c:	2201      	movs	r2, #1
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	480a      	ldr	r0, [pc, #40]	@ (800385c <mount_sd+0x38>)
 8003832:	f009 fc3b 	bl	800d0ac <f_mount>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <mount_sd+0x3c>)
 800383c:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 800383e:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <mount_sd+0x3c>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <mount_sd+0x2c>
		send_uart("Error al montar la tarjeta SD!!!\n");
 8003846:	4807      	ldr	r0, [pc, #28]	@ (8003864 <mount_sd+0x40>)
 8003848:	f7ff ffd6 	bl	80037f8 <send_uart>
		while(1);
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <mount_sd+0x28>
	}
	return fresult;
 8003850:	4b03      	ldr	r3, [pc, #12]	@ (8003860 <mount_sd+0x3c>)
 8003852:	781b      	ldrb	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200009a0 	.word	0x200009a0
 8003860:	20002b58 	.word	0x20002b58
 8003864:	08014aa4 	.word	0x08014aa4

08003868 <unmount_sd>:

FRESULT unmount_sd(char* path){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8003870:	2201      	movs	r2, #1
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	2000      	movs	r0, #0
 8003876:	f009 fc19 	bl	800d0ac <f_mount>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <unmount_sd+0x38>)
 8003880:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003882:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <unmount_sd+0x38>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <unmount_sd+0x2c>
		send_uart("Error al desmontar la tarjeta SD!!!\n");
 800388a:	4806      	ldr	r0, [pc, #24]	@ (80038a4 <unmount_sd+0x3c>)
 800388c:	f7ff ffb4 	bl	80037f8 <send_uart>
		while(1);
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <unmount_sd+0x28>
	}
	return fresult;
 8003894:	4b02      	ldr	r3, [pc, #8]	@ (80038a0 <unmount_sd+0x38>)
 8003896:	781b      	ldrb	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20002b58 	.word	0x20002b58
 80038a4:	08014ac8 	.word	0x08014ac8

080038a8 <check_if_file_exists>:


FRESULT check_if_file_exists(char *filename){
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	fresult = f_stat(filename, &fno);
 80038b0:	4909      	ldr	r1, [pc, #36]	@ (80038d8 <check_if_file_exists+0x30>)
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f00b f8d5 	bl	800ea62 <f_stat>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	4b07      	ldr	r3, [pc, #28]	@ (80038dc <check_if_file_exists+0x34>)
 80038be:	701a      	strb	r2, [r3, #0]
	return (fresult != FR_OK) ? FR_NO_FILE : fresult;
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <check_if_file_exists+0x34>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <check_if_file_exists+0x24>
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <check_if_file_exists+0x26>
 80038cc:	2304      	movs	r3, #4
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20002a38 	.word	0x20002a38
 80038dc:	20002b58 	.word	0x20002b58

080038e0 <create_file>:


FRESULT create_file(char *filename, char *header){
 80038e0:	b580      	push	{r7, lr}
 80038e2:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038ec:	f843 0c5c 	str.w	r0, [r3, #-92]
 80038f0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038f4:	f843 1c60 	str.w	r1, [r3, #-96]
	FIL fil;
	/*Creo el archivo*/
	fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 80038f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038fc:	4619      	mov	r1, r3
 80038fe:	f107 0320 	add.w	r3, r7, #32
 8003902:	3b18      	subs	r3, #24
 8003904:	220a      	movs	r2, #10
 8003906:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 800390a:	4618      	mov	r0, r3
 800390c:	f009 fc32 	bl	800d174 <f_open>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	4b26      	ldr	r3, [pc, #152]	@ (80039b0 <create_file+0xd0>)
 8003916:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003918:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <create_file+0xd0>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <create_file+0x46>
		return fresult;
 8003920:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <create_file+0xd0>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	e03f      	b.n	80039a6 <create_file+0xc6>
	}
	/*Escribo el header*/
	fresult = f_write(&fil, header, strlen(header), &bw);
 8003926:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800392a:	f853 0c60 	ldr.w	r0, [r3, #-96]
 800392e:	f7fc fcc1 	bl	80002b4 <strlen>
 8003932:	4602      	mov	r2, r0
 8003934:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003938:	4619      	mov	r1, r3
 800393a:	f107 0020 	add.w	r0, r7, #32
 800393e:	3818      	subs	r0, #24
 8003940:	4b1c      	ldr	r3, [pc, #112]	@ (80039b4 <create_file+0xd4>)
 8003942:	f851 1c60 	ldr.w	r1, [r1, #-96]
 8003946:	f00a f8d1 	bl	800daec <f_write>
 800394a:	4603      	mov	r3, r0
 800394c:	461a      	mov	r2, r3
 800394e:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <create_file+0xd0>)
 8003950:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < strlen(header)){
 8003952:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <create_file+0xd0>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <create_file+0x90>
 800395a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800395e:	f853 0c60 	ldr.w	r0, [r3, #-96]
 8003962:	f7fc fca7 	bl	80002b4 <strlen>
 8003966:	4602      	mov	r2, r0
 8003968:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <create_file+0xd4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d90e      	bls.n	800398e <create_file+0xae>
		f_close(&fil);
 8003970:	f107 0320 	add.w	r3, r7, #32
 8003974:	3b18      	subs	r3, #24
 8003976:	4618      	mov	r0, r3
 8003978:	f00a fc01 	bl	800e17e <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;
 800397c:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <create_file+0xd0>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <create_file+0xaa>
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <create_file+0xd0>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	e00d      	b.n	80039a6 <create_file+0xc6>
 800398a:	2301      	movs	r3, #1
 800398c:	e00b      	b.n	80039a6 <create_file+0xc6>
	}
	/*Cierro el archivo*/
	fresult = f_close(&fil);
 800398e:	f107 0320 	add.w	r3, r7, #32
 8003992:	3b18      	subs	r3, #24
 8003994:	4618      	mov	r0, r3
 8003996:	f00a fbf2 	bl	800e17e <f_close>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <create_file+0xd0>)
 80039a0:	701a      	strb	r2, [r3, #0]
	return fresult;
 80039a2:	4b03      	ldr	r3, [pc, #12]	@ (80039b0 <create_file+0xd0>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	20002b58 	.word	0x20002b58
 80039b4:	20002b60 	.word	0x20002b60

080039b8 <get_time_from_rtc>:

void get_time_from_rtc(char *rtc_lecture){
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	@ 0x30
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
	/***Esta funcion devuelve en formato string la fecha y hora actual usando el RTC***/
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;
	char *time = pvPortMalloc(15 * sizeof(char));
 80039c0:	200f      	movs	r0, #15
 80039c2:	f00d fe23 	bl	801160c <pvPortMalloc>
 80039c6:	6278      	str	r0, [r7, #36]	@ 0x24
	/*Obtengo el tiempo actual*/
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80039c8:	f107 0310 	add.w	r3, r7, #16
 80039cc:	2200      	movs	r2, #0
 80039ce:	4619      	mov	r1, r3
 80039d0:	4817      	ldr	r0, [pc, #92]	@ (8003a30 <get_time_from_rtc+0x78>)
 80039d2:	f003 fe58 	bl	8007686 <HAL_RTC_GetTime>
	/*Obtengo la fecha actual*/
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80039d6:	f107 030c 	add.w	r3, r7, #12
 80039da:	2200      	movs	r2, #0
 80039dc:	4619      	mov	r1, r3
 80039de:	4814      	ldr	r0, [pc, #80]	@ (8003a30 <get_time_from_rtc+0x78>)
 80039e0:	f003 ff33 	bl	800784a <HAL_RTC_GetDate>
	/*Guardo fecha y hora en los buffers correspondientes*/
	snprintf(time, 15, "%02d:%02d:%02d ", currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80039e4:	7c3b      	ldrb	r3, [r7, #16]
 80039e6:	4619      	mov	r1, r3
 80039e8:	7c7b      	ldrb	r3, [r7, #17]
 80039ea:	7cba      	ldrb	r2, [r7, #18]
 80039ec:	9201      	str	r2, [sp, #4]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	460b      	mov	r3, r1
 80039f2:	4a10      	ldr	r2, [pc, #64]	@ (8003a34 <get_time_from_rtc+0x7c>)
 80039f4:	210f      	movs	r1, #15
 80039f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039f8:	f00f fe1c 	bl	8013634 <sniprintf>
	snprintf(rtc_lecture, 15, "%02d-%02d-%2d ", currentDate.Date, currentDate.Month, 2000 + currentDate.Year);
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	4619      	mov	r1, r3
 8003a00:	7b7b      	ldrb	r3, [r7, #13]
 8003a02:	461a      	mov	r2, r3
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	9200      	str	r2, [sp, #0]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4a09      	ldr	r2, [pc, #36]	@ (8003a38 <get_time_from_rtc+0x80>)
 8003a12:	210f      	movs	r1, #15
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f00f fe0d 	bl	8013634 <sniprintf>
	strcat(rtc_lecture, time);
 8003a1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f00f fea2 	bl	8013766 <strcat>
	vPortFree(time);
 8003a22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a24:	f00d fec0 	bl	80117a8 <vPortFree>
	return;
 8003a28:	bf00      	nop
}
 8003a2a:	3728      	adds	r7, #40	@ 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000400 	.word	0x20000400
 8003a34:	08014af0 	.word	0x08014af0
 8003a38:	08014b00 	.word	0x08014b00

08003a3c <save_buffer_on_sd>:
	//Cierro el archivo
	fresult = f_close(&fil);
	return FR_OK;
}

FRESULT save_buffer_on_sd(char *filename, float *buffer, size_t size){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a4a:	f843 0c5c 	str.w	r0, [r3, #-92]
 8003a4e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a52:	f843 1c60 	str.w	r1, [r3, #-96]
 8003a56:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a5a:	f843 2c64 	str.w	r2, [r3, #-100]
	 * Es importante que el archivo sea .bin, ya que es más conveniente guardar
	 * los datos en este formato (ocupa menos espacio y es más directa la escritura).
	 */
	//Abro el archivo
	FIL fil;
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);						//Se abre con append por si es necesario seguir escribiendo desde el final
 8003a5e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a62:	4619      	mov	r1, r3
 8003a64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a68:	3b18      	subs	r3, #24
 8003a6a:	2232      	movs	r2, #50	@ 0x32
 8003a6c:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f009 fb7f 	bl	800d174 <f_open>
 8003a76:	4603      	mov	r3, r0
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b25      	ldr	r3, [pc, #148]	@ (8003b10 <save_buffer_on_sd+0xd4>)
 8003a7c:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <save_buffer_on_sd+0xd4>)
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <save_buffer_on_sd+0x50>
		return fresult;
 8003a86:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <save_buffer_on_sd+0xd4>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	e03a      	b.n	8003b02 <save_buffer_on_sd+0xc6>
	}
	//Escribo los datos del buffer en el archivo
	fresult = f_write(&fil, buffer, FLOAT_SIZE_BYTES(size), &bw);
 8003a8c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a90:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003aa0:	3818      	subs	r0, #24
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <save_buffer_on_sd+0xd8>)
 8003aa4:	f851 1c60 	ldr.w	r1, [r1, #-96]
 8003aa8:	f00a f820 	bl	800daec <f_write>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b17      	ldr	r3, [pc, #92]	@ (8003b10 <save_buffer_on_sd+0xd4>)
 8003ab2:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < FLOAT_SIZE_BYTES(size)){
 8003ab4:	4b16      	ldr	r3, [pc, #88]	@ (8003b10 <save_buffer_on_sd+0xd4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d108      	bne.n	8003ace <save_buffer_on_sd+0x92>
 8003abc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003ac0:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8003ac4:	009a      	lsls	r2, r3, #2
 8003ac6:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <save_buffer_on_sd+0xd8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d90e      	bls.n	8003aec <save_buffer_on_sd+0xb0>
		f_close(&fil);																	//Frente a un error cierro el archivo y salgo de la funcion
 8003ace:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ad2:	3b18      	subs	r3, #24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f00a fb52 	bl	800e17e <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;								//Si se escribieron bytes de menos, devuelve FR_DISK_ERR
 8003ada:	4b0d      	ldr	r3, [pc, #52]	@ (8003b10 <save_buffer_on_sd+0xd4>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <save_buffer_on_sd+0xac>
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <save_buffer_on_sd+0xd4>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	e00c      	b.n	8003b02 <save_buffer_on_sd+0xc6>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e00a      	b.n	8003b02 <save_buffer_on_sd+0xc6>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8003aec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003af0:	3b18      	subs	r3, #24
 8003af2:	4618      	mov	r0, r3
 8003af4:	f00a fb43 	bl	800e17e <f_close>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <save_buffer_on_sd+0xd4>)
 8003afe:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20002b58 	.word	0x20002b58
 8003b14:	20002b60 	.word	0x20002b60

08003b18 <read_buffer_from_sd>:

FRESULT read_buffer_from_sd(char *filename, float *buffer, size_t size, uint32_t current_pos){
 8003b18:	b5b0      	push	{r4, r5, r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
	 * La funcion esta pensada para leer de a bloques iguales, no guarda la ultima
	 * posicion del puntero de lectura, se debe llevar cuenta externamente.
	 */

	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 8003b26:	2201      	movs	r2, #1
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	4823      	ldr	r0, [pc, #140]	@ (8003bb8 <read_buffer_from_sd+0xa0>)
 8003b2c:	f009 fb22 	bl	800d174 <f_open>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b21      	ldr	r3, [pc, #132]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b36:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003b38:	4b20      	ldr	r3, [pc, #128]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d002      	beq.n	8003b46 <read_buffer_from_sd+0x2e>
		return fresult;
 8003b40:	4b1e      	ldr	r3, [pc, #120]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	e033      	b.n	8003bae <read_buffer_from_sd+0x96>
	}

	//Posiciono el puntero de lectura en el archivo
	fresult = f_lseek(&fil, current_pos);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	461c      	mov	r4, r3
 8003b4c:	4615      	mov	r5, r2
 8003b4e:	4622      	mov	r2, r4
 8003b50:	462b      	mov	r3, r5
 8003b52:	4819      	ldr	r0, [pc, #100]	@ (8003bb8 <read_buffer_from_sd+0xa0>)
 8003b54:	f00a fb42 	bl	800e1dc <f_lseek>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b17      	ldr	r3, [pc, #92]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b5e:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003b60:	4b16      	ldr	r3, [pc, #88]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d005      	beq.n	8003b74 <read_buffer_from_sd+0x5c>
		f_close(&fil);
 8003b68:	4813      	ldr	r0, [pc, #76]	@ (8003bb8 <read_buffer_from_sd+0xa0>)
 8003b6a:	f00a fb08 	bl	800e17e <f_close>
		return fresult;
 8003b6e:	4b13      	ldr	r3, [pc, #76]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	e01c      	b.n	8003bae <read_buffer_from_sd+0x96>
	}

	//Leo el bloque de tamaño size desde el archivo
	fresult = f_read(&fil, buffer, FLOAT_SIZE_BYTES(size), &br);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	009a      	lsls	r2, r3, #2
 8003b78:	4b11      	ldr	r3, [pc, #68]	@ (8003bc0 <read_buffer_from_sd+0xa8>)
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	480e      	ldr	r0, [pc, #56]	@ (8003bb8 <read_buffer_from_sd+0xa0>)
 8003b7e:	f009 fdee 	bl	800d75e <f_read>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b0d      	ldr	r3, [pc, #52]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b88:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <read_buffer_from_sd+0x86>
		f_close(&fil);
 8003b92:	4809      	ldr	r0, [pc, #36]	@ (8003bb8 <read_buffer_from_sd+0xa0>)
 8003b94:	f00a faf3 	bl	800e17e <f_close>
		return fresult;
 8003b98:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	e007      	b.n	8003bae <read_buffer_from_sd+0x96>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8003b9e:	4806      	ldr	r0, [pc, #24]	@ (8003bb8 <read_buffer_from_sd+0xa0>)
 8003ba0:	f00a faed 	bl	800e17e <f_close>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b04      	ldr	r3, [pc, #16]	@ (8003bbc <read_buffer_from_sd+0xa4>)
 8003baa:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	200019e0 	.word	0x200019e0
 8003bbc:	20002b58 	.word	0x20002b58
 8003bc0:	20002b5c 	.word	0x20002b5c

08003bc4 <write_entry>:



FRESULT write_entry(char *filename, char *entry){
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003bd2:	f843 0c64 	str.w	r0, [r3, #-100]
 8003bd6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003bda:	f843 1c68 	str.w	r1, [r3, #-104]
	FIL fil;
	/*Abro el archivo en modo append*/
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 8003bde:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003be2:	4619      	mov	r1, r3
 8003be4:	f107 0308 	add.w	r3, r7, #8
 8003be8:	2232      	movs	r2, #50	@ 0x32
 8003bea:	f851 1c64 	ldr.w	r1, [r1, #-100]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f009 fac0 	bl	800d174 <f_open>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <write_entry+0xec>)
 8003bfa:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK){
 8003bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb0 <write_entry+0xec>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d14c      	bne.n	8003c9e <write_entry+0xda>
		char *buffer = pvPortMalloc(70 * sizeof(char));
 8003c04:	2046      	movs	r0, #70	@ 0x46
 8003c06:	f00d fd01 	bl	801160c <pvPortMalloc>
 8003c0a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c0e:	f103 0304 	add.w	r3, r3, #4
 8003c12:	6018      	str	r0, [r3, #0]
		snprintf(buffer, 70, "%s\n", entry);
 8003c14:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003c18:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8003c1c:	4a25      	ldr	r2, [pc, #148]	@ (8003cb4 <write_entry+0xf0>)
 8003c1e:	2146      	movs	r1, #70	@ 0x46
 8003c20:	f507 5083 	add.w	r0, r7, #4192	@ 0x1060
 8003c24:	f100 0004 	add.w	r0, r0, #4
 8003c28:	6800      	ldr	r0, [r0, #0]
 8003c2a:	f00f fd03 	bl	8013634 <sniprintf>
		/*Escribo la entrada en el archivo*/
		fresult = f_write(&fil, buffer, strlen(buffer), &bw);
 8003c2e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c32:	f103 0304 	add.w	r3, r3, #4
 8003c36:	6818      	ldr	r0, [r3, #0]
 8003c38:	f7fc fb3c 	bl	80002b4 <strlen>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	f107 0008 	add.w	r0, r7, #8
 8003c42:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb8 <write_entry+0xf4>)
 8003c44:	f507 5183 	add.w	r1, r7, #4192	@ 0x1060
 8003c48:	f101 0104 	add.w	r1, r1, #4
 8003c4c:	6809      	ldr	r1, [r1, #0]
 8003c4e:	f009 ff4d 	bl	800daec <f_write>
 8003c52:	4603      	mov	r3, r0
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <write_entry+0xec>)
 8003c58:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK || bw < strlen(buffer)){
 8003c5a:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <write_entry+0xec>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10b      	bne.n	8003c7a <write_entry+0xb6>
 8003c62:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c66:	f103 0304 	add.w	r3, r3, #4
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	f7fc fb22 	bl	80002b4 <strlen>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b11      	ldr	r3, [pc, #68]	@ (8003cb8 <write_entry+0xf4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d901      	bls.n	8003c7e <write_entry+0xba>
			return FR_DISK_ERR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e011      	b.n	8003ca2 <write_entry+0xde>
		}
		vPortFree(buffer);
 8003c7e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c82:	f103 0304 	add.w	r3, r3, #4
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	f00d fd8e 	bl	80117a8 <vPortFree>
		fresult = f_close(&fil);
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	4618      	mov	r0, r3
 8003c92:	f00a fa74 	bl	800e17e <f_close>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b05      	ldr	r3, [pc, #20]	@ (8003cb0 <write_entry+0xec>)
 8003c9c:	701a      	strb	r2, [r3, #0]
	}
	return fresult;
 8003c9e:	4b04      	ldr	r3, [pc, #16]	@ (8003cb0 <write_entry+0xec>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20002b58 	.word	0x20002b58
 8003cb4:	08014b10 	.word	0x08014b10
 8003cb8:	20002b60 	.word	0x20002b60

08003cbc <search_user>:

FRESULT search_user(char *filename, char *user_key, char *user_name){
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b0a6      	sub	sp, #152	@ 0x98
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
	char line[LINE_BUFFER_SIZE];
	char *line_key;
	char *line_user;
	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 8003cc8:	2201      	movs	r2, #1
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	482f      	ldr	r0, [pc, #188]	@ (8003d8c <search_user+0xd0>)
 8003cce:	f009 fa51 	bl	800d174 <f_open>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003d90 <search_user+0xd4>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003cda:	4b2d      	ldr	r3, [pc, #180]	@ (8003d90 <search_user+0xd4>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <search_user+0x2c>
		return fresult;
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d90 <search_user+0xd4>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	e04c      	b.n	8003d82 <search_user+0xc6>
	}

	//Descarto el header
	f_gets(line, LINE_BUFFER_SIZE, &fil);
 8003ce8:	f107 0310 	add.w	r3, r7, #16
 8003cec:	4a27      	ldr	r2, [pc, #156]	@ (8003d8c <search_user+0xd0>)
 8003cee:	2180      	movs	r1, #128	@ 0x80
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f00b f818 	bl	800ed26 <f_gets>

	//Busco el usuario asociado linea por linea
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 8003cf6:	e032      	b.n	8003d5e <search_user+0xa2>
		line_key = strtok(line, " ");								//Separo la clave
 8003cf8:	f107 0310 	add.w	r3, r7, #16
 8003cfc:	4925      	ldr	r1, [pc, #148]	@ (8003d94 <search_user+0xd8>)
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f00f fd54 	bl	80137ac <strtok>
 8003d04:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		line_user = strtok(NULL, "\n");								//Separo el usuario
 8003d08:	4923      	ldr	r1, [pc, #140]	@ (8003d98 <search_user+0xdc>)
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	f00f fd4e 	bl	80137ac <strtok>
 8003d10:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

		//Comparo clave
		if(line_key && strcmp(line_key, user_key) == 0){
 8003d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01a      	beq.n	8003d52 <search_user+0x96>
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003d22:	f7fc fabd 	bl	80002a0 <strcmp>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d112      	bne.n	8003d52 <search_user+0x96>
			if(line_user){
 8003d2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00e      	beq.n	8003d52 <search_user+0x96>
				strncpy(user_name, line_user, USER_STR_SIZE - 1);
 8003d34:	2231      	movs	r2, #49	@ 0x31
 8003d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f00f fd22 	bl	8013784 <strncpy>
				user_name[USER_STR_SIZE - 1] = '\0';				//Me aseguro de que haya terminacion nula
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3331      	adds	r3, #49	@ 0x31
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
				f_close(&fil);
 8003d48:	4810      	ldr	r0, [pc, #64]	@ (8003d8c <search_user+0xd0>)
 8003d4a:	f00a fa18 	bl	800e17e <f_close>
				return FR_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e017      	b.n	8003d82 <search_user+0xc6>
			}
		}

		//Limpio la linea para que no se acumulen caracteres de palabras largas
		clear_buffer(line, LINE_BUFFER_SIZE);
 8003d52:	f107 0310 	add.w	r3, r7, #16
 8003d56:	2180      	movs	r1, #128	@ 0x80
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fcb3 	bl	80046c4 <clear_buffer>
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 8003d5e:	f107 0310 	add.w	r3, r7, #16
 8003d62:	4a0a      	ldr	r2, [pc, #40]	@ (8003d8c <search_user+0xd0>)
 8003d64:	2180      	movs	r1, #128	@ 0x80
 8003d66:	4618      	mov	r0, r3
 8003d68:	f00a ffdd 	bl	800ed26 <f_gets>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1c2      	bne.n	8003cf8 <search_user+0x3c>
	}

	//Si se llego al final sin encontrar el usuario, devuelve mensaje de error
	fresult = f_close(&fil);
 8003d72:	4806      	ldr	r0, [pc, #24]	@ (8003d8c <search_user+0xd0>)
 8003d74:	f00a fa03 	bl	800e17e <f_close>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	4b04      	ldr	r3, [pc, #16]	@ (8003d90 <search_user+0xd4>)
 8003d7e:	701a      	strb	r2, [r3, #0]
	return FR_NO_FILE;												//Devuelve FR_NO_FILE si no se encuentra el usuario
 8003d80:	2304      	movs	r3, #4
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3798      	adds	r7, #152	@ 0x98
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	200019e0 	.word	0x200019e0
 8003d90:	20002b58 	.word	0x20002b58
 8003d94:	08014b14 	.word	0x08014b14
 8003d98:	08014b18 	.word	0x08014b18

08003d9c <initialize_files>:

/*Este archivo contiene las funciones principales de la tarea SD*/
#define NO_DATABASE FR_NO_FILE
#define NO_REGISTER FR_DISK_ERR

FRESULT initialize_files(void){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
	FRESULT res;

	//Chequeo que exista el archivo con la database de usuarios
	res = check_if_file_exists("usuarios.txt");
 8003da2:	4811      	ldr	r0, [pc, #68]	@ (8003de8 <initialize_files+0x4c>)
 8003da4:	f7ff fd80 	bl	80038a8 <check_if_file_exists>
 8003da8:	4603      	mov	r3, r0
 8003daa:	71fb      	strb	r3, [r7, #7]
	if(res != FR_OK){
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <initialize_files+0x1a>
		return NO_DATABASE;
 8003db2:	2304      	movs	r3, #4
 8003db4:	e013      	b.n	8003dde <initialize_files+0x42>
	}

	//Chequeo si existe el archivo de registro de accesos. Si no existe, lo creo
	res = check_if_file_exists("registro.txt");
 8003db6:	480d      	ldr	r0, [pc, #52]	@ (8003dec <initialize_files+0x50>)
 8003db8:	f7ff fd76 	bl	80038a8 <check_if_file_exists>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	71fb      	strb	r3, [r7, #7]
	if(res != FR_OK){
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <initialize_files+0x40>
		res = create_file("registro.txt", "Fecha Usuario Estado\n");
 8003dc6:	490a      	ldr	r1, [pc, #40]	@ (8003df0 <initialize_files+0x54>)
 8003dc8:	4808      	ldr	r0, [pc, #32]	@ (8003dec <initialize_files+0x50>)
 8003dca:	f7ff fd89 	bl	80038e0 <create_file>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	71fb      	strb	r3, [r7, #7]
		if(res != FR_OK){
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <initialize_files+0x40>
			return NO_REGISTER;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <initialize_files+0x42>
		}
	}
	return FR_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	08014b1c 	.word	0x08014b1c
 8003dec:	08014b2c 	.word	0x08014b2c
 8003df0:	08014b3c 	.word	0x08014b3c

08003df4 <initialize_sd_and_verify_files>:

bool initialize_sd_and_verify_files(display_message_t *error_message){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	FRESULT res;

	res = mount_sd("");
 8003dfc:	4817      	ldr	r0, [pc, #92]	@ (8003e5c <initialize_sd_and_verify_files+0x68>)
 8003dfe:	f7ff fd11 	bl	8003824 <mount_sd>
 8003e02:	4603      	mov	r3, r0
 8003e04:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK){
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <initialize_sd_and_verify_files+0x22>
		*error_message = DISPLAY_ERROR_SD;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2211      	movs	r2, #17
 8003e10:	701a      	strb	r2, [r3, #0]
		return false;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e01d      	b.n	8003e52 <initialize_sd_and_verify_files+0x5e>
	}

	res = initialize_files();
 8003e16:	f7ff ffc1 	bl	8003d9c <initialize_files>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK){
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d015      	beq.n	8003e50 <initialize_sd_and_verify_files+0x5c>
		switch(res){
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d005      	beq.n	8003e36 <initialize_sd_and_verify_files+0x42>
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d107      	bne.n	8003e3e <initialize_sd_and_verify_files+0x4a>
		case NO_DATABASE:
			*error_message = DISPLAY_DATABASE_NOT_FOUND;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	220f      	movs	r2, #15
 8003e32:	701a      	strb	r2, [r3, #0]
			break;
 8003e34:	e007      	b.n	8003e46 <initialize_sd_and_verify_files+0x52>
		case NO_REGISTER:
			*error_message = DISPLAY_REGISTER_NOT_CREATED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	701a      	strb	r2, [r3, #0]
			break;
 8003e3c:	e003      	b.n	8003e46 <initialize_sd_and_verify_files+0x52>
		default:
			*error_message = DISPLAY_ERROR_UNKNOWN;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2213      	movs	r2, #19
 8003e42:	701a      	strb	r2, [r3, #0]
			break;
 8003e44:	bf00      	nop
		}
		unmount_sd("");
 8003e46:	4805      	ldr	r0, [pc, #20]	@ (8003e5c <initialize_sd_and_verify_files+0x68>)
 8003e48:	f7ff fd0e 	bl	8003868 <unmount_sd>
		return false;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <initialize_sd_and_verify_files+0x5e>
	}

	//No desmontar si se encontraron los archivos necesarios
	return true;
 8003e50:	2301      	movs	r3, #1
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08014b54 	.word	0x08014b54

08003e60 <process_user_key>:

bool process_user_key(char *user_key, char *user_name, display_message_t *error_message){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
	FRESULT res = search_user("usuarios.txt", user_key, user_name);
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	480a      	ldr	r0, [pc, #40]	@ (8003e9c <process_user_key+0x3c>)
 8003e72:	f7ff ff23 	bl	8003cbc <search_user>
 8003e76:	4603      	mov	r3, r0
 8003e78:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK){
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <process_user_key+0x2a>
		*error_message = DISPLAY_USER_NOT_FOUND;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2205      	movs	r2, #5
 8003e84:	701a      	strb	r2, [r3, #0]
		return false;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e004      	b.n	8003e94 <process_user_key+0x34>
	}
	clear_char(user_name, '\r');										//Limpio '\r' agregado por windows
 8003e8a:	210d      	movs	r1, #13
 8003e8c:	68b8      	ldr	r0, [r7, #8]
 8003e8e:	f000 fc37 	bl	8004700 <clear_char>
	return true;
 8003e92:	2301      	movs	r3, #1
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	08014b1c 	.word	0x08014b1c

08003ea0 <build_entry_message>:

void build_entry_message(char *entry, char *user_name, const char *status){
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
	get_time_from_rtc(entry);						//Obtengo fecha y hora
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7ff fd83 	bl	80039b8 <get_time_from_rtc>
	if(user_name != NULL){
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <build_entry_message+0x22>
		strcat(entry, user_name);					//Concateno nombre de usuario
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f00f fc53 	bl	8013766 <strcat>
 8003ec0:	e00d      	b.n	8003ede <build_entry_message+0x3e>
	}
	else{
		strcat(entry, "Desconocido");				//Si no existe, concateno desconocido
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7fc f9f6 	bl	80002b4 <strlen>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	4a13      	ldr	r2, [pc, #76]	@ (8003f20 <build_entry_message+0x80>)
 8003ed2:	461c      	mov	r4, r3
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ed8:	6020      	str	r0, [r4, #0]
 8003eda:	6061      	str	r1, [r4, #4]
 8003edc:	60a2      	str	r2, [r4, #8]
	}
	strcat(entry, " ");
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7fc f9e8 	bl	80002b4 <strlen>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	490d      	ldr	r1, [pc, #52]	@ (8003f24 <build_entry_message+0x84>)
 8003eee:	461a      	mov	r2, r3
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	8013      	strh	r3, [r2, #0]
	strcat(entry, status);							//Concateno estado de acceso
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f00f fc34 	bl	8013766 <strcat>
	strcat(entry, "\n");
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7fc f9d8 	bl	80002b4 <strlen>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4906      	ldr	r1, [pc, #24]	@ (8003f28 <build_entry_message+0x88>)
 8003f0e:	461a      	mov	r2, r3
 8003f10:	460b      	mov	r3, r1
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	8013      	strh	r3, [r2, #0]
	return;
 8003f16:	bf00      	nop
}
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd90      	pop	{r4, r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	08014b58 	.word	0x08014b58
 8003f24:	08014b64 	.word	0x08014b64
 8003f28:	08014b68 	.word	0x08014b68

08003f2c <recognize_user_voice>:

bool recognize_user_voice(char *template_path, char *user_name, display_message_t *message){
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
	uint16_t *voice_buf = pvPortMalloc(U16_SIZE_BYTES(AUDIO_BUFFER_SIZE));
 8003f38:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8003f3c:	f00d fb66 	bl	801160c <pvPortMalloc>
 8003f40:	61f8      	str	r0, [r7, #28]
	display_message_t aux;
	char *entry;
	if(voice_buf == NULL){
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <recognize_user_voice+0x26>
		*message = DISPLAY_ERROR_MEMORY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2212      	movs	r2, #18
 8003f4c:	701a      	strb	r2, [r3, #0]
		return false;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	e05c      	b.n	800400c <recognize_user_voice+0xe0>
	}

	//Envio mensaje a display para indicar que comienza el reconocimiento de voz
	aux = DISPLAY_START_SPEECH_REC;
 8003f52:	2306      	movs	r3, #6
 8003f54:	75fb      	strb	r3, [r7, #23]
	xQueueSend(display_queue, &aux, portMAX_DELAY);									//Envio mensaje al display
 8003f56:	4b2f      	ldr	r3, [pc, #188]	@ (8004014 <recognize_user_voice+0xe8>)
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	f107 0117 	add.w	r1, r7, #23
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f04f 32ff 	mov.w	r2, #4294967295
 8003f64:	f00b fb76 	bl	800f654 <xQueueGenericSend>
	xSemaphoreTake(sd_display_sync, portMAX_DELAY);									//Bloqueo la tarea hasta que el display me devuelva el semaforo
 8003f68:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <recognize_user_voice+0xec>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f70:	4618      	mov	r0, r3
 8003f72:	f00b fde3 	bl	800fb3c <xQueueSemaphoreTake>


	capture_voice(voice_buf, AUDIO_BUFFER_SIZE);
 8003f76:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8003f7a:	69f8      	ldr	r0, [r7, #28]
 8003f7c:	f7ff f956 	bl	800322c <capture_voice>

	//Almaceno la voz en la SD
	aux = DISPLAY_PROCESSING_DATA;
 8003f80:	230c      	movs	r3, #12
 8003f82:	75fb      	strb	r3, [r7, #23]
	xQueueSend(display_queue, &aux, portMAX_DELAY);									//Envio mensaje indicando que se esta procesando la voz
 8003f84:	4b23      	ldr	r3, [pc, #140]	@ (8004014 <recognize_user_voice+0xe8>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	f107 0117 	add.w	r1, r7, #23
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f92:	f00b fb5f 	bl	800f654 <xQueueGenericSend>
	store_voice(voice_buf, AUDIO_BUFFER_SIZE, FRAME_SIZE, "current_voice.bin");
 8003f96:	4b21      	ldr	r3, [pc, #132]	@ (800401c <recognize_user_voice+0xf0>)
 8003f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f9c:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8003fa0:	69f8      	ldr	r0, [r7, #28]
 8003fa2:	f7ff f9ab 	bl	80032fc <store_voice>
	vPortFree(voice_buf);
 8003fa6:	69f8      	ldr	r0, [r7, #28]
 8003fa8:	f00d fbfe 	bl	80117a8 <vPortFree>

	//Extraigo los features de la voz
	entry = pvPortMalloc(CHAR_SIZE_BYTES(ENTRY_STR_SIZE));
 8003fac:	203c      	movs	r0, #60	@ 0x3c
 8003fae:	f00d fb2d 	bl	801160c <pvPortMalloc>
 8003fb2:	61b8      	str	r0, [r7, #24]
	extract_and_save_features("current_voice.bin", "current_feature.bin");
 8003fb4:	491a      	ldr	r1, [pc, #104]	@ (8004020 <recognize_user_voice+0xf4>)
 8003fb6:	4819      	ldr	r0, [pc, #100]	@ (800401c <recognize_user_voice+0xf0>)
 8003fb8:	f7ff f9f2 	bl	80033a0 <extract_and_save_features>
	if(check_voice(template_path, "current_feature.bin")){
 8003fbc:	4918      	ldr	r1, [pc, #96]	@ (8004020 <recognize_user_voice+0xf4>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff fa3c 	bl	800343c <check_voice>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d010      	beq.n	8003fec <recognize_user_voice+0xc0>
		build_entry_message(entry, user_name, "Concedido\n");
 8003fca:	4a16      	ldr	r2, [pc, #88]	@ (8004024 <recognize_user_voice+0xf8>)
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	69b8      	ldr	r0, [r7, #24]
 8003fd0:	f7ff ff66 	bl	8003ea0 <build_entry_message>
		write_entry("registro.txt", entry);
 8003fd4:	69b9      	ldr	r1, [r7, #24]
 8003fd6:	4814      	ldr	r0, [pc, #80]	@ (8004028 <recognize_user_voice+0xfc>)
 8003fd8:	f7ff fdf4 	bl	8003bc4 <write_entry>
		*message = DISPLAY_VOICE_RECOGNIZED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2207      	movs	r2, #7
 8003fe0:	701a      	strb	r2, [r3, #0]
		vPortFree(entry);
 8003fe2:	69b8      	ldr	r0, [r7, #24]
 8003fe4:	f00d fbe0 	bl	80117a8 <vPortFree>
		//f_unlink("current_feature.bin");
		return true;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e00f      	b.n	800400c <recognize_user_voice+0xe0>
	}
	else{
		build_entry_message(entry, user_name, "Denegado");
 8003fec:	4a0f      	ldr	r2, [pc, #60]	@ (800402c <recognize_user_voice+0x100>)
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	69b8      	ldr	r0, [r7, #24]
 8003ff2:	f7ff ff55 	bl	8003ea0 <build_entry_message>
		write_entry("registro.txt", entry);
 8003ff6:	69b9      	ldr	r1, [r7, #24]
 8003ff8:	480b      	ldr	r0, [pc, #44]	@ (8004028 <recognize_user_voice+0xfc>)
 8003ffa:	f7ff fde3 	bl	8003bc4 <write_entry>
		*message = DISPLAY_VOICE_NOT_RECOGNIZED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2208      	movs	r2, #8
 8004002:	701a      	strb	r2, [r3, #0]
		vPortFree(entry);
 8004004:	69b8      	ldr	r0, [r7, #24]
 8004006:	f00d fbcf 	bl	80117a8 <vPortFree>
		//f_unlink("current_feature.bin");
		return false;
 800400a:	2300      	movs	r3, #0
	}

}
 800400c:	4618      	mov	r0, r3
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2000050c 	.word	0x2000050c
 8004018:	20000514 	.word	0x20000514
 800401c:	08014b6c 	.word	0x08014b6c
 8004020:	08014b80 	.word	0x08014b80
 8004024:	08014b94 	.word	0x08014b94
 8004028:	08014b2c 	.word	0x08014b2c
 800402c:	08014ba0 	.word	0x08014ba0

08004030 <generate_template>:

bool generate_template(void){
 8004030:	b580      	push	{r7, lr}
 8004032:	b0a0      	sub	sp, #128	@ 0x80
 8004034:	af00      	add	r7, sp, #0
	display_message_t message;
	float *template, *my_feature;
	char filenames[NUM_OF_VOICES][20] = {"feature_1.bin", "feature_2.bin", "feature_3.bin", "feature_4.bin", "feature_5.bin"};
 8004036:	4a79      	ldr	r2, [pc, #484]	@ (800421c <generate_template+0x1ec>)
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	4611      	mov	r1, r2
 800403c:	2264      	movs	r2, #100	@ 0x64
 800403e:	4618      	mov	r0, r3
 8004040:	f00f fc83 	bl	801394a <memcpy>

	size_t free_heap = xPortGetFreeHeapSize();
 8004044:	f00d fc14 	bl	8011870 <xPortGetFreeHeapSize>
 8004048:	67b8      	str	r0, [r7, #120]	@ 0x78
	//Reservo memoria para el buffer que contiene la captura de voz
	uint16_t *voice_buf = pvPortMalloc(U16_SIZE_BYTES(AUDIO_BUFFER_SIZE));
 800404a:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 800404e:	f00d fadd 	bl	801160c <pvPortMalloc>
 8004052:	6778      	str	r0, [r7, #116]	@ 0x74
	if(voice_buf == NULL){
 8004054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10d      	bne.n	8004076 <generate_template+0x46>
		//Manejar el error
		message = DISPLAY_ERROR_MEMORY;
 800405a:	2312      	movs	r3, #18
 800405c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8004060:	4b6f      	ldr	r3, [pc, #444]	@ (8004220 <generate_template+0x1f0>)
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	f107 016b 	add.w	r1, r7, #107	@ 0x6b
 8004068:	2300      	movs	r3, #0
 800406a:	f04f 32ff 	mov.w	r2, #4294967295
 800406e:	f00b faf1 	bl	800f654 <xQueueGenericSend>
		while(1);
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <generate_template+0x42>
		return false;
	}
	free_heap = xPortGetFreeHeapSize();
 8004076:	f00d fbfb 	bl	8011870 <xPortGetFreeHeapSize>
 800407a:	67b8      	str	r0, [r7, #120]	@ 0x78
	//Capturo las voces y las guardo en la tarjeta SD
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 800407c:	2300      	movs	r3, #0
 800407e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004082:	e03c      	b.n	80040fe <generate_template+0xce>
		//Envio mensaje de inicio de reconocimiento al display
		message = DISPLAY_START_SPEECH_REC;
 8004084:	2306      	movs	r3, #6
 8004086:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		xQueueSend(display_queue, &message, portMAX_DELAY);
 800408a:	4b65      	ldr	r3, [pc, #404]	@ (8004220 <generate_template+0x1f0>)
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	f107 016b 	add.w	r1, r7, #107	@ 0x6b
 8004092:	2300      	movs	r3, #0
 8004094:	f04f 32ff 	mov.w	r2, #4294967295
 8004098:	f00b fadc 	bl	800f654 <xQueueGenericSend>
		xSemaphoreTake(sd_display_sync, portMAX_DELAY);							//Bloqueo la tarea hasta que el display me devuelva el semaforo
 800409c:	4b61      	ldr	r3, [pc, #388]	@ (8004224 <generate_template+0x1f4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f04f 31ff 	mov.w	r1, #4294967295
 80040a4:	4618      	mov	r0, r3
 80040a6:	f00b fd49 	bl	800fb3c <xQueueSemaphoreTake>

		//Capturo voces y las almaceno en la SD
		capture_voice(voice_buf, AUDIO_BUFFER_SIZE);
 80040aa:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 80040ae:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80040b0:	f7ff f8bc 	bl	800322c <capture_voice>
		message = DISPLAY_PROCESSING_DATA;
 80040b4:	230c      	movs	r3, #12
 80040b6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		xQueueSend(display_queue, &message, portMAX_DELAY);
 80040ba:	4b59      	ldr	r3, [pc, #356]	@ (8004220 <generate_template+0x1f0>)
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	f107 016b 	add.w	r1, r7, #107	@ 0x6b
 80040c2:	2300      	movs	r3, #0
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	f00b fac4 	bl	800f654 <xQueueGenericSend>
		store_voice(voice_buf, AUDIO_BUFFER_SIZE, FRAME_SIZE, "current_voice.bin");
 80040cc:	4b56      	ldr	r3, [pc, #344]	@ (8004228 <generate_template+0x1f8>)
 80040ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040d2:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 80040d6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80040d8:	f7ff f910 	bl	80032fc <store_voice>
		extract_and_save_features("current_voice.bin", filenames[i]);											//Borro el archivo current_voice.bin
 80040dc:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 80040e0:	1d39      	adds	r1, r7, #4
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	4619      	mov	r1, r3
 80040ee:	484e      	ldr	r0, [pc, #312]	@ (8004228 <generate_template+0x1f8>)
 80040f0:	f7ff f956 	bl	80033a0 <extract_and_save_features>
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 80040f4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80040f8:	3301      	adds	r3, #1
 80040fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80040fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8004102:	2b04      	cmp	r3, #4
 8004104:	d9be      	bls.n	8004084 <generate_template+0x54>
	}

	//Libero memoria utilizada para capturar voz
	vPortFree(voice_buf);
 8004106:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004108:	f00d fb4e 	bl	80117a8 <vPortFree>

	//Reservo memoria utilizada para crear el template
	template = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 800410c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004110:	f00d fa7c 	bl	801160c <pvPortMalloc>
 8004114:	6738      	str	r0, [r7, #112]	@ 0x70
	my_feature = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 8004116:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800411a:	f00d fa77 	bl	801160c <pvPortMalloc>
 800411e:	66f8      	str	r0, [r7, #108]	@ 0x6c
	if(template == NULL || my_feature == NULL){
 8004120:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <generate_template+0xfc>
 8004126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10d      	bne.n	8004148 <generate_template+0x118>
		//Manejar error
		message = DISPLAY_ERROR_MEMORY;
 800412c:	2312      	movs	r3, #18
 800412e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8004132:	4b3b      	ldr	r3, [pc, #236]	@ (8004220 <generate_template+0x1f0>)
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	f107 016b 	add.w	r1, r7, #107	@ 0x6b
 800413a:	2300      	movs	r3, #0
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	f00b fa88 	bl	800f654 <xQueueGenericSend>
		while(1);
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <generate_template+0x114>
		return false;
	}

	arm_fill_f32(0.0f, template, FEATURE_SIZE);
 8004148:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800414c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800414e:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800422c <generate_template+0x1fc>
 8004152:	f00d fc55 	bl	8011a00 <arm_fill_f32>

	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 8004156:	2300      	movs	r3, #0
 8004158:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800415c:	e036      	b.n	80041cc <generate_template+0x19c>
		//En cada iteracion se procesa el bloque i del feature_{j+1}.bin
		for(uint8_t j = 0; j < NUM_OF_VOICES; j++){
 800415e:	2300      	movs	r3, #0
 8004160:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8004164:	e01b      	b.n	800419e <generate_template+0x16e>
			read_buffer_from_sd(filenames[j], my_feature, FEATURE_SIZE, i * FEATURE_SIZE);
 8004166:	f897 207d 	ldrb.w	r2, [r7, #125]	@ 0x7d
 800416a:	1d39      	adds	r1, r7, #4
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	18c8      	adds	r0, r1, r3
 8004176:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800417a:	029b      	lsls	r3, r3, #10
 800417c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004180:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004182:	f7ff fcc9 	bl	8003b18 <read_buffer_from_sd>
			arm_add_f32(template, my_feature, template, FEATURE_SIZE);
 8004186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800418a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800418c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800418e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004190:	f00e fe30 	bl	8012df4 <arm_add_f32>
		for(uint8_t j = 0; j < NUM_OF_VOICES; j++){
 8004194:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8004198:	3301      	adds	r3, #1
 800419a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 800419e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d9df      	bls.n	8004166 <generate_template+0x136>
		}

		//Escalo para obtener el promedio
		arm_scale_f32(template, 1.0f / NUM_OF_VOICES, template, FEATURE_SIZE);
 80041a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041aa:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80041ac:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8004230 <generate_template+0x200>
 80041b0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80041b2:	f00e fde9 	bl	8012d88 <arm_scale_f32>
		save_buffer_on_sd("current_template.bin", template, FEATURE_SIZE);
 80041b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041ba:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80041bc:	481d      	ldr	r0, [pc, #116]	@ (8004234 <generate_template+0x204>)
 80041be:	f7ff fc3d 	bl	8003a3c <save_buffer_on_sd>
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80041c2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80041c6:	3301      	adds	r3, #1
 80041c8:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80041cc:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d9c4      	bls.n	800415e <generate_template+0x12e>
	}

	//Borro los archivos generados para crear el template
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 80041da:	e00f      	b.n	80041fc <generate_template+0x1cc>
		f_unlink(filenames[i]);
 80041dc:	f897 207c 	ldrb.w	r2, [r7, #124]	@ 0x7c
 80041e0:	1d39      	adds	r1, r7, #4
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	4618      	mov	r0, r3
 80041ee:	f00a fc92 	bl	800eb16 <f_unlink>
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 80041f2:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80041f6:	3301      	adds	r3, #1
 80041f8:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 80041fc:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8004200:	2b04      	cmp	r3, #4
 8004202:	d9eb      	bls.n	80041dc <generate_template+0x1ac>
	}

	//Libero memoria de template y my_feature
	vPortFree(template);
 8004204:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004206:	f00d facf 	bl	80117a8 <vPortFree>
	vPortFree(my_feature);
 800420a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800420c:	f00d facc 	bl	80117a8 <vPortFree>
	return true;
 8004210:	2301      	movs	r3, #1
}
 8004212:	4618      	mov	r0, r3
 8004214:	3780      	adds	r7, #128	@ 0x80
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	08014bc4 	.word	0x08014bc4
 8004220:	2000050c 	.word	0x2000050c
 8004224:	20000514 	.word	0x20000514
 8004228:	08014b6c 	.word	0x08014b6c
 800422c:	00000000 	.word	0x00000000
 8004230:	3e4ccccd 	.word	0x3e4ccccd
 8004234:	08014bac 	.word	0x08014bac

08004238 <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	display_message_t message;
	uint8_t counter = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 8004244:	f7fe fa67 	bl	8002716 <display_init>
	display_start_msg();				//Muestro mensaje inicial
 8004248:	f7fe fb02 	bl	8002850 <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &message, portMAX_DELAY);
 800424c:	4b61      	ldr	r3, [pc, #388]	@ (80043d4 <display_task+0x19c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f107 010e 	add.w	r1, r7, #14
 8004254:	f04f 32ff 	mov.w	r2, #4294967295
 8004258:	4618      	mov	r0, r3
 800425a:	f00b fb8d 	bl	800f978 <xQueueReceive>
		switch(message){
 800425e:	7bbb      	ldrb	r3, [r7, #14]
 8004260:	3b01      	subs	r3, #1
 8004262:	2b11      	cmp	r3, #17
 8004264:	d8f2      	bhi.n	800424c <display_task+0x14>
 8004266:	a201      	add	r2, pc, #4	@ (adr r2, 800426c <display_task+0x34>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042b5 	.word	0x080042b5
 8004270:	080042bb 	.word	0x080042bb
 8004274:	080042d3 	.word	0x080042d3
 8004278:	080042e9 	.word	0x080042e9
 800427c:	080042fb 	.word	0x080042fb
 8004280:	0800430d 	.word	0x0800430d
 8004284:	08004331 	.word	0x08004331
 8004288:	0800433f 	.word	0x0800433f
 800428c:	08004361 	.word	0x08004361
 8004290:	0800436f 	.word	0x0800436f
 8004294:	08004381 	.word	0x08004381
 8004298:	0800435b 	.word	0x0800435b
 800429c:	080043a7 	.word	0x080043a7
 80042a0:	08004399 	.word	0x08004399
 80042a4:	08004393 	.word	0x08004393
 80042a8:	0800424d 	.word	0x0800424d
 80042ac:	0800424d 	.word	0x0800424d
 80042b0:	080043c3 	.word	0x080043c3
		case DISPLAY_SCREEN_WELCOME:
			display_start_msg();
 80042b4:	f7fe facc 	bl	8002850 <display_start_msg>
			break;
 80042b8:	e08a      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_ENTER_DIGIT:
			if(counter < SEQUENCE_LENGTH){
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	2b05      	cmp	r3, #5
 80042be:	f200 8083 	bhi.w	80043c8 <display_task+0x190>
				counter++;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	3301      	adds	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe faf6 	bl	80028bc <display_sequence_entry_msg>
			}
			break;
 80042d0:	e07a      	b.n	80043c8 <display_task+0x190>
		case DISPLAY_ERASE_DIGIT:
			if(counter > 0){
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d079      	beq.n	80043cc <display_task+0x194>
				counter--;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	3b01      	subs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe faeb 	bl	80028bc <display_sequence_entry_msg>
			}
			break;
 80042e6:	e071      	b.n	80043cc <display_task+0x194>
		case DISPLAY_USER_FOUND:
			display_user_found_msg();
 80042e8:	f7fe fb46 	bl	8002978 <display_user_found_msg>
			counter = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 80042f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80042f4:	f00c f8c2 	bl	801047c <vTaskDelay>
			break;
 80042f8:	e06a      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_USER_NOT_FOUND:
			display_user_not_found_msg();
 80042fa:	f7fe fb47 	bl	800298c <display_user_not_found_msg>
			counter = 0;							//Reinicio el contador
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004302:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004306:	f00c f8b9 	bl	801047c <vTaskDelay>
			break;
 800430a:	e061      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_START_SPEECH_REC:
			display_start_voice_recognition_msg();
 800430c:	f7fe fb48 	bl	80029a0 <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004310:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004314:	f00c f8b2 	bl	801047c <vTaskDelay>
			countdown_msg();
 8004318:	f7fe fb4c 	bl	80029b4 <countdown_msg>
			display_capturing_voice_msg();
 800431c:	f7fe fba0 	bl	8002a60 <display_capturing_voice_msg>
			xSemaphoreGive(sd_display_sync);
 8004320:	4b2d      	ldr	r3, [pc, #180]	@ (80043d8 <display_task+0x1a0>)
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	2300      	movs	r3, #0
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	f00b f993 	bl	800f654 <xQueueGenericSend>
			break;
 800432e:	e04f      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_VOICE_RECOGNIZED:
			display_recognized_voice_msg();
 8004330:	f7fe fba0 	bl	8002a74 <display_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004334:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004338:	f00c f8a0 	bl	801047c <vTaskDelay>
			break;
 800433c:	e048      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_VOICE_NOT_RECOGNIZED:
			display_not_recognized_voice_msg();
 800433e:	f7fe fba3 	bl	8002a88 <display_not_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004342:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004346:	f00c f899 	bl	801047c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 800434a:	4b23      	ldr	r3, [pc, #140]	@ (80043d8 <display_task+0x1a0>)
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	2300      	movs	r3, #0
 8004350:	2200      	movs	r2, #0
 8004352:	2100      	movs	r1, #0
 8004354:	f00b f97e 	bl	800f654 <xQueueGenericSend>
			break;
 8004358:	e03a      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_PROCESSING_DATA:
			display_processing_data_msg();
 800435a:	f7fe fb9f 	bl	8002a9c <display_processing_data_msg>
			//vTaskDelay(2000 / portTICK_RATE_MS);
			break;
 800435e:	e037      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_ACCESS_GRANTED:
			display_access_granted_msg();
 8004360:	f7fe fb00 	bl	8002964 <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004364:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004368:	f00c f888 	bl	801047c <vTaskDelay>
			break;
 800436c:	e030      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_TIMEOUT_EVENT:
			display_timeout_msg();
 800436e:	f7fe fae5 	bl	800293c <display_timeout_msg>
			counter = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004376:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800437a:	f00c f87f 	bl	801047c <vTaskDelay>
			break;
 800437e:	e027      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_INCOMPLETE_SEQUENCE_EVENT:
			display_incomplete_entry_msg();
 8004380:	f7fe fae6 	bl	8002950 <display_incomplete_entry_msg>
			counter = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004388:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800438c:	f00c f876 	bl	801047c <vTaskDelay>
			break;
 8004390:	e01e      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_DATABASE_NOT_FOUND:
			display_missing_database_msg();
 8004392:	f7fe fb8d 	bl	8002ab0 <display_missing_database_msg>
			break;
 8004396:	e01b      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_TEMPLATE_NOT_FOUND:
			display_missing_template_msg();
 8004398:	f7fe fb94 	bl	8002ac4 <display_missing_template_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 800439c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043a0:	f00c f86c 	bl	801047c <vTaskDelay>
			break;
 80043a4:	e014      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_TEMPLATE_SAVED:
			display_template_saved_msg();
 80043a6:	f7fe fb97 	bl	8002ad8 <display_template_saved_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80043aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043ae:	f00c f865 	bl	801047c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 80043b2:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <display_task+0x1a0>)
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	2300      	movs	r3, #0
 80043b8:	2200      	movs	r2, #0
 80043ba:	2100      	movs	r1, #0
 80043bc:	f00b f94a 	bl	800f654 <xQueueGenericSend>
			break;
 80043c0:	e006      	b.n	80043d0 <display_task+0x198>
		case DISPLAY_ERROR_MEMORY:
			display_missing_database_msg();
 80043c2:	f7fe fb75 	bl	8002ab0 <display_missing_database_msg>
 80043c6:	e741      	b.n	800424c <display_task+0x14>
			break;
 80043c8:	bf00      	nop
 80043ca:	e73f      	b.n	800424c <display_task+0x14>
			break;
 80043cc:	bf00      	nop
 80043ce:	e73d      	b.n	800424c <display_task+0x14>
		xQueueReceive(display_queue, &message, portMAX_DELAY);
 80043d0:	e73c      	b.n	800424c <display_task+0x14>
 80043d2:	bf00      	nop
 80043d4:	2000050c 	.word	0x2000050c
 80043d8:	20000514 	.word	0x20000514

080043dc <keypad_task>:
#include "digit_handle_logic.h"
#include "keypad_functions.h"
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
	char input;
	char kp_buffer[SEQUENCE_LENGTH + 1] = {0};										//Son 7 elementos para incluir el caracter '\0'
 80043e4:	2300      	movs	r3, #0
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	f107 0310 	add.w	r3, r7, #16
 80043ec:	2100      	movs	r1, #0
 80043ee:	460a      	mov	r2, r1
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	460a      	mov	r2, r1
 80043f4:	709a      	strb	r2, [r3, #2]
	bool send_flag = false;
 80043f6:	2300      	movs	r3, #0
 80043f8:	72fb      	strb	r3, [r7, #11]
	display_message_t message;
	while(1){
		input = read_keypad();
 80043fa:	f7fe feb5 	bl	8003168 <read_keypad>
 80043fe:	4603      	mov	r3, r0
 8004400:	75bb      	strb	r3, [r7, #22]
		message = handle_keypad_input(input, kp_buffer, &send_flag);
 8004402:	f107 020b 	add.w	r2, r7, #11
 8004406:	f107 010c 	add.w	r1, r7, #12
 800440a:	7dbb      	ldrb	r3, [r7, #22]
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fda5 	bl	8002f5c <handle_keypad_input>
 8004412:	4603      	mov	r3, r0
 8004414:	72bb      	strb	r3, [r7, #10]
		if(send_flag){
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01c      	beq.n	8004456 <keypad_task+0x7a>
			//Envio uno por uno los digitos obtenidos con el keypad a la tarea SD
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 800441c:	2300      	movs	r3, #0
 800441e:	75fb      	strb	r3, [r7, #23]
 8004420:	e00d      	b.n	800443e <keypad_task+0x62>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 8004422:	4b13      	ldr	r3, [pc, #76]	@ (8004470 <keypad_task+0x94>)
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	f107 020c 	add.w	r2, r7, #12
 800442c:	18d1      	adds	r1, r2, r3
 800442e:	2300      	movs	r3, #0
 8004430:	f04f 32ff 	mov.w	r2, #4294967295
 8004434:	f00b f90e 	bl	800f654 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	3301      	adds	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b06      	cmp	r3, #6
 8004442:	d9ee      	bls.n	8004422 <keypad_task+0x46>
			}
			xSemaphoreTake(keypad_sd_sync, portMAX_DELAY);							//Espero que la tarea SD devuelva el semaforo
 8004444:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <keypad_task+0x98>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f04f 31ff 	mov.w	r1, #4294967295
 800444c:	4618      	mov	r0, r3
 800444e:	f00b fb75 	bl	800fb3c <xQueueSemaphoreTake>

			//Reinicio el flag de envio
			send_flag = false;
 8004452:	2300      	movs	r3, #0
 8004454:	72fb      	strb	r3, [r7, #11]
		}
		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(message != DISPLAY_IDLE){
 8004456:	7abb      	ldrb	r3, [r7, #10]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ce      	beq.n	80043fa <keypad_task+0x1e>
			xQueueSend(display_queue, &message, portMAX_DELAY);
 800445c:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <keypad_task+0x9c>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	f107 010a 	add.w	r1, r7, #10
 8004464:	2300      	movs	r3, #0
 8004466:	f04f 32ff 	mov.w	r2, #4294967295
 800446a:	f00b f8f3 	bl	800f654 <xQueueGenericSend>
		input = read_keypad();
 800446e:	e7c4      	b.n	80043fa <keypad_task+0x1e>
 8004470:	20000508 	.word	0x20000508
 8004474:	20000510 	.word	0x20000510
 8004478:	2000050c 	.word	0x2000050c

0800447c <sd_task>:
/*================[Private defines]========================*/
#define CODE_VERSION 1

/*================[Public task]==========================*/
#if CODE_VERSION == 1
void sd_task(void *pvParameters){
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	char user_key_retrieved[SEQUENCE_LENGTH + 1];					//Para recibir los digitos desde el keypad
	char *template_path;											//Para guardar la direccion del template asociado al usuario
	char *user_name;												//Para guardar el nombre de usuario

	//Control inicial. Verifico existencia de archivos importantes
	if(!initialize_sd_and_verify_files(&message)){
 8004484:	f107 0313 	add.w	r3, r7, #19
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fcb3 	bl	8003df4 <initialize_sd_and_verify_files>
 800448e:	4603      	mov	r3, r0
 8004490:	f083 0301 	eor.w	r3, r3, #1
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <sd_task+0x34>
		//No se pudieron realizar las inicializaciones
		xQueueSend(display_queue, &message, portMAX_DELAY);			//Envio pantalla de error al display
 800449a:	4b84      	ldr	r3, [pc, #528]	@ (80046ac <sd_task+0x230>)
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	f107 0113 	add.w	r1, r7, #19
 80044a2:	2300      	movs	r3, #0
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	f00b f8d4 	bl	800f654 <xQueueGenericSend>
		while(1);													//Loop permanente. Resetear y solucionar el problema.
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <sd_task+0x30>
	}

	while(1){
		//Espero a que llegue la clave de usuario ingresada desde la tarea keypad
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80044b0:	2300      	movs	r3, #0
 80044b2:	77fb      	strb	r3, [r7, #31]
 80044b4:	e00d      	b.n	80044d2 <sd_task+0x56>
			xQueueReceive(sequence_queue, &user_key_retrieved[i], portMAX_DELAY);
 80044b6:	4b7e      	ldr	r3, [pc, #504]	@ (80046b0 <sd_task+0x234>)
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
 80044bc:	f107 020c 	add.w	r2, r7, #12
 80044c0:	4413      	add	r3, r2
 80044c2:	f04f 32ff 	mov.w	r2, #4294967295
 80044c6:	4619      	mov	r1, r3
 80044c8:	f00b fa56 	bl	800f978 <xQueueReceive>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80044cc:	7ffb      	ldrb	r3, [r7, #31]
 80044ce:	3301      	adds	r3, #1
 80044d0:	77fb      	strb	r3, [r7, #31]
 80044d2:	7ffb      	ldrb	r3, [r7, #31]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d9ee      	bls.n	80044b6 <sd_task+0x3a>
		}

		//Verifico si la clave es 000000. En cuyo caso se debe crear el template
		if(strcmp(user_key_retrieved, "000000") == 0){
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	4975      	ldr	r1, [pc, #468]	@ (80046b4 <sd_task+0x238>)
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb fede 	bl	80002a0 <strcmp>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d138      	bne.n	800455c <sd_task+0xe0>
			if(generate_template()){
 80044ea:	f7ff fda1 	bl	8004030 <generate_template>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d019      	beq.n	8004528 <sd_task+0xac>
				//Muestro mensaje en display indicando que se creo el template
				message = DISPLAY_TEMPLATE_SAVED;
 80044f4:	230d      	movs	r3, #13
 80044f6:	74fb      	strb	r3, [r7, #19]
				xQueueSend(display_queue, &message, portMAX_DELAY);
 80044f8:	4b6c      	ldr	r3, [pc, #432]	@ (80046ac <sd_task+0x230>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	f107 0113 	add.w	r1, r7, #19
 8004500:	2300      	movs	r3, #0
 8004502:	f04f 32ff 	mov.w	r2, #4294967295
 8004506:	f00b f8a5 	bl	800f654 <xQueueGenericSend>
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 800450a:	4b6b      	ldr	r3, [pc, #428]	@ (80046b8 <sd_task+0x23c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f04f 31ff 	mov.w	r1, #4294967295
 8004512:	4618      	mov	r0, r3
 8004514:	f00b fb12 	bl	800fb3c <xQueueSemaphoreTake>
				xSemaphoreGive(keypad_sd_sync);
 8004518:	4b68      	ldr	r3, [pc, #416]	@ (80046bc <sd_task+0x240>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	2300      	movs	r3, #0
 800451e:	2200      	movs	r2, #0
 8004520:	2100      	movs	r1, #0
 8004522:	f00b f897 	bl	800f654 <xQueueGenericSend>
				message = DISPLAY_TEMPLATE_NOT_FOUND;
				xQueueSend(display_queue, &message, portMAX_DELAY);
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
				xSemaphoreGive(keypad_sd_sync);
			}
			continue;
 8004526:	e0bf      	b.n	80046a8 <sd_task+0x22c>
				message = DISPLAY_TEMPLATE_NOT_FOUND;
 8004528:	230e      	movs	r3, #14
 800452a:	74fb      	strb	r3, [r7, #19]
				xQueueSend(display_queue, &message, portMAX_DELAY);
 800452c:	4b5f      	ldr	r3, [pc, #380]	@ (80046ac <sd_task+0x230>)
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	f107 0113 	add.w	r1, r7, #19
 8004534:	2300      	movs	r3, #0
 8004536:	f04f 32ff 	mov.w	r2, #4294967295
 800453a:	f00b f88b 	bl	800f654 <xQueueGenericSend>
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 800453e:	4b5e      	ldr	r3, [pc, #376]	@ (80046b8 <sd_task+0x23c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f04f 31ff 	mov.w	r1, #4294967295
 8004546:	4618      	mov	r0, r3
 8004548:	f00b faf8 	bl	800fb3c <xQueueSemaphoreTake>
				xSemaphoreGive(keypad_sd_sync);
 800454c:	4b5b      	ldr	r3, [pc, #364]	@ (80046bc <sd_task+0x240>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	2300      	movs	r3, #0
 8004552:	2200      	movs	r2, #0
 8004554:	2100      	movs	r1, #0
 8004556:	f00b f87d 	bl	800f654 <xQueueGenericSend>
			continue;
 800455a:	e0a5      	b.n	80046a8 <sd_task+0x22c>
		}

		//Continuo con flujo normal de ejecucion

		//Reservo memoria para almacenar usuario
		user_name = pvPortMalloc(USER_STR_SIZE * sizeof(char));
 800455c:	2032      	movs	r0, #50	@ 0x32
 800455e:	f00d f855 	bl	801160c <pvPortMalloc>
 8004562:	61b8      	str	r0, [r7, #24]
		if(user_name == NULL){
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10b      	bne.n	8004582 <sd_task+0x106>
			message = DISPLAY_ERROR_MEMORY;
 800456a:	2312      	movs	r3, #18
 800456c:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 800456e:	4b4f      	ldr	r3, [pc, #316]	@ (80046ac <sd_task+0x230>)
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f107 0113 	add.w	r1, r7, #19
 8004576:	2300      	movs	r3, #0
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	f00b f86a 	bl	800f654 <xQueueGenericSend>
			continue;
 8004580:	e092      	b.n	80046a8 <sd_task+0x22c>
		}

		//Chequeo existencia de usuario
		if(!process_user_key(user_key_retrieved, user_name, &message)){
 8004582:	f107 0213 	add.w	r2, r7, #19
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	69b9      	ldr	r1, [r7, #24]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fc67 	bl	8003e60 <process_user_key>
 8004592:	4603      	mov	r3, r0
 8004594:	f083 0301 	eor.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d013      	beq.n	80045c6 <sd_task+0x14a>
			//Usuario no existe. Enviar mensaje al display
			xQueueSend(display_queue, &message, portMAX_DELAY);
 800459e:	4b43      	ldr	r3, [pc, #268]	@ (80046ac <sd_task+0x230>)
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	f107 0113 	add.w	r1, r7, #19
 80045a6:	2300      	movs	r3, #0
 80045a8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ac:	f00b f852 	bl	800f654 <xQueueGenericSend>
			vPortFree(user_name);
 80045b0:	69b8      	ldr	r0, [r7, #24]
 80045b2:	f00d f8f9 	bl	80117a8 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 80045b6:	4b41      	ldr	r3, [pc, #260]	@ (80046bc <sd_task+0x240>)
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	2300      	movs	r3, #0
 80045bc:	2200      	movs	r2, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	f00b f848 	bl	800f654 <xQueueGenericSend>
			continue;
 80045c4:	e070      	b.n	80046a8 <sd_task+0x22c>
		}

		//Indico que se encontro el usuario
		message = DISPLAY_USER_FOUND;
 80045c6:	2304      	movs	r3, #4
 80045c8:	74fb      	strb	r3, [r7, #19]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 80045ca:	4b38      	ldr	r3, [pc, #224]	@ (80046ac <sd_task+0x230>)
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f107 0113 	add.w	r1, r7, #19
 80045d2:	2300      	movs	r3, #0
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	f00b f83c 	bl	800f654 <xQueueGenericSend>

		//Reservo memoria para armar el template path
		template_path = pvPortMalloc(TEMPLATE_STR_SIZE * sizeof(char));
 80045dc:	2032      	movs	r0, #50	@ 0x32
 80045de:	f00d f815 	bl	801160c <pvPortMalloc>
 80045e2:	6178      	str	r0, [r7, #20]
		if(template_path == NULL){
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <sd_task+0x19a>
			message = DISPLAY_ERROR_MEMORY;
 80045ea:	2312      	movs	r3, #18
 80045ec:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 80045ee:	4b2f      	ldr	r3, [pc, #188]	@ (80046ac <sd_task+0x230>)
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	f107 0113 	add.w	r1, r7, #19
 80045f6:	2300      	movs	r3, #0
 80045f8:	f04f 32ff 	mov.w	r2, #4294967295
 80045fc:	f00b f82a 	bl	800f654 <xQueueGenericSend>
			vPortFree(user_name);
 8004600:	69b8      	ldr	r0, [r7, #24]
 8004602:	f00d f8d1 	bl	80117a8 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 8004606:	4b2d      	ldr	r3, [pc, #180]	@ (80046bc <sd_task+0x240>)
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	2300      	movs	r3, #0
 800460c:	2200      	movs	r2, #0
 800460e:	2100      	movs	r1, #0
 8004610:	f00b f820 	bl	800f654 <xQueueGenericSend>
			continue;
 8004614:	e048      	b.n	80046a8 <sd_task+0x22c>
		}

		//Verifico la existencia del template
		snprintf(template_path, TEMPLATE_STR_SIZE, "%s.bin", user_name);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	4a29      	ldr	r2, [pc, #164]	@ (80046c0 <sd_task+0x244>)
 800461a:	2132      	movs	r1, #50	@ 0x32
 800461c:	6978      	ldr	r0, [r7, #20]
 800461e:	f00f f809 	bl	8013634 <sniprintf>
		if(check_if_file_exists(template_path) != FR_OK){
 8004622:	6978      	ldr	r0, [r7, #20]
 8004624:	f7ff f940 	bl	80038a8 <check_if_file_exists>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d018      	beq.n	8004660 <sd_task+0x1e4>
			message = DISPLAY_TEMPLATE_NOT_FOUND;
 800462e:	230e      	movs	r3, #14
 8004630:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 8004632:	4b1e      	ldr	r3, [pc, #120]	@ (80046ac <sd_task+0x230>)
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	f107 0113 	add.w	r1, r7, #19
 800463a:	2300      	movs	r3, #0
 800463c:	f04f 32ff 	mov.w	r2, #4294967295
 8004640:	f00b f808 	bl	800f654 <xQueueGenericSend>
			vPortFree(user_name);
 8004644:	69b8      	ldr	r0, [r7, #24]
 8004646:	f00d f8af 	bl	80117a8 <vPortFree>
			vPortFree(template_path);
 800464a:	6978      	ldr	r0, [r7, #20]
 800464c:	f00d f8ac 	bl	80117a8 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 8004650:	4b1a      	ldr	r3, [pc, #104]	@ (80046bc <sd_task+0x240>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	2200      	movs	r2, #0
 8004658:	2100      	movs	r1, #0
 800465a:	f00a fffb 	bl	800f654 <xQueueGenericSend>
			continue;
 800465e:	e023      	b.n	80046a8 <sd_task+0x22c>
		}

		//Realizo reconocimiento de voz
		if(recognize_user_voice(template_path, user_name, &message)){
 8004660:	f107 0313 	add.w	r3, r7, #19
 8004664:	461a      	mov	r2, r3
 8004666:	69b9      	ldr	r1, [r7, #24]
 8004668:	6978      	ldr	r0, [r7, #20]
 800466a:	f7ff fc5f 	bl	8003f2c <recognize_user_voice>
			//Activo cerradura

		}

		//Libero memoria y envio mensaje el mensaje que corresponda al display
		vPortFree(user_name);
 800466e:	69b8      	ldr	r0, [r7, #24]
 8004670:	f00d f89a 	bl	80117a8 <vPortFree>
		vPortFree(template_path);
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f00d f897 	bl	80117a8 <vPortFree>

		xQueueSend(display_queue, &message, portMAX_DELAY);
 800467a:	4b0c      	ldr	r3, [pc, #48]	@ (80046ac <sd_task+0x230>)
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f107 0113 	add.w	r1, r7, #19
 8004682:	2300      	movs	r3, #0
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	f00a ffe4 	bl	800f654 <xQueueGenericSend>
		xSemaphoreTake(sd_display_sync, portMAX_DELAY);												//Bloqueo la tarea hasta que termine de mostrarse el mensaje de reconocimiento
 800468c:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <sd_task+0x23c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f04f 31ff 	mov.w	r1, #4294967295
 8004694:	4618      	mov	r0, r3
 8004696:	f00b fa51 	bl	800fb3c <xQueueSemaphoreTake>
		xSemaphoreGive(keypad_sd_sync);																//Doy el semaforo para que la tarea keypad pueda ejecutarse
 800469a:	4b08      	ldr	r3, [pc, #32]	@ (80046bc <sd_task+0x240>)
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	2300      	movs	r3, #0
 80046a0:	2200      	movs	r2, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	f00a ffd6 	bl	800f654 <xQueueGenericSend>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80046a8:	e702      	b.n	80044b0 <sd_task+0x34>
 80046aa:	bf00      	nop
 80046ac:	2000050c 	.word	0x2000050c
 80046b0:	20000508 	.word	0x20000508
 80046b4:	08014c28 	.word	0x08014c28
 80046b8:	20000514 	.word	0x20000514
 80046bc:	20000510 	.word	0x20000510
 80046c0:	08014c30 	.word	0x08014c30

080046c4 <clear_buffer>:
#include "common_utils.h"
//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00f      	beq.n	80046f4 <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	e007      	b.n	80046ea <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d3f3      	bcc.n	80046da <clear_buffer+0x16>
 80046f2:	e000      	b.n	80046f6 <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 80046f4:	bf00      	nop
    }
}
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <clear_char>:

void clear_char(char *buffer, char character){
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
	char *ptr = buffer;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 8004710:	e006      	b.n	8004720 <clear_char+0x20>
		if(*ptr == 0){
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <clear_char+0x2c>
			break;
		}
		ptr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	429a      	cmp	r2, r3
 8004728:	d1f3      	bne.n	8004712 <clear_char+0x12>
 800472a:	e000      	b.n	800472e <clear_char+0x2e>
			break;
 800472c:	bf00      	nop
	}
	*ptr = 0;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
	return;
 8004734:	bf00      	nop
}
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004744:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <HAL_Init+0x40>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a0d      	ldr	r2, [pc, #52]	@ (8004780 <HAL_Init+0x40>)
 800474a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800474e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <HAL_Init+0x40>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a0a      	ldr	r2, [pc, #40]	@ (8004780 <HAL_Init+0x40>)
 8004756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800475a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800475c:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <HAL_Init+0x40>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a07      	ldr	r2, [pc, #28]	@ (8004780 <HAL_Init+0x40>)
 8004762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004768:	2003      	movs	r0, #3
 800476a:	f000 fe3e 	bl	80053ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800476e:	200f      	movs	r0, #15
 8004770:	f7fd fdda 	bl	8002328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004774:	f7fd fbf0 	bl	8001f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40023c00 	.word	0x40023c00

08004784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_IncTick+0x20>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_IncTick+0x24>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4413      	add	r3, r2
 8004794:	4a04      	ldr	r2, [pc, #16]	@ (80047a8 <HAL_IncTick+0x24>)
 8004796:	6013      	str	r3, [r2, #0]
}
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000018 	.word	0x20000018
 80047a8:	20002b64 	.word	0x20002b64

080047ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  return uwTick;
 80047b0:	4b03      	ldr	r3, [pc, #12]	@ (80047c0 <HAL_GetTick+0x14>)
 80047b2:	681b      	ldr	r3, [r3, #0]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20002b64 	.word	0x20002b64

080047c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e033      	b.n	8004842 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd fbe4 	bl	8001fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d118      	bne.n	8004834 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800480a:	f023 0302 	bic.w	r3, r3, #2
 800480e:	f043 0202 	orr.w	r2, r3, #2
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fbb2 	bl	8004f80 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004826:	f023 0303 	bic.w	r3, r3, #3
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	641a      	str	r2, [r3, #64]	@ 0x40
 8004832:	e001      	b.n	8004838 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b086      	sub	sp, #24
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d049      	beq.n	8004914 <HAL_ADC_IRQHandler+0xca>
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d046      	beq.n	8004914 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b00      	cmp	r3, #0
 8004890:	d105      	bne.n	800489e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d12b      	bne.n	8004904 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d127      	bne.n	8004904 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d119      	bne.n	8004904 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0220 	bic.w	r2, r2, #32
 80048de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fd faf9 	bl	8001efc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f06f 0212 	mvn.w	r2, #18
 8004912:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004922:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d057      	beq.n	80049da <HAL_ADC_IRQHandler+0x190>
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d054      	beq.n	80049da <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	d105      	bne.n	8004948 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d139      	bne.n	80049ca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004960:	2b00      	cmp	r3, #0
 8004962:	d006      	beq.n	8004972 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800496e:	2b00      	cmp	r3, #0
 8004970:	d12b      	bne.n	80049ca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800497c:	2b00      	cmp	r3, #0
 800497e:	d124      	bne.n	80049ca <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800498a:	2b00      	cmp	r3, #0
 800498c:	d11d      	bne.n	80049ca <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004992:	2b00      	cmp	r3, #0
 8004994:	d119      	bne.n	80049ca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049a4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	f043 0201 	orr.w	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fc56 	bl	800527c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f06f 020c 	mvn.w	r2, #12
 80049d8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d017      	beq.n	8004a20 <HAL_ADC_IRQHandler+0x1d6>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d014      	beq.n	8004a20 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10d      	bne.n	8004a20 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f97f 	bl	8004d14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0201 	mvn.w	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a2e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d015      	beq.n	8004a62 <HAL_ADC_IRQHandler+0x218>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d012      	beq.n	8004a62 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a40:	f043 0202 	orr.w	r2, r3, #2
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0220 	mvn.w	r2, #32
 8004a50:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f968 	bl	8004d28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0220 	mvn.w	r2, #32
 8004a60:	601a      	str	r2, [r3, #0]
  }
}
 8004a62:	bf00      	nop
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_ADC_Start_DMA+0x1e>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0ce      	b.n	8004c28 <HAL_ADC_Start_DMA+0x1bc>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d018      	beq.n	8004ad2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ab0:	4b5f      	ldr	r3, [pc, #380]	@ (8004c30 <HAL_ADC_Start_DMA+0x1c4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a5f      	ldr	r2, [pc, #380]	@ (8004c34 <HAL_ADC_Start_DMA+0x1c8>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0c9a      	lsrs	r2, r3, #18
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004ac4:	e002      	b.n	8004acc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f9      	bne.n	8004ac6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ae0:	d107      	bne.n	8004af2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004af0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	f040 8086 	bne.w	8004c0e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b0a:	f023 0301 	bic.w	r3, r3, #1
 8004b0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004b2c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b40:	d106      	bne.n	8004b50 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b46:	f023 0206 	bic.w	r2, r3, #6
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b4e:	e002      	b.n	8004b56 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b5e:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <HAL_ADC_Start_DMA+0x1cc>)
 8004b60:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	4a35      	ldr	r2, [pc, #212]	@ (8004c3c <HAL_ADC_Start_DMA+0x1d0>)
 8004b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	4a34      	ldr	r2, [pc, #208]	@ (8004c40 <HAL_ADC_Start_DMA+0x1d4>)
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	4a33      	ldr	r2, [pc, #204]	@ (8004c44 <HAL_ADC_Start_DMA+0x1d8>)
 8004b78:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004b82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004b92:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	334c      	adds	r3, #76	@ 0x4c
 8004bae:	4619      	mov	r1, r3
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f000 fcfc 	bl	80055b0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d129      	bne.n	8004c26 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	e020      	b.n	8004c26 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a17      	ldr	r2, [pc, #92]	@ (8004c48 <HAL_ADC_Start_DMA+0x1dc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d11b      	bne.n	8004c26 <HAL_ADC_Start_DMA+0x1ba>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d114      	bne.n	8004c26 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	e00b      	b.n	8004c26 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	f043 0210 	orr.w	r2, r3, #16
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1e:	f043 0201 	orr.w	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000004 	.word	0x20000004
 8004c34:	431bde83 	.word	0x431bde83
 8004c38:	40012300 	.word	0x40012300
 8004c3c:	08005179 	.word	0x08005179
 8004c40:	08005233 	.word	0x08005233
 8004c44:	0800524f 	.word	0x0800524f
 8004c48:	40012000 	.word	0x40012000

08004c4c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d101      	bne.n	8004c66 <HAL_ADC_Stop_DMA+0x1a>
 8004c62:	2302      	movs	r3, #2
 8004c64:	e048      	b.n	8004cf8 <HAL_ADC_Stop_DMA+0xac>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0201 	bic.w	r2, r2, #1
 8004c7c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d130      	bne.n	8004cee <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c9a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d10f      	bne.n	8004cca <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fcd6 	bl	8005660 <HAL_DMA_Abort>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004cd8:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x1c>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e105      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x228>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b09      	cmp	r3, #9
 8004d66:	d925      	bls.n	8004db4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68d9      	ldr	r1, [r3, #12]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3b1e      	subs	r3, #30
 8004d7e:	2207      	movs	r2, #7
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	43da      	mvns	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68d9      	ldr	r1, [r3, #12]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	4618      	mov	r0, r3
 8004da0:	4603      	mov	r3, r0
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4403      	add	r3, r0
 8004da6:	3b1e      	subs	r3, #30
 8004da8:	409a      	lsls	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	60da      	str	r2, [r3, #12]
 8004db2:	e022      	b.n	8004dfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6919      	ldr	r1, [r3, #16]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	4413      	add	r3, r2
 8004dc8:	2207      	movs	r2, #7
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43da      	mvns	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	400a      	ands	r2, r1
 8004dd6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6919      	ldr	r1, [r3, #16]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	4618      	mov	r0, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4403      	add	r3, r0
 8004df0:	409a      	lsls	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d824      	bhi.n	8004e4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	3b05      	subs	r3, #5
 8004e14:	221f      	movs	r2, #31
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43da      	mvns	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	400a      	ands	r2, r1
 8004e22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	4618      	mov	r0, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3b05      	subs	r3, #5
 8004e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e4a:	e04c      	b.n	8004ee6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b0c      	cmp	r3, #12
 8004e52:	d824      	bhi.n	8004e9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	3b23      	subs	r3, #35	@ 0x23
 8004e66:	221f      	movs	r2, #31
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	400a      	ands	r2, r1
 8004e74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	4618      	mov	r0, r3
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3b23      	subs	r3, #35	@ 0x23
 8004e90:	fa00 f203 	lsl.w	r2, r0, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e9c:	e023      	b.n	8004ee6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	3b41      	subs	r3, #65	@ 0x41
 8004eb0:	221f      	movs	r2, #31
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43da      	mvns	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	400a      	ands	r2, r1
 8004ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	4618      	mov	r0, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3b41      	subs	r3, #65	@ 0x41
 8004eda:	fa00 f203 	lsl.w	r2, r0, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ee6:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <HAL_ADC_ConfigChannel+0x234>)
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a21      	ldr	r2, [pc, #132]	@ (8004f74 <HAL_ADC_ConfigChannel+0x238>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d109      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x1cc>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b12      	cmp	r3, #18
 8004efa:	d105      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a19      	ldr	r2, [pc, #100]	@ (8004f74 <HAL_ADC_ConfigChannel+0x238>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d123      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x21e>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d003      	beq.n	8004f22 <HAL_ADC_ConfigChannel+0x1e6>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b11      	cmp	r3, #17
 8004f20:	d11b      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d111      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f36:	4b10      	ldr	r3, [pc, #64]	@ (8004f78 <HAL_ADC_ConfigChannel+0x23c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a10      	ldr	r2, [pc, #64]	@ (8004f7c <HAL_ADC_ConfigChannel+0x240>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	0c9a      	lsrs	r2, r3, #18
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f4c:	e002      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f9      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	40012300 	.word	0x40012300
 8004f74:	40012000 	.word	0x40012000
 8004f78:	20000004 	.word	0x20000004
 8004f7c:	431bde83 	.word	0x431bde83

08004f80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f88:	4b79      	ldr	r3, [pc, #484]	@ (8005170 <ADC_Init+0x1f0>)
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	021a      	lsls	r2, r3, #8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6859      	ldr	r1, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6899      	ldr	r1, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005012:	4a58      	ldr	r2, [pc, #352]	@ (8005174 <ADC_Init+0x1f4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d022      	beq.n	800505e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6899      	ldr	r1, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6899      	ldr	r1, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	609a      	str	r2, [r3, #8]
 800505c:	e00f      	b.n	800507e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800506c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800507c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0202 	bic.w	r2, r2, #2
 800508c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6899      	ldr	r1, [r3, #8]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	7e1b      	ldrb	r3, [r3, #24]
 8005098:	005a      	lsls	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01b      	beq.n	80050e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80050ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6859      	ldr	r1, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	3b01      	subs	r3, #1
 80050d8:	035a      	lsls	r2, r3, #13
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	e007      	b.n	80050f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	3b01      	subs	r3, #1
 8005110:	051a      	lsls	r2, r3, #20
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6899      	ldr	r1, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005136:	025a      	lsls	r2, r3, #9
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800514e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6899      	ldr	r1, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	029a      	lsls	r2, r3, #10
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40012300 	.word	0x40012300
 8005174:	0f000001 	.word	0x0f000001

08005178 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005184:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800518e:	2b00      	cmp	r3, #0
 8005190:	d13c      	bne.n	800520c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d12b      	bne.n	8005204 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d127      	bne.n	8005204 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d006      	beq.n	80051d0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d119      	bne.n	8005204 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0220 	bic.w	r2, r2, #32
 80051de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fc:	f043 0201 	orr.w	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f7fc fe79 	bl	8001efc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800520a:	e00e      	b.n	800522a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff fd85 	bl	8004d28 <HAL_ADC_ErrorCallback>
}
 800521e:	e004      	b.n	800522a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f7ff fd5d 	bl	8004d00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2240      	movs	r2, #64	@ 0x40
 8005260:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	f043 0204 	orr.w	r2, r3, #4
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff fd5a 	bl	8004d28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052a0:	4b0c      	ldr	r3, [pc, #48]	@ (80052d4 <__NVIC_SetPriorityGrouping+0x44>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052ac:	4013      	ands	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052c2:	4a04      	ldr	r2, [pc, #16]	@ (80052d4 <__NVIC_SetPriorityGrouping+0x44>)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	60d3      	str	r3, [r2, #12]
}
 80052c8:	bf00      	nop
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052dc:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <__NVIC_GetPriorityGrouping+0x18>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	0a1b      	lsrs	r3, r3, #8
 80052e2:	f003 0307 	and.w	r3, r3, #7
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005302:	2b00      	cmp	r3, #0
 8005304:	db0b      	blt.n	800531e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	f003 021f 	and.w	r2, r3, #31
 800530c:	4907      	ldr	r1, [pc, #28]	@ (800532c <__NVIC_EnableIRQ+0x38>)
 800530e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2001      	movs	r0, #1
 8005316:	fa00 f202 	lsl.w	r2, r0, r2
 800531a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	e000e100 	.word	0xe000e100

08005330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	6039      	str	r1, [r7, #0]
 800533a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800533c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005340:	2b00      	cmp	r3, #0
 8005342:	db0a      	blt.n	800535a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	490c      	ldr	r1, [pc, #48]	@ (800537c <__NVIC_SetPriority+0x4c>)
 800534a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534e:	0112      	lsls	r2, r2, #4
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	440b      	add	r3, r1
 8005354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005358:	e00a      	b.n	8005370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	4908      	ldr	r1, [pc, #32]	@ (8005380 <__NVIC_SetPriority+0x50>)
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	3b04      	subs	r3, #4
 8005368:	0112      	lsls	r2, r2, #4
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	440b      	add	r3, r1
 800536e:	761a      	strb	r2, [r3, #24]
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	e000e100 	.word	0xe000e100
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005384:	b480      	push	{r7}
 8005386:	b089      	sub	sp, #36	@ 0x24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f1c3 0307 	rsb	r3, r3, #7
 800539e:	2b04      	cmp	r3, #4
 80053a0:	bf28      	it	cs
 80053a2:	2304      	movcs	r3, #4
 80053a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3304      	adds	r3, #4
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	d902      	bls.n	80053b4 <NVIC_EncodePriority+0x30>
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	3b03      	subs	r3, #3
 80053b2:	e000      	b.n	80053b6 <NVIC_EncodePriority+0x32>
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	fa02 f303 	lsl.w	r3, r2, r3
 80053c2:	43da      	mvns	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	401a      	ands	r2, r3
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053cc:	f04f 31ff 	mov.w	r1, #4294967295
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	43d9      	mvns	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053dc:	4313      	orrs	r3, r2
         );
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3724      	adds	r7, #36	@ 0x24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ff4c 	bl	8005290 <__NVIC_SetPriorityGrouping>
}
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005412:	f7ff ff61 	bl	80052d8 <__NVIC_GetPriorityGrouping>
 8005416:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	6978      	ldr	r0, [r7, #20]
 800541e:	f7ff ffb1 	bl	8005384 <NVIC_EncodePriority>
 8005422:	4602      	mov	r2, r0
 8005424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005428:	4611      	mov	r1, r2
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff ff80 	bl	8005330 <__NVIC_SetPriority>
}
 8005430:	bf00      	nop
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	4603      	mov	r3, r0
 8005440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff54 	bl	80052f4 <__NVIC_EnableIRQ>
}
 800544c:	bf00      	nop
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005460:	f7ff f9a4 	bl	80047ac <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e099      	b.n	80055a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005490:	e00f      	b.n	80054b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005492:	f7ff f98b 	bl	80047ac <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b05      	cmp	r3, #5
 800549e:	d908      	bls.n	80054b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2203      	movs	r2, #3
 80054aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e078      	b.n	80055a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e8      	bne.n	8005492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4b38      	ldr	r3, [pc, #224]	@ (80055ac <HAL_DMA_Init+0x158>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	2b04      	cmp	r3, #4
 800550a:	d107      	bne.n	800551c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005514:	4313      	orrs	r3, r2
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0307 	bic.w	r3, r3, #7
 8005532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	2b04      	cmp	r3, #4
 8005544:	d117      	bne.n	8005576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00e      	beq.n	8005576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fadf 	bl	8005b1c <DMA_CheckFifoParam>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2240      	movs	r2, #64	@ 0x40
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005572:	2301      	movs	r3, #1
 8005574:	e016      	b.n	80055a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fa96 	bl	8005ab0 <DMA_CalcBaseAndBitshift>
 8005584:	4603      	mov	r3, r0
 8005586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558c:	223f      	movs	r2, #63	@ 0x3f
 800558e:	409a      	lsls	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	f010803f 	.word	0xf010803f

080055b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_DMA_Start_IT+0x26>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e040      	b.n	8005658 <HAL_DMA_Start_IT+0xa8>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d12f      	bne.n	800564a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 fa28 	bl	8005a54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005608:	223f      	movs	r2, #63	@ 0x3f
 800560a:	409a      	lsls	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0216 	orr.w	r2, r2, #22
 800561e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0208 	orr.w	r2, r2, #8
 8005636:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	e005      	b.n	8005656 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005652:	2302      	movs	r3, #2
 8005654:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800566e:	f7ff f89d 	bl	80047ac <HAL_GetTick>
 8005672:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d008      	beq.n	8005692 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2280      	movs	r2, #128	@ 0x80
 8005684:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e052      	b.n	8005738 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0216 	bic.w	r2, r2, #22
 80056a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695a      	ldr	r2, [r3, #20]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d103      	bne.n	80056c2 <HAL_DMA_Abort+0x62>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d007      	beq.n	80056d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0208 	bic.w	r2, r2, #8
 80056d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056e2:	e013      	b.n	800570c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056e4:	f7ff f862 	bl	80047ac <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d90c      	bls.n	800570c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2203      	movs	r2, #3
 80056fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e015      	b.n	8005738 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e4      	bne.n	80056e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	223f      	movs	r2, #63	@ 0x3f
 8005720:	409a      	lsls	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800574c:	4b8e      	ldr	r3, [pc, #568]	@ (8005988 <HAL_DMA_IRQHandler+0x248>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a8e      	ldr	r2, [pc, #568]	@ (800598c <HAL_DMA_IRQHandler+0x24c>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	0a9b      	lsrs	r3, r3, #10
 8005758:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576a:	2208      	movs	r2, #8
 800576c:	409a      	lsls	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4013      	ands	r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01a      	beq.n	80057ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0304 	and.w	r3, r3, #4
 8005780:	2b00      	cmp	r3, #0
 8005782:	d013      	beq.n	80057ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0204 	bic.w	r2, r2, #4
 8005792:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005798:	2208      	movs	r2, #8
 800579a:	409a      	lsls	r2, r3
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a4:	f043 0201 	orr.w	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b0:	2201      	movs	r2, #1
 80057b2:	409a      	lsls	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d012      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	2201      	movs	r2, #1
 80057d0:	409a      	lsls	r2, r3
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057da:	f043 0202 	orr.w	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e6:	2204      	movs	r2, #4
 80057e8:	409a      	lsls	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d012      	beq.n	8005818 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005804:	2204      	movs	r2, #4
 8005806:	409a      	lsls	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005810:	f043 0204 	orr.w	r2, r3, #4
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800581c:	2210      	movs	r2, #16
 800581e:	409a      	lsls	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d043      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d03c      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800583a:	2210      	movs	r2, #16
 800583c:	409a      	lsls	r2, r3
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d018      	beq.n	8005882 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d108      	bne.n	8005870 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d024      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
 800586e:	e01f      	b.n	80058b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005874:	2b00      	cmp	r3, #0
 8005876:	d01b      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
 8005880:	e016      	b.n	80058b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d107      	bne.n	80058a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0208 	bic.w	r2, r2, #8
 800589e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b4:	2220      	movs	r2, #32
 80058b6:	409a      	lsls	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 808f 	beq.w	80059e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8087 	beq.w	80059e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d6:	2220      	movs	r2, #32
 80058d8:	409a      	lsls	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b05      	cmp	r3, #5
 80058e8:	d136      	bne.n	8005958 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0216 	bic.w	r2, r2, #22
 80058f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695a      	ldr	r2, [r3, #20]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005908:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <HAL_DMA_IRQHandler+0x1da>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0208 	bic.w	r2, r2, #8
 8005928:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592e:	223f      	movs	r2, #63	@ 0x3f
 8005930:	409a      	lsls	r2, r3
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594a:	2b00      	cmp	r3, #0
 800594c:	d07e      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
        }
        return;
 8005956:	e079      	b.n	8005a4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01d      	beq.n	80059a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10d      	bne.n	8005990 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005978:	2b00      	cmp	r3, #0
 800597a:	d031      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
 8005984:	e02c      	b.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
 8005986:	bf00      	nop
 8005988:	20000004 	.word	0x20000004
 800598c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d023      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
 80059a0:	e01e      	b.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10f      	bne.n	80059d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0210 	bic.w	r2, r2, #16
 80059be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d032      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d022      	beq.n	8005a3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2205      	movs	r2, #5
 80059f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d307      	bcc.n	8005a28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f2      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x2cc>
 8005a26:	e000      	b.n	8005a2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	4798      	blx	r3
 8005a4a:	e000      	b.n	8005a4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a4c:	bf00      	nop
    }
  }
}
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b40      	cmp	r3, #64	@ 0x40
 8005a80:	d108      	bne.n	8005a94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a92:	e007      	b.n	8005aa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	60da      	str	r2, [r3, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	3b10      	subs	r3, #16
 8005ac0:	4a14      	ldr	r2, [pc, #80]	@ (8005b14 <DMA_CalcBaseAndBitshift+0x64>)
 8005ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac6:	091b      	lsrs	r3, r3, #4
 8005ac8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005aca:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <DMA_CalcBaseAndBitshift+0x68>)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d909      	bls.n	8005af2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	659a      	str	r2, [r3, #88]	@ 0x58
 8005af0:	e007      	b.n	8005b02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005afa:	f023 0303 	bic.w	r3, r3, #3
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	aaaaaaab 	.word	0xaaaaaaab
 8005b18:	08018798 	.word	0x08018798

08005b1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d11f      	bne.n	8005b76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b03      	cmp	r3, #3
 8005b3a:	d856      	bhi.n	8005bea <DMA_CheckFifoParam+0xce>
 8005b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b44 <DMA_CheckFifoParam+0x28>)
 8005b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b42:	bf00      	nop
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b67 	.word	0x08005b67
 8005b4c:	08005b55 	.word	0x08005b55
 8005b50:	08005beb 	.word	0x08005beb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d046      	beq.n	8005bee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b64:	e043      	b.n	8005bee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b6e:	d140      	bne.n	8005bf2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b74:	e03d      	b.n	8005bf2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b7e:	d121      	bne.n	8005bc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d837      	bhi.n	8005bf6 <DMA_CheckFifoParam+0xda>
 8005b86:	a201      	add	r2, pc, #4	@ (adr r2, 8005b8c <DMA_CheckFifoParam+0x70>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005b9d 	.word	0x08005b9d
 8005b90:	08005ba3 	.word	0x08005ba3
 8005b94:	08005b9d 	.word	0x08005b9d
 8005b98:	08005bb5 	.word	0x08005bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ba0:	e030      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d025      	beq.n	8005bfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bb2:	e022      	b.n	8005bfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bbc:	d11f      	bne.n	8005bfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bc2:	e01c      	b.n	8005bfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d903      	bls.n	8005bd2 <DMA_CheckFifoParam+0xb6>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d003      	beq.n	8005bd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bd0:	e018      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd6:	e015      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00e      	beq.n	8005c02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
      break;
 8005be8:	e00b      	b.n	8005c02 <DMA_CheckFifoParam+0xe6>
      break;
 8005bea:	bf00      	nop
 8005bec:	e00a      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e008      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e006      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e004      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
      break;
 8005bfa:	bf00      	nop
 8005bfc:	e002      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
      break;   
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <DMA_CheckFifoParam+0xe8>
      break;
 8005c02:	bf00      	nop
    }
  } 
  
  return status; 
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop

08005c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b089      	sub	sp, #36	@ 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	e159      	b.n	8005ee4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c30:	2201      	movs	r2, #1
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4013      	ands	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	f040 8148 	bne.w	8005ede <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d005      	beq.n	8005c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d130      	bne.n	8005cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	2203      	movs	r2, #3
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	f003 0201 	and.w	r2, r3, #1
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 0303 	and.w	r3, r3, #3
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d017      	beq.n	8005d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	2203      	movs	r2, #3
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d123      	bne.n	8005d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	08da      	lsrs	r2, r3, #3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3208      	adds	r2, #8
 8005d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	220f      	movs	r2, #15
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4013      	ands	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	08da      	lsrs	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3208      	adds	r2, #8
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	2203      	movs	r2, #3
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 0203 	and.w	r2, r3, #3
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80a2 	beq.w	8005ede <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	4b57      	ldr	r3, [pc, #348]	@ (8005efc <HAL_GPIO_Init+0x2e8>)
 8005da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da2:	4a56      	ldr	r2, [pc, #344]	@ (8005efc <HAL_GPIO_Init+0x2e8>)
 8005da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005daa:	4b54      	ldr	r3, [pc, #336]	@ (8005efc <HAL_GPIO_Init+0x2e8>)
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005db6:	4a52      	ldr	r2, [pc, #328]	@ (8005f00 <HAL_GPIO_Init+0x2ec>)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	220f      	movs	r2, #15
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a49      	ldr	r2, [pc, #292]	@ (8005f04 <HAL_GPIO_Init+0x2f0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d019      	beq.n	8005e16 <HAL_GPIO_Init+0x202>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a48      	ldr	r2, [pc, #288]	@ (8005f08 <HAL_GPIO_Init+0x2f4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_GPIO_Init+0x1fe>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a47      	ldr	r2, [pc, #284]	@ (8005f0c <HAL_GPIO_Init+0x2f8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00d      	beq.n	8005e0e <HAL_GPIO_Init+0x1fa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a46      	ldr	r2, [pc, #280]	@ (8005f10 <HAL_GPIO_Init+0x2fc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <HAL_GPIO_Init+0x1f6>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a45      	ldr	r2, [pc, #276]	@ (8005f14 <HAL_GPIO_Init+0x300>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <HAL_GPIO_Init+0x1f2>
 8005e02:	2304      	movs	r3, #4
 8005e04:	e008      	b.n	8005e18 <HAL_GPIO_Init+0x204>
 8005e06:	2307      	movs	r3, #7
 8005e08:	e006      	b.n	8005e18 <HAL_GPIO_Init+0x204>
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e004      	b.n	8005e18 <HAL_GPIO_Init+0x204>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e002      	b.n	8005e18 <HAL_GPIO_Init+0x204>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <HAL_GPIO_Init+0x204>
 8005e16:	2300      	movs	r3, #0
 8005e18:	69fa      	ldr	r2, [r7, #28]
 8005e1a:	f002 0203 	and.w	r2, r2, #3
 8005e1e:	0092      	lsls	r2, r2, #2
 8005e20:	4093      	lsls	r3, r2
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e28:	4935      	ldr	r1, [pc, #212]	@ (8005f00 <HAL_GPIO_Init+0x2ec>)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	089b      	lsrs	r3, r3, #2
 8005e2e:	3302      	adds	r3, #2
 8005e30:	69ba      	ldr	r2, [r7, #24]
 8005e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e36:	4b38      	ldr	r3, [pc, #224]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	4013      	ands	r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e60:	4b2d      	ldr	r3, [pc, #180]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e84:	4a24      	ldr	r2, [pc, #144]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e8a:	4b23      	ldr	r3, [pc, #140]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	43db      	mvns	r3, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4013      	ands	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005eae:	4a1a      	ldr	r2, [pc, #104]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005eb4:	4b18      	ldr	r3, [pc, #96]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8005f18 <HAL_GPIO_Init+0x304>)
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2b0f      	cmp	r3, #15
 8005ee8:	f67f aea2 	bls.w	8005c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	3724      	adds	r7, #36	@ 0x24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800
 8005f00:	40013800 	.word	0x40013800
 8005f04:	40020000 	.word	0x40020000
 8005f08:	40020400 	.word	0x40020400
 8005f0c:	40020800 	.word	0x40020800
 8005f10:	40020c00 	.word	0x40020c00
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40013c00 	.word	0x40013c00

08005f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	887b      	ldrh	r3, [r7, #2]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f34:	2301      	movs	r3, #1
 8005f36:	73fb      	strb	r3, [r7, #15]
 8005f38:	e001      	b.n	8005f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	807b      	strh	r3, [r7, #2]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f5c:	787b      	ldrb	r3, [r7, #1]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f62:	887a      	ldrh	r2, [r7, #2]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f68:	e003      	b.n	8005f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f6a:	887b      	ldrh	r3, [r7, #2]
 8005f6c:	041a      	lsls	r2, r3, #16
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	619a      	str	r2, [r3, #24]
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
	...

08005f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e12b      	b.n	80061ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fc f880 	bl	80020ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	@ 0x24
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f001 f8ea 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 8005fe8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4a81      	ldr	r2, [pc, #516]	@ (80061f4 <HAL_I2C_Init+0x274>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d807      	bhi.n	8006004 <HAL_I2C_Init+0x84>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a80      	ldr	r2, [pc, #512]	@ (80061f8 <HAL_I2C_Init+0x278>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	bf94      	ite	ls
 8005ffc:	2301      	movls	r3, #1
 8005ffe:	2300      	movhi	r3, #0
 8006000:	b2db      	uxtb	r3, r3
 8006002:	e006      	b.n	8006012 <HAL_I2C_Init+0x92>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4a7d      	ldr	r2, [pc, #500]	@ (80061fc <HAL_I2C_Init+0x27c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	bf94      	ite	ls
 800600c:	2301      	movls	r3, #1
 800600e:	2300      	movhi	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e0e7      	b.n	80061ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a78      	ldr	r2, [pc, #480]	@ (8006200 <HAL_I2C_Init+0x280>)
 800601e:	fba2 2303 	umull	r2, r3, r2, r3
 8006022:	0c9b      	lsrs	r3, r3, #18
 8006024:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4a6a      	ldr	r2, [pc, #424]	@ (80061f4 <HAL_I2C_Init+0x274>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d802      	bhi.n	8006054 <HAL_I2C_Init+0xd4>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3301      	adds	r3, #1
 8006052:	e009      	b.n	8006068 <HAL_I2C_Init+0xe8>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	4a69      	ldr	r2, [pc, #420]	@ (8006204 <HAL_I2C_Init+0x284>)
 8006060:	fba2 2303 	umull	r2, r3, r2, r3
 8006064:	099b      	lsrs	r3, r3, #6
 8006066:	3301      	adds	r3, #1
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6812      	ldr	r2, [r2, #0]
 800606c:	430b      	orrs	r3, r1
 800606e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800607a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	495c      	ldr	r1, [pc, #368]	@ (80061f4 <HAL_I2C_Init+0x274>)
 8006084:	428b      	cmp	r3, r1
 8006086:	d819      	bhi.n	80060bc <HAL_I2C_Init+0x13c>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	1e59      	subs	r1, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	fbb1 f3f3 	udiv	r3, r1, r3
 8006096:	1c59      	adds	r1, r3, #1
 8006098:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800609c:	400b      	ands	r3, r1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <HAL_I2C_Init+0x138>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1e59      	subs	r1, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80060b0:	3301      	adds	r3, #1
 80060b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b6:	e051      	b.n	800615c <HAL_I2C_Init+0x1dc>
 80060b8:	2304      	movs	r3, #4
 80060ba:	e04f      	b.n	800615c <HAL_I2C_Init+0x1dc>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d111      	bne.n	80060e8 <HAL_I2C_Init+0x168>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1e58      	subs	r0, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	440b      	add	r3, r1
 80060d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060d6:	3301      	adds	r3, #1
 80060d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bf0c      	ite	eq
 80060e0:	2301      	moveq	r3, #1
 80060e2:	2300      	movne	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e012      	b.n	800610e <HAL_I2C_Init+0x18e>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	1e58      	subs	r0, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6859      	ldr	r1, [r3, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	0099      	lsls	r1, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80060fe:	3301      	adds	r3, #1
 8006100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf0c      	ite	eq
 8006108:	2301      	moveq	r3, #1
 800610a:	2300      	movne	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <HAL_I2C_Init+0x196>
 8006112:	2301      	movs	r3, #1
 8006114:	e022      	b.n	800615c <HAL_I2C_Init+0x1dc>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10e      	bne.n	800613c <HAL_I2C_Init+0x1bc>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	1e58      	subs	r0, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6859      	ldr	r1, [r3, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	440b      	add	r3, r1
 800612c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006130:	3301      	adds	r3, #1
 8006132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800613a:	e00f      	b.n	800615c <HAL_I2C_Init+0x1dc>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1e58      	subs	r0, r3, #1
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6859      	ldr	r1, [r3, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	0099      	lsls	r1, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006152:	3301      	adds	r3, #1
 8006154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006158:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	6809      	ldr	r1, [r1, #0]
 8006160:	4313      	orrs	r3, r2
 8006162:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	431a      	orrs	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800618a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6911      	ldr	r1, [r2, #16]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	68d2      	ldr	r2, [r2, #12]
 8006196:	4311      	orrs	r1, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6812      	ldr	r2, [r2, #0]
 800619c:	430b      	orrs	r3, r1
 800619e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	695a      	ldr	r2, [r3, #20]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f042 0201 	orr.w	r2, r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	000186a0 	.word	0x000186a0
 80061f8:	001e847f 	.word	0x001e847f
 80061fc:	003d08ff 	.word	0x003d08ff
 8006200:	431bde83 	.word	0x431bde83
 8006204:	10624dd3 	.word	0x10624dd3

08006208 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af02      	add	r7, sp, #8
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	4608      	mov	r0, r1
 8006212:	4611      	mov	r1, r2
 8006214:	461a      	mov	r2, r3
 8006216:	4603      	mov	r3, r0
 8006218:	817b      	strh	r3, [r7, #10]
 800621a:	460b      	mov	r3, r1
 800621c:	813b      	strh	r3, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006222:	f7fe fac3 	bl	80047ac <HAL_GetTick>
 8006226:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b20      	cmp	r3, #32
 8006232:	f040 80d9 	bne.w	80063e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	2319      	movs	r3, #25
 800623c:	2201      	movs	r2, #1
 800623e:	496d      	ldr	r1, [pc, #436]	@ (80063f4 <HAL_I2C_Mem_Write+0x1ec>)
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f971 	bl	8006528 <I2C_WaitOnFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800624c:	2302      	movs	r3, #2
 800624e:	e0cc      	b.n	80063ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_I2C_Mem_Write+0x56>
 800625a:	2302      	movs	r3, #2
 800625c:	e0c5      	b.n	80063ea <HAL_I2C_Mem_Write+0x1e2>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d007      	beq.n	8006284 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006292:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2221      	movs	r2, #33	@ 0x21
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2240      	movs	r2, #64	@ 0x40
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a3a      	ldr	r2, [r7, #32]
 80062ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80062b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4a4d      	ldr	r2, [pc, #308]	@ (80063f8 <HAL_I2C_Mem_Write+0x1f0>)
 80062c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062c6:	88f8      	ldrh	r0, [r7, #6]
 80062c8:	893a      	ldrh	r2, [r7, #8]
 80062ca:	8979      	ldrh	r1, [r7, #10]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	4603      	mov	r3, r0
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f890 	bl	80063fc <I2C_RequestMemoryWrite>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d052      	beq.n	8006388 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e081      	b.n	80063ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 fa36 	bl	800675c <I2C_WaitOnTXEFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00d      	beq.n	8006312 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d107      	bne.n	800630e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800630c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e06b      	b.n	80063ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	781a      	ldrb	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800632c:	3b01      	subs	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b04      	cmp	r3, #4
 800634e:	d11b      	bne.n	8006388 <HAL_I2C_Mem_Write+0x180>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	d017      	beq.n	8006388 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	781a      	ldrb	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1aa      	bne.n	80062e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 fa29 	bl	80067ec <I2C_WaitOnBTFFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00d      	beq.n	80063bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d107      	bne.n	80063b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e016      	b.n	80063ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063e8:	2302      	movs	r3, #2
  }
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	00100002 	.word	0x00100002
 80063f8:	ffff0000 	.word	0xffff0000

080063fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af02      	add	r7, sp, #8
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	4608      	mov	r0, r1
 8006406:	4611      	mov	r1, r2
 8006408:	461a      	mov	r2, r3
 800640a:	4603      	mov	r3, r0
 800640c:	817b      	strh	r3, [r7, #10]
 800640e:	460b      	mov	r3, r1
 8006410:	813b      	strh	r3, [r7, #8]
 8006412:	4613      	mov	r3, r2
 8006414:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006424:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	2200      	movs	r2, #0
 800642e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f878 	bl	8006528 <I2C_WaitOnFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00d      	beq.n	800645a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800644c:	d103      	bne.n	8006456 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006454:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e05f      	b.n	800651a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800645a:	897b      	ldrh	r3, [r7, #10]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006468:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	6a3a      	ldr	r2, [r7, #32]
 800646e:	492d      	ldr	r1, [pc, #180]	@ (8006524 <I2C_RequestMemoryWrite+0x128>)
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f8d3 	bl	800661c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e04c      	b.n	800651a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006498:	6a39      	ldr	r1, [r7, #32]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f95e 	bl	800675c <I2C_WaitOnTXEFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00d      	beq.n	80064c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d107      	bne.n	80064be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e02b      	b.n	800651a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d105      	bne.n	80064d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064c8:	893b      	ldrh	r3, [r7, #8]
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	611a      	str	r2, [r3, #16]
 80064d2:	e021      	b.n	8006518 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064d4:	893b      	ldrh	r3, [r7, #8]
 80064d6:	0a1b      	lsrs	r3, r3, #8
 80064d8:	b29b      	uxth	r3, r3
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e4:	6a39      	ldr	r1, [r7, #32]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f938 	bl	800675c <I2C_WaitOnTXEFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00d      	beq.n	800650e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d107      	bne.n	800650a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006508:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e005      	b.n	800651a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800650e:	893b      	ldrh	r3, [r7, #8]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3718      	adds	r7, #24
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	00010002 	.word	0x00010002

08006528 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006538:	e048      	b.n	80065cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d044      	beq.n	80065cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006542:	f7fe f933 	bl	80047ac <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d302      	bcc.n	8006558 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d139      	bne.n	80065cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d10d      	bne.n	800657e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	43da      	mvns	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4013      	ands	r3, r2
 800656e:	b29b      	uxth	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	e00c      	b.n	8006598 <I2C_WaitOnFlagUntilTimeout+0x70>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	43da      	mvns	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4013      	ands	r3, r2
 800658a:	b29b      	uxth	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	bf0c      	ite	eq
 8006590:	2301      	moveq	r3, #1
 8006592:	2300      	movne	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	429a      	cmp	r2, r3
 800659c:	d116      	bne.n	80065cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b8:	f043 0220 	orr.w	r2, r3, #32
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e023      	b.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10d      	bne.n	80065f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	43da      	mvns	r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4013      	ands	r3, r2
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	e00c      	b.n	800660c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	43da      	mvns	r2, r3
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4013      	ands	r3, r2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	bf0c      	ite	eq
 8006604:	2301      	moveq	r3, #1
 8006606:	2300      	movne	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	429a      	cmp	r2, r3
 8006610:	d093      	beq.n	800653a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800662a:	e071      	b.n	8006710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663a:	d123      	bne.n	8006684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800664a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006654:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006670:	f043 0204 	orr.w	r2, r3, #4
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e067      	b.n	8006754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d041      	beq.n	8006710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668c:	f7fe f88e 	bl	80047ac <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	d302      	bcc.n	80066a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d136      	bne.n	8006710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d10c      	bne.n	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	43da      	mvns	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4013      	ands	r3, r2
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bf14      	ite	ne
 80066be:	2301      	movne	r3, #1
 80066c0:	2300      	moveq	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	e00b      	b.n	80066de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	43da      	mvns	r2, r3
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4013      	ands	r3, r2
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf14      	ite	ne
 80066d8:	2301      	movne	r3, #1
 80066da:	2300      	moveq	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d016      	beq.n	8006710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	f043 0220 	orr.w	r2, r3, #32
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e021      	b.n	8006754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b01      	cmp	r3, #1
 8006718:	d10c      	bne.n	8006734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	43da      	mvns	r2, r3
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4013      	ands	r3, r2
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	bf14      	ite	ne
 800672c:	2301      	movne	r3, #1
 800672e:	2300      	moveq	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	e00b      	b.n	800674c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	43da      	mvns	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4013      	ands	r3, r2
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf14      	ite	ne
 8006746:	2301      	movne	r3, #1
 8006748:	2300      	moveq	r3, #0
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	f47f af6d 	bne.w	800662c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006768:	e034      	b.n	80067d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f886 	bl	800687c <I2C_IsAcknowledgeFailed>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e034      	b.n	80067e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006780:	d028      	beq.n	80067d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006782:	f7fe f813 	bl	80047ac <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d11d      	bne.n	80067d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a2:	2b80      	cmp	r3, #128	@ 0x80
 80067a4:	d016      	beq.n	80067d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2220      	movs	r2, #32
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c0:	f043 0220 	orr.w	r2, r3, #32
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e007      	b.n	80067e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067de:	2b80      	cmp	r3, #128	@ 0x80
 80067e0:	d1c3      	bne.n	800676a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067f8:	e034      	b.n	8006864 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 f83e 	bl	800687c <I2C_IsAcknowledgeFailed>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e034      	b.n	8006874 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d028      	beq.n	8006864 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006812:	f7fd ffcb 	bl	80047ac <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	429a      	cmp	r2, r3
 8006820:	d302      	bcc.n	8006828 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11d      	bne.n	8006864 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b04      	cmp	r3, #4
 8006834:	d016      	beq.n	8006864 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006850:	f043 0220 	orr.w	r2, r3, #32
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e007      	b.n	8006874 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f003 0304 	and.w	r3, r3, #4
 800686e:	2b04      	cmp	r3, #4
 8006870:	d1c3      	bne.n	80067fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800688e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006892:	d11b      	bne.n	80068cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800689c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b8:	f043 0204 	orr.w	r2, r3, #4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e000      	b.n	80068ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e267      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d075      	beq.n	80069e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80068fa:	4b88      	ldr	r3, [pc, #544]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b04      	cmp	r3, #4
 8006904:	d00c      	beq.n	8006920 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006906:	4b85      	ldr	r3, [pc, #532]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800690e:	2b08      	cmp	r3, #8
 8006910:	d112      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006912:	4b82      	ldr	r3, [pc, #520]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800691a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800691e:	d10b      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	4b7e      	ldr	r3, [pc, #504]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05b      	beq.n	80069e4 <HAL_RCC_OscConfig+0x108>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d157      	bne.n	80069e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e242      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006940:	d106      	bne.n	8006950 <HAL_RCC_OscConfig+0x74>
 8006942:	4b76      	ldr	r3, [pc, #472]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a75      	ldr	r2, [pc, #468]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e01d      	b.n	800698c <HAL_RCC_OscConfig+0xb0>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006958:	d10c      	bne.n	8006974 <HAL_RCC_OscConfig+0x98>
 800695a:	4b70      	ldr	r3, [pc, #448]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a6f      	ldr	r2, [pc, #444]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006960:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	4b6d      	ldr	r3, [pc, #436]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a6c      	ldr	r2, [pc, #432]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 800696c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	e00b      	b.n	800698c <HAL_RCC_OscConfig+0xb0>
 8006974:	4b69      	ldr	r3, [pc, #420]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a68      	ldr	r2, [pc, #416]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b66      	ldr	r3, [pc, #408]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a65      	ldr	r2, [pc, #404]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800698a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006994:	f7fd ff0a 	bl	80047ac <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800699c:	f7fd ff06 	bl	80047ac <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	@ 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e207      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ae:	4b5b      	ldr	r3, [pc, #364]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0xc0>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069bc:	f7fd fef6 	bl	80047ac <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c4:	f7fd fef2 	bl	80047ac <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	@ 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e1f3      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d6:	4b51      	ldr	r3, [pc, #324]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0xe8>
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d063      	beq.n	8006aba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80069f2:	4b4a      	ldr	r3, [pc, #296]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00b      	beq.n	8006a16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069fe:	4b47      	ldr	r3, [pc, #284]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a06:	2b08      	cmp	r3, #8
 8006a08:	d11c      	bne.n	8006a44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a0a:	4b44      	ldr	r3, [pc, #272]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d116      	bne.n	8006a44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a16:	4b41      	ldr	r3, [pc, #260]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_RCC_OscConfig+0x152>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d001      	beq.n	8006a2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e1c7      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	4937      	ldr	r1, [pc, #220]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a42:	e03a      	b.n	8006aba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d020      	beq.n	8006a8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a4c:	4b34      	ldr	r3, [pc, #208]	@ (8006b20 <HAL_RCC_OscConfig+0x244>)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a52:	f7fd feab 	bl	80047ac <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a5a:	f7fd fea7 	bl	80047ac <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e1a8      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0f0      	beq.n	8006a5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	4b28      	ldr	r3, [pc, #160]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	4925      	ldr	r1, [pc, #148]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	600b      	str	r3, [r1, #0]
 8006a8c:	e015      	b.n	8006aba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8e:	4b24      	ldr	r3, [pc, #144]	@ (8006b20 <HAL_RCC_OscConfig+0x244>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a94:	f7fd fe8a 	bl	80047ac <HAL_GetTick>
 8006a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a9a:	e008      	b.n	8006aae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a9c:	f7fd fe86 	bl	80047ac <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e187      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aae:	4b1b      	ldr	r3, [pc, #108]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f0      	bne.n	8006a9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d036      	beq.n	8006b34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d016      	beq.n	8006afc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ace:	4b15      	ldr	r3, [pc, #84]	@ (8006b24 <HAL_RCC_OscConfig+0x248>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad4:	f7fd fe6a 	bl	80047ac <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006adc:	f7fd fe66 	bl	80047ac <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e167      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aee:	4b0b      	ldr	r3, [pc, #44]	@ (8006b1c <HAL_RCC_OscConfig+0x240>)
 8006af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f0      	beq.n	8006adc <HAL_RCC_OscConfig+0x200>
 8006afa:	e01b      	b.n	8006b34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006afc:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <HAL_RCC_OscConfig+0x248>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b02:	f7fd fe53 	bl	80047ac <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b08:	e00e      	b.n	8006b28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b0a:	f7fd fe4f 	bl	80047ac <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d907      	bls.n	8006b28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e150      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	42470000 	.word	0x42470000
 8006b24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b28:	4b88      	ldr	r3, [pc, #544]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1ea      	bne.n	8006b0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8097 	beq.w	8006c70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b42:	2300      	movs	r3, #0
 8006b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b46:	4b81      	ldr	r3, [pc, #516]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10f      	bne.n	8006b72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b52:	2300      	movs	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]
 8006b56:	4b7d      	ldr	r3, [pc, #500]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5a:	4a7c      	ldr	r2, [pc, #496]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b62:	4b7a      	ldr	r3, [pc, #488]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	60bb      	str	r3, [r7, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b72:	4b77      	ldr	r3, [pc, #476]	@ (8006d50 <HAL_RCC_OscConfig+0x474>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d118      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b7e:	4b74      	ldr	r3, [pc, #464]	@ (8006d50 <HAL_RCC_OscConfig+0x474>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a73      	ldr	r2, [pc, #460]	@ (8006d50 <HAL_RCC_OscConfig+0x474>)
 8006b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b8a:	f7fd fe0f 	bl	80047ac <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b90:	e008      	b.n	8006ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b92:	f7fd fe0b 	bl	80047ac <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e10c      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8006d50 <HAL_RCC_OscConfig+0x474>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0f0      	beq.n	8006b92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d106      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x2ea>
 8006bb8:	4b64      	ldr	r3, [pc, #400]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bbc:	4a63      	ldr	r2, [pc, #396]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bc4:	e01c      	b.n	8006c00 <HAL_RCC_OscConfig+0x324>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCC_OscConfig+0x30c>
 8006bce:	4b5f      	ldr	r3, [pc, #380]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bd2:	4a5e      	ldr	r2, [pc, #376]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bd4:	f043 0304 	orr.w	r3, r3, #4
 8006bd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bda:	4b5c      	ldr	r3, [pc, #368]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bde:	4a5b      	ldr	r2, [pc, #364]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006be6:	e00b      	b.n	8006c00 <HAL_RCC_OscConfig+0x324>
 8006be8:	4b58      	ldr	r3, [pc, #352]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bec:	4a57      	ldr	r2, [pc, #348]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bf4:	4b55      	ldr	r3, [pc, #340]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf8:	4a54      	ldr	r2, [pc, #336]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006bfa:	f023 0304 	bic.w	r3, r3, #4
 8006bfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d015      	beq.n	8006c34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c08:	f7fd fdd0 	bl	80047ac <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0e:	e00a      	b.n	8006c26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c10:	f7fd fdcc 	bl	80047ac <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e0cb      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c26:	4b49      	ldr	r3, [pc, #292]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0ee      	beq.n	8006c10 <HAL_RCC_OscConfig+0x334>
 8006c32:	e014      	b.n	8006c5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c34:	f7fd fdba 	bl	80047ac <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3a:	e00a      	b.n	8006c52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c3c:	f7fd fdb6 	bl	80047ac <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e0b5      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c52:	4b3e      	ldr	r3, [pc, #248]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1ee      	bne.n	8006c3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d105      	bne.n	8006c70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c64:	4b39      	ldr	r3, [pc, #228]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c68:	4a38      	ldr	r2, [pc, #224]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80a1 	beq.w	8006dbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c7a:	4b34      	ldr	r3, [pc, #208]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f003 030c 	and.w	r3, r3, #12
 8006c82:	2b08      	cmp	r3, #8
 8006c84:	d05c      	beq.n	8006d40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d141      	bne.n	8006d12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8e:	4b31      	ldr	r3, [pc, #196]	@ (8006d54 <HAL_RCC_OscConfig+0x478>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c94:	f7fd fd8a 	bl	80047ac <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fd fd86 	bl	80047ac <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e087      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cae:	4b27      	ldr	r3, [pc, #156]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	019b      	lsls	r3, r3, #6
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	491b      	ldr	r1, [pc, #108]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d54 <HAL_RCC_OscConfig+0x478>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cea:	f7fd fd5f 	bl	80047ac <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf0:	e008      	b.n	8006d04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf2:	f7fd fd5b 	bl	80047ac <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e05c      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d04:	4b11      	ldr	r3, [pc, #68]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0f0      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x416>
 8006d10:	e054      	b.n	8006dbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d12:	4b10      	ldr	r3, [pc, #64]	@ (8006d54 <HAL_RCC_OscConfig+0x478>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d18:	f7fd fd48 	bl	80047ac <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d20:	f7fd fd44 	bl	80047ac <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e045      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d32:	4b06      	ldr	r3, [pc, #24]	@ (8006d4c <HAL_RCC_OscConfig+0x470>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0x444>
 8006d3e:	e03d      	b.n	8006dbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d107      	bne.n	8006d58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e038      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
 8006d4c:	40023800 	.word	0x40023800
 8006d50:	40007000 	.word	0x40007000
 8006d54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d58:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <HAL_RCC_OscConfig+0x4ec>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d028      	beq.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d121      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d11a      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d88:	4013      	ands	r3, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d111      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	3b01      	subs	r3, #1
 8006da2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023800 	.word	0x40023800

08006dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0cc      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006de0:	4b68      	ldr	r3, [pc, #416]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d90c      	bls.n	8006e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dee:	4b65      	ldr	r3, [pc, #404]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df6:	4b63      	ldr	r3, [pc, #396]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d001      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e0b8      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d020      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e20:	4b59      	ldr	r3, [pc, #356]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	4a58      	ldr	r2, [pc, #352]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0308 	and.w	r3, r3, #8
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e38:	4b53      	ldr	r3, [pc, #332]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	4a52      	ldr	r2, [pc, #328]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e44:	4b50      	ldr	r3, [pc, #320]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	494d      	ldr	r1, [pc, #308]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d044      	beq.n	8006eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d107      	bne.n	8006e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6a:	4b47      	ldr	r3, [pc, #284]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d119      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e07f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d003      	beq.n	8006e8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	d107      	bne.n	8006e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e06f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e067      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eaa:	4b37      	ldr	r3, [pc, #220]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f023 0203 	bic.w	r2, r3, #3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4934      	ldr	r1, [pc, #208]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ebc:	f7fd fc76 	bl	80047ac <HAL_GetTick>
 8006ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec2:	e00a      	b.n	8006eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec4:	f7fd fc72 	bl	80047ac <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e04f      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eda:	4b2b      	ldr	r3, [pc, #172]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 020c 	and.w	r2, r3, #12
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d1eb      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eec:	4b25      	ldr	r3, [pc, #148]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d20c      	bcs.n	8006f14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efa:	4b22      	ldr	r3, [pc, #136]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f02:	4b20      	ldr	r3, [pc, #128]	@ (8006f84 <HAL_RCC_ClockConfig+0x1b8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e032      	b.n	8006f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f20:	4b19      	ldr	r3, [pc, #100]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	4916      	ldr	r1, [pc, #88]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0308 	and.w	r3, r3, #8
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f3e:	4b12      	ldr	r3, [pc, #72]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	490e      	ldr	r1, [pc, #56]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f52:	f000 f821 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006f56:	4602      	mov	r2, r0
 8006f58:	4b0b      	ldr	r3, [pc, #44]	@ (8006f88 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	490a      	ldr	r1, [pc, #40]	@ (8006f8c <HAL_RCC_ClockConfig+0x1c0>)
 8006f64:	5ccb      	ldrb	r3, [r1, r3]
 8006f66:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6a:	4a09      	ldr	r2, [pc, #36]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006f6e:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fb f9d8 	bl	8002328 <HAL_InitTick>

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	40023c00 	.word	0x40023c00
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	08014c94 	.word	0x08014c94
 8006f90:	20000004 	.word	0x20000004
 8006f94:	20000014 	.word	0x20000014

08006f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f9c:	b094      	sub	sp, #80	@ 0x50
 8006f9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fb0:	4b79      	ldr	r3, [pc, #484]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 030c 	and.w	r3, r3, #12
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d00d      	beq.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x40>
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	f200 80e1 	bhi.w	8007184 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <HAL_RCC_GetSysClockFreq+0x34>
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d003      	beq.n	8006fd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fca:	e0db      	b.n	8007184 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fcc:	4b73      	ldr	r3, [pc, #460]	@ (800719c <HAL_RCC_GetSysClockFreq+0x204>)
 8006fce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fd0:	e0db      	b.n	800718a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fd2:	4b73      	ldr	r3, [pc, #460]	@ (80071a0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fd6:	e0d8      	b.n	800718a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fe0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d063      	beq.n	80070b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fee:	4b6a      	ldr	r3, [pc, #424]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	099b      	lsrs	r3, r3, #6
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ff8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007000:	633b      	str	r3, [r7, #48]	@ 0x30
 8007002:	2300      	movs	r3, #0
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
 8007006:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	f04f 0000 	mov.w	r0, #0
 8007012:	f04f 0100 	mov.w	r1, #0
 8007016:	0159      	lsls	r1, r3, #5
 8007018:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800701c:	0150      	lsls	r0, r2, #5
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4621      	mov	r1, r4
 8007024:	1a51      	subs	r1, r2, r1
 8007026:	6139      	str	r1, [r7, #16]
 8007028:	4629      	mov	r1, r5
 800702a:	eb63 0301 	sbc.w	r3, r3, r1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800703c:	4659      	mov	r1, fp
 800703e:	018b      	lsls	r3, r1, #6
 8007040:	4651      	mov	r1, sl
 8007042:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007046:	4651      	mov	r1, sl
 8007048:	018a      	lsls	r2, r1, #6
 800704a:	4651      	mov	r1, sl
 800704c:	ebb2 0801 	subs.w	r8, r2, r1
 8007050:	4659      	mov	r1, fp
 8007052:	eb63 0901 	sbc.w	r9, r3, r1
 8007056:	f04f 0200 	mov.w	r2, #0
 800705a:	f04f 0300 	mov.w	r3, #0
 800705e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800706a:	4690      	mov	r8, r2
 800706c:	4699      	mov	r9, r3
 800706e:	4623      	mov	r3, r4
 8007070:	eb18 0303 	adds.w	r3, r8, r3
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	462b      	mov	r3, r5
 8007078:	eb49 0303 	adc.w	r3, r9, r3
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800708a:	4629      	mov	r1, r5
 800708c:	024b      	lsls	r3, r1, #9
 800708e:	4621      	mov	r1, r4
 8007090:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007094:	4621      	mov	r1, r4
 8007096:	024a      	lsls	r2, r1, #9
 8007098:	4610      	mov	r0, r2
 800709a:	4619      	mov	r1, r3
 800709c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709e:	2200      	movs	r2, #0
 80070a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070a8:	f7f9 fd80 	bl	8000bac <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4613      	mov	r3, r2
 80070b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b4:	e058      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b6:	4b38      	ldr	r3, [pc, #224]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	099b      	lsrs	r3, r3, #6
 80070bc:	2200      	movs	r2, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	4611      	mov	r1, r2
 80070c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070c6:	623b      	str	r3, [r7, #32]
 80070c8:	2300      	movs	r3, #0
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80070cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070d0:	4642      	mov	r2, r8
 80070d2:	464b      	mov	r3, r9
 80070d4:	f04f 0000 	mov.w	r0, #0
 80070d8:	f04f 0100 	mov.w	r1, #0
 80070dc:	0159      	lsls	r1, r3, #5
 80070de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070e2:	0150      	lsls	r0, r2, #5
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4641      	mov	r1, r8
 80070ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80070ee:	4649      	mov	r1, r9
 80070f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007100:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007104:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007108:	ebb2 040a 	subs.w	r4, r2, sl
 800710c:	eb63 050b 	sbc.w	r5, r3, fp
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	00eb      	lsls	r3, r5, #3
 800711a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800711e:	00e2      	lsls	r2, r4, #3
 8007120:	4614      	mov	r4, r2
 8007122:	461d      	mov	r5, r3
 8007124:	4643      	mov	r3, r8
 8007126:	18e3      	adds	r3, r4, r3
 8007128:	603b      	str	r3, [r7, #0]
 800712a:	464b      	mov	r3, r9
 800712c:	eb45 0303 	adc.w	r3, r5, r3
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	f04f 0200 	mov.w	r2, #0
 8007136:	f04f 0300 	mov.w	r3, #0
 800713a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800713e:	4629      	mov	r1, r5
 8007140:	028b      	lsls	r3, r1, #10
 8007142:	4621      	mov	r1, r4
 8007144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007148:	4621      	mov	r1, r4
 800714a:	028a      	lsls	r2, r1, #10
 800714c:	4610      	mov	r0, r2
 800714e:	4619      	mov	r1, r3
 8007150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007152:	2200      	movs	r2, #0
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	61fa      	str	r2, [r7, #28]
 8007158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800715c:	f7f9 fd26 	bl	8000bac <__aeabi_uldivmod>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4613      	mov	r3, r2
 8007166:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007168:	4b0b      	ldr	r3, [pc, #44]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x200>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	0c1b      	lsrs	r3, r3, #16
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	3301      	adds	r3, #1
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007178:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800717a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800717c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007180:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007182:	e002      	b.n	800718a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007184:	4b05      	ldr	r3, [pc, #20]	@ (800719c <HAL_RCC_GetSysClockFreq+0x204>)
 8007186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800718a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800718c:	4618      	mov	r0, r3
 800718e:	3750      	adds	r7, #80	@ 0x50
 8007190:	46bd      	mov	sp, r7
 8007192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007196:	bf00      	nop
 8007198:	40023800 	.word	0x40023800
 800719c:	00f42400 	.word	0x00f42400
 80071a0:	007a1200 	.word	0x007a1200

080071a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071a8:	4b03      	ldr	r3, [pc, #12]	@ (80071b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80071aa:	681b      	ldr	r3, [r3, #0]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	20000004 	.word	0x20000004

080071bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071c0:	f7ff fff0 	bl	80071a4 <HAL_RCC_GetHCLKFreq>
 80071c4:	4602      	mov	r2, r0
 80071c6:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	0a9b      	lsrs	r3, r3, #10
 80071cc:	f003 0307 	and.w	r3, r3, #7
 80071d0:	4903      	ldr	r1, [pc, #12]	@ (80071e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071d2:	5ccb      	ldrb	r3, [r1, r3]
 80071d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d8:	4618      	mov	r0, r3
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40023800 	.word	0x40023800
 80071e0:	08014ca4 	.word	0x08014ca4

080071e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071e8:	f7ff ffdc 	bl	80071a4 <HAL_RCC_GetHCLKFreq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4b05      	ldr	r3, [pc, #20]	@ (8007204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	0b5b      	lsrs	r3, r3, #13
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	4903      	ldr	r1, [pc, #12]	@ (8007208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071fa:	5ccb      	ldrb	r3, [r1, r3]
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007200:	4618      	mov	r0, r3
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40023800 	.word	0x40023800
 8007208:	08014ca4 	.word	0x08014ca4

0800720c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	220f      	movs	r2, #15
 800721a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800721c:	4b12      	ldr	r3, [pc, #72]	@ (8007268 <HAL_RCC_GetClockConfig+0x5c>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	f003 0203 	and.w	r2, r3, #3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007228:	4b0f      	ldr	r3, [pc, #60]	@ (8007268 <HAL_RCC_GetClockConfig+0x5c>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007234:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <HAL_RCC_GetClockConfig+0x5c>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007240:	4b09      	ldr	r3, [pc, #36]	@ (8007268 <HAL_RCC_GetClockConfig+0x5c>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	08db      	lsrs	r3, r3, #3
 8007246:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800724e:	4b07      	ldr	r3, [pc, #28]	@ (800726c <HAL_RCC_GetClockConfig+0x60>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0207 	and.w	r2, r3, #7
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	601a      	str	r2, [r3, #0]
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40023800 	.word	0x40023800
 800726c:	40023c00 	.word	0x40023c00

08007270 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007294:	2b00      	cmp	r3, #0
 8007296:	d035      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007298:	4b67      	ldr	r3, [pc, #412]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800729e:	f7fd fa85 	bl	80047ac <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072a6:	f7fd fa81 	bl	80047ac <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e0ba      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072b8:	4b60      	ldr	r3, [pc, #384]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1f0      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	019a      	lsls	r2, r3, #6
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	071b      	lsls	r3, r3, #28
 80072d0:	495a      	ldr	r1, [pc, #360]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072d8:	4b57      	ldr	r3, [pc, #348]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072de:	f7fd fa65 	bl	80047ac <HAL_GetTick>
 80072e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072e4:	e008      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072e6:	f7fd fa61 	bl	80047ac <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e09a      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072f8:	4b50      	ldr	r3, [pc, #320]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0f0      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8083 	beq.w	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	4b49      	ldr	r3, [pc, #292]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	4a48      	ldr	r2, [pc, #288]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800731c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007320:	6413      	str	r3, [r2, #64]	@ 0x40
 8007322:	4b46      	ldr	r3, [pc, #280]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800732e:	4b44      	ldr	r3, [pc, #272]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a43      	ldr	r2, [pc, #268]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007338:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800733a:	f7fd fa37 	bl	80047ac <HAL_GetTick>
 800733e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007340:	e008      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007342:	f7fd fa33 	bl	80047ac <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	2b02      	cmp	r3, #2
 800734e:	d901      	bls.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	e06c      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007354:	4b3a      	ldr	r3, [pc, #232]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f0      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007360:	4b36      	ldr	r3, [pc, #216]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007368:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d02f      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	429a      	cmp	r2, r3
 800737c:	d028      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800737e:	4b2f      	ldr	r3, [pc, #188]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007382:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007386:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007388:	4b2e      	ldr	r3, [pc, #184]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800738a:	2201      	movs	r2, #1
 800738c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800738e:	4b2d      	ldr	r3, [pc, #180]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007394:	4a29      	ldr	r2, [pc, #164]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800739a:	4b28      	ldr	r3, [pc, #160]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800739c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d114      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073a6:	f7fd fa01 	bl	80047ac <HAL_GetTick>
 80073aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ac:	e00a      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ae:	f7fd f9fd 	bl	80047ac <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073bc:	4293      	cmp	r3, r2
 80073be:	d901      	bls.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e034      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c4:	4b1d      	ldr	r3, [pc, #116]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0ee      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073dc:	d10d      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80073de:	4b17      	ldr	r3, [pc, #92]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80073ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073f2:	4912      	ldr	r1, [pc, #72]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	608b      	str	r3, [r1, #8]
 80073f8:	e005      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073fa:	4b10      	ldr	r3, [pc, #64]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	4a0f      	ldr	r2, [pc, #60]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007400:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007404:	6093      	str	r3, [r2, #8]
 8007406:	4b0d      	ldr	r3, [pc, #52]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007408:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007412:	490a      	ldr	r1, [pc, #40]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007414:	4313      	orrs	r3, r2
 8007416:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7c1a      	ldrb	r2, [r3, #16]
 8007428:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800742a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	42470068 	.word	0x42470068
 800743c:	40023800 	.word	0x40023800
 8007440:	40007000 	.word	0x40007000
 8007444:	42470e40 	.word	0x42470e40
 8007448:	424711e0 	.word	0x424711e0

0800744c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e073      	b.n	800754a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	7f5b      	ldrb	r3, [r3, #29]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7fa fe62 	bl	800213c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b10      	cmp	r3, #16
 800748a:	d055      	beq.n	8007538 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	22ca      	movs	r2, #202	@ 0xca
 8007492:	625a      	str	r2, [r3, #36]	@ 0x24
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2253      	movs	r2, #83	@ 0x53
 800749a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fa49 	bl	8007934 <RTC_EnterInitMode>
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d12c      	bne.n	8007506 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6812      	ldr	r2, [r2, #0]
 80074b6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80074ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074be:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6899      	ldr	r1, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68d2      	ldr	r2, [r2, #12]
 80074e6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6919      	ldr	r1, [r3, #16]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	041a      	lsls	r2, r3, #16
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 fa50 	bl	80079a2 <RTC_ExitInitMode>
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d110      	bne.n	800752e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800751a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	22ff      	movs	r2, #255	@ 0xff
 8007534:	625a      	str	r2, [r3, #36]	@ 0x24
 8007536:	e001      	b.n	800753c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d102      	bne.n	8007548 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007552:	b590      	push	{r4, r7, lr}
 8007554:	b087      	sub	sp, #28
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	7f1b      	ldrb	r3, [r3, #28]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d101      	bne.n	800756e <HAL_RTC_SetTime+0x1c>
 800756a:	2302      	movs	r3, #2
 800756c:	e087      	b.n	800767e <HAL_RTC_SetTime+0x12c>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2202      	movs	r2, #2
 8007578:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d126      	bne.n	80075ce <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fa27 	bl	80079ec <RTC_ByteToBcd2>
 800759e:	4603      	mov	r3, r0
 80075a0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fa20 	bl	80079ec <RTC_ByteToBcd2>
 80075ac:	4603      	mov	r3, r0
 80075ae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075b0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	789b      	ldrb	r3, [r3, #2]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fa18 	bl	80079ec <RTC_ByteToBcd2>
 80075bc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80075be:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	78db      	ldrb	r3, [r3, #3]
 80075c6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	e018      	b.n	8007600 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2200      	movs	r2, #0
 80075e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80075ee:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80075f4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	78db      	ldrb	r3, [r3, #3]
 80075fa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	22ca      	movs	r2, #202	@ 0xca
 8007606:	625a      	str	r2, [r3, #36]	@ 0x24
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2253      	movs	r2, #83	@ 0x53
 800760e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 f98f 	bl	8007934 <RTC_EnterInitMode>
 8007616:	4603      	mov	r3, r0
 8007618:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800761a:	7cfb      	ldrb	r3, [r7, #19]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d120      	bne.n	8007662 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800762a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800762e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800763e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6899      	ldr	r1, [r3, #8]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	431a      	orrs	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f9a2 	bl	80079a2 <RTC_ExitInitMode>
 800765e:	4603      	mov	r3, r0
 8007660:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007662:	7cfb      	ldrb	r3, [r7, #19]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2201      	movs	r2, #1
 800766c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	22ff      	movs	r2, #255	@ 0xff
 8007674:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	771a      	strb	r2, [r3, #28]

  return status;
 800767c:	7cfb      	ldrb	r3, [r7, #19]
}
 800767e:	4618      	mov	r0, r3
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	bd90      	pop	{r4, r7, pc}

08007686 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80076b8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80076bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	0c1b      	lsrs	r3, r3, #16
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	0a1b      	lsrs	r3, r3, #8
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	0d9b      	lsrs	r3, r3, #22
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d11a      	bne.n	8007738 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f98e 	bl	8007a28 <RTC_Bcd2ToByte>
 800770c:	4603      	mov	r3, r0
 800770e:	461a      	mov	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	785b      	ldrb	r3, [r3, #1]
 8007718:	4618      	mov	r0, r3
 800771a:	f000 f985 	bl	8007a28 <RTC_Bcd2ToByte>
 800771e:	4603      	mov	r3, r0
 8007720:	461a      	mov	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	789b      	ldrb	r3, [r3, #2]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 f97c 	bl	8007a28 <RTC_Bcd2ToByte>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007742:	b590      	push	{r4, r7, lr}
 8007744:	b087      	sub	sp, #28
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	7f1b      	ldrb	r3, [r3, #28]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d101      	bne.n	800775e <HAL_RTC_SetDate+0x1c>
 800775a:	2302      	movs	r3, #2
 800775c:	e071      	b.n	8007842 <HAL_RTC_SetDate+0x100>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2201      	movs	r2, #1
 8007762:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2202      	movs	r2, #2
 8007768:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10e      	bne.n	800778e <HAL_RTC_SetDate+0x4c>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	785b      	ldrb	r3, [r3, #1]
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b00      	cmp	r3, #0
 800777a:	d008      	beq.n	800778e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	f023 0310 	bic.w	r3, r3, #16
 8007784:	b2db      	uxtb	r3, r3
 8007786:	330a      	adds	r3, #10
 8007788:	b2da      	uxtb	r2, r3
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d11c      	bne.n	80077ce <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	78db      	ldrb	r3, [r3, #3]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 f927 	bl	80079ec <RTC_ByteToBcd2>
 800779e:	4603      	mov	r3, r0
 80077a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f920 	bl	80079ec <RTC_ByteToBcd2>
 80077ac:	4603      	mov	r3, r0
 80077ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80077b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	789b      	ldrb	r3, [r3, #2]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f918 	bl	80079ec <RTC_ByteToBcd2>
 80077bc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80077be:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e00e      	b.n	80077ec <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	78db      	ldrb	r3, [r3, #3]
 80077d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80077e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	22ca      	movs	r2, #202	@ 0xca
 80077f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2253      	movs	r2, #83	@ 0x53
 80077fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f899 	bl	8007934 <RTC_EnterInitMode>
 8007802:	4603      	mov	r3, r0
 8007804:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007806:	7cfb      	ldrb	r3, [r7, #19]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10c      	bne.n	8007826 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007816:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800781a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f8c0 	bl	80079a2 <RTC_ExitInitMode>
 8007822:	4603      	mov	r3, r0
 8007824:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007826:	7cfb      	ldrb	r3, [r7, #19]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d102      	bne.n	8007832 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	22ff      	movs	r2, #255	@ 0xff
 8007838:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	771a      	strb	r2, [r3, #28]

  return status;
 8007840:	7cfb      	ldrb	r3, [r7, #19]
}
 8007842:	4618      	mov	r0, r3
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd90      	pop	{r4, r7, pc}

0800784a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b086      	sub	sp, #24
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	60b9      	str	r1, [r7, #8]
 8007854:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007864:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007868:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	0c1b      	lsrs	r3, r3, #16
 800786e:	b2da      	uxtb	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b2db      	uxtb	r3, r3
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	b2da      	uxtb	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800788c:	b2da      	uxtb	r2, r3
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	0b5b      	lsrs	r3, r3, #13
 8007896:	b2db      	uxtb	r3, r3
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	b2da      	uxtb	r2, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d11a      	bne.n	80078de <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	78db      	ldrb	r3, [r3, #3]
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f8bb 	bl	8007a28 <RTC_Bcd2ToByte>
 80078b2:	4603      	mov	r3, r0
 80078b4:	461a      	mov	r2, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 f8b2 	bl	8007a28 <RTC_Bcd2ToByte>
 80078c4:	4603      	mov	r3, r0
 80078c6:	461a      	mov	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	789b      	ldrb	r3, [r3, #2]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f8a9 	bl	8007a28 <RTC_Bcd2ToByte>
 80078d6:	4603      	mov	r3, r0
 80078d8:	461a      	mov	r2, r3
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007930 <HAL_RTC_WaitForSynchro+0x48>)
 80078fa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078fc:	f7fc ff56 	bl	80047ac <HAL_GetTick>
 8007900:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007902:	e009      	b.n	8007918 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007904:	f7fc ff52 	bl	80047ac <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007912:	d901      	bls.n	8007918 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e007      	b.n	8007928 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0ee      	beq.n	8007904 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	00013f5f 	.word	0x00013f5f

08007934 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d122      	bne.n	8007998 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007960:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007962:	f7fc ff23 	bl	80047ac <HAL_GetTick>
 8007966:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007968:	e00c      	b.n	8007984 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800796a:	f7fc ff1f 	bl	80047ac <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007978:	d904      	bls.n	8007984 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2204      	movs	r2, #4
 800797e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d102      	bne.n	8007998 <RTC_EnterInitMode+0x64>
 8007992:	7bfb      	ldrb	r3, [r7, #15]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d1e8      	bne.n	800796a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007998:	7bfb      	ldrb	r3, [r7, #15]
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079bc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7ff ff8b 	bl	80078e8 <HAL_RTC_WaitForSynchro>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d004      	beq.n	80079e2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2204      	movs	r2, #4
 80079dc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80079fa:	e005      	b.n	8007a08 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	3b0a      	subs	r3, #10
 8007a06:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	2b09      	cmp	r3, #9
 8007a0c:	d8f6      	bhi.n	80079fc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	011b      	lsls	r3, r3, #4
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	b2db      	uxtb	r3, r3
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	091b      	lsrs	r3, r3, #4
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	b2db      	uxtb	r3, r3
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e07b      	b.n	8007b6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d108      	bne.n	8007a90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a86:	d009      	beq.n	8007a9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	61da      	str	r2, [r3, #28]
 8007a8e:	e005      	b.n	8007a9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7fa fb6c 	bl	8002194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ad2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aee:	431a      	orrs	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b20:	ea42 0103 	orr.w	r1, r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	0c1b      	lsrs	r3, r3, #16
 8007b3a:	f003 0104 	and.w	r1, r3, #4
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b42:	f003 0210 	and.w	r2, r3, #16
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b088      	sub	sp, #32
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	603b      	str	r3, [r7, #0]
 8007b82:	4613      	mov	r3, r2
 8007b84:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b86:	f7fc fe11 	bl	80047ac <HAL_GetTick>
 8007b8a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007b8c:	88fb      	ldrh	r3, [r7, #6]
 8007b8e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d001      	beq.n	8007ba0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e12a      	b.n	8007df6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_SPI_Transmit+0x36>
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e122      	b.n	8007df6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d101      	bne.n	8007bbe <HAL_SPI_Transmit+0x48>
 8007bba:	2302      	movs	r3, #2
 8007bbc:	e11b      	b.n	8007df6 <HAL_SPI_Transmit+0x280>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2203      	movs	r2, #3
 8007bca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	88fa      	ldrh	r2, [r7, #6]
 8007bde:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	88fa      	ldrh	r2, [r7, #6]
 8007be4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c0c:	d10f      	bne.n	8007c2e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c38:	2b40      	cmp	r3, #64	@ 0x40
 8007c3a:	d007      	beq.n	8007c4c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c54:	d152      	bne.n	8007cfc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_SPI_Transmit+0xee>
 8007c5e:	8b7b      	ldrh	r3, [r7, #26]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d145      	bne.n	8007cf0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c68:	881a      	ldrh	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c74:	1c9a      	adds	r2, r3, #2
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007c88:	e032      	b.n	8007cf0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d112      	bne.n	8007cbe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9c:	881a      	ldrh	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca8:	1c9a      	adds	r2, r3, #2
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007cbc:	e018      	b.n	8007cf0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cbe:	f7fc fd75 	bl	80047ac <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d803      	bhi.n	8007cd6 <HAL_SPI_Transmit+0x160>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d102      	bne.n	8007cdc <HAL_SPI_Transmit+0x166>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d109      	bne.n	8007cf0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e082      	b.n	8007df6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1c7      	bne.n	8007c8a <HAL_SPI_Transmit+0x114>
 8007cfa:	e053      	b.n	8007da4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <HAL_SPI_Transmit+0x194>
 8007d04:	8b7b      	ldrh	r3, [r7, #26]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d147      	bne.n	8007d9a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	330c      	adds	r3, #12
 8007d14:	7812      	ldrb	r2, [r2, #0]
 8007d16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007d30:	e033      	b.n	8007d9a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d113      	bne.n	8007d68 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007d66:	e018      	b.n	8007d9a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d68:	f7fc fd20 	bl	80047ac <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d803      	bhi.n	8007d80 <HAL_SPI_Transmit+0x20a>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d102      	bne.n	8007d86 <HAL_SPI_Transmit+0x210>
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e02d      	b.n	8007df6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1c6      	bne.n	8007d32 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 fa67 	bl	800827c <SPI_EndRxTxTransaction>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	617b      	str	r3, [r7, #20]
 8007dd6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e000      	b.n	8007df6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007df4:	2300      	movs	r3, #0
  }
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b08a      	sub	sp, #40	@ 0x28
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	60f8      	str	r0, [r7, #12]
 8007e06:	60b9      	str	r1, [r7, #8]
 8007e08:	607a      	str	r2, [r7, #4]
 8007e0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e10:	f7fc fccc 	bl	80047ac <HAL_GetTick>
 8007e14:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e1c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007e24:	887b      	ldrh	r3, [r7, #2]
 8007e26:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e28:	7ffb      	ldrb	r3, [r7, #31]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d00c      	beq.n	8007e48 <HAL_SPI_TransmitReceive+0x4a>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e34:	d106      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <HAL_SPI_TransmitReceive+0x46>
 8007e3e:	7ffb      	ldrb	r3, [r7, #31]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d001      	beq.n	8007e48 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007e44:	2302      	movs	r3, #2
 8007e46:	e17f      	b.n	8008148 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d005      	beq.n	8007e5a <HAL_SPI_TransmitReceive+0x5c>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_SPI_TransmitReceive+0x5c>
 8007e54:	887b      	ldrh	r3, [r7, #2]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e174      	b.n	8008148 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_SPI_TransmitReceive+0x6e>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e16d      	b.n	8008148 <HAL_SPI_TransmitReceive+0x34a>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d003      	beq.n	8007e88 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2205      	movs	r2, #5
 8007e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	887a      	ldrh	r2, [r7, #2]
 8007e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	887a      	ldrh	r2, [r7, #2]
 8007e9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	887a      	ldrh	r2, [r7, #2]
 8007eaa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	887a      	ldrh	r2, [r7, #2]
 8007eb0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec8:	2b40      	cmp	r3, #64	@ 0x40
 8007eca:	d007      	beq.n	8007edc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007eda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ee4:	d17e      	bne.n	8007fe4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <HAL_SPI_TransmitReceive+0xf6>
 8007eee:	8afb      	ldrh	r3, [r7, #22]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d16c      	bne.n	8007fce <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef8:	881a      	ldrh	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f04:	1c9a      	adds	r2, r3, #2
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f18:	e059      	b.n	8007fce <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d11b      	bne.n	8007f60 <HAL_SPI_TransmitReceive+0x162>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d016      	beq.n	8007f60 <HAL_SPI_TransmitReceive+0x162>
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d113      	bne.n	8007f60 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3c:	881a      	ldrh	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f48:	1c9a      	adds	r2, r3, #2
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d119      	bne.n	8007fa2 <HAL_SPI_TransmitReceive+0x1a4>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d014      	beq.n	8007fa2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f82:	b292      	uxth	r2, r2
 8007f84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8a:	1c9a      	adds	r2, r3, #2
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007fa2:	f7fc fc03 	bl	80047ac <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d80d      	bhi.n	8007fce <HAL_SPI_TransmitReceive+0x1d0>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb8:	d009      	beq.n	8007fce <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e0bc      	b.n	8008148 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1a0      	bne.n	8007f1a <HAL_SPI_TransmitReceive+0x11c>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d19b      	bne.n	8007f1a <HAL_SPI_TransmitReceive+0x11c>
 8007fe2:	e082      	b.n	80080ea <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_SPI_TransmitReceive+0x1f4>
 8007fec:	8afb      	ldrh	r3, [r7, #22]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d171      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	330c      	adds	r3, #12
 8007ffc:	7812      	ldrb	r2, [r2, #0]
 8007ffe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800800e:	b29b      	uxth	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008018:	e05d      	b.n	80080d6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b02      	cmp	r3, #2
 8008026:	d11c      	bne.n	8008062 <HAL_SPI_TransmitReceive+0x264>
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800802c:	b29b      	uxth	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d017      	beq.n	8008062 <HAL_SPI_TransmitReceive+0x264>
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	2b01      	cmp	r3, #1
 8008036:	d114      	bne.n	8008062 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	330c      	adds	r3, #12
 8008042:	7812      	ldrb	r2, [r2, #0]
 8008044:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b01      	subs	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b01      	cmp	r3, #1
 800806e:	d119      	bne.n	80080a4 <HAL_SPI_TransmitReceive+0x2a6>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d014      	beq.n	80080a4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68da      	ldr	r2, [r3, #12]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008096:	b29b      	uxth	r3, r3
 8008098:	3b01      	subs	r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080a0:	2301      	movs	r3, #1
 80080a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080a4:	f7fc fb82 	bl	80047ac <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d803      	bhi.n	80080bc <HAL_SPI_TransmitReceive+0x2be>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ba:	d102      	bne.n	80080c2 <HAL_SPI_TransmitReceive+0x2c4>
 80080bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e038      	b.n	8008148 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d19c      	bne.n	800801a <HAL_SPI_TransmitReceive+0x21c>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d197      	bne.n	800801a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080ea:	6a3a      	ldr	r2, [r7, #32]
 80080ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f000 f8c4 	bl	800827c <SPI_EndRxTxTransaction>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d008      	beq.n	800810c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2220      	movs	r2, #32
 80080fe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e01d      	b.n	8008148 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	613b      	str	r3, [r7, #16]
 8008128:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e000      	b.n	8008148 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008146:	2300      	movs	r3, #0
  }
}
 8008148:	4618      	mov	r0, r3
 800814a:	3728      	adds	r7, #40	@ 0x28
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800815e:	b2db      	uxtb	r3, r3
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	4613      	mov	r3, r2
 800817a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800817c:	f7fc fb16 	bl	80047ac <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	4413      	add	r3, r2
 800818a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800818c:	f7fc fb0e 	bl	80047ac <HAL_GetTick>
 8008190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008192:	4b39      	ldr	r3, [pc, #228]	@ (8008278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	015b      	lsls	r3, r3, #5
 8008198:	0d1b      	lsrs	r3, r3, #20
 800819a:	69fa      	ldr	r2, [r7, #28]
 800819c:	fb02 f303 	mul.w	r3, r2, r3
 80081a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081a2:	e054      	b.n	800824e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d050      	beq.n	800824e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081ac:	f7fc fafe 	bl	80047ac <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d902      	bls.n	80081c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d13d      	bne.n	800823e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081da:	d111      	bne.n	8008200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e4:	d004      	beq.n	80081f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ee:	d107      	bne.n	8008200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008208:	d10f      	bne.n	800822a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e017      	b.n	800826e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	3b01      	subs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	429a      	cmp	r2, r3
 800825c:	bf0c      	ite	eq
 800825e:	2301      	moveq	r3, #1
 8008260:	2300      	movne	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	429a      	cmp	r2, r3
 800826a:	d19b      	bne.n	80081a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3720      	adds	r7, #32
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	20000004 	.word	0x20000004

0800827c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b088      	sub	sp, #32
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2201      	movs	r2, #1
 8008290:	2102      	movs	r1, #2
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7ff ff6a 	bl	800816c <SPI_WaitFlagStateUntilTimeout>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a2:	f043 0220 	orr.w	r2, r3, #32
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e032      	b.n	8008314 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082ae:	4b1b      	ldr	r3, [pc, #108]	@ (800831c <SPI_EndRxTxTransaction+0xa0>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008320 <SPI_EndRxTxTransaction+0xa4>)
 80082b4:	fba2 2303 	umull	r2, r3, r2, r3
 80082b8:	0d5b      	lsrs	r3, r3, #21
 80082ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80082be:	fb02 f303 	mul.w	r3, r2, r3
 80082c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082cc:	d112      	bne.n	80082f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2200      	movs	r2, #0
 80082d6:	2180      	movs	r1, #128	@ 0x80
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff ff47 	bl	800816c <SPI_WaitFlagStateUntilTimeout>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d016      	beq.n	8008312 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e8:	f043 0220 	orr.w	r2, r3, #32
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e00f      	b.n	8008314 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00a      	beq.n	8008310 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800830a:	2b80      	cmp	r3, #128	@ 0x80
 800830c:	d0f2      	beq.n	80082f4 <SPI_EndRxTxTransaction+0x78>
 800830e:	e000      	b.n	8008312 <SPI_EndRxTxTransaction+0x96>
        break;
 8008310:	bf00      	nop
  }

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000004 	.word	0x20000004
 8008320:	165e9f81 	.word	0x165e9f81

08008324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e041      	b.n	80083ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7f9 ff7c 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3304      	adds	r3, #4
 8008360:	4619      	mov	r1, r3
 8008362:	4610      	mov	r0, r2
 8008364:	f000 fa9e 	bl	80088a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d001      	beq.n	80083dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e044      	b.n	8008466 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0201 	orr.w	r2, r2, #1
 80083f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1e      	ldr	r2, [pc, #120]	@ (8008474 <HAL_TIM_Base_Start_IT+0xb0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d018      	beq.n	8008430 <HAL_TIM_Base_Start_IT+0x6c>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008406:	d013      	beq.n	8008430 <HAL_TIM_Base_Start_IT+0x6c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a1a      	ldr	r2, [pc, #104]	@ (8008478 <HAL_TIM_Base_Start_IT+0xb4>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00e      	beq.n	8008430 <HAL_TIM_Base_Start_IT+0x6c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a19      	ldr	r2, [pc, #100]	@ (800847c <HAL_TIM_Base_Start_IT+0xb8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d009      	beq.n	8008430 <HAL_TIM_Base_Start_IT+0x6c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a17      	ldr	r2, [pc, #92]	@ (8008480 <HAL_TIM_Base_Start_IT+0xbc>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d004      	beq.n	8008430 <HAL_TIM_Base_Start_IT+0x6c>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a16      	ldr	r2, [pc, #88]	@ (8008484 <HAL_TIM_Base_Start_IT+0xc0>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d111      	bne.n	8008454 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0307 	and.w	r3, r3, #7
 800843a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b06      	cmp	r3, #6
 8008440:	d010      	beq.n	8008464 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0201 	orr.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008452:	e007      	b.n	8008464 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	40010000 	.word	0x40010000
 8008478:	40000400 	.word	0x40000400
 800847c:	40000800 	.word	0x40000800
 8008480:	40000c00 	.word	0x40000c00
 8008484:	40014000 	.word	0x40014000

08008488 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0201 	bic.w	r2, r2, #1
 800849e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6a1a      	ldr	r2, [r3, #32]
 80084a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10f      	bne.n	80084d0 <HAL_TIM_Base_Stop_IT+0x48>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6a1a      	ldr	r2, [r3, #32]
 80084b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d107      	bne.n	80084d0 <HAL_TIM_Base_Stop_IT+0x48>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	370c      	adds	r7, #12
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d020      	beq.n	800854a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d01b      	beq.n	800854a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f06f 0202 	mvn.w	r2, #2
 800851a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f003 0303 	and.w	r3, r3, #3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f999 	bl	8008868 <HAL_TIM_IC_CaptureCallback>
 8008536:	e005      	b.n	8008544 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f98b 	bl	8008854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f99c 	bl	800887c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d020      	beq.n	8008596 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d01b      	beq.n	8008596 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f06f 0204 	mvn.w	r2, #4
 8008566:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 f973 	bl	8008868 <HAL_TIM_IC_CaptureCallback>
 8008582:	e005      	b.n	8008590 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f965 	bl	8008854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f976 	bl	800887c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f003 0308 	and.w	r3, r3, #8
 800859c:	2b00      	cmp	r3, #0
 800859e:	d020      	beq.n	80085e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d01b      	beq.n	80085e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f06f 0208 	mvn.w	r2, #8
 80085b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2204      	movs	r2, #4
 80085b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	f003 0303 	and.w	r3, r3, #3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d003      	beq.n	80085d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f94d 	bl	8008868 <HAL_TIM_IC_CaptureCallback>
 80085ce:	e005      	b.n	80085dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f93f 	bl	8008854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f950 	bl	800887c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d020      	beq.n	800862e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d01b      	beq.n	800862e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f06f 0210 	mvn.w	r2, #16
 80085fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2208      	movs	r2, #8
 8008604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f927 	bl	8008868 <HAL_TIM_IC_CaptureCallback>
 800861a:	e005      	b.n	8008628 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f919 	bl	8008854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f92a 	bl	800887c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00c      	beq.n	8008652 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d007      	beq.n	8008652 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f06f 0201 	mvn.w	r2, #1
 800864a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7f9 fc6d 	bl	8001f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00c      	beq.n	8008676 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800866e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fab5 	bl	8008be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00c      	beq.n	800869a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f8fb 	bl	8008890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d00c      	beq.n	80086be <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f06f 0220 	mvn.w	r2, #32
 80086b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa87 	bl	8008bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086be:	bf00      	nop
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_TIM_ConfigClockSource+0x1c>
 80086de:	2302      	movs	r3, #2
 80086e0:	e0b4      	b.n	800884c <HAL_TIM_ConfigClockSource+0x186>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2202      	movs	r2, #2
 80086ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008700:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008708:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800871a:	d03e      	beq.n	800879a <HAL_TIM_ConfigClockSource+0xd4>
 800871c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008720:	f200 8087 	bhi.w	8008832 <HAL_TIM_ConfigClockSource+0x16c>
 8008724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008728:	f000 8086 	beq.w	8008838 <HAL_TIM_ConfigClockSource+0x172>
 800872c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008730:	d87f      	bhi.n	8008832 <HAL_TIM_ConfigClockSource+0x16c>
 8008732:	2b70      	cmp	r3, #112	@ 0x70
 8008734:	d01a      	beq.n	800876c <HAL_TIM_ConfigClockSource+0xa6>
 8008736:	2b70      	cmp	r3, #112	@ 0x70
 8008738:	d87b      	bhi.n	8008832 <HAL_TIM_ConfigClockSource+0x16c>
 800873a:	2b60      	cmp	r3, #96	@ 0x60
 800873c:	d050      	beq.n	80087e0 <HAL_TIM_ConfigClockSource+0x11a>
 800873e:	2b60      	cmp	r3, #96	@ 0x60
 8008740:	d877      	bhi.n	8008832 <HAL_TIM_ConfigClockSource+0x16c>
 8008742:	2b50      	cmp	r3, #80	@ 0x50
 8008744:	d03c      	beq.n	80087c0 <HAL_TIM_ConfigClockSource+0xfa>
 8008746:	2b50      	cmp	r3, #80	@ 0x50
 8008748:	d873      	bhi.n	8008832 <HAL_TIM_ConfigClockSource+0x16c>
 800874a:	2b40      	cmp	r3, #64	@ 0x40
 800874c:	d058      	beq.n	8008800 <HAL_TIM_ConfigClockSource+0x13a>
 800874e:	2b40      	cmp	r3, #64	@ 0x40
 8008750:	d86f      	bhi.n	8008832 <HAL_TIM_ConfigClockSource+0x16c>
 8008752:	2b30      	cmp	r3, #48	@ 0x30
 8008754:	d064      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x15a>
 8008756:	2b30      	cmp	r3, #48	@ 0x30
 8008758:	d86b      	bhi.n	8008832 <HAL_TIM_ConfigClockSource+0x16c>
 800875a:	2b20      	cmp	r3, #32
 800875c:	d060      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x15a>
 800875e:	2b20      	cmp	r3, #32
 8008760:	d867      	bhi.n	8008832 <HAL_TIM_ConfigClockSource+0x16c>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d05c      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x15a>
 8008766:	2b10      	cmp	r3, #16
 8008768:	d05a      	beq.n	8008820 <HAL_TIM_ConfigClockSource+0x15a>
 800876a:	e062      	b.n	8008832 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800877c:	f000 f998 	bl	8008ab0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800878e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	609a      	str	r2, [r3, #8]
      break;
 8008798:	e04f      	b.n	800883a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087aa:	f000 f981 	bl	8008ab0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087bc:	609a      	str	r2, [r3, #8]
      break;
 80087be:	e03c      	b.n	800883a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087cc:	461a      	mov	r2, r3
 80087ce:	f000 f8f5 	bl	80089bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2150      	movs	r1, #80	@ 0x50
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 f94e 	bl	8008a7a <TIM_ITRx_SetConfig>
      break;
 80087de:	e02c      	b.n	800883a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ec:	461a      	mov	r2, r3
 80087ee:	f000 f914 	bl	8008a1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2160      	movs	r1, #96	@ 0x60
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f93e 	bl	8008a7a <TIM_ITRx_SetConfig>
      break;
 80087fe:	e01c      	b.n	800883a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800880c:	461a      	mov	r2, r3
 800880e:	f000 f8d5 	bl	80089bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2140      	movs	r1, #64	@ 0x40
 8008818:	4618      	mov	r0, r3
 800881a:	f000 f92e 	bl	8008a7a <TIM_ITRx_SetConfig>
      break;
 800881e:	e00c      	b.n	800883a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f000 f925 	bl	8008a7a <TIM_ITRx_SetConfig>
      break;
 8008830:	e003      	b.n	800883a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	73fb      	strb	r3, [r7, #15]
      break;
 8008836:	e000      	b.n	800883a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008838:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800884a:	7bfb      	ldrb	r3, [r7, #15]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a3a      	ldr	r2, [pc, #232]	@ (80089a0 <TIM_Base_SetConfig+0xfc>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00f      	beq.n	80088dc <TIM_Base_SetConfig+0x38>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c2:	d00b      	beq.n	80088dc <TIM_Base_SetConfig+0x38>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a37      	ldr	r2, [pc, #220]	@ (80089a4 <TIM_Base_SetConfig+0x100>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d007      	beq.n	80088dc <TIM_Base_SetConfig+0x38>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a36      	ldr	r2, [pc, #216]	@ (80089a8 <TIM_Base_SetConfig+0x104>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_Base_SetConfig+0x38>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a35      	ldr	r2, [pc, #212]	@ (80089ac <TIM_Base_SetConfig+0x108>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d108      	bne.n	80088ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a2b      	ldr	r2, [pc, #172]	@ (80089a0 <TIM_Base_SetConfig+0xfc>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d01b      	beq.n	800892e <TIM_Base_SetConfig+0x8a>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088fc:	d017      	beq.n	800892e <TIM_Base_SetConfig+0x8a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a28      	ldr	r2, [pc, #160]	@ (80089a4 <TIM_Base_SetConfig+0x100>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <TIM_Base_SetConfig+0x8a>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a27      	ldr	r2, [pc, #156]	@ (80089a8 <TIM_Base_SetConfig+0x104>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00f      	beq.n	800892e <TIM_Base_SetConfig+0x8a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a26      	ldr	r2, [pc, #152]	@ (80089ac <TIM_Base_SetConfig+0x108>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d00b      	beq.n	800892e <TIM_Base_SetConfig+0x8a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a25      	ldr	r2, [pc, #148]	@ (80089b0 <TIM_Base_SetConfig+0x10c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d007      	beq.n	800892e <TIM_Base_SetConfig+0x8a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a24      	ldr	r2, [pc, #144]	@ (80089b4 <TIM_Base_SetConfig+0x110>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d003      	beq.n	800892e <TIM_Base_SetConfig+0x8a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a23      	ldr	r2, [pc, #140]	@ (80089b8 <TIM_Base_SetConfig+0x114>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d108      	bne.n	8008940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	4313      	orrs	r3, r2
 800893e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	4313      	orrs	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a0e      	ldr	r2, [pc, #56]	@ (80089a0 <TIM_Base_SetConfig+0xfc>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d103      	bne.n	8008974 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	691a      	ldr	r2, [r3, #16]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b01      	cmp	r3, #1
 8008984:	d105      	bne.n	8008992 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f023 0201 	bic.w	r2, r3, #1
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	611a      	str	r2, [r3, #16]
  }
}
 8008992:	bf00      	nop
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	40010000 	.word	0x40010000
 80089a4:	40000400 	.word	0x40000400
 80089a8:	40000800 	.word	0x40000800
 80089ac:	40000c00 	.word	0x40000c00
 80089b0:	40014000 	.word	0x40014000
 80089b4:	40014400 	.word	0x40014400
 80089b8:	40014800 	.word	0x40014800

080089bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	f023 0201 	bic.w	r2, r3, #1
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	011b      	lsls	r3, r3, #4
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f023 030a 	bic.w	r3, r3, #10
 80089f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	621a      	str	r2, [r3, #32]
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b087      	sub	sp, #28
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	f023 0210 	bic.w	r2, r3, #16
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	031b      	lsls	r3, r3, #12
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	011b      	lsls	r3, r3, #4
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	621a      	str	r2, [r3, #32]
}
 8008a6e:	bf00      	nop
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f043 0307 	orr.w	r3, r3, #7
 8008a9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	609a      	str	r2, [r3, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	021a      	lsls	r2, r3, #8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	609a      	str	r2, [r3, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d101      	bne.n	8008b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b04:	2302      	movs	r3, #2
 8008b06:	e050      	b.n	8008baa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a1c      	ldr	r2, [pc, #112]	@ (8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d018      	beq.n	8008b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b54:	d013      	beq.n	8008b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a18      	ldr	r2, [pc, #96]	@ (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00e      	beq.n	8008b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a16      	ldr	r2, [pc, #88]	@ (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d009      	beq.n	8008b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a15      	ldr	r2, [pc, #84]	@ (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d004      	beq.n	8008b7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a13      	ldr	r2, [pc, #76]	@ (8008bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d10c      	bne.n	8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	40010000 	.word	0x40010000
 8008bbc:	40000400 	.word	0x40000400
 8008bc0:	40000800 	.word	0x40000800
 8008bc4:	40000c00 	.word	0x40000c00
 8008bc8:	40014000 	.word	0x40014000

08008bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e042      	b.n	8008c8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7f9 fb3c 	bl	8002298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2224      	movs	r2, #36	@ 0x24
 8008c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f973 	bl	8008f24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	695a      	ldr	r2, [r3, #20]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2220      	movs	r2, #32
 8008c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08a      	sub	sp, #40	@ 0x28
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d175      	bne.n	8008da0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d002      	beq.n	8008cc0 <HAL_UART_Transmit+0x2c>
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e06e      	b.n	8008da2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2221      	movs	r2, #33	@ 0x21
 8008cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cd2:	f7fb fd6b 	bl	80047ac <HAL_GetTick>
 8008cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cec:	d108      	bne.n	8008d00 <HAL_UART_Transmit+0x6c>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d104      	bne.n	8008d00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	61bb      	str	r3, [r7, #24]
 8008cfe:	e003      	b.n	8008d08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d08:	e02e      	b.n	8008d68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2200      	movs	r2, #0
 8008d12:	2180      	movs	r1, #128	@ 0x80
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f000 f848 	bl	8008daa <UART_WaitOnFlagUntilTimeout>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d005      	beq.n	8008d2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2220      	movs	r2, #32
 8008d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e03a      	b.n	8008da2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	3302      	adds	r3, #2
 8008d46:	61bb      	str	r3, [r7, #24]
 8008d48:	e007      	b.n	8008d5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	3301      	adds	r3, #1
 8008d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1cb      	bne.n	8008d0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2140      	movs	r1, #64	@ 0x40
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f814 	bl	8008daa <UART_WaitOnFlagUntilTimeout>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e006      	b.n	8008da2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	e000      	b.n	8008da2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008da0:	2302      	movs	r3, #2
  }
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3720      	adds	r7, #32
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b086      	sub	sp, #24
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	603b      	str	r3, [r7, #0]
 8008db6:	4613      	mov	r3, r2
 8008db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dba:	e03b      	b.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d037      	beq.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc4:	f7fb fcf2 	bl	80047ac <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	6a3a      	ldr	r2, [r7, #32]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d302      	bcc.n	8008dda <UART_WaitOnFlagUntilTimeout+0x30>
 8008dd4:	6a3b      	ldr	r3, [r7, #32]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e03a      	b.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d023      	beq.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b80      	cmp	r3, #128	@ 0x80
 8008df0:	d020      	beq.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b40      	cmp	r3, #64	@ 0x40
 8008df6:	d01d      	beq.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0308 	and.w	r3, r3, #8
 8008e02:	2b08      	cmp	r3, #8
 8008e04:	d116      	bne.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008e06:	2300      	movs	r3, #0
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	617b      	str	r3, [r7, #20]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	617b      	str	r3, [r7, #20]
 8008e1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 f81d 	bl	8008e5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2208      	movs	r2, #8
 8008e26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	e00f      	b.n	8008e54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	bf0c      	ite	eq
 8008e44:	2301      	moveq	r3, #1
 8008e46:	2300      	movne	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d0b4      	beq.n	8008dbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b095      	sub	sp, #84	@ 0x54
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	330c      	adds	r3, #12
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	330c      	adds	r3, #12
 8008e82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e84:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e5      	bne.n	8008e64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3314      	adds	r3, #20
 8008e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f023 0301 	bic.w	r3, r3, #1
 8008eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3314      	adds	r3, #20
 8008eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ec0:	e841 2300 	strex	r3, r2, [r1]
 8008ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1e5      	bne.n	8008e98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d119      	bne.n	8008f08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	330c      	adds	r3, #12
 8008eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	e853 3f00 	ldrex	r3, [r3]
 8008ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f023 0310 	bic.w	r3, r3, #16
 8008eea:	647b      	str	r3, [r7, #68]	@ 0x44
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ef4:	61ba      	str	r2, [r7, #24]
 8008ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef8:	6979      	ldr	r1, [r7, #20]
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	e841 2300 	strex	r3, r2, [r1]
 8008f00:	613b      	str	r3, [r7, #16]
   return(result);
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1e5      	bne.n	8008ed4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008f16:	bf00      	nop
 8008f18:	3754      	adds	r7, #84	@ 0x54
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
	...

08008f24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f28:	b0c0      	sub	sp, #256	@ 0x100
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f40:	68d9      	ldr	r1, [r3, #12]
 8008f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	ea40 0301 	orr.w	r3, r0, r1
 8008f4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008f7c:	f021 010c 	bic.w	r1, r1, #12
 8008f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f9e:	6999      	ldr	r1, [r3, #24]
 8008fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	ea40 0301 	orr.w	r3, r0, r1
 8008faa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b8f      	ldr	r3, [pc, #572]	@ (80091f0 <UART_SetConfig+0x2cc>)
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d005      	beq.n	8008fc4 <UART_SetConfig+0xa0>
 8008fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80091f4 <UART_SetConfig+0x2d0>)
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d104      	bne.n	8008fce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fc4:	f7fe f90e 	bl	80071e4 <HAL_RCC_GetPCLK2Freq>
 8008fc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008fcc:	e003      	b.n	8008fd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fce:	f7fe f8f5 	bl	80071bc <HAL_RCC_GetPCLK1Freq>
 8008fd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fe0:	f040 810c 	bne.w	80091fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ff2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	1891      	adds	r1, r2, r2
 8008ffc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ffe:	415b      	adcs	r3, r3
 8009000:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009002:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009006:	4621      	mov	r1, r4
 8009008:	eb12 0801 	adds.w	r8, r2, r1
 800900c:	4629      	mov	r1, r5
 800900e:	eb43 0901 	adc.w	r9, r3, r1
 8009012:	f04f 0200 	mov.w	r2, #0
 8009016:	f04f 0300 	mov.w	r3, #0
 800901a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800901e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009026:	4690      	mov	r8, r2
 8009028:	4699      	mov	r9, r3
 800902a:	4623      	mov	r3, r4
 800902c:	eb18 0303 	adds.w	r3, r8, r3
 8009030:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009034:	462b      	mov	r3, r5
 8009036:	eb49 0303 	adc.w	r3, r9, r3
 800903a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800904a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800904e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009052:	460b      	mov	r3, r1
 8009054:	18db      	adds	r3, r3, r3
 8009056:	653b      	str	r3, [r7, #80]	@ 0x50
 8009058:	4613      	mov	r3, r2
 800905a:	eb42 0303 	adc.w	r3, r2, r3
 800905e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009060:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009064:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009068:	f7f7 fda0 	bl	8000bac <__aeabi_uldivmod>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4b61      	ldr	r3, [pc, #388]	@ (80091f8 <UART_SetConfig+0x2d4>)
 8009072:	fba3 2302 	umull	r2, r3, r3, r2
 8009076:	095b      	lsrs	r3, r3, #5
 8009078:	011c      	lsls	r4, r3, #4
 800907a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800907e:	2200      	movs	r2, #0
 8009080:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009084:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009088:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800908c:	4642      	mov	r2, r8
 800908e:	464b      	mov	r3, r9
 8009090:	1891      	adds	r1, r2, r2
 8009092:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009094:	415b      	adcs	r3, r3
 8009096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009098:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800909c:	4641      	mov	r1, r8
 800909e:	eb12 0a01 	adds.w	sl, r2, r1
 80090a2:	4649      	mov	r1, r9
 80090a4:	eb43 0b01 	adc.w	fp, r3, r1
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	f04f 0300 	mov.w	r3, #0
 80090b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090bc:	4692      	mov	sl, r2
 80090be:	469b      	mov	fp, r3
 80090c0:	4643      	mov	r3, r8
 80090c2:	eb1a 0303 	adds.w	r3, sl, r3
 80090c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090ca:	464b      	mov	r3, r9
 80090cc:	eb4b 0303 	adc.w	r3, fp, r3
 80090d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80090e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090e8:	460b      	mov	r3, r1
 80090ea:	18db      	adds	r3, r3, r3
 80090ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80090ee:	4613      	mov	r3, r2
 80090f0:	eb42 0303 	adc.w	r3, r2, r3
 80090f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80090fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80090fe:	f7f7 fd55 	bl	8000bac <__aeabi_uldivmod>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	4611      	mov	r1, r2
 8009108:	4b3b      	ldr	r3, [pc, #236]	@ (80091f8 <UART_SetConfig+0x2d4>)
 800910a:	fba3 2301 	umull	r2, r3, r3, r1
 800910e:	095b      	lsrs	r3, r3, #5
 8009110:	2264      	movs	r2, #100	@ 0x64
 8009112:	fb02 f303 	mul.w	r3, r2, r3
 8009116:	1acb      	subs	r3, r1, r3
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800911e:	4b36      	ldr	r3, [pc, #216]	@ (80091f8 <UART_SetConfig+0x2d4>)
 8009120:	fba3 2302 	umull	r2, r3, r3, r2
 8009124:	095b      	lsrs	r3, r3, #5
 8009126:	005b      	lsls	r3, r3, #1
 8009128:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800912c:	441c      	add	r4, r3
 800912e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009132:	2200      	movs	r2, #0
 8009134:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009138:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800913c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	1891      	adds	r1, r2, r2
 8009146:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009148:	415b      	adcs	r3, r3
 800914a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800914c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009150:	4641      	mov	r1, r8
 8009152:	1851      	adds	r1, r2, r1
 8009154:	6339      	str	r1, [r7, #48]	@ 0x30
 8009156:	4649      	mov	r1, r9
 8009158:	414b      	adcs	r3, r1
 800915a:	637b      	str	r3, [r7, #52]	@ 0x34
 800915c:	f04f 0200 	mov.w	r2, #0
 8009160:	f04f 0300 	mov.w	r3, #0
 8009164:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009168:	4659      	mov	r1, fp
 800916a:	00cb      	lsls	r3, r1, #3
 800916c:	4651      	mov	r1, sl
 800916e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009172:	4651      	mov	r1, sl
 8009174:	00ca      	lsls	r2, r1, #3
 8009176:	4610      	mov	r0, r2
 8009178:	4619      	mov	r1, r3
 800917a:	4603      	mov	r3, r0
 800917c:	4642      	mov	r2, r8
 800917e:	189b      	adds	r3, r3, r2
 8009180:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009184:	464b      	mov	r3, r9
 8009186:	460a      	mov	r2, r1
 8009188:	eb42 0303 	adc.w	r3, r2, r3
 800918c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800919c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80091a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091a4:	460b      	mov	r3, r1
 80091a6:	18db      	adds	r3, r3, r3
 80091a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091aa:	4613      	mov	r3, r2
 80091ac:	eb42 0303 	adc.w	r3, r2, r3
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80091b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80091ba:	f7f7 fcf7 	bl	8000bac <__aeabi_uldivmod>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4b0d      	ldr	r3, [pc, #52]	@ (80091f8 <UART_SetConfig+0x2d4>)
 80091c4:	fba3 1302 	umull	r1, r3, r3, r2
 80091c8:	095b      	lsrs	r3, r3, #5
 80091ca:	2164      	movs	r1, #100	@ 0x64
 80091cc:	fb01 f303 	mul.w	r3, r1, r3
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	00db      	lsls	r3, r3, #3
 80091d4:	3332      	adds	r3, #50	@ 0x32
 80091d6:	4a08      	ldr	r2, [pc, #32]	@ (80091f8 <UART_SetConfig+0x2d4>)
 80091d8:	fba2 2303 	umull	r2, r3, r2, r3
 80091dc:	095b      	lsrs	r3, r3, #5
 80091de:	f003 0207 	and.w	r2, r3, #7
 80091e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4422      	add	r2, r4
 80091ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80091ec:	e106      	b.n	80093fc <UART_SetConfig+0x4d8>
 80091ee:	bf00      	nop
 80091f0:	40011000 	.word	0x40011000
 80091f4:	40011400 	.word	0x40011400
 80091f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009200:	2200      	movs	r2, #0
 8009202:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009206:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800920a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800920e:	4642      	mov	r2, r8
 8009210:	464b      	mov	r3, r9
 8009212:	1891      	adds	r1, r2, r2
 8009214:	6239      	str	r1, [r7, #32]
 8009216:	415b      	adcs	r3, r3
 8009218:	627b      	str	r3, [r7, #36]	@ 0x24
 800921a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800921e:	4641      	mov	r1, r8
 8009220:	1854      	adds	r4, r2, r1
 8009222:	4649      	mov	r1, r9
 8009224:	eb43 0501 	adc.w	r5, r3, r1
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	f04f 0300 	mov.w	r3, #0
 8009230:	00eb      	lsls	r3, r5, #3
 8009232:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009236:	00e2      	lsls	r2, r4, #3
 8009238:	4614      	mov	r4, r2
 800923a:	461d      	mov	r5, r3
 800923c:	4643      	mov	r3, r8
 800923e:	18e3      	adds	r3, r4, r3
 8009240:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009244:	464b      	mov	r3, r9
 8009246:	eb45 0303 	adc.w	r3, r5, r3
 800924a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800925a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800925e:	f04f 0200 	mov.w	r2, #0
 8009262:	f04f 0300 	mov.w	r3, #0
 8009266:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800926a:	4629      	mov	r1, r5
 800926c:	008b      	lsls	r3, r1, #2
 800926e:	4621      	mov	r1, r4
 8009270:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009274:	4621      	mov	r1, r4
 8009276:	008a      	lsls	r2, r1, #2
 8009278:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800927c:	f7f7 fc96 	bl	8000bac <__aeabi_uldivmod>
 8009280:	4602      	mov	r2, r0
 8009282:	460b      	mov	r3, r1
 8009284:	4b60      	ldr	r3, [pc, #384]	@ (8009408 <UART_SetConfig+0x4e4>)
 8009286:	fba3 2302 	umull	r2, r3, r3, r2
 800928a:	095b      	lsrs	r3, r3, #5
 800928c:	011c      	lsls	r4, r3, #4
 800928e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009292:	2200      	movs	r2, #0
 8009294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009298:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800929c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80092a0:	4642      	mov	r2, r8
 80092a2:	464b      	mov	r3, r9
 80092a4:	1891      	adds	r1, r2, r2
 80092a6:	61b9      	str	r1, [r7, #24]
 80092a8:	415b      	adcs	r3, r3
 80092aa:	61fb      	str	r3, [r7, #28]
 80092ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092b0:	4641      	mov	r1, r8
 80092b2:	1851      	adds	r1, r2, r1
 80092b4:	6139      	str	r1, [r7, #16]
 80092b6:	4649      	mov	r1, r9
 80092b8:	414b      	adcs	r3, r1
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092c8:	4659      	mov	r1, fp
 80092ca:	00cb      	lsls	r3, r1, #3
 80092cc:	4651      	mov	r1, sl
 80092ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092d2:	4651      	mov	r1, sl
 80092d4:	00ca      	lsls	r2, r1, #3
 80092d6:	4610      	mov	r0, r2
 80092d8:	4619      	mov	r1, r3
 80092da:	4603      	mov	r3, r0
 80092dc:	4642      	mov	r2, r8
 80092de:	189b      	adds	r3, r3, r2
 80092e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092e4:	464b      	mov	r3, r9
 80092e6:	460a      	mov	r2, r1
 80092e8:	eb42 0303 	adc.w	r3, r2, r3
 80092ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009308:	4649      	mov	r1, r9
 800930a:	008b      	lsls	r3, r1, #2
 800930c:	4641      	mov	r1, r8
 800930e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009312:	4641      	mov	r1, r8
 8009314:	008a      	lsls	r2, r1, #2
 8009316:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800931a:	f7f7 fc47 	bl	8000bac <__aeabi_uldivmod>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4611      	mov	r1, r2
 8009324:	4b38      	ldr	r3, [pc, #224]	@ (8009408 <UART_SetConfig+0x4e4>)
 8009326:	fba3 2301 	umull	r2, r3, r3, r1
 800932a:	095b      	lsrs	r3, r3, #5
 800932c:	2264      	movs	r2, #100	@ 0x64
 800932e:	fb02 f303 	mul.w	r3, r2, r3
 8009332:	1acb      	subs	r3, r1, r3
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	3332      	adds	r3, #50	@ 0x32
 8009338:	4a33      	ldr	r2, [pc, #204]	@ (8009408 <UART_SetConfig+0x4e4>)
 800933a:	fba2 2303 	umull	r2, r3, r2, r3
 800933e:	095b      	lsrs	r3, r3, #5
 8009340:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009344:	441c      	add	r4, r3
 8009346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800934a:	2200      	movs	r2, #0
 800934c:	673b      	str	r3, [r7, #112]	@ 0x70
 800934e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009350:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009354:	4642      	mov	r2, r8
 8009356:	464b      	mov	r3, r9
 8009358:	1891      	adds	r1, r2, r2
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	415b      	adcs	r3, r3
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009364:	4641      	mov	r1, r8
 8009366:	1851      	adds	r1, r2, r1
 8009368:	6039      	str	r1, [r7, #0]
 800936a:	4649      	mov	r1, r9
 800936c:	414b      	adcs	r3, r1
 800936e:	607b      	str	r3, [r7, #4]
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800937c:	4659      	mov	r1, fp
 800937e:	00cb      	lsls	r3, r1, #3
 8009380:	4651      	mov	r1, sl
 8009382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009386:	4651      	mov	r1, sl
 8009388:	00ca      	lsls	r2, r1, #3
 800938a:	4610      	mov	r0, r2
 800938c:	4619      	mov	r1, r3
 800938e:	4603      	mov	r3, r0
 8009390:	4642      	mov	r2, r8
 8009392:	189b      	adds	r3, r3, r2
 8009394:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009396:	464b      	mov	r3, r9
 8009398:	460a      	mov	r2, r1
 800939a:	eb42 0303 	adc.w	r3, r2, r3
 800939e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80093aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80093b8:	4649      	mov	r1, r9
 80093ba:	008b      	lsls	r3, r1, #2
 80093bc:	4641      	mov	r1, r8
 80093be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093c2:	4641      	mov	r1, r8
 80093c4:	008a      	lsls	r2, r1, #2
 80093c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80093ca:	f7f7 fbef 	bl	8000bac <__aeabi_uldivmod>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009408 <UART_SetConfig+0x4e4>)
 80093d4:	fba3 1302 	umull	r1, r3, r3, r2
 80093d8:	095b      	lsrs	r3, r3, #5
 80093da:	2164      	movs	r1, #100	@ 0x64
 80093dc:	fb01 f303 	mul.w	r3, r1, r3
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	011b      	lsls	r3, r3, #4
 80093e4:	3332      	adds	r3, #50	@ 0x32
 80093e6:	4a08      	ldr	r2, [pc, #32]	@ (8009408 <UART_SetConfig+0x4e4>)
 80093e8:	fba2 2303 	umull	r2, r3, r2, r3
 80093ec:	095b      	lsrs	r3, r3, #5
 80093ee:	f003 020f 	and.w	r2, r3, #15
 80093f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4422      	add	r2, r4
 80093fa:	609a      	str	r2, [r3, #8]
}
 80093fc:	bf00      	nop
 80093fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009402:	46bd      	mov	sp, r7
 8009404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009408:	51eb851f 	.word	0x51eb851f

0800940c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009410:	4904      	ldr	r1, [pc, #16]	@ (8009424 <MX_FATFS_Init+0x18>)
 8009412:	4805      	ldr	r0, [pc, #20]	@ (8009428 <MX_FATFS_Init+0x1c>)
 8009414:	f005 fd12 	bl	800ee3c <FATFS_LinkDriver>
 8009418:	4603      	mov	r3, r0
 800941a:	461a      	mov	r2, r3
 800941c:	4b03      	ldr	r3, [pc, #12]	@ (800942c <MX_FATFS_Init+0x20>)
 800941e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009420:	bf00      	nop
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20002b6c 	.word	0x20002b6c
 8009428:	2000001c 	.word	0x2000001c
 800942c:	20002b68 	.word	0x20002b68

08009430 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009434:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009436:	4618      	mov	r0, r3
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	4603      	mov	r3, r0
 8009448:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	4618      	mov	r0, r3
 800944e:	f7f7 fedf 	bl	8001210 <SD_disk_initialize>
 8009452:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	4618      	mov	r0, r3
 800946a:	f7f7 ffbb 	bl	80013e4 <SD_disk_status>
 800946e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	607a      	str	r2, [r7, #4]
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	4603      	mov	r3, r0
 8009486:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009488:	7bf8      	ldrb	r0, [r7, #15]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	68b9      	ldr	r1, [r7, #8]
 8009490:	f7f7 ffbe 	bl	8001410 <SD_disk_read>
 8009494:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
 80094a8:	603b      	str	r3, [r7, #0]
 80094aa:	4603      	mov	r3, r0
 80094ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80094ae:	7bf8      	ldrb	r0, [r7, #15]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	f7f8 f815 	bl	80014e4 <SD_disk_write>
 80094ba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	4603      	mov	r3, r0
 80094cc:	603a      	str	r2, [r7, #0]
 80094ce:	71fb      	strb	r3, [r7, #7]
 80094d0:	460b      	mov	r3, r1
 80094d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80094d4:	79b9      	ldrb	r1, [r7, #6]
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f8 f886 	bl	80015ec <SD_disk_ioctl>
 80094e0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	4a08      	ldr	r2, [pc, #32]	@ (800951c <disk_status+0x30>)
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	79fa      	ldrb	r2, [r7, #7]
 8009504:	4905      	ldr	r1, [pc, #20]	@ (800951c <disk_status+0x30>)
 8009506:	440a      	add	r2, r1
 8009508:	7a12      	ldrb	r2, [r2, #8]
 800950a:	4610      	mov	r0, r2
 800950c:	4798      	blx	r3
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009512:	7bfb      	ldrb	r3, [r7, #15]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	20002b98 	.word	0x20002b98

08009520 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	4a0e      	ldr	r2, [pc, #56]	@ (800956c <disk_initialize+0x4c>)
 8009532:	5cd3      	ldrb	r3, [r2, r3]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d114      	bne.n	8009562 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	4a0c      	ldr	r2, [pc, #48]	@ (800956c <disk_initialize+0x4c>)
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	79fa      	ldrb	r2, [r7, #7]
 8009546:	4909      	ldr	r1, [pc, #36]	@ (800956c <disk_initialize+0x4c>)
 8009548:	440a      	add	r2, r1
 800954a:	7a12      	ldrb	r2, [r2, #8]
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3
 8009550:	4603      	mov	r3, r0
 8009552:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009554:	7bfb      	ldrb	r3, [r7, #15]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d103      	bne.n	8009562 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800955a:	79fb      	ldrb	r3, [r7, #7]
 800955c:	4a03      	ldr	r2, [pc, #12]	@ (800956c <disk_initialize+0x4c>)
 800955e:	2101      	movs	r1, #1
 8009560:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20002b98 	.word	0x20002b98

08009570 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009570:	b590      	push	{r4, r7, lr}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
 800957a:	603b      	str	r3, [r7, #0]
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	4a0a      	ldr	r2, [pc, #40]	@ (80095ac <disk_read+0x3c>)
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4413      	add	r3, r2
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	689c      	ldr	r4, [r3, #8]
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4a07      	ldr	r2, [pc, #28]	@ (80095ac <disk_read+0x3c>)
 8009590:	4413      	add	r3, r2
 8009592:	7a18      	ldrb	r0, [r3, #8]
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	68b9      	ldr	r1, [r7, #8]
 800959a:	47a0      	blx	r4
 800959c:	4603      	mov	r3, r0
 800959e:	75fb      	strb	r3, [r7, #23]
  return res;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd90      	pop	{r4, r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20002b98 	.word	0x20002b98

080095b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80095b0:	b590      	push	{r4, r7, lr}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	607a      	str	r2, [r7, #4]
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	4a0a      	ldr	r2, [pc, #40]	@ (80095ec <disk_write+0x3c>)
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	4413      	add	r3, r2
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	68dc      	ldr	r4, [r3, #12]
 80095cc:	7bfb      	ldrb	r3, [r7, #15]
 80095ce:	4a07      	ldr	r2, [pc, #28]	@ (80095ec <disk_write+0x3c>)
 80095d0:	4413      	add	r3, r2
 80095d2:	7a18      	ldrb	r0, [r3, #8]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	47a0      	blx	r4
 80095dc:	4603      	mov	r3, r0
 80095de:	75fb      	strb	r3, [r7, #23]
  return res;
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd90      	pop	{r4, r7, pc}
 80095ea:	bf00      	nop
 80095ec:	20002b98 	.word	0x20002b98

080095f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	603a      	str	r2, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
 80095fc:	460b      	mov	r3, r1
 80095fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	4a09      	ldr	r2, [pc, #36]	@ (8009628 <disk_ioctl+0x38>)
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	79fa      	ldrb	r2, [r7, #7]
 800960e:	4906      	ldr	r1, [pc, #24]	@ (8009628 <disk_ioctl+0x38>)
 8009610:	440a      	add	r2, r1
 8009612:	7a10      	ldrb	r0, [r2, #8]
 8009614:	79b9      	ldrb	r1, [r7, #6]
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4798      	blx	r3
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]
  return res;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20002b98 	.word	0x20002b98

0800962c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3301      	adds	r3, #1
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800963c:	89fb      	ldrh	r3, [r7, #14]
 800963e:	021b      	lsls	r3, r3, #8
 8009640:	b21a      	sxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	b21b      	sxth	r3, r3
 8009648:	4313      	orrs	r3, r2
 800964a:	b21b      	sxth	r3, r3
 800964c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800964e:	89fb      	ldrh	r3, [r7, #14]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	3303      	adds	r3, #3
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	021b      	lsls	r3, r3, #8
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	3202      	adds	r2, #2
 8009674:	7812      	ldrb	r2, [r2, #0]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	3201      	adds	r2, #1
 8009682:	7812      	ldrb	r2, [r2, #0]
 8009684:	4313      	orrs	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	021b      	lsls	r3, r3, #8
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	7812      	ldrb	r2, [r2, #0]
 8009690:	4313      	orrs	r3, r2
 8009692:	60fb      	str	r3, [r7, #12]
	return rv;
 8009694:	68fb      	ldr	r3, [r7, #12]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80096a2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80096a6:	b09d      	sub	sp, #116	@ 0x74
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 80096ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096ae:	3307      	adds	r3, #7
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2200      	movs	r2, #0
 80096b6:	469a      	mov	sl, r3
 80096b8:	4693      	mov	fp, r2
 80096ba:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 80096be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80096c2:	f04f 0000 	mov.w	r0, #0
 80096c6:	f04f 0100 	mov.w	r1, #0
 80096ca:	0219      	lsls	r1, r3, #8
 80096cc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80096d0:	0210      	lsls	r0, r2, #8
 80096d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096d4:	3306      	adds	r3, #6
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2200      	movs	r2, #0
 80096dc:	461c      	mov	r4, r3
 80096de:	4615      	mov	r5, r2
 80096e0:	ea40 0804 	orr.w	r8, r0, r4
 80096e4:	ea41 0905 	orr.w	r9, r1, r5
 80096e8:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80096ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80096f0:	f04f 0000 	mov.w	r0, #0
 80096f4:	f04f 0100 	mov.w	r1, #0
 80096f8:	0219      	lsls	r1, r3, #8
 80096fa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80096fe:	0210      	lsls	r0, r2, #8
 8009700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009702:	3305      	adds	r3, #5
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2200      	movs	r2, #0
 800970a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800970c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800970e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009712:	4623      	mov	r3, r4
 8009714:	4303      	orrs	r3, r0
 8009716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009718:	462b      	mov	r3, r5
 800971a:	430b      	orrs	r3, r1
 800971c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800971e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8009722:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8009726:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800972a:	f04f 0000 	mov.w	r0, #0
 800972e:	f04f 0100 	mov.w	r1, #0
 8009732:	0219      	lsls	r1, r3, #8
 8009734:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009738:	0210      	lsls	r0, r2, #8
 800973a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800973c:	3304      	adds	r3, #4
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2200      	movs	r2, #0
 8009744:	653b      	str	r3, [r7, #80]	@ 0x50
 8009746:	657a      	str	r2, [r7, #84]	@ 0x54
 8009748:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800974c:	4623      	mov	r3, r4
 800974e:	4303      	orrs	r3, r0
 8009750:	623b      	str	r3, [r7, #32]
 8009752:	462b      	mov	r3, r5
 8009754:	430b      	orrs	r3, r1
 8009756:	627b      	str	r3, [r7, #36]	@ 0x24
 8009758:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800975c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8009760:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009764:	f04f 0000 	mov.w	r0, #0
 8009768:	f04f 0100 	mov.w	r1, #0
 800976c:	0219      	lsls	r1, r3, #8
 800976e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009772:	0210      	lsls	r0, r2, #8
 8009774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009776:	3303      	adds	r3, #3
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2200      	movs	r2, #0
 800977e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009780:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009782:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8009786:	4623      	mov	r3, r4
 8009788:	4303      	orrs	r3, r0
 800978a:	61bb      	str	r3, [r7, #24]
 800978c:	462b      	mov	r3, r5
 800978e:	430b      	orrs	r3, r1
 8009790:	61fb      	str	r3, [r7, #28]
 8009792:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009796:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800979a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800979e:	f04f 0000 	mov.w	r0, #0
 80097a2:	f04f 0100 	mov.w	r1, #0
 80097a6:	0219      	lsls	r1, r3, #8
 80097a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80097ac:	0210      	lsls	r0, r2, #8
 80097ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097b0:	3302      	adds	r3, #2
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2200      	movs	r2, #0
 80097b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80097bc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80097c0:	4623      	mov	r3, r4
 80097c2:	4303      	orrs	r3, r0
 80097c4:	613b      	str	r3, [r7, #16]
 80097c6:	462b      	mov	r3, r5
 80097c8:	430b      	orrs	r3, r1
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80097d0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80097d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80097d8:	f04f 0200 	mov.w	r2, #0
 80097dc:	f04f 0300 	mov.w	r3, #0
 80097e0:	020b      	lsls	r3, r1, #8
 80097e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097e6:	0202      	lsls	r2, r0, #8
 80097e8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80097ea:	3101      	adds	r1, #1
 80097ec:	7809      	ldrb	r1, [r1, #0]
 80097ee:	b2c9      	uxtb	r1, r1
 80097f0:	2000      	movs	r0, #0
 80097f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80097f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80097f6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80097fa:	4621      	mov	r1, r4
 80097fc:	4311      	orrs	r1, r2
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	4629      	mov	r1, r5
 8009802:	4319      	orrs	r1, r3
 8009804:	60f9      	str	r1, [r7, #12]
 8009806:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800980a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800980e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009812:	f04f 0200 	mov.w	r2, #0
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	020b      	lsls	r3, r1, #8
 800981c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009820:	0202      	lsls	r2, r0, #8
 8009822:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009824:	7809      	ldrb	r1, [r1, #0]
 8009826:	b2c9      	uxtb	r1, r1
 8009828:	2000      	movs	r0, #0
 800982a:	6339      	str	r1, [r7, #48]	@ 0x30
 800982c:	6378      	str	r0, [r7, #52]	@ 0x34
 800982e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009832:	4621      	mov	r1, r4
 8009834:	4311      	orrs	r1, r2
 8009836:	6039      	str	r1, [r7, #0]
 8009838:	4629      	mov	r1, r5
 800983a:	4319      	orrs	r1, r3
 800983c:	6079      	str	r1, [r7, #4]
 800983e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009842:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8009846:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800984a:	4610      	mov	r0, r2
 800984c:	4619      	mov	r1, r3
 800984e:	3774      	adds	r7, #116	@ 0x74
 8009850:	46bd      	mov	sp, r7
 8009852:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009856:	4770      	bx	lr

08009858 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	1c5a      	adds	r2, r3, #1
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	887a      	ldrh	r2, [r7, #2]
 800986c:	b2d2      	uxtb	r2, r2
 800986e:	701a      	strb	r2, [r3, #0]
 8009870:	887b      	ldrh	r3, [r7, #2]
 8009872:	0a1b      	lsrs	r3, r3, #8
 8009874:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	1c5a      	adds	r2, r3, #1
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	887a      	ldrh	r2, [r7, #2]
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	701a      	strb	r2, [r3, #0]
}
 8009882:	bf00      	nop
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	1c5a      	adds	r2, r3, #1
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	b2d2      	uxtb	r2, r2
 80098a2:	701a      	strb	r2, [r3, #0]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	0a1b      	lsrs	r3, r3, #8
 80098a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	0a1b      	lsrs	r3, r3, #8
 80098ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	607a      	str	r2, [r7, #4]
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	b2d2      	uxtb	r2, r2
 80098c6:	701a      	strb	r2, [r3, #0]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	607a      	str	r2, [r7, #4]
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	701a      	strb	r2, [r3, #0]
}
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr

080098e6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	60fa      	str	r2, [r7, #12]
 80098f8:	783a      	ldrb	r2, [r7, #0]
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009900:	f04f 0200 	mov.w	r2, #0
 8009904:	f04f 0300 	mov.w	r3, #0
 8009908:	0a02      	lsrs	r2, r0, #8
 800990a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800990e:	0a0b      	lsrs	r3, r1, #8
 8009910:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	1c5a      	adds	r2, r3, #1
 8009918:	60fa      	str	r2, [r7, #12]
 800991a:	783a      	ldrb	r2, [r7, #0]
 800991c:	701a      	strb	r2, [r3, #0]
 800991e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	f04f 0300 	mov.w	r3, #0
 800992a:	0a02      	lsrs	r2, r0, #8
 800992c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009930:	0a0b      	lsrs	r3, r1, #8
 8009932:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	60fa      	str	r2, [r7, #12]
 800993c:	783a      	ldrb	r2, [r7, #0]
 800993e:	701a      	strb	r2, [r3, #0]
 8009940:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	0a02      	lsrs	r2, r0, #8
 800994e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009952:	0a0b      	lsrs	r3, r1, #8
 8009954:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	60fa      	str	r2, [r7, #12]
 800995e:	783a      	ldrb	r2, [r7, #0]
 8009960:	701a      	strb	r2, [r3, #0]
 8009962:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009966:	f04f 0200 	mov.w	r2, #0
 800996a:	f04f 0300 	mov.w	r3, #0
 800996e:	0a02      	lsrs	r2, r0, #8
 8009970:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009974:	0a0b      	lsrs	r3, r1, #8
 8009976:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	1c5a      	adds	r2, r3, #1
 800997e:	60fa      	str	r2, [r7, #12]
 8009980:	783a      	ldrb	r2, [r7, #0]
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009988:	f04f 0200 	mov.w	r2, #0
 800998c:	f04f 0300 	mov.w	r3, #0
 8009990:	0a02      	lsrs	r2, r0, #8
 8009992:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009996:	0a0b      	lsrs	r3, r1, #8
 8009998:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	60fa      	str	r2, [r7, #12]
 80099a2:	783a      	ldrb	r2, [r7, #0]
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099aa:	f04f 0200 	mov.w	r2, #0
 80099ae:	f04f 0300 	mov.w	r3, #0
 80099b2:	0a02      	lsrs	r2, r0, #8
 80099b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80099b8:	0a0b      	lsrs	r3, r1, #8
 80099ba:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	60fa      	str	r2, [r7, #12]
 80099c4:	783a      	ldrb	r2, [r7, #0]
 80099c6:	701a      	strb	r2, [r3, #0]
 80099c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	f04f 0300 	mov.w	r3, #0
 80099d4:	0a02      	lsrs	r2, r0, #8
 80099d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80099da:	0a0b      	lsrs	r3, r1, #8
 80099dc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	60fa      	str	r2, [r7, #12]
 80099e6:	783a      	ldrb	r2, [r7, #0]
 80099e8:	701a      	strb	r2, [r3, #0]
}
 80099ea:	bf00      	nop
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80099f6:	b480      	push	{r7}
 80099f8:	b087      	sub	sp, #28
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00d      	beq.n	8009a2c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	1c53      	adds	r3, r2, #1
 8009a14:	613b      	str	r3, [r7, #16]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	1c59      	adds	r1, r3, #1
 8009a1a:	6179      	str	r1, [r7, #20]
 8009a1c:	7812      	ldrb	r2, [r2, #0]
 8009a1e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	607b      	str	r3, [r7, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f1      	bne.n	8009a10 <mem_cpy+0x1a>
	}
}
 8009a2c:	bf00      	nop
 8009a2e:	371c      	adds	r7, #28
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	617a      	str	r2, [r7, #20]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	b2d2      	uxtb	r2, r2
 8009a52:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	607b      	str	r3, [r7, #4]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1f3      	bne.n	8009a48 <mem_set+0x10>
}
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009a6e:	b480      	push	{r7}
 8009a70:	b089      	sub	sp, #36	@ 0x24
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	61fb      	str	r3, [r7, #28]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	61fa      	str	r2, [r7, #28]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	1c5a      	adds	r2, r3, #1
 8009a94:	61ba      	str	r2, [r7, #24]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	1acb      	subs	r3, r1, r3
 8009a9a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	607b      	str	r3, [r7, #4]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <mem_cmp+0x40>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0eb      	beq.n	8009a86 <mem_cmp+0x18>

	return r;
 8009aae:	697b      	ldr	r3, [r7, #20]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3724      	adds	r7, #36	@ 0x24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009ac6:	e002      	b.n	8009ace <chk_chr+0x12>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3301      	adds	r3, #1
 8009acc:	607b      	str	r3, [r7, #4]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d005      	beq.n	8009ae2 <chk_chr+0x26>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	461a      	mov	r2, r3
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d1f2      	bne.n	8009ac8 <chk_chr+0xc>
	return *str;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b082      	sub	sp, #8
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d009      	beq.n	8009b14 <lock_fs+0x22>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f005 fa9b 	bl	800f040 <ff_req_grant>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <lock_fs+0x22>
 8009b10:	2301      	movs	r3, #1
 8009b12:	e000      	b.n	8009b16 <lock_fs+0x24>
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3708      	adds	r7, #8
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b082      	sub	sp, #8
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
 8009b26:	460b      	mov	r3, r1
 8009b28:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00d      	beq.n	8009b4c <unlock_fs+0x2e>
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	2b0c      	cmp	r3, #12
 8009b34:	d00a      	beq.n	8009b4c <unlock_fs+0x2e>
 8009b36:	78fb      	ldrb	r3, [r7, #3]
 8009b38:	2b0b      	cmp	r3, #11
 8009b3a:	d007      	beq.n	8009b4c <unlock_fs+0x2e>
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	2b0f      	cmp	r3, #15
 8009b40:	d004      	beq.n	8009b4c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f005 fa8f 	bl	800f06a <ff_rel_grant>
	}
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b085      	sub	sp, #20
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60bb      	str	r3, [r7, #8]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	60fb      	str	r3, [r7, #12]
 8009b66:	e029      	b.n	8009bbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009b68:	4a27      	ldr	r2, [pc, #156]	@ (8009c08 <chk_lock+0xb4>)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	011b      	lsls	r3, r3, #4
 8009b6e:	4413      	add	r3, r2
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d01d      	beq.n	8009bb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009b76:	4a24      	ldr	r2, [pc, #144]	@ (8009c08 <chk_lock+0xb4>)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	4413      	add	r3, r2
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d116      	bne.n	8009bb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009b88:	4a1f      	ldr	r2, [pc, #124]	@ (8009c08 <chk_lock+0xb4>)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	011b      	lsls	r3, r3, #4
 8009b8e:	4413      	add	r3, r2
 8009b90:	3304      	adds	r3, #4
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d10c      	bne.n	8009bb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8009c08 <chk_lock+0xb4>)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	4413      	add	r3, r2
 8009ba4:	3308      	adds	r3, #8
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d102      	bne.n	8009bb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009bb0:	e007      	b.n	8009bc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d9d2      	bls.n	8009b68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d109      	bne.n	8009bdc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d102      	bne.n	8009bd4 <chk_lock+0x80>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d101      	bne.n	8009bd8 <chk_lock+0x84>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	e010      	b.n	8009bfa <chk_lock+0xa6>
 8009bd8:	2312      	movs	r3, #18
 8009bda:	e00e      	b.n	8009bfa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d108      	bne.n	8009bf4 <chk_lock+0xa0>
 8009be2:	4a09      	ldr	r2, [pc, #36]	@ (8009c08 <chk_lock+0xb4>)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	4413      	add	r3, r2
 8009bea:	330c      	adds	r3, #12
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bf2:	d101      	bne.n	8009bf8 <chk_lock+0xa4>
 8009bf4:	2310      	movs	r3, #16
 8009bf6:	e000      	b.n	8009bfa <chk_lock+0xa6>
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20002b78 	.word	0x20002b78

08009c0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c12:	2300      	movs	r3, #0
 8009c14:	607b      	str	r3, [r7, #4]
 8009c16:	e002      	b.n	8009c1e <enq_lock+0x12>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	607b      	str	r3, [r7, #4]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d806      	bhi.n	8009c32 <enq_lock+0x26>
 8009c24:	4a09      	ldr	r2, [pc, #36]	@ (8009c4c <enq_lock+0x40>)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	011b      	lsls	r3, r3, #4
 8009c2a:	4413      	add	r3, r2
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f2      	bne.n	8009c18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	bf14      	ite	ne
 8009c38:	2301      	movne	r3, #1
 8009c3a:	2300      	moveq	r3, #0
 8009c3c:	b2db      	uxtb	r3, r3
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	20002b78 	.word	0x20002b78

08009c50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
 8009c5e:	e01f      	b.n	8009ca0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009c60:	4a41      	ldr	r2, [pc, #260]	@ (8009d68 <inc_lock+0x118>)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	4413      	add	r3, r2
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d113      	bne.n	8009c9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009c72:	4a3d      	ldr	r2, [pc, #244]	@ (8009d68 <inc_lock+0x118>)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	4413      	add	r3, r2
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d109      	bne.n	8009c9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009c86:	4a38      	ldr	r2, [pc, #224]	@ (8009d68 <inc_lock+0x118>)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	4413      	add	r3, r2
 8009c8e:	3308      	adds	r3, #8
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d006      	beq.n	8009ca8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d9dc      	bls.n	8009c60 <inc_lock+0x10>
 8009ca6:	e000      	b.n	8009caa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009ca8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d132      	bne.n	8009d16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60fb      	str	r3, [r7, #12]
 8009cb4:	e002      	b.n	8009cbc <inc_lock+0x6c>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d806      	bhi.n	8009cd0 <inc_lock+0x80>
 8009cc2:	4a29      	ldr	r2, [pc, #164]	@ (8009d68 <inc_lock+0x118>)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	4413      	add	r3, r2
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1f2      	bne.n	8009cb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d101      	bne.n	8009cda <inc_lock+0x8a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e040      	b.n	8009d5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4922      	ldr	r1, [pc, #136]	@ (8009d68 <inc_lock+0x118>)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	011b      	lsls	r3, r3, #4
 8009ce4:	440b      	add	r3, r1
 8009ce6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	491e      	ldr	r1, [pc, #120]	@ (8009d68 <inc_lock+0x118>)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	440b      	add	r3, r1
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cfc:	491a      	ldr	r1, [pc, #104]	@ (8009d68 <inc_lock+0x118>)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	011b      	lsls	r3, r3, #4
 8009d02:	440b      	add	r3, r1
 8009d04:	3308      	adds	r3, #8
 8009d06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d08:	4a17      	ldr	r2, [pc, #92]	@ (8009d68 <inc_lock+0x118>)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	011b      	lsls	r3, r3, #4
 8009d0e:	4413      	add	r3, r2
 8009d10:	330c      	adds	r3, #12
 8009d12:	2200      	movs	r2, #0
 8009d14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d009      	beq.n	8009d30 <inc_lock+0xe0>
 8009d1c:	4a12      	ldr	r2, [pc, #72]	@ (8009d68 <inc_lock+0x118>)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	011b      	lsls	r3, r3, #4
 8009d22:	4413      	add	r3, r2
 8009d24:	330c      	adds	r3, #12
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <inc_lock+0xe0>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e015      	b.n	8009d5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d108      	bne.n	8009d48 <inc_lock+0xf8>
 8009d36:	4a0c      	ldr	r2, [pc, #48]	@ (8009d68 <inc_lock+0x118>)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	011b      	lsls	r3, r3, #4
 8009d3c:	4413      	add	r3, r2
 8009d3e:	330c      	adds	r3, #12
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	3301      	adds	r3, #1
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	e001      	b.n	8009d4c <inc_lock+0xfc>
 8009d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d4c:	4906      	ldr	r1, [pc, #24]	@ (8009d68 <inc_lock+0x118>)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	011b      	lsls	r3, r3, #4
 8009d52:	440b      	add	r3, r1
 8009d54:	330c      	adds	r3, #12
 8009d56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3301      	adds	r3, #1
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	20002b78 	.word	0x20002b78

08009d6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	607b      	str	r3, [r7, #4]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d825      	bhi.n	8009dcc <dec_lock+0x60>
		n = Files[i].ctr;
 8009d80:	4a17      	ldr	r2, [pc, #92]	@ (8009de0 <dec_lock+0x74>)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	011b      	lsls	r3, r3, #4
 8009d86:	4413      	add	r3, r2
 8009d88:	330c      	adds	r3, #12
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009d8e:	89fb      	ldrh	r3, [r7, #14]
 8009d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d94:	d101      	bne.n	8009d9a <dec_lock+0x2e>
 8009d96:	2300      	movs	r3, #0
 8009d98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009d9a:	89fb      	ldrh	r3, [r7, #14]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <dec_lock+0x3a>
 8009da0:	89fb      	ldrh	r3, [r7, #14]
 8009da2:	3b01      	subs	r3, #1
 8009da4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009da6:	4a0e      	ldr	r2, [pc, #56]	@ (8009de0 <dec_lock+0x74>)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	011b      	lsls	r3, r3, #4
 8009dac:	4413      	add	r3, r2
 8009dae:	330c      	adds	r3, #12
 8009db0:	89fa      	ldrh	r2, [r7, #14]
 8009db2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009db4:	89fb      	ldrh	r3, [r7, #14]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d105      	bne.n	8009dc6 <dec_lock+0x5a>
 8009dba:	4a09      	ldr	r2, [pc, #36]	@ (8009de0 <dec_lock+0x74>)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	011b      	lsls	r3, r3, #4
 8009dc0:	4413      	add	r3, r2
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	737b      	strb	r3, [r7, #13]
 8009dca:	e001      	b.n	8009dd0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009dcc:	2302      	movs	r3, #2
 8009dce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009dd0:	7b7b      	ldrb	r3, [r7, #13]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	20002b78 	.word	0x20002b78

08009de4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	e010      	b.n	8009e14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009df2:	4a0d      	ldr	r2, [pc, #52]	@ (8009e28 <clear_lock+0x44>)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	4413      	add	r3, r2
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d105      	bne.n	8009e0e <clear_lock+0x2a>
 8009e02:	4a09      	ldr	r2, [pc, #36]	@ (8009e28 <clear_lock+0x44>)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	4413      	add	r3, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3301      	adds	r3, #1
 8009e12:	60fb      	str	r3, [r7, #12]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d9eb      	bls.n	8009df2 <clear_lock+0xe>
	}
}
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	20002b78 	.word	0x20002b78

08009e2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	78db      	ldrb	r3, [r3, #3]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d034      	beq.n	8009eaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7858      	ldrb	r0, [r3, #1]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009e50:	2301      	movs	r3, #1
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	f7ff fbac 	bl	80095b0 <disk_write>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	73fb      	strb	r3, [r7, #15]
 8009e62:	e022      	b.n	8009eaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2200      	movs	r2, #0
 8009e68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	1ad2      	subs	r2, r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d217      	bcs.n	8009eaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	789b      	ldrb	r3, [r3, #2]
 8009e7e:	613b      	str	r3, [r7, #16]
 8009e80:	e010      	b.n	8009ea4 <sync_window+0x78>
					wsect += fs->fsize;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	4413      	add	r3, r2
 8009e8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7858      	ldrb	r0, [r3, #1]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009e96:	2301      	movs	r3, #1
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	f7ff fb89 	bl	80095b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	613b      	str	r3, [r7, #16]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d8eb      	bhi.n	8009e82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d01b      	beq.n	8009f04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff ffad 	bl	8009e2c <sync_window>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d113      	bne.n	8009f04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7858      	ldrb	r0, [r3, #1]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	f7ff fb41 	bl	8009570 <disk_read>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d004      	beq.n	8009efe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
	return res;
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
	...

08009f10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f7ff ff87 	bl	8009e2c <sync_window>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f22:	7bfb      	ldrb	r3, [r7, #15]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d159      	bne.n	8009fdc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d149      	bne.n	8009fc4 <sync_fs+0xb4>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	791b      	ldrb	r3, [r3, #4]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d145      	bne.n	8009fc4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	899b      	ldrh	r3, [r3, #12]
 8009f42:	461a      	mov	r2, r3
 8009f44:	2100      	movs	r1, #0
 8009f46:	f7ff fd77 	bl	8009a38 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3340      	adds	r3, #64	@ 0x40
 8009f4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009f52:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7ff fc7e 	bl	8009858 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3340      	adds	r3, #64	@ 0x40
 8009f60:	4921      	ldr	r1, [pc, #132]	@ (8009fe8 <sync_fs+0xd8>)
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7ff fc93 	bl	800988e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3340      	adds	r3, #64	@ 0x40
 8009f6c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009f70:	491e      	ldr	r1, [pc, #120]	@ (8009fec <sync_fs+0xdc>)
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fc8b 	bl	800988e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	3340      	adds	r3, #64	@ 0x40
 8009f7c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	4619      	mov	r1, r3
 8009f86:	4610      	mov	r0, r2
 8009f88:	f7ff fc81 	bl	800988e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3340      	adds	r3, #64	@ 0x40
 8009f90:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	f7ff fc77 	bl	800988e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	63da      	str	r2, [r3, #60]	@ 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	7858      	ldrb	r0, [r3, #1]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f7ff faf9 	bl	80095b0 <disk_write>
			fs->fsi_flag = 0;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	785b      	ldrb	r3, [r3, #1]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	2100      	movs	r1, #0
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fb0f 	bl	80095f0 <disk_ioctl>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <sync_fs+0xcc>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	41615252 	.word	0x41615252
 8009fec:	61417272 	.word	0x61417272

08009ff0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	3b02      	subs	r3, #2
 8009ffe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a004:	3b02      	subs	r3, #2
 800a006:	683a      	ldr	r2, [r7, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d301      	bcc.n	800a010 <clust2sect+0x20>
 800a00c:	2300      	movs	r3, #0
 800a00e:	e008      	b.n	800a022 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	895b      	ldrh	r3, [r3, #10]
 800a014:	461a      	mov	r2, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	fb03 f202 	mul.w	r2, r3, r2
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a020:	4413      	add	r3, r2
}
 800a022:	4618      	mov	r0, r3
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
	...

0800a030 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a034:	b088      	sub	sp, #32
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d904      	bls.n	800a052 <get_fat+0x22>
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d302      	bcc.n	800a058 <get_fat+0x28>
		val = 1;	/* Internal error */
 800a052:	2301      	movs	r3, #1
 800a054:	61fb      	str	r3, [r7, #28]
 800a056:	e139      	b.n	800a2cc <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a058:	f04f 33ff 	mov.w	r3, #4294967295
 800a05c:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	3b01      	subs	r3, #1
 800a064:	2b03      	cmp	r3, #3
 800a066:	f200 8125 	bhi.w	800a2b4 <get_fat+0x284>
 800a06a:	a201      	add	r2, pc, #4	@ (adr r2, 800a070 <get_fat+0x40>)
 800a06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a070:	0800a081 	.word	0x0800a081
 800a074:	0800a12d 	.word	0x0800a12d
 800a078:	0800a179 	.word	0x0800a179
 800a07c:	0800a1c9 	.word	0x0800a1c9
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	085b      	lsrs	r3, r3, #1
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	899b      	ldrh	r3, [r3, #12]
 800a096:	4619      	mov	r1, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a09e:	4413      	add	r3, r2
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	69b8      	ldr	r0, [r7, #24]
 800a0a4:	f7ff ff06 	bl	8009eb4 <move_window>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f040 8105 	bne.w	800a2ba <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	60fa      	str	r2, [r7, #12]
 800a0b6:	69ba      	ldr	r2, [r7, #24]
 800a0b8:	8992      	ldrh	r2, [r2, #12]
 800a0ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0be:	fb01 f202 	mul.w	r2, r1, r2
 800a0c2:	1a9b      	subs	r3, r3, r2
 800a0c4:	69ba      	ldr	r2, [r7, #24]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	899b      	ldrh	r3, [r3, #12]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0de:	4413      	add	r3, r2
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	69b8      	ldr	r0, [r7, #24]
 800a0e4:	f7ff fee6 	bl	8009eb4 <move_window>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f040 80e7 	bne.w	800a2be <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	899b      	ldrh	r3, [r3, #12]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0fc:	fb01 f202 	mul.w	r2, r1, r2
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	69ba      	ldr	r2, [r7, #24]
 800a104:	4413      	add	r3, r2
 800a106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	f003 0301 	and.w	r3, r3, #1
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <get_fat+0xf2>
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	091b      	lsrs	r3, r3, #4
 800a120:	e002      	b.n	800a128 <get_fat+0xf8>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a128:	61fb      	str	r3, [r7, #28]
			break;
 800a12a:	e0cf      	b.n	800a2cc <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	899b      	ldrh	r3, [r3, #12]
 800a134:	085b      	lsrs	r3, r3, #1
 800a136:	b29b      	uxth	r3, r3
 800a138:	4619      	mov	r1, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a140:	4413      	add	r3, r2
 800a142:	4619      	mov	r1, r3
 800a144:	69b8      	ldr	r0, [r7, #24]
 800a146:	f7ff feb5 	bl	8009eb4 <move_window>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f040 80b8 	bne.w	800a2c2 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	8992      	ldrh	r2, [r2, #12]
 800a160:	fbb3 f0f2 	udiv	r0, r3, r2
 800a164:	fb00 f202 	mul.w	r2, r0, r2
 800a168:	1a9b      	subs	r3, r3, r2
 800a16a:	440b      	add	r3, r1
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff fa5d 	bl	800962c <ld_word>
 800a172:	4603      	mov	r3, r0
 800a174:	61fb      	str	r3, [r7, #28]
			break;
 800a176:	e0a9      	b.n	800a2cc <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	899b      	ldrh	r3, [r3, #12]
 800a180:	089b      	lsrs	r3, r3, #2
 800a182:	b29b      	uxth	r3, r3
 800a184:	4619      	mov	r1, r3
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	fbb3 f3f1 	udiv	r3, r3, r1
 800a18c:	4413      	add	r3, r2
 800a18e:	4619      	mov	r1, r3
 800a190:	69b8      	ldr	r0, [r7, #24]
 800a192:	f7ff fe8f 	bl	8009eb4 <move_window>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f040 8094 	bne.w	800a2c6 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	8992      	ldrh	r2, [r2, #12]
 800a1ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1b0:	fb00 f202 	mul.w	r2, r0, r2
 800a1b4:	1a9b      	subs	r3, r3, r2
 800a1b6:	440b      	add	r3, r1
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7ff fa4f 	bl	800965c <ld_dword>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a1c4:	61fb      	str	r3, [r7, #28]
			break;
 800a1c6:	e081      	b.n	800a2cc <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	d070      	beq.n	800a2b4 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a1e2:	1e54      	subs	r4, r2, #1
 800a1e4:	f143 35ff 	adc.w	r5, r3, #4294967295
 800a1e8:	69bb      	ldr	r3, [r7, #24]
 800a1ea:	899b      	ldrh	r3, [r3, #12]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	4698      	mov	r8, r3
 800a1f2:	4691      	mov	r9, r2
 800a1f4:	4642      	mov	r2, r8
 800a1f6:	464b      	mov	r3, r9
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	f7f6 fcd6 	bl	8000bac <__aeabi_uldivmod>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	895b      	ldrh	r3, [r3, #10]
 800a208:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20c:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	79db      	ldrb	r3, [r3, #7]
 800a212:	2b02      	cmp	r3, #2
 800a214:	d10e      	bne.n	800a234 <get_fat+0x204>
					if (cofs <= clen) {
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d80a      	bhi.n	800a234 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	429a      	cmp	r2, r3
 800a224:	d002      	beq.n	800a22c <get_fat+0x1fc>
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	3301      	adds	r3, #1
 800a22a:	e001      	b.n	800a230 <get_fat+0x200>
 800a22c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a230:	61fb      	str	r3, [r7, #28]
						break;
 800a232:	e04b      	b.n	800a2cc <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	79db      	ldrb	r3, [r3, #7]
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d108      	bne.n	800a24e <get_fat+0x21e>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	699b      	ldr	r3, [r3, #24]
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	429a      	cmp	r2, r3
 800a244:	d203      	bcs.n	800a24e <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	3301      	adds	r3, #1
 800a24a:	61fb      	str	r3, [r7, #28]
					break;
 800a24c:	e03e      	b.n	800a2cc <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	79db      	ldrb	r3, [r3, #7]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d02e      	beq.n	800a2b4 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a25e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a262:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a264:	e032      	b.n	800a2cc <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	899b      	ldrh	r3, [r3, #12]
 800a26e:	089b      	lsrs	r3, r3, #2
 800a270:	b29b      	uxth	r3, r3
 800a272:	4619      	mov	r1, r3
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	fbb3 f3f1 	udiv	r3, r3, r1
 800a27a:	4413      	add	r3, r2
 800a27c:	4619      	mov	r1, r3
 800a27e:	69b8      	ldr	r0, [r7, #24]
 800a280:	f7ff fe18 	bl	8009eb4 <move_window>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d11f      	bne.n	800a2ca <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	8992      	ldrh	r2, [r2, #12]
 800a298:	fbb3 f0f2 	udiv	r0, r3, r2
 800a29c:	fb00 f202 	mul.w	r2, r0, r2
 800a2a0:	1a9b      	subs	r3, r3, r2
 800a2a2:	440b      	add	r3, r1
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f7ff f9d9 	bl	800965c <ld_dword>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2b0:	61fb      	str	r3, [r7, #28]
					break;
 800a2b2:	e00b      	b.n	800a2cc <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	61fb      	str	r3, [r7, #28]
 800a2b8:	e008      	b.n	800a2cc <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ba:	bf00      	nop
 800a2bc:	e006      	b.n	800a2cc <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2be:	bf00      	nop
 800a2c0:	e004      	b.n	800a2cc <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2c2:	bf00      	nop
 800a2c4:	e002      	b.n	800a2cc <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2c6:	bf00      	nop
 800a2c8:	e000      	b.n	800a2cc <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2ca:	bf00      	nop
		}
	}

	return val;
 800a2cc:	69fb      	ldr	r3, [r7, #28]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3720      	adds	r7, #32
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a2d8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a2d8:	b590      	push	{r4, r7, lr}
 800a2da:	b089      	sub	sp, #36	@ 0x24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	f240 810d 	bls.w	800a50a <put_fat+0x232>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	f080 8107 	bcs.w	800a50a <put_fat+0x232>
		switch (fs->fs_type) {
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b04      	cmp	r3, #4
 800a302:	f300 8102 	bgt.w	800a50a <put_fat+0x232>
 800a306:	2b03      	cmp	r3, #3
 800a308:	f280 80b3 	bge.w	800a472 <put_fat+0x19a>
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d003      	beq.n	800a318 <put_fat+0x40>
 800a310:	2b02      	cmp	r3, #2
 800a312:	f000 8083 	beq.w	800a41c <put_fat+0x144>
 800a316:	e0f8      	b.n	800a50a <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	61bb      	str	r3, [r7, #24]
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	085b      	lsrs	r3, r3, #1
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	4413      	add	r3, r2
 800a324:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	899b      	ldrh	r3, [r3, #12]
 800a32e:	4619      	mov	r1, r3
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	fbb3 f3f1 	udiv	r3, r3, r1
 800a336:	4413      	add	r3, r2
 800a338:	4619      	mov	r1, r3
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f7ff fdba 	bl	8009eb4 <move_window>
 800a340:	4603      	mov	r3, r0
 800a342:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a344:	7ffb      	ldrb	r3, [r7, #31]
 800a346:	2b00      	cmp	r3, #0
 800a348:	f040 80d8 	bne.w	800a4fc <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	1c5a      	adds	r2, r3, #1
 800a356:	61ba      	str	r2, [r7, #24]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	8992      	ldrh	r2, [r2, #12]
 800a35c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a360:	fb00 f202 	mul.w	r2, r0, r2
 800a364:	1a9b      	subs	r3, r3, r2
 800a366:	440b      	add	r3, r1
 800a368:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00d      	beq.n	800a390 <put_fat+0xb8>
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	b25b      	sxtb	r3, r3
 800a37a:	f003 030f 	and.w	r3, r3, #15
 800a37e:	b25a      	sxtb	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	b25b      	sxtb	r3, r3
 800a388:	4313      	orrs	r3, r2
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	e001      	b.n	800a394 <put_fat+0xbc>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	b2db      	uxtb	r3, r3
 800a394:	697a      	ldr	r2, [r7, #20]
 800a396:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2201      	movs	r2, #1
 800a39c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	899b      	ldrh	r3, [r3, #12]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ae:	4413      	add	r3, r2
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f7ff fd7e 	bl	8009eb4 <move_window>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3bc:	7ffb      	ldrb	r3, [r7, #31]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f040 809e 	bne.w	800a500 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	899b      	ldrh	r3, [r3, #12]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3d6:	fb00 f202 	mul.w	r2, r0, r2
 800a3da:	1a9b      	subs	r3, r3, r2
 800a3dc:	440b      	add	r3, r1
 800a3de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <put_fat+0x11a>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	091b      	lsrs	r3, r3, #4
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	e00e      	b.n	800a410 <put_fat+0x138>
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	b25b      	sxtb	r3, r3
 800a3f8:	f023 030f 	bic.w	r3, r3, #15
 800a3fc:	b25a      	sxtb	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	0a1b      	lsrs	r3, r3, #8
 800a402:	b25b      	sxtb	r3, r3
 800a404:	f003 030f 	and.w	r3, r3, #15
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	4313      	orrs	r3, r2
 800a40c:	b25b      	sxtb	r3, r3
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	70da      	strb	r2, [r3, #3]
			break;
 800a41a:	e076      	b.n	800a50a <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	899b      	ldrh	r3, [r3, #12]
 800a424:	085b      	lsrs	r3, r3, #1
 800a426:	b29b      	uxth	r3, r3
 800a428:	4619      	mov	r1, r3
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a430:	4413      	add	r3, r2
 800a432:	4619      	mov	r1, r3
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f7ff fd3d 	bl	8009eb4 <move_window>
 800a43a:	4603      	mov	r3, r0
 800a43c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a43e:	7ffb      	ldrb	r3, [r7, #31]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d15f      	bne.n	800a504 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	8992      	ldrh	r2, [r2, #12]
 800a452:	fbb3 f0f2 	udiv	r0, r3, r2
 800a456:	fb00 f202 	mul.w	r2, r0, r2
 800a45a:	1a9b      	subs	r3, r3, r2
 800a45c:	440b      	add	r3, r1
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	b292      	uxth	r2, r2
 800a462:	4611      	mov	r1, r2
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff f9f7 	bl	8009858 <st_word>
			fs->wflag = 1;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2201      	movs	r2, #1
 800a46e:	70da      	strb	r2, [r3, #3]
			break;
 800a470:	e04b      	b.n	800a50a <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	899b      	ldrh	r3, [r3, #12]
 800a47a:	089b      	lsrs	r3, r3, #2
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4619      	mov	r1, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	fbb3 f3f1 	udiv	r3, r3, r1
 800a486:	4413      	add	r3, r2
 800a488:	4619      	mov	r1, r3
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff fd12 	bl	8009eb4 <move_window>
 800a490:	4603      	mov	r3, r0
 800a492:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a494:	7ffb      	ldrb	r3, [r7, #31]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d136      	bne.n	800a508 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d017      	beq.n	800a4d2 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	8992      	ldrh	r2, [r2, #12]
 800a4b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4ba:	fb00 f202 	mul.w	r2, r0, r2
 800a4be:	1a9b      	subs	r3, r3, r2
 800a4c0:	440b      	add	r3, r1
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7ff f8ca 	bl	800965c <ld_dword>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4ce:	4323      	orrs	r3, r4
 800a4d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	8992      	ldrh	r2, [r2, #12]
 800a4e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4e4:	fb00 f202 	mul.w	r2, r0, r2
 800a4e8:	1a9b      	subs	r3, r3, r2
 800a4ea:	440b      	add	r3, r1
 800a4ec:	6879      	ldr	r1, [r7, #4]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff f9cd 	bl	800988e <st_dword>
			fs->wflag = 1;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	70da      	strb	r2, [r3, #3]
			break;
 800a4fa:	e006      	b.n	800a50a <put_fat+0x232>
			if (res != FR_OK) break;
 800a4fc:	bf00      	nop
 800a4fe:	e004      	b.n	800a50a <put_fat+0x232>
			if (res != FR_OK) break;
 800a500:	bf00      	nop
 800a502:	e002      	b.n	800a50a <put_fat+0x232>
			if (res != FR_OK) break;
 800a504:	bf00      	nop
 800a506:	e000      	b.n	800a50a <put_fat+0x232>
			if (res != FR_OK) break;
 800a508:	bf00      	nop
		}
	}
	return res;
 800a50a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3724      	adds	r7, #36	@ 0x24
 800a510:	46bd      	mov	sp, r7
 800a512:	bd90      	pop	{r4, r7, pc}

0800a514 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08a      	sub	sp, #40	@ 0x28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	3b02      	subs	r3, #2
 800a524:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52a:	3b02      	subs	r3, #2
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d301      	bcc.n	800a536 <find_bitmap+0x22>
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	61fb      	str	r3, [r7, #28]
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	61bb      	str	r3, [r7, #24]
 800a53e:	2300      	movs	r3, #0
 800a540:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	08db      	lsrs	r3, r3, #3
 800a54a:	68f9      	ldr	r1, [r7, #12]
 800a54c:	8989      	ldrh	r1, [r1, #12]
 800a54e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a552:	4413      	add	r3, r2
 800a554:	4619      	mov	r1, r3
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7ff fcac 	bl	8009eb4 <move_window>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <find_bitmap+0x54>
 800a562:	f04f 33ff 	mov.w	r3, #4294967295
 800a566:	e058      	b.n	800a61a <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	08db      	lsrs	r3, r3, #3
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	8992      	ldrh	r2, [r2, #12]
 800a570:	fbb3 f1f2 	udiv	r1, r3, r2
 800a574:	fb01 f202 	mul.w	r2, r1, r2
 800a578:	1a9b      	subs	r3, r3, r2
 800a57a:	623b      	str	r3, [r7, #32]
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	f003 0307 	and.w	r3, r3, #7
 800a582:	2201      	movs	r2, #1
 800a584:	fa02 f303 	lsl.w	r3, r2, r3
 800a588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	6a3b      	ldr	r3, [r7, #32]
 800a590:	4413      	add	r3, r2
 800a592:	3340      	adds	r3, #64	@ 0x40
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a59a:	4013      	ands	r3, r2
 800a59c:	74fb      	strb	r3, [r7, #19]
 800a59e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5a2:	005b      	lsls	r3, r3, #1
 800a5a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	61fb      	str	r3, [r7, #28]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5b2:	3b02      	subs	r3, #2
 800a5b4:	69fa      	ldr	r2, [r7, #28]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d307      	bcc.n	800a5ca <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61fb      	str	r3, [r7, #28]
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	899b      	ldrh	r3, [r3, #12]
 800a5c8:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800a5ca:	7cfb      	ldrb	r3, [r7, #19]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d109      	bne.n	800a5e4 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	697a      	ldr	r2, [r7, #20]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d106      	bne.n	800a5ec <find_bitmap+0xd8>
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	e01a      	b.n	800a61a <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	61bb      	str	r3, [r7, #24]
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800a5ec:	69fa      	ldr	r2, [r7, #28]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d101      	bne.n	800a5f8 <find_bitmap+0xe4>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	e010      	b.n	800a61a <find_bitmap+0x106>
			} while (bm);
 800a5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1c5      	bne.n	800a58c <find_bitmap+0x78>
			bm = 1;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	3301      	adds	r3, #1
 800a60a:	623b      	str	r3, [r7, #32]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	899b      	ldrh	r3, [r3, #12]
 800a610:	461a      	mov	r2, r3
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	4293      	cmp	r3, r2
 800a616:	d3b9      	bcc.n	800a58c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a618:	e793      	b.n	800a542 <find_bitmap+0x2e>
	}
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3728      	adds	r7, #40	@ 0x28
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b088      	sub	sp, #32
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
 800a62e:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	3b02      	subs	r3, #2
 800a634:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	08db      	lsrs	r3, r3, #3
 800a63e:	68f9      	ldr	r1, [r7, #12]
 800a640:	8989      	ldrh	r1, [r1, #12]
 800a642:	fbb3 f3f1 	udiv	r3, r3, r1
 800a646:	4413      	add	r3, r2
 800a648:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	08db      	lsrs	r3, r3, #3
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	8992      	ldrh	r2, [r2, #12]
 800a652:	fbb3 f1f2 	udiv	r1, r3, r2
 800a656:	fb01 f202 	mul.w	r2, r1, r2
 800a65a:	1a9b      	subs	r3, r3, r2
 800a65c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	2201      	movs	r2, #1
 800a666:	fa02 f303 	lsl.w	r3, r2, r3
 800a66a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	617a      	str	r2, [r7, #20]
 800a672:	4619      	mov	r1, r3
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7ff fc1d 	bl	8009eb4 <move_window>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <change_bitmap+0x62>
 800a680:	2301      	movs	r3, #1
 800a682:	e03f      	b.n	800a704 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	4413      	add	r3, r2
 800a68a:	3340      	adds	r3, #64	@ 0x40
 800a68c:	781a      	ldrb	r2, [r3, #0]
 800a68e:	7ffb      	ldrb	r3, [r7, #31]
 800a690:	4013      	ands	r3, r2
 800a692:	b2db      	uxtb	r3, r3
 800a694:	2b00      	cmp	r3, #0
 800a696:	bf14      	ite	ne
 800a698:	2301      	movne	r3, #1
 800a69a:	2300      	moveq	r3, #0
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	461a      	mov	r2, r3
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d101      	bne.n	800a6aa <change_bitmap+0x88>
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e02c      	b.n	800a704 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800a6aa:	68fa      	ldr	r2, [r7, #12]
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	4413      	add	r3, r2
 800a6b0:	3340      	adds	r3, #64	@ 0x40
 800a6b2:	781a      	ldrb	r2, [r3, #0]
 800a6b4:	7ffb      	ldrb	r3, [r7, #31]
 800a6b6:	4053      	eors	r3, r2
 800a6b8:	b2d9      	uxtb	r1, r3
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	4413      	add	r3, r2
 800a6c0:	3340      	adds	r3, #64	@ 0x40
 800a6c2:	460a      	mov	r2, r1
 800a6c4:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	607b      	str	r3, [r7, #4]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <change_bitmap+0xba>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e013      	b.n	800a704 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800a6dc:	7ffb      	ldrb	r3, [r7, #31]
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	77fb      	strb	r3, [r7, #31]
 800a6e2:	7ffb      	ldrb	r3, [r7, #31]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1cd      	bne.n	800a684 <change_bitmap+0x62>
			bm = 1;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	61bb      	str	r3, [r7, #24]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	899b      	ldrh	r3, [r3, #12]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d3c2      	bcc.n	800a684 <change_bitmap+0x62>
		i = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a702:	e7b3      	b.n	800a66c <change_bitmap+0x4a>
	}
}
 800a704:	4618      	mov	r0, r3
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	79db      	ldrb	r3, [r3, #7]
 800a718:	2b03      	cmp	r3, #3
 800a71a:	d121      	bne.n	800a760 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	617b      	str	r3, [r7, #20]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	613b      	str	r3, [r7, #16]
 800a728:	e014      	b.n	800a754 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6818      	ldr	r0, [r3, #0]
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	3301      	adds	r3, #1
 800a732:	461a      	mov	r2, r3
 800a734:	6979      	ldr	r1, [r7, #20]
 800a736:	f7ff fdcf 	bl	800a2d8 <put_fat>
 800a73a:	4603      	mov	r3, r0
 800a73c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <fill_first_frag+0x3c>
 800a744:	7bfb      	ldrb	r3, [r7, #15]
 800a746:	e00c      	b.n	800a762 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	3301      	adds	r3, #1
 800a74c:	617b      	str	r3, [r7, #20]
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	3b01      	subs	r3, #1
 800a752:	613b      	str	r3, [r7, #16]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e7      	bne.n	800a72a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b086      	sub	sp, #24
 800a76e:	af00      	add	r7, sp, #0
 800a770:	60f8      	str	r0, [r7, #12]
 800a772:	60b9      	str	r1, [r7, #8]
 800a774:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a776:	e020      	b.n	800a7ba <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	69db      	ldr	r3, [r3, #28]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	1ad3      	subs	r3, r2, r3
 800a784:	1c59      	adds	r1, r3, #1
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d905      	bls.n	800a79a <fill_last_frag+0x30>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	69db      	ldr	r3, [r3, #28]
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	1ad3      	subs	r3, r2, r3
 800a796:	3302      	adds	r3, #2
 800a798:	e000      	b.n	800a79c <fill_last_frag+0x32>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	461a      	mov	r2, r3
 800a79e:	f7ff fd9b 	bl	800a2d8 <put_fat>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <fill_last_frag+0x46>
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	e009      	b.n	800a7c4 <fill_last_frag+0x5a>
		obj->n_frag--;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	1e5a      	subs	r2, r3, #1
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1da      	bne.n	800a778 <fill_last_frag+0xe>
	}
	return FR_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b08a      	sub	sp, #40	@ 0x28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d904      	bls.n	800a7fa <remove_chain+0x2e>
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f4:	68ba      	ldr	r2, [r7, #8]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d301      	bcc.n	800a7fe <remove_chain+0x32>
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	e096      	b.n	800a92c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d014      	beq.n	800a82e <remove_chain+0x62>
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d103      	bne.n	800a814 <remove_chain+0x48>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	79db      	ldrb	r3, [r3, #7]
 800a810:	2b02      	cmp	r3, #2
 800a812:	d00c      	beq.n	800a82e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a814:	f04f 32ff 	mov.w	r2, #4294967295
 800a818:	6879      	ldr	r1, [r7, #4]
 800a81a:	69b8      	ldr	r0, [r7, #24]
 800a81c:	f7ff fd5c 	bl	800a2d8 <put_fat>
 800a820:	4603      	mov	r3, r0
 800a822:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a824:	7ffb      	ldrb	r3, [r7, #31]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <remove_chain+0x62>
 800a82a:	7ffb      	ldrb	r3, [r7, #31]
 800a82c:	e07e      	b.n	800a92c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a82e:	68b9      	ldr	r1, [r7, #8]
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7ff fbfd 	bl	800a030 <get_fat>
 800a836:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d055      	beq.n	800a8ea <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <remove_chain+0x7c>
 800a844:	2302      	movs	r3, #2
 800a846:	e071      	b.n	800a92c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84e:	d101      	bne.n	800a854 <remove_chain+0x88>
 800a850:	2301      	movs	r3, #1
 800a852:	e06b      	b.n	800a92c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a854:	69bb      	ldr	r3, [r7, #24]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b04      	cmp	r3, #4
 800a85a:	d00b      	beq.n	800a874 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a85c:	2200      	movs	r2, #0
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	69b8      	ldr	r0, [r7, #24]
 800a862:	f7ff fd39 	bl	800a2d8 <put_fat>
 800a866:	4603      	mov	r3, r0
 800a868:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a86a:	7ffb      	ldrb	r3, [r7, #31]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <remove_chain+0xa8>
 800a870:	7ffb      	ldrb	r3, [r7, #31]
 800a872:	e05b      	b.n	800a92c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	6a1a      	ldr	r2, [r3, #32]
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87c:	3b02      	subs	r3, #2
 800a87e:	429a      	cmp	r2, r3
 800a880:	d20b      	bcs.n	800a89a <remove_chain+0xce>
			fs->free_clst++;
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	1c5a      	adds	r2, r3, #1
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	791b      	ldrb	r3, [r3, #4]
 800a890:	f043 0301 	orr.w	r3, r3, #1
 800a894:	b2da      	uxtb	r2, r3
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	3301      	adds	r3, #1
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d102      	bne.n	800a8aa <remove_chain+0xde>
			ecl = nxt;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	623b      	str	r3, [r7, #32]
 800a8a8:	e017      	b.n	800a8da <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d10f      	bne.n	800a8d2 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800a8b2:	6a3a      	ldr	r2, [r7, #32]
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	1c5a      	adds	r2, r3, #1
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8be:	69b8      	ldr	r0, [r7, #24]
 800a8c0:	f7ff feaf 	bl	800a622 <change_bitmap>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800a8c8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <remove_chain+0x106>
 800a8ce:	7ffb      	ldrb	r3, [r7, #31]
 800a8d0:	e02c      	b.n	800a92c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	623b      	str	r3, [r7, #32]
 800a8d6:	6a3b      	ldr	r3, [r7, #32]
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d3a2      	bcc.n	800a82e <remove_chain+0x62>
 800a8e8:	e000      	b.n	800a8ec <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800a8ea:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b04      	cmp	r3, #4
 800a8f2:	d11a      	bne.n	800a92a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d103      	bne.n	800a902 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	71da      	strb	r2, [r3, #7]
 800a900:	e013      	b.n	800a92a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	79db      	ldrb	r3, [r3, #7]
 800a906:	2b03      	cmp	r3, #3
 800a908:	d10f      	bne.n	800a92a <remove_chain+0x15e>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	429a      	cmp	r2, r3
 800a912:	d30a      	bcc.n	800a92a <remove_chain+0x15e>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	4413      	add	r3, r2
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	429a      	cmp	r2, r3
 800a922:	d802      	bhi.n	800a92a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2202      	movs	r2, #2
 800a928:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3728      	adds	r7, #40	@ 0x28
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b088      	sub	sp, #32
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d10d      	bne.n	800a966 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <create_chain+0x2c>
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95a:	69ba      	ldr	r2, [r7, #24]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d31b      	bcc.n	800a998 <create_chain+0x64>
 800a960:	2301      	movs	r3, #1
 800a962:	61bb      	str	r3, [r7, #24]
 800a964:	e018      	b.n	800a998 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff fb61 	bl	800a030 <get_fat>
 800a96e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d801      	bhi.n	800a97a <create_chain+0x46>
 800a976:	2301      	movs	r3, #1
 800a978:	e0d9      	b.n	800ab2e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d101      	bne.n	800a986 <create_chain+0x52>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	e0d3      	b.n	800ab2e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d201      	bcs.n	800a994 <create_chain+0x60>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	e0cc      	b.n	800ab2e <create_chain+0x1fa>
		scl = clst;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d164      	bne.n	800aa6a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	69b9      	ldr	r1, [r7, #24]
 800a9a4:	6938      	ldr	r0, [r7, #16]
 800a9a6:	f7ff fdb5 	bl	800a514 <find_bitmap>
 800a9aa:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <create_chain+0x86>
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b8:	d101      	bne.n	800a9be <create_chain+0x8a>
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	e0b7      	b.n	800ab2e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800a9be:	2301      	movs	r3, #1
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	69f9      	ldr	r1, [r7, #28]
 800a9c4:	6938      	ldr	r0, [r7, #16]
 800a9c6:	f7ff fe2c 	bl	800a622 <change_bitmap>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d101      	bne.n	800a9d8 <create_chain+0xa4>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e0aa      	b.n	800ab2e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800a9d8:	7dfb      	ldrb	r3, [r7, #23]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d102      	bne.n	800a9e4 <create_chain+0xb0>
 800a9de:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e2:	e0a4      	b.n	800ab2e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2202      	movs	r2, #2
 800a9ee:	71da      	strb	r2, [r3, #7]
 800a9f0:	e011      	b.n	800aa16 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	79db      	ldrb	r3, [r3, #7]
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d10d      	bne.n	800aa16 <create_chain+0xe2>
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	69fa      	ldr	r2, [r7, #28]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d008      	beq.n	800aa16 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	1ad2      	subs	r2, r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2203      	movs	r2, #3
 800aa14:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	79db      	ldrb	r3, [r3, #7]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d064      	beq.n	800aae8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	3301      	adds	r3, #1
 800aa22:	69fa      	ldr	r2, [r7, #28]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d10b      	bne.n	800aa40 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	69db      	ldr	r3, [r3, #28]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <create_chain+0x104>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	3301      	adds	r3, #1
 800aa36:	e000      	b.n	800aa3a <create_chain+0x106>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	61d3      	str	r3, [r2, #28]
 800aa3e:	e053      	b.n	800aae8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	69db      	ldr	r3, [r3, #28]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d102      	bne.n	800aa4e <create_chain+0x11a>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800aa4e:	69fa      	ldr	r2, [r7, #28]
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7ff fe89 	bl	800a76a <fill_last_frag>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d142      	bne.n	800aae8 <create_chain+0x1b4>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2201      	movs	r2, #1
 800aa66:	61da      	str	r2, [r3, #28]
 800aa68:	e03e      	b.n	800aae8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	3301      	adds	r3, #1
 800aa72:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d307      	bcc.n	800aa8e <create_chain+0x15a>
				ncl = 2;
 800aa7e:	2302      	movs	r3, #2
 800aa80:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d901      	bls.n	800aa8e <create_chain+0x15a>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e04f      	b.n	800ab2e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa8e:	69f9      	ldr	r1, [r7, #28]
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff facd 	bl	800a030 <get_fat>
 800aa96:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00e      	beq.n	800aabc <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d003      	beq.n	800aaac <create_chain+0x178>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaaa:	d101      	bne.n	800aab0 <create_chain+0x17c>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	e03e      	b.n	800ab2e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800aab0:	69fa      	ldr	r2, [r7, #28]
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d1da      	bne.n	800aa6e <create_chain+0x13a>
 800aab8:	2300      	movs	r3, #0
 800aaba:	e038      	b.n	800ab2e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800aabc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aabe:	f04f 32ff 	mov.w	r2, #4294967295
 800aac2:	69f9      	ldr	r1, [r7, #28]
 800aac4:	6938      	ldr	r0, [r7, #16]
 800aac6:	f7ff fc07 	bl	800a2d8 <put_fat>
 800aaca:	4603      	mov	r3, r0
 800aacc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d109      	bne.n	800aae8 <create_chain+0x1b4>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d006      	beq.n	800aae8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	6938      	ldr	r0, [r7, #16]
 800aae0:	f7ff fbfa 	bl	800a2d8 <put_fat>
 800aae4:	4603      	mov	r3, r0
 800aae6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d116      	bne.n	800ab1c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	69fa      	ldr	r2, [r7, #28]
 800aaf2:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	6a1a      	ldr	r2, [r3, #32]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafc:	3b02      	subs	r3, #2
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d804      	bhi.n	800ab0c <create_chain+0x1d8>
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	1e5a      	subs	r2, r3, #1
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	791b      	ldrb	r3, [r3, #4]
 800ab10:	f043 0301 	orr.w	r3, r3, #1
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	711a      	strb	r2, [r3, #4]
 800ab1a:	e007      	b.n	800ab2c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d102      	bne.n	800ab28 <create_chain+0x1f4>
 800ab22:	f04f 33ff 	mov.w	r3, #4294967295
 800ab26:	e000      	b.n	800ab2a <create_chain+0x1f6>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab2c:	69fb      	ldr	r3, [r7, #28]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3720      	adds	r7, #32
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ab36:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab4e:	3304      	adds	r3, #4
 800ab50:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	899b      	ldrh	r3, [r3, #12]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	2200      	movs	r2, #0
 800ab5a:	4698      	mov	r8, r3
 800ab5c:	4691      	mov	r9, r2
 800ab5e:	4642      	mov	r2, r8
 800ab60:	464b      	mov	r3, r9
 800ab62:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab66:	f7f6 f821 	bl	8000bac <__aeabi_uldivmod>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4610      	mov	r0, r2
 800ab70:	4619      	mov	r1, r3
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	895b      	ldrh	r3, [r3, #10]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	2200      	movs	r2, #0
 800ab7a:	461c      	mov	r4, r3
 800ab7c:	4615      	mov	r5, r2
 800ab7e:	4622      	mov	r2, r4
 800ab80:	462b      	mov	r3, r5
 800ab82:	f7f6 f813 	bl	8000bac <__aeabi_uldivmod>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	1d1a      	adds	r2, r3, #4
 800ab92:	61ba      	str	r2, [r7, #24]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <clmt_clust+0x6c>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e010      	b.n	800abc4 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d307      	bcc.n	800abba <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800abaa:	69fa      	ldr	r2, [r7, #28]
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	61fb      	str	r3, [r7, #28]
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	3304      	adds	r3, #4
 800abb6:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abb8:	e7e9      	b.n	800ab8e <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800abba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	4413      	add	r3, r2
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3720      	adds	r7, #32
 800abc8:	46bd      	mov	sp, r7
 800abca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800abce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b086      	sub	sp, #24
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b04      	cmp	r3, #4
 800abe4:	d102      	bne.n	800abec <dir_sdi+0x1e>
 800abe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abea:	e001      	b.n	800abf0 <dir_sdi+0x22>
 800abec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d904      	bls.n	800ac00 <dir_sdi+0x32>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	f003 031f 	and.w	r3, r3, #31
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d001      	beq.n	800ac04 <dir_sdi+0x36>
		return FR_INT_ERR;
 800ac00:	2302      	movs	r3, #2
 800ac02:	e074      	b.n	800acee <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <dir_sdi+0x5c>
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b02      	cmp	r3, #2
 800ac1c:	d905      	bls.n	800ac2a <dir_sdi+0x5c>
		clst = fs->dirbase;
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac22:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10c      	bne.n	800ac4a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	095b      	lsrs	r3, r3, #5
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	8912      	ldrh	r2, [r2, #8]
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d301      	bcc.n	800ac40 <dir_sdi+0x72>
 800ac3c:	2302      	movs	r3, #2
 800ac3e:	e056      	b.n	800acee <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac48:	e02d      	b.n	800aca6 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	895b      	ldrh	r3, [r3, #10]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	899b      	ldrh	r3, [r3, #12]
 800ac54:	fb02 f303 	mul.w	r3, r2, r3
 800ac58:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac5a:	e019      	b.n	800ac90 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6979      	ldr	r1, [r7, #20]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff f9e5 	bl	800a030 <get_fat>
 800ac66:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6e:	d101      	bne.n	800ac74 <dir_sdi+0xa6>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e03c      	b.n	800acee <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d904      	bls.n	800ac84 <dir_sdi+0xb6>
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d301      	bcc.n	800ac88 <dir_sdi+0xba>
 800ac84:	2302      	movs	r3, #2
 800ac86:	e032      	b.n	800acee <dir_sdi+0x120>
			ofs -= csz;
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d2e1      	bcs.n	800ac5c <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800ac98:	6979      	ldr	r1, [r7, #20]
 800ac9a:	6938      	ldr	r0, [r7, #16]
 800ac9c:	f7ff f9a8 	bl	8009ff0 <clust2sect>
 800aca0:	4602      	mov	r2, r0
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <dir_sdi+0xea>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e01a      	b.n	800acee <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	899b      	ldrh	r3, [r3, #12]
 800acc0:	4619      	mov	r1, r3
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	fbb3 f3f1 	udiv	r3, r3, r1
 800acc8:	441a      	add	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	899b      	ldrh	r3, [r3, #12]
 800acd8:	461a      	mov	r2, r3
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ace0:	fb00 f202 	mul.w	r2, r0, r2
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	18ca      	adds	r2, r1, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b086      	sub	sp, #24
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad0a:	3320      	adds	r3, #32
 800ad0c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00b      	beq.n	800ad2e <dir_next+0x38>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d102      	bne.n	800ad24 <dir_next+0x2e>
 800ad1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad22:	e001      	b.n	800ad28 <dir_next+0x32>
 800ad24:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d801      	bhi.n	800ad32 <dir_next+0x3c>
 800ad2e:	2304      	movs	r3, #4
 800ad30:	e0c3      	b.n	800aeba <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	899b      	ldrh	r3, [r3, #12]
 800ad36:	461a      	mov	r2, r3
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad3e:	fb01 f202 	mul.w	r2, r1, r2
 800ad42:	1a9b      	subs	r3, r3, r2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f040 80a5 	bne.w	800ae94 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10b      	bne.n	800ad74 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	095b      	lsrs	r3, r3, #5
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	8912      	ldrh	r2, [r2, #8]
 800ad64:	4293      	cmp	r3, r2
 800ad66:	f0c0 8095 	bcc.w	800ae94 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad70:	2304      	movs	r3, #4
 800ad72:	e0a2      	b.n	800aeba <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	899b      	ldrh	r3, [r3, #12]
 800ad78:	461a      	mov	r2, r3
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	8952      	ldrh	r2, [r2, #10]
 800ad84:	3a01      	subs	r2, #1
 800ad86:	4013      	ands	r3, r2
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f040 8083 	bne.w	800ae94 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7ff f94a 	bl	800a030 <get_fat>
 800ad9c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d801      	bhi.n	800ada8 <dir_next+0xb2>
 800ada4:	2302      	movs	r3, #2
 800ada6:	e088      	b.n	800aeba <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adae:	d101      	bne.n	800adb4 <dir_next+0xbe>
 800adb0:	2301      	movs	r3, #1
 800adb2:	e082      	b.n	800aeba <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d360      	bcc.n	800ae80 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	639a      	str	r2, [r3, #56]	@ 0x38
 800adca:	2304      	movs	r3, #4
 800adcc:	e075      	b.n	800aeba <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add4:	4619      	mov	r1, r3
 800add6:	4610      	mov	r0, r2
 800add8:	f7ff fdac 	bl	800a934 <create_chain>
 800addc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <dir_next+0xf2>
 800ade4:	2307      	movs	r3, #7
 800ade6:	e068      	b.n	800aeba <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d101      	bne.n	800adf2 <dir_next+0xfc>
 800adee:	2302      	movs	r3, #2
 800adf0:	e063      	b.n	800aeba <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf8:	d101      	bne.n	800adfe <dir_next+0x108>
 800adfa:	2301      	movs	r3, #1
 800adfc:	e05d      	b.n	800aeba <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	79db      	ldrb	r3, [r3, #7]
 800ae02:	f043 0304 	orr.w	r3, r3, #4
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f7ff f80d 	bl	8009e2c <sync_window>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <dir_next+0x126>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e04e      	b.n	800aeba <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	899b      	ldrh	r3, [r3, #12]
 800ae26:	461a      	mov	r2, r3
 800ae28:	2100      	movs	r1, #0
 800ae2a:	f7fe fe05 	bl	8009a38 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae2e:	2300      	movs	r3, #0
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	6979      	ldr	r1, [r7, #20]
 800ae34:	68f8      	ldr	r0, [r7, #12]
 800ae36:	f7ff f8db 	bl	8009ff0 <clust2sect>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ae40:	e012      	b.n	800ae68 <dir_next+0x172>
						fs->wflag = 1;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2201      	movs	r2, #1
 800ae46:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7fe ffef 	bl	8009e2c <sync_window>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d001      	beq.n	800ae58 <dir_next+0x162>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e030      	b.n	800aeba <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	613b      	str	r3, [r7, #16]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae62:	1c5a      	adds	r2, r3, #1
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	895b      	ldrh	r3, [r3, #10]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d3e6      	bcc.n	800ae42 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	1ad2      	subs	r2, r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	697a      	ldr	r2, [r7, #20]
 800ae84:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800ae86:	6979      	ldr	r1, [r7, #20]
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f7ff f8b1 	bl	8009ff0 <clust2sect>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	899b      	ldrh	r3, [r3, #12]
 800aea4:	461a      	mov	r2, r3
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeac:	fb00 f202 	mul.w	r2, r0, r2
 800aeb0:	1a9b      	subs	r3, r3, r2
 800aeb2:	18ca      	adds	r2, r1, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b086      	sub	sp, #24
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aed2:	2100      	movs	r1, #0
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff fe7a 	bl	800abce <dir_sdi>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d140      	bne.n	800af66 <dir_alloc+0xa4>
		n = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeec:	4619      	mov	r1, r3
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7fe ffe0 	bl	8009eb4 <move_window>
 800aef4:	4603      	mov	r3, r0
 800aef6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d132      	bne.n	800af64 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b04      	cmp	r3, #4
 800af04:	d108      	bne.n	800af18 <dir_alloc+0x56>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	b25b      	sxtb	r3, r3
 800af0e:	43db      	mvns	r3, r3
 800af10:	b2db      	uxtb	r3, r3
 800af12:	09db      	lsrs	r3, r3, #7
 800af14:	b2db      	uxtb	r3, r3
 800af16:	e00f      	b.n	800af38 <dir_alloc+0x76>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	2be5      	cmp	r3, #229	@ 0xe5
 800af20:	d004      	beq.n	800af2c <dir_alloc+0x6a>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <dir_alloc+0x6e>
 800af2c:	2301      	movs	r3, #1
 800af2e:	e000      	b.n	800af32 <dir_alloc+0x70>
 800af30:	2300      	movs	r3, #0
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	b2db      	uxtb	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d007      	beq.n	800af4c <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	3301      	adds	r3, #1
 800af40:	613b      	str	r3, [r7, #16]
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d102      	bne.n	800af50 <dir_alloc+0x8e>
 800af4a:	e00c      	b.n	800af66 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af4c:	2300      	movs	r3, #0
 800af4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af50:	2101      	movs	r1, #1
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff fecf 	bl	800acf6 <dir_next>
 800af58:	4603      	mov	r3, r0
 800af5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0c2      	beq.n	800aee8 <dir_alloc+0x26>
 800af62:	e000      	b.n	800af66 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800af64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2b04      	cmp	r3, #4
 800af6a:	d101      	bne.n	800af70 <dir_alloc+0xae>
 800af6c:	2307      	movs	r3, #7
 800af6e:	75fb      	strb	r3, [r7, #23]
	return res;
 800af70:	7dfb      	ldrb	r3, [r7, #23]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3718      	adds	r7, #24
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b084      	sub	sp, #16
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	331a      	adds	r3, #26
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fe fb4f 	bl	800962c <ld_word>
 800af8e:	4603      	mov	r3, r0
 800af90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b03      	cmp	r3, #3
 800af98:	d109      	bne.n	800afae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	3314      	adds	r3, #20
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe fb44 	bl	800962c <ld_word>
 800afa4:	4603      	mov	r3, r0
 800afa6:	041b      	lsls	r3, r3, #16
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	4313      	orrs	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800afae:	68fb      	ldr	r3, [r7, #12]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	331a      	adds	r3, #26
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	b292      	uxth	r2, r2
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe fc42 	bl	8009858 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d109      	bne.n	800aff0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	f103 0214 	add.w	r2, r3, #20
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	0c1b      	lsrs	r3, r3, #16
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	4619      	mov	r1, r3
 800afea:	4610      	mov	r0, r2
 800afec:	f7fe fc34 	bl	8009858 <st_word>
	}
}
 800aff0:	bf00      	nop
 800aff2:	3710      	adds	r7, #16
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800aff8:	b590      	push	{r4, r7, lr}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	331a      	adds	r3, #26
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe fb10 	bl	800962c <ld_word>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <cmp_lfn+0x1e>
 800b012:	2300      	movs	r3, #0
 800b014:	e059      	b.n	800b0ca <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b01e:	1e5a      	subs	r2, r3, #1
 800b020:	4613      	mov	r3, r2
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	4413      	add	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4413      	add	r3, r2
 800b02a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b02c:	2301      	movs	r3, #1
 800b02e:	81fb      	strh	r3, [r7, #14]
 800b030:	2300      	movs	r3, #0
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	e033      	b.n	800b09e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b036:	4a27      	ldr	r2, [pc, #156]	@ (800b0d4 <cmp_lfn+0xdc>)
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	4413      	add	r3, r2
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	4413      	add	r3, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f7fe faf1 	bl	800962c <ld_word>
 800b04a:	4603      	mov	r3, r0
 800b04c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b04e:	89fb      	ldrh	r3, [r7, #14]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d01a      	beq.n	800b08a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2bfe      	cmp	r3, #254	@ 0xfe
 800b058:	d812      	bhi.n	800b080 <cmp_lfn+0x88>
 800b05a:	89bb      	ldrh	r3, [r7, #12]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f003 ff39 	bl	800eed4 <ff_wtoupper>
 800b062:	4603      	mov	r3, r0
 800b064:	461c      	mov	r4, r3
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	1c5a      	adds	r2, r3, #1
 800b06a:	617a      	str	r2, [r7, #20]
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	4413      	add	r3, r2
 800b072:	881b      	ldrh	r3, [r3, #0]
 800b074:	4618      	mov	r0, r3
 800b076:	f003 ff2d 	bl	800eed4 <ff_wtoupper>
 800b07a:	4603      	mov	r3, r0
 800b07c:	429c      	cmp	r4, r3
 800b07e:	d001      	beq.n	800b084 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b080:	2300      	movs	r3, #0
 800b082:	e022      	b.n	800b0ca <cmp_lfn+0xd2>
			}
			wc = uc;
 800b084:	89bb      	ldrh	r3, [r7, #12]
 800b086:	81fb      	strh	r3, [r7, #14]
 800b088:	e006      	b.n	800b098 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b08a:	89bb      	ldrh	r3, [r7, #12]
 800b08c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b090:	4293      	cmp	r3, r2
 800b092:	d001      	beq.n	800b098 <cmp_lfn+0xa0>
 800b094:	2300      	movs	r3, #0
 800b096:	e018      	b.n	800b0ca <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	3301      	adds	r3, #1
 800b09c:	613b      	str	r3, [r7, #16]
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b0c      	cmp	r3, #12
 800b0a2:	d9c8      	bls.n	800b036 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00b      	beq.n	800b0c8 <cmp_lfn+0xd0>
 800b0b0:	89fb      	ldrh	r3, [r7, #14]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <cmp_lfn+0xd0>
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	4413      	add	r3, r2
 800b0be:	881b      	ldrh	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <cmp_lfn+0xd0>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e000      	b.n	800b0ca <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b0c8:	2301      	movs	r3, #1
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	371c      	adds	r7, #28
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd90      	pop	{r4, r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	08018820 	.word	0x08018820

0800b0d8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	331a      	adds	r3, #26
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe faa0 	bl	800962c <ld_word>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <pick_lfn+0x1e>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e04d      	b.n	800b192 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0fe:	1e5a      	subs	r2, r3, #1
 800b100:	4613      	mov	r3, r2
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4413      	add	r3, r2
 800b10a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b10c:	2301      	movs	r3, #1
 800b10e:	81fb      	strh	r3, [r7, #14]
 800b110:	2300      	movs	r3, #0
 800b112:	613b      	str	r3, [r7, #16]
 800b114:	e028      	b.n	800b168 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b116:	4a21      	ldr	r2, [pc, #132]	@ (800b19c <pick_lfn+0xc4>)
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	4413      	add	r3, r2
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	4413      	add	r3, r2
 800b124:	4618      	mov	r0, r3
 800b126:	f7fe fa81 	bl	800962c <ld_word>
 800b12a:	4603      	mov	r3, r0
 800b12c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b12e:	89fb      	ldrh	r3, [r7, #14]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00f      	beq.n	800b154 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2bfe      	cmp	r3, #254	@ 0xfe
 800b138:	d901      	bls.n	800b13e <pick_lfn+0x66>
 800b13a:	2300      	movs	r3, #0
 800b13c:	e029      	b.n	800b192 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b13e:	89bb      	ldrh	r3, [r7, #12]
 800b140:	81fb      	strh	r3, [r7, #14]
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	1c5a      	adds	r2, r3, #1
 800b146:	617a      	str	r2, [r7, #20]
 800b148:	005b      	lsls	r3, r3, #1
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	4413      	add	r3, r2
 800b14e:	89fa      	ldrh	r2, [r7, #14]
 800b150:	801a      	strh	r2, [r3, #0]
 800b152:	e006      	b.n	800b162 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b154:	89bb      	ldrh	r3, [r7, #12]
 800b156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d001      	beq.n	800b162 <pick_lfn+0x8a>
 800b15e:	2300      	movs	r3, #0
 800b160:	e017      	b.n	800b192 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	3301      	adds	r3, #1
 800b166:	613b      	str	r3, [r7, #16]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	2b0c      	cmp	r3, #12
 800b16c:	d9d3      	bls.n	800b116 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b17e:	d901      	bls.n	800b184 <pick_lfn+0xac>
 800b180:	2300      	movs	r3, #0
 800b182:	e006      	b.n	800b192 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	4413      	add	r3, r2
 800b18c:	2200      	movs	r2, #0
 800b18e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b190:	2301      	movs	r3, #1
}
 800b192:	4618      	mov	r0, r3
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	08018820 	.word	0x08018820

0800b1a0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	71fb      	strb	r3, [r7, #7]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	330d      	adds	r3, #13
 800b1ba:	79ba      	ldrb	r2, [r7, #6]
 800b1bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	330b      	adds	r3, #11
 800b1c2:	220f      	movs	r2, #15
 800b1c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	330c      	adds	r3, #12
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	331a      	adds	r3, #26
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe fb3f 	bl	8009858 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b1da:	79fb      	ldrb	r3, [r7, #7]
 800b1dc:	1e5a      	subs	r2, r3, #1
 800b1de:	4613      	mov	r3, r2
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	4413      	add	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	82fb      	strh	r3, [r7, #22]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b1f2:	8afb      	ldrh	r3, [r7, #22]
 800b1f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d007      	beq.n	800b20c <put_lfn+0x6c>
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	1c5a      	adds	r2, r3, #1
 800b200:	61fa      	str	r2, [r7, #28]
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b20c:	4a17      	ldr	r2, [pc, #92]	@ (800b26c <put_lfn+0xcc>)
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	4413      	add	r3, r2
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	461a      	mov	r2, r3
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	4413      	add	r3, r2
 800b21a:	8afa      	ldrh	r2, [r7, #22]
 800b21c:	4611      	mov	r1, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fe fb1a 	bl	8009858 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b224:	8afb      	ldrh	r3, [r7, #22]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <put_lfn+0x90>
 800b22a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b22e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	3301      	adds	r3, #1
 800b234:	61bb      	str	r3, [r7, #24]
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	2b0c      	cmp	r3, #12
 800b23a:	d9da      	bls.n	800b1f2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b23c:	8afb      	ldrh	r3, [r7, #22]
 800b23e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b242:	4293      	cmp	r3, r2
 800b244:	d006      	beq.n	800b254 <put_lfn+0xb4>
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4413      	add	r3, r2
 800b24e:	881b      	ldrh	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d103      	bne.n	800b25c <put_lfn+0xbc>
 800b254:	79fb      	ldrb	r3, [r7, #7]
 800b256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b25a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	79fa      	ldrb	r2, [r7, #7]
 800b260:	701a      	strb	r2, [r3, #0]
}
 800b262:	bf00      	nop
 800b264:	3720      	adds	r7, #32
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	08018820 	.word	0x08018820

0800b270 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b08c      	sub	sp, #48	@ 0x30
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b27e:	220b      	movs	r2, #11
 800b280:	68b9      	ldr	r1, [r7, #8]
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7fe fbb7 	bl	80099f6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2b05      	cmp	r3, #5
 800b28c:	d92b      	bls.n	800b2e6 <gen_numname+0x76>
		sr = seq;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b292:	e022      	b.n	800b2da <gen_numname+0x6a>
			wc = *lfn++;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	1c9a      	adds	r2, r3, #2
 800b298:	607a      	str	r2, [r7, #4]
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b29e:	2300      	movs	r3, #0
 800b2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2a2:	e017      	b.n	800b2d4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	005a      	lsls	r2, r3, #1
 800b2a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2aa:	f003 0301 	and.w	r3, r3, #1
 800b2ae:	4413      	add	r3, r2
 800b2b0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b2b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2b4:	085b      	lsrs	r3, r3, #1
 800b2b6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <gen_numname+0x5e>
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b2c8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b2cc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d6:	2b0f      	cmp	r3, #15
 800b2d8:	d9e4      	bls.n	800b2a4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1d8      	bne.n	800b294 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b2e6:	2307      	movs	r3, #7
 800b2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	f003 030f 	and.w	r3, r3, #15
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	3330      	adds	r3, #48	@ 0x30
 800b2f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b2fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2fe:	2b39      	cmp	r3, #57	@ 0x39
 800b300:	d904      	bls.n	800b30c <gen_numname+0x9c>
 800b302:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b306:	3307      	adds	r3, #7
 800b308:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30e:	1e5a      	subs	r2, r3, #1
 800b310:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b312:	3330      	adds	r3, #48	@ 0x30
 800b314:	443b      	add	r3, r7
 800b316:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b31a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	091b      	lsrs	r3, r3, #4
 800b322:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1df      	bne.n	800b2ea <gen_numname+0x7a>
	ns[i] = '~';
 800b32a:	f107 0214 	add.w	r2, r7, #20
 800b32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b330:	4413      	add	r3, r2
 800b332:	227e      	movs	r2, #126	@ 0x7e
 800b334:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b336:	2300      	movs	r3, #0
 800b338:	627b      	str	r3, [r7, #36]	@ 0x24
 800b33a:	e002      	b.n	800b342 <gen_numname+0xd2>
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	3301      	adds	r3, #1
 800b340:	627b      	str	r3, [r7, #36]	@ 0x24
 800b342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b346:	429a      	cmp	r2, r3
 800b348:	d205      	bcs.n	800b356 <gen_numname+0xe6>
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34e:	4413      	add	r3, r2
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b20      	cmp	r3, #32
 800b354:	d1f2      	bne.n	800b33c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b358:	2b07      	cmp	r3, #7
 800b35a:	d807      	bhi.n	800b36c <gen_numname+0xfc>
 800b35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35e:	1c5a      	adds	r2, r3, #1
 800b360:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b362:	3330      	adds	r3, #48	@ 0x30
 800b364:	443b      	add	r3, r7
 800b366:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b36a:	e000      	b.n	800b36e <gen_numname+0xfe>
 800b36c:	2120      	movs	r1, #32
 800b36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b370:	1c5a      	adds	r2, r3, #1
 800b372:	627a      	str	r2, [r7, #36]	@ 0x24
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	4413      	add	r3, r2
 800b378:	460a      	mov	r2, r1
 800b37a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37e:	2b07      	cmp	r3, #7
 800b380:	d9e9      	bls.n	800b356 <gen_numname+0xe6>
}
 800b382:	bf00      	nop
 800b384:	bf00      	nop
 800b386:	3730      	adds	r7, #48	@ 0x30
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b398:	230b      	movs	r3, #11
 800b39a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	0852      	lsrs	r2, r2, #1
 800b3a2:	01db      	lsls	r3, r3, #7
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	1c59      	adds	r1, r3, #1
 800b3ac:	6079      	str	r1, [r7, #4]
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	60bb      	str	r3, [r7, #8]
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1ed      	bne.n	800b39c <sum_sfn+0x10>
	return sum;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b087      	sub	sp, #28
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	015b      	lsls	r3, r3, #5
 800b3e0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	827b      	strh	r3, [r7, #18]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	617b      	str	r3, [r7, #20]
 800b3ea:	e017      	b.n	800b41c <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d103      	bne.n	800b3fa <xdir_sum+0x2c>
			i++;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	617b      	str	r3, [r7, #20]
 800b3f8:	e00d      	b.n	800b416 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b3fa:	8a7b      	ldrh	r3, [r7, #18]
 800b3fc:	03db      	lsls	r3, r3, #15
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	8a7b      	ldrh	r3, [r7, #18]
 800b402:	085b      	lsrs	r3, r3, #1
 800b404:	b29b      	uxth	r3, r3
 800b406:	4413      	add	r3, r2
 800b408:	b29b      	uxth	r3, r3
 800b40a:	6879      	ldr	r1, [r7, #4]
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	440a      	add	r2, r1
 800b410:	7812      	ldrb	r2, [r2, #0]
 800b412:	4413      	add	r3, r2
 800b414:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	3301      	adds	r3, #1
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	429a      	cmp	r2, r3
 800b422:	d3e3      	bcc.n	800b3ec <xdir_sum+0x1e>
		}
	}
	return sum;
 800b424:	8a7b      	ldrh	r3, [r7, #18]
}
 800b426:	4618      	mov	r0, r3
 800b428:	371c      	adds	r7, #28
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800b43e:	e01f      	b.n	800b480 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b440:	89bb      	ldrh	r3, [r7, #12]
 800b442:	4618      	mov	r0, r3
 800b444:	f003 fd46 	bl	800eed4 <ff_wtoupper>
 800b448:	4603      	mov	r3, r0
 800b44a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b44c:	89fb      	ldrh	r3, [r7, #14]
 800b44e:	03db      	lsls	r3, r3, #15
 800b450:	b29a      	uxth	r2, r3
 800b452:	89fb      	ldrh	r3, [r7, #14]
 800b454:	085b      	lsrs	r3, r3, #1
 800b456:	b29b      	uxth	r3, r3
 800b458:	4413      	add	r3, r2
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	89bb      	ldrh	r3, [r7, #12]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	b29b      	uxth	r3, r3
 800b462:	4413      	add	r3, r2
 800b464:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b466:	89fb      	ldrh	r3, [r7, #14]
 800b468:	03db      	lsls	r3, r3, #15
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	89fb      	ldrh	r3, [r7, #14]
 800b46e:	085b      	lsrs	r3, r3, #1
 800b470:	b29b      	uxth	r3, r3
 800b472:	4413      	add	r3, r2
 800b474:	b29a      	uxth	r2, r3
 800b476:	89bb      	ldrh	r3, [r7, #12]
 800b478:	0a1b      	lsrs	r3, r3, #8
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	4413      	add	r3, r2
 800b47e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	1c9a      	adds	r2, r3, #2
 800b484:	607a      	str	r2, [r7, #4]
 800b486:	881b      	ldrh	r3, [r3, #0]
 800b488:	81bb      	strh	r3, [r7, #12]
 800b48a:	89bb      	ldrh	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1d7      	bne.n	800b440 <xname_sum+0xe>
	}
	return sum;
 800b490:	89fb      	ldrh	r3, [r7, #14]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b086      	sub	sp, #24
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	6078      	str	r0, [r7, #4]
 800b4a2:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b4a8:	2340      	movs	r3, #64	@ 0x40
 800b4aa:	613b      	str	r3, [r7, #16]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	e02c      	b.n	800b50c <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f003 031f 	and.w	r3, r3, #31
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <get_xdir_info+0x28>
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	3302      	adds	r3, #2
 800b4c0:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe f8af 	bl	800962c <ld_word>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f003 fcc2 	bl	800ee5c <ff_convert>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800b4dc:	897b      	ldrh	r3, [r7, #10]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <get_xdir_info+0x4e>
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	2bfe      	cmp	r3, #254	@ 0xfe
 800b4e6:	d902      	bls.n	800b4ee <get_xdir_info+0x54>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	e015      	b.n	800b51a <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	617a      	str	r2, [r7, #20]
 800b4f4:	897a      	ldrh	r2, [r7, #10]
 800b4f6:	b2d1      	uxtb	r1, r2
 800b4f8:	683a      	ldr	r2, [r7, #0]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	460a      	mov	r2, r1
 800b4fe:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	3302      	adds	r3, #2
 800b504:	613b      	str	r3, [r7, #16]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3301      	adds	r3, #1
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	3323      	adds	r3, #35	@ 0x23
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	461a      	mov	r2, r3
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4293      	cmp	r3, r2
 800b518:	d3cb      	bcc.n	800b4b2 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d106      	bne.n	800b52e <get_xdir_info+0x94>
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	617a      	str	r2, [r7, #20]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	4413      	add	r3, r2
 800b52a:	223f      	movs	r2, #63	@ 0x3f
 800b52c:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	4413      	add	r3, r2
 800b534:	331a      	adds	r3, #26
 800b536:	2200      	movs	r2, #0
 800b538:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2200      	movs	r2, #0
 800b53e:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	791a      	ldrb	r2, [r3, #4]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	7b1b      	ldrb	r3, [r3, #12]
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	2b00      	cmp	r3, #0
 800b552:	d107      	bne.n	800b564 <get_xdir_info+0xca>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	3338      	adds	r3, #56	@ 0x38
 800b558:	4618      	mov	r0, r3
 800b55a:	f7fe f8a2 	bl	80096a2 <ld_qword>
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	e003      	b.n	800b56c <get_xdir_info+0xd2>
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	6839      	ldr	r1, [r7, #0]
 800b56e:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	330c      	adds	r3, #12
 800b576:	4618      	mov	r0, r3
 800b578:	f7fe f858 	bl	800962c <ld_word>
 800b57c:	4603      	mov	r3, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	330e      	adds	r3, #14
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe f84f 	bl	800962c <ld_word>
 800b58e:	4603      	mov	r3, r0
 800b590:	461a      	mov	r2, r3
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	811a      	strh	r2, [r3, #8]
}
 800b596:	bf00      	nop
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
	...

0800b5a0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800b5a0:	b590      	push	{r4, r7, lr}
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	f7fe fc7a 	bl	8009eb4 <move_window>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <load_xdir+0x2e>
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	e09f      	b.n	800b70e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	2b85      	cmp	r3, #133	@ 0x85
 800b5d6:	d001      	beq.n	800b5dc <load_xdir+0x3c>
 800b5d8:	2302      	movs	r3, #2
 800b5da:	e098      	b.n	800b70e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6938      	ldr	r0, [r7, #16]
 800b5e6:	f7fe fa06 	bl	80099f6 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	015b      	lsls	r3, r3, #5
 800b5f4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b5f      	cmp	r3, #95	@ 0x5f
 800b5fa:	d903      	bls.n	800b604 <load_xdir+0x64>
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b602:	d901      	bls.n	800b608 <load_xdir+0x68>
 800b604:	2302      	movs	r3, #2
 800b606:	e082      	b.n	800b70e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800b608:	2100      	movs	r1, #0
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fb73 	bl	800acf6 <dir_next>
 800b610:	4603      	mov	r3, r0
 800b612:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d001      	beq.n	800b61e <load_xdir+0x7e>
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	e077      	b.n	800b70e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f7fe fc43 	bl	8009eb4 <move_window>
 800b62e:	4603      	mov	r3, r0
 800b630:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <load_xdir+0x9c>
 800b638:	7bfb      	ldrb	r3, [r7, #15]
 800b63a:	e068      	b.n	800b70e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	2bc0      	cmp	r3, #192	@ 0xc0
 800b644:	d001      	beq.n	800b64a <load_xdir+0xaa>
 800b646:	2302      	movs	r3, #2
 800b648:	e061      	b.n	800b70e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f103 0020 	add.w	r0, r3, #32
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b654:	2220      	movs	r2, #32
 800b656:	4619      	mov	r1, r3
 800b658:	f7fe f9cd 	bl	80099f6 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	3323      	adds	r3, #35	@ 0x23
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	332c      	adds	r3, #44	@ 0x2c
 800b664:	4a2c      	ldr	r2, [pc, #176]	@ (800b718 <load_xdir+0x178>)
 800b666:	fba2 2303 	umull	r2, r3, r2, r3
 800b66a:	08db      	lsrs	r3, r3, #3
 800b66c:	015b      	lsls	r3, r3, #5
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	429a      	cmp	r2, r3
 800b672:	d201      	bcs.n	800b678 <load_xdir+0xd8>
 800b674:	2302      	movs	r3, #2
 800b676:	e04a      	b.n	800b70e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800b678:	2340      	movs	r3, #64	@ 0x40
 800b67a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800b67c:	2100      	movs	r1, #0
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff fb39 	bl	800acf6 <dir_next>
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d001      	beq.n	800b692 <load_xdir+0xf2>
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
 800b690:	e03d      	b.n	800b70e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7fe fc09 	bl	8009eb4 <move_window>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <load_xdir+0x110>
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
 800b6ae:	e02e      	b.n	800b70e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	2bc1      	cmp	r3, #193	@ 0xc1
 800b6b8:	d001      	beq.n	800b6be <load_xdir+0x11e>
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e027      	b.n	800b70e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b6c4:	d208      	bcs.n	800b6d8 <load_xdir+0x138>
 800b6c6:	693a      	ldr	r2, [r7, #16]
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	18d0      	adds	r0, r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	f7fe f98f 	bl	80099f6 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	3320      	adds	r3, #32
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d3ca      	bcc.n	800b67c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b6ec:	d80e      	bhi.n	800b70c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b6ee:	6938      	ldr	r0, [r7, #16]
 800b6f0:	f7ff fe6d 	bl	800b3ce <xdir_sum>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	461c      	mov	r4, r3
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	3302      	adds	r3, #2
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fd ff95 	bl	800962c <ld_word>
 800b702:	4603      	mov	r3, r0
 800b704:	429c      	cmp	r4, r3
 800b706:	d001      	beq.n	800b70c <load_xdir+0x16c>
 800b708:	2302      	movs	r3, #2
 800b70a:	e000      	b.n	800b70e <load_xdir+0x16e>
	}
	return FR_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	371c      	adds	r7, #28
 800b712:	46bd      	mov	sp, r7
 800b714:	bd90      	pop	{r4, r7, pc}
 800b716:	bf00      	nop
 800b718:	88888889 	.word	0x88888889

0800b71c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800b71c:	b5b0      	push	{r4, r5, r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6808      	ldr	r0, [r1, #0]
 800b72a:	6879      	ldr	r1, [r7, #4]
 800b72c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800b72e:	6839      	ldr	r1, [r7, #0]
 800b730:	6a08      	ldr	r0, [r1, #32]
 800b732:	6879      	ldr	r1, [r7, #4]
 800b734:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800b73a:	b2c8      	uxtb	r0, r1
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800b740:	6839      	ldr	r1, [r7, #0]
 800b742:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800b744:	2000      	movs	r0, #0
 800b746:	460c      	mov	r4, r1
 800b748:	4605      	mov	r5, r0
 800b74a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800b74e:	2300      	movs	r3, #0
 800b750:	6879      	ldr	r1, [r7, #4]
 800b752:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b762:	4619      	mov	r1, r3
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff fa32 	bl	800abce <dir_sdi>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d104      	bne.n	800b77e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7ff ff13 	bl	800b5a0 <load_xdir>
 800b77a:	4603      	mov	r3, r0
 800b77c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800b77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bdb0      	pop	{r4, r5, r7, pc}

0800b788 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	1c9c      	adds	r4, r3, #2
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7ff fe16 	bl	800b3ce <xdir_sum>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f7fe f856 	bl	8009858 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff fa06 	bl	800abce <dir_sdi>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b7c6:	e026      	b.n	800b816 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	f7fe fb6e 	bl	8009eb4 <move_window>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d11d      	bne.n	800b81e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7e6:	2220      	movs	r2, #32
 800b7e8:	68f9      	ldr	r1, [r7, #12]
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe f903 	bl	80099f6 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	613b      	str	r3, [r7, #16]
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00e      	beq.n	800b822 <store_xdir+0x9a>
		dirb += SZDIRE;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3320      	adds	r3, #32
 800b808:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800b80a:	2100      	movs	r1, #0
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7ff fa72 	bl	800acf6 <dir_next>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d0d5      	beq.n	800b7c8 <store_xdir+0x40>
 800b81c:	e002      	b.n	800b824 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800b81e:	bf00      	nop
 800b820:	e000      	b.n	800b824 <store_xdir+0x9c>
		if (--nent == 0) break;
 800b822:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800b824:	7dfb      	ldrb	r3, [r7, #23]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d002      	beq.n	800b830 <store_xdir+0xa8>
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d101      	bne.n	800b834 <store_xdir+0xac>
 800b830:	7dfb      	ldrb	r3, [r7, #23]
 800b832:	e000      	b.n	800b836 <store_xdir+0xae>
 800b834:	2302      	movs	r3, #2
}
 800b836:	4618      	mov	r0, r3
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd90      	pop	{r4, r7, pc}

0800b83e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800b83e:	b590      	push	{r4, r7, lr}
 800b840:	b085      	sub	sp, #20
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800b848:	2240      	movs	r2, #64	@ 0x40
 800b84a:	2100      	movs	r1, #0
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7fe f8f3 	bl	8009a38 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2285      	movs	r2, #133	@ 0x85
 800b856:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3320      	adds	r3, #32
 800b85c:	22c0      	movs	r2, #192	@ 0xc0
 800b85e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800b860:	2300      	movs	r3, #0
 800b862:	72bb      	strb	r3, [r7, #10]
 800b864:	2301      	movs	r3, #1
 800b866:	72fb      	strb	r3, [r7, #11]
 800b868:	2301      	movs	r3, #1
 800b86a:	813b      	strh	r3, [r7, #8]
 800b86c:	2340      	movs	r3, #64	@ 0x40
 800b86e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	60fa      	str	r2, [r7, #12]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	4413      	add	r3, r2
 800b87a:	22c1      	movs	r2, #193	@ 0xc1
 800b87c:	701a      	strb	r2, [r3, #0]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	60fa      	str	r2, [r7, #12]
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	4413      	add	r3, r2
 800b888:	2200      	movs	r2, #0
 800b88a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800b88c:	893b      	ldrh	r3, [r7, #8]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00b      	beq.n	800b8aa <create_xdir+0x6c>
 800b892:	7abb      	ldrb	r3, [r7, #10]
 800b894:	005b      	lsls	r3, r3, #1
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	4413      	add	r3, r2
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	813b      	strh	r3, [r7, #8]
 800b89e:	893b      	ldrh	r3, [r7, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d002      	beq.n	800b8aa <create_xdir+0x6c>
 800b8a4:	7abb      	ldrb	r3, [r7, #10]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	893a      	ldrh	r2, [r7, #8]
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fd ffcf 	bl	8009858 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3302      	adds	r3, #2
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f003 031f 	and.w	r3, r3, #31
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e0      	bne.n	800b88c <create_xdir+0x4e>
		nb++;
 800b8ca:	7afb      	ldrb	r3, [r7, #11]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800b8d0:	7abb      	ldrb	r3, [r7, #10]
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	683a      	ldr	r2, [r7, #0]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	881b      	ldrh	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1c8      	bne.n	800b870 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3323      	adds	r3, #35	@ 0x23
 800b8e2:	7aba      	ldrb	r2, [r7, #10]
 800b8e4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	7afa      	ldrb	r2, [r7, #11]
 800b8ec:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800b8f4:	6838      	ldr	r0, [r7, #0]
 800b8f6:	f7ff fd9c 	bl	800b432 <xname_sum>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4620      	mov	r0, r4
 800b900:	f7fd ffaa 	bl	8009858 <st_word>
}
 800b904:	bf00      	nop
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd90      	pop	{r4, r7, pc}

0800b90c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b916:	2304      	movs	r3, #4
 800b918:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b920:	23ff      	movs	r3, #255	@ 0xff
 800b922:	757b      	strb	r3, [r7, #21]
 800b924:	23ff      	movs	r3, #255	@ 0xff
 800b926:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b928:	e09f      	b.n	800ba6a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b92e:	4619      	mov	r1, r3
 800b930:	6938      	ldr	r0, [r7, #16]
 800b932:	f7fe fabf 	bl	8009eb4 <move_window>
 800b936:	4603      	mov	r3, r0
 800b938:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f040 809a 	bne.w	800ba76 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b94a:	7dbb      	ldrb	r3, [r7, #22]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d102      	bne.n	800b956 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b950:	2304      	movs	r3, #4
 800b952:	75fb      	strb	r3, [r7, #23]
 800b954:	e096      	b.n	800ba84 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b04      	cmp	r3, #4
 800b95c:	d118      	bne.n	800b990 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800b95e:	7dbb      	ldrb	r3, [r7, #22]
 800b960:	2b85      	cmp	r3, #133	@ 0x85
 800b962:	d179      	bne.n	800ba58 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f7ff fe17 	bl	800b5a0 <load_xdir>
 800b972:	4603      	mov	r3, r0
 800b974:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800b976:	7dfb      	ldrb	r3, [r7, #23]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d17e      	bne.n	800ba7a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	695b      	ldr	r3, [r3, #20]
 800b980:	3304      	adds	r3, #4
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800b98e:	e074      	b.n	800ba7a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b994:	330b      	adds	r3, #11
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b99c:	73fb      	strb	r3, [r7, #15]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	7bfa      	ldrb	r2, [r7, #15]
 800b9a2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b9a4:	7dbb      	ldrb	r3, [r7, #22]
 800b9a6:	2be5      	cmp	r3, #229	@ 0xe5
 800b9a8:	d00e      	beq.n	800b9c8 <dir_read+0xbc>
 800b9aa:	7dbb      	ldrb	r3, [r7, #22]
 800b9ac:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9ae:	d00b      	beq.n	800b9c8 <dir_read+0xbc>
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	f023 0320 	bic.w	r3, r3, #32
 800b9b6:	2b08      	cmp	r3, #8
 800b9b8:	bf0c      	ite	eq
 800b9ba:	2301      	moveq	r3, #1
 800b9bc:	2300      	movne	r3, #0
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d002      	beq.n	800b9ce <dir_read+0xc2>
				ord = 0xFF;
 800b9c8:	23ff      	movs	r3, #255	@ 0xff
 800b9ca:	757b      	strb	r3, [r7, #21]
 800b9cc:	e044      	b.n	800ba58 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	2b0f      	cmp	r3, #15
 800b9d2:	d12f      	bne.n	800ba34 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b9d4:	7dbb      	ldrb	r3, [r7, #22]
 800b9d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00d      	beq.n	800b9fa <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9e2:	7b5b      	ldrb	r3, [r3, #13]
 800b9e4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b9e6:	7dbb      	ldrb	r3, [r7, #22]
 800b9e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9ec:	75bb      	strb	r3, [r7, #22]
 800b9ee:	7dbb      	ldrb	r3, [r7, #22]
 800b9f0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9fa:	7dba      	ldrb	r2, [r7, #22]
 800b9fc:	7d7b      	ldrb	r3, [r7, #21]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d115      	bne.n	800ba2e <dir_read+0x122>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba06:	330d      	adds	r3, #13
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	7d3a      	ldrb	r2, [r7, #20]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d10e      	bne.n	800ba2e <dir_read+0x122>
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	691a      	ldr	r2, [r3, #16]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba18:	4619      	mov	r1, r3
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	f7ff fb5c 	bl	800b0d8 <pick_lfn>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d003      	beq.n	800ba2e <dir_read+0x122>
 800ba26:	7d7b      	ldrb	r3, [r7, #21]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	e000      	b.n	800ba30 <dir_read+0x124>
 800ba2e:	23ff      	movs	r3, #255	@ 0xff
 800ba30:	757b      	strb	r3, [r7, #21]
 800ba32:	e011      	b.n	800ba58 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ba34:	7d7b      	ldrb	r3, [r7, #21]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d109      	bne.n	800ba4e <dir_read+0x142>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff fca4 	bl	800b38c <sum_sfn>
 800ba44:	4603      	mov	r3, r0
 800ba46:	461a      	mov	r2, r3
 800ba48:	7d3b      	ldrb	r3, [r7, #20]
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d017      	beq.n	800ba7e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f04f 32ff 	mov.w	r2, #4294967295
 800ba54:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800ba56:	e012      	b.n	800ba7e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff f94b 	bl	800acf6 <dir_next>
 800ba60:	4603      	mov	r3, r0
 800ba62:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba64:	7dfb      	ldrb	r3, [r7, #23]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10b      	bne.n	800ba82 <dir_read+0x176>
	while (dp->sect) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f47f af5b 	bne.w	800b92a <dir_read+0x1e>
 800ba74:	e006      	b.n	800ba84 <dir_read+0x178>
		if (res != FR_OK) break;
 800ba76:	bf00      	nop
 800ba78:	e004      	b.n	800ba84 <dir_read+0x178>
					break;
 800ba7a:	bf00      	nop
 800ba7c:	e002      	b.n	800ba84 <dir_read+0x178>
					break;
 800ba7e:	bf00      	nop
 800ba80:	e000      	b.n	800ba84 <dir_read+0x178>
		if (res != FR_OK) break;
 800ba82:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d002      	beq.n	800ba90 <dir_read+0x184>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800ba90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3718      	adds	r7, #24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ba9a:	b590      	push	{r4, r7, lr}
 800ba9c:	b089      	sub	sp, #36	@ 0x24
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800baa8:	2100      	movs	r1, #0
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff f88f 	bl	800abce <dir_sdi>
 800bab0:	4603      	mov	r3, r0
 800bab2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800bab4:	7ffb      	ldrb	r3, [r7, #31]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <dir_find+0x24>
 800baba:	7ffb      	ldrb	r3, [r7, #31]
 800babc:	e113      	b.n	800bce6 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	2b04      	cmp	r3, #4
 800bac4:	d165      	bne.n	800bb92 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7ff fcb1 	bl	800b432 <xname_sum>
 800bad0:	4603      	mov	r3, r0
 800bad2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bad4:	e050      	b.n	800bb78 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	3324      	adds	r3, #36	@ 0x24
 800badc:	4618      	mov	r0, r3
 800bade:	f7fd fda5 	bl	800962c <ld_word>
 800bae2:	4603      	mov	r3, r0
 800bae4:	461a      	mov	r2, r3
 800bae6:	893b      	ldrh	r3, [r7, #8]
 800bae8:	4293      	cmp	r3, r2
 800baea:	d144      	bne.n	800bb76 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	695b      	ldr	r3, [r3, #20]
 800baf0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800baf4:	76fb      	strb	r3, [r7, #27]
 800baf6:	2340      	movs	r3, #64	@ 0x40
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	2300      	movs	r3, #0
 800bafc:	613b      	str	r3, [r7, #16]
 800bafe:	e029      	b.n	800bb54 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	f003 031f 	and.w	r3, r3, #31
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d102      	bne.n	800bb10 <dir_find+0x76>
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	3302      	adds	r3, #2
 800bb0e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	695a      	ldr	r2, [r3, #20]
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	4413      	add	r3, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fd fd87 	bl	800962c <ld_word>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4618      	mov	r0, r3
 800bb22:	f003 f9d7 	bl	800eed4 <ff_wtoupper>
 800bb26:	4603      	mov	r3, r0
 800bb28:	461c      	mov	r4, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	691a      	ldr	r2, [r3, #16]
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	005b      	lsls	r3, r3, #1
 800bb32:	4413      	add	r3, r2
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f003 f9cc 	bl	800eed4 <ff_wtoupper>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	429c      	cmp	r4, r3
 800bb40:	d10c      	bne.n	800bb5c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bb42:	7efb      	ldrb	r3, [r7, #27]
 800bb44:	3b01      	subs	r3, #1
 800bb46:	76fb      	strb	r3, [r7, #27]
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	3302      	adds	r3, #2
 800bb4c:	617b      	str	r3, [r7, #20]
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	3301      	adds	r3, #1
 800bb52:	613b      	str	r3, [r7, #16]
 800bb54:	7efb      	ldrb	r3, [r7, #27]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1d2      	bne.n	800bb00 <dir_find+0x66>
 800bb5a:	e000      	b.n	800bb5e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bb5c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bb5e:	7efb      	ldrb	r3, [r7, #27]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d109      	bne.n	800bb78 <dir_find+0xde>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	691a      	ldr	r2, [r3, #16]
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	005b      	lsls	r3, r3, #1
 800bb6c:	4413      	add	r3, r2
 800bb6e:	881b      	ldrh	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00b      	beq.n	800bb8c <dir_find+0xf2>
 800bb74:	e000      	b.n	800bb78 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bb76:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bb78:	2100      	movs	r1, #0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff fec6 	bl	800b90c <dir_read>
 800bb80:	4603      	mov	r3, r0
 800bb82:	77fb      	strb	r3, [r7, #31]
 800bb84:	7ffb      	ldrb	r3, [r7, #31]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0a5      	beq.n	800bad6 <dir_find+0x3c>
 800bb8a:	e000      	b.n	800bb8e <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bb8c:	bf00      	nop
		}
		return res;
 800bb8e:	7ffb      	ldrb	r3, [r7, #31]
 800bb90:	e0a9      	b.n	800bce6 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb92:	23ff      	movs	r3, #255	@ 0xff
 800bb94:	773b      	strb	r3, [r7, #28]
 800bb96:	7f3b      	ldrb	r3, [r7, #28]
 800bb98:	777b      	strb	r3, [r7, #29]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bba0:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba6:	4619      	mov	r1, r3
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f7fe f983 	bl	8009eb4 <move_window>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800bbb2:	7ffb      	ldrb	r3, [r7, #31]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f040 8090 	bne.w	800bcda <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbc2:	7fbb      	ldrb	r3, [r7, #30]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d102      	bne.n	800bbce <dir_find+0x134>
 800bbc8:	2304      	movs	r3, #4
 800bbca:	77fb      	strb	r3, [r7, #31]
 800bbcc:	e08a      	b.n	800bce4 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd2:	330b      	adds	r3, #11
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbda:	72fb      	strb	r3, [r7, #11]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7afa      	ldrb	r2, [r7, #11]
 800bbe0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bbe2:	7fbb      	ldrb	r3, [r7, #30]
 800bbe4:	2be5      	cmp	r3, #229	@ 0xe5
 800bbe6:	d007      	beq.n	800bbf8 <dir_find+0x15e>
 800bbe8:	7afb      	ldrb	r3, [r7, #11]
 800bbea:	f003 0308 	and.w	r3, r3, #8
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <dir_find+0x16c>
 800bbf2:	7afb      	ldrb	r3, [r7, #11]
 800bbf4:	2b0f      	cmp	r3, #15
 800bbf6:	d006      	beq.n	800bc06 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bbf8:	23ff      	movs	r3, #255	@ 0xff
 800bbfa:	777b      	strb	r3, [r7, #29]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f04f 32ff 	mov.w	r2, #4294967295
 800bc02:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bc04:	e05e      	b.n	800bcc4 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	2b0f      	cmp	r3, #15
 800bc0a:	d136      	bne.n	800bc7a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bc12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d154      	bne.n	800bcc4 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bc1a:	7fbb      	ldrb	r3, [r7, #30]
 800bc1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00d      	beq.n	800bc40 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc28:	7b5b      	ldrb	r3, [r3, #13]
 800bc2a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bc2c:	7fbb      	ldrb	r3, [r7, #30]
 800bc2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc32:	77bb      	strb	r3, [r7, #30]
 800bc34:	7fbb      	ldrb	r3, [r7, #30]
 800bc36:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bc40:	7fba      	ldrb	r2, [r7, #30]
 800bc42:	7f7b      	ldrb	r3, [r7, #29]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d115      	bne.n	800bc74 <dir_find+0x1da>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc4c:	330d      	adds	r3, #13
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	7f3a      	ldrb	r2, [r7, #28]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d10e      	bne.n	800bc74 <dir_find+0x1da>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	691a      	ldr	r2, [r3, #16]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc5e:	4619      	mov	r1, r3
 800bc60:	4610      	mov	r0, r2
 800bc62:	f7ff f9c9 	bl	800aff8 <cmp_lfn>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d003      	beq.n	800bc74 <dir_find+0x1da>
 800bc6c:	7f7b      	ldrb	r3, [r7, #29]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	e000      	b.n	800bc76 <dir_find+0x1dc>
 800bc74:	23ff      	movs	r3, #255	@ 0xff
 800bc76:	777b      	strb	r3, [r7, #29]
 800bc78:	e024      	b.n	800bcc4 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bc7a:	7f7b      	ldrb	r3, [r7, #29]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d109      	bne.n	800bc94 <dir_find+0x1fa>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff fb81 	bl	800b38c <sum_sfn>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	7f3b      	ldrb	r3, [r7, #28]
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d024      	beq.n	800bcde <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <dir_find+0x21e>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3340      	adds	r3, #64	@ 0x40
 800bcaa:	220b      	movs	r2, #11
 800bcac:	4619      	mov	r1, r3
 800bcae:	f7fd fede 	bl	8009a6e <mem_cmp>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d014      	beq.n	800bce2 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bcb8:	23ff      	movs	r3, #255	@ 0xff
 800bcba:	777b      	strb	r3, [r7, #29]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc2:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f7ff f815 	bl	800acf6 <dir_next>
 800bccc:	4603      	mov	r3, r0
 800bcce:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800bcd0:	7ffb      	ldrb	r3, [r7, #31]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f43f af65 	beq.w	800bba2 <dir_find+0x108>
 800bcd8:	e004      	b.n	800bce4 <dir_find+0x24a>
		if (res != FR_OK) break;
 800bcda:	bf00      	nop
 800bcdc:	e002      	b.n	800bce4 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bcde:	bf00      	nop
 800bce0:	e000      	b.n	800bce4 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bce2:	bf00      	nop

	return res;
 800bce4:	7ffb      	ldrb	r3, [r7, #31]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3724      	adds	r7, #36	@ 0x24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd90      	pop	{r4, r7, pc}
	...

0800bcf0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bcf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bcf4:	b0a0      	sub	sp, #128	@ 0x80
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bd06:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d001      	beq.n	800bd12 <dir_register+0x22>
 800bd0e:	2306      	movs	r3, #6
 800bd10:	e192      	b.n	800c038 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bd12:	2300      	movs	r3, #0
 800bd14:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd16:	e002      	b.n	800bd1e <dir_register+0x2e>
 800bd18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd20:	691a      	ldr	r2, [r3, #16]
 800bd22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	4413      	add	r3, r2
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1f4      	bne.n	800bd18 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bd2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	2b04      	cmp	r3, #4
 800bd34:	f040 80a3 	bne.w	800be7e <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800bd38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd3a:	330e      	adds	r3, #14
 800bd3c:	4aa4      	ldr	r2, [pc, #656]	@ (800bfd0 <dir_register+0x2e0>)
 800bd3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd42:	08db      	lsrs	r3, r3, #3
 800bd44:	3302      	adds	r3, #2
 800bd46:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800bd48:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff f8b9 	bl	800aec2 <dir_alloc>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800bd56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <dir_register+0x74>
 800bd5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bd62:	e169      	b.n	800c038 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	015b      	lsls	r3, r3, #5
 800bd6e:	1ad2      	subs	r2, r2, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d076      	beq.n	800be6a <dir_register+0x17a>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	79db      	ldrb	r3, [r3, #7]
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d070      	beq.n	800be6a <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bd8e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd90:	8949      	ldrh	r1, [r1, #10]
 800bd92:	4608      	mov	r0, r1
 800bd94:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd96:	8989      	ldrh	r1, [r1, #12]
 800bd98:	fb00 f101 	mul.w	r1, r0, r1
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	4605      	mov	r5, r0
 800bda2:	eb12 0804 	adds.w	r8, r2, r4
 800bda6:	eb43 0905 	adc.w	r9, r3, r5
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fe fcaa 	bl	800a70c <fill_first_frag>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800bdbe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d002      	beq.n	800bdcc <dir_register+0xdc>
 800bdc6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bdca:	e135      	b.n	800c038 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	f7fe fcc7 	bl	800a76a <fill_last_frag>
 800bddc:	4603      	mov	r3, r0
 800bdde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800bde2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <dir_register+0x100>
 800bdea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bdee:	e123      	b.n	800c038 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	f107 0308 	add.w	r3, r7, #8
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fc8f 	bl	800b71c <load_obj_dir>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800be04:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d002      	beq.n	800be12 <dir_register+0x122>
 800be0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be10:	e112      	b.n	800c038 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800be12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be14:	695b      	ldr	r3, [r3, #20]
 800be16:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be20:	4608      	mov	r0, r1
 800be22:	f7fd fd60 	bl	80098e6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800be26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be34:	4608      	mov	r0, r1
 800be36:	f7fd fd56 	bl	80098e6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	79da      	ldrb	r2, [r3, #7]
 800be3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be40:	695b      	ldr	r3, [r3, #20]
 800be42:	3321      	adds	r3, #33	@ 0x21
 800be44:	f042 0201 	orr.w	r2, r2, #1
 800be48:	b2d2      	uxtb	r2, r2
 800be4a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800be4c:	f107 0308 	add.w	r3, r7, #8
 800be50:	4618      	mov	r0, r3
 800be52:	f7ff fc99 	bl	800b788 <store_xdir>
 800be56:	4603      	mov	r3, r0
 800be58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800be5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <dir_register+0x17a>
 800be64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be68:	e0e6      	b.n	800c038 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800be6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be6c:	695a      	ldr	r2, [r3, #20]
 800be6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	4619      	mov	r1, r3
 800be74:	4610      	mov	r0, r2
 800be76:	f7ff fce2 	bl	800b83e <create_xdir>
		return FR_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	e0dc      	b.n	800c038 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800be84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800be88:	220c      	movs	r2, #12
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fd fdb3 	bl	80099f6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800be90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be94:	f003 0301 	and.w	r3, r3, #1
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d033      	beq.n	800bf04 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2240      	movs	r2, #64	@ 0x40
 800bea0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800bea4:	2301      	movs	r3, #1
 800bea6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bea8:	e016      	b.n	800bed8 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800beb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beb2:	691a      	ldr	r2, [r3, #16]
 800beb4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800beb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800beba:	f7ff f9d9 	bl	800b270 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fdeb 	bl	800ba9a <dir_find>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800beca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800bed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bed4:	3301      	adds	r3, #1
 800bed6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800beda:	2b63      	cmp	r3, #99	@ 0x63
 800bedc:	d9e5      	bls.n	800beaa <dir_register+0x1ba>
 800bede:	e000      	b.n	800bee2 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800bee0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bee4:	2b64      	cmp	r3, #100	@ 0x64
 800bee6:	d101      	bne.n	800beec <dir_register+0x1fc>
 800bee8:	2307      	movs	r3, #7
 800beea:	e0a5      	b.n	800c038 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800beec:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bef0:	2b04      	cmp	r3, #4
 800bef2:	d002      	beq.n	800befa <dir_register+0x20a>
 800bef4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bef8:	e09e      	b.n	800c038 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800befa:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bf04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf08:	f003 0302 	and.w	r3, r3, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d007      	beq.n	800bf20 <dir_register+0x230>
 800bf10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf12:	330c      	adds	r3, #12
 800bf14:	4a2f      	ldr	r2, [pc, #188]	@ (800bfd4 <dir_register+0x2e4>)
 800bf16:	fba2 2303 	umull	r2, r3, r2, r3
 800bf1a:	089b      	lsrs	r3, r3, #2
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	e000      	b.n	800bf22 <dir_register+0x232>
 800bf20:	2301      	movs	r3, #1
 800bf22:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bf24:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7fe ffcb 	bl	800aec2 <dir_alloc>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bf32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d14f      	bne.n	800bfda <dir_register+0x2ea>
 800bf3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d049      	beq.n	800bfda <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf4c:	015b      	lsls	r3, r3, #5
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	4619      	mov	r1, r3
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7fe fe3b 	bl	800abce <dir_sdi>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800bf5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d139      	bne.n	800bfda <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3340      	adds	r3, #64	@ 0x40
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7ff fa0e 	bl	800b38c <sum_sfn>
 800bf70:	4603      	mov	r3, r0
 800bf72:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf7e:	f7fd ff99 	bl	8009eb4 <move_window>
 800bf82:	4603      	mov	r3, r0
 800bf84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800bf88:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d123      	bne.n	800bfd8 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bf90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf92:	6918      	ldr	r0, [r3, #16]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800bf98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800bfa0:	f7ff f8fe 	bl	800b1a0 <put_lfn>
				fs->wflag = 1;
 800bfa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bfaa:	2100      	movs	r1, #0
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7fe fea2 	bl	800acf6 <dir_next>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800bfb8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10c      	bne.n	800bfda <dir_register+0x2ea>
 800bfc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1d4      	bne.n	800bf76 <dir_register+0x286>
 800bfcc:	e005      	b.n	800bfda <dir_register+0x2ea>
 800bfce:	bf00      	nop
 800bfd0:	88888889 	.word	0x88888889
 800bfd4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800bfd8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bfda:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d128      	bne.n	800c034 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bfea:	f7fd ff63 	bl	8009eb4 <move_window>
 800bfee:	4603      	mov	r3, r0
 800bff0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800bff4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d11b      	bne.n	800c034 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c000:	2220      	movs	r2, #32
 800c002:	2100      	movs	r1, #0
 800c004:	4618      	mov	r0, r3
 800c006:	f7fd fd17 	bl	8009a38 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	3340      	adds	r3, #64	@ 0x40
 800c012:	220b      	movs	r2, #11
 800c014:	4619      	mov	r1, r3
 800c016:	f7fd fcee 	bl	80099f6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c024:	330c      	adds	r3, #12
 800c026:	f002 0218 	and.w	r2, r2, #24
 800c02a:	b2d2      	uxtb	r2, r2
 800c02c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c02e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c030:	2201      	movs	r2, #1
 800c032:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c034:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3780      	adds	r7, #128	@ 0x80
 800c03c:	46bd      	mov	sp, r7
 800c03e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c042:	bf00      	nop

0800c044 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c056:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c060:	d007      	beq.n	800c072 <dir_remove+0x2e>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7fe fdb0 	bl	800abce <dir_sdi>
 800c06e:	4603      	mov	r3, r0
 800c070:	e000      	b.n	800c074 <dir_remove+0x30>
 800c072:	2300      	movs	r3, #0
 800c074:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c076:	7dfb      	ldrb	r3, [r7, #23]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d136      	bne.n	800c0ea <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c080:	4619      	mov	r1, r3
 800c082:	6938      	ldr	r0, [r7, #16]
 800c084:	f7fd ff16 	bl	8009eb4 <move_window>
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c08c:	7dfb      	ldrb	r3, [r7, #23]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d123      	bne.n	800c0da <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b04      	cmp	r3, #4
 800c098:	d109      	bne.n	800c0ae <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c09e:	781a      	ldrb	r2, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c0a8:	b2d2      	uxtb	r2, r2
 800c0aa:	701a      	strb	r2, [r3, #0]
 800c0ac:	e003      	b.n	800c0b6 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0b2:	22e5      	movs	r2, #229	@ 0xe5
 800c0b4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d90b      	bls.n	800c0de <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7fe fe14 	bl	800acf6 <dir_next>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0d1      	beq.n	800c07c <dir_remove+0x38>
 800c0d8:	e002      	b.n	800c0e0 <dir_remove+0x9c>
			if (res != FR_OK) break;
 800c0da:	bf00      	nop
 800c0dc:	e000      	b.n	800c0e0 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c0de:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	2b04      	cmp	r3, #4
 800c0e4:	d101      	bne.n	800c0ea <dir_remove+0xa6>
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c0ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c0f4:	b5b0      	push	{r4, r5, r7, lr}
 800c0f6:	b088      	sub	sp, #32
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2200      	movs	r2, #0
 800c108:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 80d9 	beq.w	800c2c6 <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	2b04      	cmp	r3, #4
 800c11a:	d106      	bne.n	800c12a <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	4618      	mov	r0, r3
 800c124:	f7ff f9b9 	bl	800b49a <get_xdir_info>
		return;
 800c128:	e0ce      	b.n	800c2c8 <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c132:	d032      	beq.n	800c19a <get_fileinfo+0xa6>
			i = j = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	61bb      	str	r3, [r7, #24]
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c13c:	e01b      	b.n	800c176 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c13e:	89fb      	ldrh	r3, [r7, #14]
 800c140:	2100      	movs	r1, #0
 800c142:	4618      	mov	r0, r3
 800c144:	f002 fe8a 	bl	800ee5c <ff_convert>
 800c148:	4603      	mov	r3, r0
 800c14a:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c14c:	89fb      	ldrh	r3, [r7, #14]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d102      	bne.n	800c158 <get_fileinfo+0x64>
 800c152:	2300      	movs	r3, #0
 800c154:	61fb      	str	r3, [r7, #28]
 800c156:	e01a      	b.n	800c18e <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c15c:	d902      	bls.n	800c164 <get_fileinfo+0x70>
 800c15e:	2300      	movs	r3, #0
 800c160:	61fb      	str	r3, [r7, #28]
 800c162:	e014      	b.n	800c18e <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	1c5a      	adds	r2, r3, #1
 800c168:	61fa      	str	r2, [r7, #28]
 800c16a:	89fa      	ldrh	r2, [r7, #14]
 800c16c:	b2d1      	uxtb	r1, r2
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	4413      	add	r3, r2
 800c172:	460a      	mov	r2, r1
 800c174:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	691a      	ldr	r2, [r3, #16]
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	1c59      	adds	r1, r3, #1
 800c17e:	61b9      	str	r1, [r7, #24]
 800c180:	005b      	lsls	r3, r3, #1
 800c182:	4413      	add	r3, r2
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	81fb      	strh	r3, [r7, #14]
 800c188:	89fb      	ldrh	r3, [r7, #14]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1d7      	bne.n	800c13e <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	4413      	add	r3, r2
 800c194:	331a      	adds	r3, #26
 800c196:	2200      	movs	r2, #0
 800c198:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	61bb      	str	r3, [r7, #24]
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	331a      	adds	r3, #26
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c1ae:	e04d      	b.n	800c24c <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	1c59      	adds	r1, r3, #1
 800c1b8:	61f9      	str	r1, [r7, #28]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	2b20      	cmp	r3, #32
 800c1c4:	d041      	beq.n	800c24a <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c1c6:	7dfb      	ldrb	r3, [r7, #23]
 800c1c8:	2b05      	cmp	r3, #5
 800c1ca:	d101      	bne.n	800c1d0 <get_fileinfo+0xdc>
 800c1cc:	23e5      	movs	r3, #229	@ 0xe5
 800c1ce:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	2b09      	cmp	r3, #9
 800c1d4:	d10f      	bne.n	800c1f6 <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 800c1d6:	89bb      	ldrh	r3, [r7, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d105      	bne.n	800c1e8 <get_fileinfo+0xf4>
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	331a      	adds	r3, #26
 800c1e4:	222e      	movs	r2, #46	@ 0x2e
 800c1e6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	1c5a      	adds	r2, r3, #1
 800c1ec:	61ba      	str	r2, [r7, #24]
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	222e      	movs	r2, #46	@ 0x2e
 800c1f4:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c1f6:	683a      	ldr	r2, [r7, #0]
 800c1f8:	69bb      	ldr	r3, [r7, #24]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	330d      	adds	r3, #13
 800c1fe:	7dfa      	ldrb	r2, [r7, #23]
 800c200:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c202:	89bb      	ldrh	r3, [r7, #12]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d11c      	bne.n	800c242 <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	2b40      	cmp	r3, #64	@ 0x40
 800c20c:	d913      	bls.n	800c236 <get_fileinfo+0x142>
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	2b5a      	cmp	r3, #90	@ 0x5a
 800c212:	d810      	bhi.n	800c236 <get_fileinfo+0x142>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c218:	330c      	adds	r3, #12
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	461a      	mov	r2, r3
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	2b08      	cmp	r3, #8
 800c222:	d901      	bls.n	800c228 <get_fileinfo+0x134>
 800c224:	2310      	movs	r3, #16
 800c226:	e000      	b.n	800c22a <get_fileinfo+0x136>
 800c228:	2308      	movs	r3, #8
 800c22a:	4013      	ands	r3, r2
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d002      	beq.n	800c236 <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 800c230:	7dfb      	ldrb	r3, [r7, #23]
 800c232:	3320      	adds	r3, #32
 800c234:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	4413      	add	r3, r2
 800c23c:	331a      	adds	r3, #26
 800c23e:	7dfa      	ldrb	r2, [r7, #23]
 800c240:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	3301      	adds	r3, #1
 800c246:	61bb      	str	r3, [r7, #24]
 800c248:	e000      	b.n	800c24c <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 800c24a:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	2b0a      	cmp	r3, #10
 800c250:	d9ae      	bls.n	800c1b0 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800c252:	89bb      	ldrh	r3, [r7, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10d      	bne.n	800c274 <get_fileinfo+0x180>
		fno->fname[j] = 0;
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	4413      	add	r3, r2
 800c25e:	331a      	adds	r3, #26
 800c260:	2200      	movs	r2, #0
 800c262:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c268:	330c      	adds	r3, #12
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d101      	bne.n	800c274 <get_fileinfo+0x180>
 800c270:	2300      	movs	r3, #0
 800c272:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	4413      	add	r3, r2
 800c27a:	330d      	adds	r3, #13
 800c27c:	2200      	movs	r2, #0
 800c27e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c284:	7ada      	ldrb	r2, [r3, #11]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c28e:	331c      	adds	r3, #28
 800c290:	4618      	mov	r0, r3
 800c292:	f7fd f9e3 	bl	800965c <ld_dword>
 800c296:	4603      	mov	r3, r0
 800c298:	2200      	movs	r2, #0
 800c29a:	461c      	mov	r4, r3
 800c29c:	4615      	mov	r5, r2
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a8:	3316      	adds	r3, #22
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fd f9d6 	bl	800965c <ld_dword>
 800c2b0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	815a      	strh	r2, [r3, #10]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	0c1b      	lsrs	r3, r3, #16
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	811a      	strh	r2, [r3, #8]
 800c2c4:	e000      	b.n	800c2c8 <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c2c6:	bf00      	nop
}
 800c2c8:	3720      	adds	r7, #32
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c2d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b08a      	sub	sp, #40	@ 0x28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	613b      	str	r3, [r7, #16]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	60fb      	str	r3, [r7, #12]
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	617b      	str	r3, [r7, #20]
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	1c5a      	adds	r2, r3, #1
 800c2f4:	61ba      	str	r2, [r7, #24]
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c2fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c300:	2b1f      	cmp	r3, #31
 800c302:	d940      	bls.n	800c386 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c304:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c306:	2b2f      	cmp	r3, #47	@ 0x2f
 800c308:	d006      	beq.n	800c318 <create_name+0x48>
 800c30a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c30c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c30e:	d110      	bne.n	800c332 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c310:	e002      	b.n	800c318 <create_name+0x48>
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	3301      	adds	r3, #1
 800c316:	61bb      	str	r3, [r7, #24]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	4413      	add	r3, r2
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2b2f      	cmp	r3, #47	@ 0x2f
 800c322:	d0f6      	beq.n	800c312 <create_name+0x42>
 800c324:	693a      	ldr	r2, [r7, #16]
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	4413      	add	r3, r2
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c32e:	d0f0      	beq.n	800c312 <create_name+0x42>
			break;
 800c330:	e02a      	b.n	800c388 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2bfe      	cmp	r3, #254	@ 0xfe
 800c336:	d901      	bls.n	800c33c <create_name+0x6c>
 800c338:	2306      	movs	r3, #6
 800c33a:	e17d      	b.n	800c638 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c33c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c344:	2101      	movs	r1, #1
 800c346:	4618      	mov	r0, r3
 800c348:	f002 fd88 	bl	800ee5c <ff_convert>
 800c34c:	4603      	mov	r3, r0
 800c34e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <create_name+0x8a>
 800c356:	2306      	movs	r3, #6
 800c358:	e16e      	b.n	800c638 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c35a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c35c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c35e:	d809      	bhi.n	800c374 <create_name+0xa4>
 800c360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c362:	4619      	mov	r1, r3
 800c364:	488d      	ldr	r0, [pc, #564]	@ (800c59c <create_name+0x2cc>)
 800c366:	f7fd fba9 	bl	8009abc <chk_chr>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <create_name+0xa4>
 800c370:	2306      	movs	r3, #6
 800c372:	e161      	b.n	800c638 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	1c5a      	adds	r2, r3, #1
 800c378:	617a      	str	r2, [r7, #20]
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4413      	add	r3, r2
 800c380:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c382:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c384:	e7b4      	b.n	800c2f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c386:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	441a      	add	r2, r3
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c392:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c394:	2b1f      	cmp	r3, #31
 800c396:	d801      	bhi.n	800c39c <create_name+0xcc>
 800c398:	2304      	movs	r3, #4
 800c39a:	e000      	b.n	800c39e <create_name+0xce>
 800c39c:	2300      	movs	r3, #0
 800c39e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c3a2:	e011      	b.n	800c3c8 <create_name+0xf8>
		w = lfn[di - 1];
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c3b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3b8:	2b20      	cmp	r3, #32
 800c3ba:	d002      	beq.n	800c3c2 <create_name+0xf2>
 800c3bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3be:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3c0:	d106      	bne.n	800c3d0 <create_name+0x100>
		di--;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1ea      	bne.n	800c3a4 <create_name+0xd4>
 800c3ce:	e000      	b.n	800c3d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c3d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	4413      	add	r3, r2
 800c3da:	2200      	movs	r2, #0
 800c3dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <create_name+0x118>
 800c3e4:	2306      	movs	r3, #6
 800c3e6:	e127      	b.n	800c638 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3340      	adds	r3, #64	@ 0x40
 800c3ec:	220b      	movs	r2, #11
 800c3ee:	2120      	movs	r1, #32
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fd fb21 	bl	8009a38 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	61bb      	str	r3, [r7, #24]
 800c3fa:	e002      	b.n	800c402 <create_name+0x132>
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	3301      	adds	r3, #1
 800c400:	61bb      	str	r3, [r7, #24]
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4413      	add	r3, r2
 800c40a:	881b      	ldrh	r3, [r3, #0]
 800c40c:	2b20      	cmp	r3, #32
 800c40e:	d0f5      	beq.n	800c3fc <create_name+0x12c>
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	4413      	add	r3, r2
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c41c:	d0ee      	beq.n	800c3fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d009      	beq.n	800c438 <create_name+0x168>
 800c424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c428:	f043 0303 	orr.w	r3, r3, #3
 800c42c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c430:	e002      	b.n	800c438 <create_name+0x168>
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	3b01      	subs	r3, #1
 800c436:	617b      	str	r3, [r7, #20]
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d009      	beq.n	800c452 <create_name+0x182>
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c444:	3b01      	subs	r3, #1
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4413      	add	r3, r2
 800c44c:	881b      	ldrh	r3, [r3, #0]
 800c44e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c450:	d1ef      	bne.n	800c432 <create_name+0x162>

	i = b = 0; ni = 8;
 800c452:	2300      	movs	r3, #0
 800c454:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c458:	2300      	movs	r3, #0
 800c45a:	623b      	str	r3, [r7, #32]
 800c45c:	2308      	movs	r3, #8
 800c45e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	1c5a      	adds	r2, r3, #1
 800c464:	61ba      	str	r2, [r7, #24]
 800c466:	005b      	lsls	r3, r3, #1
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	4413      	add	r3, r2
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c470:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c472:	2b00      	cmp	r3, #0
 800c474:	f000 8090 	beq.w	800c598 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c47a:	2b20      	cmp	r3, #32
 800c47c:	d006      	beq.n	800c48c <create_name+0x1bc>
 800c47e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c480:	2b2e      	cmp	r3, #46	@ 0x2e
 800c482:	d10a      	bne.n	800c49a <create_name+0x1ca>
 800c484:	69ba      	ldr	r2, [r7, #24]
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d006      	beq.n	800c49a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c48c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c490:	f043 0303 	orr.w	r3, r3, #3
 800c494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c498:	e07d      	b.n	800c596 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c49a:	6a3a      	ldr	r2, [r7, #32]
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d203      	bcs.n	800c4aa <create_name+0x1da>
 800c4a2:	69ba      	ldr	r2, [r7, #24]
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d123      	bne.n	800c4f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	2b0b      	cmp	r3, #11
 800c4ae:	d106      	bne.n	800c4be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4b4:	f043 0303 	orr.w	r3, r3, #3
 800c4b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c4bc:	e075      	b.n	800c5aa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c4be:	69ba      	ldr	r2, [r7, #24]
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d005      	beq.n	800c4d2 <create_name+0x202>
 800c4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4ca:	f043 0303 	orr.w	r3, r3, #3
 800c4ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800c4d2:	69ba      	ldr	r2, [r7, #24]
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d866      	bhi.n	800c5a8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	61bb      	str	r3, [r7, #24]
 800c4de:	2308      	movs	r3, #8
 800c4e0:	623b      	str	r3, [r7, #32]
 800c4e2:	230b      	movs	r3, #11
 800c4e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c4e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c4f0:	e051      	b.n	800c596 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c4f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4f4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4f6:	d914      	bls.n	800c522 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c4f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f002 fcad 	bl	800ee5c <ff_convert>
 800c502:	4603      	mov	r3, r0
 800c504:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c506:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d004      	beq.n	800c516 <create_name+0x246>
 800c50c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c50e:	3b80      	subs	r3, #128	@ 0x80
 800c510:	4a23      	ldr	r2, [pc, #140]	@ (800c5a0 <create_name+0x2d0>)
 800c512:	5cd3      	ldrb	r3, [r2, r3]
 800c514:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c51a:	f043 0302 	orr.w	r3, r3, #2
 800c51e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c522:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c524:	2b00      	cmp	r3, #0
 800c526:	d007      	beq.n	800c538 <create_name+0x268>
 800c528:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c52a:	4619      	mov	r1, r3
 800c52c:	481d      	ldr	r0, [pc, #116]	@ (800c5a4 <create_name+0x2d4>)
 800c52e:	f7fd fac5 	bl	8009abc <chk_chr>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d008      	beq.n	800c54a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c538:	235f      	movs	r3, #95	@ 0x5f
 800c53a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c53c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c540:	f043 0303 	orr.w	r3, r3, #3
 800c544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c548:	e01b      	b.n	800c582 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c54a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c54c:	2b40      	cmp	r3, #64	@ 0x40
 800c54e:	d909      	bls.n	800c564 <create_name+0x294>
 800c550:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c552:	2b5a      	cmp	r3, #90	@ 0x5a
 800c554:	d806      	bhi.n	800c564 <create_name+0x294>
					b |= 2;
 800c556:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c55a:	f043 0302 	orr.w	r3, r3, #2
 800c55e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c562:	e00e      	b.n	800c582 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c564:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c566:	2b60      	cmp	r3, #96	@ 0x60
 800c568:	d90b      	bls.n	800c582 <create_name+0x2b2>
 800c56a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c56c:	2b7a      	cmp	r3, #122	@ 0x7a
 800c56e:	d808      	bhi.n	800c582 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c570:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c574:	f043 0301 	orr.w	r3, r3, #1
 800c578:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c57c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c57e:	3b20      	subs	r3, #32
 800c580:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c582:	6a3b      	ldr	r3, [r7, #32]
 800c584:	1c5a      	adds	r2, r3, #1
 800c586:	623a      	str	r2, [r7, #32]
 800c588:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c58a:	b2d1      	uxtb	r1, r2
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	4413      	add	r3, r2
 800c590:	460a      	mov	r2, r1
 800c592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c596:	e763      	b.n	800c460 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c598:	bf00      	nop
 800c59a:	e006      	b.n	800c5aa <create_name+0x2da>
 800c59c:	08014c38 	.word	0x08014c38
 800c5a0:	080187a0 	.word	0x080187a0
 800c5a4:	08014c44 	.word	0x08014c44
			if (si > di) break;			/* No extension */
 800c5a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c5b0:	2be5      	cmp	r3, #229	@ 0xe5
 800c5b2:	d103      	bne.n	800c5bc <create_name+0x2ec>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2205      	movs	r2, #5
 800c5b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	2b08      	cmp	r3, #8
 800c5c0:	d104      	bne.n	800c5cc <create_name+0x2fc>
 800c5c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c5cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5d0:	f003 030c 	and.w	r3, r3, #12
 800c5d4:	2b0c      	cmp	r3, #12
 800c5d6:	d005      	beq.n	800c5e4 <create_name+0x314>
 800c5d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5dc:	f003 0303 	and.w	r3, r3, #3
 800c5e0:	2b03      	cmp	r3, #3
 800c5e2:	d105      	bne.n	800c5f0 <create_name+0x320>
 800c5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5e8:	f043 0302 	orr.w	r3, r3, #2
 800c5ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5f4:	f003 0302 	and.w	r3, r3, #2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d117      	bne.n	800c62c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c5fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c600:	f003 0303 	and.w	r3, r3, #3
 800c604:	2b01      	cmp	r3, #1
 800c606:	d105      	bne.n	800c614 <create_name+0x344>
 800c608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c60c:	f043 0310 	orr.w	r3, r3, #16
 800c610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c614:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c618:	f003 030c 	and.w	r3, r3, #12
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	d105      	bne.n	800c62c <create_name+0x35c>
 800c620:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c624:	f043 0308 	orr.w	r3, r3, #8
 800c628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c632:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800c636:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3728      	adds	r7, #40	@ 0x28
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c654:	e002      	b.n	800c65c <follow_path+0x1c>
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	3301      	adds	r3, #1
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b2f      	cmp	r3, #47	@ 0x2f
 800c662:	d0f8      	beq.n	800c656 <follow_path+0x16>
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b5c      	cmp	r3, #92	@ 0x5c
 800c66a:	d0f4      	beq.n	800c656 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	2200      	movs	r2, #0
 800c670:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	2200      	movs	r2, #0
 800c676:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b1f      	cmp	r3, #31
 800c67e:	d80a      	bhi.n	800c696 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2280      	movs	r2, #128	@ 0x80
 800c684:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800c688:	2100      	movs	r1, #0
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7fe fa9f 	bl	800abce <dir_sdi>
 800c690:	4603      	mov	r3, r0
 800c692:	75fb      	strb	r3, [r7, #23]
 800c694:	e07d      	b.n	800c792 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c696:	463b      	mov	r3, r7
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff fe18 	bl	800c2d0 <create_name>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d16e      	bne.n	800c788 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7ff f9f5 	bl	800ba9a <dir_find>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c6ba:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00a      	beq.n	800c6d8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d161      	bne.n	800c78c <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c6c8:	7afb      	ldrb	r3, [r7, #11]
 800c6ca:	f003 0304 	and.w	r3, r3, #4
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d15c      	bne.n	800c78c <follow_path+0x14c>
 800c6d2:	2305      	movs	r3, #5
 800c6d4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c6d6:	e059      	b.n	800c78c <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6d8:	7afb      	ldrb	r3, [r7, #11]
 800c6da:	f003 0304 	and.w	r3, r3, #4
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d156      	bne.n	800c790 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	799b      	ldrb	r3, [r3, #6]
 800c6e6:	f003 0310 	and.w	r3, r3, #16
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d102      	bne.n	800c6f4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800c6ee:	2305      	movs	r3, #5
 800c6f0:	75fb      	strb	r3, [r7, #23]
 800c6f2:	e04e      	b.n	800c792 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d130      	bne.n	800c75e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	689a      	ldr	r2, [r3, #8]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c70a:	4613      	mov	r3, r2
 800c70c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	79d2      	ldrb	r2, [r2, #7]
 800c714:	431a      	orrs	r2, r3
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	3334      	adds	r3, #52	@ 0x34
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fc ff97 	bl	800965c <ld_dword>
 800c72e:	4602      	mov	r2, r0
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	3321      	adds	r3, #33	@ 0x21
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	b2da      	uxtb	r2, r3
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	695b      	ldr	r3, [r3, #20]
 800c74a:	3338      	adds	r3, #56	@ 0x38
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fc ffa8 	bl	80096a2 <ld_qword>
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	6939      	ldr	r1, [r7, #16]
 800c758:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c75c:	e79b      	b.n	800c696 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	8992      	ldrh	r2, [r2, #12]
 800c76c:	fbb3 f0f2 	udiv	r0, r3, r2
 800c770:	fb00 f202 	mul.w	r2, r0, r2
 800c774:	1a9b      	subs	r3, r3, r2
 800c776:	440b      	add	r3, r1
 800c778:	4619      	mov	r1, r3
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f7fe fbfd 	bl	800af7a <ld_clust>
 800c780:	4602      	mov	r2, r0
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c786:	e786      	b.n	800c696 <follow_path+0x56>
			if (res != FR_OK) break;
 800c788:	bf00      	nop
 800c78a:	e002      	b.n	800c792 <follow_path+0x152>
				break;
 800c78c:	bf00      	nop
 800c78e:	e000      	b.n	800c792 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c790:	bf00      	nop
			}
		}
	}

	return res;
 800c792:	7dfb      	ldrb	r3, [r7, #23]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b087      	sub	sp, #28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d031      	beq.n	800c816 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	617b      	str	r3, [r7, #20]
 800c7b8:	e002      	b.n	800c7c0 <get_ldnumber+0x24>
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	617b      	str	r3, [r7, #20]
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	2b1f      	cmp	r3, #31
 800c7c6:	d903      	bls.n	800c7d0 <get_ldnumber+0x34>
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7ce:	d1f4      	bne.n	800c7ba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7d6:	d11c      	bne.n	800c812 <get_ldnumber+0x76>
			tp = *path;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	60fa      	str	r2, [r7, #12]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	3b30      	subs	r3, #48	@ 0x30
 800c7e8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	2b09      	cmp	r3, #9
 800c7ee:	d80e      	bhi.n	800c80e <get_ldnumber+0x72>
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d10a      	bne.n	800c80e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d107      	bne.n	800c80e <get_ldnumber+0x72>
					vol = (int)i;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	3301      	adds	r3, #1
 800c806:	617b      	str	r3, [r7, #20]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	e002      	b.n	800c818 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c812:	2300      	movs	r3, #0
 800c814:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c816:	693b      	ldr	r3, [r7, #16]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	371c      	adds	r7, #28
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	70da      	strb	r2, [r3, #3]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f04f 32ff 	mov.w	r2, #4294967295
 800c83a:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c83c:	6839      	ldr	r1, [r7, #0]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7fd fb38 	bl	8009eb4 <move_window>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d001      	beq.n	800c84e <check_fs+0x2a>
 800c84a:	2304      	movs	r3, #4
 800c84c:	e044      	b.n	800c8d8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	3340      	adds	r3, #64	@ 0x40
 800c852:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c856:	4618      	mov	r0, r3
 800c858:	f7fc fee8 	bl	800962c <ld_word>
 800c85c:	4603      	mov	r3, r0
 800c85e:	461a      	mov	r2, r3
 800c860:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c864:	429a      	cmp	r2, r3
 800c866:	d001      	beq.n	800c86c <check_fs+0x48>
 800c868:	2303      	movs	r3, #3
 800c86a:	e035      	b.n	800c8d8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c872:	2be9      	cmp	r3, #233	@ 0xe9
 800c874:	d009      	beq.n	800c88a <check_fs+0x66>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c87c:	2beb      	cmp	r3, #235	@ 0xeb
 800c87e:	d11e      	bne.n	800c8be <check_fs+0x9a>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c886:	2b90      	cmp	r3, #144	@ 0x90
 800c888:	d119      	bne.n	800c8be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	3340      	adds	r3, #64	@ 0x40
 800c88e:	3336      	adds	r3, #54	@ 0x36
 800c890:	4618      	mov	r0, r3
 800c892:	f7fc fee3 	bl	800965c <ld_dword>
 800c896:	4603      	mov	r3, r0
 800c898:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c89c:	4a10      	ldr	r2, [pc, #64]	@ (800c8e0 <check_fs+0xbc>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d101      	bne.n	800c8a6 <check_fs+0x82>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	e018      	b.n	800c8d8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	3340      	adds	r3, #64	@ 0x40
 800c8aa:	3352      	adds	r3, #82	@ 0x52
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fc fed5 	bl	800965c <ld_dword>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	4a0b      	ldr	r2, [pc, #44]	@ (800c8e4 <check_fs+0xc0>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d101      	bne.n	800c8be <check_fs+0x9a>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	e00c      	b.n	800c8d8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	3340      	adds	r3, #64	@ 0x40
 800c8c2:	220b      	movs	r2, #11
 800c8c4:	4908      	ldr	r1, [pc, #32]	@ (800c8e8 <check_fs+0xc4>)
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fd f8d1 	bl	8009a6e <mem_cmp>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <check_fs+0xb2>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e000      	b.n	800c8d8 <check_fs+0xb4>
#endif
	return 2;
 800c8d6:	2302      	movs	r3, #2
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	00544146 	.word	0x00544146
 800c8e4:	33544146 	.word	0x33544146
 800c8e8:	08014c4c 	.word	0x08014c4c

0800c8ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8f0:	b09c      	sub	sp, #112	@ 0x70
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	61f8      	str	r0, [r7, #28]
 800c8f6:	61b9      	str	r1, [r7, #24]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c902:	69f8      	ldr	r0, [r7, #28]
 800c904:	f7ff ff4a 	bl	800c79c <get_ldnumber>
 800c908:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800c90a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	da01      	bge.n	800c914 <find_volume+0x28>
 800c910:	230b      	movs	r3, #11
 800c912:	e378      	b.n	800d006 <find_volume+0x71a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c914:	4aa2      	ldr	r2, [pc, #648]	@ (800cba0 <find_volume+0x2b4>)
 800c916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c91c:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c91e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <find_volume+0x3c>
 800c924:	230c      	movs	r3, #12
 800c926:	e36e      	b.n	800d006 <find_volume+0x71a>

	ENTER_FF(fs);						/* Lock the volume */
 800c928:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c92a:	f7fd f8e2 	bl	8009af2 <lock_fs>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <find_volume+0x4c>
 800c934:	230f      	movs	r3, #15
 800c936:	e366      	b.n	800d006 <find_volume+0x71a>
	*rfs = fs;							/* Return pointer to the file system object */
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c93c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c93e:	7dfb      	ldrb	r3, [r7, #23]
 800c940:	f023 0301 	bic.w	r3, r3, #1
 800c944:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c946:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d01a      	beq.n	800c984 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800c94e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c950:	785b      	ldrb	r3, [r3, #1]
 800c952:	4618      	mov	r0, r3
 800c954:	f7fc fdca 	bl	80094ec <disk_status>
 800c958:	4603      	mov	r3, r0
 800c95a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c95e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10c      	bne.n	800c984 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d007      	beq.n	800c980 <find_volume+0x94>
 800c970:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800c97c:	230a      	movs	r3, #10
 800c97e:	e342      	b.n	800d006 <find_volume+0x71a>
			}
			return FR_OK;				/* The file system object is valid */
 800c980:	2300      	movs	r3, #0
 800c982:	e340      	b.n	800d006 <find_volume+0x71a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c986:	2200      	movs	r2, #0
 800c988:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c98a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c990:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c994:	785b      	ldrb	r3, [r3, #1]
 800c996:	4618      	mov	r0, r3
 800c998:	f7fc fdc2 	bl	8009520 <disk_initialize>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c9a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c9ae:	2303      	movs	r3, #3
 800c9b0:	e329      	b.n	800d006 <find_volume+0x71a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c9b2:	7dfb      	ldrb	r3, [r7, #23]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d007      	beq.n	800c9c8 <find_volume+0xdc>
 800c9b8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c9bc:	f003 0304 	and.w	r3, r3, #4
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d001      	beq.n	800c9c8 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800c9c4:	230a      	movs	r3, #10
 800c9c6:	e31e      	b.n	800d006 <find_volume+0x71a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c9c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ca:	7858      	ldrb	r0, [r3, #1]
 800c9cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ce:	330c      	adds	r3, #12
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	2102      	movs	r1, #2
 800c9d4:	f7fc fe0c 	bl	80095f0 <disk_ioctl>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <find_volume+0xf6>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e311      	b.n	800d006 <find_volume+0x71a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e4:	899b      	ldrh	r3, [r3, #12]
 800c9e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9ea:	d80d      	bhi.n	800ca08 <find_volume+0x11c>
 800c9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ee:	899b      	ldrh	r3, [r3, #12]
 800c9f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f4:	d308      	bcc.n	800ca08 <find_volume+0x11c>
 800c9f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9f8:	899b      	ldrh	r3, [r3, #12]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9fe:	899b      	ldrh	r3, [r3, #12]
 800ca00:	3b01      	subs	r3, #1
 800ca02:	4013      	ands	r3, r2
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <find_volume+0x120>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e2fc      	b.n	800d006 <find_volume+0x71a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca12:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ca14:	f7ff ff06 	bl	800c824 <check_fs>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d14d      	bne.n	800cac2 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca26:	2300      	movs	r3, #0
 800ca28:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca2a:	e020      	b.n	800ca6e <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca2e:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800ca32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca34:	011b      	lsls	r3, r3, #4
 800ca36:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ca3a:	4413      	add	r3, r2
 800ca3c:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca40:	3304      	adds	r3, #4
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d006      	beq.n	800ca56 <find_volume+0x16a>
 800ca48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7fc fe05 	bl	800965c <ld_dword>
 800ca52:	4602      	mov	r2, r0
 800ca54:	e000      	b.n	800ca58 <find_volume+0x16c>
 800ca56:	2200      	movs	r2, #0
 800ca58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	3360      	adds	r3, #96	@ 0x60
 800ca5e:	f107 0110 	add.w	r1, r7, #16
 800ca62:	440b      	add	r3, r1
 800ca64:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca70:	2b03      	cmp	r3, #3
 800ca72:	d9db      	bls.n	800ca2c <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca74:	2300      	movs	r3, #0
 800ca76:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800ca78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d002      	beq.n	800ca84 <find_volume+0x198>
 800ca7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca80:	3b01      	subs	r3, #1
 800ca82:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	3360      	adds	r3, #96	@ 0x60
 800ca8a:	f107 0210 	add.w	r2, r7, #16
 800ca8e:	4413      	add	r3, r2
 800ca90:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ca94:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d005      	beq.n	800caa8 <find_volume+0x1bc>
 800ca9c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca9e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800caa0:	f7ff fec0 	bl	800c824 <check_fs>
 800caa4:	4603      	mov	r3, r0
 800caa6:	e000      	b.n	800caaa <find_volume+0x1be>
 800caa8:	2303      	movs	r3, #3
 800caaa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800caae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d905      	bls.n	800cac2 <find_volume+0x1d6>
 800cab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cab8:	3301      	adds	r3, #1
 800caba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cabc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cabe:	2b03      	cmp	r3, #3
 800cac0:	d9e0      	bls.n	800ca84 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cac2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cac6:	2b04      	cmp	r3, #4
 800cac8:	d101      	bne.n	800cace <find_volume+0x1e2>
 800caca:	2301      	movs	r3, #1
 800cacc:	e29b      	b.n	800d006 <find_volume+0x71a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cace:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d901      	bls.n	800cada <find_volume+0x1ee>
 800cad6:	230d      	movs	r3, #13
 800cad8:	e295      	b.n	800d006 <find_volume+0x71a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800cada:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cade:	2b01      	cmp	r3, #1
 800cae0:	f040 8100 	bne.w	800cce4 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800cae4:	230b      	movs	r3, #11
 800cae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cae8:	e002      	b.n	800caf0 <find_volume+0x204>
 800caea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caec:	3301      	adds	r3, #1
 800caee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caf2:	2b3f      	cmp	r3, #63	@ 0x3f
 800caf4:	d806      	bhi.n	800cb04 <find_volume+0x218>
 800caf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800caf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cafa:	4413      	add	r3, r2
 800cafc:	3340      	adds	r3, #64	@ 0x40
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0f2      	beq.n	800caea <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800cb04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb06:	2b3f      	cmp	r3, #63	@ 0x3f
 800cb08:	d801      	bhi.n	800cb0e <find_volume+0x222>
 800cb0a:	230d      	movs	r3, #13
 800cb0c:	e27b      	b.n	800d006 <find_volume+0x71a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800cb0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb10:	3340      	adds	r3, #64	@ 0x40
 800cb12:	3368      	adds	r3, #104	@ 0x68
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fc fd89 	bl	800962c <ld_word>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb20:	d001      	beq.n	800cb26 <find_volume+0x23a>
 800cb22:	230d      	movs	r3, #13
 800cb24:	e26f      	b.n	800d006 <find_volume+0x71a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800cb26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb28:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	2301      	movs	r3, #1
 800cb30:	4093      	lsls	r3, r2
 800cb32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb34:	8992      	ldrh	r2, [r2, #12]
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d001      	beq.n	800cb3e <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 800cb3a:	230d      	movs	r3, #13
 800cb3c:	e263      	b.n	800d006 <find_volume+0x71a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800cb3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb40:	3340      	adds	r3, #64	@ 0x40
 800cb42:	3348      	adds	r3, #72	@ 0x48
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fc fdac 	bl	80096a2 <ld_qword>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cb50:	2000      	movs	r0, #0
 800cb52:	60b9      	str	r1, [r7, #8]
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	68b9      	ldr	r1, [r7, #8]
 800cb58:	1851      	adds	r1, r2, r1
 800cb5a:	6039      	str	r1, [r7, #0]
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	eb43 0101 	adc.w	r1, r3, r1
 800cb62:	6079      	str	r1, [r7, #4]
 800cb64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb68:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800cb6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d301      	bcc.n	800cb78 <find_volume+0x28c>
 800cb74:	230d      	movs	r3, #13
 800cb76:	e246      	b.n	800d006 <find_volume+0x71a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800cb78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb7a:	3340      	adds	r3, #64	@ 0x40
 800cb7c:	3354      	adds	r3, #84	@ 0x54
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fc fd6c 	bl	800965c <ld_dword>
 800cb84:	4602      	mov	r2, r0
 800cb86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb88:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800cb8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb8c:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 800cb90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800cb94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb96:	789b      	ldrb	r3, [r3, #2]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d003      	beq.n	800cba4 <find_volume+0x2b8>
 800cb9c:	230d      	movs	r3, #13
 800cb9e:	e232      	b.n	800d006 <find_volume+0x71a>
 800cba0:	20002b70 	.word	0x20002b70

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800cba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cba6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cbaa:	461a      	mov	r2, r3
 800cbac:	2301      	movs	r3, #1
 800cbae:	4093      	lsls	r3, r2
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbb4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800cbb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbb8:	895b      	ldrh	r3, [r3, #10]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d101      	bne.n	800cbc2 <find_volume+0x2d6>
 800cbbe:	230d      	movs	r3, #13
 800cbc0:	e221      	b.n	800d006 <find_volume+0x71a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cbc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbc4:	3340      	adds	r3, #64	@ 0x40
 800cbc6:	335c      	adds	r3, #92	@ 0x5c
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fc fd47 	bl	800965c <ld_dword>
 800cbce:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cbd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbd2:	4a9a      	ldr	r2, [pc, #616]	@ (800ce3c <find_volume+0x550>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d901      	bls.n	800cbdc <find_volume+0x2f0>
 800cbd8:	230d      	movs	r3, #13
 800cbda:	e214      	b.n	800d006 <find_volume+0x71a>
		fs->n_fatent = nclst + 2;
 800cbdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbde:	1c9a      	adds	r2, r3, #2
 800cbe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbe2:	625a      	str	r2, [r3, #36]	@ 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800cbe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbe6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbe8:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cbea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbec:	3340      	adds	r3, #64	@ 0x40
 800cbee:	3358      	adds	r3, #88	@ 0x58
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fc fd33 	bl	800965c <ld_dword>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbfa:	441a      	add	r2, r3
 800cbfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbfe:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800cc00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc02:	3340      	adds	r3, #64	@ 0x40
 800cc04:	3350      	adds	r3, #80	@ 0x50
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7fc fd28 	bl	800965c <ld_dword>
 800cc0c:	4602      	mov	r2, r0
 800cc0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc10:	441a      	add	r2, r3
 800cc12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc14:	631a      	str	r2, [r3, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800cc16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	469a      	mov	sl, r3
 800cc1e:	4693      	mov	fp, r2
 800cc20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc22:	895b      	ldrh	r3, [r3, #10]
 800cc24:	461a      	mov	r2, r3
 800cc26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc28:	fb02 f303 	mul.w	r3, r2, r3
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	4698      	mov	r8, r3
 800cc30:	4691      	mov	r9, r2
 800cc32:	eb1a 0408 	adds.w	r4, sl, r8
 800cc36:	eb4b 0509 	adc.w	r5, fp, r9
 800cc3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cc3e:	42a2      	cmp	r2, r4
 800cc40:	41ab      	sbcs	r3, r5
 800cc42:	d201      	bcs.n	800cc48 <find_volume+0x35c>
 800cc44:	230d      	movs	r3, #13
 800cc46:	e1de      	b.n	800d006 <find_volume+0x71a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800cc48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc4a:	3340      	adds	r3, #64	@ 0x40
 800cc4c:	3360      	adds	r3, #96	@ 0x60
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7fc fd04 	bl	800965c <ld_dword>
 800cc54:	4602      	mov	r2, r0
 800cc56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc58:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800cc5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5e:	4619      	mov	r1, r3
 800cc60:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cc62:	f7fd f9c5 	bl	8009ff0 <clust2sect>
 800cc66:	4603      	mov	r3, r0
 800cc68:	4619      	mov	r1, r3
 800cc6a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cc6c:	f7fd f922 	bl	8009eb4 <move_window>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <find_volume+0x38e>
 800cc76:	2301      	movs	r3, #1
 800cc78:	e1c5      	b.n	800d006 <find_volume+0x71a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc7e:	e015      	b.n	800ccac <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800cc80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc84:	4413      	add	r3, r2
 800cc86:	3340      	adds	r3, #64	@ 0x40
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b81      	cmp	r3, #129	@ 0x81
 800cc8c:	d10b      	bne.n	800cca6 <find_volume+0x3ba>
 800cc8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc90:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800cc94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc96:	3314      	adds	r3, #20
 800cc98:	4413      	add	r3, r2
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fc fcde 	bl	800965c <ld_dword>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b02      	cmp	r3, #2
 800cca4:	d009      	beq.n	800ccba <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cca6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cca8:	3320      	adds	r3, #32
 800ccaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ccac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccae:	899b      	ldrh	r3, [r3, #12]
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d3e3      	bcc.n	800cc80 <find_volume+0x394>
 800ccb8:	e000      	b.n	800ccbc <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ccba:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800ccbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccbe:	899b      	ldrh	r3, [r3, #12]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d101      	bne.n	800cccc <find_volume+0x3e0>
 800ccc8:	230d      	movs	r3, #13
 800ccca:	e19c      	b.n	800d006 <find_volume+0x71a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccce:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd2:	621a      	str	r2, [r3, #32]
 800ccd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccd6:	6a1a      	ldr	r2, [r3, #32]
 800ccd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccda:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800ccdc:	2304      	movs	r3, #4
 800ccde:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800cce2:	e17e      	b.n	800cfe2 <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cce6:	3340      	adds	r3, #64	@ 0x40
 800cce8:	330b      	adds	r3, #11
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fc fc9e 	bl	800962c <ld_word>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccf6:	899b      	ldrh	r3, [r3, #12]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d001      	beq.n	800cd00 <find_volume+0x414>
 800ccfc:	230d      	movs	r3, #13
 800ccfe:	e182      	b.n	800d006 <find_volume+0x71a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cd00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd02:	3340      	adds	r3, #64	@ 0x40
 800cd04:	3316      	adds	r3, #22
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fc fc90 	bl	800962c <ld_word>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cd10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d106      	bne.n	800cd24 <find_volume+0x438>
 800cd16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd18:	3340      	adds	r3, #64	@ 0x40
 800cd1a:	3324      	adds	r3, #36	@ 0x24
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fc fc9d 	bl	800965c <ld_dword>
 800cd22:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800cd24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cd28:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd2c:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800cd30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cd34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd36:	789b      	ldrb	r3, [r3, #2]
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d005      	beq.n	800cd48 <find_volume+0x45c>
 800cd3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd3e:	789b      	ldrb	r3, [r3, #2]
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d001      	beq.n	800cd48 <find_volume+0x45c>
 800cd44:	230d      	movs	r3, #13
 800cd46:	e15e      	b.n	800d006 <find_volume+0x71a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cd48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd4a:	789b      	ldrb	r3, [r3, #2]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd50:	fb02 f303 	mul.w	r3, r2, r3
 800cd54:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cd56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd58:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cd62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd64:	895b      	ldrh	r3, [r3, #10]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d008      	beq.n	800cd7c <find_volume+0x490>
 800cd6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6c:	895b      	ldrh	r3, [r3, #10]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd72:	895b      	ldrh	r3, [r3, #10]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	4013      	ands	r3, r2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <find_volume+0x494>
 800cd7c:	230d      	movs	r3, #13
 800cd7e:	e142      	b.n	800d006 <find_volume+0x71a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd82:	3340      	adds	r3, #64	@ 0x40
 800cd84:	3311      	adds	r3, #17
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fc fc50 	bl	800962c <ld_word>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd96:	891b      	ldrh	r3, [r3, #8]
 800cd98:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd9a:	8992      	ldrh	r2, [r2, #12]
 800cd9c:	0952      	lsrs	r2, r2, #5
 800cd9e:	b292      	uxth	r2, r2
 800cda0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cda4:	fb01 f202 	mul.w	r2, r1, r2
 800cda8:	1a9b      	subs	r3, r3, r2
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <find_volume+0x4c8>
 800cdb0:	230d      	movs	r3, #13
 800cdb2:	e128      	b.n	800d006 <find_volume+0x71a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cdb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdb6:	3340      	adds	r3, #64	@ 0x40
 800cdb8:	3313      	adds	r3, #19
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fc fc36 	bl	800962c <ld_word>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cdc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d106      	bne.n	800cdd8 <find_volume+0x4ec>
 800cdca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdcc:	3340      	adds	r3, #64	@ 0x40
 800cdce:	3320      	adds	r3, #32
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fc fc43 	bl	800965c <ld_dword>
 800cdd6:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cdd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdda:	3340      	adds	r3, #64	@ 0x40
 800cddc:	330e      	adds	r3, #14
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fc fc24 	bl	800962c <ld_word>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cdea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <find_volume+0x50a>
 800cdf2:	230d      	movs	r3, #13
 800cdf4:	e107      	b.n	800d006 <find_volume+0x71a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cdf6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800cdfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdfc:	4413      	add	r3, r2
 800cdfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce00:	8911      	ldrh	r1, [r2, #8]
 800ce02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce04:	8992      	ldrh	r2, [r2, #12]
 800ce06:	0952      	lsrs	r2, r2, #5
 800ce08:	b292      	uxth	r2, r2
 800ce0a:	fbb1 f2f2 	udiv	r2, r1, r2
 800ce0e:	b292      	uxth	r2, r2
 800ce10:	4413      	add	r3, r2
 800ce12:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d201      	bcs.n	800ce20 <find_volume+0x534>
 800ce1c:	230d      	movs	r3, #13
 800ce1e:	e0f2      	b.n	800d006 <find_volume+0x71a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce28:	8952      	ldrh	r2, [r2, #10]
 800ce2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d104      	bne.n	800ce40 <find_volume+0x554>
 800ce36:	230d      	movs	r3, #13
 800ce38:	e0e5      	b.n	800d006 <find_volume+0x71a>
 800ce3a:	bf00      	nop
 800ce3c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800ce40:	2303      	movs	r3, #3
 800ce42:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce48:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d802      	bhi.n	800ce56 <find_volume+0x56a>
 800ce50:	2302      	movs	r3, #2
 800ce52:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce58:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d802      	bhi.n	800ce66 <find_volume+0x57a>
 800ce60:	2301      	movs	r3, #1
 800ce62:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce68:	1c9a      	adds	r2, r3, #2
 800ce6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce6c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800ce6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ce72:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce74:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ce78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce7a:	441a      	add	r2, r3
 800ce7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce7e:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800ce80:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ce82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce84:	441a      	add	r2, r3
 800ce86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce88:	639a      	str	r2, [r3, #56]	@ 0x38
		if (fmt == FS_FAT32) {
 800ce8a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ce8e:	2b03      	cmp	r3, #3
 800ce90:	d11e      	bne.n	800ced0 <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce94:	3340      	adds	r3, #64	@ 0x40
 800ce96:	332a      	adds	r3, #42	@ 0x2a
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fc fbc7 	bl	800962c <ld_word>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d001      	beq.n	800cea8 <find_volume+0x5bc>
 800cea4:	230d      	movs	r3, #13
 800cea6:	e0ae      	b.n	800d006 <find_volume+0x71a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceaa:	891b      	ldrh	r3, [r3, #8]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <find_volume+0x5c8>
 800ceb0:	230d      	movs	r3, #13
 800ceb2:	e0a8      	b.n	800d006 <find_volume+0x71a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ceb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceb6:	3340      	adds	r3, #64	@ 0x40
 800ceb8:	332c      	adds	r3, #44	@ 0x2c
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fc fbce 	bl	800965c <ld_dword>
 800cec0:	4602      	mov	r2, r0
 800cec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cec4:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceca:	009b      	lsls	r3, r3, #2
 800cecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cece:	e01f      	b.n	800cf10 <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ced0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ced2:	891b      	ldrh	r3, [r3, #8]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <find_volume+0x5f0>
 800ced8:	230d      	movs	r3, #13
 800ceda:	e094      	b.n	800d006 <find_volume+0x71a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cedc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cee0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cee2:	441a      	add	r2, r3
 800cee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cee6:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cee8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d103      	bne.n	800cef8 <find_volume+0x60c>
 800cef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	e00a      	b.n	800cf0e <find_volume+0x622>
 800cef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cefa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cefc:	4613      	mov	r3, r2
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	4413      	add	r3, r2
 800cf02:	085a      	lsrs	r2, r3, #1
 800cf04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf08:	f003 0301 	and.w	r3, r3, #1
 800cf0c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf16:	899b      	ldrh	r3, [r3, #12]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf1c:	440b      	add	r3, r1
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf22:	8989      	ldrh	r1, [r1, #12]
 800cf24:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d201      	bcs.n	800cf30 <find_volume+0x644>
 800cf2c:	230d      	movs	r3, #13
 800cf2e:	e06a      	b.n	800d006 <find_volume+0x71a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf32:	f04f 32ff 	mov.w	r2, #4294967295
 800cf36:	621a      	str	r2, [r3, #32]
 800cf38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3a:	6a1a      	ldr	r2, [r3, #32]
 800cf3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800cf40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf42:	2280      	movs	r2, #128	@ 0x80
 800cf44:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cf46:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf4a:	2b03      	cmp	r3, #3
 800cf4c:	d149      	bne.n	800cfe2 <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf50:	3340      	adds	r3, #64	@ 0x40
 800cf52:	3330      	adds	r3, #48	@ 0x30
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7fc fb69 	bl	800962c <ld_word>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d140      	bne.n	800cfe2 <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf62:	3301      	adds	r3, #1
 800cf64:	4619      	mov	r1, r3
 800cf66:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cf68:	f7fc ffa4 	bl	8009eb4 <move_window>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d137      	bne.n	800cfe2 <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 800cf72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf74:	2200      	movs	r2, #0
 800cf76:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf7a:	3340      	adds	r3, #64	@ 0x40
 800cf7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cf80:	4618      	mov	r0, r3
 800cf82:	f7fc fb53 	bl	800962c <ld_word>
 800cf86:	4603      	mov	r3, r0
 800cf88:	461a      	mov	r2, r3
 800cf8a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d127      	bne.n	800cfe2 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cf92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf94:	3340      	adds	r3, #64	@ 0x40
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fc fb60 	bl	800965c <ld_dword>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	4a1c      	ldr	r2, [pc, #112]	@ (800d010 <find_volume+0x724>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d11e      	bne.n	800cfe2 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfa6:	3340      	adds	r3, #64	@ 0x40
 800cfa8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7fc fb55 	bl	800965c <ld_dword>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	4a17      	ldr	r2, [pc, #92]	@ (800d014 <find_volume+0x728>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d113      	bne.n	800cfe2 <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cfba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfbc:	3340      	adds	r3, #64	@ 0x40
 800cfbe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fc fb4a 	bl	800965c <ld_dword>
 800cfc8:	4602      	mov	r2, r0
 800cfca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfcc:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cfce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd0:	3340      	adds	r3, #64	@ 0x40
 800cfd2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fc fb40 	bl	800965c <ld_dword>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfe0:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cfe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfe4:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800cfe8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cfea:	4b0b      	ldr	r3, [pc, #44]	@ (800d018 <find_volume+0x72c>)
 800cfec:	881b      	ldrh	r3, [r3, #0]
 800cfee:	3301      	adds	r3, #1
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	4b09      	ldr	r3, [pc, #36]	@ (800d018 <find_volume+0x72c>)
 800cff4:	801a      	strh	r2, [r3, #0]
 800cff6:	4b08      	ldr	r3, [pc, #32]	@ (800d018 <find_volume+0x72c>)
 800cff8:	881a      	ldrh	r2, [r3, #0]
 800cffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cffc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cffe:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d000:	f7fc fef0 	bl	8009de4 <clear_lock>
#endif
	return FR_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3770      	adds	r7, #112	@ 0x70
 800d00a:	46bd      	mov	sp, r7
 800d00c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d010:	41615252 	.word	0x41615252
 800d014:	61417272 	.word	0x61417272
 800d018:	20002b74 	.word	0x20002b74

0800d01c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d026:	2309      	movs	r3, #9
 800d028:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d02e      	beq.n	800d08e <validate+0x72>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d02a      	beq.n	800d08e <validate+0x72>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d025      	beq.n	800d08e <validate+0x72>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	889a      	ldrh	r2, [r3, #4]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	88db      	ldrh	r3, [r3, #6]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d11e      	bne.n	800d08e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4618      	mov	r0, r3
 800d056:	f7fc fd4c 	bl	8009af2 <lock_fs>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d014      	beq.n	800d08a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	785b      	ldrb	r3, [r3, #1]
 800d066:	4618      	mov	r0, r3
 800d068:	f7fc fa40 	bl	80094ec <disk_status>
 800d06c:	4603      	mov	r3, r0
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	d102      	bne.n	800d07c <validate+0x60>
				res = FR_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	73fb      	strb	r3, [r7, #15]
 800d07a:	e008      	b.n	800d08e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2100      	movs	r1, #0
 800d082:	4618      	mov	r0, r3
 800d084:	f7fc fd4b 	bl	8009b1e <unlock_fs>
 800d088:	e001      	b.n	800d08e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d08a:	230f      	movs	r3, #15
 800d08c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d08e:	7bfb      	ldrb	r3, [r7, #15]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d102      	bne.n	800d09a <validate+0x7e>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	e000      	b.n	800d09c <validate+0x80>
 800d09a:	2300      	movs	r3, #0
 800d09c:	683a      	ldr	r2, [r7, #0]
 800d09e:	6013      	str	r3, [r2, #0]
	return res;
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
	...

0800d0ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b088      	sub	sp, #32
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d0be:	f107 0310 	add.w	r3, r7, #16
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff fb6a 	bl	800c79c <get_ldnumber>
 800d0c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	da01      	bge.n	800d0d4 <f_mount+0x28>
 800d0d0:	230b      	movs	r3, #11
 800d0d2:	e048      	b.n	800d166 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d0d4:	4a26      	ldr	r2, [pc, #152]	@ (800d170 <f_mount+0xc4>)
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d0de:	69bb      	ldr	r3, [r7, #24]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00f      	beq.n	800d104 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d0e4:	69b8      	ldr	r0, [r7, #24]
 800d0e6:	f7fc fe7d 	bl	8009de4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	699b      	ldr	r3, [r3, #24]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f001 ff9a 	bl	800f028 <ff_del_syncobj>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <f_mount+0x52>
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	e033      	b.n	800d166 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	2200      	movs	r2, #0
 800d102:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00f      	beq.n	800d12a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	b2da      	uxtb	r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	3318      	adds	r3, #24
 800d118:	4619      	mov	r1, r3
 800d11a:	4610      	mov	r0, r2
 800d11c:	f001 ff64 	bl	800efe8 <ff_cre_syncobj>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d101      	bne.n	800d12a <f_mount+0x7e>
 800d126:	2302      	movs	r3, #2
 800d128:	e01d      	b.n	800d166 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	4910      	ldr	r1, [pc, #64]	@ (800d170 <f_mount+0xc4>)
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d002      	beq.n	800d140 <f_mount+0x94>
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d001      	beq.n	800d144 <f_mount+0x98>
 800d140:	2300      	movs	r3, #0
 800d142:	e010      	b.n	800d166 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d144:	f107 010c 	add.w	r1, r7, #12
 800d148:	f107 0308 	add.w	r3, r7, #8
 800d14c:	2200      	movs	r2, #0
 800d14e:	4618      	mov	r0, r3
 800d150:	f7ff fbcc 	bl	800c8ec <find_volume>
 800d154:	4603      	mov	r3, r0
 800d156:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	7dfa      	ldrb	r2, [r7, #23]
 800d15c:	4611      	mov	r1, r2
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fc fcdd 	bl	8009b1e <unlock_fs>
 800d164:	7dfb      	ldrb	r3, [r7, #23]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3720      	adds	r7, #32
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	20002b70 	.word	0x20002b70

0800d174 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d178:	b0aa      	sub	sp, #168	@ 0xa8
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d17e:	6239      	str	r1, [r7, #32]
 800d180:	4613      	mov	r3, r2
 800d182:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d186:	2b00      	cmp	r3, #0
 800d188:	d101      	bne.n	800d18e <f_open+0x1a>
 800d18a:	2309      	movs	r3, #9
 800d18c:	e2e2      	b.n	800d754 <f_open+0x5e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d18e:	7ffb      	ldrb	r3, [r7, #31]
 800d190:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d194:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800d196:	7ffb      	ldrb	r3, [r7, #31]
 800d198:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d19c:	f107 0020 	add.w	r0, r7, #32
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	f7ff fba3 	bl	800c8ec <find_volume>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (res == FR_OK) {
 800d1ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f040 82bf 	bne.w	800d734 <f_open+0x5c0>
		dj.obj.fs = fs;
 800d1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b8:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
 800d1ba:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d1be:	f001 ff5f 	bl	800f080 <ff_memalloc>
 800d1c2:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800d1c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d106      	bne.n	800d1dc <f_open+0x68>
 800d1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d0:	2111      	movs	r1, #17
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fc fca3 	bl	8009b1e <unlock_fs>
 800d1d8:	2311      	movs	r3, #17
 800d1da:	e2bb      	b.n	800d754 <f_open+0x5e0>
 800d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d1e2:	611a      	str	r2, [r3, #16]
 800d1e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d1ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800d1ee:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
 800d1f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	f7ff fa21 	bl	800c640 <follow_path>
 800d1fe:	4603      	mov	r3, r0
 800d200:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d204:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d118      	bne.n	800d23e <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d20c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800d210:	b25b      	sxtb	r3, r3
 800d212:	2b00      	cmp	r3, #0
 800d214:	da03      	bge.n	800d21e <f_open+0xaa>
				res = FR_INVALID_NAME;
 800d216:	2306      	movs	r3, #6
 800d218:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d21c:	e00f      	b.n	800d23e <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d21e:	7ffb      	ldrb	r3, [r7, #31]
 800d220:	2b01      	cmp	r3, #1
 800d222:	bf8c      	ite	hi
 800d224:	2301      	movhi	r3, #1
 800d226:	2300      	movls	r3, #0
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	461a      	mov	r2, r3
 800d22c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d230:	4611      	mov	r1, r2
 800d232:	4618      	mov	r0, r3
 800d234:	f7fc fc8e 	bl	8009b54 <chk_lock>
 800d238:	4603      	mov	r3, r0
 800d23a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d23e:	7ffb      	ldrb	r3, [r7, #31]
 800d240:	f003 031c 	and.w	r3, r3, #28
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 8117 	beq.w	800d478 <f_open+0x304>
			if (res != FR_OK) {					/* No file, create new */
 800d24a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d017      	beq.n	800d282 <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d252:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d256:	2b04      	cmp	r3, #4
 800d258:	d10e      	bne.n	800d278 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d25a:	f7fc fcd7 	bl	8009c0c <enq_lock>
 800d25e:	4603      	mov	r3, r0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d006      	beq.n	800d272 <f_open+0xfe>
 800d264:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d268:	4618      	mov	r0, r3
 800d26a:	f7fe fd41 	bl	800bcf0 <dir_register>
 800d26e:	4603      	mov	r3, r0
 800d270:	e000      	b.n	800d274 <f_open+0x100>
 800d272:	2312      	movs	r3, #18
 800d274:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d278:	7ffb      	ldrb	r3, [r7, #31]
 800d27a:	f043 0308 	orr.w	r3, r3, #8
 800d27e:	77fb      	strb	r3, [r7, #31]
 800d280:	e011      	b.n	800d2a6 <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d282:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d286:	f003 0311 	and.w	r3, r3, #17
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d003      	beq.n	800d296 <f_open+0x122>
					res = FR_DENIED;
 800d28e:	2307      	movs	r3, #7
 800d290:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d294:	e007      	b.n	800d2a6 <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d296:	7ffb      	ldrb	r3, [r7, #31]
 800d298:	f003 0304 	and.w	r3, r3, #4
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <f_open+0x132>
 800d2a0:	2308      	movs	r3, #8
 800d2a2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d2a6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f040 8100 	bne.w	800d4b0 <f_open+0x33c>
 800d2b0:	7ffb      	ldrb	r3, [r7, #31]
 800d2b2:	f003 0308 	and.w	r3, r3, #8
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f000 80fa 	beq.w	800d4b0 <f_open+0x33c>
				dw = GET_FATTIME();
 800d2bc:	f7fc f8b8 	bl	8009430 <get_fattime>
 800d2c0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b04      	cmp	r3, #4
 800d2ca:	f040 8085 	bne.w	800d3d8 <f_open+0x264>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d2ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d2:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d6:	695b      	ldr	r3, [r3, #20]
 800d2d8:	3334      	adds	r3, #52	@ 0x34
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fc f9be 	bl	800965c <ld_dword>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	3338      	adds	r3, #56	@ 0x38
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fc f9d8 	bl	80096a2 <ld_qword>
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f4:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fa:	695b      	ldr	r3, [r3, #20]
 800d2fc:	3321      	adds	r3, #33	@ 0x21
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	f003 0302 	and.w	r3, r3, #2
 800d304:	b2db      	uxtb	r3, r3
 800d306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d308:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800d30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30c:	2200      	movs	r2, #0
 800d30e:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d312:	695b      	ldr	r3, [r3, #20]
 800d314:	3308      	adds	r3, #8
 800d316:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fc fab7 	bl	800988e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d322:	695b      	ldr	r3, [r3, #20]
 800d324:	f103 0214 	add.w	r2, r3, #20
 800d328:	2300      	movs	r3, #0
 800d32a:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32e:	695b      	ldr	r3, [r3, #20]
 800d330:	330c      	adds	r3, #12
 800d332:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d336:	4618      	mov	r0, r3
 800d338:	f7fc faa9 	bl	800988e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	f103 0215 	add.w	r2, r3, #21
 800d344:	2300      	movs	r3, #0
 800d346:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d34a:	695b      	ldr	r3, [r3, #20]
 800d34c:	1d1a      	adds	r2, r3, #4
 800d34e:	2320      	movs	r3, #32
 800d350:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d354:	695b      	ldr	r3, [r3, #20]
 800d356:	3334      	adds	r3, #52	@ 0x34
 800d358:	2100      	movs	r1, #0
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fc fa97 	bl	800988e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d362:	695b      	ldr	r3, [r3, #20]
 800d364:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d368:	f04f 0200 	mov.w	r2, #0
 800d36c:	f04f 0300 	mov.w	r3, #0
 800d370:	4608      	mov	r0, r1
 800d372:	f7fc fab8 	bl	80098e6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d37e:	f04f 0200 	mov.w	r2, #0
 800d382:	f04f 0300 	mov.w	r3, #0
 800d386:	4608      	mov	r0, r1
 800d388:	f7fc faad 	bl	80098e6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38e:	695b      	ldr	r3, [r3, #20]
 800d390:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800d394:	2301      	movs	r3, #1
 800d396:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800d398:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fe f9f3 	bl	800b788 <store_xdir>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d3a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d17f      	bne.n	800d4b0 <f_open+0x33c>
 800d3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d07b      	beq.n	800d4b0 <f_open+0x33c>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d3b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	f7fd fa03 	bl	800a7cc <remove_chain>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3d2:	3b01      	subs	r3, #1
 800d3d4:	61d3      	str	r3, [r2, #28]
 800d3d6:	e06b      	b.n	800d4b0 <f_open+0x33c>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d3d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3da:	330e      	adds	r3, #14
 800d3dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fc fa54 	bl	800988e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d3e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3e8:	3316      	adds	r3, #22
 800d3ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fc fa4d 	bl	800988e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d3f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3f6:	f103 020b 	add.w	r2, r3, #11
 800d3fa:	2320      	movs	r3, #32
 800d3fc:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d3fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d402:	4619      	mov	r1, r3
 800d404:	4610      	mov	r0, r2
 800d406:	f7fd fdb8 	bl	800af7a <ld_clust>
 800d40a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d40e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d412:	2200      	movs	r2, #0
 800d414:	4619      	mov	r1, r3
 800d416:	f7fd fdcf 	bl	800afb8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d41a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d41c:	331c      	adds	r3, #28
 800d41e:	2100      	movs	r1, #0
 800d420:	4618      	mov	r0, r3
 800d422:	f7fc fa34 	bl	800988e <st_dword>
					fs->wflag = 1;
 800d426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d428:	2301      	movs	r3, #1
 800d42a:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d42c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d430:	2b00      	cmp	r3, #0
 800d432:	d03d      	beq.n	800d4b0 <f_open+0x33c>
						dw = fs->winsect;
 800d434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						res = remove_chain(&dj.obj, cl, 0);
 800d43c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d440:	2200      	movs	r2, #0
 800d442:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d446:	4618      	mov	r0, r3
 800d448:	f7fd f9c0 	bl	800a7cc <remove_chain>
 800d44c:	4603      	mov	r3, r0
 800d44e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						if (res == FR_OK) {
 800d452:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d12a      	bne.n	800d4b0 <f_open+0x33c>
							res = move_window(fs, dw);
 800d45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d460:	4618      	mov	r0, r3
 800d462:	f7fc fd27 	bl	8009eb4 <move_window>
 800d466:	4603      	mov	r3, r0
 800d468:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d46c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d46e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d472:	3b01      	subs	r3, #1
 800d474:	61d3      	str	r3, [r2, #28]
 800d476:	e01b      	b.n	800d4b0 <f_open+0x33c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d478:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d117      	bne.n	800d4b0 <f_open+0x33c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d480:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d484:	f003 0310 	and.w	r3, r3, #16
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d003      	beq.n	800d494 <f_open+0x320>
					res = FR_NO_FILE;
 800d48c:	2304      	movs	r3, #4
 800d48e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d492:	e00d      	b.n	800d4b0 <f_open+0x33c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d494:	7ffb      	ldrb	r3, [r7, #31]
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d008      	beq.n	800d4b0 <f_open+0x33c>
 800d49e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d002      	beq.n	800d4b0 <f_open+0x33c>
						res = FR_DENIED;
 800d4aa:	2307      	movs	r3, #7
 800d4ac:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 800d4b0:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d126      	bne.n	800d506 <f_open+0x392>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d4b8:	7ffb      	ldrb	r3, [r7, #31]
 800d4ba:	f003 0308 	and.w	r3, r3, #8
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d003      	beq.n	800d4ca <f_open+0x356>
				mode |= FA_MODIFIED;
 800d4c2:	7ffb      	ldrb	r3, [r7, #31]
 800d4c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4c8:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d0:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800d4d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d6:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4d8:	7ffb      	ldrb	r3, [r7, #31]
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	bf8c      	ite	hi
 800d4de:	2301      	movhi	r3, #1
 800d4e0:	2300      	movls	r3, #0
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fc fbaf 	bl	8009c50 <inc_lock>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f6:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d102      	bne.n	800d506 <f_open+0x392>
 800d500:	2302      	movs	r3, #2
 800d502:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d506:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f040 810e 	bne.w	800d72c <f_open+0x5b8>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b04      	cmp	r3, #4
 800d516:	d12d      	bne.n	800d574 <f_open+0x400>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51c:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d51e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d522:	4613      	mov	r3, r2
 800d524:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d528:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d52c:	431a      	orrs	r2, r3
 800d52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d530:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d532:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d536:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	3334      	adds	r3, #52	@ 0x34
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fc f88c 	bl	800965c <ld_dword>
 800d544:	4602      	mov	r2, r0
 800d546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d548:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d54c:	695b      	ldr	r3, [r3, #20]
 800d54e:	3338      	adds	r3, #56	@ 0x38
 800d550:	4618      	mov	r0, r3
 800d552:	f7fc f8a6 	bl	80096a2 <ld_qword>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d55c:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d562:	695b      	ldr	r3, [r3, #20]
 800d564:	3321      	adds	r3, #33	@ 0x21
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	f003 0302 	and.w	r3, r3, #2
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d570:	71da      	strb	r2, [r3, #7]
 800d572:	e016      	b.n	800d5a2 <f_open+0x42e>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f7fd fcfd 	bl	800af7a <ld_clust>
 800d580:	4602      	mov	r2, r0
 800d582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d584:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d588:	331c      	adds	r3, #28
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fc f866 	bl	800965c <ld_dword>
 800d590:	4603      	mov	r3, r0
 800d592:	2200      	movs	r2, #0
 800d594:	613b      	str	r3, [r7, #16]
 800d596:	617a      	str	r2, [r7, #20]
 800d598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d59e:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d5a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5b0:	88da      	ldrh	r2, [r3, #6]
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b8:	7ffa      	ldrb	r2, [r7, #31]
 800d5ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800d5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d5cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d5ce:	f04f 0200 	mov.w	r2, #0
 800d5d2:	f04f 0300 	mov.w	r3, #0
 800d5d6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5dc:	3354      	adds	r3, #84	@ 0x54
 800d5de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fc fa27 	bl	8009a38 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d5ea:	7ffb      	ldrb	r3, [r7, #31]
 800d5ec:	f003 0320 	and.w	r3, r3, #32
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 809b 	beq.w	800d72c <f_open+0x5b8>
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	f000 8095 	beq.w	800d72c <f_open+0x5b8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d604:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d608:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d60a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d610:	895b      	ldrh	r3, [r3, #10]
 800d612:	461a      	mov	r2, r3
 800d614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d616:	899b      	ldrh	r3, [r3, #12]
 800d618:	fb02 f303 	mul.w	r3, r2, r3
 800d61c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d62e:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800d632:	e023      	b.n	800d67c <f_open+0x508>
					clst = get_fat(&fp->obj, clst);
 800d634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d636:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fc fcf8 	bl	800a030 <get_fat>
 800d640:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 800d644:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d802      	bhi.n	800d652 <f_open+0x4de>
 800d64c:	2302      	movs	r3, #2
 800d64e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65a:	d102      	bne.n	800d662 <f_open+0x4ee>
 800d65c:	2301      	movs	r3, #1
 800d65e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d662:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d666:	2200      	movs	r2, #0
 800d668:	4698      	mov	r8, r3
 800d66a:	4691      	mov	r9, r2
 800d66c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d670:	ebb2 0a08 	subs.w	sl, r2, r8
 800d674:	eb63 0b09 	sbc.w	fp, r3, r9
 800d678:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
 800d67c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10a      	bne.n	800d69a <f_open+0x526>
 800d684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d688:	2200      	movs	r2, #0
 800d68a:	461c      	mov	r4, r3
 800d68c:	4615      	mov	r5, r2
 800d68e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d692:	4294      	cmp	r4, r2
 800d694:	eb75 0303 	sbcs.w	r3, r5, r3
 800d698:	d3cc      	bcc.n	800d634 <f_open+0x4c0>
				}
				fp->clust = clst;
 800d69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d6a0:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d6a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d140      	bne.n	800d72c <f_open+0x5b8>
 800d6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ac:	899b      	ldrh	r3, [r3, #12]
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	60bb      	str	r3, [r7, #8]
 800d6b4:	60fa      	str	r2, [r7, #12]
 800d6b6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d6ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6be:	f7f3 fa75 	bl	8000bac <__aeabi_uldivmod>
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	d032      	beq.n	800d72c <f_open+0x5b8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fc fc8f 	bl	8009ff0 <clust2sect>
 800d6d2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 800d6d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d103      	bne.n	800d6e6 <f_open+0x572>
						res = FR_INT_ERR;
 800d6de:	2302      	movs	r3, #2
 800d6e0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d6e4:	e022      	b.n	800d72c <f_open+0x5b8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e8:	899b      	ldrh	r3, [r3, #12]
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	603b      	str	r3, [r7, #0]
 800d6f0:	607a      	str	r2, [r7, #4]
 800d6f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6f6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d6fa:	f7f3 fa57 	bl	8000bac <__aeabi_uldivmod>
 800d6fe:	4602      	mov	r2, r0
 800d700:	460b      	mov	r3, r1
 800d702:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d706:	441a      	add	r2, r3
 800d708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70a:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70e:	7858      	ldrb	r0, [r3, #1]
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d71a:	2301      	movs	r3, #1
 800d71c:	f7fb ff28 	bl	8009570 <disk_read>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <f_open+0x5b8>
 800d726:	2301      	movs	r3, #1
 800d728:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d72c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d730:	f001 fcb2 	bl	800f098 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d734:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <f_open+0x5ce>
 800d73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73e:	2200      	movs	r2, #0
 800d740:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d744:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800d748:	4611      	mov	r1, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fc f9e7 	bl	8009b1e <unlock_fs>
 800d750:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800d754:	4618      	mov	r0, r3
 800d756:	37a8      	adds	r7, #168	@ 0xa8
 800d758:	46bd      	mov	sp, r7
 800d75a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d75e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d75e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d762:	b098      	sub	sp, #96	@ 0x60
 800d764:	af00      	add	r7, sp, #0
 800d766:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d768:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d76a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d76c:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d770:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 800d772:	6a3a      	ldr	r2, [r7, #32]
 800d774:	2300      	movs	r3, #0
 800d776:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d77a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d77e:	4619      	mov	r1, r3
 800d780:	4610      	mov	r0, r2
 800d782:	f7ff fc4b 	bl	800d01c <validate>
 800d786:	4603      	mov	r3, r0
 800d788:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d78c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d790:	2b00      	cmp	r3, #0
 800d792:	d108      	bne.n	800d7a6 <f_read+0x48>
 800d794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d796:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d79a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d79e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d009      	beq.n	800d7ba <f_read+0x5c>
 800d7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7a8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fc f9b5 	bl	8009b1e <unlock_fs>
 800d7b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7b8:	e193      	b.n	800dae2 <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7c0:	f003 0301 	and.w	r3, r3, #1
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d106      	bne.n	800d7d6 <f_read+0x78>
 800d7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ca:	2107      	movs	r1, #7
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fc f9a6 	bl	8009b1e <unlock_fs>
 800d7d2:	2307      	movs	r3, #7
 800d7d4:	e185      	b.n	800dae2 <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 800d7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d7dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d7e2:	ebb0 0802 	subs.w	r8, r0, r2
 800d7e6:	eb61 0903 	sbc.w	r9, r1, r3
 800d7ea:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	461c      	mov	r4, r3
 800d7f4:	4615      	mov	r5, r2
 800d7f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d7fa:	42a2      	cmp	r2, r4
 800d7fc:	41ab      	sbcs	r3, r5
 800d7fe:	f080 8166 	bcs.w	800dace <f_read+0x370>
 800d802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d804:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800d806:	e162      	b.n	800dace <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d810:	899b      	ldrh	r3, [r3, #12]
 800d812:	b29b      	uxth	r3, r3
 800d814:	2200      	movs	r2, #0
 800d816:	61bb      	str	r3, [r7, #24]
 800d818:	61fa      	str	r2, [r7, #28]
 800d81a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d81e:	f7f3 f9c5 	bl	8000bac <__aeabi_uldivmod>
 800d822:	4313      	orrs	r3, r2
 800d824:	f040 8107 	bne.w	800da36 <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d82a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d82e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d830:	899b      	ldrh	r3, [r3, #12]
 800d832:	b29b      	uxth	r3, r3
 800d834:	2200      	movs	r2, #0
 800d836:	613b      	str	r3, [r7, #16]
 800d838:	617a      	str	r2, [r7, #20]
 800d83a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d83e:	f7f3 f9b5 	bl	8000bac <__aeabi_uldivmod>
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d848:	895b      	ldrh	r3, [r3, #10]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	4013      	ands	r3, r2
 800d84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800d850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d852:	2b00      	cmp	r3, #0
 800d854:	d13c      	bne.n	800d8d0 <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d858:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d85c:	4313      	orrs	r3, r2
 800d85e:	d103      	bne.n	800d868 <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d866:	e013      	b.n	800d890 <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d007      	beq.n	800d880 <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d872:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d876:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d878:	f7fd f95d 	bl	800ab36 <clmt_clust>
 800d87c:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d87e:	e007      	b.n	800d890 <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d886:	4619      	mov	r1, r3
 800d888:	4610      	mov	r0, r2
 800d88a:	f7fc fbd1 	bl	800a030 <get_fat>
 800d88e:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d892:	2b01      	cmp	r3, #1
 800d894:	d80a      	bhi.n	800d8ac <f_read+0x14e>
 800d896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d898:	2202      	movs	r2, #2
 800d89a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8a0:	2102      	movs	r1, #2
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fc f93b 	bl	8009b1e <unlock_fs>
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	e11a      	b.n	800dae2 <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b2:	d10a      	bne.n	800d8ca <f_read+0x16c>
 800d8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d8bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8be:	2101      	movs	r1, #1
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fc f92c 	bl	8009b1e <unlock_fs>
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	e10b      	b.n	800dae2 <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 800d8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8ce:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d8d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4610      	mov	r0, r2
 800d8da:	f7fc fb89 	bl	8009ff0 <clust2sect>
 800d8de:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10a      	bne.n	800d8fc <f_read+0x19e>
 800d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e8:	2202      	movs	r2, #2
 800d8ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8f0:	2102      	movs	r1, #2
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fc f913 	bl	8009b1e <unlock_fs>
 800d8f8:	2302      	movs	r3, #2
 800d8fa:	e0f2      	b.n	800dae2 <f_read+0x384>
			sect += csect;
 800d8fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d900:	4413      	add	r3, r2
 800d902:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d906:	899b      	ldrh	r3, [r3, #12]
 800d908:	461a      	mov	r2, r3
 800d90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d90c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d910:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d912:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d914:	2b00      	cmp	r3, #0
 800d916:	d048      	beq.n	800d9aa <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d918:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d91a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d91c:	4413      	add	r3, r2
 800d91e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d920:	8952      	ldrh	r2, [r2, #10]
 800d922:	4293      	cmp	r3, r2
 800d924:	d905      	bls.n	800d932 <f_read+0x1d4>
					cc = fs->csize - csect;
 800d926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d928:	895b      	ldrh	r3, [r3, #10]
 800d92a:	461a      	mov	r2, r3
 800d92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d934:	7858      	ldrb	r0, [r3, #1]
 800d936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d93a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d93c:	f7fb fe18 	bl	8009570 <disk_read>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00a      	beq.n	800d95c <f_read+0x1fe>
 800d946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d948:	2201      	movs	r2, #1
 800d94a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d950:	2101      	movs	r1, #1
 800d952:	4618      	mov	r0, r3
 800d954:	f7fc f8e3 	bl	8009b1e <unlock_fs>
 800d958:	2301      	movs	r3, #1
 800d95a:	e0c2      	b.n	800dae2 <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d962:	b25b      	sxtb	r3, r3
 800d964:	2b00      	cmp	r3, #0
 800d966:	da18      	bge.n	800d99a <f_read+0x23c>
 800d968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d96a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d972:	429a      	cmp	r2, r3
 800d974:	d911      	bls.n	800d99a <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d978:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d980:	8992      	ldrh	r2, [r2, #12]
 800d982:	fb02 f303 	mul.w	r3, r2, r3
 800d986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d988:	18d0      	adds	r0, r2, r3
 800d98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d992:	899b      	ldrh	r3, [r3, #12]
 800d994:	461a      	mov	r2, r3
 800d996:	f7fc f82e 	bl	80099f6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d99a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d99c:	899b      	ldrh	r3, [r3, #12]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a2:	fb02 f303 	mul.w	r3, r2, r3
 800d9a6:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 800d9a8:	e071      	b.n	800da8e <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d03d      	beq.n	800da30 <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9ba:	b25b      	sxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	da20      	bge.n	800da02 <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c2:	7858      	ldrb	r0, [r3, #1]
 800d9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	f7fb fdee 	bl	80095b0 <disk_write>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00a      	beq.n	800d9f0 <f_read+0x292>
 800d9da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9dc:	2201      	movs	r2, #1
 800d9de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9e4:	2101      	movs	r1, #1
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fc f899 	bl	8009b1e <unlock_fs>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e078      	b.n	800dae2 <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800da02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da04:	7858      	ldrb	r0, [r3, #1]
 800da06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da08:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800da0c:	2301      	movs	r3, #1
 800da0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da10:	f7fb fdae 	bl	8009570 <disk_read>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00a      	beq.n	800da30 <f_read+0x2d2>
 800da1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800da22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da24:	2101      	movs	r1, #1
 800da26:	4618      	mov	r0, r3
 800da28:	f7fc f879 	bl	8009b1e <unlock_fs>
 800da2c:	2301      	movs	r3, #1
 800da2e:	e058      	b.n	800dae2 <f_read+0x384>
			}
#endif
			fp->sect = sect;
 800da30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da34:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800da36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da38:	899b      	ldrh	r3, [r3, #12]
 800da3a:	4618      	mov	r0, r3
 800da3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800da42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da44:	899b      	ldrh	r3, [r3, #12]
 800da46:	fbb2 f1f3 	udiv	r1, r2, r3
 800da4a:	fb01 f303 	mul.w	r3, r1, r3
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	1ac3      	subs	r3, r0, r3
 800da52:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800da54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800da56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da58:	429a      	cmp	r2, r3
 800da5a:	d901      	bls.n	800da60 <f_read+0x302>
 800da5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da5e:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800da60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da62:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800da66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da68:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800da6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da6e:	899b      	ldrh	r3, [r3, #12]
 800da70:	b29b      	uxth	r3, r3
 800da72:	2200      	movs	r2, #0
 800da74:	60bb      	str	r3, [r7, #8]
 800da76:	60fa      	str	r2, [r7, #12]
 800da78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da7c:	f7f3 f896 	bl	8000bac <__aeabi_uldivmod>
 800da80:	4613      	mov	r3, r2
 800da82:	4423      	add	r3, r4
 800da84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800da86:	4619      	mov	r1, r3
 800da88:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800da8a:	f7fb ffb4 	bl	80099f6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800da8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800da90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da92:	4413      	add	r3, r2
 800da94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da98:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800da9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800da9e:	2000      	movs	r0, #0
 800daa0:	468a      	mov	sl, r1
 800daa2:	4683      	mov	fp, r0
 800daa4:	eb12 010a 	adds.w	r1, r2, sl
 800daa8:	6039      	str	r1, [r7, #0]
 800daaa:	eb43 030b 	adc.w	r3, r3, fp
 800daae:	607b      	str	r3, [r7, #4]
 800dab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dab6:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800daba:	6a3b      	ldr	r3, [r7, #32]
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dac0:	441a      	add	r2, r3
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800dace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f47f ae99 	bne.w	800d808 <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f7fc f81f 	bl	8009b1e <unlock_fs>
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3760      	adds	r7, #96	@ 0x60
 800dae6:	46bd      	mov	sp, r7
 800dae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800daec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf0:	b091      	sub	sp, #68	@ 0x44
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	61f8      	str	r0, [r7, #28]
 800daf6:	61b9      	str	r1, [r7, #24]
 800daf8:	617a      	str	r2, [r7, #20]
 800dafa:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	2200      	movs	r2, #0
 800db04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	f107 0220 	add.w	r2, r7, #32
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7ff fa84 	bl	800d01c <validate>
 800db14:	4603      	mov	r3, r0
 800db16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800db1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d108      	bne.n	800db34 <f_write+0x48>
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800db28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800db2c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800db30:	2b00      	cmp	r3, #0
 800db32:	d009      	beq.n	800db48 <f_write+0x5c>
 800db34:	6a3b      	ldr	r3, [r7, #32]
 800db36:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800db3a:	4611      	mov	r1, r2
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fb ffee 	bl	8009b1e <unlock_fs>
 800db42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800db46:	e1d2      	b.n	800deee <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db4e:	f003 0302 	and.w	r3, r3, #2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d106      	bne.n	800db64 <f_write+0x78>
 800db56:	6a3b      	ldr	r3, [r7, #32]
 800db58:	2107      	movs	r1, #7
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7fb ffdf 	bl	8009b1e <unlock_fs>
 800db60:	2307      	movs	r3, #7
 800db62:	e1c4      	b.n	800deee <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	2b04      	cmp	r3, #4
 800db6a:	f000 81ab 	beq.w	800dec4 <f_write+0x3d8>
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	18d1      	adds	r1, r2, r3
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db7e:	4613      	mov	r3, r2
 800db80:	4299      	cmp	r1, r3
 800db82:	f080 819f 	bcs.w	800dec4 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db8c:	4613      	mov	r3, r2
 800db8e:	43db      	mvns	r3, r3
 800db90:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800db92:	e197      	b.n	800dec4 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800db9a:	6a3b      	ldr	r3, [r7, #32]
 800db9c:	899b      	ldrh	r3, [r3, #12]
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	2200      	movs	r2, #0
 800dba2:	461d      	mov	r5, r3
 800dba4:	4616      	mov	r6, r2
 800dba6:	462a      	mov	r2, r5
 800dba8:	4633      	mov	r3, r6
 800dbaa:	f7f2 ffff 	bl	8000bac <__aeabi_uldivmod>
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	f040 8128 	bne.w	800de04 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	899b      	ldrh	r3, [r3, #12]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	60bb      	str	r3, [r7, #8]
 800dbc4:	60fa      	str	r2, [r7, #12]
 800dbc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dbca:	f7f2 ffef 	bl	8000bac <__aeabi_uldivmod>
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	6a3b      	ldr	r3, [r7, #32]
 800dbd4:	895b      	ldrh	r3, [r3, #10]
 800dbd6:	3b01      	subs	r3, #1
 800dbd8:	4013      	ands	r3, r2
 800dbda:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800dbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d150      	bne.n	800dc84 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	d10c      	bne.n	800dc06 <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800dbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d11a      	bne.n	800dc2e <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fc fe99 	bl	800a934 <create_chain>
 800dc02:	63b8      	str	r0, [r7, #56]	@ 0x38
 800dc04:	e013      	b.n	800dc2e <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d007      	beq.n	800dc1e <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc0e:	69fb      	ldr	r3, [r7, #28]
 800dc10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc14:	69f8      	ldr	r0, [r7, #28]
 800dc16:	f7fc ff8e 	bl	800ab36 <clmt_clust>
 800dc1a:	63b8      	str	r0, [r7, #56]	@ 0x38
 800dc1c:	e007      	b.n	800dc2e <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dc1e:	69fa      	ldr	r2, [r7, #28]
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc24:	4619      	mov	r1, r3
 800dc26:	4610      	mov	r0, r2
 800dc28:	f7fc fe84 	bl	800a934 <create_chain>
 800dc2c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f000 814c 	beq.w	800dece <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d10a      	bne.n	800dc52 <f_write+0x166>
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dc44:	6a3b      	ldr	r3, [r7, #32]
 800dc46:	2102      	movs	r1, #2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fb ff68 	bl	8009b1e <unlock_fs>
 800dc4e:	2302      	movs	r3, #2
 800dc50:	e14d      	b.n	800deee <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc58:	d10a      	bne.n	800dc70 <f_write+0x184>
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dc62:	6a3b      	ldr	r3, [r7, #32]
 800dc64:	2101      	movs	r1, #1
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fb ff59 	bl	8009b1e <unlock_fs>
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e13e      	b.n	800deee <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc74:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	689b      	ldr	r3, [r3, #8]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d102      	bne.n	800dc84 <f_write+0x198>
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc82:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc8a:	b25b      	sxtb	r3, r3
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	da20      	bge.n	800dcd2 <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc90:	6a3b      	ldr	r3, [r7, #32]
 800dc92:	7858      	ldrb	r0, [r3, #1]
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc9e:	2301      	movs	r3, #1
 800dca0:	f7fb fc86 	bl	80095b0 <disk_write>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00a      	beq.n	800dcc0 <f_write+0x1d4>
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	2201      	movs	r2, #1
 800dcae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dcb2:	6a3b      	ldr	r3, [r7, #32]
 800dcb4:	2101      	movs	r1, #1
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fb ff31 	bl	8009b1e <unlock_fs>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e116      	b.n	800deee <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcc0:	69fb      	ldr	r3, [r7, #28]
 800dcc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dcc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dcd2:	6a3a      	ldr	r2, [r7, #32]
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcd8:	4619      	mov	r1, r3
 800dcda:	4610      	mov	r0, r2
 800dcdc:	f7fc f988 	bl	8009ff0 <clust2sect>
 800dce0:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10a      	bne.n	800dcfe <f_write+0x212>
 800dce8:	69fb      	ldr	r3, [r7, #28]
 800dcea:	2202      	movs	r2, #2
 800dcec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dcf0:	6a3b      	ldr	r3, [r7, #32]
 800dcf2:	2102      	movs	r1, #2
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fb ff12 	bl	8009b1e <unlock_fs>
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	e0f7      	b.n	800deee <f_write+0x402>
			sect += csect;
 800dcfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd02:	4413      	add	r3, r2
 800dd04:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	899b      	ldrh	r3, [r3, #12]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd12:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d04b      	beq.n	800ddb2 <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1e:	4413      	add	r3, r2
 800dd20:	6a3a      	ldr	r2, [r7, #32]
 800dd22:	8952      	ldrh	r2, [r2, #10]
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d905      	bls.n	800dd34 <f_write+0x248>
					cc = fs->csize - csect;
 800dd28:	6a3b      	ldr	r3, [r7, #32]
 800dd2a:	895b      	ldrh	r3, [r3, #10]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	7858      	ldrb	r0, [r3, #1]
 800dd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd3e:	f7fb fc37 	bl	80095b0 <disk_write>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d00a      	beq.n	800dd5e <f_write+0x272>
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dd50:	6a3b      	ldr	r3, [r7, #32]
 800dd52:	2101      	movs	r1, #1
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7fb fee2 	bl	8009b1e <unlock_fs>
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	e0c7      	b.n	800deee <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d91a      	bls.n	800dda2 <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	6a3a      	ldr	r2, [r7, #32]
 800dd7c:	8992      	ldrh	r2, [r2, #12]
 800dd7e:	fb02 f303 	mul.w	r3, r2, r3
 800dd82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd84:	18d1      	adds	r1, r2, r3
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	899b      	ldrh	r3, [r3, #12]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	f7fb fe33 	bl	80099f6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dda2:	6a3b      	ldr	r3, [r7, #32]
 800dda4:	899b      	ldrh	r3, [r3, #12]
 800dda6:	461a      	mov	r2, r3
 800dda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddaa:	fb02 f303 	mul.w	r3, r2, r3
 800ddae:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800ddb0:	e05d      	b.n	800de6e <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d020      	beq.n	800ddfe <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ddc8:	4290      	cmp	r0, r2
 800ddca:	eb71 0303 	sbcs.w	r3, r1, r3
 800ddce:	d216      	bcs.n	800ddfe <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	7858      	ldrb	r0, [r3, #1]
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ddda:	2301      	movs	r3, #1
 800dddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddde:	f7fb fbc7 	bl	8009570 <disk_read>
 800dde2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00a      	beq.n	800ddfe <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	2101      	movs	r1, #1
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fb fe92 	bl	8009b1e <unlock_fs>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e077      	b.n	800deee <f_write+0x402>
			}
#endif
			fp->sect = sect;
 800ddfe:	69fb      	ldr	r3, [r7, #28]
 800de00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de02:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de04:	6a3b      	ldr	r3, [r7, #32]
 800de06:	899b      	ldrh	r3, [r3, #12]
 800de08:	4618      	mov	r0, r3
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800de10:	6a3b      	ldr	r3, [r7, #32]
 800de12:	899b      	ldrh	r3, [r3, #12]
 800de14:	fbb2 f1f3 	udiv	r1, r2, r3
 800de18:	fb01 f303 	mul.w	r3, r1, r3
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	1ac3      	subs	r3, r0, r3
 800de20:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800de22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	429a      	cmp	r2, r3
 800de28:	d901      	bls.n	800de2e <f_write+0x342>
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800de3a:	6a3b      	ldr	r3, [r7, #32]
 800de3c:	899b      	ldrh	r3, [r3, #12]
 800de3e:	b29b      	uxth	r3, r3
 800de40:	2200      	movs	r2, #0
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	607a      	str	r2, [r7, #4]
 800de46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de4a:	f7f2 feaf 	bl	8000bac <__aeabi_uldivmod>
 800de4e:	4613      	mov	r3, r2
 800de50:	4423      	add	r3, r4
 800de52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de56:	4618      	mov	r0, r3
 800de58:	f7fb fdcd 	bl	80099f6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800de66:	b2da      	uxtb	r2, r3
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800de6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de72:	4413      	add	r3, r2
 800de74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800de7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800de7e:	2000      	movs	r0, #0
 800de80:	4688      	mov	r8, r1
 800de82:	4681      	mov	r9, r0
 800de84:	eb12 0a08 	adds.w	sl, r2, r8
 800de88:	eb43 0b09 	adc.w	fp, r3, r9
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800de9e:	4290      	cmp	r0, r2
 800dea0:	eb71 0403 	sbcs.w	r4, r1, r3
 800dea4:	d201      	bcs.n	800deaa <f_write+0x3be>
 800dea6:	4610      	mov	r0, r2
 800dea8:	4619      	mov	r1, r3
 800deaa:	69fb      	ldr	r3, [r7, #28]
 800deac:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deb6:	441a      	add	r2, r3
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	697a      	ldr	r2, [r7, #20]
 800debe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f47f ae64 	bne.w	800db94 <f_write+0xa8>
 800decc:	e000      	b.n	800ded0 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dece:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ded6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800dee2:	6a3b      	ldr	r3, [r7, #32]
 800dee4:	2100      	movs	r1, #0
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fb fe19 	bl	8009b1e <unlock_fs>
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3744      	adds	r7, #68	@ 0x44
 800def2:	46bd      	mov	sp, r7
 800def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800def8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b09c      	sub	sp, #112	@ 0x70
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800df06:	4611      	mov	r1, r2
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff f887 	bl	800d01c <validate>
 800df0e:	4603      	mov	r3, r0
 800df10:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800df14:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f040 8123 	bne.w	800e164 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 811b 	beq.w	800e164 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df34:	b25b      	sxtb	r3, r3
 800df36:	2b00      	cmp	r3, #0
 800df38:	da1c      	bge.n	800df74 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df3c:	7858      	ldrb	r0, [r3, #1]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df48:	2301      	movs	r3, #1
 800df4a:	f7fb fb31 	bl	80095b0 <disk_write>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d006      	beq.n	800df62 <f_sync+0x6a>
 800df54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df56:	2101      	movs	r1, #1
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fb fde0 	bl	8009b1e <unlock_fs>
 800df5e:	2301      	movs	r3, #1
 800df60:	e109      	b.n	800e176 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df6c:	b2da      	uxtb	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800df74:	f7fb fa5c 	bl	8009430 <get_fattime>
 800df78:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800df7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	2b04      	cmp	r3, #4
 800df80:	f040 80a5 	bne.w	800e0ce <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4618      	mov	r0, r3
 800df88:	f7fc fbc0 	bl	800a70c <fill_first_frag>
 800df8c:	4603      	mov	r3, r0
 800df8e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800df92:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10a      	bne.n	800dfb0 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfa0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	f7fc fbe0 	bl	800a76a <fill_last_frag>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800dfb0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f040 80d5 	bne.w	800e164 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 800dfba:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800dfbe:	f001 f85f 	bl	800f080 <ff_memalloc>
 800dfc2:	6638      	str	r0, [r7, #96]	@ 0x60
 800dfc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <f_sync+0xe0>
 800dfca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfcc:	2111      	movs	r1, #17
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fb fda5 	bl	8009b1e <unlock_fs>
 800dfd4:	2311      	movs	r3, #17
 800dfd6:	e0ce      	b.n	800e176 <f_sync+0x27e>
 800dfd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfda:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dfdc:	611a      	str	r2, [r3, #16]
 800dfde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dfe2:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800dfe6:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	f107 0308 	add.w	r3, r7, #8
 800dfee:	4611      	mov	r1, r2
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fd fb93 	bl	800b71c <load_obj_dir>
 800dff6:	4603      	mov	r3, r0
 800dff8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800dffc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e000:	2b00      	cmp	r3, #0
 800e002:	d160      	bne.n	800e0c6 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e006:	695b      	ldr	r3, [r3, #20]
 800e008:	3304      	adds	r3, #4
 800e00a:	781a      	ldrb	r2, [r3, #0]
 800e00c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	3304      	adds	r3, #4
 800e012:	f042 0220 	orr.w	r2, r2, #32
 800e016:	b2d2      	uxtb	r2, r2
 800e018:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	79da      	ldrb	r2, [r3, #7]
 800e01e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e020:	695b      	ldr	r3, [r3, #20]
 800e022:	3321      	adds	r3, #33	@ 0x21
 800e024:	f042 0201 	orr.w	r2, r2, #1
 800e028:	b2d2      	uxtb	r2, r2
 800e02a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e02c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e02e:	695b      	ldr	r3, [r3, #20]
 800e030:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	4619      	mov	r1, r3
 800e03a:	4610      	mov	r0, r2
 800e03c:	f7fb fc27 	bl	800988e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e042:	695b      	ldr	r3, [r3, #20]
 800e044:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e04e:	4608      	mov	r0, r1
 800e050:	f7fb fc49 	bl	80098e6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e054:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e056:	695b      	ldr	r3, [r3, #20]
 800e058:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e062:	4608      	mov	r0, r1
 800e064:	f7fb fc3f 	bl	80098e6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e068:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e06a:	695b      	ldr	r3, [r3, #20]
 800e06c:	330c      	adds	r3, #12
 800e06e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e070:	4618      	mov	r0, r3
 800e072:	f7fb fc0c 	bl	800988e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	3315      	adds	r3, #21
 800e07c:	2200      	movs	r2, #0
 800e07e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	3310      	adds	r3, #16
 800e086:	2100      	movs	r1, #0
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fb fc00 	bl	800988e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e08e:	f107 0308 	add.w	r3, r7, #8
 800e092:	4618      	mov	r0, r3
 800e094:	f7fd fb78 	bl	800b788 <store_xdir>
 800e098:	4603      	mov	r3, r0
 800e09a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800e09e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10f      	bne.n	800e0c6 <f_sync+0x1ce>
							res = sync_fs(fs);
 800e0a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fb ff31 	bl	8009f10 <sync_fs>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e0ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800e0c6:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e0c8:	f000 ffe6 	bl	800f098 <ff_memfree>
 800e0cc:	e04a      	b.n	800e164 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e0ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	4610      	mov	r0, r2
 800e0d8:	f7fb feec 	bl	8009eb4 <move_window>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800e0e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d13c      	bne.n	800e164 <f_sync+0x26c>
					dir = fp->dir_ptr;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0ee:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e0f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0f2:	330b      	adds	r3, #11
 800e0f4:	781a      	ldrb	r2, [r3, #0]
 800e0f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0f8:	330b      	adds	r3, #11
 800e0fa:	f042 0220 	orr.w	r2, r2, #32
 800e0fe:	b2d2      	uxtb	r2, r2
 800e100:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6818      	ldr	r0, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	461a      	mov	r2, r3
 800e10c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e10e:	f7fc ff53 	bl	800afb8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e112:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e114:	f103 001c 	add.w	r0, r3, #28
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e11e:	4613      	mov	r3, r2
 800e120:	4619      	mov	r1, r3
 800e122:	f7fb fbb4 	bl	800988e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e126:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e128:	3316      	adds	r3, #22
 800e12a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fb fbae 	bl	800988e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e134:	3312      	adds	r3, #18
 800e136:	2100      	movs	r1, #0
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fb fb8d 	bl	8009858 <st_word>
					fs->wflag = 1;
 800e13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e140:	2201      	movs	r2, #1
 800e142:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e146:	4618      	mov	r0, r3
 800e148:	f7fb fee2 	bl	8009f10 <sync_fs>
 800e14c:	4603      	mov	r3, r0
 800e14e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e166:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800e16a:	4611      	mov	r1, r2
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fb fcd6 	bl	8009b1e <unlock_fs>
 800e172:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800e176:	4618      	mov	r0, r3
 800e178:	3770      	adds	r7, #112	@ 0x70
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b084      	sub	sp, #16
 800e182:	af00      	add	r7, sp, #0
 800e184:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7ff feb6 	bl	800def8 <f_sync>
 800e18c:	4603      	mov	r3, r0
 800e18e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d11d      	bne.n	800e1d2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f107 0208 	add.w	r2, r7, #8
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fe ff3c 	bl	800d01c <validate>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d111      	bne.n	800e1d2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fb fdda 	bl	8009d6c <dec_lock>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e1bc:	7bfb      	ldrb	r3, [r7, #15]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d102      	bne.n	800e1c8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fb fca6 	bl	8009b1e <unlock_fs>
#endif
		}
	}
	return res;
 800e1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e1dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1e0:	b0ba      	sub	sp, #232	@ 0xe8
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800e1e8:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e1ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e1f0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	f7fe ff10 	bl	800d01c <validate>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e202:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e206:	2b00      	cmp	r3, #0
 800e208:	d105      	bne.n	800e216 <f_lseek+0x3a>
 800e20a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e20e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e212:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800e216:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d111      	bne.n	800e242 <f_lseek+0x66>
 800e21e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	2b04      	cmp	r3, #4
 800e226:	d10c      	bne.n	800e242 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e228:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800e22c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e232:	f04f 32ff 	mov.w	r2, #4294967295
 800e236:	4619      	mov	r1, r3
 800e238:	f7fc fa97 	bl	800a76a <fill_last_frag>
 800e23c:	4603      	mov	r3, r0
 800e23e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e242:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e246:	2b00      	cmp	r3, #0
 800e248:	d00a      	beq.n	800e260 <f_lseek+0x84>
 800e24a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e24e:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800e252:	4611      	mov	r1, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f7fb fc62 	bl	8009b1e <unlock_fs>
 800e25a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e25e:	e3fb      	b.n	800ea58 <f_lseek+0x87c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e260:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e266:	2b00      	cmp	r3, #0
 800e268:	f000 8170 	beq.w	800e54c <f_lseek+0x370>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e26c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e274:	bf08      	it	eq
 800e276:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800e27a:	f040 8093 	bne.w	800e3a4 <f_lseek+0x1c8>
			tbl = fp->cltbl;
 800e27e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e284:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e28c:	1d1a      	adds	r2, r3, #4
 800e28e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e298:	2302      	movs	r3, #2
 800e29a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e29e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (cl) {
 800e2a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d064      	beq.n	800e37a <f_lseek+0x19e>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e2b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e2be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e2c2:	3302      	adds	r3, #2
 800e2c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					do {
						pcl = cl; ncl++;
 800e2c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e2d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						cl = get_fat(&fp->obj, cl);
 800e2da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2de:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fb fea4 	bl	800a030 <get_fat>
 800e2e8:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e2ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d80c      	bhi.n	800e30e <f_lseek+0x132>
 800e2f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2f8:	2202      	movs	r2, #2
 800e2fa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e2fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e302:	2102      	movs	r1, #2
 800e304:	4618      	mov	r0, r3
 800e306:	f7fb fc0a 	bl	8009b1e <unlock_fs>
 800e30a:	2302      	movs	r3, #2
 800e30c:	e3a4      	b.n	800ea58 <f_lseek+0x87c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e30e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e316:	d10c      	bne.n	800e332 <f_lseek+0x156>
 800e318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e326:	2101      	movs	r1, #1
 800e328:	4618      	mov	r0, r3
 800e32a:	f7fb fbf8 	bl	8009b1e <unlock_fs>
 800e32e:	2301      	movs	r3, #1
 800e330:	e392      	b.n	800ea58 <f_lseek+0x87c>
					} while (cl == pcl + 1);
 800e332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e336:	3301      	adds	r3, #1
 800e338:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d0c3      	beq.n	800e2c8 <f_lseek+0xec>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e340:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e348:	429a      	cmp	r2, r3
 800e34a:	d80f      	bhi.n	800e36c <f_lseek+0x190>
						*tbl++ = ncl; *tbl++ = tcl;
 800e34c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e350:	1d1a      	adds	r2, r3, #4
 800e352:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e356:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e360:	1d1a      	adds	r2, r3, #4
 800e362:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e36a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e36c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e372:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800e376:	429a      	cmp	r2, r3
 800e378:	d39a      	bcc.n	800e2b0 <f_lseek+0xd4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e37a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e37e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e380:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e384:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e38a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e38e:	429a      	cmp	r2, r3
 800e390:	d804      	bhi.n	800e39c <f_lseek+0x1c0>
				*tbl = 0;		/* Terminate table */
 800e392:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e396:	2200      	movs	r2, #0
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	e353      	b.n	800ea44 <f_lseek+0x868>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e39c:	2311      	movs	r3, #17
 800e39e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800e3a2:	e34f      	b.n	800ea44 <f_lseek+0x868>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e3a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e3ac:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e3b0:	4290      	cmp	r0, r2
 800e3b2:	eb71 0303 	sbcs.w	r3, r1, r3
 800e3b6:	d205      	bcs.n	800e3c4 <f_lseek+0x1e8>
 800e3b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e3c0:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			fp->fptr = ofs;				/* Set file pointer */
 800e3c4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e3c8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e3cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			if (ofs) {
 800e3d0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	f000 8335 	beq.w	800ea44 <f_lseek+0x868>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e3da:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e3de:	f112 38ff 	adds.w	r8, r2, #4294967295
 800e3e2:	f143 39ff 	adc.w	r9, r3, #4294967295
 800e3e6:	4642      	mov	r2, r8
 800e3e8:	464b      	mov	r3, r9
 800e3ea:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800e3ee:	f7fc fba2 	bl	800ab36 <clmt_clust>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3f8:	641a      	str	r2, [r3, #64]	@ 0x40
				dsc = clust2sect(fs, fp->clust);
 800e3fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e3fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e404:	4619      	mov	r1, r3
 800e406:	4610      	mov	r0, r2
 800e408:	f7fb fdf2 	bl	8009ff0 <clust2sect>
 800e40c:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10c      	bne.n	800e432 <f_lseek+0x256>
 800e418:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e41c:	2202      	movs	r2, #2
 800e41e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e426:	2102      	movs	r1, #2
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fb fb78 	bl	8009b1e <unlock_fs>
 800e42e:	2302      	movs	r3, #2
 800e430:	e312      	b.n	800ea58 <f_lseek+0x87c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e432:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e436:	1e54      	subs	r4, r2, #1
 800e438:	f143 35ff 	adc.w	r5, r3, #4294967295
 800e43c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e440:	899b      	ldrh	r3, [r3, #12]
 800e442:	b29b      	uxth	r3, r3
 800e444:	2200      	movs	r2, #0
 800e446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e44a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e44e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800e452:	4620      	mov	r0, r4
 800e454:	4629      	mov	r1, r5
 800e456:	f7f2 fba9 	bl	8000bac <__aeabi_uldivmod>
 800e45a:	4602      	mov	r2, r0
 800e45c:	460b      	mov	r3, r1
 800e45e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e462:	895b      	ldrh	r3, [r3, #10]
 800e464:	3b01      	subs	r3, #1
 800e466:	4013      	ands	r3, r2
 800e468:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e46c:	4413      	add	r3, r2
 800e46e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e476:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e47a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e47e:	899b      	ldrh	r3, [r3, #12]
 800e480:	b29b      	uxth	r3, r3
 800e482:	2200      	movs	r2, #0
 800e484:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e488:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e48c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e490:	f7f2 fb8c 	bl	8000bac <__aeabi_uldivmod>
 800e494:	4313      	orrs	r3, r2
 800e496:	f000 82d5 	beq.w	800ea44 <f_lseek+0x868>
 800e49a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e49e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	f000 82cd 	beq.w	800ea44 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e4aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4b2:	b25b      	sxtb	r3, r3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	da27      	bge.n	800e508 <f_lseek+0x32c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4bc:	7858      	ldrb	r0, [r3, #1]
 800e4be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4c2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e4c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	f7fb f86f 	bl	80095b0 <disk_write>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d00c      	beq.n	800e4f2 <f_lseek+0x316>
 800e4d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4dc:	2201      	movs	r2, #1
 800e4de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e4e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fb fb18 	bl	8009b1e <unlock_fs>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e2b2      	b.n	800ea58 <f_lseek+0x87c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e4f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e504:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e50c:	7858      	ldrb	r0, [r3, #1]
 800e50e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e512:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e516:	2301      	movs	r3, #1
 800e518:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e51c:	f7fb f828 	bl	8009570 <disk_read>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00c      	beq.n	800e540 <f_lseek+0x364>
 800e526:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e530:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e534:	2101      	movs	r1, #1
 800e536:	4618      	mov	r0, r3
 800e538:	f7fb faf1 	bl	8009b1e <unlock_fs>
 800e53c:	2301      	movs	r3, #1
 800e53e:	e28b      	b.n	800ea58 <f_lseek+0x87c>
#endif
					fp->sect = dsc;
 800e540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e544:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e548:	645a      	str	r2, [r3, #68]	@ 0x44
 800e54a:	e27b      	b.n	800ea44 <f_lseek+0x868>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800e54c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	2b04      	cmp	r3, #4
 800e554:	d009      	beq.n	800e56a <f_lseek+0x38e>
 800e556:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d305      	bcc.n	800e56a <f_lseek+0x38e>
 800e55e:	f04f 32ff 	mov.w	r2, #4294967295
 800e562:	f04f 0300 	mov.w	r3, #0
 800e566:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e56a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e56e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e572:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e576:	4290      	cmp	r0, r2
 800e578:	eb71 0303 	sbcs.w	r3, r1, r3
 800e57c:	d20d      	bcs.n	800e59a <f_lseek+0x3be>
 800e57e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e582:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e586:	f003 0302 	and.w	r3, r3, #2
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d105      	bne.n	800e59a <f_lseek+0x3be>
			ofs = fp->obj.objsize;
 800e58e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e592:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e596:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		}
		ifptr = fp->fptr;
 800e59a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e59e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e5a2:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		fp->fptr = nsect = 0;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e5ac:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e5b0:	f04f 0200 	mov.w	r2, #0
 800e5b4:	f04f 0300 	mov.w	r3, #0
 800e5b8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 800e5bc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	f000 81b8 	beq.w	800e936 <f_lseek+0x75a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e5c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5ca:	895b      	ldrh	r3, [r3, #10]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5d2:	899b      	ldrh	r3, [r3, #12]
 800e5d4:	fb02 f303 	mul.w	r3, r2, r3
 800e5d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			if (ifptr > 0 &&
 800e5dc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	d069      	beq.n	800e6b8 <f_lseek+0x4dc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e5e4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e5e8:	1e51      	subs	r1, r2, #1
 800e5ea:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800e5ee:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e5f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e5f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e5fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e600:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800e604:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e608:	f7f2 fad0 	bl	8000bac <__aeabi_uldivmod>
 800e60c:	4602      	mov	r2, r0
 800e60e:	460b      	mov	r3, r1
 800e610:	4614      	mov	r4, r2
 800e612:	461d      	mov	r5, r3
 800e614:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e618:	1e51      	subs	r1, r2, #1
 800e61a:	6739      	str	r1, [r7, #112]	@ 0x70
 800e61c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e620:	677b      	str	r3, [r7, #116]	@ 0x74
 800e622:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e626:	2200      	movs	r2, #0
 800e628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e62a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e62c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800e630:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800e634:	f7f2 faba 	bl	8000bac <__aeabi_uldivmod>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800e63c:	4294      	cmp	r4, r2
 800e63e:	eb75 0303 	sbcs.w	r3, r5, r3
 800e642:	d339      	bcc.n	800e6b8 <f_lseek+0x4dc>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e644:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e648:	1e51      	subs	r1, r2, #1
 800e64a:	6639      	str	r1, [r7, #96]	@ 0x60
 800e64c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e650:	667b      	str	r3, [r7, #100]	@ 0x64
 800e652:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e656:	3b01      	subs	r3, #1
 800e658:	2200      	movs	r2, #0
 800e65a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e65c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e65e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e662:	460b      	mov	r3, r1
 800e664:	ea6f 0a03 	mvn.w	sl, r3
 800e668:	4613      	mov	r3, r2
 800e66a:	ea6f 0b03 	mvn.w	fp, r3
 800e66e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e672:	460b      	mov	r3, r1
 800e674:	ea03 030a 	and.w	r3, r3, sl
 800e678:	653b      	str	r3, [r7, #80]	@ 0x50
 800e67a:	4613      	mov	r3, r2
 800e67c:	ea03 030b 	and.w	r3, r3, fp
 800e680:	657b      	str	r3, [r7, #84]	@ 0x54
 800e682:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e686:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e68a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800e68e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e692:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e696:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e69a:	1a14      	subs	r4, r2, r0
 800e69c:	60bc      	str	r4, [r7, #8]
 800e69e:	eb63 0301 	sbc.w	r3, r3, r1
 800e6a2:	60fb      	str	r3, [r7, #12]
 800e6a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e6a8:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
				clst = fp->clust;
 800e6ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e6b6:	e03d      	b.n	800e734 <f_lseek+0x558>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e6b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d12f      	bne.n	800e72a <f_lseek+0x54e>
					clst = create_chain(&fp->obj, 0);
 800e6ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fc f92f 	bl	800a934 <create_chain>
 800e6d6:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e6da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d10c      	bne.n	800e6fc <f_lseek+0x520>
 800e6e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e6ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e6f0:	2102      	movs	r1, #2
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fb fa13 	bl	8009b1e <unlock_fs>
 800e6f8:	2302      	movs	r3, #2
 800e6fa:	e1ad      	b.n	800ea58 <f_lseek+0x87c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e704:	d10c      	bne.n	800e720 <f_lseek+0x544>
 800e706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e70a:	2201      	movs	r2, #1
 800e70c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e710:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e714:	2101      	movs	r1, #1
 800e716:	4618      	mov	r0, r3
 800e718:	f7fb fa01 	bl	8009b1e <unlock_fs>
 800e71c:	2301      	movs	r3, #1
 800e71e:	e19b      	b.n	800ea58 <f_lseek+0x87c>
					fp->obj.sclust = clst;
 800e720:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e728:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800e72a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e732:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800e734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f000 80fc 	beq.w	800e936 <f_lseek+0x75a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e73e:	e09c      	b.n	800e87a <f_lseek+0x69e>
					ofs -= bcs; fp->fptr += bcs;
 800e740:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e744:	2200      	movs	r2, #0
 800e746:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e748:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e74a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e74e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800e752:	4621      	mov	r1, r4
 800e754:	1a51      	subs	r1, r2, r1
 800e756:	6039      	str	r1, [r7, #0]
 800e758:	4629      	mov	r1, r5
 800e75a:	eb63 0301 	sbc.w	r3, r3, r1
 800e75e:	607b      	str	r3, [r7, #4]
 800e760:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e764:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
 800e768:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e76c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e770:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800e774:	2000      	movs	r0, #0
 800e776:	6439      	str	r1, [r7, #64]	@ 0x40
 800e778:	6478      	str	r0, [r7, #68]	@ 0x44
 800e77a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e77e:	4621      	mov	r1, r4
 800e780:	1851      	adds	r1, r2, r1
 800e782:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e784:	4629      	mov	r1, r5
 800e786:	414b      	adcs	r3, r1
 800e788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e78a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e78e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e792:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e79a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e79e:	f003 0302 	and.w	r3, r3, #2
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d031      	beq.n	800e80a <f_lseek+0x62e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800e7a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7aa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e7ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e7b6:	4282      	cmp	r2, r0
 800e7b8:	418b      	sbcs	r3, r1
 800e7ba:	d212      	bcs.n	800e7e2 <f_lseek+0x606>
							fp->obj.objsize = fp->fptr;
 800e7bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e7c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7c8:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800e7cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e7d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e7de:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e7e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7e6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7fc f8a2 	bl	800a934 <create_chain>
 800e7f0:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10f      	bne.n	800e81c <f_lseek+0x640>
							ofs = 0; break;
 800e7fc:	f04f 0200 	mov.w	r2, #0
 800e800:	f04f 0300 	mov.w	r3, #0
 800e804:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800e808:	e047      	b.n	800e89a <f_lseek+0x6be>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e80a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e80e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e812:	4618      	mov	r0, r3
 800e814:	f7fb fc0c 	bl	800a030 <get_fat>
 800e818:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e824:	d10c      	bne.n	800e840 <f_lseek+0x664>
 800e826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e834:	2101      	movs	r1, #1
 800e836:	4618      	mov	r0, r3
 800e838:	f7fb f971 	bl	8009b1e <unlock_fs>
 800e83c:	2301      	movs	r3, #1
 800e83e:	e10b      	b.n	800ea58 <f_lseek+0x87c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e844:	2b01      	cmp	r3, #1
 800e846:	d906      	bls.n	800e856 <f_lseek+0x67a>
 800e848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e84c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e84e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e852:	4293      	cmp	r3, r2
 800e854:	d30c      	bcc.n	800e870 <f_lseek+0x694>
 800e856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e85a:	2202      	movs	r2, #2
 800e85c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e860:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e864:	2102      	movs	r1, #2
 800e866:	4618      	mov	r0, r3
 800e868:	f7fb f959 	bl	8009b1e <unlock_fs>
 800e86c:	2302      	movs	r3, #2
 800e86e:	e0f3      	b.n	800ea58 <f_lseek+0x87c>
					fp->clust = clst;
 800e870:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e878:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800e87a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e87e:	2200      	movs	r2, #0
 800e880:	633b      	str	r3, [r7, #48]	@ 0x30
 800e882:	637a      	str	r2, [r7, #52]	@ 0x34
 800e884:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e888:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e88c:	4621      	mov	r1, r4
 800e88e:	4291      	cmp	r1, r2
 800e890:	4629      	mov	r1, r5
 800e892:	eb71 0303 	sbcs.w	r3, r1, r3
 800e896:	f4ff af53 	bcc.w	800e740 <f_lseek+0x564>
				}
				fp->fptr += ofs;
 800e89a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e89e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e8a2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e8a6:	1884      	adds	r4, r0, r2
 800e8a8:	62bc      	str	r4, [r7, #40]	@ 0x28
 800e8aa:	eb41 0303 	adc.w	r3, r1, r3
 800e8ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e8b8:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800e8bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8c0:	899b      	ldrh	r3, [r3, #12]
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	623b      	str	r3, [r7, #32]
 800e8c8:	627a      	str	r2, [r7, #36]	@ 0x24
 800e8ca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e8ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e8d2:	f7f2 f96b 	bl	8000bac <__aeabi_uldivmod>
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	d02d      	beq.n	800e936 <f_lseek+0x75a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e8da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8de:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fb fb84 	bl	8009ff0 <clust2sect>
 800e8e8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e8ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10c      	bne.n	800e90e <f_lseek+0x732>
 800e8f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8f8:	2202      	movs	r2, #2
 800e8fa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e8fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e902:	2102      	movs	r1, #2
 800e904:	4618      	mov	r0, r3
 800e906:	f7fb f90a 	bl	8009b1e <unlock_fs>
 800e90a:	2302      	movs	r3, #2
 800e90c:	e0a4      	b.n	800ea58 <f_lseek+0x87c>
					nsect += (DWORD)(ofs / SS(fs));
 800e90e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e912:	899b      	ldrh	r3, [r3, #12]
 800e914:	b29b      	uxth	r3, r3
 800e916:	2200      	movs	r2, #0
 800e918:	61bb      	str	r3, [r7, #24]
 800e91a:	61fa      	str	r2, [r7, #28]
 800e91c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e924:	f7f2 f942 	bl	8000bac <__aeabi_uldivmod>
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e930:	4413      	add	r3, r2
 800e932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e93a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e93e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e942:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800e946:	4290      	cmp	r0, r2
 800e948:	eb71 0303 	sbcs.w	r3, r1, r3
 800e94c:	d212      	bcs.n	800e974 <f_lseek+0x798>
			fp->obj.objsize = fp->fptr;
 800e94e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e952:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e956:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e95a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800e95e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e962:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e970:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e974:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e978:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e97c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e980:	899b      	ldrh	r3, [r3, #12]
 800e982:	b29b      	uxth	r3, r3
 800e984:	2200      	movs	r2, #0
 800e986:	613b      	str	r3, [r7, #16]
 800e988:	617a      	str	r2, [r7, #20]
 800e98a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e98e:	f7f2 f90d 	bl	8000bac <__aeabi_uldivmod>
 800e992:	4313      	orrs	r3, r2
 800e994:	d056      	beq.n	800ea44 <f_lseek+0x868>
 800e996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e99a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e99c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d04f      	beq.n	800ea44 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e9a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9ac:	b25b      	sxtb	r3, r3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	da27      	bge.n	800ea02 <f_lseek+0x826>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e9b6:	7858      	ldrb	r0, [r3, #1]
 800e9b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9bc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e9c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	f7fa fdf2 	bl	80095b0 <disk_write>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00c      	beq.n	800e9ec <f_lseek+0x810>
 800e9d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e9dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7fb f89b 	bl	8009b1e <unlock_fs>
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	e035      	b.n	800ea58 <f_lseek+0x87c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e9ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9f8:	b2da      	uxtb	r2, r3
 800e9fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea06:	7858      	ldrb	r0, [r3, #1]
 800ea08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea0c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ea10:	2301      	movs	r3, #1
 800ea12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ea16:	f7fa fdab 	bl	8009570 <disk_read>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d00c      	beq.n	800ea3a <f_lseek+0x85e>
 800ea20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea24:	2201      	movs	r2, #1
 800ea26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ea2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea2e:	2101      	movs	r1, #1
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fb f874 	bl	8009b1e <unlock_fs>
 800ea36:	2301      	movs	r3, #1
 800ea38:	e00e      	b.n	800ea58 <f_lseek+0x87c>
#endif
			fp->sect = nsect;
 800ea3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ea42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800ea44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea48:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800ea4c:	4611      	mov	r1, r2
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fb f865 	bl	8009b1e <unlock_fs>
 800ea54:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	37e8      	adds	r7, #232	@ 0xe8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ea62 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b098      	sub	sp, #96	@ 0x60
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
 800ea6a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ea6c:	f107 0108 	add.w	r1, r7, #8
 800ea70:	1d3b      	adds	r3, r7, #4
 800ea72:	2200      	movs	r2, #0
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fd ff39 	bl	800c8ec <find_volume>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ea80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d139      	bne.n	800eafc <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 800ea88:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800ea8c:	f000 faf8 	bl	800f080 <ff_memalloc>
 800ea90:	65b8      	str	r0, [r7, #88]	@ 0x58
 800ea92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d106      	bne.n	800eaa6 <f_stat+0x44>
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	2111      	movs	r1, #17
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7fb f83e 	bl	8009b1e <unlock_fs>
 800eaa2:	2311      	movs	r3, #17
 800eaa4:	e033      	b.n	800eb0e <f_stat+0xac>
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eaaa:	611a      	str	r2, [r3, #16]
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eab0:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800eab4:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	f107 0308 	add.w	r3, r7, #8
 800eabc:	4611      	mov	r1, r2
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fd fdbe 	bl	800c640 <follow_path>
 800eac4:	4603      	mov	r3, r0
 800eac6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800eaca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d111      	bne.n	800eaf6 <f_stat+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ead2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ead6:	b25b      	sxtb	r3, r3
 800ead8:	2b00      	cmp	r3, #0
 800eada:	da03      	bge.n	800eae4 <f_stat+0x82>
				res = FR_INVALID_NAME;
 800eadc:	2306      	movs	r3, #6
 800eade:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eae2:	e008      	b.n	800eaf6 <f_stat+0x94>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d005      	beq.n	800eaf6 <f_stat+0x94>
 800eaea:	f107 0308 	add.w	r3, r7, #8
 800eaee:	6839      	ldr	r1, [r7, #0]
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fd faff 	bl	800c0f4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800eaf6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eaf8:	f000 face 	bl	800f098 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800eb02:	4611      	mov	r1, r2
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7fb f80a 	bl	8009b1e <unlock_fs>
 800eb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3760      	adds	r7, #96	@ 0x60
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b0bc      	sub	sp, #240	@ 0xf0
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eb24:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800eb28:	1d3b      	adds	r3, r7, #4
 800eb2a:	2202      	movs	r2, #2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7fd fedd 	bl	800c8ec <find_volume>
 800eb32:	4603      	mov	r3, r0
 800eb34:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	dj.obj.fs = fs;
 800eb38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if (res == FR_OK) {
 800eb3e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	f040 80e2 	bne.w	800ed0c <f_unlink+0x1f6>
		INIT_NAMBUF(fs);
 800eb48:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800eb4c:	f000 fa98 	bl	800f080 <ff_memalloc>
 800eb50:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 800eb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d106      	bne.n	800eb6a <f_unlink+0x54>
 800eb5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb5e:	2111      	movs	r1, #17
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fa ffdc 	bl	8009b1e <unlock_fs>
 800eb66:	2311      	movs	r3, #17
 800eb68:	e0d9      	b.n	800ed1e <f_unlink+0x208>
 800eb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb6c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb70:	611a      	str	r2, [r3, #16]
 800eb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb74:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb78:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800eb7c:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800eb84:	4611      	mov	r1, r2
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fd fd5a 	bl	800c640 <follow_path>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800eb92:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d108      	bne.n	800ebac <f_unlink+0x96>
 800eb9a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800eb9e:	2102      	movs	r1, #2
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7fa ffd7 	bl	8009b54 <chk_lock>
 800eba6:	4603      	mov	r3, r0
 800eba8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ebac:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	f040 80a7 	bne.w	800ed04 <f_unlink+0x1ee>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ebb6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ebba:	b25b      	sxtb	r3, r3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	da03      	bge.n	800ebc8 <f_unlink+0xb2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ebc0:	2306      	movs	r3, #6
 800ebc2:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 800ebc6:	e008      	b.n	800ebda <f_unlink+0xc4>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ebc8:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800ebcc:	f003 0301 	and.w	r3, r3, #1
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d002      	beq.n	800ebda <f_unlink+0xc4>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ebd4:	2307      	movs	r3, #7
 800ebd6:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				}
			}
			if (res == FR_OK) {
 800ebda:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d166      	bne.n	800ecb0 <f_unlink+0x19a>
#if _FS_EXFAT
				obj.fs = fs;
 800ebe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe4:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 800ebe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	2b04      	cmp	r3, #4
 800ebec:	d11d      	bne.n	800ec2a <f_unlink+0x114>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ebee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	3334      	adds	r3, #52	@ 0x34
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7fa fd31 	bl	800965c <ld_dword>
 800ebfa:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 800ebfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ec02:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ec04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec06:	695b      	ldr	r3, [r3, #20]
 800ec08:	3338      	adds	r3, #56	@ 0x38
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fa fd49 	bl	80096a2 <ld_qword>
 800ec10:	4602      	mov	r2, r0
 800ec12:	460b      	mov	r3, r1
 800ec14:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ec18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec1a:	695b      	ldr	r3, [r3, #20]
 800ec1c:	3321      	adds	r3, #33	@ 0x21
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	f003 0302 	and.w	r3, r3, #2
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	73fb      	strb	r3, [r7, #15]
 800ec28:	e008      	b.n	800ec3c <f_unlink+0x126>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ec2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec2c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800ec30:	4611      	mov	r1, r2
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fc f9a1 	bl	800af7a <ld_clust>
 800ec38:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ec3c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800ec40:	f003 0310 	and.w	r3, r3, #16
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d033      	beq.n	800ecb0 <f_unlink+0x19a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ec48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec4a:	643b      	str	r3, [r7, #64]	@ 0x40
						sdj.obj.sclust = dclst;
 800ec4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ec50:	64bb      	str	r3, [r7, #72]	@ 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 800ec52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec54:	781b      	ldrb	r3, [r3, #0]
 800ec56:	2b04      	cmp	r3, #4
 800ec58:	d106      	bne.n	800ec68 <f_unlink+0x152>
							sdj.obj.objsize = obj.objsize;
 800ec5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ec5e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
							sdj.obj.stat = obj.stat;
 800ec62:	7bfb      	ldrb	r3, [r7, #15]
 800ec64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ec68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fb ffad 	bl	800abce <dir_sdi>
 800ec74:	4603      	mov	r3, r0
 800ec76:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						if (res == FR_OK) {
 800ec7a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d116      	bne.n	800ecb0 <f_unlink+0x19a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ec82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ec86:	2100      	movs	r1, #0
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fc fe3f 	bl	800b90c <dir_read>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ec94:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d102      	bne.n	800eca2 <f_unlink+0x18c>
 800ec9c:	2307      	movs	r3, #7
 800ec9e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800eca2:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800eca6:	2b04      	cmp	r3, #4
 800eca8:	d102      	bne.n	800ecb0 <f_unlink+0x19a>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 800ecb0:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d125      	bne.n	800ed04 <f_unlink+0x1ee>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ecb8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fd f9c1 	bl	800c044 <dir_remove>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ecc8:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d10e      	bne.n	800ecee <f_unlink+0x1d8>
 800ecd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00a      	beq.n	800ecee <f_unlink+0x1d8>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 800ecd8:	f107 0308 	add.w	r3, r7, #8
 800ecdc:	2200      	movs	r2, #0
 800ecde:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7fb fd72 	bl	800a7cc <remove_chain>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ecee:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d106      	bne.n	800ed04 <f_unlink+0x1ee>
 800ecf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7fb f909 	bl	8009f10 <sync_fs>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			}
		}
		FREE_NAMBUF();
 800ed04:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ed08:	f000 f9c6 	bl	800f098 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800ed0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed0e:	f897 20ef 	ldrb.w	r2, [r7, #239]	@ 0xef
 800ed12:	4611      	mov	r1, r2
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7fa ff02 	bl	8009b1e <unlock_fs>
 800ed1a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	37f0      	adds	r7, #240	@ 0xf0
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b088      	sub	sp, #32
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	60f8      	str	r0, [r7, #12]
 800ed2e:	60b9      	str	r1, [r7, #8]
 800ed30:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ed3a:	e01c      	b.n	800ed76 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ed3c:	f107 0310 	add.w	r3, r7, #16
 800ed40:	f107 0114 	add.w	r1, r7, #20
 800ed44:	2201      	movs	r2, #1
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7fe fd09 	bl	800d75e <f_read>
		if (rc != 1) break;
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	2b01      	cmp	r3, #1
 800ed50:	d117      	bne.n	800ed82 <f_gets+0x5c>
		c = s[0];
 800ed52:	7d3b      	ldrb	r3, [r7, #20]
 800ed54:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ed56:	7dfb      	ldrb	r3, [r7, #23]
 800ed58:	2b0d      	cmp	r3, #13
 800ed5a:	d00b      	beq.n	800ed74 <f_gets+0x4e>
		*p++ = c;
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	61ba      	str	r2, [r7, #24]
 800ed62:	7dfa      	ldrb	r2, [r7, #23]
 800ed64:	701a      	strb	r2, [r3, #0]
		n++;
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
 800ed6e:	2b0a      	cmp	r3, #10
 800ed70:	d009      	beq.n	800ed86 <f_gets+0x60>
 800ed72:	e000      	b.n	800ed76 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ed74:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	dbdd      	blt.n	800ed3c <f_gets+0x16>
 800ed80:	e002      	b.n	800ed88 <f_gets+0x62>
		if (rc != 1) break;
 800ed82:	bf00      	nop
 800ed84:	e000      	b.n	800ed88 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800ed86:	bf00      	nop
	}
	*p = 0;
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <f_gets+0x72>
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	e000      	b.n	800ed9a <f_gets+0x74>
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3720      	adds	r7, #32
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
	...

0800eda4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eda4:	b480      	push	{r7}
 800eda6:	b087      	sub	sp, #28
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	4613      	mov	r3, r2
 800edb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800edb2:	2301      	movs	r3, #1
 800edb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800edb6:	2300      	movs	r3, #0
 800edb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800edba:	4b1f      	ldr	r3, [pc, #124]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800edbc:	7a5b      	ldrb	r3, [r3, #9]
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d131      	bne.n	800ee28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800edc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800edc6:	7a5b      	ldrb	r3, [r3, #9]
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	461a      	mov	r2, r3
 800edcc:	4b1a      	ldr	r3, [pc, #104]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800edce:	2100      	movs	r1, #0
 800edd0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800edd2:	4b19      	ldr	r3, [pc, #100]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800edd4:	7a5b      	ldrb	r3, [r3, #9]
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	4a17      	ldr	r2, [pc, #92]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800edda:	009b      	lsls	r3, r3, #2
 800eddc:	4413      	add	r3, r2
 800edde:	68fa      	ldr	r2, [r7, #12]
 800ede0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ede2:	4b15      	ldr	r3, [pc, #84]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800ede4:	7a5b      	ldrb	r3, [r3, #9]
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	461a      	mov	r2, r3
 800edea:	4b13      	ldr	r3, [pc, #76]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800edec:	4413      	add	r3, r2
 800edee:	79fa      	ldrb	r2, [r7, #7]
 800edf0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800edf2:	4b11      	ldr	r3, [pc, #68]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800edf4:	7a5b      	ldrb	r3, [r3, #9]
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	1c5a      	adds	r2, r3, #1
 800edfa:	b2d1      	uxtb	r1, r2
 800edfc:	4a0e      	ldr	r2, [pc, #56]	@ (800ee38 <FATFS_LinkDriverEx+0x94>)
 800edfe:	7251      	strb	r1, [r2, #9]
 800ee00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ee02:	7dbb      	ldrb	r3, [r7, #22]
 800ee04:	3330      	adds	r3, #48	@ 0x30
 800ee06:	b2da      	uxtb	r2, r3
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	223a      	movs	r2, #58	@ 0x3a
 800ee12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	3302      	adds	r3, #2
 800ee18:	222f      	movs	r2, #47	@ 0x2f
 800ee1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	3303      	adds	r3, #3
 800ee20:	2200      	movs	r2, #0
 800ee22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ee24:	2300      	movs	r3, #0
 800ee26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ee28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	371c      	adds	r7, #28
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	20002b98 	.word	0x20002b98

0800ee3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ee46:	2200      	movs	r2, #0
 800ee48:	6839      	ldr	r1, [r7, #0]
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f7ff ffaa 	bl	800eda4 <FATFS_LinkDriverEx>
 800ee50:	4603      	mov	r3, r0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3708      	adds	r7, #8
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
	...

0800ee5c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b085      	sub	sp, #20
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	4603      	mov	r3, r0
 800ee64:	6039      	str	r1, [r7, #0]
 800ee66:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ee68:	88fb      	ldrh	r3, [r7, #6]
 800ee6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ee6c:	d802      	bhi.n	800ee74 <ff_convert+0x18>
		c = chr;
 800ee6e:	88fb      	ldrh	r3, [r7, #6]
 800ee70:	81fb      	strh	r3, [r7, #14]
 800ee72:	e025      	b.n	800eec0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00b      	beq.n	800ee92 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ee7a:	88fb      	ldrh	r3, [r7, #6]
 800ee7c:	2bff      	cmp	r3, #255	@ 0xff
 800ee7e:	d805      	bhi.n	800ee8c <ff_convert+0x30>
 800ee80:	88fb      	ldrh	r3, [r7, #6]
 800ee82:	3b80      	subs	r3, #128	@ 0x80
 800ee84:	4a12      	ldr	r2, [pc, #72]	@ (800eed0 <ff_convert+0x74>)
 800ee86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee8a:	e000      	b.n	800ee8e <ff_convert+0x32>
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	81fb      	strh	r3, [r7, #14]
 800ee90:	e016      	b.n	800eec0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ee92:	2300      	movs	r3, #0
 800ee94:	81fb      	strh	r3, [r7, #14]
 800ee96:	e009      	b.n	800eeac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ee98:	89fb      	ldrh	r3, [r7, #14]
 800ee9a:	4a0d      	ldr	r2, [pc, #52]	@ (800eed0 <ff_convert+0x74>)
 800ee9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eea0:	88fa      	ldrh	r2, [r7, #6]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d006      	beq.n	800eeb4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800eea6:	89fb      	ldrh	r3, [r7, #14]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	81fb      	strh	r3, [r7, #14]
 800eeac:	89fb      	ldrh	r3, [r7, #14]
 800eeae:	2b7f      	cmp	r3, #127	@ 0x7f
 800eeb0:	d9f2      	bls.n	800ee98 <ff_convert+0x3c>
 800eeb2:	e000      	b.n	800eeb6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800eeb4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800eeb6:	89fb      	ldrh	r3, [r7, #14]
 800eeb8:	3380      	adds	r3, #128	@ 0x80
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800eec0:	89fb      	ldrh	r3, [r7, #14]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	08018830 	.word	0x08018830

0800eed4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b087      	sub	sp, #28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800eede:	88fb      	ldrh	r3, [r7, #6]
 800eee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eee4:	d201      	bcs.n	800eeea <ff_wtoupper+0x16>
 800eee6:	4b3e      	ldr	r3, [pc, #248]	@ (800efe0 <ff_wtoupper+0x10c>)
 800eee8:	e000      	b.n	800eeec <ff_wtoupper+0x18>
 800eeea:	4b3e      	ldr	r3, [pc, #248]	@ (800efe4 <ff_wtoupper+0x110>)
 800eeec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	1c9a      	adds	r2, r3, #2
 800eef2:	617a      	str	r2, [r7, #20]
 800eef4:	881b      	ldrh	r3, [r3, #0]
 800eef6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eef8:	8a7b      	ldrh	r3, [r7, #18]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d068      	beq.n	800efd0 <ff_wtoupper+0xfc>
 800eefe:	88fa      	ldrh	r2, [r7, #6]
 800ef00:	8a7b      	ldrh	r3, [r7, #18]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d364      	bcc.n	800efd0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	1c9a      	adds	r2, r3, #2
 800ef0a:	617a      	str	r2, [r7, #20]
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	823b      	strh	r3, [r7, #16]
 800ef10:	8a3b      	ldrh	r3, [r7, #16]
 800ef12:	0a1b      	lsrs	r3, r3, #8
 800ef14:	81fb      	strh	r3, [r7, #14]
 800ef16:	8a3b      	ldrh	r3, [r7, #16]
 800ef18:	b2db      	uxtb	r3, r3
 800ef1a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ef1c:	88fa      	ldrh	r2, [r7, #6]
 800ef1e:	8a79      	ldrh	r1, [r7, #18]
 800ef20:	8a3b      	ldrh	r3, [r7, #16]
 800ef22:	440b      	add	r3, r1
 800ef24:	429a      	cmp	r2, r3
 800ef26:	da49      	bge.n	800efbc <ff_wtoupper+0xe8>
			switch (cmd) {
 800ef28:	89fb      	ldrh	r3, [r7, #14]
 800ef2a:	2b08      	cmp	r3, #8
 800ef2c:	d84f      	bhi.n	800efce <ff_wtoupper+0xfa>
 800ef2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef34 <ff_wtoupper+0x60>)
 800ef30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef34:	0800ef59 	.word	0x0800ef59
 800ef38:	0800ef6b 	.word	0x0800ef6b
 800ef3c:	0800ef81 	.word	0x0800ef81
 800ef40:	0800ef89 	.word	0x0800ef89
 800ef44:	0800ef91 	.word	0x0800ef91
 800ef48:	0800ef99 	.word	0x0800ef99
 800ef4c:	0800efa1 	.word	0x0800efa1
 800ef50:	0800efa9 	.word	0x0800efa9
 800ef54:	0800efb1 	.word	0x0800efb1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ef58:	88fa      	ldrh	r2, [r7, #6]
 800ef5a:	8a7b      	ldrh	r3, [r7, #18]
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	005b      	lsls	r3, r3, #1
 800ef60:	697a      	ldr	r2, [r7, #20]
 800ef62:	4413      	add	r3, r2
 800ef64:	881b      	ldrh	r3, [r3, #0]
 800ef66:	80fb      	strh	r3, [r7, #6]
 800ef68:	e027      	b.n	800efba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ef6a:	88fa      	ldrh	r2, [r7, #6]
 800ef6c:	8a7b      	ldrh	r3, [r7, #18]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	88fa      	ldrh	r2, [r7, #6]
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	80fb      	strh	r3, [r7, #6]
 800ef7e:	e01c      	b.n	800efba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ef80:	88fb      	ldrh	r3, [r7, #6]
 800ef82:	3b10      	subs	r3, #16
 800ef84:	80fb      	strh	r3, [r7, #6]
 800ef86:	e018      	b.n	800efba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ef88:	88fb      	ldrh	r3, [r7, #6]
 800ef8a:	3b20      	subs	r3, #32
 800ef8c:	80fb      	strh	r3, [r7, #6]
 800ef8e:	e014      	b.n	800efba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ef90:	88fb      	ldrh	r3, [r7, #6]
 800ef92:	3b30      	subs	r3, #48	@ 0x30
 800ef94:	80fb      	strh	r3, [r7, #6]
 800ef96:	e010      	b.n	800efba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ef98:	88fb      	ldrh	r3, [r7, #6]
 800ef9a:	3b1a      	subs	r3, #26
 800ef9c:	80fb      	strh	r3, [r7, #6]
 800ef9e:	e00c      	b.n	800efba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800efa0:	88fb      	ldrh	r3, [r7, #6]
 800efa2:	3308      	adds	r3, #8
 800efa4:	80fb      	strh	r3, [r7, #6]
 800efa6:	e008      	b.n	800efba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800efa8:	88fb      	ldrh	r3, [r7, #6]
 800efaa:	3b50      	subs	r3, #80	@ 0x50
 800efac:	80fb      	strh	r3, [r7, #6]
 800efae:	e004      	b.n	800efba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800efb0:	88fb      	ldrh	r3, [r7, #6]
 800efb2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800efb6:	80fb      	strh	r3, [r7, #6]
 800efb8:	bf00      	nop
			}
			break;
 800efba:	e008      	b.n	800efce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800efbc:	89fb      	ldrh	r3, [r7, #14]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d195      	bne.n	800eeee <ff_wtoupper+0x1a>
 800efc2:	8a3b      	ldrh	r3, [r7, #16]
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	697a      	ldr	r2, [r7, #20]
 800efc8:	4413      	add	r3, r2
 800efca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800efcc:	e78f      	b.n	800eeee <ff_wtoupper+0x1a>
			break;
 800efce:	bf00      	nop
	}

	return chr;
 800efd0:	88fb      	ldrh	r3, [r7, #6]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	371c      	adds	r7, #28
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	08018930 	.word	0x08018930
 800efe4:	08018b24 	.word	0x08018b24

0800efe8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b086      	sub	sp, #24
 800efec:	af00      	add	r7, sp, #0
 800efee:	4603      	mov	r3, r0
 800eff0:	6039      	str	r1, [r7, #0]
 800eff2:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800eff4:	2300      	movs	r3, #0
 800eff6:	60fb      	str	r3, [r7, #12]
 800eff8:	2300      	movs	r3, #0
 800effa:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800effc:	f107 030c 	add.w	r3, r7, #12
 800f000:	2101      	movs	r1, #1
 800f002:	4618      	mov	r0, r3
 800f004:	f000 f865 	bl	800f0d2 <osSemaphoreCreate>
 800f008:	4602      	mov	r2, r0
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	2b00      	cmp	r3, #0
 800f014:	bf14      	ite	ne
 800f016:	2301      	movne	r3, #1
 800f018:	2300      	moveq	r3, #0
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	617b      	str	r3, [r7, #20]

    return ret;
 800f01e:	697b      	ldr	r3, [r7, #20]
}
 800f020:	4618      	mov	r0, r3
 800f022:	3718      	adds	r7, #24
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 f905 	bl	800f240 <osSemaphoreDelete>
#endif
    return 1;
 800f036:	2301      	movs	r3, #1
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f048:	2300      	movs	r3, #0
 800f04a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f04c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 f871 	bl	800f138 <osSemaphoreWait>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d101      	bne.n	800f060 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f05c:	2301      	movs	r3, #1
 800f05e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f060:	68fb      	ldr	r3, [r7, #12]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b082      	sub	sp, #8
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 f8ae 	bl	800f1d4 <osSemaphoreRelease>
#endif
}
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f002 fabf 	bl	801160c <pvPortMalloc>
 800f08e:	4603      	mov	r3, r0
}
 800f090:	4618      	mov	r0, r3
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f002 fb81 	bl	80117a8 <vPortFree>
}
 800f0a6:	bf00      	nop
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}

0800f0ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f0ae:	b480      	push	{r7}
 800f0b0:	b083      	sub	sp, #12
 800f0b2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0b4:	f3ef 8305 	mrs	r3, IPSR
 800f0b8:	607b      	str	r3, [r7, #4]
  return(result);
 800f0ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	bf14      	ite	ne
 800f0c0:	2301      	movne	r3, #1
 800f0c2:	2300      	moveq	r3, #0
 800f0c4:	b2db      	uxtb	r3, r3
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	370c      	adds	r7, #12
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr

0800f0d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b086      	sub	sp, #24
 800f0d6:	af02      	add	r7, sp, #8
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00f      	beq.n	800f104 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d10a      	bne.n	800f100 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	2203      	movs	r2, #3
 800f0f0:	9200      	str	r2, [sp, #0]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	2100      	movs	r1, #0
 800f0f6:	2001      	movs	r0, #1
 800f0f8:	f000 f9d4 	bl	800f4a4 <xQueueGenericCreateStatic>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	e016      	b.n	800f12e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f100:	2300      	movs	r3, #0
 800f102:	e014      	b.n	800f12e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	2b01      	cmp	r3, #1
 800f108:	d110      	bne.n	800f12c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800f10a:	2203      	movs	r2, #3
 800f10c:	2100      	movs	r1, #0
 800f10e:	2001      	movs	r0, #1
 800f110:	f000 fa45 	bl	800f59e <xQueueGenericCreate>
 800f114:	60f8      	str	r0, [r7, #12]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d005      	beq.n	800f128 <osSemaphoreCreate+0x56>
 800f11c:	2300      	movs	r3, #0
 800f11e:	2200      	movs	r2, #0
 800f120:	2100      	movs	r1, #0
 800f122:	68f8      	ldr	r0, [r7, #12]
 800f124:	f000 fa96 	bl	800f654 <xQueueGenericSend>
      return sema;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	e000      	b.n	800f12e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f12c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f142:	2300      	movs	r3, #0
 800f144:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f14c:	2380      	movs	r3, #128	@ 0x80
 800f14e:	e03a      	b.n	800f1c6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f150:	2300      	movs	r3, #0
 800f152:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f15a:	d103      	bne.n	800f164 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f15c:	f04f 33ff 	mov.w	r3, #4294967295
 800f160:	60fb      	str	r3, [r7, #12]
 800f162:	e009      	b.n	800f178 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d006      	beq.n	800f178 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d101      	bne.n	800f178 <osSemaphoreWait+0x40>
      ticks = 1;
 800f174:	2301      	movs	r3, #1
 800f176:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f178:	f7ff ff99 	bl	800f0ae <inHandlerMode>
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d017      	beq.n	800f1b2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f182:	f107 0308 	add.w	r3, r7, #8
 800f186:	461a      	mov	r2, r3
 800f188:	2100      	movs	r1, #0
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 fde6 	bl	800fd5c <xQueueReceiveFromISR>
 800f190:	4603      	mov	r3, r0
 800f192:	2b01      	cmp	r3, #1
 800f194:	d001      	beq.n	800f19a <osSemaphoreWait+0x62>
      return osErrorOS;
 800f196:	23ff      	movs	r3, #255	@ 0xff
 800f198:	e015      	b.n	800f1c6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d011      	beq.n	800f1c4 <osSemaphoreWait+0x8c>
 800f1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f1d0 <osSemaphoreWait+0x98>)
 800f1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1a6:	601a      	str	r2, [r3, #0]
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	f3bf 8f6f 	isb	sy
 800f1b0:	e008      	b.n	800f1c4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f1b2:	68f9      	ldr	r1, [r7, #12]
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 fcc1 	bl	800fb3c <xQueueSemaphoreTake>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d001      	beq.n	800f1c4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f1c0:	23ff      	movs	r3, #255	@ 0xff
 800f1c2:	e000      	b.n	800f1c6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	3710      	adds	r7, #16
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	e000ed04 	.word	0xe000ed04

0800f1d4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f1e4:	f7ff ff63 	bl	800f0ae <inHandlerMode>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d016      	beq.n	800f21c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f1ee:	f107 0308 	add.w	r3, r7, #8
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fb2f 	bl	800f858 <xQueueGiveFromISR>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b01      	cmp	r3, #1
 800f1fe:	d001      	beq.n	800f204 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f200:	23ff      	movs	r3, #255	@ 0xff
 800f202:	e017      	b.n	800f234 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d013      	beq.n	800f232 <osSemaphoreRelease+0x5e>
 800f20a:	4b0c      	ldr	r3, [pc, #48]	@ (800f23c <osSemaphoreRelease+0x68>)
 800f20c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f210:	601a      	str	r2, [r3, #0]
 800f212:	f3bf 8f4f 	dsb	sy
 800f216:	f3bf 8f6f 	isb	sy
 800f21a:	e00a      	b.n	800f232 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f21c:	2300      	movs	r3, #0
 800f21e:	2200      	movs	r2, #0
 800f220:	2100      	movs	r1, #0
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f000 fa16 	bl	800f654 <xQueueGenericSend>
 800f228:	4603      	mov	r3, r0
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d001      	beq.n	800f232 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f22e:	23ff      	movs	r3, #255	@ 0xff
 800f230:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f232:	68fb      	ldr	r3, [r7, #12]
}
 800f234:	4618      	mov	r0, r3
 800f236:	3710      	adds	r7, #16
 800f238:	46bd      	mov	sp, r7
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	e000ed04 	.word	0xe000ed04

0800f240 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b082      	sub	sp, #8
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f248:	f7ff ff31 	bl	800f0ae <inHandlerMode>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f252:	2382      	movs	r3, #130	@ 0x82
 800f254:	e003      	b.n	800f25e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fe02 	bl	800fe60 <vQueueDelete>

  return osOK; 
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3708      	adds	r7, #8
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}

0800f266 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f266:	b480      	push	{r7}
 800f268:	b083      	sub	sp, #12
 800f26a:	af00      	add	r7, sp, #0
 800f26c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f103 0208 	add.w	r2, r3, #8
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f04f 32ff 	mov.w	r2, #4294967295
 800f27e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f103 0208 	add.w	r2, r3, #8
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f103 0208 	add.w	r2, r3, #8
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f29a:	bf00      	nop
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f2a6:	b480      	push	{r7}
 800f2a8:	b083      	sub	sp, #12
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f2b4:	bf00      	nop
 800f2b6:	370c      	adds	r7, #12
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b085      	sub	sp, #20
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	689a      	ldr	r2, [r3, #8]
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	689b      	ldr	r3, [r3, #8]
 800f2e2:	683a      	ldr	r2, [r7, #0]
 800f2e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	1c5a      	adds	r2, r3, #1
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	601a      	str	r2, [r3, #0]
}
 800f2fc:	bf00      	nop
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f31e:	d103      	bne.n	800f328 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	691b      	ldr	r3, [r3, #16]
 800f324:	60fb      	str	r3, [r7, #12]
 800f326:	e00c      	b.n	800f342 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	3308      	adds	r3, #8
 800f32c:	60fb      	str	r3, [r7, #12]
 800f32e:	e002      	b.n	800f336 <vListInsert+0x2e>
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	60fb      	str	r3, [r7, #12]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d2f6      	bcs.n	800f330 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	685a      	ldr	r2, [r3, #4]
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	683a      	ldr	r2, [r7, #0]
 800f350:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	68fa      	ldr	r2, [r7, #12]
 800f356:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	683a      	ldr	r2, [r7, #0]
 800f35c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	1c5a      	adds	r2, r3, #1
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	601a      	str	r2, [r3, #0]
}
 800f36e:	bf00      	nop
 800f370:	3714      	adds	r7, #20
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr

0800f37a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f37a:	b480      	push	{r7}
 800f37c:	b085      	sub	sp, #20
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	691b      	ldr	r3, [r3, #16]
 800f386:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	6892      	ldr	r2, [r2, #8]
 800f390:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	6852      	ldr	r2, [r2, #4]
 800f39a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d103      	bne.n	800f3ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	689a      	ldr	r2, [r3, #8]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	1e5a      	subs	r2, r3, #1
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d10b      	bne.n	800f3fc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3e8:	f383 8811 	msr	BASEPRI, r3
 800f3ec:	f3bf 8f6f 	isb	sy
 800f3f0:	f3bf 8f4f 	dsb	sy
 800f3f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f3f6:	bf00      	nop
 800f3f8:	bf00      	nop
 800f3fa:	e7fd      	b.n	800f3f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f3fc:	f001 ffe4 	bl	80113c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f408:	68f9      	ldr	r1, [r7, #12]
 800f40a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f40c:	fb01 f303 	mul.w	r3, r1, r3
 800f410:	441a      	add	r2, r3
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2200      	movs	r2, #0
 800f41a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f42c:	3b01      	subs	r3, #1
 800f42e:	68f9      	ldr	r1, [r7, #12]
 800f430:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f432:	fb01 f303 	mul.w	r3, r1, r3
 800f436:	441a      	add	r2, r3
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	22ff      	movs	r2, #255	@ 0xff
 800f440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	22ff      	movs	r2, #255	@ 0xff
 800f448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d114      	bne.n	800f47c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	691b      	ldr	r3, [r3, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d01a      	beq.n	800f490 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	3310      	adds	r3, #16
 800f45e:	4618      	mov	r0, r3
 800f460:	f001 fa9c 	bl	801099c <xTaskRemoveFromEventList>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	d012      	beq.n	800f490 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f46a:	4b0d      	ldr	r3, [pc, #52]	@ (800f4a0 <xQueueGenericReset+0xd0>)
 800f46c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f470:	601a      	str	r2, [r3, #0]
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	e009      	b.n	800f490 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	3310      	adds	r3, #16
 800f480:	4618      	mov	r0, r3
 800f482:	f7ff fef0 	bl	800f266 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	3324      	adds	r3, #36	@ 0x24
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff feeb 	bl	800f266 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f490:	f001 ffcc 	bl	801142c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f494:	2301      	movs	r3, #1
}
 800f496:	4618      	mov	r0, r3
 800f498:	3710      	adds	r7, #16
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	e000ed04 	.word	0xe000ed04

0800f4a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b08e      	sub	sp, #56	@ 0x38
 800f4a8:	af02      	add	r7, sp, #8
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	607a      	str	r2, [r7, #4]
 800f4b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10b      	bne.n	800f4d0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4bc:	f383 8811 	msr	BASEPRI, r3
 800f4c0:	f3bf 8f6f 	isb	sy
 800f4c4:	f3bf 8f4f 	dsb	sy
 800f4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f4ca:	bf00      	nop
 800f4cc:	bf00      	nop
 800f4ce:	e7fd      	b.n	800f4cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10b      	bne.n	800f4ee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4da:	f383 8811 	msr	BASEPRI, r3
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	f3bf 8f4f 	dsb	sy
 800f4e6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f4e8:	bf00      	nop
 800f4ea:	bf00      	nop
 800f4ec:	e7fd      	b.n	800f4ea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d002      	beq.n	800f4fa <xQueueGenericCreateStatic+0x56>
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d001      	beq.n	800f4fe <xQueueGenericCreateStatic+0x5a>
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e000      	b.n	800f500 <xQueueGenericCreateStatic+0x5c>
 800f4fe:	2300      	movs	r3, #0
 800f500:	2b00      	cmp	r3, #0
 800f502:	d10b      	bne.n	800f51c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	623b      	str	r3, [r7, #32]
}
 800f516:	bf00      	nop
 800f518:	bf00      	nop
 800f51a:	e7fd      	b.n	800f518 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d102      	bne.n	800f528 <xQueueGenericCreateStatic+0x84>
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d101      	bne.n	800f52c <xQueueGenericCreateStatic+0x88>
 800f528:	2301      	movs	r3, #1
 800f52a:	e000      	b.n	800f52e <xQueueGenericCreateStatic+0x8a>
 800f52c:	2300      	movs	r3, #0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d10b      	bne.n	800f54a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f536:	f383 8811 	msr	BASEPRI, r3
 800f53a:	f3bf 8f6f 	isb	sy
 800f53e:	f3bf 8f4f 	dsb	sy
 800f542:	61fb      	str	r3, [r7, #28]
}
 800f544:	bf00      	nop
 800f546:	bf00      	nop
 800f548:	e7fd      	b.n	800f546 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f54a:	2348      	movs	r3, #72	@ 0x48
 800f54c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2b48      	cmp	r3, #72	@ 0x48
 800f552:	d00b      	beq.n	800f56c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f558:	f383 8811 	msr	BASEPRI, r3
 800f55c:	f3bf 8f6f 	isb	sy
 800f560:	f3bf 8f4f 	dsb	sy
 800f564:	61bb      	str	r3, [r7, #24]
}
 800f566:	bf00      	nop
 800f568:	bf00      	nop
 800f56a:	e7fd      	b.n	800f568 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f56c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00d      	beq.n	800f594 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f580:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	4613      	mov	r3, r2
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	68b9      	ldr	r1, [r7, #8]
 800f58e:	68f8      	ldr	r0, [r7, #12]
 800f590:	f000 f840 	bl	800f614 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f596:	4618      	mov	r0, r3
 800f598:	3730      	adds	r7, #48	@ 0x30
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b08a      	sub	sp, #40	@ 0x28
 800f5a2:	af02      	add	r7, sp, #8
 800f5a4:	60f8      	str	r0, [r7, #12]
 800f5a6:	60b9      	str	r1, [r7, #8]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10b      	bne.n	800f5ca <xQueueGenericCreate+0x2c>
	__asm volatile
 800f5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b6:	f383 8811 	msr	BASEPRI, r3
 800f5ba:	f3bf 8f6f 	isb	sy
 800f5be:	f3bf 8f4f 	dsb	sy
 800f5c2:	613b      	str	r3, [r7, #16]
}
 800f5c4:	bf00      	nop
 800f5c6:	bf00      	nop
 800f5c8:	e7fd      	b.n	800f5c6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	fb02 f303 	mul.w	r3, r2, r3
 800f5d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f5d4:	69fb      	ldr	r3, [r7, #28]
 800f5d6:	3348      	adds	r3, #72	@ 0x48
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f002 f817 	bl	801160c <pvPortMalloc>
 800f5de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d011      	beq.n	800f60a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	3348      	adds	r3, #72	@ 0x48
 800f5ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f5f8:	79fa      	ldrb	r2, [r7, #7]
 800f5fa:	69bb      	ldr	r3, [r7, #24]
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	4613      	mov	r3, r2
 800f600:	697a      	ldr	r2, [r7, #20]
 800f602:	68b9      	ldr	r1, [r7, #8]
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f000 f805 	bl	800f614 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f60a:	69bb      	ldr	r3, [r7, #24]
	}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3720      	adds	r7, #32
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
 800f620:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d103      	bne.n	800f630 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f628:	69bb      	ldr	r3, [r7, #24]
 800f62a:	69ba      	ldr	r2, [r7, #24]
 800f62c:	601a      	str	r2, [r3, #0]
 800f62e:	e002      	b.n	800f636 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f63c:	69bb      	ldr	r3, [r7, #24]
 800f63e:	68ba      	ldr	r2, [r7, #8]
 800f640:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f642:	2101      	movs	r1, #1
 800f644:	69b8      	ldr	r0, [r7, #24]
 800f646:	f7ff fec3 	bl	800f3d0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f64a:	bf00      	nop
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
	...

0800f654 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b08e      	sub	sp, #56	@ 0x38
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	607a      	str	r2, [r7, #4]
 800f660:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f662:	2300      	movs	r3, #0
 800f664:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10b      	bne.n	800f688 <xQueueGenericSend+0x34>
	__asm volatile
 800f670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f674:	f383 8811 	msr	BASEPRI, r3
 800f678:	f3bf 8f6f 	isb	sy
 800f67c:	f3bf 8f4f 	dsb	sy
 800f680:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f682:	bf00      	nop
 800f684:	bf00      	nop
 800f686:	e7fd      	b.n	800f684 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d103      	bne.n	800f696 <xQueueGenericSend+0x42>
 800f68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f692:	2b00      	cmp	r3, #0
 800f694:	d101      	bne.n	800f69a <xQueueGenericSend+0x46>
 800f696:	2301      	movs	r3, #1
 800f698:	e000      	b.n	800f69c <xQueueGenericSend+0x48>
 800f69a:	2300      	movs	r3, #0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d10b      	bne.n	800f6b8 <xQueueGenericSend+0x64>
	__asm volatile
 800f6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a4:	f383 8811 	msr	BASEPRI, r3
 800f6a8:	f3bf 8f6f 	isb	sy
 800f6ac:	f3bf 8f4f 	dsb	sy
 800f6b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f6b2:	bf00      	nop
 800f6b4:	bf00      	nop
 800f6b6:	e7fd      	b.n	800f6b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	d103      	bne.n	800f6c6 <xQueueGenericSend+0x72>
 800f6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d101      	bne.n	800f6ca <xQueueGenericSend+0x76>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	e000      	b.n	800f6cc <xQueueGenericSend+0x78>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10b      	bne.n	800f6e8 <xQueueGenericSend+0x94>
	__asm volatile
 800f6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d4:	f383 8811 	msr	BASEPRI, r3
 800f6d8:	f3bf 8f6f 	isb	sy
 800f6dc:	f3bf 8f4f 	dsb	sy
 800f6e0:	623b      	str	r3, [r7, #32]
}
 800f6e2:	bf00      	nop
 800f6e4:	bf00      	nop
 800f6e6:	e7fd      	b.n	800f6e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6e8:	f001 fb18 	bl	8010d1c <xTaskGetSchedulerState>
 800f6ec:	4603      	mov	r3, r0
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d102      	bne.n	800f6f8 <xQueueGenericSend+0xa4>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d101      	bne.n	800f6fc <xQueueGenericSend+0xa8>
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	e000      	b.n	800f6fe <xQueueGenericSend+0xaa>
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d10b      	bne.n	800f71a <xQueueGenericSend+0xc6>
	__asm volatile
 800f702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f706:	f383 8811 	msr	BASEPRI, r3
 800f70a:	f3bf 8f6f 	isb	sy
 800f70e:	f3bf 8f4f 	dsb	sy
 800f712:	61fb      	str	r3, [r7, #28]
}
 800f714:	bf00      	nop
 800f716:	bf00      	nop
 800f718:	e7fd      	b.n	800f716 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f71a:	f001 fe55 	bl	80113c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f726:	429a      	cmp	r2, r3
 800f728:	d302      	bcc.n	800f730 <xQueueGenericSend+0xdc>
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b02      	cmp	r3, #2
 800f72e:	d129      	bne.n	800f784 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f730:	683a      	ldr	r2, [r7, #0]
 800f732:	68b9      	ldr	r1, [r7, #8]
 800f734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f736:	f000 fbcf 	bl	800fed8 <prvCopyDataToQueue>
 800f73a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f73e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f740:	2b00      	cmp	r3, #0
 800f742:	d010      	beq.n	800f766 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f746:	3324      	adds	r3, #36	@ 0x24
 800f748:	4618      	mov	r0, r3
 800f74a:	f001 f927 	bl	801099c <xTaskRemoveFromEventList>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d013      	beq.n	800f77c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f754:	4b3f      	ldr	r3, [pc, #252]	@ (800f854 <xQueueGenericSend+0x200>)
 800f756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f75a:	601a      	str	r2, [r3, #0]
 800f75c:	f3bf 8f4f 	dsb	sy
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	e00a      	b.n	800f77c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d007      	beq.n	800f77c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f76c:	4b39      	ldr	r3, [pc, #228]	@ (800f854 <xQueueGenericSend+0x200>)
 800f76e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f772:	601a      	str	r2, [r3, #0]
 800f774:	f3bf 8f4f 	dsb	sy
 800f778:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f77c:	f001 fe56 	bl	801142c <vPortExitCritical>
				return pdPASS;
 800f780:	2301      	movs	r3, #1
 800f782:	e063      	b.n	800f84c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d103      	bne.n	800f792 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f78a:	f001 fe4f 	bl	801142c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f78e:	2300      	movs	r3, #0
 800f790:	e05c      	b.n	800f84c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f794:	2b00      	cmp	r3, #0
 800f796:	d106      	bne.n	800f7a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f798:	f107 0314 	add.w	r3, r7, #20
 800f79c:	4618      	mov	r0, r3
 800f79e:	f001 f961 	bl	8010a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7a2:	2301      	movs	r3, #1
 800f7a4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7a6:	f001 fe41 	bl	801142c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7aa:	f000 feff 	bl	80105ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7ae:	f001 fe0b 	bl	80113c8 <vPortEnterCritical>
 800f7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f7b8:	b25b      	sxtb	r3, r3
 800f7ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7be:	d103      	bne.n	800f7c8 <xQueueGenericSend+0x174>
 800f7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7ce:	b25b      	sxtb	r3, r3
 800f7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d4:	d103      	bne.n	800f7de <xQueueGenericSend+0x18a>
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7de:	f001 fe25 	bl	801142c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7e2:	1d3a      	adds	r2, r7, #4
 800f7e4:	f107 0314 	add.w	r3, r7, #20
 800f7e8:	4611      	mov	r1, r2
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f001 f950 	bl	8010a90 <xTaskCheckForTimeOut>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d124      	bne.n	800f840 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f7f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f7f8:	f000 fc66 	bl	80100c8 <prvIsQueueFull>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d018      	beq.n	800f834 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f804:	3310      	adds	r3, #16
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	4611      	mov	r1, r2
 800f80a:	4618      	mov	r0, r3
 800f80c:	f001 f8a0 	bl	8010950 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f810:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f812:	f000 fbf1 	bl	800fff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f816:	f000 fed7 	bl	80105c8 <xTaskResumeAll>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f47f af7c 	bne.w	800f71a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f822:	4b0c      	ldr	r3, [pc, #48]	@ (800f854 <xQueueGenericSend+0x200>)
 800f824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f828:	601a      	str	r2, [r3, #0]
 800f82a:	f3bf 8f4f 	dsb	sy
 800f82e:	f3bf 8f6f 	isb	sy
 800f832:	e772      	b.n	800f71a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f836:	f000 fbdf 	bl	800fff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f83a:	f000 fec5 	bl	80105c8 <xTaskResumeAll>
 800f83e:	e76c      	b.n	800f71a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f842:	f000 fbd9 	bl	800fff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f846:	f000 febf 	bl	80105c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f84a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3738      	adds	r7, #56	@ 0x38
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	e000ed04 	.word	0xe000ed04

0800f858 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b08e      	sub	sp, #56	@ 0x38
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d10b      	bne.n	800f884 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f870:	f383 8811 	msr	BASEPRI, r3
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	623b      	str	r3, [r7, #32]
}
 800f87e:	bf00      	nop
 800f880:	bf00      	nop
 800f882:	e7fd      	b.n	800f880 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00b      	beq.n	800f8a4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f890:	f383 8811 	msr	BASEPRI, r3
 800f894:	f3bf 8f6f 	isb	sy
 800f898:	f3bf 8f4f 	dsb	sy
 800f89c:	61fb      	str	r3, [r7, #28]
}
 800f89e:	bf00      	nop
 800f8a0:	bf00      	nop
 800f8a2:	e7fd      	b.n	800f8a0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d103      	bne.n	800f8b4 <xQueueGiveFromISR+0x5c>
 800f8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d101      	bne.n	800f8b8 <xQueueGiveFromISR+0x60>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e000      	b.n	800f8ba <xQueueGiveFromISR+0x62>
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d10b      	bne.n	800f8d6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	61bb      	str	r3, [r7, #24]
}
 800f8d0:	bf00      	nop
 800f8d2:	bf00      	nop
 800f8d4:	e7fd      	b.n	800f8d2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8d6:	f001 fe57 	bl	8011588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f8da:	f3ef 8211 	mrs	r2, BASEPRI
 800f8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8e2:	f383 8811 	msr	BASEPRI, r3
 800f8e6:	f3bf 8f6f 	isb	sy
 800f8ea:	f3bf 8f4f 	dsb	sy
 800f8ee:	617a      	str	r2, [r7, #20]
 800f8f0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f8f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f902:	429a      	cmp	r2, r3
 800f904:	d22b      	bcs.n	800f95e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f90c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f912:	1c5a      	adds	r2, r3, #1
 800f914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f916:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f918:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f920:	d112      	bne.n	800f948 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f926:	2b00      	cmp	r3, #0
 800f928:	d016      	beq.n	800f958 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f92c:	3324      	adds	r3, #36	@ 0x24
 800f92e:	4618      	mov	r0, r3
 800f930:	f001 f834 	bl	801099c <xTaskRemoveFromEventList>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00e      	beq.n	800f958 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d00b      	beq.n	800f958 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	2201      	movs	r2, #1
 800f944:	601a      	str	r2, [r3, #0]
 800f946:	e007      	b.n	800f958 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f94c:	3301      	adds	r3, #1
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	b25a      	sxtb	r2, r3
 800f952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f958:	2301      	movs	r3, #1
 800f95a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f95c:	e001      	b.n	800f962 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f95e:	2300      	movs	r3, #0
 800f960:	637b      	str	r3, [r7, #52]	@ 0x34
 800f962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f964:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f96c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f970:	4618      	mov	r0, r3
 800f972:	3738      	adds	r7, #56	@ 0x38
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b08c      	sub	sp, #48	@ 0x30
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f984:	2300      	movs	r3, #0
 800f986:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d10b      	bne.n	800f9aa <xQueueReceive+0x32>
	__asm volatile
 800f992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	623b      	str	r3, [r7, #32]
}
 800f9a4:	bf00      	nop
 800f9a6:	bf00      	nop
 800f9a8:	e7fd      	b.n	800f9a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d103      	bne.n	800f9b8 <xQueueReceive+0x40>
 800f9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d101      	bne.n	800f9bc <xQueueReceive+0x44>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e000      	b.n	800f9be <xQueueReceive+0x46>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d10b      	bne.n	800f9da <xQueueReceive+0x62>
	__asm volatile
 800f9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c6:	f383 8811 	msr	BASEPRI, r3
 800f9ca:	f3bf 8f6f 	isb	sy
 800f9ce:	f3bf 8f4f 	dsb	sy
 800f9d2:	61fb      	str	r3, [r7, #28]
}
 800f9d4:	bf00      	nop
 800f9d6:	bf00      	nop
 800f9d8:	e7fd      	b.n	800f9d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f9da:	f001 f99f 	bl	8010d1c <xTaskGetSchedulerState>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d102      	bne.n	800f9ea <xQueueReceive+0x72>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d101      	bne.n	800f9ee <xQueueReceive+0x76>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e000      	b.n	800f9f0 <xQueueReceive+0x78>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10b      	bne.n	800fa0c <xQueueReceive+0x94>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	61bb      	str	r3, [r7, #24]
}
 800fa06:	bf00      	nop
 800fa08:	bf00      	nop
 800fa0a:	e7fd      	b.n	800fa08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa0c:	f001 fcdc 	bl	80113c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d01f      	beq.n	800fa5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fa1c:	68b9      	ldr	r1, [r7, #8]
 800fa1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa20:	f000 fac4 	bl	800ffac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fa24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa26:	1e5a      	subs	r2, r3, #1
 800fa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2e:	691b      	ldr	r3, [r3, #16]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00f      	beq.n	800fa54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa36:	3310      	adds	r3, #16
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f000 ffaf 	bl	801099c <xTaskRemoveFromEventList>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d007      	beq.n	800fa54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fa44:	4b3c      	ldr	r3, [pc, #240]	@ (800fb38 <xQueueReceive+0x1c0>)
 800fa46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa4a:	601a      	str	r2, [r3, #0]
 800fa4c:	f3bf 8f4f 	dsb	sy
 800fa50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fa54:	f001 fcea 	bl	801142c <vPortExitCritical>
				return pdPASS;
 800fa58:	2301      	movs	r3, #1
 800fa5a:	e069      	b.n	800fb30 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d103      	bne.n	800fa6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fa62:	f001 fce3 	bl	801142c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fa66:	2300      	movs	r3, #0
 800fa68:	e062      	b.n	800fb30 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d106      	bne.n	800fa7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fa70:	f107 0310 	add.w	r3, r7, #16
 800fa74:	4618      	mov	r0, r3
 800fa76:	f000 fff5 	bl	8010a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fa7e:	f001 fcd5 	bl	801142c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fa82:	f000 fd93 	bl	80105ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fa86:	f001 fc9f 	bl	80113c8 <vPortEnterCritical>
 800fa8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fa90:	b25b      	sxtb	r3, r3
 800fa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa96:	d103      	bne.n	800faa0 <xQueueReceive+0x128>
 800fa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800faa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800faa6:	b25b      	sxtb	r3, r3
 800faa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faac:	d103      	bne.n	800fab6 <xQueueReceive+0x13e>
 800faae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab0:	2200      	movs	r2, #0
 800fab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fab6:	f001 fcb9 	bl	801142c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800faba:	1d3a      	adds	r2, r7, #4
 800fabc:	f107 0310 	add.w	r3, r7, #16
 800fac0:	4611      	mov	r1, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f000 ffe4 	bl	8010a90 <xTaskCheckForTimeOut>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d123      	bne.n	800fb16 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800face:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fad0:	f000 fae4 	bl	801009c <prvIsQueueEmpty>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d017      	beq.n	800fb0a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fadc:	3324      	adds	r3, #36	@ 0x24
 800fade:	687a      	ldr	r2, [r7, #4]
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f000 ff34 	bl	8010950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800faea:	f000 fa85 	bl	800fff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800faee:	f000 fd6b 	bl	80105c8 <xTaskResumeAll>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d189      	bne.n	800fa0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800faf8:	4b0f      	ldr	r3, [pc, #60]	@ (800fb38 <xQueueReceive+0x1c0>)
 800fafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fafe:	601a      	str	r2, [r3, #0]
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	e780      	b.n	800fa0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fb0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb0c:	f000 fa74 	bl	800fff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb10:	f000 fd5a 	bl	80105c8 <xTaskResumeAll>
 800fb14:	e77a      	b.n	800fa0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fb16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb18:	f000 fa6e 	bl	800fff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb1c:	f000 fd54 	bl	80105c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb22:	f000 fabb 	bl	801009c <prvIsQueueEmpty>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	f43f af6f 	beq.w	800fa0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fb2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3730      	adds	r7, #48	@ 0x30
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	e000ed04 	.word	0xe000ed04

0800fb3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b08e      	sub	sp, #56	@ 0x38
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fb46:	2300      	movs	r3, #0
 800fb48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10b      	bne.n	800fb70 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb5c:	f383 8811 	msr	BASEPRI, r3
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	f3bf 8f4f 	dsb	sy
 800fb68:	623b      	str	r3, [r7, #32]
}
 800fb6a:	bf00      	nop
 800fb6c:	bf00      	nop
 800fb6e:	e7fd      	b.n	800fb6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00b      	beq.n	800fb90 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb7c:	f383 8811 	msr	BASEPRI, r3
 800fb80:	f3bf 8f6f 	isb	sy
 800fb84:	f3bf 8f4f 	dsb	sy
 800fb88:	61fb      	str	r3, [r7, #28]
}
 800fb8a:	bf00      	nop
 800fb8c:	bf00      	nop
 800fb8e:	e7fd      	b.n	800fb8c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb90:	f001 f8c4 	bl	8010d1c <xTaskGetSchedulerState>
 800fb94:	4603      	mov	r3, r0
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d102      	bne.n	800fba0 <xQueueSemaphoreTake+0x64>
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d101      	bne.n	800fba4 <xQueueSemaphoreTake+0x68>
 800fba0:	2301      	movs	r3, #1
 800fba2:	e000      	b.n	800fba6 <xQueueSemaphoreTake+0x6a>
 800fba4:	2300      	movs	r3, #0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d10b      	bne.n	800fbc2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbae:	f383 8811 	msr	BASEPRI, r3
 800fbb2:	f3bf 8f6f 	isb	sy
 800fbb6:	f3bf 8f4f 	dsb	sy
 800fbba:	61bb      	str	r3, [r7, #24]
}
 800fbbc:	bf00      	nop
 800fbbe:	bf00      	nop
 800fbc0:	e7fd      	b.n	800fbbe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fbc2:	f001 fc01 	bl	80113c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbca:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fbcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d024      	beq.n	800fc1c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbd4:	1e5a      	subs	r2, r3, #1
 800fbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d104      	bne.n	800fbec <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fbe2:	f001 fa47 	bl	8011074 <pvTaskIncrementMutexHeldCount>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbee:	691b      	ldr	r3, [r3, #16]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00f      	beq.n	800fc14 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf6:	3310      	adds	r3, #16
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f000 fecf 	bl	801099c <xTaskRemoveFromEventList>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d007      	beq.n	800fc14 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fc04:	4b54      	ldr	r3, [pc, #336]	@ (800fd58 <xQueueSemaphoreTake+0x21c>)
 800fc06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc0a:	601a      	str	r2, [r3, #0]
 800fc0c:	f3bf 8f4f 	dsb	sy
 800fc10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fc14:	f001 fc0a 	bl	801142c <vPortExitCritical>
				return pdPASS;
 800fc18:	2301      	movs	r3, #1
 800fc1a:	e098      	b.n	800fd4e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d112      	bne.n	800fc48 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d00b      	beq.n	800fc40 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fc28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	617b      	str	r3, [r7, #20]
}
 800fc3a:	bf00      	nop
 800fc3c:	bf00      	nop
 800fc3e:	e7fd      	b.n	800fc3c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fc40:	f001 fbf4 	bl	801142c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fc44:	2300      	movs	r3, #0
 800fc46:	e082      	b.n	800fd4e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d106      	bne.n	800fc5c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc4e:	f107 030c 	add.w	r3, r7, #12
 800fc52:	4618      	mov	r0, r3
 800fc54:	f000 ff06 	bl	8010a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc5c:	f001 fbe6 	bl	801142c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc60:	f000 fca4 	bl	80105ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc64:	f001 fbb0 	bl	80113c8 <vPortEnterCritical>
 800fc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc6e:	b25b      	sxtb	r3, r3
 800fc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc74:	d103      	bne.n	800fc7e <xQueueSemaphoreTake+0x142>
 800fc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc84:	b25b      	sxtb	r3, r3
 800fc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8a:	d103      	bne.n	800fc94 <xQueueSemaphoreTake+0x158>
 800fc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc94:	f001 fbca 	bl	801142c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc98:	463a      	mov	r2, r7
 800fc9a:	f107 030c 	add.w	r3, r7, #12
 800fc9e:	4611      	mov	r1, r2
 800fca0:	4618      	mov	r0, r3
 800fca2:	f000 fef5 	bl	8010a90 <xTaskCheckForTimeOut>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d132      	bne.n	800fd12 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fcac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fcae:	f000 f9f5 	bl	801009c <prvIsQueueEmpty>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d026      	beq.n	800fd06 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d109      	bne.n	800fcd4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fcc0:	f001 fb82 	bl	80113c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f001 f845 	bl	8010d58 <xTaskPriorityInherit>
 800fcce:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fcd0:	f001 fbac 	bl	801142c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fcd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd6:	3324      	adds	r3, #36	@ 0x24
 800fcd8:	683a      	ldr	r2, [r7, #0]
 800fcda:	4611      	mov	r1, r2
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f000 fe37 	bl	8010950 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fce4:	f000 f988 	bl	800fff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fce8:	f000 fc6e 	bl	80105c8 <xTaskResumeAll>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f47f af67 	bne.w	800fbc2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fcf4:	4b18      	ldr	r3, [pc, #96]	@ (800fd58 <xQueueSemaphoreTake+0x21c>)
 800fcf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fcfa:	601a      	str	r2, [r3, #0]
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	f3bf 8f6f 	isb	sy
 800fd04:	e75d      	b.n	800fbc2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fd06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd08:	f000 f976 	bl	800fff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd0c:	f000 fc5c 	bl	80105c8 <xTaskResumeAll>
 800fd10:	e757      	b.n	800fbc2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fd12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd14:	f000 f970 	bl	800fff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd18:	f000 fc56 	bl	80105c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd1e:	f000 f9bd 	bl	801009c <prvIsQueueEmpty>
 800fd22:	4603      	mov	r3, r0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f43f af4c 	beq.w	800fbc2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00d      	beq.n	800fd4c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fd30:	f001 fb4a 	bl	80113c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fd34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fd36:	f000 f8b7 	bl	800fea8 <prvGetDisinheritPriorityAfterTimeout>
 800fd3a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd3e:	689b      	ldr	r3, [r3, #8]
 800fd40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fd42:	4618      	mov	r0, r3
 800fd44:	f001 f906 	bl	8010f54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fd48:	f001 fb70 	bl	801142c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fd4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3738      	adds	r7, #56	@ 0x38
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	e000ed04 	.word	0xe000ed04

0800fd5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b08e      	sub	sp, #56	@ 0x38
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d10b      	bne.n	800fd8a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd76:	f383 8811 	msr	BASEPRI, r3
 800fd7a:	f3bf 8f6f 	isb	sy
 800fd7e:	f3bf 8f4f 	dsb	sy
 800fd82:	623b      	str	r3, [r7, #32]
}
 800fd84:	bf00      	nop
 800fd86:	bf00      	nop
 800fd88:	e7fd      	b.n	800fd86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d103      	bne.n	800fd98 <xQueueReceiveFromISR+0x3c>
 800fd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d101      	bne.n	800fd9c <xQueueReceiveFromISR+0x40>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e000      	b.n	800fd9e <xQueueReceiveFromISR+0x42>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d10b      	bne.n	800fdba <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	61fb      	str	r3, [r7, #28]
}
 800fdb4:	bf00      	nop
 800fdb6:	bf00      	nop
 800fdb8:	e7fd      	b.n	800fdb6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdba:	f001 fbe5 	bl	8011588 <vPortValidateInterruptPriority>
	__asm volatile
 800fdbe:	f3ef 8211 	mrs	r2, BASEPRI
 800fdc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc6:	f383 8811 	msr	BASEPRI, r3
 800fdca:	f3bf 8f6f 	isb	sy
 800fdce:	f3bf 8f4f 	dsb	sy
 800fdd2:	61ba      	str	r2, [r7, #24]
 800fdd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fdd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdde:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fde0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d02f      	beq.n	800fe46 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fdec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fdf0:	68b9      	ldr	r1, [r7, #8]
 800fdf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fdf4:	f000 f8da 	bl	800ffac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fdf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdfa:	1e5a      	subs	r2, r3, #1
 800fdfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdfe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fe00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fe04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe08:	d112      	bne.n	800fe30 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe0c:	691b      	ldr	r3, [r3, #16]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d016      	beq.n	800fe40 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe14:	3310      	adds	r3, #16
 800fe16:	4618      	mov	r0, r3
 800fe18:	f000 fdc0 	bl	801099c <xTaskRemoveFromEventList>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00e      	beq.n	800fe40 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00b      	beq.n	800fe40 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	e007      	b.n	800fe40 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fe30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe34:	3301      	adds	r3, #1
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	b25a      	sxtb	r2, r3
 800fe3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fe40:	2301      	movs	r3, #1
 800fe42:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe44:	e001      	b.n	800fe4a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800fe46:	2300      	movs	r3, #0
 800fe48:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	f383 8811 	msr	BASEPRI, r3
}
 800fe54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3738      	adds	r7, #56	@ 0x38
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d10b      	bne.n	800fe8a <vQueueDelete+0x2a>
	__asm volatile
 800fe72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe76:	f383 8811 	msr	BASEPRI, r3
 800fe7a:	f3bf 8f6f 	isb	sy
 800fe7e:	f3bf 8f4f 	dsb	sy
 800fe82:	60bb      	str	r3, [r7, #8]
}
 800fe84:	bf00      	nop
 800fe86:	bf00      	nop
 800fe88:	e7fd      	b.n	800fe86 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	f000 f934 	bl	80100f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d102      	bne.n	800fea0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800fe9a:	68f8      	ldr	r0, [r7, #12]
 800fe9c:	f001 fc84 	bl	80117a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fea0:	bf00      	nop
 800fea2:	3710      	adds	r7, #16
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fea8:	b480      	push	{r7}
 800feaa:	b085      	sub	sp, #20
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d006      	beq.n	800fec6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f1c3 0307 	rsb	r3, r3, #7
 800fec2:	60fb      	str	r3, [r7, #12]
 800fec4:	e001      	b.n	800feca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fec6:	2300      	movs	r3, #0
 800fec8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800feca:	68fb      	ldr	r3, [r7, #12]
	}
 800fecc:	4618      	mov	r0, r3
 800fece:	3714      	adds	r7, #20
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af00      	add	r7, sp, #0
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	60b9      	str	r1, [r7, #8]
 800fee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fee4:	2300      	movs	r3, #0
 800fee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800feec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d10d      	bne.n	800ff12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d14d      	bne.n	800ff9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f000 ff9e 	bl	8010e44 <xTaskPriorityDisinherit>
 800ff08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	609a      	str	r2, [r3, #8]
 800ff10:	e043      	b.n	800ff9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d119      	bne.n	800ff4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	6858      	ldr	r0, [r3, #4]
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff20:	461a      	mov	r2, r3
 800ff22:	68b9      	ldr	r1, [r7, #8]
 800ff24:	f003 fd11 	bl	801394a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	685a      	ldr	r2, [r3, #4]
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff30:	441a      	add	r2, r3
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	685a      	ldr	r2, [r3, #4]
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	689b      	ldr	r3, [r3, #8]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d32b      	bcc.n	800ff9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	605a      	str	r2, [r3, #4]
 800ff4a:	e026      	b.n	800ff9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	68d8      	ldr	r0, [r3, #12]
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff54:	461a      	mov	r2, r3
 800ff56:	68b9      	ldr	r1, [r7, #8]
 800ff58:	f003 fcf7 	bl	801394a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	68da      	ldr	r2, [r3, #12]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff64:	425b      	negs	r3, r3
 800ff66:	441a      	add	r2, r3
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	68da      	ldr	r2, [r3, #12]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d207      	bcs.n	800ff88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	689a      	ldr	r2, [r3, #8]
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff80:	425b      	negs	r3, r3
 800ff82:	441a      	add	r2, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2b02      	cmp	r3, #2
 800ff8c:	d105      	bne.n	800ff9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d002      	beq.n	800ff9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	3b01      	subs	r3, #1
 800ff98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	1c5a      	adds	r2, r3, #1
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ffa2:	697b      	ldr	r3, [r7, #20]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3718      	adds	r7, #24
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d018      	beq.n	800fff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	68da      	ldr	r2, [r3, #12]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffc6:	441a      	add	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	68da      	ldr	r2, [r3, #12]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d303      	bcc.n	800ffe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	68d9      	ldr	r1, [r3, #12]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffe8:	461a      	mov	r2, r3
 800ffea:	6838      	ldr	r0, [r7, #0]
 800ffec:	f003 fcad 	bl	801394a <memcpy>
	}
}
 800fff0:	bf00      	nop
 800fff2:	3708      	adds	r7, #8
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010000:	f001 f9e2 	bl	80113c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801000a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801000c:	e011      	b.n	8010032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010012:	2b00      	cmp	r3, #0
 8010014:	d012      	beq.n	801003c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	3324      	adds	r3, #36	@ 0x24
 801001a:	4618      	mov	r0, r3
 801001c:	f000 fcbe 	bl	801099c <xTaskRemoveFromEventList>
 8010020:	4603      	mov	r3, r0
 8010022:	2b00      	cmp	r3, #0
 8010024:	d001      	beq.n	801002a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010026:	f000 fd97 	bl	8010b58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801002a:	7bfb      	ldrb	r3, [r7, #15]
 801002c:	3b01      	subs	r3, #1
 801002e:	b2db      	uxtb	r3, r3
 8010030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010036:	2b00      	cmp	r3, #0
 8010038:	dce9      	bgt.n	801000e <prvUnlockQueue+0x16>
 801003a:	e000      	b.n	801003e <prvUnlockQueue+0x46>
					break;
 801003c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	22ff      	movs	r2, #255	@ 0xff
 8010042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010046:	f001 f9f1 	bl	801142c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801004a:	f001 f9bd 	bl	80113c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010056:	e011      	b.n	801007c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d012      	beq.n	8010086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	3310      	adds	r3, #16
 8010064:	4618      	mov	r0, r3
 8010066:	f000 fc99 	bl	801099c <xTaskRemoveFromEventList>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d001      	beq.n	8010074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010070:	f000 fd72 	bl	8010b58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010074:	7bbb      	ldrb	r3, [r7, #14]
 8010076:	3b01      	subs	r3, #1
 8010078:	b2db      	uxtb	r3, r3
 801007a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801007c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010080:	2b00      	cmp	r3, #0
 8010082:	dce9      	bgt.n	8010058 <prvUnlockQueue+0x60>
 8010084:	e000      	b.n	8010088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	22ff      	movs	r2, #255	@ 0xff
 801008c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010090:	f001 f9cc 	bl	801142c <vPortExitCritical>
}
 8010094:	bf00      	nop
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100a4:	f001 f990 	bl	80113c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d102      	bne.n	80100b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80100b0:	2301      	movs	r3, #1
 80100b2:	60fb      	str	r3, [r7, #12]
 80100b4:	e001      	b.n	80100ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80100b6:	2300      	movs	r3, #0
 80100b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100ba:	f001 f9b7 	bl	801142c <vPortExitCritical>

	return xReturn;
 80100be:	68fb      	ldr	r3, [r7, #12]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3710      	adds	r7, #16
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80100d0:	f001 f97a 	bl	80113c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100dc:	429a      	cmp	r2, r3
 80100de:	d102      	bne.n	80100e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80100e0:	2301      	movs	r3, #1
 80100e2:	60fb      	str	r3, [r7, #12]
 80100e4:	e001      	b.n	80100ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80100e6:	2300      	movs	r3, #0
 80100e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80100ea:	f001 f99f 	bl	801142c <vPortExitCritical>

	return xReturn;
 80100ee:	68fb      	ldr	r3, [r7, #12]
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3710      	adds	r7, #16
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010100:	2300      	movs	r3, #0
 8010102:	60fb      	str	r3, [r7, #12]
 8010104:	e016      	b.n	8010134 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010106:	4a10      	ldr	r2, [pc, #64]	@ (8010148 <vQueueUnregisterQueue+0x50>)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	00db      	lsls	r3, r3, #3
 801010c:	4413      	add	r3, r2
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	429a      	cmp	r2, r3
 8010114:	d10b      	bne.n	801012e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010116:	4a0c      	ldr	r2, [pc, #48]	@ (8010148 <vQueueUnregisterQueue+0x50>)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2100      	movs	r1, #0
 801011c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010120:	4a09      	ldr	r2, [pc, #36]	@ (8010148 <vQueueUnregisterQueue+0x50>)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	4413      	add	r3, r2
 8010128:	2200      	movs	r2, #0
 801012a:	605a      	str	r2, [r3, #4]
				break;
 801012c:	e006      	b.n	801013c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	3301      	adds	r3, #1
 8010132:	60fb      	str	r3, [r7, #12]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2b07      	cmp	r3, #7
 8010138:	d9e5      	bls.n	8010106 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801013a:	bf00      	nop
 801013c:	bf00      	nop
 801013e:	3714      	adds	r7, #20
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr
 8010148:	20002ba4 	.word	0x20002ba4

0801014c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801014c:	b580      	push	{r7, lr}
 801014e:	b08e      	sub	sp, #56	@ 0x38
 8010150:	af04      	add	r7, sp, #16
 8010152:	60f8      	str	r0, [r7, #12]
 8010154:	60b9      	str	r1, [r7, #8]
 8010156:	607a      	str	r2, [r7, #4]
 8010158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801015a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10b      	bne.n	8010178 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010164:	f383 8811 	msr	BASEPRI, r3
 8010168:	f3bf 8f6f 	isb	sy
 801016c:	f3bf 8f4f 	dsb	sy
 8010170:	623b      	str	r3, [r7, #32]
}
 8010172:	bf00      	nop
 8010174:	bf00      	nop
 8010176:	e7fd      	b.n	8010174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017a:	2b00      	cmp	r3, #0
 801017c:	d10b      	bne.n	8010196 <xTaskCreateStatic+0x4a>
	__asm volatile
 801017e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010182:	f383 8811 	msr	BASEPRI, r3
 8010186:	f3bf 8f6f 	isb	sy
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	61fb      	str	r3, [r7, #28]
}
 8010190:	bf00      	nop
 8010192:	bf00      	nop
 8010194:	e7fd      	b.n	8010192 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010196:	2354      	movs	r3, #84	@ 0x54
 8010198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	2b54      	cmp	r3, #84	@ 0x54
 801019e:	d00b      	beq.n	80101b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80101a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101a4:	f383 8811 	msr	BASEPRI, r3
 80101a8:	f3bf 8f6f 	isb	sy
 80101ac:	f3bf 8f4f 	dsb	sy
 80101b0:	61bb      	str	r3, [r7, #24]
}
 80101b2:	bf00      	nop
 80101b4:	bf00      	nop
 80101b6:	e7fd      	b.n	80101b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80101b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80101ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d01e      	beq.n	80101fe <xTaskCreateStatic+0xb2>
 80101c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d01b      	beq.n	80101fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80101c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80101ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80101d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d2:	2202      	movs	r2, #2
 80101d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80101d8:	2300      	movs	r3, #0
 80101da:	9303      	str	r3, [sp, #12]
 80101dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101de:	9302      	str	r3, [sp, #8]
 80101e0:	f107 0314 	add.w	r3, r7, #20
 80101e4:	9301      	str	r3, [sp, #4]
 80101e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e8:	9300      	str	r3, [sp, #0]
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	68b9      	ldr	r1, [r7, #8]
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f000 f850 	bl	8010296 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80101f8:	f000 f8d6 	bl	80103a8 <prvAddNewTaskToReadyList>
 80101fc:	e001      	b.n	8010202 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80101fe:	2300      	movs	r3, #0
 8010200:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010202:	697b      	ldr	r3, [r7, #20]
	}
 8010204:	4618      	mov	r0, r3
 8010206:	3728      	adds	r7, #40	@ 0x28
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08c      	sub	sp, #48	@ 0x30
 8010210:	af04      	add	r7, sp, #16
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	603b      	str	r3, [r7, #0]
 8010218:	4613      	mov	r3, r2
 801021a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801021c:	88fb      	ldrh	r3, [r7, #6]
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	4618      	mov	r0, r3
 8010222:	f001 f9f3 	bl	801160c <pvPortMalloc>
 8010226:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010228:	697b      	ldr	r3, [r7, #20]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00e      	beq.n	801024c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801022e:	2054      	movs	r0, #84	@ 0x54
 8010230:	f001 f9ec 	bl	801160c <pvPortMalloc>
 8010234:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d003      	beq.n	8010244 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	697a      	ldr	r2, [r7, #20]
 8010240:	631a      	str	r2, [r3, #48]	@ 0x30
 8010242:	e005      	b.n	8010250 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010244:	6978      	ldr	r0, [r7, #20]
 8010246:	f001 faaf 	bl	80117a8 <vPortFree>
 801024a:	e001      	b.n	8010250 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801024c:	2300      	movs	r3, #0
 801024e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d017      	beq.n	8010286 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	2200      	movs	r2, #0
 801025a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801025e:	88fa      	ldrh	r2, [r7, #6]
 8010260:	2300      	movs	r3, #0
 8010262:	9303      	str	r3, [sp, #12]
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	9302      	str	r3, [sp, #8]
 8010268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026a:	9301      	str	r3, [sp, #4]
 801026c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801026e:	9300      	str	r3, [sp, #0]
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	68b9      	ldr	r1, [r7, #8]
 8010274:	68f8      	ldr	r0, [r7, #12]
 8010276:	f000 f80e 	bl	8010296 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801027a:	69f8      	ldr	r0, [r7, #28]
 801027c:	f000 f894 	bl	80103a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010280:	2301      	movs	r3, #1
 8010282:	61bb      	str	r3, [r7, #24]
 8010284:	e002      	b.n	801028c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010286:	f04f 33ff 	mov.w	r3, #4294967295
 801028a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801028c:	69bb      	ldr	r3, [r7, #24]
	}
 801028e:	4618      	mov	r0, r3
 8010290:	3720      	adds	r7, #32
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}

08010296 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b088      	sub	sp, #32
 801029a:	af00      	add	r7, sp, #0
 801029c:	60f8      	str	r0, [r7, #12]
 801029e:	60b9      	str	r1, [r7, #8]
 80102a0:	607a      	str	r2, [r7, #4]
 80102a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80102a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80102ae:	3b01      	subs	r3, #1
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	4413      	add	r3, r2
 80102b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	f023 0307 	bic.w	r3, r3, #7
 80102bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	f003 0307 	and.w	r3, r3, #7
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00b      	beq.n	80102e0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80102c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102cc:	f383 8811 	msr	BASEPRI, r3
 80102d0:	f3bf 8f6f 	isb	sy
 80102d4:	f3bf 8f4f 	dsb	sy
 80102d8:	617b      	str	r3, [r7, #20]
}
 80102da:	bf00      	nop
 80102dc:	bf00      	nop
 80102de:	e7fd      	b.n	80102dc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d01f      	beq.n	8010326 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102e6:	2300      	movs	r3, #0
 80102e8:	61fb      	str	r3, [r7, #28]
 80102ea:	e012      	b.n	8010312 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80102ec:	68ba      	ldr	r2, [r7, #8]
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	4413      	add	r3, r2
 80102f2:	7819      	ldrb	r1, [r3, #0]
 80102f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	4413      	add	r3, r2
 80102fa:	3334      	adds	r3, #52	@ 0x34
 80102fc:	460a      	mov	r2, r1
 80102fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010300:	68ba      	ldr	r2, [r7, #8]
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	4413      	add	r3, r2
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d006      	beq.n	801031a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	3301      	adds	r3, #1
 8010310:	61fb      	str	r3, [r7, #28]
 8010312:	69fb      	ldr	r3, [r7, #28]
 8010314:	2b0f      	cmp	r3, #15
 8010316:	d9e9      	bls.n	80102ec <prvInitialiseNewTask+0x56>
 8010318:	e000      	b.n	801031c <prvInitialiseNewTask+0x86>
			{
				break;
 801031a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801031c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801031e:	2200      	movs	r2, #0
 8010320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010324:	e003      	b.n	801032e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010328:	2200      	movs	r2, #0
 801032a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801032e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010330:	2b06      	cmp	r3, #6
 8010332:	d901      	bls.n	8010338 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010334:	2306      	movs	r3, #6
 8010336:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801033a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801033c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801033e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010342:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010346:	2200      	movs	r2, #0
 8010348:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801034a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801034c:	3304      	adds	r3, #4
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe ffa9 	bl	800f2a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010356:	3318      	adds	r3, #24
 8010358:	4618      	mov	r0, r3
 801035a:	f7fe ffa4 	bl	800f2a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801035e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010362:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010366:	f1c3 0207 	rsb	r2, r3, #7
 801036a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801036c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801036e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010372:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010376:	2200      	movs	r2, #0
 8010378:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801037a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801037c:	2200      	movs	r2, #0
 801037e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010382:	683a      	ldr	r2, [r7, #0]
 8010384:	68f9      	ldr	r1, [r7, #12]
 8010386:	69b8      	ldr	r0, [r7, #24]
 8010388:	f000 feee 	bl	8011168 <pxPortInitialiseStack>
 801038c:	4602      	mov	r2, r0
 801038e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010390:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801039c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801039e:	bf00      	nop
 80103a0:	3720      	adds	r7, #32
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b082      	sub	sp, #8
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80103b0:	f001 f80a 	bl	80113c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80103b4:	4b2a      	ldr	r3, [pc, #168]	@ (8010460 <prvAddNewTaskToReadyList+0xb8>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	3301      	adds	r3, #1
 80103ba:	4a29      	ldr	r2, [pc, #164]	@ (8010460 <prvAddNewTaskToReadyList+0xb8>)
 80103bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80103be:	4b29      	ldr	r3, [pc, #164]	@ (8010464 <prvAddNewTaskToReadyList+0xbc>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d109      	bne.n	80103da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80103c6:	4a27      	ldr	r2, [pc, #156]	@ (8010464 <prvAddNewTaskToReadyList+0xbc>)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80103cc:	4b24      	ldr	r3, [pc, #144]	@ (8010460 <prvAddNewTaskToReadyList+0xb8>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d110      	bne.n	80103f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80103d4:	f000 fbe4 	bl	8010ba0 <prvInitialiseTaskLists>
 80103d8:	e00d      	b.n	80103f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80103da:	4b23      	ldr	r3, [pc, #140]	@ (8010468 <prvAddNewTaskToReadyList+0xc0>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d109      	bne.n	80103f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103e2:	4b20      	ldr	r3, [pc, #128]	@ (8010464 <prvAddNewTaskToReadyList+0xbc>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d802      	bhi.n	80103f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80103f0:	4a1c      	ldr	r2, [pc, #112]	@ (8010464 <prvAddNewTaskToReadyList+0xbc>)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80103f6:	4b1d      	ldr	r3, [pc, #116]	@ (801046c <prvAddNewTaskToReadyList+0xc4>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	3301      	adds	r3, #1
 80103fc:	4a1b      	ldr	r2, [pc, #108]	@ (801046c <prvAddNewTaskToReadyList+0xc4>)
 80103fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010404:	2201      	movs	r2, #1
 8010406:	409a      	lsls	r2, r3
 8010408:	4b19      	ldr	r3, [pc, #100]	@ (8010470 <prvAddNewTaskToReadyList+0xc8>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4313      	orrs	r3, r2
 801040e:	4a18      	ldr	r2, [pc, #96]	@ (8010470 <prvAddNewTaskToReadyList+0xc8>)
 8010410:	6013      	str	r3, [r2, #0]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010416:	4613      	mov	r3, r2
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	4413      	add	r3, r2
 801041c:	009b      	lsls	r3, r3, #2
 801041e:	4a15      	ldr	r2, [pc, #84]	@ (8010474 <prvAddNewTaskToReadyList+0xcc>)
 8010420:	441a      	add	r2, r3
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3304      	adds	r3, #4
 8010426:	4619      	mov	r1, r3
 8010428:	4610      	mov	r0, r2
 801042a:	f7fe ff49 	bl	800f2c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801042e:	f000 fffd 	bl	801142c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010432:	4b0d      	ldr	r3, [pc, #52]	@ (8010468 <prvAddNewTaskToReadyList+0xc0>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d00e      	beq.n	8010458 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801043a:	4b0a      	ldr	r3, [pc, #40]	@ (8010464 <prvAddNewTaskToReadyList+0xbc>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010444:	429a      	cmp	r2, r3
 8010446:	d207      	bcs.n	8010458 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010448:	4b0b      	ldr	r3, [pc, #44]	@ (8010478 <prvAddNewTaskToReadyList+0xd0>)
 801044a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801044e:	601a      	str	r2, [r3, #0]
 8010450:	f3bf 8f4f 	dsb	sy
 8010454:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010458:	bf00      	nop
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	20002ce4 	.word	0x20002ce4
 8010464:	20002be4 	.word	0x20002be4
 8010468:	20002cf0 	.word	0x20002cf0
 801046c:	20002d00 	.word	0x20002d00
 8010470:	20002cec 	.word	0x20002cec
 8010474:	20002be8 	.word	0x20002be8
 8010478:	e000ed04 	.word	0xe000ed04

0801047c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801047c:	b580      	push	{r7, lr}
 801047e:	b084      	sub	sp, #16
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010484:	2300      	movs	r3, #0
 8010486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d018      	beq.n	80104c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801048e:	4b14      	ldr	r3, [pc, #80]	@ (80104e0 <vTaskDelay+0x64>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d00b      	beq.n	80104ae <vTaskDelay+0x32>
	__asm volatile
 8010496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801049a:	f383 8811 	msr	BASEPRI, r3
 801049e:	f3bf 8f6f 	isb	sy
 80104a2:	f3bf 8f4f 	dsb	sy
 80104a6:	60bb      	str	r3, [r7, #8]
}
 80104a8:	bf00      	nop
 80104aa:	bf00      	nop
 80104ac:	e7fd      	b.n	80104aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80104ae:	f000 f87d 	bl	80105ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80104b2:	2100      	movs	r1, #0
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 fdf1 	bl	801109c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80104ba:	f000 f885 	bl	80105c8 <xTaskResumeAll>
 80104be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d107      	bne.n	80104d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80104c6:	4b07      	ldr	r3, [pc, #28]	@ (80104e4 <vTaskDelay+0x68>)
 80104c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104d6:	bf00      	nop
 80104d8:	3710      	adds	r7, #16
 80104da:	46bd      	mov	sp, r7
 80104dc:	bd80      	pop	{r7, pc}
 80104de:	bf00      	nop
 80104e0:	20002d0c 	.word	0x20002d0c
 80104e4:	e000ed04 	.word	0xe000ed04

080104e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b08a      	sub	sp, #40	@ 0x28
 80104ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80104ee:	2300      	movs	r3, #0
 80104f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80104f2:	2300      	movs	r3, #0
 80104f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80104f6:	463a      	mov	r2, r7
 80104f8:	1d39      	adds	r1, r7, #4
 80104fa:	f107 0308 	add.w	r3, r7, #8
 80104fe:	4618      	mov	r0, r3
 8010500:	f7f1 f9a4 	bl	800184c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010504:	6839      	ldr	r1, [r7, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	68ba      	ldr	r2, [r7, #8]
 801050a:	9202      	str	r2, [sp, #8]
 801050c:	9301      	str	r3, [sp, #4]
 801050e:	2300      	movs	r3, #0
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	2300      	movs	r3, #0
 8010514:	460a      	mov	r2, r1
 8010516:	491f      	ldr	r1, [pc, #124]	@ (8010594 <vTaskStartScheduler+0xac>)
 8010518:	481f      	ldr	r0, [pc, #124]	@ (8010598 <vTaskStartScheduler+0xb0>)
 801051a:	f7ff fe17 	bl	801014c <xTaskCreateStatic>
 801051e:	4603      	mov	r3, r0
 8010520:	4a1e      	ldr	r2, [pc, #120]	@ (801059c <vTaskStartScheduler+0xb4>)
 8010522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010524:	4b1d      	ldr	r3, [pc, #116]	@ (801059c <vTaskStartScheduler+0xb4>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d002      	beq.n	8010532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801052c:	2301      	movs	r3, #1
 801052e:	617b      	str	r3, [r7, #20]
 8010530:	e001      	b.n	8010536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010532:	2300      	movs	r3, #0
 8010534:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	2b01      	cmp	r3, #1
 801053a:	d116      	bne.n	801056a <vTaskStartScheduler+0x82>
	__asm volatile
 801053c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	613b      	str	r3, [r7, #16]
}
 801054e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010550:	4b13      	ldr	r3, [pc, #76]	@ (80105a0 <vTaskStartScheduler+0xb8>)
 8010552:	f04f 32ff 	mov.w	r2, #4294967295
 8010556:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010558:	4b12      	ldr	r3, [pc, #72]	@ (80105a4 <vTaskStartScheduler+0xbc>)
 801055a:	2201      	movs	r2, #1
 801055c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801055e:	4b12      	ldr	r3, [pc, #72]	@ (80105a8 <vTaskStartScheduler+0xc0>)
 8010560:	2200      	movs	r2, #0
 8010562:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010564:	f000 fe8c 	bl	8011280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010568:	e00f      	b.n	801058a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010570:	d10b      	bne.n	801058a <vTaskStartScheduler+0xa2>
	__asm volatile
 8010572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010576:	f383 8811 	msr	BASEPRI, r3
 801057a:	f3bf 8f6f 	isb	sy
 801057e:	f3bf 8f4f 	dsb	sy
 8010582:	60fb      	str	r3, [r7, #12]
}
 8010584:	bf00      	nop
 8010586:	bf00      	nop
 8010588:	e7fd      	b.n	8010586 <vTaskStartScheduler+0x9e>
}
 801058a:	bf00      	nop
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	08014c8c 	.word	0x08014c8c
 8010598:	08010b71 	.word	0x08010b71
 801059c:	20002d08 	.word	0x20002d08
 80105a0:	20002d04 	.word	0x20002d04
 80105a4:	20002cf0 	.word	0x20002cf0
 80105a8:	20002ce8 	.word	0x20002ce8

080105ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80105ac:	b480      	push	{r7}
 80105ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80105b0:	4b04      	ldr	r3, [pc, #16]	@ (80105c4 <vTaskSuspendAll+0x18>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3301      	adds	r3, #1
 80105b6:	4a03      	ldr	r2, [pc, #12]	@ (80105c4 <vTaskSuspendAll+0x18>)
 80105b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80105ba:	bf00      	nop
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr
 80105c4:	20002d0c 	.word	0x20002d0c

080105c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80105ce:	2300      	movs	r3, #0
 80105d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80105d2:	2300      	movs	r3, #0
 80105d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80105d6:	4b42      	ldr	r3, [pc, #264]	@ (80106e0 <xTaskResumeAll+0x118>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d10b      	bne.n	80105f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80105de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105e2:	f383 8811 	msr	BASEPRI, r3
 80105e6:	f3bf 8f6f 	isb	sy
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	603b      	str	r3, [r7, #0]
}
 80105f0:	bf00      	nop
 80105f2:	bf00      	nop
 80105f4:	e7fd      	b.n	80105f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80105f6:	f000 fee7 	bl	80113c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80105fa:	4b39      	ldr	r3, [pc, #228]	@ (80106e0 <xTaskResumeAll+0x118>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	3b01      	subs	r3, #1
 8010600:	4a37      	ldr	r2, [pc, #220]	@ (80106e0 <xTaskResumeAll+0x118>)
 8010602:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010604:	4b36      	ldr	r3, [pc, #216]	@ (80106e0 <xTaskResumeAll+0x118>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d161      	bne.n	80106d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801060c:	4b35      	ldr	r3, [pc, #212]	@ (80106e4 <xTaskResumeAll+0x11c>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d05d      	beq.n	80106d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010614:	e02e      	b.n	8010674 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010616:	4b34      	ldr	r3, [pc, #208]	@ (80106e8 <xTaskResumeAll+0x120>)
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	68db      	ldr	r3, [r3, #12]
 801061c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	3318      	adds	r3, #24
 8010622:	4618      	mov	r0, r3
 8010624:	f7fe fea9 	bl	800f37a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	3304      	adds	r3, #4
 801062c:	4618      	mov	r0, r3
 801062e:	f7fe fea4 	bl	800f37a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010636:	2201      	movs	r2, #1
 8010638:	409a      	lsls	r2, r3
 801063a:	4b2c      	ldr	r3, [pc, #176]	@ (80106ec <xTaskResumeAll+0x124>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	4313      	orrs	r3, r2
 8010640:	4a2a      	ldr	r2, [pc, #168]	@ (80106ec <xTaskResumeAll+0x124>)
 8010642:	6013      	str	r3, [r2, #0]
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010648:	4613      	mov	r3, r2
 801064a:	009b      	lsls	r3, r3, #2
 801064c:	4413      	add	r3, r2
 801064e:	009b      	lsls	r3, r3, #2
 8010650:	4a27      	ldr	r2, [pc, #156]	@ (80106f0 <xTaskResumeAll+0x128>)
 8010652:	441a      	add	r2, r3
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	3304      	adds	r3, #4
 8010658:	4619      	mov	r1, r3
 801065a:	4610      	mov	r0, r2
 801065c:	f7fe fe30 	bl	800f2c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010664:	4b23      	ldr	r3, [pc, #140]	@ (80106f4 <xTaskResumeAll+0x12c>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801066a:	429a      	cmp	r2, r3
 801066c:	d302      	bcc.n	8010674 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801066e:	4b22      	ldr	r3, [pc, #136]	@ (80106f8 <xTaskResumeAll+0x130>)
 8010670:	2201      	movs	r2, #1
 8010672:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010674:	4b1c      	ldr	r3, [pc, #112]	@ (80106e8 <xTaskResumeAll+0x120>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d1cc      	bne.n	8010616 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d001      	beq.n	8010686 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010682:	f000 fb2b 	bl	8010cdc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010686:	4b1d      	ldr	r3, [pc, #116]	@ (80106fc <xTaskResumeAll+0x134>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d010      	beq.n	80106b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010692:	f000 f847 	bl	8010724 <xTaskIncrementTick>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d002      	beq.n	80106a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801069c:	4b16      	ldr	r3, [pc, #88]	@ (80106f8 <xTaskResumeAll+0x130>)
 801069e:	2201      	movs	r2, #1
 80106a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	3b01      	subs	r3, #1
 80106a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1f1      	bne.n	8010692 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80106ae:	4b13      	ldr	r3, [pc, #76]	@ (80106fc <xTaskResumeAll+0x134>)
 80106b0:	2200      	movs	r2, #0
 80106b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80106b4:	4b10      	ldr	r3, [pc, #64]	@ (80106f8 <xTaskResumeAll+0x130>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d009      	beq.n	80106d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80106bc:	2301      	movs	r3, #1
 80106be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80106c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010700 <xTaskResumeAll+0x138>)
 80106c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106c6:	601a      	str	r2, [r3, #0]
 80106c8:	f3bf 8f4f 	dsb	sy
 80106cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80106d0:	f000 feac 	bl	801142c <vPortExitCritical>

	return xAlreadyYielded;
 80106d4:	68bb      	ldr	r3, [r7, #8]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	20002d0c 	.word	0x20002d0c
 80106e4:	20002ce4 	.word	0x20002ce4
 80106e8:	20002ca4 	.word	0x20002ca4
 80106ec:	20002cec 	.word	0x20002cec
 80106f0:	20002be8 	.word	0x20002be8
 80106f4:	20002be4 	.word	0x20002be4
 80106f8:	20002cf8 	.word	0x20002cf8
 80106fc:	20002cf4 	.word	0x20002cf4
 8010700:	e000ed04 	.word	0xe000ed04

08010704 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010704:	b480      	push	{r7}
 8010706:	b083      	sub	sp, #12
 8010708:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801070a:	4b05      	ldr	r3, [pc, #20]	@ (8010720 <xTaskGetTickCount+0x1c>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010710:	687b      	ldr	r3, [r7, #4]
}
 8010712:	4618      	mov	r0, r3
 8010714:	370c      	adds	r7, #12
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop
 8010720:	20002ce8 	.word	0x20002ce8

08010724 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b086      	sub	sp, #24
 8010728:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801072a:	2300      	movs	r3, #0
 801072c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801072e:	4b4f      	ldr	r3, [pc, #316]	@ (801086c <xTaskIncrementTick+0x148>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	f040 808f 	bne.w	8010856 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010738:	4b4d      	ldr	r3, [pc, #308]	@ (8010870 <xTaskIncrementTick+0x14c>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	3301      	adds	r3, #1
 801073e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010740:	4a4b      	ldr	r2, [pc, #300]	@ (8010870 <xTaskIncrementTick+0x14c>)
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d121      	bne.n	8010790 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801074c:	4b49      	ldr	r3, [pc, #292]	@ (8010874 <xTaskIncrementTick+0x150>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00b      	beq.n	801076e <xTaskIncrementTick+0x4a>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801075a:	f383 8811 	msr	BASEPRI, r3
 801075e:	f3bf 8f6f 	isb	sy
 8010762:	f3bf 8f4f 	dsb	sy
 8010766:	603b      	str	r3, [r7, #0]
}
 8010768:	bf00      	nop
 801076a:	bf00      	nop
 801076c:	e7fd      	b.n	801076a <xTaskIncrementTick+0x46>
 801076e:	4b41      	ldr	r3, [pc, #260]	@ (8010874 <xTaskIncrementTick+0x150>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	60fb      	str	r3, [r7, #12]
 8010774:	4b40      	ldr	r3, [pc, #256]	@ (8010878 <xTaskIncrementTick+0x154>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4a3e      	ldr	r2, [pc, #248]	@ (8010874 <xTaskIncrementTick+0x150>)
 801077a:	6013      	str	r3, [r2, #0]
 801077c:	4a3e      	ldr	r2, [pc, #248]	@ (8010878 <xTaskIncrementTick+0x154>)
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6013      	str	r3, [r2, #0]
 8010782:	4b3e      	ldr	r3, [pc, #248]	@ (801087c <xTaskIncrementTick+0x158>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	3301      	adds	r3, #1
 8010788:	4a3c      	ldr	r2, [pc, #240]	@ (801087c <xTaskIncrementTick+0x158>)
 801078a:	6013      	str	r3, [r2, #0]
 801078c:	f000 faa6 	bl	8010cdc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010790:	4b3b      	ldr	r3, [pc, #236]	@ (8010880 <xTaskIncrementTick+0x15c>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	693a      	ldr	r2, [r7, #16]
 8010796:	429a      	cmp	r2, r3
 8010798:	d348      	bcc.n	801082c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801079a:	4b36      	ldr	r3, [pc, #216]	@ (8010874 <xTaskIncrementTick+0x150>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d104      	bne.n	80107ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107a4:	4b36      	ldr	r3, [pc, #216]	@ (8010880 <xTaskIncrementTick+0x15c>)
 80107a6:	f04f 32ff 	mov.w	r2, #4294967295
 80107aa:	601a      	str	r2, [r3, #0]
					break;
 80107ac:	e03e      	b.n	801082c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107ae:	4b31      	ldr	r3, [pc, #196]	@ (8010874 <xTaskIncrementTick+0x150>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68db      	ldr	r3, [r3, #12]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d203      	bcs.n	80107ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80107c6:	4a2e      	ldr	r2, [pc, #184]	@ (8010880 <xTaskIncrementTick+0x15c>)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80107cc:	e02e      	b.n	801082c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	3304      	adds	r3, #4
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fe fdd1 	bl	800f37a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d004      	beq.n	80107ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	3318      	adds	r3, #24
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fe fdc8 	bl	800f37a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107ee:	2201      	movs	r2, #1
 80107f0:	409a      	lsls	r2, r3
 80107f2:	4b24      	ldr	r3, [pc, #144]	@ (8010884 <xTaskIncrementTick+0x160>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4313      	orrs	r3, r2
 80107f8:	4a22      	ldr	r2, [pc, #136]	@ (8010884 <xTaskIncrementTick+0x160>)
 80107fa:	6013      	str	r3, [r2, #0]
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010800:	4613      	mov	r3, r2
 8010802:	009b      	lsls	r3, r3, #2
 8010804:	4413      	add	r3, r2
 8010806:	009b      	lsls	r3, r3, #2
 8010808:	4a1f      	ldr	r2, [pc, #124]	@ (8010888 <xTaskIncrementTick+0x164>)
 801080a:	441a      	add	r2, r3
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	3304      	adds	r3, #4
 8010810:	4619      	mov	r1, r3
 8010812:	4610      	mov	r0, r2
 8010814:	f7fe fd54 	bl	800f2c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801081c:	4b1b      	ldr	r3, [pc, #108]	@ (801088c <xTaskIncrementTick+0x168>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010822:	429a      	cmp	r2, r3
 8010824:	d3b9      	bcc.n	801079a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010826:	2301      	movs	r3, #1
 8010828:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801082a:	e7b6      	b.n	801079a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801082c:	4b17      	ldr	r3, [pc, #92]	@ (801088c <xTaskIncrementTick+0x168>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010832:	4915      	ldr	r1, [pc, #84]	@ (8010888 <xTaskIncrementTick+0x164>)
 8010834:	4613      	mov	r3, r2
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	4413      	add	r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	440b      	add	r3, r1
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2b01      	cmp	r3, #1
 8010842:	d901      	bls.n	8010848 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010844:	2301      	movs	r3, #1
 8010846:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010848:	4b11      	ldr	r3, [pc, #68]	@ (8010890 <xTaskIncrementTick+0x16c>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d007      	beq.n	8010860 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010850:	2301      	movs	r3, #1
 8010852:	617b      	str	r3, [r7, #20]
 8010854:	e004      	b.n	8010860 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010856:	4b0f      	ldr	r3, [pc, #60]	@ (8010894 <xTaskIncrementTick+0x170>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	3301      	adds	r3, #1
 801085c:	4a0d      	ldr	r2, [pc, #52]	@ (8010894 <xTaskIncrementTick+0x170>)
 801085e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010860:	697b      	ldr	r3, [r7, #20]
}
 8010862:	4618      	mov	r0, r3
 8010864:	3718      	adds	r7, #24
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	20002d0c 	.word	0x20002d0c
 8010870:	20002ce8 	.word	0x20002ce8
 8010874:	20002c9c 	.word	0x20002c9c
 8010878:	20002ca0 	.word	0x20002ca0
 801087c:	20002cfc 	.word	0x20002cfc
 8010880:	20002d04 	.word	0x20002d04
 8010884:	20002cec 	.word	0x20002cec
 8010888:	20002be8 	.word	0x20002be8
 801088c:	20002be4 	.word	0x20002be4
 8010890:	20002cf8 	.word	0x20002cf8
 8010894:	20002cf4 	.word	0x20002cf4

08010898 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010898:	b480      	push	{r7}
 801089a:	b087      	sub	sp, #28
 801089c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801089e:	4b27      	ldr	r3, [pc, #156]	@ (801093c <vTaskSwitchContext+0xa4>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d003      	beq.n	80108ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80108a6:	4b26      	ldr	r3, [pc, #152]	@ (8010940 <vTaskSwitchContext+0xa8>)
 80108a8:	2201      	movs	r2, #1
 80108aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80108ac:	e040      	b.n	8010930 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80108ae:	4b24      	ldr	r3, [pc, #144]	@ (8010940 <vTaskSwitchContext+0xa8>)
 80108b0:	2200      	movs	r2, #0
 80108b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108b4:	4b23      	ldr	r3, [pc, #140]	@ (8010944 <vTaskSwitchContext+0xac>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	fab3 f383 	clz	r3, r3
 80108c0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80108c2:	7afb      	ldrb	r3, [r7, #11]
 80108c4:	f1c3 031f 	rsb	r3, r3, #31
 80108c8:	617b      	str	r3, [r7, #20]
 80108ca:	491f      	ldr	r1, [pc, #124]	@ (8010948 <vTaskSwitchContext+0xb0>)
 80108cc:	697a      	ldr	r2, [r7, #20]
 80108ce:	4613      	mov	r3, r2
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	4413      	add	r3, r2
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	440b      	add	r3, r1
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d10b      	bne.n	80108f6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80108de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e2:	f383 8811 	msr	BASEPRI, r3
 80108e6:	f3bf 8f6f 	isb	sy
 80108ea:	f3bf 8f4f 	dsb	sy
 80108ee:	607b      	str	r3, [r7, #4]
}
 80108f0:	bf00      	nop
 80108f2:	bf00      	nop
 80108f4:	e7fd      	b.n	80108f2 <vTaskSwitchContext+0x5a>
 80108f6:	697a      	ldr	r2, [r7, #20]
 80108f8:	4613      	mov	r3, r2
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	4413      	add	r3, r2
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	4a11      	ldr	r2, [pc, #68]	@ (8010948 <vTaskSwitchContext+0xb0>)
 8010902:	4413      	add	r3, r2
 8010904:	613b      	str	r3, [r7, #16]
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	685a      	ldr	r2, [r3, #4]
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	605a      	str	r2, [r3, #4]
 8010910:	693b      	ldr	r3, [r7, #16]
 8010912:	685a      	ldr	r2, [r3, #4]
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	3308      	adds	r3, #8
 8010918:	429a      	cmp	r2, r3
 801091a:	d104      	bne.n	8010926 <vTaskSwitchContext+0x8e>
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	685b      	ldr	r3, [r3, #4]
 8010920:	685a      	ldr	r2, [r3, #4]
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	605a      	str	r2, [r3, #4]
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	4a07      	ldr	r2, [pc, #28]	@ (801094c <vTaskSwitchContext+0xb4>)
 801092e:	6013      	str	r3, [r2, #0]
}
 8010930:	bf00      	nop
 8010932:	371c      	adds	r7, #28
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	20002d0c 	.word	0x20002d0c
 8010940:	20002cf8 	.word	0x20002cf8
 8010944:	20002cec 	.word	0x20002cec
 8010948:	20002be8 	.word	0x20002be8
 801094c:	20002be4 	.word	0x20002be4

08010950 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d10b      	bne.n	8010978 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010964:	f383 8811 	msr	BASEPRI, r3
 8010968:	f3bf 8f6f 	isb	sy
 801096c:	f3bf 8f4f 	dsb	sy
 8010970:	60fb      	str	r3, [r7, #12]
}
 8010972:	bf00      	nop
 8010974:	bf00      	nop
 8010976:	e7fd      	b.n	8010974 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010978:	4b07      	ldr	r3, [pc, #28]	@ (8010998 <vTaskPlaceOnEventList+0x48>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	3318      	adds	r3, #24
 801097e:	4619      	mov	r1, r3
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7fe fcc1 	bl	800f308 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010986:	2101      	movs	r1, #1
 8010988:	6838      	ldr	r0, [r7, #0]
 801098a:	f000 fb87 	bl	801109c <prvAddCurrentTaskToDelayedList>
}
 801098e:	bf00      	nop
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	20002be4 	.word	0x20002be4

0801099c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b086      	sub	sp, #24
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d10b      	bne.n	80109ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80109b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b6:	f383 8811 	msr	BASEPRI, r3
 80109ba:	f3bf 8f6f 	isb	sy
 80109be:	f3bf 8f4f 	dsb	sy
 80109c2:	60fb      	str	r3, [r7, #12]
}
 80109c4:	bf00      	nop
 80109c6:	bf00      	nop
 80109c8:	e7fd      	b.n	80109c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	3318      	adds	r3, #24
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fe fcd3 	bl	800f37a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109d4:	4b1d      	ldr	r3, [pc, #116]	@ (8010a4c <xTaskRemoveFromEventList+0xb0>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d11c      	bne.n	8010a16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	3304      	adds	r3, #4
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fe fcca 	bl	800f37a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109ea:	2201      	movs	r2, #1
 80109ec:	409a      	lsls	r2, r3
 80109ee:	4b18      	ldr	r3, [pc, #96]	@ (8010a50 <xTaskRemoveFromEventList+0xb4>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	4313      	orrs	r3, r2
 80109f4:	4a16      	ldr	r2, [pc, #88]	@ (8010a50 <xTaskRemoveFromEventList+0xb4>)
 80109f6:	6013      	str	r3, [r2, #0]
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109fc:	4613      	mov	r3, r2
 80109fe:	009b      	lsls	r3, r3, #2
 8010a00:	4413      	add	r3, r2
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	4a13      	ldr	r2, [pc, #76]	@ (8010a54 <xTaskRemoveFromEventList+0xb8>)
 8010a06:	441a      	add	r2, r3
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	3304      	adds	r3, #4
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	4610      	mov	r0, r2
 8010a10:	f7fe fc56 	bl	800f2c0 <vListInsertEnd>
 8010a14:	e005      	b.n	8010a22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	3318      	adds	r3, #24
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	480e      	ldr	r0, [pc, #56]	@ (8010a58 <xTaskRemoveFromEventList+0xbc>)
 8010a1e:	f7fe fc4f 	bl	800f2c0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a26:	4b0d      	ldr	r3, [pc, #52]	@ (8010a5c <xTaskRemoveFromEventList+0xc0>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d905      	bls.n	8010a3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010a30:	2301      	movs	r3, #1
 8010a32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010a34:	4b0a      	ldr	r3, [pc, #40]	@ (8010a60 <xTaskRemoveFromEventList+0xc4>)
 8010a36:	2201      	movs	r2, #1
 8010a38:	601a      	str	r2, [r3, #0]
 8010a3a:	e001      	b.n	8010a40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010a40:	697b      	ldr	r3, [r7, #20]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3718      	adds	r7, #24
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	20002d0c 	.word	0x20002d0c
 8010a50:	20002cec 	.word	0x20002cec
 8010a54:	20002be8 	.word	0x20002be8
 8010a58:	20002ca4 	.word	0x20002ca4
 8010a5c:	20002be4 	.word	0x20002be4
 8010a60:	20002cf8 	.word	0x20002cf8

08010a64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010a6c:	4b06      	ldr	r3, [pc, #24]	@ (8010a88 <vTaskInternalSetTimeOutState+0x24>)
 8010a6e:	681a      	ldr	r2, [r3, #0]
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010a74:	4b05      	ldr	r3, [pc, #20]	@ (8010a8c <vTaskInternalSetTimeOutState+0x28>)
 8010a76:	681a      	ldr	r2, [r3, #0]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	605a      	str	r2, [r3, #4]
}
 8010a7c:	bf00      	nop
 8010a7e:	370c      	adds	r7, #12
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr
 8010a88:	20002cfc 	.word	0x20002cfc
 8010a8c:	20002ce8 	.word	0x20002ce8

08010a90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b088      	sub	sp, #32
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d10b      	bne.n	8010ab8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aa4:	f383 8811 	msr	BASEPRI, r3
 8010aa8:	f3bf 8f6f 	isb	sy
 8010aac:	f3bf 8f4f 	dsb	sy
 8010ab0:	613b      	str	r3, [r7, #16]
}
 8010ab2:	bf00      	nop
 8010ab4:	bf00      	nop
 8010ab6:	e7fd      	b.n	8010ab4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d10b      	bne.n	8010ad6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	60fb      	str	r3, [r7, #12]
}
 8010ad0:	bf00      	nop
 8010ad2:	bf00      	nop
 8010ad4:	e7fd      	b.n	8010ad2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010ad6:	f000 fc77 	bl	80113c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010ada:	4b1d      	ldr	r3, [pc, #116]	@ (8010b50 <xTaskCheckForTimeOut+0xc0>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	685b      	ldr	r3, [r3, #4]
 8010ae4:	69ba      	ldr	r2, [r7, #24]
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010af2:	d102      	bne.n	8010afa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010af4:	2300      	movs	r3, #0
 8010af6:	61fb      	str	r3, [r7, #28]
 8010af8:	e023      	b.n	8010b42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681a      	ldr	r2, [r3, #0]
 8010afe:	4b15      	ldr	r3, [pc, #84]	@ (8010b54 <xTaskCheckForTimeOut+0xc4>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d007      	beq.n	8010b16 <xTaskCheckForTimeOut+0x86>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	69ba      	ldr	r2, [r7, #24]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d302      	bcc.n	8010b16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010b10:	2301      	movs	r3, #1
 8010b12:	61fb      	str	r3, [r7, #28]
 8010b14:	e015      	b.n	8010b42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	697a      	ldr	r2, [r7, #20]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d20b      	bcs.n	8010b38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	1ad2      	subs	r2, r2, r3
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7ff ff99 	bl	8010a64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010b32:	2300      	movs	r3, #0
 8010b34:	61fb      	str	r3, [r7, #28]
 8010b36:	e004      	b.n	8010b42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010b3e:	2301      	movs	r3, #1
 8010b40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010b42:	f000 fc73 	bl	801142c <vPortExitCritical>

	return xReturn;
 8010b46:	69fb      	ldr	r3, [r7, #28]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3720      	adds	r7, #32
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bd80      	pop	{r7, pc}
 8010b50:	20002ce8 	.word	0x20002ce8
 8010b54:	20002cfc 	.word	0x20002cfc

08010b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010b58:	b480      	push	{r7}
 8010b5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010b5c:	4b03      	ldr	r3, [pc, #12]	@ (8010b6c <vTaskMissedYield+0x14>)
 8010b5e:	2201      	movs	r2, #1
 8010b60:	601a      	str	r2, [r3, #0]
}
 8010b62:	bf00      	nop
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr
 8010b6c:	20002cf8 	.word	0x20002cf8

08010b70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010b78:	f000 f852 	bl	8010c20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010b7c:	4b06      	ldr	r3, [pc, #24]	@ (8010b98 <prvIdleTask+0x28>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d9f9      	bls.n	8010b78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010b84:	4b05      	ldr	r3, [pc, #20]	@ (8010b9c <prvIdleTask+0x2c>)
 8010b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b8a:	601a      	str	r2, [r3, #0]
 8010b8c:	f3bf 8f4f 	dsb	sy
 8010b90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010b94:	e7f0      	b.n	8010b78 <prvIdleTask+0x8>
 8010b96:	bf00      	nop
 8010b98:	20002be8 	.word	0x20002be8
 8010b9c:	e000ed04 	.word	0xe000ed04

08010ba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b082      	sub	sp, #8
 8010ba4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	607b      	str	r3, [r7, #4]
 8010baa:	e00c      	b.n	8010bc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	4613      	mov	r3, r2
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	4413      	add	r3, r2
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	4a12      	ldr	r2, [pc, #72]	@ (8010c00 <prvInitialiseTaskLists+0x60>)
 8010bb8:	4413      	add	r3, r2
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fe fb53 	bl	800f266 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	607b      	str	r3, [r7, #4]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2b06      	cmp	r3, #6
 8010bca:	d9ef      	bls.n	8010bac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010bcc:	480d      	ldr	r0, [pc, #52]	@ (8010c04 <prvInitialiseTaskLists+0x64>)
 8010bce:	f7fe fb4a 	bl	800f266 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010bd2:	480d      	ldr	r0, [pc, #52]	@ (8010c08 <prvInitialiseTaskLists+0x68>)
 8010bd4:	f7fe fb47 	bl	800f266 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010bd8:	480c      	ldr	r0, [pc, #48]	@ (8010c0c <prvInitialiseTaskLists+0x6c>)
 8010bda:	f7fe fb44 	bl	800f266 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010bde:	480c      	ldr	r0, [pc, #48]	@ (8010c10 <prvInitialiseTaskLists+0x70>)
 8010be0:	f7fe fb41 	bl	800f266 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010be4:	480b      	ldr	r0, [pc, #44]	@ (8010c14 <prvInitialiseTaskLists+0x74>)
 8010be6:	f7fe fb3e 	bl	800f266 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010bea:	4b0b      	ldr	r3, [pc, #44]	@ (8010c18 <prvInitialiseTaskLists+0x78>)
 8010bec:	4a05      	ldr	r2, [pc, #20]	@ (8010c04 <prvInitialiseTaskLists+0x64>)
 8010bee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8010c1c <prvInitialiseTaskLists+0x7c>)
 8010bf2:	4a05      	ldr	r2, [pc, #20]	@ (8010c08 <prvInitialiseTaskLists+0x68>)
 8010bf4:	601a      	str	r2, [r3, #0]
}
 8010bf6:	bf00      	nop
 8010bf8:	3708      	adds	r7, #8
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	20002be8 	.word	0x20002be8
 8010c04:	20002c74 	.word	0x20002c74
 8010c08:	20002c88 	.word	0x20002c88
 8010c0c:	20002ca4 	.word	0x20002ca4
 8010c10:	20002cb8 	.word	0x20002cb8
 8010c14:	20002cd0 	.word	0x20002cd0
 8010c18:	20002c9c 	.word	0x20002c9c
 8010c1c:	20002ca0 	.word	0x20002ca0

08010c20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b082      	sub	sp, #8
 8010c24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c26:	e019      	b.n	8010c5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010c28:	f000 fbce 	bl	80113c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c2c:	4b10      	ldr	r3, [pc, #64]	@ (8010c70 <prvCheckTasksWaitingTermination+0x50>)
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	3304      	adds	r3, #4
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7fe fb9e 	bl	800f37a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c74 <prvCheckTasksWaitingTermination+0x54>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	3b01      	subs	r3, #1
 8010c44:	4a0b      	ldr	r2, [pc, #44]	@ (8010c74 <prvCheckTasksWaitingTermination+0x54>)
 8010c46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c48:	4b0b      	ldr	r3, [pc, #44]	@ (8010c78 <prvCheckTasksWaitingTermination+0x58>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	3b01      	subs	r3, #1
 8010c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8010c78 <prvCheckTasksWaitingTermination+0x58>)
 8010c50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010c52:	f000 fbeb 	bl	801142c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 f810 	bl	8010c7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c5c:	4b06      	ldr	r3, [pc, #24]	@ (8010c78 <prvCheckTasksWaitingTermination+0x58>)
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1e1      	bne.n	8010c28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010c64:	bf00      	nop
 8010c66:	bf00      	nop
 8010c68:	3708      	adds	r7, #8
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	20002cb8 	.word	0x20002cb8
 8010c74:	20002ce4 	.word	0x20002ce4
 8010c78:	20002ccc 	.word	0x20002ccc

08010c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d108      	bne.n	8010ca0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c92:	4618      	mov	r0, r3
 8010c94:	f000 fd88 	bl	80117a8 <vPortFree>
				vPortFree( pxTCB );
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f000 fd85 	bl	80117a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010c9e:	e019      	b.n	8010cd4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010ca6:	2b01      	cmp	r3, #1
 8010ca8:	d103      	bne.n	8010cb2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f000 fd7c 	bl	80117a8 <vPortFree>
	}
 8010cb0:	e010      	b.n	8010cd4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8010cb8:	2b02      	cmp	r3, #2
 8010cba:	d00b      	beq.n	8010cd4 <prvDeleteTCB+0x58>
	__asm volatile
 8010cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cc0:	f383 8811 	msr	BASEPRI, r3
 8010cc4:	f3bf 8f6f 	isb	sy
 8010cc8:	f3bf 8f4f 	dsb	sy
 8010ccc:	60fb      	str	r3, [r7, #12]
}
 8010cce:	bf00      	nop
 8010cd0:	bf00      	nop
 8010cd2:	e7fd      	b.n	8010cd0 <prvDeleteTCB+0x54>
	}
 8010cd4:	bf00      	nop
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8010d14 <prvResetNextTaskUnblockTime+0x38>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d104      	bne.n	8010cf6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010cec:	4b0a      	ldr	r3, [pc, #40]	@ (8010d18 <prvResetNextTaskUnblockTime+0x3c>)
 8010cee:	f04f 32ff 	mov.w	r2, #4294967295
 8010cf2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010cf4:	e008      	b.n	8010d08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cf6:	4b07      	ldr	r3, [pc, #28]	@ (8010d14 <prvResetNextTaskUnblockTime+0x38>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	68db      	ldr	r3, [r3, #12]
 8010cfe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	4a04      	ldr	r2, [pc, #16]	@ (8010d18 <prvResetNextTaskUnblockTime+0x3c>)
 8010d06:	6013      	str	r3, [r2, #0]
}
 8010d08:	bf00      	nop
 8010d0a:	370c      	adds	r7, #12
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr
 8010d14:	20002c9c 	.word	0x20002c9c
 8010d18:	20002d04 	.word	0x20002d04

08010d1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010d22:	4b0b      	ldr	r3, [pc, #44]	@ (8010d50 <xTaskGetSchedulerState+0x34>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d102      	bne.n	8010d30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	607b      	str	r3, [r7, #4]
 8010d2e:	e008      	b.n	8010d42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d30:	4b08      	ldr	r3, [pc, #32]	@ (8010d54 <xTaskGetSchedulerState+0x38>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d102      	bne.n	8010d3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010d38:	2302      	movs	r3, #2
 8010d3a:	607b      	str	r3, [r7, #4]
 8010d3c:	e001      	b.n	8010d42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010d42:	687b      	ldr	r3, [r7, #4]
	}
 8010d44:	4618      	mov	r0, r3
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr
 8010d50:	20002cf0 	.word	0x20002cf0
 8010d54:	20002d0c 	.word	0x20002d0c

08010d58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010d64:	2300      	movs	r3, #0
 8010d66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d05e      	beq.n	8010e2c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d72:	4b31      	ldr	r3, [pc, #196]	@ (8010e38 <xTaskPriorityInherit+0xe0>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d24e      	bcs.n	8010e1a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	699b      	ldr	r3, [r3, #24]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	db06      	blt.n	8010d92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d84:	4b2c      	ldr	r3, [pc, #176]	@ (8010e38 <xTaskPriorityInherit+0xe0>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d8a:	f1c3 0207 	rsb	r2, r3, #7
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	6959      	ldr	r1, [r3, #20]
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	4413      	add	r3, r2
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	4a26      	ldr	r2, [pc, #152]	@ (8010e3c <xTaskPriorityInherit+0xe4>)
 8010da4:	4413      	add	r3, r2
 8010da6:	4299      	cmp	r1, r3
 8010da8:	d12f      	bne.n	8010e0a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	3304      	adds	r3, #4
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7fe fae3 	bl	800f37a <uxListRemove>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d10a      	bne.n	8010dd0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8010dc4:	43da      	mvns	r2, r3
 8010dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8010e40 <xTaskPriorityInherit+0xe8>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4013      	ands	r3, r2
 8010dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8010e40 <xTaskPriorityInherit+0xe8>)
 8010dce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010dd0:	4b19      	ldr	r3, [pc, #100]	@ (8010e38 <xTaskPriorityInherit+0xe0>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dde:	2201      	movs	r2, #1
 8010de0:	409a      	lsls	r2, r3
 8010de2:	4b17      	ldr	r3, [pc, #92]	@ (8010e40 <xTaskPriorityInherit+0xe8>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4313      	orrs	r3, r2
 8010de8:	4a15      	ldr	r2, [pc, #84]	@ (8010e40 <xTaskPriorityInherit+0xe8>)
 8010dea:	6013      	str	r3, [r2, #0]
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010df0:	4613      	mov	r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	4413      	add	r3, r2
 8010df6:	009b      	lsls	r3, r3, #2
 8010df8:	4a10      	ldr	r2, [pc, #64]	@ (8010e3c <xTaskPriorityInherit+0xe4>)
 8010dfa:	441a      	add	r2, r3
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	3304      	adds	r3, #4
 8010e00:	4619      	mov	r1, r3
 8010e02:	4610      	mov	r0, r2
 8010e04:	f7fe fa5c 	bl	800f2c0 <vListInsertEnd>
 8010e08:	e004      	b.n	8010e14 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e38 <xTaskPriorityInherit+0xe0>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010e14:	2301      	movs	r3, #1
 8010e16:	60fb      	str	r3, [r7, #12]
 8010e18:	e008      	b.n	8010e2c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e1e:	4b06      	ldr	r3, [pc, #24]	@ (8010e38 <xTaskPriorityInherit+0xe0>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d201      	bcs.n	8010e2c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
	}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3710      	adds	r7, #16
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	20002be4 	.word	0x20002be4
 8010e3c:	20002be8 	.word	0x20002be8
 8010e40:	20002cec 	.word	0x20002cec

08010e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b086      	sub	sp, #24
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010e50:	2300      	movs	r3, #0
 8010e52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d070      	beq.n	8010f3c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8010f48 <xTaskPriorityDisinherit+0x104>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	693a      	ldr	r2, [r7, #16]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d00b      	beq.n	8010e7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e68:	f383 8811 	msr	BASEPRI, r3
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	f3bf 8f4f 	dsb	sy
 8010e74:	60fb      	str	r3, [r7, #12]
}
 8010e76:	bf00      	nop
 8010e78:	bf00      	nop
 8010e7a:	e7fd      	b.n	8010e78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d10b      	bne.n	8010e9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e88:	f383 8811 	msr	BASEPRI, r3
 8010e8c:	f3bf 8f6f 	isb	sy
 8010e90:	f3bf 8f4f 	dsb	sy
 8010e94:	60bb      	str	r3, [r7, #8]
}
 8010e96:	bf00      	nop
 8010e98:	bf00      	nop
 8010e9a:	e7fd      	b.n	8010e98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ea0:	1e5a      	subs	r2, r3, #1
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d044      	beq.n	8010f3c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d140      	bne.n	8010f3c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	3304      	adds	r3, #4
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fe fa5b 	bl	800f37a <uxListRemove>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d115      	bne.n	8010ef6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ece:	491f      	ldr	r1, [pc, #124]	@ (8010f4c <xTaskPriorityDisinherit+0x108>)
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	009b      	lsls	r3, r3, #2
 8010ed4:	4413      	add	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	440b      	add	r3, r1
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d10a      	bne.n	8010ef6 <xTaskPriorityDisinherit+0xb2>
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8010eea:	43da      	mvns	r2, r3
 8010eec:	4b18      	ldr	r3, [pc, #96]	@ (8010f50 <xTaskPriorityDisinherit+0x10c>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	4a17      	ldr	r2, [pc, #92]	@ (8010f50 <xTaskPriorityDisinherit+0x10c>)
 8010ef4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010ef6:	693b      	ldr	r3, [r7, #16]
 8010ef8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f02:	f1c3 0207 	rsb	r2, r3, #7
 8010f06:	693b      	ldr	r3, [r7, #16]
 8010f08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f0e:	2201      	movs	r2, #1
 8010f10:	409a      	lsls	r2, r3
 8010f12:	4b0f      	ldr	r3, [pc, #60]	@ (8010f50 <xTaskPriorityDisinherit+0x10c>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	4a0d      	ldr	r2, [pc, #52]	@ (8010f50 <xTaskPriorityDisinherit+0x10c>)
 8010f1a:	6013      	str	r3, [r2, #0]
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f20:	4613      	mov	r3, r2
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	4413      	add	r3, r2
 8010f26:	009b      	lsls	r3, r3, #2
 8010f28:	4a08      	ldr	r2, [pc, #32]	@ (8010f4c <xTaskPriorityDisinherit+0x108>)
 8010f2a:	441a      	add	r2, r3
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	3304      	adds	r3, #4
 8010f30:	4619      	mov	r1, r3
 8010f32:	4610      	mov	r0, r2
 8010f34:	f7fe f9c4 	bl	800f2c0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010f38:	2301      	movs	r3, #1
 8010f3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f3c:	697b      	ldr	r3, [r7, #20]
	}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3718      	adds	r7, #24
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	20002be4 	.word	0x20002be4
 8010f4c:	20002be8 	.word	0x20002be8
 8010f50:	20002cec 	.word	0x20002cec

08010f54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b088      	sub	sp, #32
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010f62:	2301      	movs	r3, #1
 8010f64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d079      	beq.n	8011060 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d10b      	bne.n	8010f8c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f78:	f383 8811 	msr	BASEPRI, r3
 8010f7c:	f3bf 8f6f 	isb	sy
 8010f80:	f3bf 8f4f 	dsb	sy
 8010f84:	60fb      	str	r3, [r7, #12]
}
 8010f86:	bf00      	nop
 8010f88:	bf00      	nop
 8010f8a:	e7fd      	b.n	8010f88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010f8c:	69bb      	ldr	r3, [r7, #24]
 8010f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f90:	683a      	ldr	r2, [r7, #0]
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d902      	bls.n	8010f9c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	61fb      	str	r3, [r7, #28]
 8010f9a:	e002      	b.n	8010fa2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fa0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa6:	69fa      	ldr	r2, [r7, #28]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d059      	beq.n	8011060 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fb0:	697a      	ldr	r2, [r7, #20]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d154      	bne.n	8011060 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8011068 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	69ba      	ldr	r2, [r7, #24]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d10b      	bne.n	8010fd8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fc4:	f383 8811 	msr	BASEPRI, r3
 8010fc8:	f3bf 8f6f 	isb	sy
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	60bb      	str	r3, [r7, #8]
}
 8010fd2:	bf00      	nop
 8010fd4:	bf00      	nop
 8010fd6:	e7fd      	b.n	8010fd4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fdc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	69fa      	ldr	r2, [r7, #28]
 8010fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010fe4:	69bb      	ldr	r3, [r7, #24]
 8010fe6:	699b      	ldr	r3, [r3, #24]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	db04      	blt.n	8010ff6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	f1c3 0207 	rsb	r2, r3, #7
 8010ff2:	69bb      	ldr	r3, [r7, #24]
 8010ff4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010ff6:	69bb      	ldr	r3, [r7, #24]
 8010ff8:	6959      	ldr	r1, [r3, #20]
 8010ffa:	693a      	ldr	r2, [r7, #16]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	4413      	add	r3, r2
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	4a19      	ldr	r2, [pc, #100]	@ (801106c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011006:	4413      	add	r3, r2
 8011008:	4299      	cmp	r1, r3
 801100a:	d129      	bne.n	8011060 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	3304      	adds	r3, #4
 8011010:	4618      	mov	r0, r3
 8011012:	f7fe f9b2 	bl	800f37a <uxListRemove>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d10a      	bne.n	8011032 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801101c:	69bb      	ldr	r3, [r7, #24]
 801101e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011020:	2201      	movs	r2, #1
 8011022:	fa02 f303 	lsl.w	r3, r2, r3
 8011026:	43da      	mvns	r2, r3
 8011028:	4b11      	ldr	r3, [pc, #68]	@ (8011070 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	4013      	ands	r3, r2
 801102e:	4a10      	ldr	r2, [pc, #64]	@ (8011070 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011030:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011032:	69bb      	ldr	r3, [r7, #24]
 8011034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011036:	2201      	movs	r2, #1
 8011038:	409a      	lsls	r2, r3
 801103a:	4b0d      	ldr	r3, [pc, #52]	@ (8011070 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	4313      	orrs	r3, r2
 8011040:	4a0b      	ldr	r2, [pc, #44]	@ (8011070 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011042:	6013      	str	r3, [r2, #0]
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011048:	4613      	mov	r3, r2
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	4413      	add	r3, r2
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	4a06      	ldr	r2, [pc, #24]	@ (801106c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011052:	441a      	add	r2, r3
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	3304      	adds	r3, #4
 8011058:	4619      	mov	r1, r3
 801105a:	4610      	mov	r0, r2
 801105c:	f7fe f930 	bl	800f2c0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011060:	bf00      	nop
 8011062:	3720      	adds	r7, #32
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}
 8011068:	20002be4 	.word	0x20002be4
 801106c:	20002be8 	.word	0x20002be8
 8011070:	20002cec 	.word	0x20002cec

08011074 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011074:	b480      	push	{r7}
 8011076:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011078:	4b07      	ldr	r3, [pc, #28]	@ (8011098 <pvTaskIncrementMutexHeldCount+0x24>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d004      	beq.n	801108a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011080:	4b05      	ldr	r3, [pc, #20]	@ (8011098 <pvTaskIncrementMutexHeldCount+0x24>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011086:	3201      	adds	r2, #1
 8011088:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801108a:	4b03      	ldr	r3, [pc, #12]	@ (8011098 <pvTaskIncrementMutexHeldCount+0x24>)
 801108c:	681b      	ldr	r3, [r3, #0]
	}
 801108e:	4618      	mov	r0, r3
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr
 8011098:	20002be4 	.word	0x20002be4

0801109c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80110a6:	4b29      	ldr	r3, [pc, #164]	@ (801114c <prvAddCurrentTaskToDelayedList+0xb0>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80110ac:	4b28      	ldr	r3, [pc, #160]	@ (8011150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	3304      	adds	r3, #4
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fe f961 	bl	800f37a <uxListRemove>
 80110b8:	4603      	mov	r3, r0
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10b      	bne.n	80110d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80110be:	4b24      	ldr	r3, [pc, #144]	@ (8011150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110c4:	2201      	movs	r2, #1
 80110c6:	fa02 f303 	lsl.w	r3, r2, r3
 80110ca:	43da      	mvns	r2, r3
 80110cc:	4b21      	ldr	r3, [pc, #132]	@ (8011154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4013      	ands	r3, r2
 80110d2:	4a20      	ldr	r2, [pc, #128]	@ (8011154 <prvAddCurrentTaskToDelayedList+0xb8>)
 80110d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110dc:	d10a      	bne.n	80110f4 <prvAddCurrentTaskToDelayedList+0x58>
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d007      	beq.n	80110f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110e4:	4b1a      	ldr	r3, [pc, #104]	@ (8011150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3304      	adds	r3, #4
 80110ea:	4619      	mov	r1, r3
 80110ec:	481a      	ldr	r0, [pc, #104]	@ (8011158 <prvAddCurrentTaskToDelayedList+0xbc>)
 80110ee:	f7fe f8e7 	bl	800f2c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80110f2:	e026      	b.n	8011142 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	4413      	add	r3, r2
 80110fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80110fc:	4b14      	ldr	r3, [pc, #80]	@ (8011150 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	68ba      	ldr	r2, [r7, #8]
 8011102:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011104:	68ba      	ldr	r2, [r7, #8]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	429a      	cmp	r2, r3
 801110a:	d209      	bcs.n	8011120 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801110c:	4b13      	ldr	r3, [pc, #76]	@ (801115c <prvAddCurrentTaskToDelayedList+0xc0>)
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	4b0f      	ldr	r3, [pc, #60]	@ (8011150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	3304      	adds	r3, #4
 8011116:	4619      	mov	r1, r3
 8011118:	4610      	mov	r0, r2
 801111a:	f7fe f8f5 	bl	800f308 <vListInsert>
}
 801111e:	e010      	b.n	8011142 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011120:	4b0f      	ldr	r3, [pc, #60]	@ (8011160 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	4b0a      	ldr	r3, [pc, #40]	@ (8011150 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	3304      	adds	r3, #4
 801112a:	4619      	mov	r1, r3
 801112c:	4610      	mov	r0, r2
 801112e:	f7fe f8eb 	bl	800f308 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011132:	4b0c      	ldr	r3, [pc, #48]	@ (8011164 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68ba      	ldr	r2, [r7, #8]
 8011138:	429a      	cmp	r2, r3
 801113a:	d202      	bcs.n	8011142 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801113c:	4a09      	ldr	r2, [pc, #36]	@ (8011164 <prvAddCurrentTaskToDelayedList+0xc8>)
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	6013      	str	r3, [r2, #0]
}
 8011142:	bf00      	nop
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	20002ce8 	.word	0x20002ce8
 8011150:	20002be4 	.word	0x20002be4
 8011154:	20002cec 	.word	0x20002cec
 8011158:	20002cd0 	.word	0x20002cd0
 801115c:	20002ca0 	.word	0x20002ca0
 8011160:	20002c9c 	.word	0x20002c9c
 8011164:	20002d04 	.word	0x20002d04

08011168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011168:	b480      	push	{r7}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	3b04      	subs	r3, #4
 8011178:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	3b04      	subs	r3, #4
 8011186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	f023 0201 	bic.w	r2, r3, #1
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	3b04      	subs	r3, #4
 8011196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011198:	4a0c      	ldr	r2, [pc, #48]	@ (80111cc <pxPortInitialiseStack+0x64>)
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	3b14      	subs	r3, #20
 80111a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80111a4:	687a      	ldr	r2, [r7, #4]
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	3b04      	subs	r3, #4
 80111ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f06f 0202 	mvn.w	r2, #2
 80111b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	3b20      	subs	r3, #32
 80111bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80111be:	68fb      	ldr	r3, [r7, #12]
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3714      	adds	r7, #20
 80111c4:	46bd      	mov	sp, r7
 80111c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ca:	4770      	bx	lr
 80111cc:	080111d1 	.word	0x080111d1

080111d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80111d0:	b480      	push	{r7}
 80111d2:	b085      	sub	sp, #20
 80111d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80111d6:	2300      	movs	r3, #0
 80111d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80111da:	4b13      	ldr	r3, [pc, #76]	@ (8011228 <prvTaskExitError+0x58>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111e2:	d00b      	beq.n	80111fc <prvTaskExitError+0x2c>
	__asm volatile
 80111e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111e8:	f383 8811 	msr	BASEPRI, r3
 80111ec:	f3bf 8f6f 	isb	sy
 80111f0:	f3bf 8f4f 	dsb	sy
 80111f4:	60fb      	str	r3, [r7, #12]
}
 80111f6:	bf00      	nop
 80111f8:	bf00      	nop
 80111fa:	e7fd      	b.n	80111f8 <prvTaskExitError+0x28>
	__asm volatile
 80111fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011200:	f383 8811 	msr	BASEPRI, r3
 8011204:	f3bf 8f6f 	isb	sy
 8011208:	f3bf 8f4f 	dsb	sy
 801120c:	60bb      	str	r3, [r7, #8]
}
 801120e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011210:	bf00      	nop
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d0fc      	beq.n	8011212 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011218:	bf00      	nop
 801121a:	bf00      	nop
 801121c:	3714      	adds	r7, #20
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	20000030 	.word	0x20000030
 801122c:	00000000 	.word	0x00000000

08011230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011230:	4b07      	ldr	r3, [pc, #28]	@ (8011250 <pxCurrentTCBConst2>)
 8011232:	6819      	ldr	r1, [r3, #0]
 8011234:	6808      	ldr	r0, [r1, #0]
 8011236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801123a:	f380 8809 	msr	PSP, r0
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	f04f 0000 	mov.w	r0, #0
 8011246:	f380 8811 	msr	BASEPRI, r0
 801124a:	4770      	bx	lr
 801124c:	f3af 8000 	nop.w

08011250 <pxCurrentTCBConst2>:
 8011250:	20002be4 	.word	0x20002be4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011254:	bf00      	nop
 8011256:	bf00      	nop

08011258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011258:	4808      	ldr	r0, [pc, #32]	@ (801127c <prvPortStartFirstTask+0x24>)
 801125a:	6800      	ldr	r0, [r0, #0]
 801125c:	6800      	ldr	r0, [r0, #0]
 801125e:	f380 8808 	msr	MSP, r0
 8011262:	f04f 0000 	mov.w	r0, #0
 8011266:	f380 8814 	msr	CONTROL, r0
 801126a:	b662      	cpsie	i
 801126c:	b661      	cpsie	f
 801126e:	f3bf 8f4f 	dsb	sy
 8011272:	f3bf 8f6f 	isb	sy
 8011276:	df00      	svc	0
 8011278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801127a:	bf00      	nop
 801127c:	e000ed08 	.word	0xe000ed08

08011280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011286:	4b47      	ldr	r3, [pc, #284]	@ (80113a4 <xPortStartScheduler+0x124>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	4a47      	ldr	r2, [pc, #284]	@ (80113a8 <xPortStartScheduler+0x128>)
 801128c:	4293      	cmp	r3, r2
 801128e:	d10b      	bne.n	80112a8 <xPortStartScheduler+0x28>
	__asm volatile
 8011290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011294:	f383 8811 	msr	BASEPRI, r3
 8011298:	f3bf 8f6f 	isb	sy
 801129c:	f3bf 8f4f 	dsb	sy
 80112a0:	613b      	str	r3, [r7, #16]
}
 80112a2:	bf00      	nop
 80112a4:	bf00      	nop
 80112a6:	e7fd      	b.n	80112a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80112a8:	4b3e      	ldr	r3, [pc, #248]	@ (80113a4 <xPortStartScheduler+0x124>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a3f      	ldr	r2, [pc, #252]	@ (80113ac <xPortStartScheduler+0x12c>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d10b      	bne.n	80112ca <xPortStartScheduler+0x4a>
	__asm volatile
 80112b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112b6:	f383 8811 	msr	BASEPRI, r3
 80112ba:	f3bf 8f6f 	isb	sy
 80112be:	f3bf 8f4f 	dsb	sy
 80112c2:	60fb      	str	r3, [r7, #12]
}
 80112c4:	bf00      	nop
 80112c6:	bf00      	nop
 80112c8:	e7fd      	b.n	80112c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80112ca:	4b39      	ldr	r3, [pc, #228]	@ (80113b0 <xPortStartScheduler+0x130>)
 80112cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	22ff      	movs	r2, #255	@ 0xff
 80112da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	b2db      	uxtb	r3, r3
 80112e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80112e4:	78fb      	ldrb	r3, [r7, #3]
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	4b31      	ldr	r3, [pc, #196]	@ (80113b4 <xPortStartScheduler+0x134>)
 80112f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80112f2:	4b31      	ldr	r3, [pc, #196]	@ (80113b8 <xPortStartScheduler+0x138>)
 80112f4:	2207      	movs	r2, #7
 80112f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112f8:	e009      	b.n	801130e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80112fa:	4b2f      	ldr	r3, [pc, #188]	@ (80113b8 <xPortStartScheduler+0x138>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	3b01      	subs	r3, #1
 8011300:	4a2d      	ldr	r2, [pc, #180]	@ (80113b8 <xPortStartScheduler+0x138>)
 8011302:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011304:	78fb      	ldrb	r3, [r7, #3]
 8011306:	b2db      	uxtb	r3, r3
 8011308:	005b      	lsls	r3, r3, #1
 801130a:	b2db      	uxtb	r3, r3
 801130c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801130e:	78fb      	ldrb	r3, [r7, #3]
 8011310:	b2db      	uxtb	r3, r3
 8011312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011316:	2b80      	cmp	r3, #128	@ 0x80
 8011318:	d0ef      	beq.n	80112fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801131a:	4b27      	ldr	r3, [pc, #156]	@ (80113b8 <xPortStartScheduler+0x138>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f1c3 0307 	rsb	r3, r3, #7
 8011322:	2b04      	cmp	r3, #4
 8011324:	d00b      	beq.n	801133e <xPortStartScheduler+0xbe>
	__asm volatile
 8011326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801132a:	f383 8811 	msr	BASEPRI, r3
 801132e:	f3bf 8f6f 	isb	sy
 8011332:	f3bf 8f4f 	dsb	sy
 8011336:	60bb      	str	r3, [r7, #8]
}
 8011338:	bf00      	nop
 801133a:	bf00      	nop
 801133c:	e7fd      	b.n	801133a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801133e:	4b1e      	ldr	r3, [pc, #120]	@ (80113b8 <xPortStartScheduler+0x138>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	021b      	lsls	r3, r3, #8
 8011344:	4a1c      	ldr	r2, [pc, #112]	@ (80113b8 <xPortStartScheduler+0x138>)
 8011346:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011348:	4b1b      	ldr	r3, [pc, #108]	@ (80113b8 <xPortStartScheduler+0x138>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011350:	4a19      	ldr	r2, [pc, #100]	@ (80113b8 <xPortStartScheduler+0x138>)
 8011352:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	b2da      	uxtb	r2, r3
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801135c:	4b17      	ldr	r3, [pc, #92]	@ (80113bc <xPortStartScheduler+0x13c>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	4a16      	ldr	r2, [pc, #88]	@ (80113bc <xPortStartScheduler+0x13c>)
 8011362:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011366:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011368:	4b14      	ldr	r3, [pc, #80]	@ (80113bc <xPortStartScheduler+0x13c>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4a13      	ldr	r2, [pc, #76]	@ (80113bc <xPortStartScheduler+0x13c>)
 801136e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011372:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011374:	f000 f8da 	bl	801152c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011378:	4b11      	ldr	r3, [pc, #68]	@ (80113c0 <xPortStartScheduler+0x140>)
 801137a:	2200      	movs	r2, #0
 801137c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801137e:	f000 f8f9 	bl	8011574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011382:	4b10      	ldr	r3, [pc, #64]	@ (80113c4 <xPortStartScheduler+0x144>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4a0f      	ldr	r2, [pc, #60]	@ (80113c4 <xPortStartScheduler+0x144>)
 8011388:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801138c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801138e:	f7ff ff63 	bl	8011258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011392:	f7ff fa81 	bl	8010898 <vTaskSwitchContext>
	prvTaskExitError();
 8011396:	f7ff ff1b 	bl	80111d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801139a:	2300      	movs	r3, #0
}
 801139c:	4618      	mov	r0, r3
 801139e:	3718      	adds	r7, #24
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	e000ed00 	.word	0xe000ed00
 80113a8:	410fc271 	.word	0x410fc271
 80113ac:	410fc270 	.word	0x410fc270
 80113b0:	e000e400 	.word	0xe000e400
 80113b4:	20002d10 	.word	0x20002d10
 80113b8:	20002d14 	.word	0x20002d14
 80113bc:	e000ed20 	.word	0xe000ed20
 80113c0:	20000030 	.word	0x20000030
 80113c4:	e000ef34 	.word	0xe000ef34

080113c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80113c8:	b480      	push	{r7}
 80113ca:	b083      	sub	sp, #12
 80113cc:	af00      	add	r7, sp, #0
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	607b      	str	r3, [r7, #4]
}
 80113e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80113e2:	4b10      	ldr	r3, [pc, #64]	@ (8011424 <vPortEnterCritical+0x5c>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	3301      	adds	r3, #1
 80113e8:	4a0e      	ldr	r2, [pc, #56]	@ (8011424 <vPortEnterCritical+0x5c>)
 80113ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80113ec:	4b0d      	ldr	r3, [pc, #52]	@ (8011424 <vPortEnterCritical+0x5c>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d110      	bne.n	8011416 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80113f4:	4b0c      	ldr	r3, [pc, #48]	@ (8011428 <vPortEnterCritical+0x60>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d00b      	beq.n	8011416 <vPortEnterCritical+0x4e>
	__asm volatile
 80113fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	603b      	str	r3, [r7, #0]
}
 8011410:	bf00      	nop
 8011412:	bf00      	nop
 8011414:	e7fd      	b.n	8011412 <vPortEnterCritical+0x4a>
	}
}
 8011416:	bf00      	nop
 8011418:	370c      	adds	r7, #12
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr
 8011422:	bf00      	nop
 8011424:	20000030 	.word	0x20000030
 8011428:	e000ed04 	.word	0xe000ed04

0801142c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011432:	4b12      	ldr	r3, [pc, #72]	@ (801147c <vPortExitCritical+0x50>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d10b      	bne.n	8011452 <vPortExitCritical+0x26>
	__asm volatile
 801143a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801143e:	f383 8811 	msr	BASEPRI, r3
 8011442:	f3bf 8f6f 	isb	sy
 8011446:	f3bf 8f4f 	dsb	sy
 801144a:	607b      	str	r3, [r7, #4]
}
 801144c:	bf00      	nop
 801144e:	bf00      	nop
 8011450:	e7fd      	b.n	801144e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011452:	4b0a      	ldr	r3, [pc, #40]	@ (801147c <vPortExitCritical+0x50>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	3b01      	subs	r3, #1
 8011458:	4a08      	ldr	r2, [pc, #32]	@ (801147c <vPortExitCritical+0x50>)
 801145a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801145c:	4b07      	ldr	r3, [pc, #28]	@ (801147c <vPortExitCritical+0x50>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d105      	bne.n	8011470 <vPortExitCritical+0x44>
 8011464:	2300      	movs	r3, #0
 8011466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	f383 8811 	msr	BASEPRI, r3
}
 801146e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011470:	bf00      	nop
 8011472:	370c      	adds	r7, #12
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr
 801147c:	20000030 	.word	0x20000030

08011480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011480:	f3ef 8009 	mrs	r0, PSP
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	4b15      	ldr	r3, [pc, #84]	@ (80114e0 <pxCurrentTCBConst>)
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	f01e 0f10 	tst.w	lr, #16
 8011490:	bf08      	it	eq
 8011492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801149a:	6010      	str	r0, [r2, #0]
 801149c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80114a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80114a4:	f380 8811 	msr	BASEPRI, r0
 80114a8:	f3bf 8f4f 	dsb	sy
 80114ac:	f3bf 8f6f 	isb	sy
 80114b0:	f7ff f9f2 	bl	8010898 <vTaskSwitchContext>
 80114b4:	f04f 0000 	mov.w	r0, #0
 80114b8:	f380 8811 	msr	BASEPRI, r0
 80114bc:	bc09      	pop	{r0, r3}
 80114be:	6819      	ldr	r1, [r3, #0]
 80114c0:	6808      	ldr	r0, [r1, #0]
 80114c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c6:	f01e 0f10 	tst.w	lr, #16
 80114ca:	bf08      	it	eq
 80114cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80114d0:	f380 8809 	msr	PSP, r0
 80114d4:	f3bf 8f6f 	isb	sy
 80114d8:	4770      	bx	lr
 80114da:	bf00      	nop
 80114dc:	f3af 8000 	nop.w

080114e0 <pxCurrentTCBConst>:
 80114e0:	20002be4 	.word	0x20002be4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80114e4:	bf00      	nop
 80114e6:	bf00      	nop

080114e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
	__asm volatile
 80114ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114f2:	f383 8811 	msr	BASEPRI, r3
 80114f6:	f3bf 8f6f 	isb	sy
 80114fa:	f3bf 8f4f 	dsb	sy
 80114fe:	607b      	str	r3, [r7, #4]
}
 8011500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011502:	f7ff f90f 	bl	8010724 <xTaskIncrementTick>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	d003      	beq.n	8011514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801150c:	4b06      	ldr	r3, [pc, #24]	@ (8011528 <SysTick_Handler+0x40>)
 801150e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011512:	601a      	str	r2, [r3, #0]
 8011514:	2300      	movs	r3, #0
 8011516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	f383 8811 	msr	BASEPRI, r3
}
 801151e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011520:	bf00      	nop
 8011522:	3708      	adds	r7, #8
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}
 8011528:	e000ed04 	.word	0xe000ed04

0801152c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801152c:	b480      	push	{r7}
 801152e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011530:	4b0b      	ldr	r3, [pc, #44]	@ (8011560 <vPortSetupTimerInterrupt+0x34>)
 8011532:	2200      	movs	r2, #0
 8011534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011536:	4b0b      	ldr	r3, [pc, #44]	@ (8011564 <vPortSetupTimerInterrupt+0x38>)
 8011538:	2200      	movs	r2, #0
 801153a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801153c:	4b0a      	ldr	r3, [pc, #40]	@ (8011568 <vPortSetupTimerInterrupt+0x3c>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4a0a      	ldr	r2, [pc, #40]	@ (801156c <vPortSetupTimerInterrupt+0x40>)
 8011542:	fba2 2303 	umull	r2, r3, r2, r3
 8011546:	099b      	lsrs	r3, r3, #6
 8011548:	4a09      	ldr	r2, [pc, #36]	@ (8011570 <vPortSetupTimerInterrupt+0x44>)
 801154a:	3b01      	subs	r3, #1
 801154c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801154e:	4b04      	ldr	r3, [pc, #16]	@ (8011560 <vPortSetupTimerInterrupt+0x34>)
 8011550:	2207      	movs	r2, #7
 8011552:	601a      	str	r2, [r3, #0]
}
 8011554:	bf00      	nop
 8011556:	46bd      	mov	sp, r7
 8011558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155c:	4770      	bx	lr
 801155e:	bf00      	nop
 8011560:	e000e010 	.word	0xe000e010
 8011564:	e000e018 	.word	0xe000e018
 8011568:	20000004 	.word	0x20000004
 801156c:	10624dd3 	.word	0x10624dd3
 8011570:	e000e014 	.word	0xe000e014

08011574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011574:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011584 <vPortEnableVFP+0x10>
 8011578:	6801      	ldr	r1, [r0, #0]
 801157a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801157e:	6001      	str	r1, [r0, #0]
 8011580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011582:	bf00      	nop
 8011584:	e000ed88 	.word	0xe000ed88

08011588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801158e:	f3ef 8305 	mrs	r3, IPSR
 8011592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2b0f      	cmp	r3, #15
 8011598:	d915      	bls.n	80115c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801159a:	4a18      	ldr	r2, [pc, #96]	@ (80115fc <vPortValidateInterruptPriority+0x74>)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	4413      	add	r3, r2
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80115a4:	4b16      	ldr	r3, [pc, #88]	@ (8011600 <vPortValidateInterruptPriority+0x78>)
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	7afa      	ldrb	r2, [r7, #11]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d20b      	bcs.n	80115c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80115ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115b2:	f383 8811 	msr	BASEPRI, r3
 80115b6:	f3bf 8f6f 	isb	sy
 80115ba:	f3bf 8f4f 	dsb	sy
 80115be:	607b      	str	r3, [r7, #4]
}
 80115c0:	bf00      	nop
 80115c2:	bf00      	nop
 80115c4:	e7fd      	b.n	80115c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80115c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011604 <vPortValidateInterruptPriority+0x7c>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80115ce:	4b0e      	ldr	r3, [pc, #56]	@ (8011608 <vPortValidateInterruptPriority+0x80>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d90b      	bls.n	80115ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80115d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115da:	f383 8811 	msr	BASEPRI, r3
 80115de:	f3bf 8f6f 	isb	sy
 80115e2:	f3bf 8f4f 	dsb	sy
 80115e6:	603b      	str	r3, [r7, #0]
}
 80115e8:	bf00      	nop
 80115ea:	bf00      	nop
 80115ec:	e7fd      	b.n	80115ea <vPortValidateInterruptPriority+0x62>
	}
 80115ee:	bf00      	nop
 80115f0:	3714      	adds	r7, #20
 80115f2:	46bd      	mov	sp, r7
 80115f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop
 80115fc:	e000e3f0 	.word	0xe000e3f0
 8011600:	20002d10 	.word	0x20002d10
 8011604:	e000ed0c 	.word	0xe000ed0c
 8011608:	20002d14 	.word	0x20002d14

0801160c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b08a      	sub	sp, #40	@ 0x28
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011614:	2300      	movs	r3, #0
 8011616:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011618:	f7fe ffc8 	bl	80105ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801161c:	4b5c      	ldr	r3, [pc, #368]	@ (8011790 <pvPortMalloc+0x184>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d101      	bne.n	8011628 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011624:	f000 f930 	bl	8011888 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011628:	4b5a      	ldr	r3, [pc, #360]	@ (8011794 <pvPortMalloc+0x188>)
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4013      	ands	r3, r2
 8011630:	2b00      	cmp	r3, #0
 8011632:	f040 8095 	bne.w	8011760 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d01e      	beq.n	801167a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801163c:	2208      	movs	r2, #8
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	4413      	add	r3, r2
 8011642:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f003 0307 	and.w	r3, r3, #7
 801164a:	2b00      	cmp	r3, #0
 801164c:	d015      	beq.n	801167a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f023 0307 	bic.w	r3, r3, #7
 8011654:	3308      	adds	r3, #8
 8011656:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f003 0307 	and.w	r3, r3, #7
 801165e:	2b00      	cmp	r3, #0
 8011660:	d00b      	beq.n	801167a <pvPortMalloc+0x6e>
	__asm volatile
 8011662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011666:	f383 8811 	msr	BASEPRI, r3
 801166a:	f3bf 8f6f 	isb	sy
 801166e:	f3bf 8f4f 	dsb	sy
 8011672:	617b      	str	r3, [r7, #20]
}
 8011674:	bf00      	nop
 8011676:	bf00      	nop
 8011678:	e7fd      	b.n	8011676 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d06f      	beq.n	8011760 <pvPortMalloc+0x154>
 8011680:	4b45      	ldr	r3, [pc, #276]	@ (8011798 <pvPortMalloc+0x18c>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	429a      	cmp	r2, r3
 8011688:	d86a      	bhi.n	8011760 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801168a:	4b44      	ldr	r3, [pc, #272]	@ (801179c <pvPortMalloc+0x190>)
 801168c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801168e:	4b43      	ldr	r3, [pc, #268]	@ (801179c <pvPortMalloc+0x190>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011694:	e004      	b.n	80116a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80116a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d903      	bls.n	80116b2 <pvPortMalloc+0xa6>
 80116aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d1f1      	bne.n	8011696 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80116b2:	4b37      	ldr	r3, [pc, #220]	@ (8011790 <pvPortMalloc+0x184>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d051      	beq.n	8011760 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80116bc:	6a3b      	ldr	r3, [r7, #32]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2208      	movs	r2, #8
 80116c2:	4413      	add	r3, r2
 80116c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80116c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	6a3b      	ldr	r3, [r7, #32]
 80116cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80116ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d0:	685a      	ldr	r2, [r3, #4]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	1ad2      	subs	r2, r2, r3
 80116d6:	2308      	movs	r3, #8
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	429a      	cmp	r2, r3
 80116dc:	d920      	bls.n	8011720 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80116de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	4413      	add	r3, r2
 80116e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	f003 0307 	and.w	r3, r3, #7
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d00b      	beq.n	8011708 <pvPortMalloc+0xfc>
	__asm volatile
 80116f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f4:	f383 8811 	msr	BASEPRI, r3
 80116f8:	f3bf 8f6f 	isb	sy
 80116fc:	f3bf 8f4f 	dsb	sy
 8011700:	613b      	str	r3, [r7, #16]
}
 8011702:	bf00      	nop
 8011704:	bf00      	nop
 8011706:	e7fd      	b.n	8011704 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801170a:	685a      	ldr	r2, [r3, #4]
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	1ad2      	subs	r2, r2, r3
 8011710:	69bb      	ldr	r3, [r7, #24]
 8011712:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801171a:	69b8      	ldr	r0, [r7, #24]
 801171c:	f000 f916 	bl	801194c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011720:	4b1d      	ldr	r3, [pc, #116]	@ (8011798 <pvPortMalloc+0x18c>)
 8011722:	681a      	ldr	r2, [r3, #0]
 8011724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	4a1b      	ldr	r2, [pc, #108]	@ (8011798 <pvPortMalloc+0x18c>)
 801172c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801172e:	4b1a      	ldr	r3, [pc, #104]	@ (8011798 <pvPortMalloc+0x18c>)
 8011730:	681a      	ldr	r2, [r3, #0]
 8011732:	4b1b      	ldr	r3, [pc, #108]	@ (80117a0 <pvPortMalloc+0x194>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	429a      	cmp	r2, r3
 8011738:	d203      	bcs.n	8011742 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801173a:	4b17      	ldr	r3, [pc, #92]	@ (8011798 <pvPortMalloc+0x18c>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	4a18      	ldr	r2, [pc, #96]	@ (80117a0 <pvPortMalloc+0x194>)
 8011740:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011744:	685a      	ldr	r2, [r3, #4]
 8011746:	4b13      	ldr	r3, [pc, #76]	@ (8011794 <pvPortMalloc+0x188>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	431a      	orrs	r2, r3
 801174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011752:	2200      	movs	r2, #0
 8011754:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011756:	4b13      	ldr	r3, [pc, #76]	@ (80117a4 <pvPortMalloc+0x198>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	3301      	adds	r3, #1
 801175c:	4a11      	ldr	r2, [pc, #68]	@ (80117a4 <pvPortMalloc+0x198>)
 801175e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011760:	f7fe ff32 	bl	80105c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011764:	69fb      	ldr	r3, [r7, #28]
 8011766:	f003 0307 	and.w	r3, r3, #7
 801176a:	2b00      	cmp	r3, #0
 801176c:	d00b      	beq.n	8011786 <pvPortMalloc+0x17a>
	__asm volatile
 801176e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	60fb      	str	r3, [r7, #12]
}
 8011780:	bf00      	nop
 8011782:	bf00      	nop
 8011784:	e7fd      	b.n	8011782 <pvPortMalloc+0x176>
	return pvReturn;
 8011786:	69fb      	ldr	r3, [r7, #28]
}
 8011788:	4618      	mov	r0, r3
 801178a:	3728      	adds	r7, #40	@ 0x28
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	200103f8 	.word	0x200103f8
 8011794:	2001040c 	.word	0x2001040c
 8011798:	200103fc 	.word	0x200103fc
 801179c:	200103f0 	.word	0x200103f0
 80117a0:	20010400 	.word	0x20010400
 80117a4:	20010404 	.word	0x20010404

080117a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b086      	sub	sp, #24
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d04f      	beq.n	801185a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80117ba:	2308      	movs	r3, #8
 80117bc:	425b      	negs	r3, r3
 80117be:	697a      	ldr	r2, [r7, #20]
 80117c0:	4413      	add	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	685a      	ldr	r2, [r3, #4]
 80117cc:	4b25      	ldr	r3, [pc, #148]	@ (8011864 <vPortFree+0xbc>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4013      	ands	r3, r2
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d10b      	bne.n	80117ee <vPortFree+0x46>
	__asm volatile
 80117d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117da:	f383 8811 	msr	BASEPRI, r3
 80117de:	f3bf 8f6f 	isb	sy
 80117e2:	f3bf 8f4f 	dsb	sy
 80117e6:	60fb      	str	r3, [r7, #12]
}
 80117e8:	bf00      	nop
 80117ea:	bf00      	nop
 80117ec:	e7fd      	b.n	80117ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80117ee:	693b      	ldr	r3, [r7, #16]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d00b      	beq.n	801180e <vPortFree+0x66>
	__asm volatile
 80117f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117fa:	f383 8811 	msr	BASEPRI, r3
 80117fe:	f3bf 8f6f 	isb	sy
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	60bb      	str	r3, [r7, #8]
}
 8011808:	bf00      	nop
 801180a:	bf00      	nop
 801180c:	e7fd      	b.n	801180a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	685a      	ldr	r2, [r3, #4]
 8011812:	4b14      	ldr	r3, [pc, #80]	@ (8011864 <vPortFree+0xbc>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	4013      	ands	r3, r2
 8011818:	2b00      	cmp	r3, #0
 801181a:	d01e      	beq.n	801185a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d11a      	bne.n	801185a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	685a      	ldr	r2, [r3, #4]
 8011828:	4b0e      	ldr	r3, [pc, #56]	@ (8011864 <vPortFree+0xbc>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	43db      	mvns	r3, r3
 801182e:	401a      	ands	r2, r3
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011834:	f7fe feba 	bl	80105ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	685a      	ldr	r2, [r3, #4]
 801183c:	4b0a      	ldr	r3, [pc, #40]	@ (8011868 <vPortFree+0xc0>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4413      	add	r3, r2
 8011842:	4a09      	ldr	r2, [pc, #36]	@ (8011868 <vPortFree+0xc0>)
 8011844:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011846:	6938      	ldr	r0, [r7, #16]
 8011848:	f000 f880 	bl	801194c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801184c:	4b07      	ldr	r3, [pc, #28]	@ (801186c <vPortFree+0xc4>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	3301      	adds	r3, #1
 8011852:	4a06      	ldr	r2, [pc, #24]	@ (801186c <vPortFree+0xc4>)
 8011854:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011856:	f7fe feb7 	bl	80105c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801185a:	bf00      	nop
 801185c:	3718      	adds	r7, #24
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	2001040c 	.word	0x2001040c
 8011868:	200103fc 	.word	0x200103fc
 801186c:	20010408 	.word	0x20010408

08011870 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8011870:	b480      	push	{r7}
 8011872:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8011874:	4b03      	ldr	r3, [pc, #12]	@ (8011884 <xPortGetFreeHeapSize+0x14>)
 8011876:	681b      	ldr	r3, [r3, #0]
}
 8011878:	4618      	mov	r0, r3
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	200103fc 	.word	0x200103fc

08011888 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011888:	b480      	push	{r7}
 801188a:	b085      	sub	sp, #20
 801188c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801188e:	f24d 63d8 	movw	r3, #55000	@ 0xd6d8
 8011892:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011894:	4b27      	ldr	r3, [pc, #156]	@ (8011934 <prvHeapInit+0xac>)
 8011896:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f003 0307 	and.w	r3, r3, #7
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d00c      	beq.n	80118bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	3307      	adds	r3, #7
 80118a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	f023 0307 	bic.w	r3, r3, #7
 80118ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80118b0:	68ba      	ldr	r2, [r7, #8]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	4a1f      	ldr	r2, [pc, #124]	@ (8011934 <prvHeapInit+0xac>)
 80118b8:	4413      	add	r3, r2
 80118ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80118c0:	4a1d      	ldr	r2, [pc, #116]	@ (8011938 <prvHeapInit+0xb0>)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80118c6:	4b1c      	ldr	r3, [pc, #112]	@ (8011938 <prvHeapInit+0xb0>)
 80118c8:	2200      	movs	r2, #0
 80118ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	68ba      	ldr	r2, [r7, #8]
 80118d0:	4413      	add	r3, r2
 80118d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80118d4:	2208      	movs	r2, #8
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	1a9b      	subs	r3, r3, r2
 80118da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	f023 0307 	bic.w	r3, r3, #7
 80118e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	4a15      	ldr	r2, [pc, #84]	@ (801193c <prvHeapInit+0xb4>)
 80118e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80118ea:	4b14      	ldr	r3, [pc, #80]	@ (801193c <prvHeapInit+0xb4>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	2200      	movs	r2, #0
 80118f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80118f2:	4b12      	ldr	r3, [pc, #72]	@ (801193c <prvHeapInit+0xb4>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	2200      	movs	r2, #0
 80118f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	68fa      	ldr	r2, [r7, #12]
 8011902:	1ad2      	subs	r2, r2, r3
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011908:	4b0c      	ldr	r3, [pc, #48]	@ (801193c <prvHeapInit+0xb4>)
 801190a:	681a      	ldr	r2, [r3, #0]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	4a0a      	ldr	r2, [pc, #40]	@ (8011940 <prvHeapInit+0xb8>)
 8011916:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	4a09      	ldr	r2, [pc, #36]	@ (8011944 <prvHeapInit+0xbc>)
 801191e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011920:	4b09      	ldr	r3, [pc, #36]	@ (8011948 <prvHeapInit+0xc0>)
 8011922:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011926:	601a      	str	r2, [r3, #0]
}
 8011928:	bf00      	nop
 801192a:	3714      	adds	r7, #20
 801192c:	46bd      	mov	sp, r7
 801192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011932:	4770      	bx	lr
 8011934:	20002d18 	.word	0x20002d18
 8011938:	200103f0 	.word	0x200103f0
 801193c:	200103f8 	.word	0x200103f8
 8011940:	20010400 	.word	0x20010400
 8011944:	200103fc 	.word	0x200103fc
 8011948:	2001040c 	.word	0x2001040c

0801194c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801194c:	b480      	push	{r7}
 801194e:	b085      	sub	sp, #20
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011954:	4b28      	ldr	r3, [pc, #160]	@ (80119f8 <prvInsertBlockIntoFreeList+0xac>)
 8011956:	60fb      	str	r3, [r7, #12]
 8011958:	e002      	b.n	8011960 <prvInsertBlockIntoFreeList+0x14>
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	60fb      	str	r3, [r7, #12]
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	429a      	cmp	r2, r3
 8011968:	d8f7      	bhi.n	801195a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	68ba      	ldr	r2, [r7, #8]
 8011974:	4413      	add	r3, r2
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	429a      	cmp	r2, r3
 801197a:	d108      	bne.n	801198e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	685a      	ldr	r2, [r3, #4]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	441a      	add	r2, r3
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	68ba      	ldr	r2, [r7, #8]
 8011998:	441a      	add	r2, r3
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d118      	bne.n	80119d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	4b15      	ldr	r3, [pc, #84]	@ (80119fc <prvInsertBlockIntoFreeList+0xb0>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d00d      	beq.n	80119ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	685a      	ldr	r2, [r3, #4]
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	685b      	ldr	r3, [r3, #4]
 80119b8:	441a      	add	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	601a      	str	r2, [r3, #0]
 80119c8:	e008      	b.n	80119dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80119ca:	4b0c      	ldr	r3, [pc, #48]	@ (80119fc <prvInsertBlockIntoFreeList+0xb0>)
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	601a      	str	r2, [r3, #0]
 80119d2:	e003      	b.n	80119dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	429a      	cmp	r2, r3
 80119e2:	d002      	beq.n	80119ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80119ea:	bf00      	nop
 80119ec:	3714      	adds	r7, #20
 80119ee:	46bd      	mov	sp, r7
 80119f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop
 80119f8:	200103f0 	.word	0x200103f0
 80119fc:	200103f8 	.word	0x200103f8

08011a00 <arm_fill_f32>:
 8011a00:	b410      	push	{r4}
 8011a02:	088c      	lsrs	r4, r1, #2
 8011a04:	d010      	beq.n	8011a28 <arm_fill_f32+0x28>
 8011a06:	f100 0310 	add.w	r3, r0, #16
 8011a0a:	4622      	mov	r2, r4
 8011a0c:	3a01      	subs	r2, #1
 8011a0e:	ed03 0a04 	vstr	s0, [r3, #-16]
 8011a12:	ed03 0a03 	vstr	s0, [r3, #-12]
 8011a16:	ed03 0a02 	vstr	s0, [r3, #-8]
 8011a1a:	ed03 0a01 	vstr	s0, [r3, #-4]
 8011a1e:	f103 0310 	add.w	r3, r3, #16
 8011a22:	d1f3      	bne.n	8011a0c <arm_fill_f32+0xc>
 8011a24:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011a28:	f011 0103 	ands.w	r1, r1, #3
 8011a2c:	d003      	beq.n	8011a36 <arm_fill_f32+0x36>
 8011a2e:	3901      	subs	r1, #1
 8011a30:	eca0 0a01 	vstmia	r0!, {s0}
 8011a34:	d1fb      	bne.n	8011a2e <arm_fill_f32+0x2e>
 8011a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <arm_min_f32>:
 8011a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a40:	1e4f      	subs	r7, r1, #1
 8011a42:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8011a46:	f100 0e04 	add.w	lr, r0, #4
 8011a4a:	edd0 7a00 	vldr	s15, [r0]
 8011a4e:	d058      	beq.n	8011b02 <arm_min_f32+0xc6>
 8011a50:	3014      	adds	r0, #20
 8011a52:	46c4      	mov	ip, r8
 8011a54:	2604      	movs	r6, #4
 8011a56:	2400      	movs	r4, #0
 8011a58:	ed10 6a04 	vldr	s12, [r0, #-16]
 8011a5c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8011a60:	ed10 7a02 	vldr	s14, [r0, #-8]
 8011a64:	ed50 5a01 	vldr	s11, [r0, #-4]
 8011a68:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a70:	bf48      	it	mi
 8011a72:	eef0 7a46 	vmovmi.f32	s15, s12
 8011a76:	f1a6 0503 	sub.w	r5, r6, #3
 8011a7a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011a7e:	bf48      	it	mi
 8011a80:	462c      	movmi	r4, r5
 8011a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a86:	bfc8      	it	gt
 8011a88:	eef0 7a66 	vmovgt.f32	s15, s13
 8011a8c:	f1a6 0502 	sub.w	r5, r6, #2
 8011a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a94:	bfc8      	it	gt
 8011a96:	462c      	movgt	r4, r5
 8011a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a9c:	bfc8      	it	gt
 8011a9e:	eef0 7a47 	vmovgt.f32	s15, s14
 8011aa2:	f106 35ff 	add.w	r5, r6, #4294967295
 8011aa6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011aaa:	bfc8      	it	gt
 8011aac:	462c      	movgt	r4, r5
 8011aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab2:	bfc8      	it	gt
 8011ab4:	4634      	movgt	r4, r6
 8011ab6:	bfc8      	it	gt
 8011ab8:	eef0 7a65 	vmovgt.f32	s15, s11
 8011abc:	f1bc 0c01 	subs.w	ip, ip, #1
 8011ac0:	f106 0604 	add.w	r6, r6, #4
 8011ac4:	f100 0010 	add.w	r0, r0, #16
 8011ac8:	d1c6      	bne.n	8011a58 <arm_min_f32+0x1c>
 8011aca:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8011ace:	f017 0003 	ands.w	r0, r7, #3
 8011ad2:	d018      	beq.n	8011b06 <arm_min_f32+0xca>
 8011ad4:	1a08      	subs	r0, r1, r0
 8011ad6:	ecbe 7a01 	vldmia	lr!, {s14}
 8011ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae2:	bf48      	it	mi
 8011ae4:	4604      	movmi	r4, r0
 8011ae6:	f100 0001 	add.w	r0, r0, #1
 8011aea:	bf58      	it	pl
 8011aec:	eeb0 7a67 	vmovpl.f32	s14, s15
 8011af0:	4288      	cmp	r0, r1
 8011af2:	eef0 7a47 	vmov.f32	s15, s14
 8011af6:	d1ee      	bne.n	8011ad6 <arm_min_f32+0x9a>
 8011af8:	ed82 7a00 	vstr	s14, [r2]
 8011afc:	601c      	str	r4, [r3, #0]
 8011afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b02:	4644      	mov	r4, r8
 8011b04:	e7e3      	b.n	8011ace <arm_min_f32+0x92>
 8011b06:	eeb0 7a67 	vmov.f32	s14, s15
 8011b0a:	e7f5      	b.n	8011af8 <arm_min_f32+0xbc>

08011b0c <arm_max_f32>:
 8011b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b10:	1e4f      	subs	r7, r1, #1
 8011b12:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8011b16:	f100 0e04 	add.w	lr, r0, #4
 8011b1a:	edd0 7a00 	vldr	s15, [r0]
 8011b1e:	d058      	beq.n	8011bd2 <arm_max_f32+0xc6>
 8011b20:	3014      	adds	r0, #20
 8011b22:	46c4      	mov	ip, r8
 8011b24:	2604      	movs	r6, #4
 8011b26:	2400      	movs	r4, #0
 8011b28:	ed10 6a04 	vldr	s12, [r0, #-16]
 8011b2c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8011b30:	ed10 7a02 	vldr	s14, [r0, #-8]
 8011b34:	ed50 5a01 	vldr	s11, [r0, #-4]
 8011b38:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b40:	bfc8      	it	gt
 8011b42:	eef0 7a46 	vmovgt.f32	s15, s12
 8011b46:	f1a6 0503 	sub.w	r5, r6, #3
 8011b4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011b4e:	bfc8      	it	gt
 8011b50:	462c      	movgt	r4, r5
 8011b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b56:	bf48      	it	mi
 8011b58:	eef0 7a66 	vmovmi.f32	s15, s13
 8011b5c:	f1a6 0502 	sub.w	r5, r6, #2
 8011b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b64:	bf48      	it	mi
 8011b66:	462c      	movmi	r4, r5
 8011b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b6c:	bf48      	it	mi
 8011b6e:	eef0 7a47 	vmovmi.f32	s15, s14
 8011b72:	f106 35ff 	add.w	r5, r6, #4294967295
 8011b76:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011b7a:	bf48      	it	mi
 8011b7c:	462c      	movmi	r4, r5
 8011b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b82:	bf48      	it	mi
 8011b84:	4634      	movmi	r4, r6
 8011b86:	bf48      	it	mi
 8011b88:	eef0 7a65 	vmovmi.f32	s15, s11
 8011b8c:	f1bc 0c01 	subs.w	ip, ip, #1
 8011b90:	f106 0604 	add.w	r6, r6, #4
 8011b94:	f100 0010 	add.w	r0, r0, #16
 8011b98:	d1c6      	bne.n	8011b28 <arm_max_f32+0x1c>
 8011b9a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8011b9e:	f017 0003 	ands.w	r0, r7, #3
 8011ba2:	d018      	beq.n	8011bd6 <arm_max_f32+0xca>
 8011ba4:	1a08      	subs	r0, r1, r0
 8011ba6:	ecbe 7a01 	vldmia	lr!, {s14}
 8011baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb2:	bfc8      	it	gt
 8011bb4:	4604      	movgt	r4, r0
 8011bb6:	f100 0001 	add.w	r0, r0, #1
 8011bba:	bfd8      	it	le
 8011bbc:	eeb0 7a67 	vmovle.f32	s14, s15
 8011bc0:	4288      	cmp	r0, r1
 8011bc2:	eef0 7a47 	vmov.f32	s15, s14
 8011bc6:	d1ee      	bne.n	8011ba6 <arm_max_f32+0x9a>
 8011bc8:	ed82 7a00 	vstr	s14, [r2]
 8011bcc:	601c      	str	r4, [r3, #0]
 8011bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bd2:	4644      	mov	r4, r8
 8011bd4:	e7e3      	b.n	8011b9e <arm_max_f32+0x92>
 8011bd6:	eeb0 7a67 	vmov.f32	s14, s15
 8011bda:	e7f5      	b.n	8011bc8 <arm_max_f32+0xbc>

08011bdc <arm_rfft_fast_init_f32>:
 8011bdc:	084b      	lsrs	r3, r1, #1
 8011bde:	2b80      	cmp	r3, #128	@ 0x80
 8011be0:	b410      	push	{r4}
 8011be2:	8201      	strh	r1, [r0, #16]
 8011be4:	8003      	strh	r3, [r0, #0]
 8011be6:	d047      	beq.n	8011c78 <arm_rfft_fast_init_f32+0x9c>
 8011be8:	d917      	bls.n	8011c1a <arm_rfft_fast_init_f32+0x3e>
 8011bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011bee:	d03d      	beq.n	8011c6c <arm_rfft_fast_init_f32+0x90>
 8011bf0:	d929      	bls.n	8011c46 <arm_rfft_fast_init_f32+0x6a>
 8011bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011bf6:	d020      	beq.n	8011c3a <arm_rfft_fast_init_f32+0x5e>
 8011bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011bfc:	d113      	bne.n	8011c26 <arm_rfft_fast_init_f32+0x4a>
 8011bfe:	4921      	ldr	r1, [pc, #132]	@ (8011c84 <arm_rfft_fast_init_f32+0xa8>)
 8011c00:	4a21      	ldr	r2, [pc, #132]	@ (8011c88 <arm_rfft_fast_init_f32+0xac>)
 8011c02:	4b22      	ldr	r3, [pc, #136]	@ (8011c8c <arm_rfft_fast_init_f32+0xb0>)
 8011c04:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8011c08:	8184      	strh	r4, [r0, #12]
 8011c0a:	6081      	str	r1, [r0, #8]
 8011c0c:	6042      	str	r2, [r0, #4]
 8011c0e:	6143      	str	r3, [r0, #20]
 8011c10:	2000      	movs	r0, #0
 8011c12:	b240      	sxtb	r0, r0
 8011c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c18:	4770      	bx	lr
 8011c1a:	2b20      	cmp	r3, #32
 8011c1c:	d01c      	beq.n	8011c58 <arm_rfft_fast_init_f32+0x7c>
 8011c1e:	2b40      	cmp	r3, #64	@ 0x40
 8011c20:	d006      	beq.n	8011c30 <arm_rfft_fast_init_f32+0x54>
 8011c22:	2b10      	cmp	r3, #16
 8011c24:	d01d      	beq.n	8011c62 <arm_rfft_fast_init_f32+0x86>
 8011c26:	20ff      	movs	r0, #255	@ 0xff
 8011c28:	b240      	sxtb	r0, r0
 8011c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	2438      	movs	r4, #56	@ 0x38
 8011c32:	4917      	ldr	r1, [pc, #92]	@ (8011c90 <arm_rfft_fast_init_f32+0xb4>)
 8011c34:	4a17      	ldr	r2, [pc, #92]	@ (8011c94 <arm_rfft_fast_init_f32+0xb8>)
 8011c36:	4b18      	ldr	r3, [pc, #96]	@ (8011c98 <arm_rfft_fast_init_f32+0xbc>)
 8011c38:	e7e6      	b.n	8011c08 <arm_rfft_fast_init_f32+0x2c>
 8011c3a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8011c3e:	4917      	ldr	r1, [pc, #92]	@ (8011c9c <arm_rfft_fast_init_f32+0xc0>)
 8011c40:	4a17      	ldr	r2, [pc, #92]	@ (8011ca0 <arm_rfft_fast_init_f32+0xc4>)
 8011c42:	4b18      	ldr	r3, [pc, #96]	@ (8011ca4 <arm_rfft_fast_init_f32+0xc8>)
 8011c44:	e7e0      	b.n	8011c08 <arm_rfft_fast_init_f32+0x2c>
 8011c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c4a:	d1ec      	bne.n	8011c26 <arm_rfft_fast_init_f32+0x4a>
 8011c4c:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8011c50:	4915      	ldr	r1, [pc, #84]	@ (8011ca8 <arm_rfft_fast_init_f32+0xcc>)
 8011c52:	4a16      	ldr	r2, [pc, #88]	@ (8011cac <arm_rfft_fast_init_f32+0xd0>)
 8011c54:	4b16      	ldr	r3, [pc, #88]	@ (8011cb0 <arm_rfft_fast_init_f32+0xd4>)
 8011c56:	e7d7      	b.n	8011c08 <arm_rfft_fast_init_f32+0x2c>
 8011c58:	2430      	movs	r4, #48	@ 0x30
 8011c5a:	4916      	ldr	r1, [pc, #88]	@ (8011cb4 <arm_rfft_fast_init_f32+0xd8>)
 8011c5c:	4a16      	ldr	r2, [pc, #88]	@ (8011cb8 <arm_rfft_fast_init_f32+0xdc>)
 8011c5e:	4b17      	ldr	r3, [pc, #92]	@ (8011cbc <arm_rfft_fast_init_f32+0xe0>)
 8011c60:	e7d2      	b.n	8011c08 <arm_rfft_fast_init_f32+0x2c>
 8011c62:	2414      	movs	r4, #20
 8011c64:	4916      	ldr	r1, [pc, #88]	@ (8011cc0 <arm_rfft_fast_init_f32+0xe4>)
 8011c66:	4a17      	ldr	r2, [pc, #92]	@ (8011cc4 <arm_rfft_fast_init_f32+0xe8>)
 8011c68:	4b17      	ldr	r3, [pc, #92]	@ (8011cc8 <arm_rfft_fast_init_f32+0xec>)
 8011c6a:	e7cd      	b.n	8011c08 <arm_rfft_fast_init_f32+0x2c>
 8011c6c:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8011c70:	4916      	ldr	r1, [pc, #88]	@ (8011ccc <arm_rfft_fast_init_f32+0xf0>)
 8011c72:	4a17      	ldr	r2, [pc, #92]	@ (8011cd0 <arm_rfft_fast_init_f32+0xf4>)
 8011c74:	4b17      	ldr	r3, [pc, #92]	@ (8011cd4 <arm_rfft_fast_init_f32+0xf8>)
 8011c76:	e7c7      	b.n	8011c08 <arm_rfft_fast_init_f32+0x2c>
 8011c78:	24d0      	movs	r4, #208	@ 0xd0
 8011c7a:	4917      	ldr	r1, [pc, #92]	@ (8011cd8 <arm_rfft_fast_init_f32+0xfc>)
 8011c7c:	4a17      	ldr	r2, [pc, #92]	@ (8011cdc <arm_rfft_fast_init_f32+0x100>)
 8011c7e:	4b18      	ldr	r3, [pc, #96]	@ (8011ce0 <arm_rfft_fast_init_f32+0x104>)
 8011c80:	e7c2      	b.n	8011c08 <arm_rfft_fast_init_f32+0x2c>
 8011c82:	bf00      	nop
 8011c84:	080281ec 	.word	0x080281ec
 8011c88:	08018be0 	.word	0x08018be0
 8011c8c:	0801ed50 	.word	0x0801ed50
 8011c90:	0801cce0 	.word	0x0801cce0
 8011c94:	08029fac 	.word	0x08029fac
 8011c98:	0802c49c 	.word	0x0802c49c
 8011c9c:	080256d0 	.word	0x080256d0
 8011ca0:	080235d0 	.word	0x080235d0
 8011ca4:	0801cd50 	.word	0x0801cd50
 8011ca8:	0802c12c 	.word	0x0802c12c
 8011cac:	08022d50 	.word	0x08022d50
 8011cb0:	0802a1ac 	.word	0x0802a1ac
 8011cb4:	08026588 	.word	0x08026588
 8011cb8:	080255d0 	.word	0x080255d0
 8011cbc:	0801cbe0 	.word	0x0801cbe0
 8011cc0:	080264e0 	.word	0x080264e0
 8011cc4:	08023550 	.word	0x08023550
 8011cc8:	08026508 	.word	0x08026508
 8011ccc:	0802a9ac 	.word	0x0802a9ac
 8011cd0:	080271ec 	.word	0x080271ec
 8011cd4:	0802ad2c 	.word	0x0802ad2c
 8011cd8:	0802c69c 	.word	0x0802c69c
 8011cdc:	08026dec 	.word	0x08026dec
 8011ce0:	0802bd2c 	.word	0x0802bd2c

08011ce4 <arm_rfft_fast_f32>:
 8011ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce8:	8a06      	ldrh	r6, [r0, #16]
 8011cea:	0876      	lsrs	r6, r6, #1
 8011cec:	4607      	mov	r7, r0
 8011cee:	4615      	mov	r5, r2
 8011cf0:	8006      	strh	r6, [r0, #0]
 8011cf2:	460c      	mov	r4, r1
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d15c      	bne.n	8011db2 <arm_rfft_fast_f32+0xce>
 8011cf8:	461a      	mov	r2, r3
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	f000 fbe6 	bl	80124cc <arm_cfft_f32>
 8011d00:	edd4 7a00 	vldr	s15, [r4]
 8011d04:	ed94 7a01 	vldr	s14, [r4, #4]
 8011d08:	883e      	ldrh	r6, [r7, #0]
 8011d0a:	6978      	ldr	r0, [r7, #20]
 8011d0c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011d10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011d14:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8011d18:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011d1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d20:	3e01      	subs	r6, #1
 8011d22:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8011d26:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011d2a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011d2e:	ed85 7a00 	vstr	s14, [r5]
 8011d32:	edc5 7a01 	vstr	s15, [r5, #4]
 8011d36:	3010      	adds	r0, #16
 8011d38:	f105 0210 	add.w	r2, r5, #16
 8011d3c:	3b08      	subs	r3, #8
 8011d3e:	f104 0110 	add.w	r1, r4, #16
 8011d42:	ed51 4a02 	vldr	s9, [r1, #-8]
 8011d46:	ed93 5a02 	vldr	s10, [r3, #8]
 8011d4a:	ed11 7a01 	vldr	s14, [r1, #-4]
 8011d4e:	ed10 6a02 	vldr	s12, [r0, #-8]
 8011d52:	edd3 5a03 	vldr	s11, [r3, #12]
 8011d56:	ed50 6a01 	vldr	s13, [r0, #-4]
 8011d5a:	ee75 7a64 	vsub.f32	s15, s10, s9
 8011d5e:	ee35 4a87 	vadd.f32	s8, s11, s14
 8011d62:	ee35 5a24 	vadd.f32	s10, s10, s9
 8011d66:	ee77 5a65 	vsub.f32	s11, s14, s11
 8011d6a:	ee66 4a27 	vmul.f32	s9, s12, s15
 8011d6e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8011d72:	ee34 5a85 	vadd.f32	s10, s9, s10
 8011d76:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011d7a:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011d7e:	ee77 7a25 	vadd.f32	s15, s14, s11
 8011d82:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011d86:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011d8a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011d8e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011d92:	3e01      	subs	r6, #1
 8011d94:	ed42 6a02 	vstr	s13, [r2, #-8]
 8011d98:	ed42 7a01 	vstr	s15, [r2, #-4]
 8011d9c:	f1a3 0308 	sub.w	r3, r3, #8
 8011da0:	f101 0108 	add.w	r1, r1, #8
 8011da4:	f100 0008 	add.w	r0, r0, #8
 8011da8:	f102 0208 	add.w	r2, r2, #8
 8011dac:	d1c9      	bne.n	8011d42 <arm_rfft_fast_f32+0x5e>
 8011dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db2:	edd1 7a00 	vldr	s15, [r1]
 8011db6:	edd1 6a01 	vldr	s13, [r1, #4]
 8011dba:	6941      	ldr	r1, [r0, #20]
 8011dbc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011dc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011dc4:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8011dc8:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011dcc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011dd0:	3e01      	subs	r6, #1
 8011dd2:	ed82 7a00 	vstr	s14, [r2]
 8011dd6:	edc2 7a01 	vstr	s15, [r2, #4]
 8011dda:	00f0      	lsls	r0, r6, #3
 8011ddc:	b3ee      	cbz	r6, 8011e5a <arm_rfft_fast_f32+0x176>
 8011dde:	3808      	subs	r0, #8
 8011de0:	f101 0e10 	add.w	lr, r1, #16
 8011de4:	4420      	add	r0, r4
 8011de6:	f104 0110 	add.w	r1, r4, #16
 8011dea:	f102 0c10 	add.w	ip, r2, #16
 8011dee:	ed90 7a02 	vldr	s14, [r0, #8]
 8011df2:	ed51 6a02 	vldr	s13, [r1, #-8]
 8011df6:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8011dfa:	ed90 4a03 	vldr	s8, [r0, #12]
 8011dfe:	ed11 5a01 	vldr	s10, [r1, #-4]
 8011e02:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8011e06:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8011e0a:	ee74 4a05 	vadd.f32	s9, s8, s10
 8011e0e:	ee26 3a27 	vmul.f32	s6, s12, s15
 8011e12:	ee77 6a26 	vadd.f32	s13, s14, s13
 8011e16:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011e1a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8011e1e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011e22:	ee77 7a05 	vadd.f32	s15, s14, s10
 8011e26:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011e2a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011e2e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011e32:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8011e36:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011e3a:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011e3e:	3e01      	subs	r6, #1
 8011e40:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8011e44:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8011e48:	f1a0 0008 	sub.w	r0, r0, #8
 8011e4c:	f101 0108 	add.w	r1, r1, #8
 8011e50:	f10e 0e08 	add.w	lr, lr, #8
 8011e54:	f10c 0c08 	add.w	ip, ip, #8
 8011e58:	d1c9      	bne.n	8011dee <arm_rfft_fast_f32+0x10a>
 8011e5a:	4638      	mov	r0, r7
 8011e5c:	4629      	mov	r1, r5
 8011e5e:	461a      	mov	r2, r3
 8011e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e64:	2301      	movs	r3, #1
 8011e66:	f000 bb31 	b.w	80124cc <arm_cfft_f32>
 8011e6a:	bf00      	nop

08011e6c <arm_cfft_radix8by2_f32>:
 8011e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e70:	ed2d 8b08 	vpush	{d8-d11}
 8011e74:	f8b0 e000 	ldrh.w	lr, [r0]
 8011e78:	6842      	ldr	r2, [r0, #4]
 8011e7a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8011e7e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8011e82:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8011e86:	4607      	mov	r7, r0
 8011e88:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8011e8c:	f000 80af 	beq.w	8011fee <arm_cfft_radix8by2_f32+0x182>
 8011e90:	3310      	adds	r3, #16
 8011e92:	18ce      	adds	r6, r1, r3
 8011e94:	3210      	adds	r2, #16
 8011e96:	4443      	add	r3, r8
 8011e98:	f101 0510 	add.w	r5, r1, #16
 8011e9c:	f108 0410 	add.w	r4, r8, #16
 8011ea0:	ed54 1a04 	vldr	s3, [r4, #-16]
 8011ea4:	ed13 4a04 	vldr	s8, [r3, #-16]
 8011ea8:	ed53 3a03 	vldr	s7, [r3, #-12]
 8011eac:	ed53 5a02 	vldr	s11, [r3, #-8]
 8011eb0:	ed13 5a01 	vldr	s10, [r3, #-4]
 8011eb4:	ed54 6a03 	vldr	s13, [r4, #-12]
 8011eb8:	ed14 0a02 	vldr	s0, [r4, #-8]
 8011ebc:	ed16 2a04 	vldr	s4, [r6, #-16]
 8011ec0:	ed56 2a03 	vldr	s5, [r6, #-12]
 8011ec4:	ed15 6a03 	vldr	s12, [r5, #-12]
 8011ec8:	ed15 7a01 	vldr	s14, [r5, #-4]
 8011ecc:	ed15 3a04 	vldr	s6, [r5, #-16]
 8011ed0:	ed54 7a01 	vldr	s15, [r4, #-4]
 8011ed4:	ed56 0a02 	vldr	s1, [r6, #-8]
 8011ed8:	ed16 1a01 	vldr	s2, [r6, #-4]
 8011edc:	ed55 4a02 	vldr	s9, [r5, #-8]
 8011ee0:	ee73 ba21 	vadd.f32	s23, s6, s3
 8011ee4:	ee36 ba26 	vadd.f32	s22, s12, s13
 8011ee8:	ee37 aa27 	vadd.f32	s20, s14, s15
 8011eec:	ee72 9a04 	vadd.f32	s19, s4, s8
 8011ef0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8011ef4:	ee31 8a05 	vadd.f32	s16, s2, s10
 8011ef8:	ee74 aa80 	vadd.f32	s21, s9, s0
 8011efc:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8011f00:	ed45 ba04 	vstr	s23, [r5, #-16]
 8011f04:	ed05 ba03 	vstr	s22, [r5, #-12]
 8011f08:	ed45 aa02 	vstr	s21, [r5, #-8]
 8011f0c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8011f10:	ed06 8a01 	vstr	s16, [r6, #-4]
 8011f14:	ed46 9a04 	vstr	s19, [r6, #-16]
 8011f18:	ed06 9a03 	vstr	s18, [r6, #-12]
 8011f1c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8011f20:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011f24:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8011f28:	ed12 6a03 	vldr	s12, [r2, #-12]
 8011f2c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8011f30:	ee33 3a61 	vsub.f32	s6, s6, s3
 8011f34:	ee34 4a42 	vsub.f32	s8, s8, s4
 8011f38:	ee26 8a86 	vmul.f32	s16, s13, s12
 8011f3c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8011f40:	ee63 1a22 	vmul.f32	s3, s6, s5
 8011f44:	ee24 4a22 	vmul.f32	s8, s8, s5
 8011f48:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011f4c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8011f50:	ee23 6a86 	vmul.f32	s12, s7, s12
 8011f54:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011f58:	ee36 6a04 	vadd.f32	s12, s12, s8
 8011f5c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011f60:	ee72 3a63 	vsub.f32	s7, s4, s7
 8011f64:	ee71 2a88 	vadd.f32	s5, s3, s16
 8011f68:	ed44 6a03 	vstr	s13, [r4, #-12]
 8011f6c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8011f70:	ed43 3a04 	vstr	s7, [r3, #-16]
 8011f74:	ed03 6a03 	vstr	s12, [r3, #-12]
 8011f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f7c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8011f80:	ed12 7a01 	vldr	s14, [r2, #-4]
 8011f84:	ed52 5a02 	vldr	s11, [r2, #-8]
 8011f88:	ee35 6a41 	vsub.f32	s12, s10, s2
 8011f8c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8011f90:	ee67 3a87 	vmul.f32	s7, s15, s14
 8011f94:	ee26 5a87 	vmul.f32	s10, s13, s14
 8011f98:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8011f9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011fa0:	ee64 4a87 	vmul.f32	s9, s9, s14
 8011fa4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011fa8:	ee26 7a07 	vmul.f32	s14, s12, s14
 8011fac:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011fb0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011fb4:	ee74 5a23 	vadd.f32	s11, s8, s7
 8011fb8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8011fbc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011fc0:	f1be 0e01 	subs.w	lr, lr, #1
 8011fc4:	ed44 5a02 	vstr	s11, [r4, #-8]
 8011fc8:	f105 0510 	add.w	r5, r5, #16
 8011fcc:	ed44 7a01 	vstr	s15, [r4, #-4]
 8011fd0:	f106 0610 	add.w	r6, r6, #16
 8011fd4:	ed03 6a02 	vstr	s12, [r3, #-8]
 8011fd8:	ed03 7a01 	vstr	s14, [r3, #-4]
 8011fdc:	f102 0210 	add.w	r2, r2, #16
 8011fe0:	f104 0410 	add.w	r4, r4, #16
 8011fe4:	f103 0310 	add.w	r3, r3, #16
 8011fe8:	f47f af5a 	bne.w	8011ea0 <arm_cfft_radix8by2_f32+0x34>
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	fa1f f48c 	uxth.w	r4, ip
 8011ff2:	4608      	mov	r0, r1
 8011ff4:	2302      	movs	r3, #2
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	f000 ff78 	bl	8012eec <arm_radix8_butterfly_f32>
 8011ffc:	ecbd 8b08 	vpop	{d8-d11}
 8012000:	4640      	mov	r0, r8
 8012002:	4621      	mov	r1, r4
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	2302      	movs	r3, #2
 8012008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801200c:	f000 bf6e 	b.w	8012eec <arm_radix8_butterfly_f32>

08012010 <arm_cfft_radix8by4_f32>:
 8012010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012014:	ed2d 8b0a 	vpush	{d8-d12}
 8012018:	8802      	ldrh	r2, [r0, #0]
 801201a:	ed91 6a00 	vldr	s12, [r1]
 801201e:	b08f      	sub	sp, #60	@ 0x3c
 8012020:	460f      	mov	r7, r1
 8012022:	0852      	lsrs	r2, r2, #1
 8012024:	0093      	lsls	r3, r2, #2
 8012026:	900c      	str	r0, [sp, #48]	@ 0x30
 8012028:	9103      	str	r1, [sp, #12]
 801202a:	6841      	ldr	r1, [r0, #4]
 801202c:	ed97 7a01 	vldr	s14, [r7, #4]
 8012030:	4638      	mov	r0, r7
 8012032:	4418      	add	r0, r3
 8012034:	4606      	mov	r6, r0
 8012036:	9009      	str	r0, [sp, #36]	@ 0x24
 8012038:	4418      	add	r0, r3
 801203a:	edd0 6a00 	vldr	s13, [r0]
 801203e:	edd6 3a00 	vldr	s7, [r6]
 8012042:	edd6 2a01 	vldr	s5, [r6, #4]
 8012046:	edd0 7a01 	vldr	s15, [r0, #4]
 801204a:	900a      	str	r0, [sp, #40]	@ 0x28
 801204c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8012050:	4604      	mov	r4, r0
 8012052:	4625      	mov	r5, r4
 8012054:	441c      	add	r4, r3
 8012056:	ed94 4a00 	vldr	s8, [r4]
 801205a:	ed94 5a01 	vldr	s10, [r4, #4]
 801205e:	9401      	str	r4, [sp, #4]
 8012060:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8012064:	4630      	mov	r0, r6
 8012066:	ee74 4a24 	vadd.f32	s9, s8, s9
 801206a:	463e      	mov	r6, r7
 801206c:	ee14 ea90 	vmov	lr, s9
 8012070:	ee76 6a66 	vsub.f32	s13, s12, s13
 8012074:	f846 eb08 	str.w	lr, [r6], #8
 8012078:	ee37 6a27 	vadd.f32	s12, s14, s15
 801207c:	edd0 4a01 	vldr	s9, [r0, #4]
 8012080:	9604      	str	r6, [sp, #16]
 8012082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012086:	9e01      	ldr	r6, [sp, #4]
 8012088:	ee32 3aa6 	vadd.f32	s6, s5, s13
 801208c:	ed96 2a01 	vldr	s4, [r6, #4]
 8012090:	ee36 7a24 	vadd.f32	s14, s12, s9
 8012094:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8012098:	ee77 4ae3 	vsub.f32	s9, s15, s7
 801209c:	ee36 6a62 	vsub.f32	s12, s12, s5
 80120a0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80120a4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80120a8:	ee73 3a45 	vsub.f32	s7, s6, s10
 80120ac:	4604      	mov	r4, r0
 80120ae:	ee36 6a45 	vsub.f32	s12, s12, s10
 80120b2:	ee75 6a26 	vadd.f32	s13, s10, s13
 80120b6:	46a3      	mov	fp, r4
 80120b8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80120bc:	ee34 5a84 	vadd.f32	s10, s9, s8
 80120c0:	ee13 8a90 	vmov	r8, s7
 80120c4:	46a4      	mov	ip, r4
 80120c6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80120ca:	ed87 7a01 	vstr	s14, [r7, #4]
 80120ce:	f84b 8b08 	str.w	r8, [fp], #8
 80120d2:	f1ac 0704 	sub.w	r7, ip, #4
 80120d6:	ed8c 5a01 	vstr	s10, [ip, #4]
 80120da:	f101 0c08 	add.w	ip, r1, #8
 80120de:	462c      	mov	r4, r5
 80120e0:	f8cd c014 	str.w	ip, [sp, #20]
 80120e4:	ee15 ca90 	vmov	ip, s11
 80120e8:	f844 cb08 	str.w	ip, [r4], #8
 80120ec:	9407      	str	r4, [sp, #28]
 80120ee:	f101 0410 	add.w	r4, r1, #16
 80120f2:	ed85 6a01 	vstr	s12, [r5, #4]
 80120f6:	0852      	lsrs	r2, r2, #1
 80120f8:	9402      	str	r4, [sp, #8]
 80120fa:	462c      	mov	r4, r5
 80120fc:	f101 0518 	add.w	r5, r1, #24
 8012100:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012102:	46b2      	mov	sl, r6
 8012104:	9506      	str	r5, [sp, #24]
 8012106:	ee77 7ac4 	vsub.f32	s15, s15, s8
 801210a:	3a02      	subs	r2, #2
 801210c:	ee16 5a90 	vmov	r5, s13
 8012110:	46b6      	mov	lr, r6
 8012112:	4630      	mov	r0, r6
 8012114:	0852      	lsrs	r2, r2, #1
 8012116:	f84a 5b08 	str.w	r5, [sl], #8
 801211a:	f1a0 0604 	sub.w	r6, r0, #4
 801211e:	edce 7a01 	vstr	s15, [lr, #4]
 8012122:	9208      	str	r2, [sp, #32]
 8012124:	f000 8130 	beq.w	8012388 <arm_cfft_radix8by4_f32+0x378>
 8012128:	4691      	mov	r9, r2
 801212a:	9a03      	ldr	r2, [sp, #12]
 801212c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8012130:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8012134:	3b08      	subs	r3, #8
 8012136:	f102 0510 	add.w	r5, r2, #16
 801213a:	f101 0c20 	add.w	ip, r1, #32
 801213e:	f1a4 020c 	sub.w	r2, r4, #12
 8012142:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8012146:	4433      	add	r3, r6
 8012148:	3410      	adds	r4, #16
 801214a:	4650      	mov	r0, sl
 801214c:	4659      	mov	r1, fp
 801214e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8012152:	ed14 5a02 	vldr	s10, [r4, #-8]
 8012156:	ed91 7a00 	vldr	s14, [r1]
 801215a:	edd0 7a00 	vldr	s15, [r0]
 801215e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8012162:	ed54 5a01 	vldr	s11, [r4, #-4]
 8012166:	edd0 6a01 	vldr	s13, [r0, #4]
 801216a:	ed91 6a01 	vldr	s12, [r1, #4]
 801216e:	ee33 8a85 	vadd.f32	s16, s7, s10
 8012172:	ee34 0a25 	vadd.f32	s0, s8, s11
 8012176:	ee78 4a07 	vadd.f32	s9, s16, s14
 801217a:	ee74 5a65 	vsub.f32	s11, s8, s11
 801217e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8012182:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8012186:	ed45 4a02 	vstr	s9, [r5, #-8]
 801218a:	edd1 4a01 	vldr	s9, [r1, #4]
 801218e:	ed90 4a01 	vldr	s8, [r0, #4]
 8012192:	ee70 4a24 	vadd.f32	s9, s0, s9
 8012196:	ee76 aa05 	vadd.f32	s21, s12, s10
 801219a:	ee74 4a84 	vadd.f32	s9, s9, s8
 801219e:	ee35 aac7 	vsub.f32	s20, s11, s14
 80121a2:	ed45 4a01 	vstr	s9, [r5, #-4]
 80121a6:	edd6 1a00 	vldr	s3, [r6]
 80121aa:	edd7 0a00 	vldr	s1, [r7]
 80121ae:	ed92 4a02 	vldr	s8, [r2, #8]
 80121b2:	edd3 3a02 	vldr	s7, [r3, #8]
 80121b6:	ed93 2a01 	vldr	s4, [r3, #4]
 80121ba:	ed16 1a01 	vldr	s2, [r6, #-4]
 80121be:	edd2 2a01 	vldr	s5, [r2, #4]
 80121c2:	ed57 9a01 	vldr	s19, [r7, #-4]
 80121c6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80121ca:	ee39 3a81 	vadd.f32	s6, s19, s2
 80121ce:	ee74 8a84 	vadd.f32	s17, s9, s8
 80121d2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80121d6:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80121da:	ee7a aae6 	vsub.f32	s21, s21, s13
 80121de:	ee18 aa90 	vmov	sl, s17
 80121e2:	f847 a908 	str.w	sl, [r7], #-8
 80121e6:	edd2 8a01 	vldr	s17, [r2, #4]
 80121ea:	ed93 9a01 	vldr	s18, [r3, #4]
 80121ee:	ee73 8a28 	vadd.f32	s17, s6, s17
 80121f2:	ee3a aa27 	vadd.f32	s20, s20, s15
 80121f6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80121fa:	ee74 0a63 	vsub.f32	s1, s8, s7
 80121fe:	edc7 8a01 	vstr	s17, [r7, #4]
 8012202:	ed18 ba02 	vldr	s22, [r8, #-8]
 8012206:	ed58 8a01 	vldr	s17, [r8, #-4]
 801220a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 801220e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8012212:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8012216:	ee71 9ae2 	vsub.f32	s19, s3, s5
 801221a:	ee30 9a81 	vadd.f32	s18, s1, s2
 801221e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8012222:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8012226:	ee6a aaa8 	vmul.f32	s21, s21, s17
 801222a:	ee69 baa8 	vmul.f32	s23, s19, s17
 801222e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8012232:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8012236:	ee69 8a28 	vmul.f32	s17, s18, s17
 801223a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801223e:	ee1c aa10 	vmov	sl, s24
 8012242:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8012246:	f841 ab08 	str.w	sl, [r1], #8
 801224a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 801224e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8012252:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8012256:	ee33 3a62 	vsub.f32	s6, s6, s5
 801225a:	ed01 aa01 	vstr	s20, [r1, #-4]
 801225e:	edc2 8a01 	vstr	s17, [r2, #4]
 8012262:	ed82 ba02 	vstr	s22, [r2, #8]
 8012266:	ed5c 4a04 	vldr	s9, [ip, #-16]
 801226a:	ee74 3a63 	vsub.f32	s7, s8, s7
 801226e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8012272:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8012276:	ee30 0a46 	vsub.f32	s0, s0, s12
 801227a:	ee33 3a42 	vsub.f32	s6, s6, s4
 801227e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012282:	ee30 0a66 	vsub.f32	s0, s0, s13
 8012286:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 801228a:	ee63 8a04 	vmul.f32	s17, s6, s8
 801228e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8012292:	ee60 9a04 	vmul.f32	s19, s0, s8
 8012296:	ee28 8a04 	vmul.f32	s16, s16, s8
 801229a:	ee20 0a24 	vmul.f32	s0, s0, s9
 801229e:	ee63 3a84 	vmul.f32	s7, s7, s8
 80122a2:	ee39 4a68 	vsub.f32	s8, s18, s17
 80122a6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80122aa:	ee14 aa10 	vmov	sl, s8
 80122ae:	ee30 0a48 	vsub.f32	s0, s0, s16
 80122b2:	ee63 4a24 	vmul.f32	s9, s6, s9
 80122b6:	ed44 9a02 	vstr	s19, [r4, #-8]
 80122ba:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80122be:	ed04 0a01 	vstr	s0, [r4, #-4]
 80122c2:	f846 a908 	str.w	sl, [r6], #-8
 80122c6:	ee35 6a46 	vsub.f32	s12, s10, s12
 80122ca:	ee35 7a87 	vadd.f32	s14, s11, s14
 80122ce:	edc6 3a01 	vstr	s7, [r6, #4]
 80122d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80122d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122da:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 80122de:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 80122e2:	ee67 5a86 	vmul.f32	s11, s15, s12
 80122e6:	ee26 5a87 	vmul.f32	s10, s13, s14
 80122ea:	ee72 2a62 	vsub.f32	s5, s4, s5
 80122ee:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80122f2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80122f6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80122fa:	ee62 0a86 	vmul.f32	s1, s5, s12
 80122fe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012306:	ee21 6a06 	vmul.f32	s12, s2, s12
 801230a:	ee62 2a87 	vmul.f32	s5, s5, s14
 801230e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8012312:	ee15 aa90 	vmov	sl, s11
 8012316:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801231a:	f840 ab08 	str.w	sl, [r0], #8
 801231e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8012322:	ee76 2a22 	vadd.f32	s5, s12, s5
 8012326:	f1b9 0901 	subs.w	r9, r9, #1
 801232a:	ed40 7a01 	vstr	s15, [r0, #-4]
 801232e:	f105 0508 	add.w	r5, r5, #8
 8012332:	ed83 1a02 	vstr	s2, [r3, #8]
 8012336:	edc3 2a01 	vstr	s5, [r3, #4]
 801233a:	f108 0808 	add.w	r8, r8, #8
 801233e:	f1a2 0208 	sub.w	r2, r2, #8
 8012342:	f10c 0c10 	add.w	ip, ip, #16
 8012346:	f104 0408 	add.w	r4, r4, #8
 801234a:	f10e 0e18 	add.w	lr, lr, #24
 801234e:	f1a3 0308 	sub.w	r3, r3, #8
 8012352:	f47f aefc 	bne.w	801214e <arm_cfft_radix8by4_f32+0x13e>
 8012356:	9908      	ldr	r1, [sp, #32]
 8012358:	9802      	ldr	r0, [sp, #8]
 801235a:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 801235e:	00cb      	lsls	r3, r1, #3
 8012360:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8012364:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8012368:	9102      	str	r1, [sp, #8]
 801236a:	9904      	ldr	r1, [sp, #16]
 801236c:	4419      	add	r1, r3
 801236e:	9104      	str	r1, [sp, #16]
 8012370:	9905      	ldr	r1, [sp, #20]
 8012372:	4419      	add	r1, r3
 8012374:	9105      	str	r1, [sp, #20]
 8012376:	9907      	ldr	r1, [sp, #28]
 8012378:	449b      	add	fp, r3
 801237a:	4419      	add	r1, r3
 801237c:	449a      	add	sl, r3
 801237e:	9b06      	ldr	r3, [sp, #24]
 8012380:	9107      	str	r1, [sp, #28]
 8012382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012386:	9306      	str	r3, [sp, #24]
 8012388:	9a04      	ldr	r2, [sp, #16]
 801238a:	9807      	ldr	r0, [sp, #28]
 801238c:	edd2 3a00 	vldr	s7, [r2]
 8012390:	ed90 4a00 	vldr	s8, [r0]
 8012394:	eddb 7a00 	vldr	s15, [fp]
 8012398:	ed9a 3a00 	vldr	s6, [sl]
 801239c:	edd2 4a01 	vldr	s9, [r2, #4]
 80123a0:	ed90 7a01 	vldr	s14, [r0, #4]
 80123a4:	ed9b 2a01 	vldr	s4, [fp, #4]
 80123a8:	edda 5a01 	vldr	s11, [sl, #4]
 80123ac:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80123b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80123b2:	ee73 6a84 	vadd.f32	s13, s7, s8
 80123b6:	ee34 6a87 	vadd.f32	s12, s9, s14
 80123ba:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80123be:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80123c2:	ee33 5a05 	vadd.f32	s10, s6, s10
 80123c6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80123ca:	ed82 5a00 	vstr	s10, [r2]
 80123ce:	ed9b 5a01 	vldr	s10, [fp, #4]
 80123d2:	edda 4a01 	vldr	s9, [sl, #4]
 80123d6:	ee36 5a05 	vadd.f32	s10, s12, s10
 80123da:	ee72 3a04 	vadd.f32	s7, s4, s8
 80123de:	ee35 5a24 	vadd.f32	s10, s10, s9
 80123e2:	ee77 4a67 	vsub.f32	s9, s14, s15
 80123e6:	ed82 5a01 	vstr	s10, [r2, #4]
 80123ea:	9a05      	ldr	r2, [sp, #20]
 80123ec:	ee34 5a83 	vadd.f32	s10, s9, s6
 80123f0:	edd2 1a00 	vldr	s3, [r2]
 80123f4:	edd2 2a01 	vldr	s5, [r2, #4]
 80123f8:	9a02      	ldr	r2, [sp, #8]
 80123fa:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80123fe:	ee36 6a42 	vsub.f32	s12, s12, s4
 8012402:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8012406:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801240a:	ee65 2a22 	vmul.f32	s5, s10, s5
 801240e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8012412:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8012416:	ee35 5a63 	vsub.f32	s10, s10, s7
 801241a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801241e:	edcb 2a00 	vstr	s5, [fp]
 8012422:	ed8b 5a01 	vstr	s10, [fp, #4]
 8012426:	edd2 3a01 	vldr	s7, [r2, #4]
 801242a:	ed92 5a00 	vldr	s10, [r2]
 801242e:	9a06      	ldr	r2, [sp, #24]
 8012430:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8012434:	ee36 6a65 	vsub.f32	s12, s12, s11
 8012438:	ee66 4a85 	vmul.f32	s9, s13, s10
 801243c:	ee26 5a05 	vmul.f32	s10, s12, s10
 8012440:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8012444:	ee26 6a23 	vmul.f32	s12, s12, s7
 8012448:	ee75 6a66 	vsub.f32	s13, s10, s13
 801244c:	ee34 6a86 	vadd.f32	s12, s9, s12
 8012450:	ee34 4a42 	vsub.f32	s8, s8, s4
 8012454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012458:	edc0 6a01 	vstr	s13, [r0, #4]
 801245c:	ed80 6a00 	vstr	s12, [r0]
 8012460:	ed92 6a01 	vldr	s12, [r2, #4]
 8012464:	9803      	ldr	r0, [sp, #12]
 8012466:	ee77 7a43 	vsub.f32	s15, s14, s6
 801246a:	ee75 5a84 	vadd.f32	s11, s11, s8
 801246e:	ed92 7a00 	vldr	s14, [r2]
 8012472:	ee65 6a87 	vmul.f32	s13, s11, s14
 8012476:	ee27 7a87 	vmul.f32	s14, s15, s14
 801247a:	ee65 5a86 	vmul.f32	s11, s11, s12
 801247e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012482:	ee77 5a65 	vsub.f32	s11, s14, s11
 8012486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801248a:	edca 5a01 	vstr	s11, [sl, #4]
 801248e:	edca 7a00 	vstr	s15, [sl]
 8012492:	6872      	ldr	r2, [r6, #4]
 8012494:	4621      	mov	r1, r4
 8012496:	2304      	movs	r3, #4
 8012498:	f000 fd28 	bl	8012eec <arm_radix8_butterfly_f32>
 801249c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801249e:	6872      	ldr	r2, [r6, #4]
 80124a0:	4621      	mov	r1, r4
 80124a2:	2304      	movs	r3, #4
 80124a4:	f000 fd22 	bl	8012eec <arm_radix8_butterfly_f32>
 80124a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80124aa:	6872      	ldr	r2, [r6, #4]
 80124ac:	4621      	mov	r1, r4
 80124ae:	2304      	movs	r3, #4
 80124b0:	f000 fd1c 	bl	8012eec <arm_radix8_butterfly_f32>
 80124b4:	9801      	ldr	r0, [sp, #4]
 80124b6:	6872      	ldr	r2, [r6, #4]
 80124b8:	4621      	mov	r1, r4
 80124ba:	2304      	movs	r3, #4
 80124bc:	b00f      	add	sp, #60	@ 0x3c
 80124be:	ecbd 8b0a 	vpop	{d8-d12}
 80124c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c6:	f000 bd11 	b.w	8012eec <arm_radix8_butterfly_f32>
 80124ca:	bf00      	nop

080124cc <arm_cfft_f32>:
 80124cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d0:	2a01      	cmp	r2, #1
 80124d2:	4606      	mov	r6, r0
 80124d4:	4617      	mov	r7, r2
 80124d6:	460c      	mov	r4, r1
 80124d8:	4698      	mov	r8, r3
 80124da:	8805      	ldrh	r5, [r0, #0]
 80124dc:	d054      	beq.n	8012588 <arm_cfft_f32+0xbc>
 80124de:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80124e2:	d04c      	beq.n	801257e <arm_cfft_f32+0xb2>
 80124e4:	d916      	bls.n	8012514 <arm_cfft_f32+0x48>
 80124e6:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80124ea:	d01a      	beq.n	8012522 <arm_cfft_f32+0x56>
 80124ec:	d95c      	bls.n	80125a8 <arm_cfft_f32+0xdc>
 80124ee:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80124f2:	d044      	beq.n	801257e <arm_cfft_f32+0xb2>
 80124f4:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80124f8:	d105      	bne.n	8012506 <arm_cfft_f32+0x3a>
 80124fa:	4620      	mov	r0, r4
 80124fc:	4629      	mov	r1, r5
 80124fe:	6872      	ldr	r2, [r6, #4]
 8012500:	2301      	movs	r3, #1
 8012502:	f000 fcf3 	bl	8012eec <arm_radix8_butterfly_f32>
 8012506:	f1b8 0f00 	cmp.w	r8, #0
 801250a:	d111      	bne.n	8012530 <arm_cfft_f32+0x64>
 801250c:	2f01      	cmp	r7, #1
 801250e:	d016      	beq.n	801253e <arm_cfft_f32+0x72>
 8012510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012514:	2d20      	cmp	r5, #32
 8012516:	d032      	beq.n	801257e <arm_cfft_f32+0xb2>
 8012518:	d94a      	bls.n	80125b0 <arm_cfft_f32+0xe4>
 801251a:	2d40      	cmp	r5, #64	@ 0x40
 801251c:	d0ed      	beq.n	80124fa <arm_cfft_f32+0x2e>
 801251e:	2d80      	cmp	r5, #128	@ 0x80
 8012520:	d1f1      	bne.n	8012506 <arm_cfft_f32+0x3a>
 8012522:	4630      	mov	r0, r6
 8012524:	4621      	mov	r1, r4
 8012526:	f7ff fca1 	bl	8011e6c <arm_cfft_radix8by2_f32>
 801252a:	f1b8 0f00 	cmp.w	r8, #0
 801252e:	d0ed      	beq.n	801250c <arm_cfft_f32+0x40>
 8012530:	4620      	mov	r0, r4
 8012532:	89b1      	ldrh	r1, [r6, #12]
 8012534:	68b2      	ldr	r2, [r6, #8]
 8012536:	f7ed fe53 	bl	80001e0 <arm_bitreversal_32>
 801253a:	2f01      	cmp	r7, #1
 801253c:	d1e8      	bne.n	8012510 <arm_cfft_f32+0x44>
 801253e:	ee07 5a90 	vmov	s15, r5
 8012542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012546:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801254a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 801254e:	2d00      	cmp	r5, #0
 8012550:	d0de      	beq.n	8012510 <arm_cfft_f32+0x44>
 8012552:	f104 0108 	add.w	r1, r4, #8
 8012556:	2300      	movs	r3, #0
 8012558:	3301      	adds	r3, #1
 801255a:	429d      	cmp	r5, r3
 801255c:	f101 0108 	add.w	r1, r1, #8
 8012560:	ed11 7a04 	vldr	s14, [r1, #-16]
 8012564:	ed51 7a03 	vldr	s15, [r1, #-12]
 8012568:	ee27 7a26 	vmul.f32	s14, s14, s13
 801256c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012570:	ed01 7a04 	vstr	s14, [r1, #-16]
 8012574:	ed41 7a03 	vstr	s15, [r1, #-12]
 8012578:	d1ee      	bne.n	8012558 <arm_cfft_f32+0x8c>
 801257a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801257e:	4630      	mov	r0, r6
 8012580:	4621      	mov	r1, r4
 8012582:	f7ff fd45 	bl	8012010 <arm_cfft_radix8by4_f32>
 8012586:	e7be      	b.n	8012506 <arm_cfft_f32+0x3a>
 8012588:	b1ad      	cbz	r5, 80125b6 <arm_cfft_f32+0xea>
 801258a:	f101 030c 	add.w	r3, r1, #12
 801258e:	2200      	movs	r2, #0
 8012590:	ed53 7a02 	vldr	s15, [r3, #-8]
 8012594:	3201      	adds	r2, #1
 8012596:	eef1 7a67 	vneg.f32	s15, s15
 801259a:	4295      	cmp	r5, r2
 801259c:	ed43 7a02 	vstr	s15, [r3, #-8]
 80125a0:	f103 0308 	add.w	r3, r3, #8
 80125a4:	d1f4      	bne.n	8012590 <arm_cfft_f32+0xc4>
 80125a6:	e79a      	b.n	80124de <arm_cfft_f32+0x12>
 80125a8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80125ac:	d0a5      	beq.n	80124fa <arm_cfft_f32+0x2e>
 80125ae:	e7aa      	b.n	8012506 <arm_cfft_f32+0x3a>
 80125b0:	2d10      	cmp	r5, #16
 80125b2:	d0b6      	beq.n	8012522 <arm_cfft_f32+0x56>
 80125b4:	e7a7      	b.n	8012506 <arm_cfft_f32+0x3a>
 80125b6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80125ba:	d894      	bhi.n	80124e6 <arm_cfft_f32+0x1a>
 80125bc:	e7aa      	b.n	8012514 <arm_cfft_f32+0x48>
 80125be:	bf00      	nop

080125c0 <arm_fir_init_f32>:
 80125c0:	b570      	push	{r4, r5, r6, lr}
 80125c2:	9c04      	ldr	r4, [sp, #16]
 80125c4:	6082      	str	r2, [r0, #8]
 80125c6:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80125ca:	3c01      	subs	r4, #1
 80125cc:	4605      	mov	r5, r0
 80125ce:	440c      	add	r4, r1
 80125d0:	8001      	strh	r1, [r0, #0]
 80125d2:	461e      	mov	r6, r3
 80125d4:	00a2      	lsls	r2, r4, #2
 80125d6:	4618      	mov	r0, r3
 80125d8:	2100      	movs	r1, #0
 80125da:	f001 f8bc 	bl	8013756 <memset>
 80125de:	606e      	str	r6, [r5, #4]
 80125e0:	bd70      	pop	{r4, r5, r6, pc}
 80125e2:	bf00      	nop

080125e4 <arm_fir_f32>:
 80125e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e8:	ed2d 8b10 	vpush	{d8-d15}
 80125ec:	b089      	sub	sp, #36	@ 0x24
 80125ee:	4605      	mov	r5, r0
 80125f0:	9003      	str	r0, [sp, #12]
 80125f2:	8800      	ldrh	r0, [r0, #0]
 80125f4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80125f8:	9304      	str	r3, [sp, #16]
 80125fa:	461e      	mov	r6, r3
 80125fc:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8012600:	3b01      	subs	r3, #1
 8012602:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8012606:	08f3      	lsrs	r3, r6, #3
 8012608:	f8d5 8008 	ldr.w	r8, [r5, #8]
 801260c:	9001      	str	r0, [sp, #4]
 801260e:	4625      	mov	r5, r4
 8012610:	9400      	str	r4, [sp, #0]
 8012612:	9302      	str	r3, [sp, #8]
 8012614:	f000 81ee 	beq.w	80129f4 <arm_fir_f32+0x410>
 8012618:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 801261c:	469e      	mov	lr, r3
 801261e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8012622:	1f1e      	subs	r6, r3, #4
 8012624:	4604      	mov	r4, r0
 8012626:	9605      	str	r6, [sp, #20]
 8012628:	eb08 0003 	add.w	r0, r8, r3
 801262c:	f004 0a07 	and.w	sl, r4, #7
 8012630:	4613      	mov	r3, r2
 8012632:	f10c 0420 	add.w	r4, ip, #32
 8012636:	f8cd c018 	str.w	ip, [sp, #24]
 801263a:	4684      	mov	ip, r0
 801263c:	4648      	mov	r0, r9
 801263e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012642:	9107      	str	r1, [sp, #28]
 8012644:	f105 0720 	add.w	r7, r5, #32
 8012648:	f101 0620 	add.w	r6, r1, #32
 801264c:	f102 0520 	add.w	r5, r2, #32
 8012650:	4652      	mov	r2, sl
 8012652:	469a      	mov	sl, r3
 8012654:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8012658:	f847 3c20 	str.w	r3, [r7, #-32]
 801265c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8012660:	f847 3c1c 	str.w	r3, [r7, #-28]
 8012664:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8012668:	f847 3c18 	str.w	r3, [r7, #-24]
 801266c:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8012670:	f847 3c14 	str.w	r3, [r7, #-20]
 8012674:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8012678:	f847 3c10 	str.w	r3, [r7, #-16]
 801267c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8012680:	f847 3c0c 	str.w	r3, [r7, #-12]
 8012684:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8012688:	f847 3c08 	str.w	r3, [r7, #-8]
 801268c:	eddf 3af1 	vldr	s7, [pc, #964]	@ 8012a54 <arm_fir_f32+0x470>
 8012690:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012694:	f847 3c04 	str.w	r3, [r7, #-4]
 8012698:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 801269c:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 80126a0:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 80126a4:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 80126a8:	ed14 1a04 	vldr	s2, [r4, #-16]
 80126ac:	ed54 0a03 	vldr	s1, [r4, #-12]
 80126b0:	ed14 0a02 	vldr	s0, [r4, #-8]
 80126b4:	1f21      	subs	r1, r4, #4
 80126b6:	eef0 8a63 	vmov.f32	s17, s7
 80126ba:	eef0 9a63 	vmov.f32	s19, s7
 80126be:	eef0 aa63 	vmov.f32	s21, s7
 80126c2:	eef0 ba63 	vmov.f32	s23, s7
 80126c6:	eeb0 ca63 	vmov.f32	s24, s7
 80126ca:	eef0 ca63 	vmov.f32	s25, s7
 80126ce:	eeb0 da63 	vmov.f32	s26, s7
 80126d2:	2800      	cmp	r0, #0
 80126d4:	f000 81e8 	beq.w	8012aa8 <arm_fir_f32+0x4c4>
 80126d8:	f108 0120 	add.w	r1, r8, #32
 80126dc:	f104 031c 	add.w	r3, r4, #28
 80126e0:	4683      	mov	fp, r0
 80126e2:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 80126e6:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 80126ea:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 80126ee:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 80126f2:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 80126f6:	ed11 6a04 	vldr	s12, [r1, #-16]
 80126fa:	ed51 6a03 	vldr	s13, [r1, #-12]
 80126fe:	ed11 7a02 	vldr	s14, [r1, #-8]
 8012702:	ed51 7a01 	vldr	s15, [r1, #-4]
 8012706:	ee23 fa04 	vmul.f32	s30, s6, s8
 801270a:	ee62 ea84 	vmul.f32	s29, s5, s8
 801270e:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 8012712:	ee22 ea04 	vmul.f32	s28, s4, s8
 8012716:	ee61 da84 	vmul.f32	s27, s3, s8
 801271a:	ee21 ba04 	vmul.f32	s22, s2, s8
 801271e:	ee20 aa84 	vmul.f32	s20, s1, s8
 8012722:	ee20 9a04 	vmul.f32	s18, s0, s8
 8012726:	ee28 4a04 	vmul.f32	s8, s16, s8
 801272a:	ee62 fa24 	vmul.f32	s31, s4, s9
 801272e:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8012732:	ee7b baad 	vadd.f32	s23, s23, s27
 8012736:	ee21 eaa4 	vmul.f32	s28, s3, s9
 801273a:	ee61 da24 	vmul.f32	s27, s2, s9
 801273e:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8012742:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8012746:	ee20 baa4 	vmul.f32	s22, s1, s9
 801274a:	ee20 aa24 	vmul.f32	s20, s0, s9
 801274e:	ee3d da0f 	vadd.f32	s26, s26, s30
 8012752:	ee7c caae 	vadd.f32	s25, s25, s29
 8012756:	ee22 faa4 	vmul.f32	s30, s5, s9
 801275a:	ee78 8a89 	vadd.f32	s17, s17, s18
 801275e:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 8012762:	ee28 9a24 	vmul.f32	s18, s16, s9
 8012766:	ee73 3a84 	vadd.f32	s7, s7, s8
 801276a:	ee63 4a24 	vmul.f32	s9, s6, s9
 801276e:	ee22 4a05 	vmul.f32	s8, s4, s10
 8012772:	ee61 ea05 	vmul.f32	s29, s2, s10
 8012776:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 801277a:	ee3d da0f 	vadd.f32	s26, s26, s30
 801277e:	ee7c caaf 	vadd.f32	s25, s25, s31
 8012782:	ee20 fa85 	vmul.f32	s30, s1, s10
 8012786:	ee61 fa85 	vmul.f32	s31, s3, s10
 801278a:	ee3c ea0e 	vadd.f32	s28, s24, s28
 801278e:	ee7b daad 	vadd.f32	s27, s23, s27
 8012792:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8012796:	ee60 ba05 	vmul.f32	s23, s0, s10
 801279a:	ee68 aa05 	vmul.f32	s21, s16, s10
 801279e:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80127a2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80127a6:	ee73 3aa4 	vadd.f32	s7, s7, s9
 80127aa:	ee63 4a05 	vmul.f32	s9, s6, s10
 80127ae:	ee22 5a85 	vmul.f32	s10, s5, s10
 80127b2:	ee21 9a25 	vmul.f32	s18, s2, s11
 80127b6:	ee20 ca25 	vmul.f32	s24, s0, s11
 80127ba:	ee3d da04 	vadd.f32	s26, s26, s8
 80127be:	ee7c caaf 	vadd.f32	s25, s25, s31
 80127c2:	ee21 4aa5 	vmul.f32	s8, s3, s11
 80127c6:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80127ca:	ed53 1a04 	vldr	s3, [r3, #-16]
 80127ce:	ee60 eaa5 	vmul.f32	s29, s1, s11
 80127d2:	ee7d da8f 	vadd.f32	s27, s27, s30
 80127d6:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80127da:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80127de:	ee68 ba25 	vmul.f32	s23, s16, s11
 80127e2:	ee63 aa25 	vmul.f32	s21, s6, s11
 80127e6:	ee78 8aa4 	vadd.f32	s17, s17, s9
 80127ea:	ee73 3a85 	vadd.f32	s7, s7, s10
 80127ee:	ee22 5aa5 	vmul.f32	s10, s5, s11
 80127f2:	ee62 5a25 	vmul.f32	s11, s4, s11
 80127f6:	ee61 4a06 	vmul.f32	s9, s2, s12
 80127fa:	ee60 9a86 	vmul.f32	s19, s1, s12
 80127fe:	ee60 fa06 	vmul.f32	s31, s0, s12
 8012802:	ed13 1a03 	vldr	s2, [r3, #-12]
 8012806:	ee23 fa06 	vmul.f32	s30, s6, s12
 801280a:	ee3d da04 	vadd.f32	s26, s26, s8
 801280e:	ee7c ca89 	vadd.f32	s25, s25, s18
 8012812:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8012816:	ee28 9a06 	vmul.f32	s18, s16, s12
 801281a:	ee7d da8c 	vadd.f32	s27, s27, s24
 801281e:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8012822:	ee22 ca86 	vmul.f32	s24, s5, s12
 8012826:	ee3a aa2a 	vadd.f32	s20, s20, s21
 801282a:	ee78 8a85 	vadd.f32	s17, s17, s10
 801282e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8012832:	ee62 5a06 	vmul.f32	s11, s4, s12
 8012836:	ee21 6a86 	vmul.f32	s12, s3, s12
 801283a:	ee20 4a26 	vmul.f32	s8, s0, s13
 801283e:	ee63 ea26 	vmul.f32	s29, s6, s13
 8012842:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8012846:	ee22 5a26 	vmul.f32	s10, s4, s13
 801284a:	ee3d da24 	vadd.f32	s26, s26, s9
 801284e:	ee7c caa9 	vadd.f32	s25, s25, s19
 8012852:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8012856:	ee3e ea2f 	vadd.f32	s28, s28, s31
 801285a:	ed53 0a02 	vldr	s1, [r3, #-8]
 801285e:	ee68 fa26 	vmul.f32	s31, s16, s13
 8012862:	ee7d da89 	vadd.f32	s27, s27, s18
 8012866:	ee3b ba0f 	vadd.f32	s22, s22, s30
 801286a:	ee78 8aa5 	vadd.f32	s17, s17, s11
 801286e:	ee22 faa6 	vmul.f32	s30, s5, s13
 8012872:	ee73 3a86 	vadd.f32	s7, s7, s12
 8012876:	ee21 6aa6 	vmul.f32	s12, s3, s13
 801287a:	ee61 6a26 	vmul.f32	s13, s2, s13
 801287e:	ee60 aa07 	vmul.f32	s21, s0, s14
 8012882:	ee28 ca07 	vmul.f32	s24, s16, s14
 8012886:	ee63 ba07 	vmul.f32	s23, s6, s14
 801288a:	ee7a 9a05 	vadd.f32	s19, s20, s10
 801288e:	ee78 8a86 	vadd.f32	s17, s17, s12
 8012892:	ee3d da24 	vadd.f32	s26, s26, s9
 8012896:	ee7c ca84 	vadd.f32	s25, s25, s8
 801289a:	ee7d daae 	vadd.f32	s27, s27, s29
 801289e:	ee22 9a07 	vmul.f32	s18, s4, s14
 80128a2:	ee62 ea87 	vmul.f32	s29, s5, s14
 80128a6:	ee61 5a87 	vmul.f32	s11, s3, s14
 80128aa:	ee73 3aa6 	vadd.f32	s7, s7, s13
 80128ae:	ed13 0a01 	vldr	s0, [r3, #-4]
 80128b2:	ee61 6a07 	vmul.f32	s13, s2, s14
 80128b6:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80128ba:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80128be:	ee20 7a87 	vmul.f32	s14, s1, s14
 80128c2:	ee68 4a27 	vmul.f32	s9, s16, s15
 80128c6:	ee3d da2a 	vadd.f32	s26, s26, s21
 80128ca:	ee7c ca8c 	vadd.f32	s25, s25, s24
 80128ce:	ee23 8a27 	vmul.f32	s16, s6, s15
 80128d2:	ee3e ea2b 	vadd.f32	s28, s28, s23
 80128d6:	ee22 4aa7 	vmul.f32	s8, s5, s15
 80128da:	ee22 aa27 	vmul.f32	s20, s4, s15
 80128de:	ee21 5aa7 	vmul.f32	s10, s3, s15
 80128e2:	ee21 6a27 	vmul.f32	s12, s2, s15
 80128e6:	ee78 6aa6 	vadd.f32	s13, s17, s13
 80128ea:	ee7d daae 	vadd.f32	s27, s27, s29
 80128ee:	ee60 8aa7 	vmul.f32	s17, s1, s15
 80128f2:	ee3b ba09 	vadd.f32	s22, s22, s18
 80128f6:	ee79 9aa5 	vadd.f32	s19, s19, s11
 80128fa:	ee73 3a87 	vadd.f32	s7, s7, s14
 80128fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012902:	f1bb 0b01 	subs.w	fp, fp, #1
 8012906:	f101 0120 	add.w	r1, r1, #32
 801290a:	ee3d da24 	vadd.f32	s26, s26, s9
 801290e:	ee7c ca88 	vadd.f32	s25, s25, s16
 8012912:	ee3e ca04 	vadd.f32	s24, s28, s8
 8012916:	ee7d ba8a 	vadd.f32	s23, s27, s20
 801291a:	ee7b aa05 	vadd.f32	s21, s22, s10
 801291e:	ee79 9a86 	vadd.f32	s19, s19, s12
 8012922:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8012926:	ee73 3aa7 	vadd.f32	s7, s7, s15
 801292a:	f103 0320 	add.w	r3, r3, #32
 801292e:	f47f aed8 	bne.w	80126e2 <arm_fir_f32+0xfe>
 8012932:	eb09 0104 	add.w	r1, r9, r4
 8012936:	46e3      	mov	fp, ip
 8012938:	b3a2      	cbz	r2, 80129a4 <arm_fir_f32+0x3c0>
 801293a:	4613      	mov	r3, r2
 801293c:	ecbb 6a01 	vldmia	fp!, {s12}
 8012940:	ecf1 7a01 	vldmia	r1!, {s15}
 8012944:	ee23 3a06 	vmul.f32	s6, s6, s12
 8012948:	ee22 4a86 	vmul.f32	s8, s5, s12
 801294c:	ee62 4a06 	vmul.f32	s9, s4, s12
 8012950:	ee21 5a86 	vmul.f32	s10, s3, s12
 8012954:	ee61 5a06 	vmul.f32	s11, s2, s12
 8012958:	ee60 6a86 	vmul.f32	s13, s1, s12
 801295c:	ee20 7a06 	vmul.f32	s14, s0, s12
 8012960:	ee27 6a86 	vmul.f32	s12, s15, s12
 8012964:	3b01      	subs	r3, #1
 8012966:	ee3d da03 	vadd.f32	s26, s26, s6
 801296a:	ee7c ca84 	vadd.f32	s25, s25, s8
 801296e:	eeb0 3a62 	vmov.f32	s6, s5
 8012972:	ee3c ca24 	vadd.f32	s24, s24, s9
 8012976:	eef0 2a42 	vmov.f32	s5, s4
 801297a:	ee7b ba85 	vadd.f32	s23, s23, s10
 801297e:	eeb0 2a61 	vmov.f32	s4, s3
 8012982:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8012986:	eef0 1a41 	vmov.f32	s3, s2
 801298a:	ee79 9aa6 	vadd.f32	s19, s19, s13
 801298e:	eeb0 1a60 	vmov.f32	s2, s1
 8012992:	ee78 8a87 	vadd.f32	s17, s17, s14
 8012996:	eef0 0a40 	vmov.f32	s1, s0
 801299a:	ee73 3a86 	vadd.f32	s7, s7, s12
 801299e:	eeb0 0a67 	vmov.f32	s0, s15
 80129a2:	d1cb      	bne.n	801293c <arm_fir_f32+0x358>
 80129a4:	f1be 0e01 	subs.w	lr, lr, #1
 80129a8:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 80129ac:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 80129b0:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 80129b4:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 80129b8:	ed45 aa04 	vstr	s21, [r5, #-16]
 80129bc:	ed45 9a03 	vstr	s19, [r5, #-12]
 80129c0:	ed45 8a02 	vstr	s17, [r5, #-8]
 80129c4:	ed45 3a01 	vstr	s7, [r5, #-4]
 80129c8:	f107 0720 	add.w	r7, r7, #32
 80129cc:	f106 0620 	add.w	r6, r6, #32
 80129d0:	f104 0420 	add.w	r4, r4, #32
 80129d4:	f105 0520 	add.w	r5, r5, #32
 80129d8:	f47f ae3c 	bne.w	8012654 <arm_fir_f32+0x70>
 80129dc:	9b02      	ldr	r3, [sp, #8]
 80129de:	9800      	ldr	r0, [sp, #0]
 80129e0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80129e4:	9907      	ldr	r1, [sp, #28]
 80129e6:	015b      	lsls	r3, r3, #5
 80129e8:	4652      	mov	r2, sl
 80129ea:	4418      	add	r0, r3
 80129ec:	9000      	str	r0, [sp, #0]
 80129ee:	4419      	add	r1, r3
 80129f0:	449c      	add	ip, r3
 80129f2:	441a      	add	r2, r3
 80129f4:	9b04      	ldr	r3, [sp, #16]
 80129f6:	f013 0e07 	ands.w	lr, r3, #7
 80129fa:	d01f      	beq.n	8012a3c <arm_fir_f32+0x458>
 80129fc:	9f00      	ldr	r7, [sp, #0]
 80129fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012a02:	4676      	mov	r6, lr
 8012a04:	4665      	mov	r5, ip
 8012a06:	f851 3b04 	ldr.w	r3, [r1], #4
 8012a0a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8012a54 <arm_fir_f32+0x470>
 8012a0e:	f847 3b04 	str.w	r3, [r7], #4
 8012a12:	4644      	mov	r4, r8
 8012a14:	464b      	mov	r3, r9
 8012a16:	4628      	mov	r0, r5
 8012a18:	ecb0 7a01 	vldmia	r0!, {s14}
 8012a1c:	ecf4 7a01 	vldmia	r4!, {s15}
 8012a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a24:	3b01      	subs	r3, #1
 8012a26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012a2a:	d1f5      	bne.n	8012a18 <arm_fir_f32+0x434>
 8012a2c:	3e01      	subs	r6, #1
 8012a2e:	ece2 6a01 	vstmia	r2!, {s13}
 8012a32:	f105 0504 	add.w	r5, r5, #4
 8012a36:	d1e6      	bne.n	8012a06 <arm_fir_f32+0x422>
 8012a38:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8012a3c:	9b01      	ldr	r3, [sp, #4]
 8012a3e:	1e59      	subs	r1, r3, #1
 8012a40:	9b03      	ldr	r3, [sp, #12]
 8012a42:	088e      	lsrs	r6, r1, #2
 8012a44:	685c      	ldr	r4, [r3, #4]
 8012a46:	d020      	beq.n	8012a8a <arm_fir_f32+0x4a6>
 8012a48:	f104 0210 	add.w	r2, r4, #16
 8012a4c:	f10c 0310 	add.w	r3, ip, #16
 8012a50:	4630      	mov	r0, r6
 8012a52:	e001      	b.n	8012a58 <arm_fir_f32+0x474>
 8012a54:	00000000 	.word	0x00000000
 8012a58:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8012a5c:	f842 5c10 	str.w	r5, [r2, #-16]
 8012a60:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8012a64:	f842 5c0c 	str.w	r5, [r2, #-12]
 8012a68:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8012a6c:	f842 5c08 	str.w	r5, [r2, #-8]
 8012a70:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8012a74:	f842 5c04 	str.w	r5, [r2, #-4]
 8012a78:	3801      	subs	r0, #1
 8012a7a:	f103 0310 	add.w	r3, r3, #16
 8012a7e:	f102 0210 	add.w	r2, r2, #16
 8012a82:	d1e9      	bne.n	8012a58 <arm_fir_f32+0x474>
 8012a84:	0133      	lsls	r3, r6, #4
 8012a86:	441c      	add	r4, r3
 8012a88:	449c      	add	ip, r3
 8012a8a:	f011 0303 	ands.w	r3, r1, #3
 8012a8e:	d006      	beq.n	8012a9e <arm_fir_f32+0x4ba>
 8012a90:	4622      	mov	r2, r4
 8012a92:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012a96:	f842 1b04 	str.w	r1, [r2], #4
 8012a9a:	3b01      	subs	r3, #1
 8012a9c:	d1f9      	bne.n	8012a92 <arm_fir_f32+0x4ae>
 8012a9e:	b009      	add	sp, #36	@ 0x24
 8012aa0:	ecbd 8b10 	vpop	{d8-d15}
 8012aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa8:	46c3      	mov	fp, r8
 8012aaa:	e745      	b.n	8012938 <arm_fir_f32+0x354>

08012aac <arm_cmplx_mag_f32>:
 8012aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8012ab4:	b084      	sub	sp, #16
 8012ab6:	d07f      	beq.n	8012bb8 <arm_cmplx_mag_f32+0x10c>
 8012ab8:	2700      	movs	r7, #0
 8012aba:	f100 0420 	add.w	r4, r0, #32
 8012abe:	f101 0510 	add.w	r5, r1, #16
 8012ac2:	4646      	mov	r6, r8
 8012ac4:	e05a      	b.n	8012b7c <arm_cmplx_mag_f32+0xd0>
 8012ac6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012aca:	eeb4 0a40 	vcmp.f32	s0, s0
 8012ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad2:	f040 80a4 	bne.w	8012c1e <arm_cmplx_mag_f32+0x172>
 8012ad6:	ed05 0a04 	vstr	s0, [r5, #-16]
 8012ada:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8012ade:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 8012ae2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012ae6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012aea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012aee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af6:	f2c0 808f 	blt.w	8012c18 <arm_cmplx_mag_f32+0x16c>
 8012afa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012afe:	eeb4 0a40 	vcmp.f32	s0, s0
 8012b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b06:	f040 80af 	bne.w	8012c68 <arm_cmplx_mag_f32+0x1bc>
 8012b0a:	ed05 0a03 	vstr	s0, [r5, #-12]
 8012b0e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8012b12:	ed14 0a03 	vldr	s0, [r4, #-12]
 8012b16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012b1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012b1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2a:	db72      	blt.n	8012c12 <arm_cmplx_mag_f32+0x166>
 8012b2c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012b30:	eeb4 0a40 	vcmp.f32	s0, s0
 8012b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b38:	f040 808c 	bne.w	8012c54 <arm_cmplx_mag_f32+0x1a8>
 8012b3c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8012b40:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012b44:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012b48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012b4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012b50:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b5c:	db20      	blt.n	8012ba0 <arm_cmplx_mag_f32+0xf4>
 8012b5e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012b62:	eeb4 0a40 	vcmp.f32	s0, s0
 8012b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6a:	d169      	bne.n	8012c40 <arm_cmplx_mag_f32+0x194>
 8012b6c:	3e01      	subs	r6, #1
 8012b6e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8012b72:	f104 0420 	add.w	r4, r4, #32
 8012b76:	f105 0510 	add.w	r5, r5, #16
 8012b7a:	d019      	beq.n	8012bb0 <arm_cmplx_mag_f32+0x104>
 8012b7c:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 8012b80:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8012b84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012b88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012b8c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b98:	da95      	bge.n	8012ac6 <arm_cmplx_mag_f32+0x1a>
 8012b9a:	f845 7c10 	str.w	r7, [r5, #-16]
 8012b9e:	e79c      	b.n	8012ada <arm_cmplx_mag_f32+0x2e>
 8012ba0:	3e01      	subs	r6, #1
 8012ba2:	f845 7c04 	str.w	r7, [r5, #-4]
 8012ba6:	f104 0420 	add.w	r4, r4, #32
 8012baa:	f105 0510 	add.w	r5, r5, #16
 8012bae:	d1e5      	bne.n	8012b7c <arm_cmplx_mag_f32+0xd0>
 8012bb0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8012bb4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8012bb8:	f012 0503 	ands.w	r5, r2, #3
 8012bbc:	d026      	beq.n	8012c0c <arm_cmplx_mag_f32+0x160>
 8012bbe:	2600      	movs	r6, #0
 8012bc0:	f100 0408 	add.w	r4, r0, #8
 8012bc4:	e00c      	b.n	8012be0 <arm_cmplx_mag_f32+0x134>
 8012bc6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012bca:	eeb4 0a40 	vcmp.f32	s0, s0
 8012bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd2:	d12e      	bne.n	8012c32 <arm_cmplx_mag_f32+0x186>
 8012bd4:	3d01      	subs	r5, #1
 8012bd6:	ed01 0a01 	vstr	s0, [r1, #-4]
 8012bda:	f104 0408 	add.w	r4, r4, #8
 8012bde:	d015      	beq.n	8012c0c <arm_cmplx_mag_f32+0x160>
 8012be0:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012be4:	ed14 0a01 	vldr	s0, [r4, #-4]
 8012be8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012bec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012bf0:	3104      	adds	r1, #4
 8012bf2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfe:	dae2      	bge.n	8012bc6 <arm_cmplx_mag_f32+0x11a>
 8012c00:	3d01      	subs	r5, #1
 8012c02:	f841 6c04 	str.w	r6, [r1, #-4]
 8012c06:	f104 0408 	add.w	r4, r4, #8
 8012c0a:	d1e9      	bne.n	8012be0 <arm_cmplx_mag_f32+0x134>
 8012c0c:	b004      	add	sp, #16
 8012c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c12:	f845 7c08 	str.w	r7, [r5, #-8]
 8012c16:	e793      	b.n	8012b40 <arm_cmplx_mag_f32+0x94>
 8012c18:	f845 7c0c 	str.w	r7, [r5, #-12]
 8012c1c:	e777      	b.n	8012b0e <arm_cmplx_mag_f32+0x62>
 8012c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8012c22:	9203      	str	r2, [sp, #12]
 8012c24:	9102      	str	r1, [sp, #8]
 8012c26:	9001      	str	r0, [sp, #4]
 8012c28:	f001 fe4a 	bl	80148c0 <sqrtf>
 8012c2c:	a801      	add	r0, sp, #4
 8012c2e:	c807      	ldmia	r0, {r0, r1, r2}
 8012c30:	e751      	b.n	8012ad6 <arm_cmplx_mag_f32+0x2a>
 8012c32:	eeb0 0a67 	vmov.f32	s0, s15
 8012c36:	9101      	str	r1, [sp, #4]
 8012c38:	f001 fe42 	bl	80148c0 <sqrtf>
 8012c3c:	9901      	ldr	r1, [sp, #4]
 8012c3e:	e7c9      	b.n	8012bd4 <arm_cmplx_mag_f32+0x128>
 8012c40:	eeb0 0a67 	vmov.f32	s0, s15
 8012c44:	9203      	str	r2, [sp, #12]
 8012c46:	9102      	str	r1, [sp, #8]
 8012c48:	9001      	str	r0, [sp, #4]
 8012c4a:	f001 fe39 	bl	80148c0 <sqrtf>
 8012c4e:	a801      	add	r0, sp, #4
 8012c50:	c807      	ldmia	r0, {r0, r1, r2}
 8012c52:	e78b      	b.n	8012b6c <arm_cmplx_mag_f32+0xc0>
 8012c54:	eeb0 0a67 	vmov.f32	s0, s15
 8012c58:	9203      	str	r2, [sp, #12]
 8012c5a:	9102      	str	r1, [sp, #8]
 8012c5c:	9001      	str	r0, [sp, #4]
 8012c5e:	f001 fe2f 	bl	80148c0 <sqrtf>
 8012c62:	a801      	add	r0, sp, #4
 8012c64:	c807      	ldmia	r0, {r0, r1, r2}
 8012c66:	e769      	b.n	8012b3c <arm_cmplx_mag_f32+0x90>
 8012c68:	eeb0 0a67 	vmov.f32	s0, s15
 8012c6c:	9203      	str	r2, [sp, #12]
 8012c6e:	9102      	str	r1, [sp, #8]
 8012c70:	9001      	str	r0, [sp, #4]
 8012c72:	f001 fe25 	bl	80148c0 <sqrtf>
 8012c76:	a801      	add	r0, sp, #4
 8012c78:	c807      	ldmia	r0, {r0, r1, r2}
 8012c7a:	e746      	b.n	8012b0a <arm_cmplx_mag_f32+0x5e>

08012c7c <arm_cos_f32>:
 8012c7c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8012cf0 <arm_cos_f32+0x74>
 8012c80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c84:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8012c88:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012c8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c94:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012c98:	d504      	bpl.n	8012ca4 <arm_cos_f32+0x28>
 8012c9a:	ee17 3a90 	vmov	r3, s15
 8012c9e:	3b01      	subs	r3, #1
 8012ca0:	ee07 3a90 	vmov	s15, r3
 8012ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ca8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8012cf4 <arm_cos_f32+0x78>
 8012cac:	4a12      	ldr	r2, [pc, #72]	@ (8012cf8 <arm_cos_f32+0x7c>)
 8012cae:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012cb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012cb6:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012cba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012cbe:	ee17 3a90 	vmov	r3, s15
 8012cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cc6:	ee07 3a90 	vmov	s15, r3
 8012cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012cce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8012cd2:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012cd6:	edd1 6a01 	vldr	s13, [r1, #4]
 8012cda:	ed91 0a00 	vldr	s0, [r1]
 8012cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ce2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ce6:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012cea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012cee:	4770      	bx	lr
 8012cf0:	3e22f983 	.word	0x3e22f983
 8012cf4:	44000000 	.word	0x44000000
 8012cf8:	080265e8 	.word	0x080265e8

08012cfc <arm_sub_f32>:
 8012cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cfe:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8012d02:	d033      	beq.n	8012d6c <arm_sub_f32+0x70>
 8012d04:	f100 0610 	add.w	r6, r0, #16
 8012d08:	f101 0510 	add.w	r5, r1, #16
 8012d0c:	f102 0410 	add.w	r4, r2, #16
 8012d10:	4677      	mov	r7, lr
 8012d12:	ed16 6a03 	vldr	s12, [r6, #-12]
 8012d16:	ed15 4a03 	vldr	s8, [r5, #-12]
 8012d1a:	ed56 6a02 	vldr	s13, [r6, #-8]
 8012d1e:	ed55 4a02 	vldr	s9, [r5, #-8]
 8012d22:	ed16 7a01 	vldr	s14, [r6, #-4]
 8012d26:	ed15 5a01 	vldr	s10, [r5, #-4]
 8012d2a:	ed56 7a04 	vldr	s15, [r6, #-16]
 8012d2e:	ed55 5a04 	vldr	s11, [r5, #-16]
 8012d32:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012d36:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012d3a:	ee37 7a45 	vsub.f32	s14, s14, s10
 8012d3e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012d42:	3f01      	subs	r7, #1
 8012d44:	ed04 6a03 	vstr	s12, [r4, #-12]
 8012d48:	ed44 6a02 	vstr	s13, [r4, #-8]
 8012d4c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8012d50:	ed44 7a04 	vstr	s15, [r4, #-16]
 8012d54:	f106 0610 	add.w	r6, r6, #16
 8012d58:	f105 0510 	add.w	r5, r5, #16
 8012d5c:	f104 0410 	add.w	r4, r4, #16
 8012d60:	d1d7      	bne.n	8012d12 <arm_sub_f32+0x16>
 8012d62:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012d66:	4420      	add	r0, r4
 8012d68:	4421      	add	r1, r4
 8012d6a:	4422      	add	r2, r4
 8012d6c:	f013 0303 	ands.w	r3, r3, #3
 8012d70:	d009      	beq.n	8012d86 <arm_sub_f32+0x8a>
 8012d72:	ecf0 7a01 	vldmia	r0!, {s15}
 8012d76:	ecb1 7a01 	vldmia	r1!, {s14}
 8012d7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d7e:	3b01      	subs	r3, #1
 8012d80:	ece2 7a01 	vstmia	r2!, {s15}
 8012d84:	d1f5      	bne.n	8012d72 <arm_sub_f32+0x76>
 8012d86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012d88 <arm_scale_f32>:
 8012d88:	b470      	push	{r4, r5, r6}
 8012d8a:	0896      	lsrs	r6, r2, #2
 8012d8c:	d025      	beq.n	8012dda <arm_scale_f32+0x52>
 8012d8e:	f100 0410 	add.w	r4, r0, #16
 8012d92:	f101 0310 	add.w	r3, r1, #16
 8012d96:	4635      	mov	r5, r6
 8012d98:	ed14 6a04 	vldr	s12, [r4, #-16]
 8012d9c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8012da0:	ed14 7a02 	vldr	s14, [r4, #-8]
 8012da4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8012da8:	ee26 6a00 	vmul.f32	s12, s12, s0
 8012dac:	ee66 6a80 	vmul.f32	s13, s13, s0
 8012db0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012db4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012db8:	3d01      	subs	r5, #1
 8012dba:	ed03 6a04 	vstr	s12, [r3, #-16]
 8012dbe:	ed43 6a03 	vstr	s13, [r3, #-12]
 8012dc2:	ed03 7a02 	vstr	s14, [r3, #-8]
 8012dc6:	ed43 7a01 	vstr	s15, [r3, #-4]
 8012dca:	f104 0410 	add.w	r4, r4, #16
 8012dce:	f103 0310 	add.w	r3, r3, #16
 8012dd2:	d1e1      	bne.n	8012d98 <arm_scale_f32+0x10>
 8012dd4:	0136      	lsls	r6, r6, #4
 8012dd6:	4430      	add	r0, r6
 8012dd8:	4431      	add	r1, r6
 8012dda:	f012 0203 	ands.w	r2, r2, #3
 8012dde:	d007      	beq.n	8012df0 <arm_scale_f32+0x68>
 8012de0:	ecf0 7a01 	vldmia	r0!, {s15}
 8012de4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012de8:	3a01      	subs	r2, #1
 8012dea:	ece1 7a01 	vstmia	r1!, {s15}
 8012dee:	d1f7      	bne.n	8012de0 <arm_scale_f32+0x58>
 8012df0:	bc70      	pop	{r4, r5, r6}
 8012df2:	4770      	bx	lr

08012df4 <arm_add_f32>:
 8012df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012df6:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8012dfa:	d033      	beq.n	8012e64 <arm_add_f32+0x70>
 8012dfc:	f100 0610 	add.w	r6, r0, #16
 8012e00:	f101 0510 	add.w	r5, r1, #16
 8012e04:	f102 0410 	add.w	r4, r2, #16
 8012e08:	4677      	mov	r7, lr
 8012e0a:	ed16 6a03 	vldr	s12, [r6, #-12]
 8012e0e:	ed15 4a03 	vldr	s8, [r5, #-12]
 8012e12:	ed56 6a02 	vldr	s13, [r6, #-8]
 8012e16:	ed55 4a02 	vldr	s9, [r5, #-8]
 8012e1a:	ed16 7a01 	vldr	s14, [r6, #-4]
 8012e1e:	ed15 5a01 	vldr	s10, [r5, #-4]
 8012e22:	ed56 7a04 	vldr	s15, [r6, #-16]
 8012e26:	ed55 5a04 	vldr	s11, [r5, #-16]
 8012e2a:	ee36 6a04 	vadd.f32	s12, s12, s8
 8012e2e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012e32:	ee37 7a05 	vadd.f32	s14, s14, s10
 8012e36:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8012e3a:	3f01      	subs	r7, #1
 8012e3c:	ed04 6a03 	vstr	s12, [r4, #-12]
 8012e40:	ed44 6a02 	vstr	s13, [r4, #-8]
 8012e44:	ed04 7a01 	vstr	s14, [r4, #-4]
 8012e48:	ed44 7a04 	vstr	s15, [r4, #-16]
 8012e4c:	f106 0610 	add.w	r6, r6, #16
 8012e50:	f105 0510 	add.w	r5, r5, #16
 8012e54:	f104 0410 	add.w	r4, r4, #16
 8012e58:	d1d7      	bne.n	8012e0a <arm_add_f32+0x16>
 8012e5a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012e5e:	4420      	add	r0, r4
 8012e60:	4421      	add	r1, r4
 8012e62:	4422      	add	r2, r4
 8012e64:	f013 0303 	ands.w	r3, r3, #3
 8012e68:	d009      	beq.n	8012e7e <arm_add_f32+0x8a>
 8012e6a:	ecf0 7a01 	vldmia	r0!, {s15}
 8012e6e:	ecb1 7a01 	vldmia	r1!, {s14}
 8012e72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e76:	3b01      	subs	r3, #1
 8012e78:	ece2 7a01 	vstmia	r2!, {s15}
 8012e7c:	d1f5      	bne.n	8012e6a <arm_add_f32+0x76>
 8012e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e80 <arm_abs_f32>:
 8012e80:	b470      	push	{r4, r5, r6}
 8012e82:	0896      	lsrs	r6, r2, #2
 8012e84:	d025      	beq.n	8012ed2 <arm_abs_f32+0x52>
 8012e86:	f100 0410 	add.w	r4, r0, #16
 8012e8a:	f101 0310 	add.w	r3, r1, #16
 8012e8e:	4635      	mov	r5, r6
 8012e90:	ed14 6a04 	vldr	s12, [r4, #-16]
 8012e94:	ed54 6a03 	vldr	s13, [r4, #-12]
 8012e98:	ed14 7a02 	vldr	s14, [r4, #-8]
 8012e9c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8012ea0:	eeb0 6ac6 	vabs.f32	s12, s12
 8012ea4:	eef0 6ae6 	vabs.f32	s13, s13
 8012ea8:	eeb0 7ac7 	vabs.f32	s14, s14
 8012eac:	eef0 7ae7 	vabs.f32	s15, s15
 8012eb0:	3d01      	subs	r5, #1
 8012eb2:	ed03 6a04 	vstr	s12, [r3, #-16]
 8012eb6:	ed43 6a03 	vstr	s13, [r3, #-12]
 8012eba:	ed03 7a02 	vstr	s14, [r3, #-8]
 8012ebe:	ed43 7a01 	vstr	s15, [r3, #-4]
 8012ec2:	f104 0410 	add.w	r4, r4, #16
 8012ec6:	f103 0310 	add.w	r3, r3, #16
 8012eca:	d1e1      	bne.n	8012e90 <arm_abs_f32+0x10>
 8012ecc:	0136      	lsls	r6, r6, #4
 8012ece:	4430      	add	r0, r6
 8012ed0:	4431      	add	r1, r6
 8012ed2:	f012 0203 	ands.w	r2, r2, #3
 8012ed6:	d007      	beq.n	8012ee8 <arm_abs_f32+0x68>
 8012ed8:	ecf0 7a01 	vldmia	r0!, {s15}
 8012edc:	3a01      	subs	r2, #1
 8012ede:	eef0 7ae7 	vabs.f32	s15, s15
 8012ee2:	ece1 7a01 	vstmia	r1!, {s15}
 8012ee6:	d1f7      	bne.n	8012ed8 <arm_abs_f32+0x58>
 8012ee8:	bc70      	pop	{r4, r5, r6}
 8012eea:	4770      	bx	lr

08012eec <arm_radix8_butterfly_f32>:
 8012eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef0:	ed2d 8b10 	vpush	{d8-d15}
 8012ef4:	b09d      	sub	sp, #116	@ 0x74
 8012ef6:	461c      	mov	r4, r3
 8012ef8:	ed9f bac8 	vldr	s22, [pc, #800]	@ 801321c <arm_radix8_butterfly_f32+0x330>
 8012efc:	921a      	str	r2, [sp, #104]	@ 0x68
 8012efe:	1d03      	adds	r3, r0, #4
 8012f00:	4682      	mov	sl, r0
 8012f02:	4689      	mov	r9, r1
 8012f04:	468b      	mov	fp, r1
 8012f06:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012f08:	9400      	str	r4, [sp, #0]
 8012f0a:	469e      	mov	lr, r3
 8012f0c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8012f10:	005a      	lsls	r2, r3, #1
 8012f12:	18d6      	adds	r6, r2, r3
 8012f14:	18f5      	adds	r5, r6, r3
 8012f16:	9203      	str	r2, [sp, #12]
 8012f18:	195a      	adds	r2, r3, r5
 8012f1a:	18d0      	adds	r0, r2, r3
 8012f1c:	00df      	lsls	r7, r3, #3
 8012f1e:	1819      	adds	r1, r3, r0
 8012f20:	463c      	mov	r4, r7
 8012f22:	9701      	str	r7, [sp, #4]
 8012f24:	4457      	add	r7, sl
 8012f26:	930c      	str	r3, [sp, #48]	@ 0x30
 8012f28:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8012f2c:	011b      	lsls	r3, r3, #4
 8012f2e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8012f32:	eb07 0c04 	add.w	ip, r7, r4
 8012f36:	9c00      	ldr	r4, [sp, #0]
 8012f38:	9302      	str	r3, [sp, #8]
 8012f3a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8012f3e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8012f42:	3204      	adds	r2, #4
 8012f44:	3104      	adds	r1, #4
 8012f46:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8012f4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012f4e:	f04f 0800 	mov.w	r8, #0
 8012f52:	eddc 7a00 	vldr	s15, [ip]
 8012f56:	edd7 6a00 	vldr	s13, [r7]
 8012f5a:	edd6 3a00 	vldr	s7, [r6]
 8012f5e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8012f62:	edd5 4a00 	vldr	s9, [r5]
 8012f66:	ed90 2a00 	vldr	s4, [r0]
 8012f6a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8012f6e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8012f72:	ee77 8a82 	vadd.f32	s17, s15, s4
 8012f76:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8012f7a:	ee76 1a87 	vadd.f32	s3, s13, s14
 8012f7e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8012f82:	ee31 6a84 	vadd.f32	s12, s3, s8
 8012f86:	ee33 5a28 	vadd.f32	s10, s6, s17
 8012f8a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012f8e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8012f92:	ee35 5a46 	vsub.f32	s10, s10, s12
 8012f96:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8012f9a:	ed85 5a00 	vstr	s10, [r5]
 8012f9e:	ed96 1a01 	vldr	s2, [r6, #4]
 8012fa2:	edd7 5a01 	vldr	s11, [r7, #4]
 8012fa6:	ed92 aa00 	vldr	s20, [r2]
 8012faa:	ed91 6a00 	vldr	s12, [r1]
 8012fae:	ed9e 9a00 	vldr	s18, [lr]
 8012fb2:	ed95 5a01 	vldr	s10, [r5, #4]
 8012fb6:	eddc 6a01 	vldr	s13, [ip, #4]
 8012fba:	edd0 9a01 	vldr	s19, [r0, #4]
 8012fbe:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8012fc2:	ee71 2a46 	vsub.f32	s5, s2, s12
 8012fc6:	ee75 3aca 	vsub.f32	s7, s11, s20
 8012fca:	ee37 0a60 	vsub.f32	s0, s14, s1
 8012fce:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8012fd2:	ee37 7a20 	vadd.f32	s14, s14, s1
 8012fd6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8012fda:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8012fde:	ee79 3a05 	vadd.f32	s7, s18, s10
 8012fe2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8012fe6:	ee39 5a45 	vsub.f32	s10, s18, s10
 8012fea:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8012fee:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8012ff2:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8012ff6:	ee31 6a06 	vadd.f32	s12, s2, s12
 8012ffa:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8012ffe:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8013002:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8013006:	ee67 7a0b 	vmul.f32	s15, s14, s22
 801300a:	ee33 3a68 	vsub.f32	s6, s6, s17
 801300e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8013012:	ee75 8a86 	vadd.f32	s17, s11, s12
 8013016:	ee36 7ac8 	vsub.f32	s14, s13, s16
 801301a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 801301e:	ee75 6a62 	vsub.f32	s13, s10, s5
 8013022:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8013026:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801302a:	ee33 1a89 	vadd.f32	s2, s7, s18
 801302e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8013032:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8013036:	ee75 4a22 	vadd.f32	s9, s10, s5
 801303a:	ee32 5a27 	vadd.f32	s10, s4, s15
 801303e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8013042:	ee33 8a06 	vadd.f32	s16, s6, s12
 8013046:	ee75 2a87 	vadd.f32	s5, s11, s14
 801304a:	ee31 9a28 	vadd.f32	s18, s2, s17
 801304e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8013052:	ee74 0a61 	vsub.f32	s1, s8, s3
 8013056:	ee33 2a80 	vadd.f32	s4, s7, s0
 801305a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801305e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8013062:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013066:	ee31 1a68 	vsub.f32	s2, s2, s17
 801306a:	ee34 4a21 	vadd.f32	s8, s8, s3
 801306e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8013072:	ee74 4a85 	vadd.f32	s9, s9, s10
 8013076:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801307a:	44d8      	add	r8, fp
 801307c:	45c1      	cmp	r9, r8
 801307e:	ed8e 9a00 	vstr	s18, [lr]
 8013082:	ed85 1a01 	vstr	s2, [r5, #4]
 8013086:	449e      	add	lr, r3
 8013088:	ed8c 8a00 	vstr	s16, [ip]
 801308c:	441d      	add	r5, r3
 801308e:	ed80 6a00 	vstr	s12, [r0]
 8013092:	edcc 0a01 	vstr	s1, [ip, #4]
 8013096:	ed80 4a01 	vstr	s8, [r0, #4]
 801309a:	449c      	add	ip, r3
 801309c:	ed87 2a00 	vstr	s4, [r7]
 80130a0:	4418      	add	r0, r3
 80130a2:	ed41 3a01 	vstr	s7, [r1, #-4]
 80130a6:	ed42 2a01 	vstr	s5, [r2, #-4]
 80130aa:	ed86 7a00 	vstr	s14, [r6]
 80130ae:	ed87 3a01 	vstr	s6, [r7, #4]
 80130b2:	edc1 4a00 	vstr	s9, [r1]
 80130b6:	441f      	add	r7, r3
 80130b8:	edc2 5a00 	vstr	s11, [r2]
 80130bc:	4419      	add	r1, r3
 80130be:	edc6 6a01 	vstr	s13, [r6, #4]
 80130c2:	441a      	add	r2, r3
 80130c4:	441e      	add	r6, r3
 80130c6:	f63f af44 	bhi.w	8012f52 <arm_radix8_butterfly_f32+0x66>
 80130ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80130cc:	2907      	cmp	r1, #7
 80130ce:	4620      	mov	r0, r4
 80130d0:	f240 81e9 	bls.w	80134a6 <arm_radix8_butterfly_f32+0x5ba>
 80130d4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80130d8:	193e      	adds	r6, r7, r4
 80130da:	1935      	adds	r5, r6, r4
 80130dc:	9c03      	ldr	r4, [sp, #12]
 80130de:	9000      	str	r0, [sp, #0]
 80130e0:	4622      	mov	r2, r4
 80130e2:	3201      	adds	r2, #1
 80130e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80130e8:	9900      	ldr	r1, [sp, #0]
 80130ea:	1828      	adds	r0, r5, r0
 80130ec:	eb00 0e01 	add.w	lr, r0, r1
 80130f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80130f2:	440a      	add	r2, r1
 80130f4:	eb04 0c01 	add.w	ip, r4, r1
 80130f8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80130fc:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8013100:	9a00      	ldr	r2, [sp, #0]
 8013102:	940f      	str	r4, [sp, #60]	@ 0x3c
 8013104:	00ed      	lsls	r5, r5, #3
 8013106:	9511      	str	r5, [sp, #68]	@ 0x44
 8013108:	00d5      	lsls	r5, r2, #3
 801310a:	950d      	str	r5, [sp, #52]	@ 0x34
 801310c:	9d01      	ldr	r5, [sp, #4]
 801310e:	3508      	adds	r5, #8
 8013110:	9516      	str	r5, [sp, #88]	@ 0x58
 8013112:	9d02      	ldr	r5, [sp, #8]
 8013114:	3508      	adds	r5, #8
 8013116:	0114      	lsls	r4, r2, #4
 8013118:	9517      	str	r5, [sp, #92]	@ 0x5c
 801311a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801311c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801311e:	940e      	str	r4, [sp, #56]	@ 0x38
 8013120:	00c0      	lsls	r0, r0, #3
 8013122:	9010      	str	r0, [sp, #64]	@ 0x40
 8013124:	18aa      	adds	r2, r5, r2
 8013126:	9207      	str	r2, [sp, #28]
 8013128:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801312a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801312c:	18aa      	adds	r2, r5, r2
 801312e:	9208      	str	r2, [sp, #32]
 8013130:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013132:	18aa      	adds	r2, r5, r2
 8013134:	9209      	str	r2, [sp, #36]	@ 0x24
 8013136:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801313a:	f10e 0204 	add.w	r2, lr, #4
 801313e:	920a      	str	r2, [sp, #40]	@ 0x28
 8013140:	00c9      	lsls	r1, r1, #3
 8013142:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013144:	310c      	adds	r1, #12
 8013146:	00f6      	lsls	r6, r6, #3
 8013148:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 801314c:	9114      	str	r1, [sp, #80]	@ 0x50
 801314e:	18a9      	adds	r1, r5, r2
 8013150:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013152:	9612      	str	r6, [sp, #72]	@ 0x48
 8013154:	00ff      	lsls	r7, r7, #3
 8013156:	19ae      	adds	r6, r5, r6
 8013158:	3008      	adds	r0, #8
 801315a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801315e:	9606      	str	r6, [sp, #24]
 8013160:	9019      	str	r0, [sp, #100]	@ 0x64
 8013162:	18aa      	adds	r2, r5, r2
 8013164:	0164      	lsls	r4, r4, #5
 8013166:	19ee      	adds	r6, r5, r7
 8013168:	f10c 000c 	add.w	r0, ip, #12
 801316c:	9713      	str	r7, [sp, #76]	@ 0x4c
 801316e:	9604      	str	r6, [sp, #16]
 8013170:	9015      	str	r0, [sp, #84]	@ 0x54
 8013172:	9103      	str	r1, [sp, #12]
 8013174:	9205      	str	r2, [sp, #20]
 8013176:	f104 0208 	add.w	r2, r4, #8
 801317a:	9218      	str	r2, [sp, #96]	@ 0x60
 801317c:	f04f 0801 	mov.w	r8, #1
 8013180:	2200      	movs	r2, #0
 8013182:	f102 0108 	add.w	r1, r2, #8
 8013186:	460f      	mov	r7, r1
 8013188:	910b      	str	r1, [sp, #44]	@ 0x2c
 801318a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801318c:	188e      	adds	r6, r1, r2
 801318e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8013190:	188d      	adds	r5, r1, r2
 8013192:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013194:	188c      	adds	r4, r1, r2
 8013196:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8013198:	1888      	adds	r0, r1, r2
 801319a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801319c:	eb01 0c02 	add.w	ip, r1, r2
 80131a0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80131a2:	440a      	add	r2, r1
 80131a4:	9903      	ldr	r1, [sp, #12]
 80131a6:	edd1 fa00 	vldr	s31, [r1]
 80131aa:	9905      	ldr	r1, [sp, #20]
 80131ac:	ed91 fa00 	vldr	s30, [r1]
 80131b0:	9904      	ldr	r1, [sp, #16]
 80131b2:	edd1 ea00 	vldr	s29, [r1]
 80131b6:	9906      	ldr	r1, [sp, #24]
 80131b8:	ed91 ea00 	vldr	s28, [r1]
 80131bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80131be:	edd1 da00 	vldr	s27, [r1]
 80131c2:	9908      	ldr	r1, [sp, #32]
 80131c4:	ed91 da00 	vldr	s26, [r1]
 80131c8:	9907      	ldr	r1, [sp, #28]
 80131ca:	edd1 ca00 	vldr	s25, [r1]
 80131ce:	9903      	ldr	r1, [sp, #12]
 80131d0:	ed91 ca01 	vldr	s24, [r1, #4]
 80131d4:	9905      	ldr	r1, [sp, #20]
 80131d6:	edd1 ba01 	vldr	s23, [r1, #4]
 80131da:	9904      	ldr	r1, [sp, #16]
 80131dc:	edd1 aa01 	vldr	s21, [r1, #4]
 80131e0:	9906      	ldr	r1, [sp, #24]
 80131e2:	ed91 aa01 	vldr	s20, [r1, #4]
 80131e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80131e8:	edd1 7a01 	vldr	s15, [r1, #4]
 80131ec:	9908      	ldr	r1, [sp, #32]
 80131ee:	edcd 7a00 	vstr	s15, [sp]
 80131f2:	edd1 7a01 	vldr	s15, [r1, #4]
 80131f6:	9907      	ldr	r1, [sp, #28]
 80131f8:	edcd 7a01 	vstr	s15, [sp, #4]
 80131fc:	edd1 7a01 	vldr	s15, [r1, #4]
 8013200:	eb0a 0e07 	add.w	lr, sl, r7
 8013204:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8013206:	edcd 7a02 	vstr	s15, [sp, #8]
 801320a:	eb0c 010a 	add.w	r1, ip, sl
 801320e:	4456      	add	r6, sl
 8013210:	4455      	add	r5, sl
 8013212:	4454      	add	r4, sl
 8013214:	4450      	add	r0, sl
 8013216:	4452      	add	r2, sl
 8013218:	46c4      	mov	ip, r8
 801321a:	e001      	b.n	8013220 <arm_radix8_butterfly_f32+0x334>
 801321c:	3f3504f3 	.word	0x3f3504f3
 8013220:	ed96 5a00 	vldr	s10, [r6]
 8013224:	ed52 9a01 	vldr	s19, [r2, #-4]
 8013228:	ed11 6a01 	vldr	s12, [r1, #-4]
 801322c:	edd0 7a00 	vldr	s15, [r0]
 8013230:	ed17 7a01 	vldr	s14, [r7, #-4]
 8013234:	edde 3a00 	vldr	s7, [lr]
 8013238:	ed94 3a00 	vldr	s6, [r4]
 801323c:	ed95 2a00 	vldr	s4, [r5]
 8013240:	ed9e 0a01 	vldr	s0, [lr, #4]
 8013244:	ee33 8a85 	vadd.f32	s16, s7, s10
 8013248:	ee32 1a06 	vadd.f32	s2, s4, s12
 801324c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8013250:	ee77 4a87 	vadd.f32	s9, s15, s14
 8013254:	ee78 1a04 	vadd.f32	s3, s16, s8
 8013258:	ee71 6a24 	vadd.f32	s13, s2, s9
 801325c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8013260:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8013264:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013268:	ed8e 6a00 	vstr	s12, [lr]
 801326c:	edd0 8a01 	vldr	s17, [r0, #4]
 8013270:	ed95 9a01 	vldr	s18, [r5, #4]
 8013274:	edd1 2a00 	vldr	s5, [r1]
 8013278:	ed97 7a00 	vldr	s14, [r7]
 801327c:	edd4 0a01 	vldr	s1, [r4, #4]
 8013280:	ed96 6a01 	vldr	s12, [r6, #4]
 8013284:	edd2 5a00 	vldr	s11, [r2]
 8013288:	ee73 3ac5 	vsub.f32	s7, s7, s10
 801328c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8013290:	ee39 5a62 	vsub.f32	s10, s18, s5
 8013294:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8013298:	ee38 4a44 	vsub.f32	s8, s16, s8
 801329c:	ee38 7a87 	vadd.f32	s14, s17, s14
 80132a0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80132a4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80132a8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80132ac:	ee32 9a27 	vadd.f32	s18, s4, s15
 80132b0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80132b4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80132b8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80132bc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80132c0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80132c4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80132c8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80132cc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80132d0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80132d4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80132d8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80132dc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80132e0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80132e4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80132e8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80132ec:	ee36 0a28 	vadd.f32	s0, s12, s17
 80132f0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80132f4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80132f8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80132fc:	ee36 6a68 	vsub.f32	s12, s12, s17
 8013300:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8013304:	ee75 8a85 	vadd.f32	s17, s11, s10
 8013308:	ee74 3a22 	vadd.f32	s7, s8, s5
 801330c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8013310:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8013314:	ee79 1a41 	vsub.f32	s3, s18, s2
 8013318:	ee39 8aa8 	vadd.f32	s16, s19, s17
 801331c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8013320:	ee74 2a62 	vsub.f32	s5, s8, s5
 8013324:	ee72 4a24 	vadd.f32	s9, s4, s9
 8013328:	ee30 4a60 	vsub.f32	s8, s0, s1
 801332c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8013330:	ee30 0a20 	vadd.f32	s0, s0, s1
 8013334:	ee77 9a85 	vadd.f32	s19, s15, s10
 8013338:	ee36 6a03 	vadd.f32	s12, s12, s6
 801333c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013340:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8013344:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8013348:	ee6f 0a23 	vmul.f32	s1, s30, s7
 801334c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8013350:	ee39 1a01 	vadd.f32	s2, s18, s2
 8013354:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8013358:	ee2b 9a87 	vmul.f32	s18, s23, s14
 801335c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8013360:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8013364:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8013368:	ee35 3a03 	vadd.f32	s6, s10, s6
 801336c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8013370:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8013374:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8013378:	ed9d 4a02 	vldr	s8, [sp, #8]
 801337c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8013380:	ee77 3a63 	vsub.f32	s7, s14, s7
 8013384:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8013388:	ed9d 7a01 	vldr	s14, [sp, #4]
 801338c:	ed86 3a00 	vstr	s6, [r6]
 8013390:	ee30 9a89 	vadd.f32	s18, s1, s18
 8013394:	ee32 2a05 	vadd.f32	s4, s4, s10
 8013398:	ee6d 0a22 	vmul.f32	s1, s26, s5
 801339c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80133a0:	ee67 2a22 	vmul.f32	s5, s14, s5
 80133a4:	ee64 1a00 	vmul.f32	s3, s8, s0
 80133a8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80133ac:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80133b0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80133b4:	ee64 8a28 	vmul.f32	s17, s8, s17
 80133b8:	ed9d 4a00 	vldr	s8, [sp]
 80133bc:	edc6 6a01 	vstr	s13, [r6, #4]
 80133c0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80133c4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80133c8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80133cc:	ee24 4a25 	vmul.f32	s8, s8, s11
 80133d0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80133d4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80133d8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80133dc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80133e0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80133e4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80133e8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80133ec:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80133f0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80133f4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80133f8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80133fc:	ee70 0a84 	vadd.f32	s1, s1, s8
 8013400:	ee36 6a67 	vsub.f32	s12, s12, s15
 8013404:	44dc      	add	ip, fp
 8013406:	45e1      	cmp	r9, ip
 8013408:	ed84 9a00 	vstr	s18, [r4]
 801340c:	edc4 3a01 	vstr	s7, [r4, #4]
 8013410:	449e      	add	lr, r3
 8013412:	ed02 7a01 	vstr	s14, [r2, #-4]
 8013416:	edc2 2a00 	vstr	s5, [r2]
 801341a:	441e      	add	r6, r3
 801341c:	ed85 2a00 	vstr	s4, [r5]
 8013420:	ed85 8a01 	vstr	s16, [r5, #4]
 8013424:	441c      	add	r4, r3
 8013426:	ed47 1a01 	vstr	s3, [r7, #-4]
 801342a:	ed87 0a00 	vstr	s0, [r7]
 801342e:	441a      	add	r2, r3
 8013430:	ed41 4a01 	vstr	s9, [r1, #-4]
 8013434:	edc1 9a00 	vstr	s19, [r1]
 8013438:	441d      	add	r5, r3
 801343a:	edc0 0a00 	vstr	s1, [r0]
 801343e:	441f      	add	r7, r3
 8013440:	ed80 6a01 	vstr	s12, [r0, #4]
 8013444:	4419      	add	r1, r3
 8013446:	4418      	add	r0, r3
 8013448:	f63f aeea 	bhi.w	8013220 <arm_radix8_butterfly_f32+0x334>
 801344c:	9a03      	ldr	r2, [sp, #12]
 801344e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013450:	440a      	add	r2, r1
 8013452:	9203      	str	r2, [sp, #12]
 8013454:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013456:	9a05      	ldr	r2, [sp, #20]
 8013458:	440a      	add	r2, r1
 801345a:	9205      	str	r2, [sp, #20]
 801345c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801345e:	9a04      	ldr	r2, [sp, #16]
 8013460:	440a      	add	r2, r1
 8013462:	9204      	str	r2, [sp, #16]
 8013464:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013466:	9a06      	ldr	r2, [sp, #24]
 8013468:	440a      	add	r2, r1
 801346a:	9206      	str	r2, [sp, #24]
 801346c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801346e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013470:	440a      	add	r2, r1
 8013472:	9209      	str	r2, [sp, #36]	@ 0x24
 8013474:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013476:	9a08      	ldr	r2, [sp, #32]
 8013478:	440a      	add	r2, r1
 801347a:	9208      	str	r2, [sp, #32]
 801347c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801347e:	9a07      	ldr	r2, [sp, #28]
 8013480:	440a      	add	r2, r1
 8013482:	9207      	str	r2, [sp, #28]
 8013484:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013486:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013488:	f108 0801 	add.w	r8, r8, #1
 801348c:	3208      	adds	r2, #8
 801348e:	4588      	cmp	r8, r1
 8013490:	920a      	str	r2, [sp, #40]	@ 0x28
 8013492:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013494:	f47f ae75 	bne.w	8013182 <arm_radix8_butterfly_f32+0x296>
 8013498:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 801349c:	9300      	str	r3, [sp, #0]
 801349e:	46c3      	mov	fp, r8
 80134a0:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 80134a4:	e532      	b.n	8012f0c <arm_radix8_butterfly_f32+0x20>
 80134a6:	b01d      	add	sp, #116	@ 0x74
 80134a8:	ecbd 8b10 	vpop	{d8-d15}
 80134ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080134b0 <std>:
 80134b0:	2300      	movs	r3, #0
 80134b2:	b510      	push	{r4, lr}
 80134b4:	4604      	mov	r4, r0
 80134b6:	e9c0 3300 	strd	r3, r3, [r0]
 80134ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80134be:	6083      	str	r3, [r0, #8]
 80134c0:	8181      	strh	r1, [r0, #12]
 80134c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80134c4:	81c2      	strh	r2, [r0, #14]
 80134c6:	6183      	str	r3, [r0, #24]
 80134c8:	4619      	mov	r1, r3
 80134ca:	2208      	movs	r2, #8
 80134cc:	305c      	adds	r0, #92	@ 0x5c
 80134ce:	f000 f942 	bl	8013756 <memset>
 80134d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013508 <std+0x58>)
 80134d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80134d6:	4b0d      	ldr	r3, [pc, #52]	@ (801350c <std+0x5c>)
 80134d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80134da:	4b0d      	ldr	r3, [pc, #52]	@ (8013510 <std+0x60>)
 80134dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80134de:	4b0d      	ldr	r3, [pc, #52]	@ (8013514 <std+0x64>)
 80134e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80134e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013518 <std+0x68>)
 80134e4:	6224      	str	r4, [r4, #32]
 80134e6:	429c      	cmp	r4, r3
 80134e8:	d006      	beq.n	80134f8 <std+0x48>
 80134ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80134ee:	4294      	cmp	r4, r2
 80134f0:	d002      	beq.n	80134f8 <std+0x48>
 80134f2:	33d0      	adds	r3, #208	@ 0xd0
 80134f4:	429c      	cmp	r4, r3
 80134f6:	d105      	bne.n	8013504 <std+0x54>
 80134f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80134fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013500:	f000 ba20 	b.w	8013944 <__retarget_lock_init_recursive>
 8013504:	bd10      	pop	{r4, pc}
 8013506:	bf00      	nop
 8013508:	0801369d 	.word	0x0801369d
 801350c:	080136bf 	.word	0x080136bf
 8013510:	080136f7 	.word	0x080136f7
 8013514:	0801371b 	.word	0x0801371b
 8013518:	20010410 	.word	0x20010410

0801351c <stdio_exit_handler>:
 801351c:	4a02      	ldr	r2, [pc, #8]	@ (8013528 <stdio_exit_handler+0xc>)
 801351e:	4903      	ldr	r1, [pc, #12]	@ (801352c <stdio_exit_handler+0x10>)
 8013520:	4803      	ldr	r0, [pc, #12]	@ (8013530 <stdio_exit_handler+0x14>)
 8013522:	f000 b869 	b.w	80135f8 <_fwalk_sglue>
 8013526:	bf00      	nop
 8013528:	20000034 	.word	0x20000034
 801352c:	08014279 	.word	0x08014279
 8013530:	20000044 	.word	0x20000044

08013534 <cleanup_stdio>:
 8013534:	6841      	ldr	r1, [r0, #4]
 8013536:	4b0c      	ldr	r3, [pc, #48]	@ (8013568 <cleanup_stdio+0x34>)
 8013538:	4299      	cmp	r1, r3
 801353a:	b510      	push	{r4, lr}
 801353c:	4604      	mov	r4, r0
 801353e:	d001      	beq.n	8013544 <cleanup_stdio+0x10>
 8013540:	f000 fe9a 	bl	8014278 <_fflush_r>
 8013544:	68a1      	ldr	r1, [r4, #8]
 8013546:	4b09      	ldr	r3, [pc, #36]	@ (801356c <cleanup_stdio+0x38>)
 8013548:	4299      	cmp	r1, r3
 801354a:	d002      	beq.n	8013552 <cleanup_stdio+0x1e>
 801354c:	4620      	mov	r0, r4
 801354e:	f000 fe93 	bl	8014278 <_fflush_r>
 8013552:	68e1      	ldr	r1, [r4, #12]
 8013554:	4b06      	ldr	r3, [pc, #24]	@ (8013570 <cleanup_stdio+0x3c>)
 8013556:	4299      	cmp	r1, r3
 8013558:	d004      	beq.n	8013564 <cleanup_stdio+0x30>
 801355a:	4620      	mov	r0, r4
 801355c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013560:	f000 be8a 	b.w	8014278 <_fflush_r>
 8013564:	bd10      	pop	{r4, pc}
 8013566:	bf00      	nop
 8013568:	20010410 	.word	0x20010410
 801356c:	20010478 	.word	0x20010478
 8013570:	200104e0 	.word	0x200104e0

08013574 <global_stdio_init.part.0>:
 8013574:	b510      	push	{r4, lr}
 8013576:	4b0b      	ldr	r3, [pc, #44]	@ (80135a4 <global_stdio_init.part.0+0x30>)
 8013578:	4c0b      	ldr	r4, [pc, #44]	@ (80135a8 <global_stdio_init.part.0+0x34>)
 801357a:	4a0c      	ldr	r2, [pc, #48]	@ (80135ac <global_stdio_init.part.0+0x38>)
 801357c:	601a      	str	r2, [r3, #0]
 801357e:	4620      	mov	r0, r4
 8013580:	2200      	movs	r2, #0
 8013582:	2104      	movs	r1, #4
 8013584:	f7ff ff94 	bl	80134b0 <std>
 8013588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801358c:	2201      	movs	r2, #1
 801358e:	2109      	movs	r1, #9
 8013590:	f7ff ff8e 	bl	80134b0 <std>
 8013594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013598:	2202      	movs	r2, #2
 801359a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801359e:	2112      	movs	r1, #18
 80135a0:	f7ff bf86 	b.w	80134b0 <std>
 80135a4:	20010548 	.word	0x20010548
 80135a8:	20010410 	.word	0x20010410
 80135ac:	0801351d 	.word	0x0801351d

080135b0 <__sfp_lock_acquire>:
 80135b0:	4801      	ldr	r0, [pc, #4]	@ (80135b8 <__sfp_lock_acquire+0x8>)
 80135b2:	f000 b9c8 	b.w	8013946 <__retarget_lock_acquire_recursive>
 80135b6:	bf00      	nop
 80135b8:	20010551 	.word	0x20010551

080135bc <__sfp_lock_release>:
 80135bc:	4801      	ldr	r0, [pc, #4]	@ (80135c4 <__sfp_lock_release+0x8>)
 80135be:	f000 b9c3 	b.w	8013948 <__retarget_lock_release_recursive>
 80135c2:	bf00      	nop
 80135c4:	20010551 	.word	0x20010551

080135c8 <__sinit>:
 80135c8:	b510      	push	{r4, lr}
 80135ca:	4604      	mov	r4, r0
 80135cc:	f7ff fff0 	bl	80135b0 <__sfp_lock_acquire>
 80135d0:	6a23      	ldr	r3, [r4, #32]
 80135d2:	b11b      	cbz	r3, 80135dc <__sinit+0x14>
 80135d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135d8:	f7ff bff0 	b.w	80135bc <__sfp_lock_release>
 80135dc:	4b04      	ldr	r3, [pc, #16]	@ (80135f0 <__sinit+0x28>)
 80135de:	6223      	str	r3, [r4, #32]
 80135e0:	4b04      	ldr	r3, [pc, #16]	@ (80135f4 <__sinit+0x2c>)
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d1f5      	bne.n	80135d4 <__sinit+0xc>
 80135e8:	f7ff ffc4 	bl	8013574 <global_stdio_init.part.0>
 80135ec:	e7f2      	b.n	80135d4 <__sinit+0xc>
 80135ee:	bf00      	nop
 80135f0:	08013535 	.word	0x08013535
 80135f4:	20010548 	.word	0x20010548

080135f8 <_fwalk_sglue>:
 80135f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135fc:	4607      	mov	r7, r0
 80135fe:	4688      	mov	r8, r1
 8013600:	4614      	mov	r4, r2
 8013602:	2600      	movs	r6, #0
 8013604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013608:	f1b9 0901 	subs.w	r9, r9, #1
 801360c:	d505      	bpl.n	801361a <_fwalk_sglue+0x22>
 801360e:	6824      	ldr	r4, [r4, #0]
 8013610:	2c00      	cmp	r4, #0
 8013612:	d1f7      	bne.n	8013604 <_fwalk_sglue+0xc>
 8013614:	4630      	mov	r0, r6
 8013616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801361a:	89ab      	ldrh	r3, [r5, #12]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d907      	bls.n	8013630 <_fwalk_sglue+0x38>
 8013620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013624:	3301      	adds	r3, #1
 8013626:	d003      	beq.n	8013630 <_fwalk_sglue+0x38>
 8013628:	4629      	mov	r1, r5
 801362a:	4638      	mov	r0, r7
 801362c:	47c0      	blx	r8
 801362e:	4306      	orrs	r6, r0
 8013630:	3568      	adds	r5, #104	@ 0x68
 8013632:	e7e9      	b.n	8013608 <_fwalk_sglue+0x10>

08013634 <sniprintf>:
 8013634:	b40c      	push	{r2, r3}
 8013636:	b530      	push	{r4, r5, lr}
 8013638:	4b17      	ldr	r3, [pc, #92]	@ (8013698 <sniprintf+0x64>)
 801363a:	1e0c      	subs	r4, r1, #0
 801363c:	681d      	ldr	r5, [r3, #0]
 801363e:	b09d      	sub	sp, #116	@ 0x74
 8013640:	da08      	bge.n	8013654 <sniprintf+0x20>
 8013642:	238b      	movs	r3, #139	@ 0x8b
 8013644:	602b      	str	r3, [r5, #0]
 8013646:	f04f 30ff 	mov.w	r0, #4294967295
 801364a:	b01d      	add	sp, #116	@ 0x74
 801364c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013650:	b002      	add	sp, #8
 8013652:	4770      	bx	lr
 8013654:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013658:	f8ad 3014 	strh.w	r3, [sp, #20]
 801365c:	bf14      	ite	ne
 801365e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013662:	4623      	moveq	r3, r4
 8013664:	9304      	str	r3, [sp, #16]
 8013666:	9307      	str	r3, [sp, #28]
 8013668:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801366c:	9002      	str	r0, [sp, #8]
 801366e:	9006      	str	r0, [sp, #24]
 8013670:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013674:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013676:	ab21      	add	r3, sp, #132	@ 0x84
 8013678:	a902      	add	r1, sp, #8
 801367a:	4628      	mov	r0, r5
 801367c:	9301      	str	r3, [sp, #4]
 801367e:	f000 faed 	bl	8013c5c <_svfiprintf_r>
 8013682:	1c43      	adds	r3, r0, #1
 8013684:	bfbc      	itt	lt
 8013686:	238b      	movlt	r3, #139	@ 0x8b
 8013688:	602b      	strlt	r3, [r5, #0]
 801368a:	2c00      	cmp	r4, #0
 801368c:	d0dd      	beq.n	801364a <sniprintf+0x16>
 801368e:	9b02      	ldr	r3, [sp, #8]
 8013690:	2200      	movs	r2, #0
 8013692:	701a      	strb	r2, [r3, #0]
 8013694:	e7d9      	b.n	801364a <sniprintf+0x16>
 8013696:	bf00      	nop
 8013698:	20000040 	.word	0x20000040

0801369c <__sread>:
 801369c:	b510      	push	{r4, lr}
 801369e:	460c      	mov	r4, r1
 80136a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a4:	f000 f900 	bl	80138a8 <_read_r>
 80136a8:	2800      	cmp	r0, #0
 80136aa:	bfab      	itete	ge
 80136ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80136ae:	89a3      	ldrhlt	r3, [r4, #12]
 80136b0:	181b      	addge	r3, r3, r0
 80136b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80136b6:	bfac      	ite	ge
 80136b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80136ba:	81a3      	strhlt	r3, [r4, #12]
 80136bc:	bd10      	pop	{r4, pc}

080136be <__swrite>:
 80136be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c2:	461f      	mov	r7, r3
 80136c4:	898b      	ldrh	r3, [r1, #12]
 80136c6:	05db      	lsls	r3, r3, #23
 80136c8:	4605      	mov	r5, r0
 80136ca:	460c      	mov	r4, r1
 80136cc:	4616      	mov	r6, r2
 80136ce:	d505      	bpl.n	80136dc <__swrite+0x1e>
 80136d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136d4:	2302      	movs	r3, #2
 80136d6:	2200      	movs	r2, #0
 80136d8:	f000 f8d4 	bl	8013884 <_lseek_r>
 80136dc:	89a3      	ldrh	r3, [r4, #12]
 80136de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80136e6:	81a3      	strh	r3, [r4, #12]
 80136e8:	4632      	mov	r2, r6
 80136ea:	463b      	mov	r3, r7
 80136ec:	4628      	mov	r0, r5
 80136ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136f2:	f000 b8eb 	b.w	80138cc <_write_r>

080136f6 <__sseek>:
 80136f6:	b510      	push	{r4, lr}
 80136f8:	460c      	mov	r4, r1
 80136fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136fe:	f000 f8c1 	bl	8013884 <_lseek_r>
 8013702:	1c43      	adds	r3, r0, #1
 8013704:	89a3      	ldrh	r3, [r4, #12]
 8013706:	bf15      	itete	ne
 8013708:	6560      	strne	r0, [r4, #84]	@ 0x54
 801370a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801370e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013712:	81a3      	strheq	r3, [r4, #12]
 8013714:	bf18      	it	ne
 8013716:	81a3      	strhne	r3, [r4, #12]
 8013718:	bd10      	pop	{r4, pc}

0801371a <__sclose>:
 801371a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801371e:	f000 b8a1 	b.w	8013864 <_close_r>

08013722 <memmove>:
 8013722:	4288      	cmp	r0, r1
 8013724:	b510      	push	{r4, lr}
 8013726:	eb01 0402 	add.w	r4, r1, r2
 801372a:	d902      	bls.n	8013732 <memmove+0x10>
 801372c:	4284      	cmp	r4, r0
 801372e:	4623      	mov	r3, r4
 8013730:	d807      	bhi.n	8013742 <memmove+0x20>
 8013732:	1e43      	subs	r3, r0, #1
 8013734:	42a1      	cmp	r1, r4
 8013736:	d008      	beq.n	801374a <memmove+0x28>
 8013738:	f811 2b01 	ldrb.w	r2, [r1], #1
 801373c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013740:	e7f8      	b.n	8013734 <memmove+0x12>
 8013742:	4402      	add	r2, r0
 8013744:	4601      	mov	r1, r0
 8013746:	428a      	cmp	r2, r1
 8013748:	d100      	bne.n	801374c <memmove+0x2a>
 801374a:	bd10      	pop	{r4, pc}
 801374c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013750:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013754:	e7f7      	b.n	8013746 <memmove+0x24>

08013756 <memset>:
 8013756:	4402      	add	r2, r0
 8013758:	4603      	mov	r3, r0
 801375a:	4293      	cmp	r3, r2
 801375c:	d100      	bne.n	8013760 <memset+0xa>
 801375e:	4770      	bx	lr
 8013760:	f803 1b01 	strb.w	r1, [r3], #1
 8013764:	e7f9      	b.n	801375a <memset+0x4>

08013766 <strcat>:
 8013766:	b510      	push	{r4, lr}
 8013768:	4602      	mov	r2, r0
 801376a:	7814      	ldrb	r4, [r2, #0]
 801376c:	4613      	mov	r3, r2
 801376e:	3201      	adds	r2, #1
 8013770:	2c00      	cmp	r4, #0
 8013772:	d1fa      	bne.n	801376a <strcat+0x4>
 8013774:	3b01      	subs	r3, #1
 8013776:	f811 2b01 	ldrb.w	r2, [r1], #1
 801377a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801377e:	2a00      	cmp	r2, #0
 8013780:	d1f9      	bne.n	8013776 <strcat+0x10>
 8013782:	bd10      	pop	{r4, pc}

08013784 <strncpy>:
 8013784:	b510      	push	{r4, lr}
 8013786:	3901      	subs	r1, #1
 8013788:	4603      	mov	r3, r0
 801378a:	b132      	cbz	r2, 801379a <strncpy+0x16>
 801378c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013790:	f803 4b01 	strb.w	r4, [r3], #1
 8013794:	3a01      	subs	r2, #1
 8013796:	2c00      	cmp	r4, #0
 8013798:	d1f7      	bne.n	801378a <strncpy+0x6>
 801379a:	441a      	add	r2, r3
 801379c:	2100      	movs	r1, #0
 801379e:	4293      	cmp	r3, r2
 80137a0:	d100      	bne.n	80137a4 <strncpy+0x20>
 80137a2:	bd10      	pop	{r4, pc}
 80137a4:	f803 1b01 	strb.w	r1, [r3], #1
 80137a8:	e7f9      	b.n	801379e <strncpy+0x1a>
	...

080137ac <strtok>:
 80137ac:	4b16      	ldr	r3, [pc, #88]	@ (8013808 <strtok+0x5c>)
 80137ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137b2:	681f      	ldr	r7, [r3, #0]
 80137b4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80137b6:	4605      	mov	r5, r0
 80137b8:	460e      	mov	r6, r1
 80137ba:	b9ec      	cbnz	r4, 80137f8 <strtok+0x4c>
 80137bc:	2050      	movs	r0, #80	@ 0x50
 80137be:	f000 f93b 	bl	8013a38 <malloc>
 80137c2:	4602      	mov	r2, r0
 80137c4:	6478      	str	r0, [r7, #68]	@ 0x44
 80137c6:	b920      	cbnz	r0, 80137d2 <strtok+0x26>
 80137c8:	4b10      	ldr	r3, [pc, #64]	@ (801380c <strtok+0x60>)
 80137ca:	4811      	ldr	r0, [pc, #68]	@ (8013810 <strtok+0x64>)
 80137cc:	215b      	movs	r1, #91	@ 0x5b
 80137ce:	f000 f8cb 	bl	8013968 <__assert_func>
 80137d2:	e9c0 4400 	strd	r4, r4, [r0]
 80137d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80137da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80137de:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80137e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80137e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80137ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80137ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80137f2:	6184      	str	r4, [r0, #24]
 80137f4:	7704      	strb	r4, [r0, #28]
 80137f6:	6244      	str	r4, [r0, #36]	@ 0x24
 80137f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80137fa:	4631      	mov	r1, r6
 80137fc:	4628      	mov	r0, r5
 80137fe:	2301      	movs	r3, #1
 8013800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013804:	f000 b806 	b.w	8013814 <__strtok_r>
 8013808:	20000040 	.word	0x20000040
 801380c:	0802c83c 	.word	0x0802c83c
 8013810:	0802c853 	.word	0x0802c853

08013814 <__strtok_r>:
 8013814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013816:	4604      	mov	r4, r0
 8013818:	b908      	cbnz	r0, 801381e <__strtok_r+0xa>
 801381a:	6814      	ldr	r4, [r2, #0]
 801381c:	b144      	cbz	r4, 8013830 <__strtok_r+0x1c>
 801381e:	4620      	mov	r0, r4
 8013820:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013824:	460f      	mov	r7, r1
 8013826:	f817 6b01 	ldrb.w	r6, [r7], #1
 801382a:	b91e      	cbnz	r6, 8013834 <__strtok_r+0x20>
 801382c:	b965      	cbnz	r5, 8013848 <__strtok_r+0x34>
 801382e:	6015      	str	r5, [r2, #0]
 8013830:	2000      	movs	r0, #0
 8013832:	e005      	b.n	8013840 <__strtok_r+0x2c>
 8013834:	42b5      	cmp	r5, r6
 8013836:	d1f6      	bne.n	8013826 <__strtok_r+0x12>
 8013838:	2b00      	cmp	r3, #0
 801383a:	d1f0      	bne.n	801381e <__strtok_r+0xa>
 801383c:	6014      	str	r4, [r2, #0]
 801383e:	7003      	strb	r3, [r0, #0]
 8013840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013842:	461c      	mov	r4, r3
 8013844:	e00c      	b.n	8013860 <__strtok_r+0x4c>
 8013846:	b915      	cbnz	r5, 801384e <__strtok_r+0x3a>
 8013848:	f814 3b01 	ldrb.w	r3, [r4], #1
 801384c:	460e      	mov	r6, r1
 801384e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013852:	42ab      	cmp	r3, r5
 8013854:	d1f7      	bne.n	8013846 <__strtok_r+0x32>
 8013856:	2b00      	cmp	r3, #0
 8013858:	d0f3      	beq.n	8013842 <__strtok_r+0x2e>
 801385a:	2300      	movs	r3, #0
 801385c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013860:	6014      	str	r4, [r2, #0]
 8013862:	e7ed      	b.n	8013840 <__strtok_r+0x2c>

08013864 <_close_r>:
 8013864:	b538      	push	{r3, r4, r5, lr}
 8013866:	4d06      	ldr	r5, [pc, #24]	@ (8013880 <_close_r+0x1c>)
 8013868:	2300      	movs	r3, #0
 801386a:	4604      	mov	r4, r0
 801386c:	4608      	mov	r0, r1
 801386e:	602b      	str	r3, [r5, #0]
 8013870:	f7ee feac 	bl	80025cc <_close>
 8013874:	1c43      	adds	r3, r0, #1
 8013876:	d102      	bne.n	801387e <_close_r+0x1a>
 8013878:	682b      	ldr	r3, [r5, #0]
 801387a:	b103      	cbz	r3, 801387e <_close_r+0x1a>
 801387c:	6023      	str	r3, [r4, #0]
 801387e:	bd38      	pop	{r3, r4, r5, pc}
 8013880:	2001054c 	.word	0x2001054c

08013884 <_lseek_r>:
 8013884:	b538      	push	{r3, r4, r5, lr}
 8013886:	4d07      	ldr	r5, [pc, #28]	@ (80138a4 <_lseek_r+0x20>)
 8013888:	4604      	mov	r4, r0
 801388a:	4608      	mov	r0, r1
 801388c:	4611      	mov	r1, r2
 801388e:	2200      	movs	r2, #0
 8013890:	602a      	str	r2, [r5, #0]
 8013892:	461a      	mov	r2, r3
 8013894:	f7ee fec1 	bl	800261a <_lseek>
 8013898:	1c43      	adds	r3, r0, #1
 801389a:	d102      	bne.n	80138a2 <_lseek_r+0x1e>
 801389c:	682b      	ldr	r3, [r5, #0]
 801389e:	b103      	cbz	r3, 80138a2 <_lseek_r+0x1e>
 80138a0:	6023      	str	r3, [r4, #0]
 80138a2:	bd38      	pop	{r3, r4, r5, pc}
 80138a4:	2001054c 	.word	0x2001054c

080138a8 <_read_r>:
 80138a8:	b538      	push	{r3, r4, r5, lr}
 80138aa:	4d07      	ldr	r5, [pc, #28]	@ (80138c8 <_read_r+0x20>)
 80138ac:	4604      	mov	r4, r0
 80138ae:	4608      	mov	r0, r1
 80138b0:	4611      	mov	r1, r2
 80138b2:	2200      	movs	r2, #0
 80138b4:	602a      	str	r2, [r5, #0]
 80138b6:	461a      	mov	r2, r3
 80138b8:	f7ee fe4f 	bl	800255a <_read>
 80138bc:	1c43      	adds	r3, r0, #1
 80138be:	d102      	bne.n	80138c6 <_read_r+0x1e>
 80138c0:	682b      	ldr	r3, [r5, #0]
 80138c2:	b103      	cbz	r3, 80138c6 <_read_r+0x1e>
 80138c4:	6023      	str	r3, [r4, #0]
 80138c6:	bd38      	pop	{r3, r4, r5, pc}
 80138c8:	2001054c 	.word	0x2001054c

080138cc <_write_r>:
 80138cc:	b538      	push	{r3, r4, r5, lr}
 80138ce:	4d07      	ldr	r5, [pc, #28]	@ (80138ec <_write_r+0x20>)
 80138d0:	4604      	mov	r4, r0
 80138d2:	4608      	mov	r0, r1
 80138d4:	4611      	mov	r1, r2
 80138d6:	2200      	movs	r2, #0
 80138d8:	602a      	str	r2, [r5, #0]
 80138da:	461a      	mov	r2, r3
 80138dc:	f7ee fe5a 	bl	8002594 <_write>
 80138e0:	1c43      	adds	r3, r0, #1
 80138e2:	d102      	bne.n	80138ea <_write_r+0x1e>
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	b103      	cbz	r3, 80138ea <_write_r+0x1e>
 80138e8:	6023      	str	r3, [r4, #0]
 80138ea:	bd38      	pop	{r3, r4, r5, pc}
 80138ec:	2001054c 	.word	0x2001054c

080138f0 <__errno>:
 80138f0:	4b01      	ldr	r3, [pc, #4]	@ (80138f8 <__errno+0x8>)
 80138f2:	6818      	ldr	r0, [r3, #0]
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop
 80138f8:	20000040 	.word	0x20000040

080138fc <__libc_init_array>:
 80138fc:	b570      	push	{r4, r5, r6, lr}
 80138fe:	4d0d      	ldr	r5, [pc, #52]	@ (8013934 <__libc_init_array+0x38>)
 8013900:	4c0d      	ldr	r4, [pc, #52]	@ (8013938 <__libc_init_array+0x3c>)
 8013902:	1b64      	subs	r4, r4, r5
 8013904:	10a4      	asrs	r4, r4, #2
 8013906:	2600      	movs	r6, #0
 8013908:	42a6      	cmp	r6, r4
 801390a:	d109      	bne.n	8013920 <__libc_init_array+0x24>
 801390c:	4d0b      	ldr	r5, [pc, #44]	@ (801393c <__libc_init_array+0x40>)
 801390e:	4c0c      	ldr	r4, [pc, #48]	@ (8013940 <__libc_init_array+0x44>)
 8013910:	f000 fff8 	bl	8014904 <_init>
 8013914:	1b64      	subs	r4, r4, r5
 8013916:	10a4      	asrs	r4, r4, #2
 8013918:	2600      	movs	r6, #0
 801391a:	42a6      	cmp	r6, r4
 801391c:	d105      	bne.n	801392a <__libc_init_array+0x2e>
 801391e:	bd70      	pop	{r4, r5, r6, pc}
 8013920:	f855 3b04 	ldr.w	r3, [r5], #4
 8013924:	4798      	blx	r3
 8013926:	3601      	adds	r6, #1
 8013928:	e7ee      	b.n	8013908 <__libc_init_array+0xc>
 801392a:	f855 3b04 	ldr.w	r3, [r5], #4
 801392e:	4798      	blx	r3
 8013930:	3601      	adds	r6, #1
 8013932:	e7f2      	b.n	801391a <__libc_init_array+0x1e>
 8013934:	0802c924 	.word	0x0802c924
 8013938:	0802c924 	.word	0x0802c924
 801393c:	0802c924 	.word	0x0802c924
 8013940:	0802c928 	.word	0x0802c928

08013944 <__retarget_lock_init_recursive>:
 8013944:	4770      	bx	lr

08013946 <__retarget_lock_acquire_recursive>:
 8013946:	4770      	bx	lr

08013948 <__retarget_lock_release_recursive>:
 8013948:	4770      	bx	lr

0801394a <memcpy>:
 801394a:	440a      	add	r2, r1
 801394c:	4291      	cmp	r1, r2
 801394e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013952:	d100      	bne.n	8013956 <memcpy+0xc>
 8013954:	4770      	bx	lr
 8013956:	b510      	push	{r4, lr}
 8013958:	f811 4b01 	ldrb.w	r4, [r1], #1
 801395c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013960:	4291      	cmp	r1, r2
 8013962:	d1f9      	bne.n	8013958 <memcpy+0xe>
 8013964:	bd10      	pop	{r4, pc}
	...

08013968 <__assert_func>:
 8013968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801396a:	4614      	mov	r4, r2
 801396c:	461a      	mov	r2, r3
 801396e:	4b09      	ldr	r3, [pc, #36]	@ (8013994 <__assert_func+0x2c>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	4605      	mov	r5, r0
 8013974:	68d8      	ldr	r0, [r3, #12]
 8013976:	b954      	cbnz	r4, 801398e <__assert_func+0x26>
 8013978:	4b07      	ldr	r3, [pc, #28]	@ (8013998 <__assert_func+0x30>)
 801397a:	461c      	mov	r4, r3
 801397c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013980:	9100      	str	r1, [sp, #0]
 8013982:	462b      	mov	r3, r5
 8013984:	4905      	ldr	r1, [pc, #20]	@ (801399c <__assert_func+0x34>)
 8013986:	f000 fc9f 	bl	80142c8 <fiprintf>
 801398a:	f000 fcbf 	bl	801430c <abort>
 801398e:	4b04      	ldr	r3, [pc, #16]	@ (80139a0 <__assert_func+0x38>)
 8013990:	e7f4      	b.n	801397c <__assert_func+0x14>
 8013992:	bf00      	nop
 8013994:	20000040 	.word	0x20000040
 8013998:	0802c8e8 	.word	0x0802c8e8
 801399c:	0802c8ba 	.word	0x0802c8ba
 80139a0:	0802c8ad 	.word	0x0802c8ad

080139a4 <_free_r>:
 80139a4:	b538      	push	{r3, r4, r5, lr}
 80139a6:	4605      	mov	r5, r0
 80139a8:	2900      	cmp	r1, #0
 80139aa:	d041      	beq.n	8013a30 <_free_r+0x8c>
 80139ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139b0:	1f0c      	subs	r4, r1, #4
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	bfb8      	it	lt
 80139b6:	18e4      	addlt	r4, r4, r3
 80139b8:	f000 f8e8 	bl	8013b8c <__malloc_lock>
 80139bc:	4a1d      	ldr	r2, [pc, #116]	@ (8013a34 <_free_r+0x90>)
 80139be:	6813      	ldr	r3, [r2, #0]
 80139c0:	b933      	cbnz	r3, 80139d0 <_free_r+0x2c>
 80139c2:	6063      	str	r3, [r4, #4]
 80139c4:	6014      	str	r4, [r2, #0]
 80139c6:	4628      	mov	r0, r5
 80139c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139cc:	f000 b8e4 	b.w	8013b98 <__malloc_unlock>
 80139d0:	42a3      	cmp	r3, r4
 80139d2:	d908      	bls.n	80139e6 <_free_r+0x42>
 80139d4:	6820      	ldr	r0, [r4, #0]
 80139d6:	1821      	adds	r1, r4, r0
 80139d8:	428b      	cmp	r3, r1
 80139da:	bf01      	itttt	eq
 80139dc:	6819      	ldreq	r1, [r3, #0]
 80139de:	685b      	ldreq	r3, [r3, #4]
 80139e0:	1809      	addeq	r1, r1, r0
 80139e2:	6021      	streq	r1, [r4, #0]
 80139e4:	e7ed      	b.n	80139c2 <_free_r+0x1e>
 80139e6:	461a      	mov	r2, r3
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	b10b      	cbz	r3, 80139f0 <_free_r+0x4c>
 80139ec:	42a3      	cmp	r3, r4
 80139ee:	d9fa      	bls.n	80139e6 <_free_r+0x42>
 80139f0:	6811      	ldr	r1, [r2, #0]
 80139f2:	1850      	adds	r0, r2, r1
 80139f4:	42a0      	cmp	r0, r4
 80139f6:	d10b      	bne.n	8013a10 <_free_r+0x6c>
 80139f8:	6820      	ldr	r0, [r4, #0]
 80139fa:	4401      	add	r1, r0
 80139fc:	1850      	adds	r0, r2, r1
 80139fe:	4283      	cmp	r3, r0
 8013a00:	6011      	str	r1, [r2, #0]
 8013a02:	d1e0      	bne.n	80139c6 <_free_r+0x22>
 8013a04:	6818      	ldr	r0, [r3, #0]
 8013a06:	685b      	ldr	r3, [r3, #4]
 8013a08:	6053      	str	r3, [r2, #4]
 8013a0a:	4408      	add	r0, r1
 8013a0c:	6010      	str	r0, [r2, #0]
 8013a0e:	e7da      	b.n	80139c6 <_free_r+0x22>
 8013a10:	d902      	bls.n	8013a18 <_free_r+0x74>
 8013a12:	230c      	movs	r3, #12
 8013a14:	602b      	str	r3, [r5, #0]
 8013a16:	e7d6      	b.n	80139c6 <_free_r+0x22>
 8013a18:	6820      	ldr	r0, [r4, #0]
 8013a1a:	1821      	adds	r1, r4, r0
 8013a1c:	428b      	cmp	r3, r1
 8013a1e:	bf04      	itt	eq
 8013a20:	6819      	ldreq	r1, [r3, #0]
 8013a22:	685b      	ldreq	r3, [r3, #4]
 8013a24:	6063      	str	r3, [r4, #4]
 8013a26:	bf04      	itt	eq
 8013a28:	1809      	addeq	r1, r1, r0
 8013a2a:	6021      	streq	r1, [r4, #0]
 8013a2c:	6054      	str	r4, [r2, #4]
 8013a2e:	e7ca      	b.n	80139c6 <_free_r+0x22>
 8013a30:	bd38      	pop	{r3, r4, r5, pc}
 8013a32:	bf00      	nop
 8013a34:	20010558 	.word	0x20010558

08013a38 <malloc>:
 8013a38:	4b02      	ldr	r3, [pc, #8]	@ (8013a44 <malloc+0xc>)
 8013a3a:	4601      	mov	r1, r0
 8013a3c:	6818      	ldr	r0, [r3, #0]
 8013a3e:	f000 b825 	b.w	8013a8c <_malloc_r>
 8013a42:	bf00      	nop
 8013a44:	20000040 	.word	0x20000040

08013a48 <sbrk_aligned>:
 8013a48:	b570      	push	{r4, r5, r6, lr}
 8013a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8013a88 <sbrk_aligned+0x40>)
 8013a4c:	460c      	mov	r4, r1
 8013a4e:	6831      	ldr	r1, [r6, #0]
 8013a50:	4605      	mov	r5, r0
 8013a52:	b911      	cbnz	r1, 8013a5a <sbrk_aligned+0x12>
 8013a54:	f000 fc4a 	bl	80142ec <_sbrk_r>
 8013a58:	6030      	str	r0, [r6, #0]
 8013a5a:	4621      	mov	r1, r4
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	f000 fc45 	bl	80142ec <_sbrk_r>
 8013a62:	1c43      	adds	r3, r0, #1
 8013a64:	d103      	bne.n	8013a6e <sbrk_aligned+0x26>
 8013a66:	f04f 34ff 	mov.w	r4, #4294967295
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	bd70      	pop	{r4, r5, r6, pc}
 8013a6e:	1cc4      	adds	r4, r0, #3
 8013a70:	f024 0403 	bic.w	r4, r4, #3
 8013a74:	42a0      	cmp	r0, r4
 8013a76:	d0f8      	beq.n	8013a6a <sbrk_aligned+0x22>
 8013a78:	1a21      	subs	r1, r4, r0
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	f000 fc36 	bl	80142ec <_sbrk_r>
 8013a80:	3001      	adds	r0, #1
 8013a82:	d1f2      	bne.n	8013a6a <sbrk_aligned+0x22>
 8013a84:	e7ef      	b.n	8013a66 <sbrk_aligned+0x1e>
 8013a86:	bf00      	nop
 8013a88:	20010554 	.word	0x20010554

08013a8c <_malloc_r>:
 8013a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a90:	1ccd      	adds	r5, r1, #3
 8013a92:	f025 0503 	bic.w	r5, r5, #3
 8013a96:	3508      	adds	r5, #8
 8013a98:	2d0c      	cmp	r5, #12
 8013a9a:	bf38      	it	cc
 8013a9c:	250c      	movcc	r5, #12
 8013a9e:	2d00      	cmp	r5, #0
 8013aa0:	4606      	mov	r6, r0
 8013aa2:	db01      	blt.n	8013aa8 <_malloc_r+0x1c>
 8013aa4:	42a9      	cmp	r1, r5
 8013aa6:	d904      	bls.n	8013ab2 <_malloc_r+0x26>
 8013aa8:	230c      	movs	r3, #12
 8013aaa:	6033      	str	r3, [r6, #0]
 8013aac:	2000      	movs	r0, #0
 8013aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013b88 <_malloc_r+0xfc>
 8013ab6:	f000 f869 	bl	8013b8c <__malloc_lock>
 8013aba:	f8d8 3000 	ldr.w	r3, [r8]
 8013abe:	461c      	mov	r4, r3
 8013ac0:	bb44      	cbnz	r4, 8013b14 <_malloc_r+0x88>
 8013ac2:	4629      	mov	r1, r5
 8013ac4:	4630      	mov	r0, r6
 8013ac6:	f7ff ffbf 	bl	8013a48 <sbrk_aligned>
 8013aca:	1c43      	adds	r3, r0, #1
 8013acc:	4604      	mov	r4, r0
 8013ace:	d158      	bne.n	8013b82 <_malloc_r+0xf6>
 8013ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8013ad4:	4627      	mov	r7, r4
 8013ad6:	2f00      	cmp	r7, #0
 8013ad8:	d143      	bne.n	8013b62 <_malloc_r+0xd6>
 8013ada:	2c00      	cmp	r4, #0
 8013adc:	d04b      	beq.n	8013b76 <_malloc_r+0xea>
 8013ade:	6823      	ldr	r3, [r4, #0]
 8013ae0:	4639      	mov	r1, r7
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	eb04 0903 	add.w	r9, r4, r3
 8013ae8:	f000 fc00 	bl	80142ec <_sbrk_r>
 8013aec:	4581      	cmp	r9, r0
 8013aee:	d142      	bne.n	8013b76 <_malloc_r+0xea>
 8013af0:	6821      	ldr	r1, [r4, #0]
 8013af2:	1a6d      	subs	r5, r5, r1
 8013af4:	4629      	mov	r1, r5
 8013af6:	4630      	mov	r0, r6
 8013af8:	f7ff ffa6 	bl	8013a48 <sbrk_aligned>
 8013afc:	3001      	adds	r0, #1
 8013afe:	d03a      	beq.n	8013b76 <_malloc_r+0xea>
 8013b00:	6823      	ldr	r3, [r4, #0]
 8013b02:	442b      	add	r3, r5
 8013b04:	6023      	str	r3, [r4, #0]
 8013b06:	f8d8 3000 	ldr.w	r3, [r8]
 8013b0a:	685a      	ldr	r2, [r3, #4]
 8013b0c:	bb62      	cbnz	r2, 8013b68 <_malloc_r+0xdc>
 8013b0e:	f8c8 7000 	str.w	r7, [r8]
 8013b12:	e00f      	b.n	8013b34 <_malloc_r+0xa8>
 8013b14:	6822      	ldr	r2, [r4, #0]
 8013b16:	1b52      	subs	r2, r2, r5
 8013b18:	d420      	bmi.n	8013b5c <_malloc_r+0xd0>
 8013b1a:	2a0b      	cmp	r2, #11
 8013b1c:	d917      	bls.n	8013b4e <_malloc_r+0xc2>
 8013b1e:	1961      	adds	r1, r4, r5
 8013b20:	42a3      	cmp	r3, r4
 8013b22:	6025      	str	r5, [r4, #0]
 8013b24:	bf18      	it	ne
 8013b26:	6059      	strne	r1, [r3, #4]
 8013b28:	6863      	ldr	r3, [r4, #4]
 8013b2a:	bf08      	it	eq
 8013b2c:	f8c8 1000 	streq.w	r1, [r8]
 8013b30:	5162      	str	r2, [r4, r5]
 8013b32:	604b      	str	r3, [r1, #4]
 8013b34:	4630      	mov	r0, r6
 8013b36:	f000 f82f 	bl	8013b98 <__malloc_unlock>
 8013b3a:	f104 000b 	add.w	r0, r4, #11
 8013b3e:	1d23      	adds	r3, r4, #4
 8013b40:	f020 0007 	bic.w	r0, r0, #7
 8013b44:	1ac2      	subs	r2, r0, r3
 8013b46:	bf1c      	itt	ne
 8013b48:	1a1b      	subne	r3, r3, r0
 8013b4a:	50a3      	strne	r3, [r4, r2]
 8013b4c:	e7af      	b.n	8013aae <_malloc_r+0x22>
 8013b4e:	6862      	ldr	r2, [r4, #4]
 8013b50:	42a3      	cmp	r3, r4
 8013b52:	bf0c      	ite	eq
 8013b54:	f8c8 2000 	streq.w	r2, [r8]
 8013b58:	605a      	strne	r2, [r3, #4]
 8013b5a:	e7eb      	b.n	8013b34 <_malloc_r+0xa8>
 8013b5c:	4623      	mov	r3, r4
 8013b5e:	6864      	ldr	r4, [r4, #4]
 8013b60:	e7ae      	b.n	8013ac0 <_malloc_r+0x34>
 8013b62:	463c      	mov	r4, r7
 8013b64:	687f      	ldr	r7, [r7, #4]
 8013b66:	e7b6      	b.n	8013ad6 <_malloc_r+0x4a>
 8013b68:	461a      	mov	r2, r3
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	42a3      	cmp	r3, r4
 8013b6e:	d1fb      	bne.n	8013b68 <_malloc_r+0xdc>
 8013b70:	2300      	movs	r3, #0
 8013b72:	6053      	str	r3, [r2, #4]
 8013b74:	e7de      	b.n	8013b34 <_malloc_r+0xa8>
 8013b76:	230c      	movs	r3, #12
 8013b78:	6033      	str	r3, [r6, #0]
 8013b7a:	4630      	mov	r0, r6
 8013b7c:	f000 f80c 	bl	8013b98 <__malloc_unlock>
 8013b80:	e794      	b.n	8013aac <_malloc_r+0x20>
 8013b82:	6005      	str	r5, [r0, #0]
 8013b84:	e7d6      	b.n	8013b34 <_malloc_r+0xa8>
 8013b86:	bf00      	nop
 8013b88:	20010558 	.word	0x20010558

08013b8c <__malloc_lock>:
 8013b8c:	4801      	ldr	r0, [pc, #4]	@ (8013b94 <__malloc_lock+0x8>)
 8013b8e:	f7ff beda 	b.w	8013946 <__retarget_lock_acquire_recursive>
 8013b92:	bf00      	nop
 8013b94:	20010550 	.word	0x20010550

08013b98 <__malloc_unlock>:
 8013b98:	4801      	ldr	r0, [pc, #4]	@ (8013ba0 <__malloc_unlock+0x8>)
 8013b9a:	f7ff bed5 	b.w	8013948 <__retarget_lock_release_recursive>
 8013b9e:	bf00      	nop
 8013ba0:	20010550 	.word	0x20010550

08013ba4 <__ssputs_r>:
 8013ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ba8:	688e      	ldr	r6, [r1, #8]
 8013baa:	461f      	mov	r7, r3
 8013bac:	42be      	cmp	r6, r7
 8013bae:	680b      	ldr	r3, [r1, #0]
 8013bb0:	4682      	mov	sl, r0
 8013bb2:	460c      	mov	r4, r1
 8013bb4:	4690      	mov	r8, r2
 8013bb6:	d82d      	bhi.n	8013c14 <__ssputs_r+0x70>
 8013bb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013bbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013bc0:	d026      	beq.n	8013c10 <__ssputs_r+0x6c>
 8013bc2:	6965      	ldr	r5, [r4, #20]
 8013bc4:	6909      	ldr	r1, [r1, #16]
 8013bc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013bca:	eba3 0901 	sub.w	r9, r3, r1
 8013bce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013bd2:	1c7b      	adds	r3, r7, #1
 8013bd4:	444b      	add	r3, r9
 8013bd6:	106d      	asrs	r5, r5, #1
 8013bd8:	429d      	cmp	r5, r3
 8013bda:	bf38      	it	cc
 8013bdc:	461d      	movcc	r5, r3
 8013bde:	0553      	lsls	r3, r2, #21
 8013be0:	d527      	bpl.n	8013c32 <__ssputs_r+0x8e>
 8013be2:	4629      	mov	r1, r5
 8013be4:	f7ff ff52 	bl	8013a8c <_malloc_r>
 8013be8:	4606      	mov	r6, r0
 8013bea:	b360      	cbz	r0, 8013c46 <__ssputs_r+0xa2>
 8013bec:	6921      	ldr	r1, [r4, #16]
 8013bee:	464a      	mov	r2, r9
 8013bf0:	f7ff feab 	bl	801394a <memcpy>
 8013bf4:	89a3      	ldrh	r3, [r4, #12]
 8013bf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013bfe:	81a3      	strh	r3, [r4, #12]
 8013c00:	6126      	str	r6, [r4, #16]
 8013c02:	6165      	str	r5, [r4, #20]
 8013c04:	444e      	add	r6, r9
 8013c06:	eba5 0509 	sub.w	r5, r5, r9
 8013c0a:	6026      	str	r6, [r4, #0]
 8013c0c:	60a5      	str	r5, [r4, #8]
 8013c0e:	463e      	mov	r6, r7
 8013c10:	42be      	cmp	r6, r7
 8013c12:	d900      	bls.n	8013c16 <__ssputs_r+0x72>
 8013c14:	463e      	mov	r6, r7
 8013c16:	6820      	ldr	r0, [r4, #0]
 8013c18:	4632      	mov	r2, r6
 8013c1a:	4641      	mov	r1, r8
 8013c1c:	f7ff fd81 	bl	8013722 <memmove>
 8013c20:	68a3      	ldr	r3, [r4, #8]
 8013c22:	1b9b      	subs	r3, r3, r6
 8013c24:	60a3      	str	r3, [r4, #8]
 8013c26:	6823      	ldr	r3, [r4, #0]
 8013c28:	4433      	add	r3, r6
 8013c2a:	6023      	str	r3, [r4, #0]
 8013c2c:	2000      	movs	r0, #0
 8013c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c32:	462a      	mov	r2, r5
 8013c34:	f000 fb71 	bl	801431a <_realloc_r>
 8013c38:	4606      	mov	r6, r0
 8013c3a:	2800      	cmp	r0, #0
 8013c3c:	d1e0      	bne.n	8013c00 <__ssputs_r+0x5c>
 8013c3e:	6921      	ldr	r1, [r4, #16]
 8013c40:	4650      	mov	r0, sl
 8013c42:	f7ff feaf 	bl	80139a4 <_free_r>
 8013c46:	230c      	movs	r3, #12
 8013c48:	f8ca 3000 	str.w	r3, [sl]
 8013c4c:	89a3      	ldrh	r3, [r4, #12]
 8013c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c52:	81a3      	strh	r3, [r4, #12]
 8013c54:	f04f 30ff 	mov.w	r0, #4294967295
 8013c58:	e7e9      	b.n	8013c2e <__ssputs_r+0x8a>
	...

08013c5c <_svfiprintf_r>:
 8013c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c60:	4698      	mov	r8, r3
 8013c62:	898b      	ldrh	r3, [r1, #12]
 8013c64:	061b      	lsls	r3, r3, #24
 8013c66:	b09d      	sub	sp, #116	@ 0x74
 8013c68:	4607      	mov	r7, r0
 8013c6a:	460d      	mov	r5, r1
 8013c6c:	4614      	mov	r4, r2
 8013c6e:	d510      	bpl.n	8013c92 <_svfiprintf_r+0x36>
 8013c70:	690b      	ldr	r3, [r1, #16]
 8013c72:	b973      	cbnz	r3, 8013c92 <_svfiprintf_r+0x36>
 8013c74:	2140      	movs	r1, #64	@ 0x40
 8013c76:	f7ff ff09 	bl	8013a8c <_malloc_r>
 8013c7a:	6028      	str	r0, [r5, #0]
 8013c7c:	6128      	str	r0, [r5, #16]
 8013c7e:	b930      	cbnz	r0, 8013c8e <_svfiprintf_r+0x32>
 8013c80:	230c      	movs	r3, #12
 8013c82:	603b      	str	r3, [r7, #0]
 8013c84:	f04f 30ff 	mov.w	r0, #4294967295
 8013c88:	b01d      	add	sp, #116	@ 0x74
 8013c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c8e:	2340      	movs	r3, #64	@ 0x40
 8013c90:	616b      	str	r3, [r5, #20]
 8013c92:	2300      	movs	r3, #0
 8013c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c96:	2320      	movs	r3, #32
 8013c98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013ca0:	2330      	movs	r3, #48	@ 0x30
 8013ca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013e40 <_svfiprintf_r+0x1e4>
 8013ca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013caa:	f04f 0901 	mov.w	r9, #1
 8013cae:	4623      	mov	r3, r4
 8013cb0:	469a      	mov	sl, r3
 8013cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013cb6:	b10a      	cbz	r2, 8013cbc <_svfiprintf_r+0x60>
 8013cb8:	2a25      	cmp	r2, #37	@ 0x25
 8013cba:	d1f9      	bne.n	8013cb0 <_svfiprintf_r+0x54>
 8013cbc:	ebba 0b04 	subs.w	fp, sl, r4
 8013cc0:	d00b      	beq.n	8013cda <_svfiprintf_r+0x7e>
 8013cc2:	465b      	mov	r3, fp
 8013cc4:	4622      	mov	r2, r4
 8013cc6:	4629      	mov	r1, r5
 8013cc8:	4638      	mov	r0, r7
 8013cca:	f7ff ff6b 	bl	8013ba4 <__ssputs_r>
 8013cce:	3001      	adds	r0, #1
 8013cd0:	f000 80a7 	beq.w	8013e22 <_svfiprintf_r+0x1c6>
 8013cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013cd6:	445a      	add	r2, fp
 8013cd8:	9209      	str	r2, [sp, #36]	@ 0x24
 8013cda:	f89a 3000 	ldrb.w	r3, [sl]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	f000 809f 	beq.w	8013e22 <_svfiprintf_r+0x1c6>
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8013cea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cee:	f10a 0a01 	add.w	sl, sl, #1
 8013cf2:	9304      	str	r3, [sp, #16]
 8013cf4:	9307      	str	r3, [sp, #28]
 8013cf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013cfa:	931a      	str	r3, [sp, #104]	@ 0x68
 8013cfc:	4654      	mov	r4, sl
 8013cfe:	2205      	movs	r2, #5
 8013d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d04:	484e      	ldr	r0, [pc, #312]	@ (8013e40 <_svfiprintf_r+0x1e4>)
 8013d06:	f7ec fae3 	bl	80002d0 <memchr>
 8013d0a:	9a04      	ldr	r2, [sp, #16]
 8013d0c:	b9d8      	cbnz	r0, 8013d46 <_svfiprintf_r+0xea>
 8013d0e:	06d0      	lsls	r0, r2, #27
 8013d10:	bf44      	itt	mi
 8013d12:	2320      	movmi	r3, #32
 8013d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d18:	0711      	lsls	r1, r2, #28
 8013d1a:	bf44      	itt	mi
 8013d1c:	232b      	movmi	r3, #43	@ 0x2b
 8013d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d22:	f89a 3000 	ldrb.w	r3, [sl]
 8013d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d28:	d015      	beq.n	8013d56 <_svfiprintf_r+0xfa>
 8013d2a:	9a07      	ldr	r2, [sp, #28]
 8013d2c:	4654      	mov	r4, sl
 8013d2e:	2000      	movs	r0, #0
 8013d30:	f04f 0c0a 	mov.w	ip, #10
 8013d34:	4621      	mov	r1, r4
 8013d36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d3a:	3b30      	subs	r3, #48	@ 0x30
 8013d3c:	2b09      	cmp	r3, #9
 8013d3e:	d94b      	bls.n	8013dd8 <_svfiprintf_r+0x17c>
 8013d40:	b1b0      	cbz	r0, 8013d70 <_svfiprintf_r+0x114>
 8013d42:	9207      	str	r2, [sp, #28]
 8013d44:	e014      	b.n	8013d70 <_svfiprintf_r+0x114>
 8013d46:	eba0 0308 	sub.w	r3, r0, r8
 8013d4a:	fa09 f303 	lsl.w	r3, r9, r3
 8013d4e:	4313      	orrs	r3, r2
 8013d50:	9304      	str	r3, [sp, #16]
 8013d52:	46a2      	mov	sl, r4
 8013d54:	e7d2      	b.n	8013cfc <_svfiprintf_r+0xa0>
 8013d56:	9b03      	ldr	r3, [sp, #12]
 8013d58:	1d19      	adds	r1, r3, #4
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	9103      	str	r1, [sp, #12]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	bfbb      	ittet	lt
 8013d62:	425b      	neglt	r3, r3
 8013d64:	f042 0202 	orrlt.w	r2, r2, #2
 8013d68:	9307      	strge	r3, [sp, #28]
 8013d6a:	9307      	strlt	r3, [sp, #28]
 8013d6c:	bfb8      	it	lt
 8013d6e:	9204      	strlt	r2, [sp, #16]
 8013d70:	7823      	ldrb	r3, [r4, #0]
 8013d72:	2b2e      	cmp	r3, #46	@ 0x2e
 8013d74:	d10a      	bne.n	8013d8c <_svfiprintf_r+0x130>
 8013d76:	7863      	ldrb	r3, [r4, #1]
 8013d78:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d7a:	d132      	bne.n	8013de2 <_svfiprintf_r+0x186>
 8013d7c:	9b03      	ldr	r3, [sp, #12]
 8013d7e:	1d1a      	adds	r2, r3, #4
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	9203      	str	r2, [sp, #12]
 8013d84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013d88:	3402      	adds	r4, #2
 8013d8a:	9305      	str	r3, [sp, #20]
 8013d8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013e50 <_svfiprintf_r+0x1f4>
 8013d90:	7821      	ldrb	r1, [r4, #0]
 8013d92:	2203      	movs	r2, #3
 8013d94:	4650      	mov	r0, sl
 8013d96:	f7ec fa9b 	bl	80002d0 <memchr>
 8013d9a:	b138      	cbz	r0, 8013dac <_svfiprintf_r+0x150>
 8013d9c:	9b04      	ldr	r3, [sp, #16]
 8013d9e:	eba0 000a 	sub.w	r0, r0, sl
 8013da2:	2240      	movs	r2, #64	@ 0x40
 8013da4:	4082      	lsls	r2, r0
 8013da6:	4313      	orrs	r3, r2
 8013da8:	3401      	adds	r4, #1
 8013daa:	9304      	str	r3, [sp, #16]
 8013dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013db0:	4824      	ldr	r0, [pc, #144]	@ (8013e44 <_svfiprintf_r+0x1e8>)
 8013db2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013db6:	2206      	movs	r2, #6
 8013db8:	f7ec fa8a 	bl	80002d0 <memchr>
 8013dbc:	2800      	cmp	r0, #0
 8013dbe:	d036      	beq.n	8013e2e <_svfiprintf_r+0x1d2>
 8013dc0:	4b21      	ldr	r3, [pc, #132]	@ (8013e48 <_svfiprintf_r+0x1ec>)
 8013dc2:	bb1b      	cbnz	r3, 8013e0c <_svfiprintf_r+0x1b0>
 8013dc4:	9b03      	ldr	r3, [sp, #12]
 8013dc6:	3307      	adds	r3, #7
 8013dc8:	f023 0307 	bic.w	r3, r3, #7
 8013dcc:	3308      	adds	r3, #8
 8013dce:	9303      	str	r3, [sp, #12]
 8013dd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013dd2:	4433      	add	r3, r6
 8013dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8013dd6:	e76a      	b.n	8013cae <_svfiprintf_r+0x52>
 8013dd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ddc:	460c      	mov	r4, r1
 8013dde:	2001      	movs	r0, #1
 8013de0:	e7a8      	b.n	8013d34 <_svfiprintf_r+0xd8>
 8013de2:	2300      	movs	r3, #0
 8013de4:	3401      	adds	r4, #1
 8013de6:	9305      	str	r3, [sp, #20]
 8013de8:	4619      	mov	r1, r3
 8013dea:	f04f 0c0a 	mov.w	ip, #10
 8013dee:	4620      	mov	r0, r4
 8013df0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013df4:	3a30      	subs	r2, #48	@ 0x30
 8013df6:	2a09      	cmp	r2, #9
 8013df8:	d903      	bls.n	8013e02 <_svfiprintf_r+0x1a6>
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d0c6      	beq.n	8013d8c <_svfiprintf_r+0x130>
 8013dfe:	9105      	str	r1, [sp, #20]
 8013e00:	e7c4      	b.n	8013d8c <_svfiprintf_r+0x130>
 8013e02:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e06:	4604      	mov	r4, r0
 8013e08:	2301      	movs	r3, #1
 8013e0a:	e7f0      	b.n	8013dee <_svfiprintf_r+0x192>
 8013e0c:	ab03      	add	r3, sp, #12
 8013e0e:	9300      	str	r3, [sp, #0]
 8013e10:	462a      	mov	r2, r5
 8013e12:	4b0e      	ldr	r3, [pc, #56]	@ (8013e4c <_svfiprintf_r+0x1f0>)
 8013e14:	a904      	add	r1, sp, #16
 8013e16:	4638      	mov	r0, r7
 8013e18:	f3af 8000 	nop.w
 8013e1c:	1c42      	adds	r2, r0, #1
 8013e1e:	4606      	mov	r6, r0
 8013e20:	d1d6      	bne.n	8013dd0 <_svfiprintf_r+0x174>
 8013e22:	89ab      	ldrh	r3, [r5, #12]
 8013e24:	065b      	lsls	r3, r3, #25
 8013e26:	f53f af2d 	bmi.w	8013c84 <_svfiprintf_r+0x28>
 8013e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e2c:	e72c      	b.n	8013c88 <_svfiprintf_r+0x2c>
 8013e2e:	ab03      	add	r3, sp, #12
 8013e30:	9300      	str	r3, [sp, #0]
 8013e32:	462a      	mov	r2, r5
 8013e34:	4b05      	ldr	r3, [pc, #20]	@ (8013e4c <_svfiprintf_r+0x1f0>)
 8013e36:	a904      	add	r1, sp, #16
 8013e38:	4638      	mov	r0, r7
 8013e3a:	f000 f879 	bl	8013f30 <_printf_i>
 8013e3e:	e7ed      	b.n	8013e1c <_svfiprintf_r+0x1c0>
 8013e40:	0802c8e9 	.word	0x0802c8e9
 8013e44:	0802c8f3 	.word	0x0802c8f3
 8013e48:	00000000 	.word	0x00000000
 8013e4c:	08013ba5 	.word	0x08013ba5
 8013e50:	0802c8ef 	.word	0x0802c8ef

08013e54 <_printf_common>:
 8013e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e58:	4616      	mov	r6, r2
 8013e5a:	4698      	mov	r8, r3
 8013e5c:	688a      	ldr	r2, [r1, #8]
 8013e5e:	690b      	ldr	r3, [r1, #16]
 8013e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013e64:	4293      	cmp	r3, r2
 8013e66:	bfb8      	it	lt
 8013e68:	4613      	movlt	r3, r2
 8013e6a:	6033      	str	r3, [r6, #0]
 8013e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013e70:	4607      	mov	r7, r0
 8013e72:	460c      	mov	r4, r1
 8013e74:	b10a      	cbz	r2, 8013e7a <_printf_common+0x26>
 8013e76:	3301      	adds	r3, #1
 8013e78:	6033      	str	r3, [r6, #0]
 8013e7a:	6823      	ldr	r3, [r4, #0]
 8013e7c:	0699      	lsls	r1, r3, #26
 8013e7e:	bf42      	ittt	mi
 8013e80:	6833      	ldrmi	r3, [r6, #0]
 8013e82:	3302      	addmi	r3, #2
 8013e84:	6033      	strmi	r3, [r6, #0]
 8013e86:	6825      	ldr	r5, [r4, #0]
 8013e88:	f015 0506 	ands.w	r5, r5, #6
 8013e8c:	d106      	bne.n	8013e9c <_printf_common+0x48>
 8013e8e:	f104 0a19 	add.w	sl, r4, #25
 8013e92:	68e3      	ldr	r3, [r4, #12]
 8013e94:	6832      	ldr	r2, [r6, #0]
 8013e96:	1a9b      	subs	r3, r3, r2
 8013e98:	42ab      	cmp	r3, r5
 8013e9a:	dc26      	bgt.n	8013eea <_printf_common+0x96>
 8013e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013ea0:	6822      	ldr	r2, [r4, #0]
 8013ea2:	3b00      	subs	r3, #0
 8013ea4:	bf18      	it	ne
 8013ea6:	2301      	movne	r3, #1
 8013ea8:	0692      	lsls	r2, r2, #26
 8013eaa:	d42b      	bmi.n	8013f04 <_printf_common+0xb0>
 8013eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013eb0:	4641      	mov	r1, r8
 8013eb2:	4638      	mov	r0, r7
 8013eb4:	47c8      	blx	r9
 8013eb6:	3001      	adds	r0, #1
 8013eb8:	d01e      	beq.n	8013ef8 <_printf_common+0xa4>
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	6922      	ldr	r2, [r4, #16]
 8013ebe:	f003 0306 	and.w	r3, r3, #6
 8013ec2:	2b04      	cmp	r3, #4
 8013ec4:	bf02      	ittt	eq
 8013ec6:	68e5      	ldreq	r5, [r4, #12]
 8013ec8:	6833      	ldreq	r3, [r6, #0]
 8013eca:	1aed      	subeq	r5, r5, r3
 8013ecc:	68a3      	ldr	r3, [r4, #8]
 8013ece:	bf0c      	ite	eq
 8013ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ed4:	2500      	movne	r5, #0
 8013ed6:	4293      	cmp	r3, r2
 8013ed8:	bfc4      	itt	gt
 8013eda:	1a9b      	subgt	r3, r3, r2
 8013edc:	18ed      	addgt	r5, r5, r3
 8013ede:	2600      	movs	r6, #0
 8013ee0:	341a      	adds	r4, #26
 8013ee2:	42b5      	cmp	r5, r6
 8013ee4:	d11a      	bne.n	8013f1c <_printf_common+0xc8>
 8013ee6:	2000      	movs	r0, #0
 8013ee8:	e008      	b.n	8013efc <_printf_common+0xa8>
 8013eea:	2301      	movs	r3, #1
 8013eec:	4652      	mov	r2, sl
 8013eee:	4641      	mov	r1, r8
 8013ef0:	4638      	mov	r0, r7
 8013ef2:	47c8      	blx	r9
 8013ef4:	3001      	adds	r0, #1
 8013ef6:	d103      	bne.n	8013f00 <_printf_common+0xac>
 8013ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8013efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f00:	3501      	adds	r5, #1
 8013f02:	e7c6      	b.n	8013e92 <_printf_common+0x3e>
 8013f04:	18e1      	adds	r1, r4, r3
 8013f06:	1c5a      	adds	r2, r3, #1
 8013f08:	2030      	movs	r0, #48	@ 0x30
 8013f0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013f0e:	4422      	add	r2, r4
 8013f10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013f18:	3302      	adds	r3, #2
 8013f1a:	e7c7      	b.n	8013eac <_printf_common+0x58>
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	4622      	mov	r2, r4
 8013f20:	4641      	mov	r1, r8
 8013f22:	4638      	mov	r0, r7
 8013f24:	47c8      	blx	r9
 8013f26:	3001      	adds	r0, #1
 8013f28:	d0e6      	beq.n	8013ef8 <_printf_common+0xa4>
 8013f2a:	3601      	adds	r6, #1
 8013f2c:	e7d9      	b.n	8013ee2 <_printf_common+0x8e>
	...

08013f30 <_printf_i>:
 8013f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f34:	7e0f      	ldrb	r7, [r1, #24]
 8013f36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013f38:	2f78      	cmp	r7, #120	@ 0x78
 8013f3a:	4691      	mov	r9, r2
 8013f3c:	4680      	mov	r8, r0
 8013f3e:	460c      	mov	r4, r1
 8013f40:	469a      	mov	sl, r3
 8013f42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013f46:	d807      	bhi.n	8013f58 <_printf_i+0x28>
 8013f48:	2f62      	cmp	r7, #98	@ 0x62
 8013f4a:	d80a      	bhi.n	8013f62 <_printf_i+0x32>
 8013f4c:	2f00      	cmp	r7, #0
 8013f4e:	f000 80d2 	beq.w	80140f6 <_printf_i+0x1c6>
 8013f52:	2f58      	cmp	r7, #88	@ 0x58
 8013f54:	f000 80b9 	beq.w	80140ca <_printf_i+0x19a>
 8013f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013f60:	e03a      	b.n	8013fd8 <_printf_i+0xa8>
 8013f62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013f66:	2b15      	cmp	r3, #21
 8013f68:	d8f6      	bhi.n	8013f58 <_printf_i+0x28>
 8013f6a:	a101      	add	r1, pc, #4	@ (adr r1, 8013f70 <_printf_i+0x40>)
 8013f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f70:	08013fc9 	.word	0x08013fc9
 8013f74:	08013fdd 	.word	0x08013fdd
 8013f78:	08013f59 	.word	0x08013f59
 8013f7c:	08013f59 	.word	0x08013f59
 8013f80:	08013f59 	.word	0x08013f59
 8013f84:	08013f59 	.word	0x08013f59
 8013f88:	08013fdd 	.word	0x08013fdd
 8013f8c:	08013f59 	.word	0x08013f59
 8013f90:	08013f59 	.word	0x08013f59
 8013f94:	08013f59 	.word	0x08013f59
 8013f98:	08013f59 	.word	0x08013f59
 8013f9c:	080140dd 	.word	0x080140dd
 8013fa0:	08014007 	.word	0x08014007
 8013fa4:	08014097 	.word	0x08014097
 8013fa8:	08013f59 	.word	0x08013f59
 8013fac:	08013f59 	.word	0x08013f59
 8013fb0:	080140ff 	.word	0x080140ff
 8013fb4:	08013f59 	.word	0x08013f59
 8013fb8:	08014007 	.word	0x08014007
 8013fbc:	08013f59 	.word	0x08013f59
 8013fc0:	08013f59 	.word	0x08013f59
 8013fc4:	0801409f 	.word	0x0801409f
 8013fc8:	6833      	ldr	r3, [r6, #0]
 8013fca:	1d1a      	adds	r2, r3, #4
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	6032      	str	r2, [r6, #0]
 8013fd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013fd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013fd8:	2301      	movs	r3, #1
 8013fda:	e09d      	b.n	8014118 <_printf_i+0x1e8>
 8013fdc:	6833      	ldr	r3, [r6, #0]
 8013fde:	6820      	ldr	r0, [r4, #0]
 8013fe0:	1d19      	adds	r1, r3, #4
 8013fe2:	6031      	str	r1, [r6, #0]
 8013fe4:	0606      	lsls	r6, r0, #24
 8013fe6:	d501      	bpl.n	8013fec <_printf_i+0xbc>
 8013fe8:	681d      	ldr	r5, [r3, #0]
 8013fea:	e003      	b.n	8013ff4 <_printf_i+0xc4>
 8013fec:	0645      	lsls	r5, r0, #25
 8013fee:	d5fb      	bpl.n	8013fe8 <_printf_i+0xb8>
 8013ff0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013ff4:	2d00      	cmp	r5, #0
 8013ff6:	da03      	bge.n	8014000 <_printf_i+0xd0>
 8013ff8:	232d      	movs	r3, #45	@ 0x2d
 8013ffa:	426d      	negs	r5, r5
 8013ffc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014000:	4859      	ldr	r0, [pc, #356]	@ (8014168 <_printf_i+0x238>)
 8014002:	230a      	movs	r3, #10
 8014004:	e011      	b.n	801402a <_printf_i+0xfa>
 8014006:	6821      	ldr	r1, [r4, #0]
 8014008:	6833      	ldr	r3, [r6, #0]
 801400a:	0608      	lsls	r0, r1, #24
 801400c:	f853 5b04 	ldr.w	r5, [r3], #4
 8014010:	d402      	bmi.n	8014018 <_printf_i+0xe8>
 8014012:	0649      	lsls	r1, r1, #25
 8014014:	bf48      	it	mi
 8014016:	b2ad      	uxthmi	r5, r5
 8014018:	2f6f      	cmp	r7, #111	@ 0x6f
 801401a:	4853      	ldr	r0, [pc, #332]	@ (8014168 <_printf_i+0x238>)
 801401c:	6033      	str	r3, [r6, #0]
 801401e:	bf14      	ite	ne
 8014020:	230a      	movne	r3, #10
 8014022:	2308      	moveq	r3, #8
 8014024:	2100      	movs	r1, #0
 8014026:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801402a:	6866      	ldr	r6, [r4, #4]
 801402c:	60a6      	str	r6, [r4, #8]
 801402e:	2e00      	cmp	r6, #0
 8014030:	bfa2      	ittt	ge
 8014032:	6821      	ldrge	r1, [r4, #0]
 8014034:	f021 0104 	bicge.w	r1, r1, #4
 8014038:	6021      	strge	r1, [r4, #0]
 801403a:	b90d      	cbnz	r5, 8014040 <_printf_i+0x110>
 801403c:	2e00      	cmp	r6, #0
 801403e:	d04b      	beq.n	80140d8 <_printf_i+0x1a8>
 8014040:	4616      	mov	r6, r2
 8014042:	fbb5 f1f3 	udiv	r1, r5, r3
 8014046:	fb03 5711 	mls	r7, r3, r1, r5
 801404a:	5dc7      	ldrb	r7, [r0, r7]
 801404c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014050:	462f      	mov	r7, r5
 8014052:	42bb      	cmp	r3, r7
 8014054:	460d      	mov	r5, r1
 8014056:	d9f4      	bls.n	8014042 <_printf_i+0x112>
 8014058:	2b08      	cmp	r3, #8
 801405a:	d10b      	bne.n	8014074 <_printf_i+0x144>
 801405c:	6823      	ldr	r3, [r4, #0]
 801405e:	07df      	lsls	r7, r3, #31
 8014060:	d508      	bpl.n	8014074 <_printf_i+0x144>
 8014062:	6923      	ldr	r3, [r4, #16]
 8014064:	6861      	ldr	r1, [r4, #4]
 8014066:	4299      	cmp	r1, r3
 8014068:	bfde      	ittt	le
 801406a:	2330      	movle	r3, #48	@ 0x30
 801406c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014070:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014074:	1b92      	subs	r2, r2, r6
 8014076:	6122      	str	r2, [r4, #16]
 8014078:	f8cd a000 	str.w	sl, [sp]
 801407c:	464b      	mov	r3, r9
 801407e:	aa03      	add	r2, sp, #12
 8014080:	4621      	mov	r1, r4
 8014082:	4640      	mov	r0, r8
 8014084:	f7ff fee6 	bl	8013e54 <_printf_common>
 8014088:	3001      	adds	r0, #1
 801408a:	d14a      	bne.n	8014122 <_printf_i+0x1f2>
 801408c:	f04f 30ff 	mov.w	r0, #4294967295
 8014090:	b004      	add	sp, #16
 8014092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014096:	6823      	ldr	r3, [r4, #0]
 8014098:	f043 0320 	orr.w	r3, r3, #32
 801409c:	6023      	str	r3, [r4, #0]
 801409e:	4833      	ldr	r0, [pc, #204]	@ (801416c <_printf_i+0x23c>)
 80140a0:	2778      	movs	r7, #120	@ 0x78
 80140a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80140a6:	6823      	ldr	r3, [r4, #0]
 80140a8:	6831      	ldr	r1, [r6, #0]
 80140aa:	061f      	lsls	r7, r3, #24
 80140ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80140b0:	d402      	bmi.n	80140b8 <_printf_i+0x188>
 80140b2:	065f      	lsls	r7, r3, #25
 80140b4:	bf48      	it	mi
 80140b6:	b2ad      	uxthmi	r5, r5
 80140b8:	6031      	str	r1, [r6, #0]
 80140ba:	07d9      	lsls	r1, r3, #31
 80140bc:	bf44      	itt	mi
 80140be:	f043 0320 	orrmi.w	r3, r3, #32
 80140c2:	6023      	strmi	r3, [r4, #0]
 80140c4:	b11d      	cbz	r5, 80140ce <_printf_i+0x19e>
 80140c6:	2310      	movs	r3, #16
 80140c8:	e7ac      	b.n	8014024 <_printf_i+0xf4>
 80140ca:	4827      	ldr	r0, [pc, #156]	@ (8014168 <_printf_i+0x238>)
 80140cc:	e7e9      	b.n	80140a2 <_printf_i+0x172>
 80140ce:	6823      	ldr	r3, [r4, #0]
 80140d0:	f023 0320 	bic.w	r3, r3, #32
 80140d4:	6023      	str	r3, [r4, #0]
 80140d6:	e7f6      	b.n	80140c6 <_printf_i+0x196>
 80140d8:	4616      	mov	r6, r2
 80140da:	e7bd      	b.n	8014058 <_printf_i+0x128>
 80140dc:	6833      	ldr	r3, [r6, #0]
 80140de:	6825      	ldr	r5, [r4, #0]
 80140e0:	6961      	ldr	r1, [r4, #20]
 80140e2:	1d18      	adds	r0, r3, #4
 80140e4:	6030      	str	r0, [r6, #0]
 80140e6:	062e      	lsls	r6, r5, #24
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	d501      	bpl.n	80140f0 <_printf_i+0x1c0>
 80140ec:	6019      	str	r1, [r3, #0]
 80140ee:	e002      	b.n	80140f6 <_printf_i+0x1c6>
 80140f0:	0668      	lsls	r0, r5, #25
 80140f2:	d5fb      	bpl.n	80140ec <_printf_i+0x1bc>
 80140f4:	8019      	strh	r1, [r3, #0]
 80140f6:	2300      	movs	r3, #0
 80140f8:	6123      	str	r3, [r4, #16]
 80140fa:	4616      	mov	r6, r2
 80140fc:	e7bc      	b.n	8014078 <_printf_i+0x148>
 80140fe:	6833      	ldr	r3, [r6, #0]
 8014100:	1d1a      	adds	r2, r3, #4
 8014102:	6032      	str	r2, [r6, #0]
 8014104:	681e      	ldr	r6, [r3, #0]
 8014106:	6862      	ldr	r2, [r4, #4]
 8014108:	2100      	movs	r1, #0
 801410a:	4630      	mov	r0, r6
 801410c:	f7ec f8e0 	bl	80002d0 <memchr>
 8014110:	b108      	cbz	r0, 8014116 <_printf_i+0x1e6>
 8014112:	1b80      	subs	r0, r0, r6
 8014114:	6060      	str	r0, [r4, #4]
 8014116:	6863      	ldr	r3, [r4, #4]
 8014118:	6123      	str	r3, [r4, #16]
 801411a:	2300      	movs	r3, #0
 801411c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014120:	e7aa      	b.n	8014078 <_printf_i+0x148>
 8014122:	6923      	ldr	r3, [r4, #16]
 8014124:	4632      	mov	r2, r6
 8014126:	4649      	mov	r1, r9
 8014128:	4640      	mov	r0, r8
 801412a:	47d0      	blx	sl
 801412c:	3001      	adds	r0, #1
 801412e:	d0ad      	beq.n	801408c <_printf_i+0x15c>
 8014130:	6823      	ldr	r3, [r4, #0]
 8014132:	079b      	lsls	r3, r3, #30
 8014134:	d413      	bmi.n	801415e <_printf_i+0x22e>
 8014136:	68e0      	ldr	r0, [r4, #12]
 8014138:	9b03      	ldr	r3, [sp, #12]
 801413a:	4298      	cmp	r0, r3
 801413c:	bfb8      	it	lt
 801413e:	4618      	movlt	r0, r3
 8014140:	e7a6      	b.n	8014090 <_printf_i+0x160>
 8014142:	2301      	movs	r3, #1
 8014144:	4632      	mov	r2, r6
 8014146:	4649      	mov	r1, r9
 8014148:	4640      	mov	r0, r8
 801414a:	47d0      	blx	sl
 801414c:	3001      	adds	r0, #1
 801414e:	d09d      	beq.n	801408c <_printf_i+0x15c>
 8014150:	3501      	adds	r5, #1
 8014152:	68e3      	ldr	r3, [r4, #12]
 8014154:	9903      	ldr	r1, [sp, #12]
 8014156:	1a5b      	subs	r3, r3, r1
 8014158:	42ab      	cmp	r3, r5
 801415a:	dcf2      	bgt.n	8014142 <_printf_i+0x212>
 801415c:	e7eb      	b.n	8014136 <_printf_i+0x206>
 801415e:	2500      	movs	r5, #0
 8014160:	f104 0619 	add.w	r6, r4, #25
 8014164:	e7f5      	b.n	8014152 <_printf_i+0x222>
 8014166:	bf00      	nop
 8014168:	0802c8fa 	.word	0x0802c8fa
 801416c:	0802c90b 	.word	0x0802c90b

08014170 <__sflush_r>:
 8014170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014178:	0716      	lsls	r6, r2, #28
 801417a:	4605      	mov	r5, r0
 801417c:	460c      	mov	r4, r1
 801417e:	d454      	bmi.n	801422a <__sflush_r+0xba>
 8014180:	684b      	ldr	r3, [r1, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	dc02      	bgt.n	801418c <__sflush_r+0x1c>
 8014186:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014188:	2b00      	cmp	r3, #0
 801418a:	dd48      	ble.n	801421e <__sflush_r+0xae>
 801418c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801418e:	2e00      	cmp	r6, #0
 8014190:	d045      	beq.n	801421e <__sflush_r+0xae>
 8014192:	2300      	movs	r3, #0
 8014194:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014198:	682f      	ldr	r7, [r5, #0]
 801419a:	6a21      	ldr	r1, [r4, #32]
 801419c:	602b      	str	r3, [r5, #0]
 801419e:	d030      	beq.n	8014202 <__sflush_r+0x92>
 80141a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80141a2:	89a3      	ldrh	r3, [r4, #12]
 80141a4:	0759      	lsls	r1, r3, #29
 80141a6:	d505      	bpl.n	80141b4 <__sflush_r+0x44>
 80141a8:	6863      	ldr	r3, [r4, #4]
 80141aa:	1ad2      	subs	r2, r2, r3
 80141ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80141ae:	b10b      	cbz	r3, 80141b4 <__sflush_r+0x44>
 80141b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80141b2:	1ad2      	subs	r2, r2, r3
 80141b4:	2300      	movs	r3, #0
 80141b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80141b8:	6a21      	ldr	r1, [r4, #32]
 80141ba:	4628      	mov	r0, r5
 80141bc:	47b0      	blx	r6
 80141be:	1c43      	adds	r3, r0, #1
 80141c0:	89a3      	ldrh	r3, [r4, #12]
 80141c2:	d106      	bne.n	80141d2 <__sflush_r+0x62>
 80141c4:	6829      	ldr	r1, [r5, #0]
 80141c6:	291d      	cmp	r1, #29
 80141c8:	d82b      	bhi.n	8014222 <__sflush_r+0xb2>
 80141ca:	4a2a      	ldr	r2, [pc, #168]	@ (8014274 <__sflush_r+0x104>)
 80141cc:	410a      	asrs	r2, r1
 80141ce:	07d6      	lsls	r6, r2, #31
 80141d0:	d427      	bmi.n	8014222 <__sflush_r+0xb2>
 80141d2:	2200      	movs	r2, #0
 80141d4:	6062      	str	r2, [r4, #4]
 80141d6:	04d9      	lsls	r1, r3, #19
 80141d8:	6922      	ldr	r2, [r4, #16]
 80141da:	6022      	str	r2, [r4, #0]
 80141dc:	d504      	bpl.n	80141e8 <__sflush_r+0x78>
 80141de:	1c42      	adds	r2, r0, #1
 80141e0:	d101      	bne.n	80141e6 <__sflush_r+0x76>
 80141e2:	682b      	ldr	r3, [r5, #0]
 80141e4:	b903      	cbnz	r3, 80141e8 <__sflush_r+0x78>
 80141e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80141e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80141ea:	602f      	str	r7, [r5, #0]
 80141ec:	b1b9      	cbz	r1, 801421e <__sflush_r+0xae>
 80141ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80141f2:	4299      	cmp	r1, r3
 80141f4:	d002      	beq.n	80141fc <__sflush_r+0x8c>
 80141f6:	4628      	mov	r0, r5
 80141f8:	f7ff fbd4 	bl	80139a4 <_free_r>
 80141fc:	2300      	movs	r3, #0
 80141fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8014200:	e00d      	b.n	801421e <__sflush_r+0xae>
 8014202:	2301      	movs	r3, #1
 8014204:	4628      	mov	r0, r5
 8014206:	47b0      	blx	r6
 8014208:	4602      	mov	r2, r0
 801420a:	1c50      	adds	r0, r2, #1
 801420c:	d1c9      	bne.n	80141a2 <__sflush_r+0x32>
 801420e:	682b      	ldr	r3, [r5, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d0c6      	beq.n	80141a2 <__sflush_r+0x32>
 8014214:	2b1d      	cmp	r3, #29
 8014216:	d001      	beq.n	801421c <__sflush_r+0xac>
 8014218:	2b16      	cmp	r3, #22
 801421a:	d11e      	bne.n	801425a <__sflush_r+0xea>
 801421c:	602f      	str	r7, [r5, #0]
 801421e:	2000      	movs	r0, #0
 8014220:	e022      	b.n	8014268 <__sflush_r+0xf8>
 8014222:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014226:	b21b      	sxth	r3, r3
 8014228:	e01b      	b.n	8014262 <__sflush_r+0xf2>
 801422a:	690f      	ldr	r7, [r1, #16]
 801422c:	2f00      	cmp	r7, #0
 801422e:	d0f6      	beq.n	801421e <__sflush_r+0xae>
 8014230:	0793      	lsls	r3, r2, #30
 8014232:	680e      	ldr	r6, [r1, #0]
 8014234:	bf08      	it	eq
 8014236:	694b      	ldreq	r3, [r1, #20]
 8014238:	600f      	str	r7, [r1, #0]
 801423a:	bf18      	it	ne
 801423c:	2300      	movne	r3, #0
 801423e:	eba6 0807 	sub.w	r8, r6, r7
 8014242:	608b      	str	r3, [r1, #8]
 8014244:	f1b8 0f00 	cmp.w	r8, #0
 8014248:	dde9      	ble.n	801421e <__sflush_r+0xae>
 801424a:	6a21      	ldr	r1, [r4, #32]
 801424c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801424e:	4643      	mov	r3, r8
 8014250:	463a      	mov	r2, r7
 8014252:	4628      	mov	r0, r5
 8014254:	47b0      	blx	r6
 8014256:	2800      	cmp	r0, #0
 8014258:	dc08      	bgt.n	801426c <__sflush_r+0xfc>
 801425a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801425e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014262:	81a3      	strh	r3, [r4, #12]
 8014264:	f04f 30ff 	mov.w	r0, #4294967295
 8014268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801426c:	4407      	add	r7, r0
 801426e:	eba8 0800 	sub.w	r8, r8, r0
 8014272:	e7e7      	b.n	8014244 <__sflush_r+0xd4>
 8014274:	dfbffffe 	.word	0xdfbffffe

08014278 <_fflush_r>:
 8014278:	b538      	push	{r3, r4, r5, lr}
 801427a:	690b      	ldr	r3, [r1, #16]
 801427c:	4605      	mov	r5, r0
 801427e:	460c      	mov	r4, r1
 8014280:	b913      	cbnz	r3, 8014288 <_fflush_r+0x10>
 8014282:	2500      	movs	r5, #0
 8014284:	4628      	mov	r0, r5
 8014286:	bd38      	pop	{r3, r4, r5, pc}
 8014288:	b118      	cbz	r0, 8014292 <_fflush_r+0x1a>
 801428a:	6a03      	ldr	r3, [r0, #32]
 801428c:	b90b      	cbnz	r3, 8014292 <_fflush_r+0x1a>
 801428e:	f7ff f99b 	bl	80135c8 <__sinit>
 8014292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d0f3      	beq.n	8014282 <_fflush_r+0xa>
 801429a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801429c:	07d0      	lsls	r0, r2, #31
 801429e:	d404      	bmi.n	80142aa <_fflush_r+0x32>
 80142a0:	0599      	lsls	r1, r3, #22
 80142a2:	d402      	bmi.n	80142aa <_fflush_r+0x32>
 80142a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142a6:	f7ff fb4e 	bl	8013946 <__retarget_lock_acquire_recursive>
 80142aa:	4628      	mov	r0, r5
 80142ac:	4621      	mov	r1, r4
 80142ae:	f7ff ff5f 	bl	8014170 <__sflush_r>
 80142b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80142b4:	07da      	lsls	r2, r3, #31
 80142b6:	4605      	mov	r5, r0
 80142b8:	d4e4      	bmi.n	8014284 <_fflush_r+0xc>
 80142ba:	89a3      	ldrh	r3, [r4, #12]
 80142bc:	059b      	lsls	r3, r3, #22
 80142be:	d4e1      	bmi.n	8014284 <_fflush_r+0xc>
 80142c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142c2:	f7ff fb41 	bl	8013948 <__retarget_lock_release_recursive>
 80142c6:	e7dd      	b.n	8014284 <_fflush_r+0xc>

080142c8 <fiprintf>:
 80142c8:	b40e      	push	{r1, r2, r3}
 80142ca:	b503      	push	{r0, r1, lr}
 80142cc:	4601      	mov	r1, r0
 80142ce:	ab03      	add	r3, sp, #12
 80142d0:	4805      	ldr	r0, [pc, #20]	@ (80142e8 <fiprintf+0x20>)
 80142d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80142d6:	6800      	ldr	r0, [r0, #0]
 80142d8:	9301      	str	r3, [sp, #4]
 80142da:	f000 f875 	bl	80143c8 <_vfiprintf_r>
 80142de:	b002      	add	sp, #8
 80142e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80142e4:	b003      	add	sp, #12
 80142e6:	4770      	bx	lr
 80142e8:	20000040 	.word	0x20000040

080142ec <_sbrk_r>:
 80142ec:	b538      	push	{r3, r4, r5, lr}
 80142ee:	4d06      	ldr	r5, [pc, #24]	@ (8014308 <_sbrk_r+0x1c>)
 80142f0:	2300      	movs	r3, #0
 80142f2:	4604      	mov	r4, r0
 80142f4:	4608      	mov	r0, r1
 80142f6:	602b      	str	r3, [r5, #0]
 80142f8:	f7ee f99c 	bl	8002634 <_sbrk>
 80142fc:	1c43      	adds	r3, r0, #1
 80142fe:	d102      	bne.n	8014306 <_sbrk_r+0x1a>
 8014300:	682b      	ldr	r3, [r5, #0]
 8014302:	b103      	cbz	r3, 8014306 <_sbrk_r+0x1a>
 8014304:	6023      	str	r3, [r4, #0]
 8014306:	bd38      	pop	{r3, r4, r5, pc}
 8014308:	2001054c 	.word	0x2001054c

0801430c <abort>:
 801430c:	b508      	push	{r3, lr}
 801430e:	2006      	movs	r0, #6
 8014310:	f000 fa2e 	bl	8014770 <raise>
 8014314:	2001      	movs	r0, #1
 8014316:	f7ee f915 	bl	8002544 <_exit>

0801431a <_realloc_r>:
 801431a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801431e:	4680      	mov	r8, r0
 8014320:	4615      	mov	r5, r2
 8014322:	460c      	mov	r4, r1
 8014324:	b921      	cbnz	r1, 8014330 <_realloc_r+0x16>
 8014326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801432a:	4611      	mov	r1, r2
 801432c:	f7ff bbae 	b.w	8013a8c <_malloc_r>
 8014330:	b92a      	cbnz	r2, 801433e <_realloc_r+0x24>
 8014332:	f7ff fb37 	bl	80139a4 <_free_r>
 8014336:	2400      	movs	r4, #0
 8014338:	4620      	mov	r0, r4
 801433a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801433e:	f000 fa33 	bl	80147a8 <_malloc_usable_size_r>
 8014342:	4285      	cmp	r5, r0
 8014344:	4606      	mov	r6, r0
 8014346:	d802      	bhi.n	801434e <_realloc_r+0x34>
 8014348:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801434c:	d8f4      	bhi.n	8014338 <_realloc_r+0x1e>
 801434e:	4629      	mov	r1, r5
 8014350:	4640      	mov	r0, r8
 8014352:	f7ff fb9b 	bl	8013a8c <_malloc_r>
 8014356:	4607      	mov	r7, r0
 8014358:	2800      	cmp	r0, #0
 801435a:	d0ec      	beq.n	8014336 <_realloc_r+0x1c>
 801435c:	42b5      	cmp	r5, r6
 801435e:	462a      	mov	r2, r5
 8014360:	4621      	mov	r1, r4
 8014362:	bf28      	it	cs
 8014364:	4632      	movcs	r2, r6
 8014366:	f7ff faf0 	bl	801394a <memcpy>
 801436a:	4621      	mov	r1, r4
 801436c:	4640      	mov	r0, r8
 801436e:	f7ff fb19 	bl	80139a4 <_free_r>
 8014372:	463c      	mov	r4, r7
 8014374:	e7e0      	b.n	8014338 <_realloc_r+0x1e>

08014376 <__sfputc_r>:
 8014376:	6893      	ldr	r3, [r2, #8]
 8014378:	3b01      	subs	r3, #1
 801437a:	2b00      	cmp	r3, #0
 801437c:	b410      	push	{r4}
 801437e:	6093      	str	r3, [r2, #8]
 8014380:	da08      	bge.n	8014394 <__sfputc_r+0x1e>
 8014382:	6994      	ldr	r4, [r2, #24]
 8014384:	42a3      	cmp	r3, r4
 8014386:	db01      	blt.n	801438c <__sfputc_r+0x16>
 8014388:	290a      	cmp	r1, #10
 801438a:	d103      	bne.n	8014394 <__sfputc_r+0x1e>
 801438c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014390:	f000 b932 	b.w	80145f8 <__swbuf_r>
 8014394:	6813      	ldr	r3, [r2, #0]
 8014396:	1c58      	adds	r0, r3, #1
 8014398:	6010      	str	r0, [r2, #0]
 801439a:	7019      	strb	r1, [r3, #0]
 801439c:	4608      	mov	r0, r1
 801439e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80143a2:	4770      	bx	lr

080143a4 <__sfputs_r>:
 80143a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a6:	4606      	mov	r6, r0
 80143a8:	460f      	mov	r7, r1
 80143aa:	4614      	mov	r4, r2
 80143ac:	18d5      	adds	r5, r2, r3
 80143ae:	42ac      	cmp	r4, r5
 80143b0:	d101      	bne.n	80143b6 <__sfputs_r+0x12>
 80143b2:	2000      	movs	r0, #0
 80143b4:	e007      	b.n	80143c6 <__sfputs_r+0x22>
 80143b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ba:	463a      	mov	r2, r7
 80143bc:	4630      	mov	r0, r6
 80143be:	f7ff ffda 	bl	8014376 <__sfputc_r>
 80143c2:	1c43      	adds	r3, r0, #1
 80143c4:	d1f3      	bne.n	80143ae <__sfputs_r+0xa>
 80143c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080143c8 <_vfiprintf_r>:
 80143c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143cc:	460d      	mov	r5, r1
 80143ce:	b09d      	sub	sp, #116	@ 0x74
 80143d0:	4614      	mov	r4, r2
 80143d2:	4698      	mov	r8, r3
 80143d4:	4606      	mov	r6, r0
 80143d6:	b118      	cbz	r0, 80143e0 <_vfiprintf_r+0x18>
 80143d8:	6a03      	ldr	r3, [r0, #32]
 80143da:	b90b      	cbnz	r3, 80143e0 <_vfiprintf_r+0x18>
 80143dc:	f7ff f8f4 	bl	80135c8 <__sinit>
 80143e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80143e2:	07d9      	lsls	r1, r3, #31
 80143e4:	d405      	bmi.n	80143f2 <_vfiprintf_r+0x2a>
 80143e6:	89ab      	ldrh	r3, [r5, #12]
 80143e8:	059a      	lsls	r2, r3, #22
 80143ea:	d402      	bmi.n	80143f2 <_vfiprintf_r+0x2a>
 80143ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80143ee:	f7ff faaa 	bl	8013946 <__retarget_lock_acquire_recursive>
 80143f2:	89ab      	ldrh	r3, [r5, #12]
 80143f4:	071b      	lsls	r3, r3, #28
 80143f6:	d501      	bpl.n	80143fc <_vfiprintf_r+0x34>
 80143f8:	692b      	ldr	r3, [r5, #16]
 80143fa:	b99b      	cbnz	r3, 8014424 <_vfiprintf_r+0x5c>
 80143fc:	4629      	mov	r1, r5
 80143fe:	4630      	mov	r0, r6
 8014400:	f000 f938 	bl	8014674 <__swsetup_r>
 8014404:	b170      	cbz	r0, 8014424 <_vfiprintf_r+0x5c>
 8014406:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014408:	07dc      	lsls	r4, r3, #31
 801440a:	d504      	bpl.n	8014416 <_vfiprintf_r+0x4e>
 801440c:	f04f 30ff 	mov.w	r0, #4294967295
 8014410:	b01d      	add	sp, #116	@ 0x74
 8014412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014416:	89ab      	ldrh	r3, [r5, #12]
 8014418:	0598      	lsls	r0, r3, #22
 801441a:	d4f7      	bmi.n	801440c <_vfiprintf_r+0x44>
 801441c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801441e:	f7ff fa93 	bl	8013948 <__retarget_lock_release_recursive>
 8014422:	e7f3      	b.n	801440c <_vfiprintf_r+0x44>
 8014424:	2300      	movs	r3, #0
 8014426:	9309      	str	r3, [sp, #36]	@ 0x24
 8014428:	2320      	movs	r3, #32
 801442a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801442e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014432:	2330      	movs	r3, #48	@ 0x30
 8014434:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80145e4 <_vfiprintf_r+0x21c>
 8014438:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801443c:	f04f 0901 	mov.w	r9, #1
 8014440:	4623      	mov	r3, r4
 8014442:	469a      	mov	sl, r3
 8014444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014448:	b10a      	cbz	r2, 801444e <_vfiprintf_r+0x86>
 801444a:	2a25      	cmp	r2, #37	@ 0x25
 801444c:	d1f9      	bne.n	8014442 <_vfiprintf_r+0x7a>
 801444e:	ebba 0b04 	subs.w	fp, sl, r4
 8014452:	d00b      	beq.n	801446c <_vfiprintf_r+0xa4>
 8014454:	465b      	mov	r3, fp
 8014456:	4622      	mov	r2, r4
 8014458:	4629      	mov	r1, r5
 801445a:	4630      	mov	r0, r6
 801445c:	f7ff ffa2 	bl	80143a4 <__sfputs_r>
 8014460:	3001      	adds	r0, #1
 8014462:	f000 80a7 	beq.w	80145b4 <_vfiprintf_r+0x1ec>
 8014466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014468:	445a      	add	r2, fp
 801446a:	9209      	str	r2, [sp, #36]	@ 0x24
 801446c:	f89a 3000 	ldrb.w	r3, [sl]
 8014470:	2b00      	cmp	r3, #0
 8014472:	f000 809f 	beq.w	80145b4 <_vfiprintf_r+0x1ec>
 8014476:	2300      	movs	r3, #0
 8014478:	f04f 32ff 	mov.w	r2, #4294967295
 801447c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014480:	f10a 0a01 	add.w	sl, sl, #1
 8014484:	9304      	str	r3, [sp, #16]
 8014486:	9307      	str	r3, [sp, #28]
 8014488:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801448c:	931a      	str	r3, [sp, #104]	@ 0x68
 801448e:	4654      	mov	r4, sl
 8014490:	2205      	movs	r2, #5
 8014492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014496:	4853      	ldr	r0, [pc, #332]	@ (80145e4 <_vfiprintf_r+0x21c>)
 8014498:	f7eb ff1a 	bl	80002d0 <memchr>
 801449c:	9a04      	ldr	r2, [sp, #16]
 801449e:	b9d8      	cbnz	r0, 80144d8 <_vfiprintf_r+0x110>
 80144a0:	06d1      	lsls	r1, r2, #27
 80144a2:	bf44      	itt	mi
 80144a4:	2320      	movmi	r3, #32
 80144a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144aa:	0713      	lsls	r3, r2, #28
 80144ac:	bf44      	itt	mi
 80144ae:	232b      	movmi	r3, #43	@ 0x2b
 80144b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144b4:	f89a 3000 	ldrb.w	r3, [sl]
 80144b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80144ba:	d015      	beq.n	80144e8 <_vfiprintf_r+0x120>
 80144bc:	9a07      	ldr	r2, [sp, #28]
 80144be:	4654      	mov	r4, sl
 80144c0:	2000      	movs	r0, #0
 80144c2:	f04f 0c0a 	mov.w	ip, #10
 80144c6:	4621      	mov	r1, r4
 80144c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144cc:	3b30      	subs	r3, #48	@ 0x30
 80144ce:	2b09      	cmp	r3, #9
 80144d0:	d94b      	bls.n	801456a <_vfiprintf_r+0x1a2>
 80144d2:	b1b0      	cbz	r0, 8014502 <_vfiprintf_r+0x13a>
 80144d4:	9207      	str	r2, [sp, #28]
 80144d6:	e014      	b.n	8014502 <_vfiprintf_r+0x13a>
 80144d8:	eba0 0308 	sub.w	r3, r0, r8
 80144dc:	fa09 f303 	lsl.w	r3, r9, r3
 80144e0:	4313      	orrs	r3, r2
 80144e2:	9304      	str	r3, [sp, #16]
 80144e4:	46a2      	mov	sl, r4
 80144e6:	e7d2      	b.n	801448e <_vfiprintf_r+0xc6>
 80144e8:	9b03      	ldr	r3, [sp, #12]
 80144ea:	1d19      	adds	r1, r3, #4
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	9103      	str	r1, [sp, #12]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	bfbb      	ittet	lt
 80144f4:	425b      	neglt	r3, r3
 80144f6:	f042 0202 	orrlt.w	r2, r2, #2
 80144fa:	9307      	strge	r3, [sp, #28]
 80144fc:	9307      	strlt	r3, [sp, #28]
 80144fe:	bfb8      	it	lt
 8014500:	9204      	strlt	r2, [sp, #16]
 8014502:	7823      	ldrb	r3, [r4, #0]
 8014504:	2b2e      	cmp	r3, #46	@ 0x2e
 8014506:	d10a      	bne.n	801451e <_vfiprintf_r+0x156>
 8014508:	7863      	ldrb	r3, [r4, #1]
 801450a:	2b2a      	cmp	r3, #42	@ 0x2a
 801450c:	d132      	bne.n	8014574 <_vfiprintf_r+0x1ac>
 801450e:	9b03      	ldr	r3, [sp, #12]
 8014510:	1d1a      	adds	r2, r3, #4
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	9203      	str	r2, [sp, #12]
 8014516:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801451a:	3402      	adds	r4, #2
 801451c:	9305      	str	r3, [sp, #20]
 801451e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80145f4 <_vfiprintf_r+0x22c>
 8014522:	7821      	ldrb	r1, [r4, #0]
 8014524:	2203      	movs	r2, #3
 8014526:	4650      	mov	r0, sl
 8014528:	f7eb fed2 	bl	80002d0 <memchr>
 801452c:	b138      	cbz	r0, 801453e <_vfiprintf_r+0x176>
 801452e:	9b04      	ldr	r3, [sp, #16]
 8014530:	eba0 000a 	sub.w	r0, r0, sl
 8014534:	2240      	movs	r2, #64	@ 0x40
 8014536:	4082      	lsls	r2, r0
 8014538:	4313      	orrs	r3, r2
 801453a:	3401      	adds	r4, #1
 801453c:	9304      	str	r3, [sp, #16]
 801453e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014542:	4829      	ldr	r0, [pc, #164]	@ (80145e8 <_vfiprintf_r+0x220>)
 8014544:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014548:	2206      	movs	r2, #6
 801454a:	f7eb fec1 	bl	80002d0 <memchr>
 801454e:	2800      	cmp	r0, #0
 8014550:	d03f      	beq.n	80145d2 <_vfiprintf_r+0x20a>
 8014552:	4b26      	ldr	r3, [pc, #152]	@ (80145ec <_vfiprintf_r+0x224>)
 8014554:	bb1b      	cbnz	r3, 801459e <_vfiprintf_r+0x1d6>
 8014556:	9b03      	ldr	r3, [sp, #12]
 8014558:	3307      	adds	r3, #7
 801455a:	f023 0307 	bic.w	r3, r3, #7
 801455e:	3308      	adds	r3, #8
 8014560:	9303      	str	r3, [sp, #12]
 8014562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014564:	443b      	add	r3, r7
 8014566:	9309      	str	r3, [sp, #36]	@ 0x24
 8014568:	e76a      	b.n	8014440 <_vfiprintf_r+0x78>
 801456a:	fb0c 3202 	mla	r2, ip, r2, r3
 801456e:	460c      	mov	r4, r1
 8014570:	2001      	movs	r0, #1
 8014572:	e7a8      	b.n	80144c6 <_vfiprintf_r+0xfe>
 8014574:	2300      	movs	r3, #0
 8014576:	3401      	adds	r4, #1
 8014578:	9305      	str	r3, [sp, #20]
 801457a:	4619      	mov	r1, r3
 801457c:	f04f 0c0a 	mov.w	ip, #10
 8014580:	4620      	mov	r0, r4
 8014582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014586:	3a30      	subs	r2, #48	@ 0x30
 8014588:	2a09      	cmp	r2, #9
 801458a:	d903      	bls.n	8014594 <_vfiprintf_r+0x1cc>
 801458c:	2b00      	cmp	r3, #0
 801458e:	d0c6      	beq.n	801451e <_vfiprintf_r+0x156>
 8014590:	9105      	str	r1, [sp, #20]
 8014592:	e7c4      	b.n	801451e <_vfiprintf_r+0x156>
 8014594:	fb0c 2101 	mla	r1, ip, r1, r2
 8014598:	4604      	mov	r4, r0
 801459a:	2301      	movs	r3, #1
 801459c:	e7f0      	b.n	8014580 <_vfiprintf_r+0x1b8>
 801459e:	ab03      	add	r3, sp, #12
 80145a0:	9300      	str	r3, [sp, #0]
 80145a2:	462a      	mov	r2, r5
 80145a4:	4b12      	ldr	r3, [pc, #72]	@ (80145f0 <_vfiprintf_r+0x228>)
 80145a6:	a904      	add	r1, sp, #16
 80145a8:	4630      	mov	r0, r6
 80145aa:	f3af 8000 	nop.w
 80145ae:	4607      	mov	r7, r0
 80145b0:	1c78      	adds	r0, r7, #1
 80145b2:	d1d6      	bne.n	8014562 <_vfiprintf_r+0x19a>
 80145b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80145b6:	07d9      	lsls	r1, r3, #31
 80145b8:	d405      	bmi.n	80145c6 <_vfiprintf_r+0x1fe>
 80145ba:	89ab      	ldrh	r3, [r5, #12]
 80145bc:	059a      	lsls	r2, r3, #22
 80145be:	d402      	bmi.n	80145c6 <_vfiprintf_r+0x1fe>
 80145c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145c2:	f7ff f9c1 	bl	8013948 <__retarget_lock_release_recursive>
 80145c6:	89ab      	ldrh	r3, [r5, #12]
 80145c8:	065b      	lsls	r3, r3, #25
 80145ca:	f53f af1f 	bmi.w	801440c <_vfiprintf_r+0x44>
 80145ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145d0:	e71e      	b.n	8014410 <_vfiprintf_r+0x48>
 80145d2:	ab03      	add	r3, sp, #12
 80145d4:	9300      	str	r3, [sp, #0]
 80145d6:	462a      	mov	r2, r5
 80145d8:	4b05      	ldr	r3, [pc, #20]	@ (80145f0 <_vfiprintf_r+0x228>)
 80145da:	a904      	add	r1, sp, #16
 80145dc:	4630      	mov	r0, r6
 80145de:	f7ff fca7 	bl	8013f30 <_printf_i>
 80145e2:	e7e4      	b.n	80145ae <_vfiprintf_r+0x1e6>
 80145e4:	0802c8e9 	.word	0x0802c8e9
 80145e8:	0802c8f3 	.word	0x0802c8f3
 80145ec:	00000000 	.word	0x00000000
 80145f0:	080143a5 	.word	0x080143a5
 80145f4:	0802c8ef 	.word	0x0802c8ef

080145f8 <__swbuf_r>:
 80145f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145fa:	460e      	mov	r6, r1
 80145fc:	4614      	mov	r4, r2
 80145fe:	4605      	mov	r5, r0
 8014600:	b118      	cbz	r0, 801460a <__swbuf_r+0x12>
 8014602:	6a03      	ldr	r3, [r0, #32]
 8014604:	b90b      	cbnz	r3, 801460a <__swbuf_r+0x12>
 8014606:	f7fe ffdf 	bl	80135c8 <__sinit>
 801460a:	69a3      	ldr	r3, [r4, #24]
 801460c:	60a3      	str	r3, [r4, #8]
 801460e:	89a3      	ldrh	r3, [r4, #12]
 8014610:	071a      	lsls	r2, r3, #28
 8014612:	d501      	bpl.n	8014618 <__swbuf_r+0x20>
 8014614:	6923      	ldr	r3, [r4, #16]
 8014616:	b943      	cbnz	r3, 801462a <__swbuf_r+0x32>
 8014618:	4621      	mov	r1, r4
 801461a:	4628      	mov	r0, r5
 801461c:	f000 f82a 	bl	8014674 <__swsetup_r>
 8014620:	b118      	cbz	r0, 801462a <__swbuf_r+0x32>
 8014622:	f04f 37ff 	mov.w	r7, #4294967295
 8014626:	4638      	mov	r0, r7
 8014628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801462a:	6823      	ldr	r3, [r4, #0]
 801462c:	6922      	ldr	r2, [r4, #16]
 801462e:	1a98      	subs	r0, r3, r2
 8014630:	6963      	ldr	r3, [r4, #20]
 8014632:	b2f6      	uxtb	r6, r6
 8014634:	4283      	cmp	r3, r0
 8014636:	4637      	mov	r7, r6
 8014638:	dc05      	bgt.n	8014646 <__swbuf_r+0x4e>
 801463a:	4621      	mov	r1, r4
 801463c:	4628      	mov	r0, r5
 801463e:	f7ff fe1b 	bl	8014278 <_fflush_r>
 8014642:	2800      	cmp	r0, #0
 8014644:	d1ed      	bne.n	8014622 <__swbuf_r+0x2a>
 8014646:	68a3      	ldr	r3, [r4, #8]
 8014648:	3b01      	subs	r3, #1
 801464a:	60a3      	str	r3, [r4, #8]
 801464c:	6823      	ldr	r3, [r4, #0]
 801464e:	1c5a      	adds	r2, r3, #1
 8014650:	6022      	str	r2, [r4, #0]
 8014652:	701e      	strb	r6, [r3, #0]
 8014654:	6962      	ldr	r2, [r4, #20]
 8014656:	1c43      	adds	r3, r0, #1
 8014658:	429a      	cmp	r2, r3
 801465a:	d004      	beq.n	8014666 <__swbuf_r+0x6e>
 801465c:	89a3      	ldrh	r3, [r4, #12]
 801465e:	07db      	lsls	r3, r3, #31
 8014660:	d5e1      	bpl.n	8014626 <__swbuf_r+0x2e>
 8014662:	2e0a      	cmp	r6, #10
 8014664:	d1df      	bne.n	8014626 <__swbuf_r+0x2e>
 8014666:	4621      	mov	r1, r4
 8014668:	4628      	mov	r0, r5
 801466a:	f7ff fe05 	bl	8014278 <_fflush_r>
 801466e:	2800      	cmp	r0, #0
 8014670:	d0d9      	beq.n	8014626 <__swbuf_r+0x2e>
 8014672:	e7d6      	b.n	8014622 <__swbuf_r+0x2a>

08014674 <__swsetup_r>:
 8014674:	b538      	push	{r3, r4, r5, lr}
 8014676:	4b29      	ldr	r3, [pc, #164]	@ (801471c <__swsetup_r+0xa8>)
 8014678:	4605      	mov	r5, r0
 801467a:	6818      	ldr	r0, [r3, #0]
 801467c:	460c      	mov	r4, r1
 801467e:	b118      	cbz	r0, 8014688 <__swsetup_r+0x14>
 8014680:	6a03      	ldr	r3, [r0, #32]
 8014682:	b90b      	cbnz	r3, 8014688 <__swsetup_r+0x14>
 8014684:	f7fe ffa0 	bl	80135c8 <__sinit>
 8014688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801468c:	0719      	lsls	r1, r3, #28
 801468e:	d422      	bmi.n	80146d6 <__swsetup_r+0x62>
 8014690:	06da      	lsls	r2, r3, #27
 8014692:	d407      	bmi.n	80146a4 <__swsetup_r+0x30>
 8014694:	2209      	movs	r2, #9
 8014696:	602a      	str	r2, [r5, #0]
 8014698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801469c:	81a3      	strh	r3, [r4, #12]
 801469e:	f04f 30ff 	mov.w	r0, #4294967295
 80146a2:	e033      	b.n	801470c <__swsetup_r+0x98>
 80146a4:	0758      	lsls	r0, r3, #29
 80146a6:	d512      	bpl.n	80146ce <__swsetup_r+0x5a>
 80146a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146aa:	b141      	cbz	r1, 80146be <__swsetup_r+0x4a>
 80146ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146b0:	4299      	cmp	r1, r3
 80146b2:	d002      	beq.n	80146ba <__swsetup_r+0x46>
 80146b4:	4628      	mov	r0, r5
 80146b6:	f7ff f975 	bl	80139a4 <_free_r>
 80146ba:	2300      	movs	r3, #0
 80146bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80146be:	89a3      	ldrh	r3, [r4, #12]
 80146c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80146c4:	81a3      	strh	r3, [r4, #12]
 80146c6:	2300      	movs	r3, #0
 80146c8:	6063      	str	r3, [r4, #4]
 80146ca:	6923      	ldr	r3, [r4, #16]
 80146cc:	6023      	str	r3, [r4, #0]
 80146ce:	89a3      	ldrh	r3, [r4, #12]
 80146d0:	f043 0308 	orr.w	r3, r3, #8
 80146d4:	81a3      	strh	r3, [r4, #12]
 80146d6:	6923      	ldr	r3, [r4, #16]
 80146d8:	b94b      	cbnz	r3, 80146ee <__swsetup_r+0x7a>
 80146da:	89a3      	ldrh	r3, [r4, #12]
 80146dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80146e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80146e4:	d003      	beq.n	80146ee <__swsetup_r+0x7a>
 80146e6:	4621      	mov	r1, r4
 80146e8:	4628      	mov	r0, r5
 80146ea:	f000 f88b 	bl	8014804 <__smakebuf_r>
 80146ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146f2:	f013 0201 	ands.w	r2, r3, #1
 80146f6:	d00a      	beq.n	801470e <__swsetup_r+0x9a>
 80146f8:	2200      	movs	r2, #0
 80146fa:	60a2      	str	r2, [r4, #8]
 80146fc:	6962      	ldr	r2, [r4, #20]
 80146fe:	4252      	negs	r2, r2
 8014700:	61a2      	str	r2, [r4, #24]
 8014702:	6922      	ldr	r2, [r4, #16]
 8014704:	b942      	cbnz	r2, 8014718 <__swsetup_r+0xa4>
 8014706:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801470a:	d1c5      	bne.n	8014698 <__swsetup_r+0x24>
 801470c:	bd38      	pop	{r3, r4, r5, pc}
 801470e:	0799      	lsls	r1, r3, #30
 8014710:	bf58      	it	pl
 8014712:	6962      	ldrpl	r2, [r4, #20]
 8014714:	60a2      	str	r2, [r4, #8]
 8014716:	e7f4      	b.n	8014702 <__swsetup_r+0x8e>
 8014718:	2000      	movs	r0, #0
 801471a:	e7f7      	b.n	801470c <__swsetup_r+0x98>
 801471c:	20000040 	.word	0x20000040

08014720 <_raise_r>:
 8014720:	291f      	cmp	r1, #31
 8014722:	b538      	push	{r3, r4, r5, lr}
 8014724:	4605      	mov	r5, r0
 8014726:	460c      	mov	r4, r1
 8014728:	d904      	bls.n	8014734 <_raise_r+0x14>
 801472a:	2316      	movs	r3, #22
 801472c:	6003      	str	r3, [r0, #0]
 801472e:	f04f 30ff 	mov.w	r0, #4294967295
 8014732:	bd38      	pop	{r3, r4, r5, pc}
 8014734:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014736:	b112      	cbz	r2, 801473e <_raise_r+0x1e>
 8014738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801473c:	b94b      	cbnz	r3, 8014752 <_raise_r+0x32>
 801473e:	4628      	mov	r0, r5
 8014740:	f000 f830 	bl	80147a4 <_getpid_r>
 8014744:	4622      	mov	r2, r4
 8014746:	4601      	mov	r1, r0
 8014748:	4628      	mov	r0, r5
 801474a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801474e:	f000 b817 	b.w	8014780 <_kill_r>
 8014752:	2b01      	cmp	r3, #1
 8014754:	d00a      	beq.n	801476c <_raise_r+0x4c>
 8014756:	1c59      	adds	r1, r3, #1
 8014758:	d103      	bne.n	8014762 <_raise_r+0x42>
 801475a:	2316      	movs	r3, #22
 801475c:	6003      	str	r3, [r0, #0]
 801475e:	2001      	movs	r0, #1
 8014760:	e7e7      	b.n	8014732 <_raise_r+0x12>
 8014762:	2100      	movs	r1, #0
 8014764:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014768:	4620      	mov	r0, r4
 801476a:	4798      	blx	r3
 801476c:	2000      	movs	r0, #0
 801476e:	e7e0      	b.n	8014732 <_raise_r+0x12>

08014770 <raise>:
 8014770:	4b02      	ldr	r3, [pc, #8]	@ (801477c <raise+0xc>)
 8014772:	4601      	mov	r1, r0
 8014774:	6818      	ldr	r0, [r3, #0]
 8014776:	f7ff bfd3 	b.w	8014720 <_raise_r>
 801477a:	bf00      	nop
 801477c:	20000040 	.word	0x20000040

08014780 <_kill_r>:
 8014780:	b538      	push	{r3, r4, r5, lr}
 8014782:	4d07      	ldr	r5, [pc, #28]	@ (80147a0 <_kill_r+0x20>)
 8014784:	2300      	movs	r3, #0
 8014786:	4604      	mov	r4, r0
 8014788:	4608      	mov	r0, r1
 801478a:	4611      	mov	r1, r2
 801478c:	602b      	str	r3, [r5, #0]
 801478e:	f7ed fec9 	bl	8002524 <_kill>
 8014792:	1c43      	adds	r3, r0, #1
 8014794:	d102      	bne.n	801479c <_kill_r+0x1c>
 8014796:	682b      	ldr	r3, [r5, #0]
 8014798:	b103      	cbz	r3, 801479c <_kill_r+0x1c>
 801479a:	6023      	str	r3, [r4, #0]
 801479c:	bd38      	pop	{r3, r4, r5, pc}
 801479e:	bf00      	nop
 80147a0:	2001054c 	.word	0x2001054c

080147a4 <_getpid_r>:
 80147a4:	f7ed beb6 	b.w	8002514 <_getpid>

080147a8 <_malloc_usable_size_r>:
 80147a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147ac:	1f18      	subs	r0, r3, #4
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	bfbc      	itt	lt
 80147b2:	580b      	ldrlt	r3, [r1, r0]
 80147b4:	18c0      	addlt	r0, r0, r3
 80147b6:	4770      	bx	lr

080147b8 <__swhatbuf_r>:
 80147b8:	b570      	push	{r4, r5, r6, lr}
 80147ba:	460c      	mov	r4, r1
 80147bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147c0:	2900      	cmp	r1, #0
 80147c2:	b096      	sub	sp, #88	@ 0x58
 80147c4:	4615      	mov	r5, r2
 80147c6:	461e      	mov	r6, r3
 80147c8:	da0d      	bge.n	80147e6 <__swhatbuf_r+0x2e>
 80147ca:	89a3      	ldrh	r3, [r4, #12]
 80147cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80147d0:	f04f 0100 	mov.w	r1, #0
 80147d4:	bf14      	ite	ne
 80147d6:	2340      	movne	r3, #64	@ 0x40
 80147d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80147dc:	2000      	movs	r0, #0
 80147de:	6031      	str	r1, [r6, #0]
 80147e0:	602b      	str	r3, [r5, #0]
 80147e2:	b016      	add	sp, #88	@ 0x58
 80147e4:	bd70      	pop	{r4, r5, r6, pc}
 80147e6:	466a      	mov	r2, sp
 80147e8:	f000 f848 	bl	801487c <_fstat_r>
 80147ec:	2800      	cmp	r0, #0
 80147ee:	dbec      	blt.n	80147ca <__swhatbuf_r+0x12>
 80147f0:	9901      	ldr	r1, [sp, #4]
 80147f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80147f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80147fa:	4259      	negs	r1, r3
 80147fc:	4159      	adcs	r1, r3
 80147fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014802:	e7eb      	b.n	80147dc <__swhatbuf_r+0x24>

08014804 <__smakebuf_r>:
 8014804:	898b      	ldrh	r3, [r1, #12]
 8014806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014808:	079d      	lsls	r5, r3, #30
 801480a:	4606      	mov	r6, r0
 801480c:	460c      	mov	r4, r1
 801480e:	d507      	bpl.n	8014820 <__smakebuf_r+0x1c>
 8014810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014814:	6023      	str	r3, [r4, #0]
 8014816:	6123      	str	r3, [r4, #16]
 8014818:	2301      	movs	r3, #1
 801481a:	6163      	str	r3, [r4, #20]
 801481c:	b003      	add	sp, #12
 801481e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014820:	ab01      	add	r3, sp, #4
 8014822:	466a      	mov	r2, sp
 8014824:	f7ff ffc8 	bl	80147b8 <__swhatbuf_r>
 8014828:	9f00      	ldr	r7, [sp, #0]
 801482a:	4605      	mov	r5, r0
 801482c:	4639      	mov	r1, r7
 801482e:	4630      	mov	r0, r6
 8014830:	f7ff f92c 	bl	8013a8c <_malloc_r>
 8014834:	b948      	cbnz	r0, 801484a <__smakebuf_r+0x46>
 8014836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801483a:	059a      	lsls	r2, r3, #22
 801483c:	d4ee      	bmi.n	801481c <__smakebuf_r+0x18>
 801483e:	f023 0303 	bic.w	r3, r3, #3
 8014842:	f043 0302 	orr.w	r3, r3, #2
 8014846:	81a3      	strh	r3, [r4, #12]
 8014848:	e7e2      	b.n	8014810 <__smakebuf_r+0xc>
 801484a:	89a3      	ldrh	r3, [r4, #12]
 801484c:	6020      	str	r0, [r4, #0]
 801484e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014852:	81a3      	strh	r3, [r4, #12]
 8014854:	9b01      	ldr	r3, [sp, #4]
 8014856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801485a:	b15b      	cbz	r3, 8014874 <__smakebuf_r+0x70>
 801485c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014860:	4630      	mov	r0, r6
 8014862:	f000 f81d 	bl	80148a0 <_isatty_r>
 8014866:	b128      	cbz	r0, 8014874 <__smakebuf_r+0x70>
 8014868:	89a3      	ldrh	r3, [r4, #12]
 801486a:	f023 0303 	bic.w	r3, r3, #3
 801486e:	f043 0301 	orr.w	r3, r3, #1
 8014872:	81a3      	strh	r3, [r4, #12]
 8014874:	89a3      	ldrh	r3, [r4, #12]
 8014876:	431d      	orrs	r5, r3
 8014878:	81a5      	strh	r5, [r4, #12]
 801487a:	e7cf      	b.n	801481c <__smakebuf_r+0x18>

0801487c <_fstat_r>:
 801487c:	b538      	push	{r3, r4, r5, lr}
 801487e:	4d07      	ldr	r5, [pc, #28]	@ (801489c <_fstat_r+0x20>)
 8014880:	2300      	movs	r3, #0
 8014882:	4604      	mov	r4, r0
 8014884:	4608      	mov	r0, r1
 8014886:	4611      	mov	r1, r2
 8014888:	602b      	str	r3, [r5, #0]
 801488a:	f7ed feab 	bl	80025e4 <_fstat>
 801488e:	1c43      	adds	r3, r0, #1
 8014890:	d102      	bne.n	8014898 <_fstat_r+0x1c>
 8014892:	682b      	ldr	r3, [r5, #0]
 8014894:	b103      	cbz	r3, 8014898 <_fstat_r+0x1c>
 8014896:	6023      	str	r3, [r4, #0]
 8014898:	bd38      	pop	{r3, r4, r5, pc}
 801489a:	bf00      	nop
 801489c:	2001054c 	.word	0x2001054c

080148a0 <_isatty_r>:
 80148a0:	b538      	push	{r3, r4, r5, lr}
 80148a2:	4d06      	ldr	r5, [pc, #24]	@ (80148bc <_isatty_r+0x1c>)
 80148a4:	2300      	movs	r3, #0
 80148a6:	4604      	mov	r4, r0
 80148a8:	4608      	mov	r0, r1
 80148aa:	602b      	str	r3, [r5, #0]
 80148ac:	f7ed feaa 	bl	8002604 <_isatty>
 80148b0:	1c43      	adds	r3, r0, #1
 80148b2:	d102      	bne.n	80148ba <_isatty_r+0x1a>
 80148b4:	682b      	ldr	r3, [r5, #0]
 80148b6:	b103      	cbz	r3, 80148ba <_isatty_r+0x1a>
 80148b8:	6023      	str	r3, [r4, #0]
 80148ba:	bd38      	pop	{r3, r4, r5, pc}
 80148bc:	2001054c 	.word	0x2001054c

080148c0 <sqrtf>:
 80148c0:	b508      	push	{r3, lr}
 80148c2:	ed2d 8b02 	vpush	{d8}
 80148c6:	eeb0 8a40 	vmov.f32	s16, s0
 80148ca:	f000 f817 	bl	80148fc <__ieee754_sqrtf>
 80148ce:	eeb4 8a48 	vcmp.f32	s16, s16
 80148d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d6:	d60c      	bvs.n	80148f2 <sqrtf+0x32>
 80148d8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80148f8 <sqrtf+0x38>
 80148dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80148e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148e4:	d505      	bpl.n	80148f2 <sqrtf+0x32>
 80148e6:	f7ff f803 	bl	80138f0 <__errno>
 80148ea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80148ee:	2321      	movs	r3, #33	@ 0x21
 80148f0:	6003      	str	r3, [r0, #0]
 80148f2:	ecbd 8b02 	vpop	{d8}
 80148f6:	bd08      	pop	{r3, pc}
 80148f8:	00000000 	.word	0x00000000

080148fc <__ieee754_sqrtf>:
 80148fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014900:	4770      	bx	lr
	...

08014904 <_init>:
 8014904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014906:	bf00      	nop
 8014908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801490a:	bc08      	pop	{r3}
 801490c:	469e      	mov	lr, r3
 801490e:	4770      	bx	lr

08014910 <_fini>:
 8014910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014912:	bf00      	nop
 8014914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014916:	bc08      	pop	{r3}
 8014918:	469e      	mov	lr, r3
 801491a:	4770      	bx	lr
