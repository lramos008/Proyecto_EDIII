
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012fbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00024abc  0801315c  0801315c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037c18  08037c18  0003908c  2**0
                  CONTENTS
  4 .ARM          00000008  08037c18  08037c18  00038c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08037c20  08037c20  0003908c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037c20  08037c20  00038c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08037c24  08037c24  00038c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08037c28  00039000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ecc4  20000090  08037cb4  00039090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ed54  08037cb4  00039d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003908c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260ff  00000000  00000000  000390bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061ed  00000000  00000000  0005f1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002150  00000000  00000000  000653a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001889  00000000  00000000  000674f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002062f  00000000  00000000  00068d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030a84  00000000  00000000  000893b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b55ae  00000000  00000000  000b9e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0016f3e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093f8  00000000  00000000  0016f498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00178890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004b63  00000000  00000000  001788ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a0  00000000  00000000  0017d450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013144 	.word	0x08013144

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08013144 	.word	0x08013144

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	@ 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <vApplicationGetIdleTaskMemory+0x30>)
 8000eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2280      	movs	r2, #128	@ 0x80
 8000eb8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000ac 	.word	0x200000ac
 8000ecc:	20000100 	.word	0x20000100

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f002 fd5d 	bl	8003994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eda:	f000 f875 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f000 fa87 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee2:	f000 fa65 	bl	80013b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ee6:	f000 fa39 	bl	800135c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eea:	f000 f92b 	bl	8001144 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000eee:	f000 f9b1 	bl	8001254 <MX_SPI3_Init>
  MX_RTC_Init();
 8000ef2:	f000 f955 	bl	80011a0 <MX_RTC_Init>
  MX_ADC1_Init();
 8000ef6:	f000 f8d3 	bl	80010a0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000efa:	f000 f9e1 	bl	80012c0 <MX_TIM3_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  keypad_sd_sync = xSemaphoreCreateBinary();
 8000efe:	2203      	movs	r2, #3
 8000f00:	2100      	movs	r1, #0
 8000f02:	2001      	movs	r0, #1
 8000f04:	f007 fce6 	bl	80088d4 <xQueueGenericCreate>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a23      	ldr	r2, [pc, #140]	@ (8000f98 <main+0xc8>)
 8000f0c:	6013      	str	r3, [r2, #0]
  sd_display_sync = xSemaphoreCreateBinary();
 8000f0e:	2203      	movs	r2, #3
 8000f10:	2100      	movs	r1, #0
 8000f12:	2001      	movs	r0, #1
 8000f14:	f007 fcde 	bl	80088d4 <xQueueGenericCreate>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a20      	ldr	r2, [pc, #128]	@ (8000f9c <main+0xcc>)
 8000f1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(uint8_t));
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2101      	movs	r1, #1
 8000f22:	2001      	movs	r0, #1
 8000f24:	f007 fcd6 	bl	80088d4 <xQueueGenericCreate>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa0 <main+0xd0>)
 8000f2c:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2101      	movs	r1, #1
 8000f32:	2001      	movs	r0, #1
 8000f34:	f007 fcce 	bl	80088d4 <xQueueGenericCreate>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa4 <main+0xd4>)
 8000f3c:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	2304      	movs	r3, #4
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	4917      	ldr	r1, [pc, #92]	@ (8000fa8 <main+0xd8>)
 8000f4c:	4817      	ldr	r0, [pc, #92]	@ (8000fac <main+0xdc>)
 8000f4e:	f008 f997 	bl	8009280 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 10 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8000f52:	2300      	movs	r3, #0
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	2302      	movs	r3, #2
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000f60:	4913      	ldr	r1, [pc, #76]	@ (8000fb0 <main+0xe0>)
 8000f62:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <main+0xe4>)
 8000f64:	f008 f98c 	bl	8009280 <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	2280      	movs	r2, #128	@ 0x80
 8000f74:	4910      	ldr	r1, [pc, #64]	@ (8000fb8 <main+0xe8>)
 8000f76:	4811      	ldr	r0, [pc, #68]	@ (8000fbc <main+0xec>)
 8000f78:	f008 f982 	bl	8009280 <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	2300      	movs	r3, #0
 8000f82:	9300      	str	r3, [sp, #0]
 8000f84:	2300      	movs	r3, #0
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <main+0xf0>)
 8000f8a:	480e      	ldr	r0, [pc, #56]	@ (8000fc4 <main+0xf4>)
 8000f8c:	f008 f978 	bl	8009280 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000f90:	f008 fae4 	bl	800955c <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <main+0xc4>
 8000f98:	2000050c 	.word	0x2000050c
 8000f9c:	20000510 	.word	0x20000510
 8000fa0:	20000508 	.word	0x20000508
 8000fa4:	20000504 	.word	0x20000504
 8000fa8:	0801315c 	.word	0x0801315c
 8000fac:	080033cd 	.word	0x080033cd
 8000fb0:	0801316c 	.word	0x0801316c
 8000fb4:	080035ed 	.word	0x080035ed
 8000fb8:	08013178 	.word	0x08013178
 8000fbc:	08003551 	.word	0x08003551
 8000fc0:	08013188 	.word	0x08013188
 8000fc4:	08001515 	.word	0x08001515

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b094      	sub	sp, #80	@ 0x50
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0320 	add.w	r3, r7, #32
 8000fd2:	2230      	movs	r2, #48	@ 0x30
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f010 ffd1 	bl	8011f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <SystemClock_Config+0xd0>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff4:	4a28      	ldr	r2, [pc, #160]	@ (8001098 <SystemClock_Config+0xd0>)
 8000ff6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffc:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <SystemClock_Config+0xd0>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b23      	ldr	r3, [pc, #140]	@ (800109c <SystemClock_Config+0xd4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001014:	4a21      	ldr	r2, [pc, #132]	@ (800109c <SystemClock_Config+0xd4>)
 8001016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <SystemClock_Config+0xd4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001028:	2309      	movs	r3, #9
 800102a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800102c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800103e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001044:	2340      	movs	r3, #64	@ 0x40
 8001046:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001048:	2302      	movs	r3, #2
 800104a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800104c:	2307      	movs	r3, #7
 800104e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f004 fd8f 	bl	8005b78 <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001060:	f000 fa85 	bl	800156e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001068:	2302      	movs	r3, #2
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001070:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2102      	movs	r1, #2
 8001080:	4618      	mov	r0, r3
 8001082:	f004 fff1 	bl	8006068 <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800108c:	f000 fa6f 	bl	800156e <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	@ 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a6:	463b      	mov	r3, r7
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010b4:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <MX_ADC1_Init+0xa0>)
 80010b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010f4:	4b11      	ldr	r3, [pc, #68]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_ADC1_Init+0x9c>)
 80010fe:	2201      	movs	r2, #1
 8001100:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001102:	480e      	ldr	r0, [pc, #56]	@ (800113c <MX_ADC1_Init+0x9c>)
 8001104:	f002 fcac 	bl	8003a60 <HAL_ADC_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800110e:	f000 fa2e 	bl	800156e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800111a:	2302      	movs	r3, #2
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_ADC1_Init+0x9c>)
 8001124:	f002 ff58 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800112e:	f000 fa1e 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000300 	.word	0x20000300
 8001140:	40012000 	.word	0x40012000

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f004 f84b 	bl	800521c <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f9ef 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200003a8 	.word	0x200003a8
 8001198:	40005400 	.word	0x40005400
 800119c:	00061a80 	.word	0x00061a80

080011a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011b8:	4b24      	ldr	r3, [pc, #144]	@ (800124c <MX_RTC_Init+0xac>)
 80011ba:	4a25      	ldr	r2, [pc, #148]	@ (8001250 <MX_RTC_Init+0xb0>)
 80011bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011be:	4b23      	ldr	r3, [pc, #140]	@ (800124c <MX_RTC_Init+0xac>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011c4:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_RTC_Init+0xac>)
 80011c6:	227f      	movs	r2, #127	@ 0x7f
 80011c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ca:	4b20      	ldr	r3, [pc, #128]	@ (800124c <MX_RTC_Init+0xac>)
 80011cc:	22ff      	movs	r2, #255	@ 0xff
 80011ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <MX_RTC_Init+0xac>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011d6:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <MX_RTC_Init+0xac>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <MX_RTC_Init+0xac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011e2:	481a      	ldr	r0, [pc, #104]	@ (800124c <MX_RTC_Init+0xac>)
 80011e4:	f005 fa80 	bl	80066e8 <HAL_RTC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011ee:	f000 f9be 	bl	800156e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80011f2:	230f      	movs	r3, #15
 80011f4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2200      	movs	r2, #0
 800120a:	4619      	mov	r1, r3
 800120c:	480f      	ldr	r0, [pc, #60]	@ (800124c <MX_RTC_Init+0xac>)
 800120e:	f005 faee 	bl	80067ee <HAL_RTC_SetTime>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001218:	f000 f9a9 	bl	800156e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800121c:	2306      	movs	r3, #6
 800121e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001220:	2307      	movs	r3, #7
 8001222:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8001224:	2306      	movs	r3, #6
 8001226:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001228:	2318      	movs	r3, #24
 800122a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <MX_RTC_Init+0xac>)
 8001234:	f005 fbd3 	bl	80069de <HAL_RTC_SetDate>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800123e:	f000 f996 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200003fc 	.word	0x200003fc
 8001250:	40002800 	.word	0x40002800

08001254 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001258:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <MX_SPI3_Init+0x64>)
 800125a:	4a18      	ldr	r2, [pc, #96]	@ (80012bc <MX_SPI3_Init+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800125e:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <MX_SPI3_Init+0x64>)
 8001260:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001264:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <MX_SPI3_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <MX_SPI3_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_SPI3_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_SPI3_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <MX_SPI3_Init+0x64>)
 8001280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001284:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MX_SPI3_Init+0x64>)
 8001288:	2210      	movs	r2, #16
 800128a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <MX_SPI3_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_SPI3_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <MX_SPI3_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_SPI3_Init+0x64>)
 80012a0:	220a      	movs	r2, #10
 80012a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	@ (80012b8 <MX_SPI3_Init+0x64>)
 80012a6:	f005 fd2b 	bl	8006d00 <HAL_SPI_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80012b0:	f000 f95d 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	2000041c 	.word	0x2000041c
 80012bc:	40003c00 	.word	0x40003c00

080012c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001354 <MX_TIM3_Init+0x94>)
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <MX_TIM3_Init+0x98>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_TIM3_Init+0x94>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_TIM3_Init+0x94>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5334 - 1;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <MX_TIM3_Init+0x94>)
 80012f0:	f241 42d5 	movw	r2, #5333	@ 0x14d5
 80012f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <MX_TIM3_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <MX_TIM3_Init+0x94>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001302:	4814      	ldr	r0, [pc, #80]	@ (8001354 <MX_TIM3_Init+0x94>)
 8001304:	f006 f954 	bl	80075b0 <HAL_TIM_Base_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800130e:	f000 f92e 	bl	800156e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	4619      	mov	r1, r3
 800131e:	480d      	ldr	r0, [pc, #52]	@ (8001354 <MX_TIM3_Init+0x94>)
 8001320:	f006 fb17 	bl	8007952 <HAL_TIM_ConfigClockSource>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 f920 	bl	800156e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800132e:	2320      	movs	r3, #32
 8001330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	@ (8001354 <MX_TIM3_Init+0x94>)
 800133c:	f006 fd1e 	bl	8007d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001346:	f000 f912 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000474 	.word	0x20000474
 8001358:	40000400 	.word	0x40000400

0800135c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001362:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <MX_USART2_UART_Init+0x50>)
 8001364:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001382:	220c      	movs	r2, #12
 8001384:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001386:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_USART2_UART_Init+0x4c>)
 8001394:	f006 fd74 	bl	8007e80 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139e:	f000 f8e6 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200004bc 	.word	0x200004bc
 80013ac:	40004400 	.word	0x40004400

080013b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_DMA_Init+0x3c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <MX_DMA_Init+0x3c>)
 80013c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_DMA_Init+0x3c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	2038      	movs	r0, #56	@ 0x38
 80013d8:	f003 f960 	bl	800469c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013dc:	2038      	movs	r0, #56	@ 0x38
 80013de:	f003 f979 	bl	80046d4 <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	@ 0x28
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b3f      	ldr	r3, [pc, #252]	@ (8001508 <MX_GPIO_Init+0x118>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a3e      	ldr	r2, [pc, #248]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b3c      	ldr	r3, [pc, #240]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b38      	ldr	r3, [pc, #224]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a37      	ldr	r2, [pc, #220]	@ (8001508 <MX_GPIO_Init+0x118>)
 800142c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b35      	ldr	r3, [pc, #212]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a30      	ldr	r2, [pc, #192]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a29      	ldr	r2, [pc, #164]	@ (8001508 <MX_GPIO_Init+0x118>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <MX_GPIO_Init+0x118>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f248 0120 	movw	r1, #32800	@ 0x8020
 800147c:	4823      	ldr	r0, [pc, #140]	@ (800150c <MX_GPIO_Init+0x11c>)
 800147e:	f003 feb3 	bl	80051e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001488:	4821      	ldr	r0, [pc, #132]	@ (8001510 <MX_GPIO_Init+0x120>)
 800148a:	f003 fead 	bl	80051e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800148e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001494:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	481a      	ldr	r0, [pc, #104]	@ (8001510 <MX_GPIO_Init+0x120>)
 80014a6:	f003 fd03 	bl	8004eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80014aa:	230f      	movs	r3, #15
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014b2:	2302      	movs	r3, #2
 80014b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4814      	ldr	r0, [pc, #80]	@ (8001510 <MX_GPIO_Init+0x120>)
 80014be:	f003 fcf7 	bl	8004eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_SD_Pin;
 80014c2:	f248 0320 	movw	r3, #32800	@ 0x8020
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	480c      	ldr	r0, [pc, #48]	@ (800150c <MX_GPIO_Init+0x11c>)
 80014dc:	f003 fce8 	bl	8004eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014e0:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80014e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_GPIO_Init+0x120>)
 80014fa:	f003 fcd9 	bl	8004eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	@ 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40020000 	.word	0x40020000
 8001510:	40020800 	.word	0x40020800

08001514 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	while(1);
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <idle_task+0x8>

08001520 <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8001528:	4806      	ldr	r0, [pc, #24]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x24>)
 800152a:	f006 f8f3 	bl	8007714 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 800152e:	4806      	ldr	r0, [pc, #24]	@ (8001548 <HAL_ADC_ConvCpltCallback+0x28>)
 8001530:	f002 fcda 	bl	8003ee8 <HAL_ADC_Stop_DMA>
	conv_cplt_flag = true;
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000474 	.word	0x20000474
 8001548:	20000300 	.word	0x20000300
 800154c:	20000514 	.word	0x20000514

08001550 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001560:	d101      	bne.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001562:	f002 fa39 	bl	80039d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001572:	b672      	cpsid	i
}
 8001574:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001576:	bf00      	nop
 8001578:	e7fd      	b.n	8001576 <Error_Handler+0x8>
	...

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_MspInit+0x54>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	4a11      	ldr	r2, [pc, #68]	@ (80015d0 <HAL_MspInit+0x54>)
 800158c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001590:	6453      	str	r3, [r2, #68]	@ 0x44
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <HAL_MspInit+0x54>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <HAL_MspInit+0x54>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <HAL_MspInit+0x54>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_MspInit+0x54>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	210f      	movs	r1, #15
 80015be:	f06f 0001 	mvn.w	r0, #1
 80015c2:	f003 f86b 	bl	800469c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a32      	ldr	r2, [pc, #200]	@ (80016bc <HAL_ADC_MspInit+0xe8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d15e      	bne.n	80016b4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b31      	ldr	r3, [pc, #196]	@ (80016c0 <HAL_ADC_MspInit+0xec>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a30      	ldr	r2, [pc, #192]	@ (80016c0 <HAL_ADC_MspInit+0xec>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <HAL_ADC_MspInit+0xec>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <HAL_ADC_MspInit+0xec>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a29      	ldr	r2, [pc, #164]	@ (80016c0 <HAL_ADC_MspInit+0xec>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_ADC_MspInit+0xec>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800162e:	2301      	movs	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4820      	ldr	r0, [pc, #128]	@ (80016c4 <HAL_ADC_MspInit+0xf0>)
 8001642:	f003 fc35 	bl	8004eb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 8001648:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <HAL_ADC_MspInit+0xf8>)
 800164a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800164c:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800165e:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 8001660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001664:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 8001668:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800166c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 8001670:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001674:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800167c:	4b12      	ldr	r3, [pc, #72]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001688:	480f      	ldr	r0, [pc, #60]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 800168a:	f003 f831 	bl	80046f0 <HAL_DMA_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001694:	f7ff ff6b 	bl	800156e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 800169c:	639a      	str	r2, [r3, #56]	@ 0x38
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <HAL_ADC_MspInit+0xf4>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2105      	movs	r1, #5
 80016a8:	2012      	movs	r0, #18
 80016aa:	f002 fff7 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016ae:	2012      	movs	r0, #18
 80016b0:	f003 f810 	bl	80046d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40012000 	.word	0x40012000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	20000348 	.word	0x20000348
 80016cc:	40026410 	.word	0x40026410

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	@ 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a19      	ldr	r2, [pc, #100]	@ (8001754 <HAL_I2C_MspInit+0x84>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12b      	bne.n	800174a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <HAL_I2C_MspInit+0x88>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <HAL_I2C_MspInit+0x88>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <HAL_I2C_MspInit+0x88>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170e:	23c0      	movs	r3, #192	@ 0xc0
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001712:	2312      	movs	r3, #18
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800171e:	2304      	movs	r3, #4
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <HAL_I2C_MspInit+0x8c>)
 800172a:	f003 fbc1 	bl	8004eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_I2C_MspInit+0x88>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <HAL_I2C_MspInit+0x88>)
 8001738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800173c:	6413      	str	r3, [r2, #64]	@ 0x40
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_I2C_MspInit+0x88>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	@ 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40005400 	.word	0x40005400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400

08001760 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0c      	ldr	r2, [pc, #48]	@ (80017b0 <HAL_RTC_MspInit+0x50>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d111      	bne.n	80017a6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001782:	2302      	movs	r3, #2
 8001784:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001786:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	4618      	mov	r0, r3
 8001792:	f004 febb 	bl	800650c <HAL_RCCEx_PeriphCLKConfig>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800179c:	f7ff fee7 	bl	800156e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <HAL_RTC_MspInit+0x54>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40002800 	.word	0x40002800
 80017b4:	42470e3c 	.word	0x42470e3c

080017b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a19      	ldr	r2, [pc, #100]	@ (800183c <HAL_SPI_MspInit+0x84>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d12c      	bne.n	8001834 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 80017e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a10      	ldr	r2, [pc, #64]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b0e      	ldr	r3, [pc, #56]	@ (8001840 <HAL_SPI_MspInit+0x88>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001812:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001824:	2306      	movs	r3, #6
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <HAL_SPI_MspInit+0x8c>)
 8001830:	f003 fb3e 	bl	8004eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	3728      	adds	r7, #40	@ 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40003c00 	.word	0x40003c00
 8001840:	40023800 	.word	0x40023800
 8001844:	40020800 	.word	0x40020800

08001848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <HAL_TIM_Base_MspInit+0x48>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d115      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	201d      	movs	r0, #29
 800187c:	f002 ff0e 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001880:	201d      	movs	r0, #29
 8001882:	f002 ff27 	bl	80046d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40000400 	.word	0x40000400
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	@ (800191c <HAL_UART_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12b      	bne.n	8001912 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ca:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018f2:	230c      	movs	r3, #12
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001902:	2307      	movs	r3, #7
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	@ (8001924 <HAL_UART_MspInit+0x8c>)
 800190e:	f003 facf 	bl	8004eb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40004400 	.word	0x40004400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	@ 0x38
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <HAL_InitTick+0xe8>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	4a33      	ldr	r2, [pc, #204]	@ (8001a10 <HAL_InitTick+0xe8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6413      	str	r3, [r2, #64]	@ 0x40
 8001948:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <HAL_InitTick+0xe8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001954:	f107 0210 	add.w	r2, r7, #16
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f004 fda2 	bl	80064a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d103      	bne.n	8001976 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800196e:	f004 fd73 	bl	8006458 <HAL_RCC_GetPCLK1Freq>
 8001972:	6378      	str	r0, [r7, #52]	@ 0x34
 8001974:	e004      	b.n	8001980 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001976:	f004 fd6f 	bl	8006458 <HAL_RCC_GetPCLK1Freq>
 800197a:	4603      	mov	r3, r0
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001982:	4a24      	ldr	r2, [pc, #144]	@ (8001a14 <HAL_InitTick+0xec>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	0c9b      	lsrs	r3, r3, #18
 800198a:	3b01      	subs	r3, #1
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800198e:	4b22      	ldr	r3, [pc, #136]	@ (8001a18 <HAL_InitTick+0xf0>)
 8001990:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001994:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001996:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <HAL_InitTick+0xf0>)
 8001998:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800199c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800199e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a18 <HAL_InitTick+0xf0>)
 80019a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <HAL_InitTick+0xf0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <HAL_InitTick+0xf0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_InitTick+0xf0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80019b6:	4818      	ldr	r0, [pc, #96]	@ (8001a18 <HAL_InitTick+0xf0>)
 80019b8:	f005 fdfa 	bl	80075b0 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d11b      	bne.n	8001a02 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80019ca:	4813      	ldr	r0, [pc, #76]	@ (8001a18 <HAL_InitTick+0xf0>)
 80019cc:	f005 fe40 	bl	8007650 <HAL_TIM_Base_Start_IT>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d111      	bne.n	8001a02 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019de:	201c      	movs	r0, #28
 80019e0:	f002 fe78 	bl	80046d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	d808      	bhi.n	80019fc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80019ea:	2200      	movs	r2, #0
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	201c      	movs	r0, #28
 80019f0:	f002 fe54 	bl	800469c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019f4:	4a09      	ldr	r2, [pc, #36]	@ (8001a1c <HAL_InitTick+0xf4>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e002      	b.n	8001a02 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3738      	adds	r7, #56	@ 0x38
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	431bde83 	.word	0x431bde83
 8001a18:	20000518 	.word	0x20000518
 8001a1c:	20000020 	.word	0x20000020

08001a20 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <SDTimer_Handler+0x40>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <SDTimer_Handler+0x1c>
    Timer1--;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <SDTimer_Handler+0x40>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <SDTimer_Handler+0x40>)
 8001a3a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <SDTimer_Handler+0x44>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <SDTimer_Handler+0x34>
    Timer2--;
 8001a46:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <SDTimer_Handler+0x44>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SDTimer_Handler+0x44>)
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000561 	.word	0x20000561
 8001a64:	20000562 	.word	0x20000562

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <NMI_Handler+0x4>

08001a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <MemManage_Handler+0x4>

08001a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <ADC_IRQHandler+0x10>)
 8001aa6:	f002 f81e 	bl	8003ae6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000300 	.word	0x20000300

08001ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <TIM2_IRQHandler+0x30>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <TIM2_IRQHandler+0x30>)
 8001ac4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001ac6:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <TIM2_IRQHandler+0x30>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d904      	bls.n	8001ada <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <TIM2_IRQHandler+0x30>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001ad6:	f7ff ffa3 	bl	8001a20 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ada:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <TIM2_IRQHandler+0x34>)
 8001adc:	f005 fe49 	bl	8007772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000560 	.word	0x20000560
 8001ae8:	20000518 	.word	0x20000518

08001aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <TIM3_IRQHandler+0x10>)
 8001af2:	f005 fe3e 	bl	8007772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000474 	.word	0x20000474

08001b00 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <DMA2_Stream0_IRQHandler+0x10>)
 8001b06:	f002 ff69 	bl	80049dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000348 	.word	0x20000348

08001b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return 1;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_kill>:

int _kill(int pid, int sig)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b2e:	f010 faff 	bl	8012130 <__errno>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2216      	movs	r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
  return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_exit>:

void _exit (int status)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffe7 	bl	8001b24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b56:	bf00      	nop
 8001b58:	e7fd      	b.n	8001b56 <_exit+0x12>

08001b5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e00a      	b.n	8001b82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b6c:	f3af 8000 	nop.w
 8001b70:	4601      	mov	r1, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	60ba      	str	r2, [r7, #8]
 8001b78:	b2ca      	uxtb	r2, r1
 8001b7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	dbf0      	blt.n	8001b6c <_read+0x12>
  }

  return len;
 8001b8a:	687b      	ldr	r3, [r7, #4]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e009      	b.n	8001bba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	60ba      	str	r2, [r7, #8]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	dbf1      	blt.n	8001ba6 <_write+0x12>
  }
  return len;
 8001bc2:	687b      	ldr	r3, [r7, #4]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_close>:

int _close(int file)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bf4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_isatty>:

int _isatty(int file)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	@ (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f010 fa64 	bl	8012130 <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20018000 	.word	0x20018000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	20000564 	.word	0x20000564
 8001c9c:	2000ed58 	.word	0x2000ed58

08001ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <SystemInit+0x20>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001caa:	4a05      	ldr	r2, [pc, #20]	@ (8001cc0 <SystemInit+0x20>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cc8:	f7ff ffea 	bl	8001ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ccc:	480c      	ldr	r0, [pc, #48]	@ (8001d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cce:	490d      	ldr	r1, [pc, #52]	@ (8001d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8001d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f010 fa23 	bl	801213c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff f8eb 	bl	8000ed0 <main>
  bx  lr    
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cfc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001d08:	08037c28 	.word	0x08037c28
  ldr r2, =_sbss
 8001d0c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001d10:	2000ed54 	.word	0x2000ed54

08001d14 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <DMA1_Stream0_IRQHandler>
	...

08001d18 <capture_voice>:
#include "utils.h"

/*================[Public functions]=====================*/
void capture_voice(uint16_t *buffer, uint32_t size){
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8001d22:	4806      	ldr	r0, [pc, #24]	@ (8001d3c <capture_voice+0x24>)
 8001d24:	f005 fc94 	bl	8007650 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, size);
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4804      	ldr	r0, [pc, #16]	@ (8001d40 <capture_voice+0x28>)
 8001d2e:	f001 ffeb 	bl	8003d08 <HAL_ADC_Start_DMA>
	return;
 8001d32:	bf00      	nop
}
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000474 	.word	0x20000474
 8001d40:	20000300 	.word	0x20000300
 8001d44:	00000000 	.word	0x00000000

08001d48 <get_voltage>:

void get_voltage(uint16_t *in_buffer, float *out_buffer, uint32_t size){
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < size; i++){
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e029      	b.n	8001dae <get_voltage+0x66>
		out_buffer[i] = VOLTAGE_REFERENCE * ((float)in_buffer[i]) / ADC_RESOLUTION;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d6c:	ee17 0a90 	vmov	r0, s15
 8001d70:	f7fe fc62 	bl	8000638 <__aeabi_f2d>
 8001d74:	a313      	add	r3, pc, #76	@ (adr r3, 8001dc4 <get_voltage+0x7c>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fcb5 	bl	80006e8 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <get_voltage+0x78>)
 8001d8c:	f7fe fdd6 	bl	800093c <__aeabi_ddiv>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	18d4      	adds	r4, r2, r3
 8001da0:	f7fe feb4 	bl	8000b0c <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	6023      	str	r3, [r4, #0]
	for(uint32_t i = 0; i < size; i++){
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3d1      	bcc.n	8001d5a <get_voltage+0x12>
	}
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}
 8001dc0:	40b00000 	.word	0x40b00000
 8001dc4:	66666666 	.word	0x66666666
 8001dc8:	400a6666 	.word	0x400a6666

08001dcc <display_init>:
#include "ssd1306.h"
#include "ssd1306_fonts.h"
#include "ssd1306_tests.h"
#include "utils.h"
/*================[Public functions]=====================*/
void display_init(void){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 8001dd0:	f000 fb14 	bl	80023fc <ssd1306_Init>
	return;
 8001dd4:	bf00      	nop
}
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <display_start_msg>:

void display_start_msg(void){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 8001dde:	2305      	movs	r3, #5
 8001de0:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 fb72 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fcb6 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 8001df8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <display_start_msg+0x60>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	9200      	str	r2, [sp, #0]
 8001dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e00:	480e      	ldr	r0, [pc, #56]	@ (8001e3c <display_start_msg+0x64>)
 8001e02:	f000 fc89 	bl	8002718 <ssd1306_WriteString>
	x += 15;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	330f      	adds	r3, #15
 8001e0a:	71fb      	strb	r3, [r7, #7]
	y += 26;
 8001e0c:	79bb      	ldrb	r3, [r7, #6]
 8001e0e:	331a      	adds	r3, #26
 8001e10:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001e12:	79ba      	ldrb	r2, [r7, #6]
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fca3 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <display_start_msg+0x60>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	9200      	str	r2, [sp, #0]
 8001e24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e26:	4806      	ldr	r0, [pc, #24]	@ (8001e40 <display_start_msg+0x68>)
 8001e28:	f000 fc76 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001e2c:	f000 fb68 	bl	8002500 <ssd1306_UpdateScreen>
	return;
 8001e30:	bf00      	nop
}
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	08015450 	.word	0x08015450
 8001e3c:	08013194 	.word	0x08013194
 8001e40:	0801319c 	.word	0x0801319c

08001e44 <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[MAX_DIGITS + 1] = {0};
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	2100      	movs	r1, #0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 8001e60:	230a      	movs	r3, #10
 8001e62:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 8001e64:	231a      	movs	r3, #26
 8001e66:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= MAX_DIGITS){
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d823      	bhi.n	8001eb6 <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 8001e6e:	2300      	movs	r3, #0
 8001e70:	75fb      	strb	r3, [r7, #23]
 8001e72:	e008      	b.n	8001e86 <display_sequence_entry_msg+0x42>
			message[i] = '*';
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	3318      	adds	r3, #24
 8001e78:	443b      	add	r3, r7
 8001e7a:	222a      	movs	r2, #42	@ 0x2a
 8001e7c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	3301      	adds	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
 8001e86:	7dfa      	ldrb	r2, [r7, #23]
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3f2      	bcc.n	8001e74 <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 fb1e 	bl	80024d0 <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 8001e94:	7d7a      	ldrb	r2, [r7, #21]
 8001e96:	7dbb      	ldrb	r3, [r7, #22]
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fc62 	bl	8002764 <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 8001ea0:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <display_sequence_entry_msg+0x7c>)
 8001ea2:	f107 000c 	add.w	r0, r7, #12
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	9200      	str	r2, [sp, #0]
 8001eaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eac:	f000 fc34 	bl	8002718 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001eb0:	f000 fb26 	bl	8002500 <ssd1306_UpdateScreen>
	}
	return;
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
}
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	08015450 	.word	0x08015450

08001ec4 <display_timeout_msg>:


void display_timeout_msg(void){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af02      	add	r7, sp, #8
	/*Muestra mensaje de timeout en display*/
	uint8_t x = 5;
 8001eca:	2305      	movs	r3, #5
 8001ecc:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 8001ece:	2312      	movs	r3, #18
 8001ed0:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 fafc 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001ed8:	79ba      	ldrb	r2, [r7, #6]
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 fc40 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <display_timeout_msg+0x3c>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	9200      	str	r2, [sp, #0]
 8001eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eec:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <display_timeout_msg+0x40>)
 8001eee:	f000 fc13 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001ef2:	f000 fb05 	bl	8002500 <ssd1306_UpdateScreen>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	08015444 	.word	0x08015444
 8001f04:	080131a4 	.word	0x080131a4

08001f08 <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af02      	add	r7, sp, #8
	/*Muestra mensaje de secuencia incompleta en display*/
	uint8_t x = 20;
 8001f0e:	2314      	movs	r3, #20
 8001f10:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 fada 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001f1c:	79ba      	ldrb	r2, [r7, #6]
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fc1e 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 8001f28:	4b18      	ldr	r3, [pc, #96]	@ (8001f8c <display_incomplete_entry_msg+0x84>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	9200      	str	r2, [sp, #0]
 8001f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f30:	4817      	ldr	r0, [pc, #92]	@ (8001f90 <display_incomplete_entry_msg+0x88>)
 8001f32:	f000 fbf1 	bl	8002718 <ssd1306_WriteString>
	x = 10;
 8001f36:	230a      	movs	r3, #10
 8001f38:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001f3a:	79bb      	ldrb	r3, [r7, #6]
 8001f3c:	3312      	adds	r3, #18
 8001f3e:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001f40:	79ba      	ldrb	r2, [r7, #6]
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fc0c 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <display_incomplete_entry_msg+0x84>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	9200      	str	r2, [sp, #0]
 8001f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f54:	480f      	ldr	r0, [pc, #60]	@ (8001f94 <display_incomplete_entry_msg+0x8c>)
 8001f56:	f000 fbdf 	bl	8002718 <ssd1306_WriteString>
	x = 20;
 8001f5a:	2314      	movs	r3, #20
 8001f5c:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	3312      	adds	r3, #18
 8001f62:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001f64:	79ba      	ldrb	r2, [r7, #6]
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 fbfa 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <display_incomplete_entry_msg+0x84>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	9200      	str	r2, [sp, #0]
 8001f76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f78:	4807      	ldr	r0, [pc, #28]	@ (8001f98 <display_incomplete_entry_msg+0x90>)
 8001f7a:	f000 fbcd 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001f7e:	f000 fabf 	bl	8002500 <ssd1306_UpdateScreen>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	08015444 	.word	0x08015444
 8001f90:	08013194 	.word	0x08013194
 8001f94:	080131b0 	.word	0x080131b0
 8001f98:	080131bc 	.word	0x080131bc

08001f9c <display_access_granted_msg>:

void display_access_granted_msg(void){
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af02      	add	r7, sp, #8
	/*Muestra mensaje de acceso concedido*/
	uint8_t x = 5;
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 fa90 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001fb0:	79ba      	ldrb	r2, [r7, #6]
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 fbd4 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <display_access_granted_msg+0x5c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	9200      	str	r2, [sp, #0]
 8001fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fc4:	480d      	ldr	r0, [pc, #52]	@ (8001ffc <display_access_granted_msg+0x60>)
 8001fc6:	f000 fba7 	bl	8002718 <ssd1306_WriteString>
	y += 18;
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	3312      	adds	r3, #18
 8001fce:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001fd0:	79ba      	ldrb	r2, [r7, #6]
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fbc4 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <display_access_granted_msg+0x5c>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	9200      	str	r2, [sp, #0]
 8001fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe4:	4806      	ldr	r0, [pc, #24]	@ (8002000 <display_access_granted_msg+0x64>)
 8001fe6:	f000 fb97 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001fea:	f000 fa89 	bl	8002500 <ssd1306_UpdateScreen>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08015444 	.word	0x08015444
 8001ffc:	080131c4 	.word	0x080131c4
 8002000:	080131cc 	.word	0x080131cc

08002004 <display_user_found_msg>:

void display_user_found_msg(void){
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af02      	add	r7, sp, #8
	/*Muestra mensaje de usuario encontrado*/
	uint8_t x = 20;
 800200a:	2314      	movs	r3, #20
 800200c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002012:	2000      	movs	r0, #0
 8002014:	f000 fa5c 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002018:	79ba      	ldrb	r2, [r7, #6]
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fba0 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Usuario", Font_11x18, White);
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <display_user_found_msg+0x60>)
 8002026:	2201      	movs	r2, #1
 8002028:	9200      	str	r2, [sp, #0]
 800202a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202c:	480e      	ldr	r0, [pc, #56]	@ (8002068 <display_user_found_msg+0x64>)
 800202e:	f000 fb73 	bl	8002718 <ssd1306_WriteString>
	x = 20;
 8002032:	2314      	movs	r3, #20
 8002034:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002036:	79bb      	ldrb	r3, [r7, #6]
 8002038:	3312      	adds	r3, #18
 800203a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800203c:	79ba      	ldrb	r2, [r7, #6]
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fb8e 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("hallado", Font_11x18, White);
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <display_user_found_msg+0x60>)
 800204a:	2201      	movs	r2, #1
 800204c:	9200      	str	r2, [sp, #0]
 800204e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002050:	4806      	ldr	r0, [pc, #24]	@ (800206c <display_user_found_msg+0x68>)
 8002052:	f000 fb61 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002056:	f000 fa53 	bl	8002500 <ssd1306_UpdateScreen>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	08015444 	.word	0x08015444
 8002068:	080131d8 	.word	0x080131d8
 800206c:	080131e0 	.word	0x080131e0

08002070 <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af02      	add	r7, sp, #8
	/*Muestra mensaje de usuario no encontrado*/
	uint8_t x = 20;
 8002076:	2314      	movs	r3, #20
 8002078:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800207e:	2000      	movs	r0, #0
 8002080:	f000 fa26 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002084:	79ba      	ldrb	r2, [r7, #6]
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fb6a 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Usuario", Font_11x18, White);
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <display_user_not_found_msg+0x84>)
 8002092:	2201      	movs	r2, #1
 8002094:	9200      	str	r2, [sp, #0]
 8002096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002098:	4817      	ldr	r0, [pc, #92]	@ (80020f8 <display_user_not_found_msg+0x88>)
 800209a:	f000 fb3d 	bl	8002718 <ssd1306_WriteString>
	x = 20;
 800209e:	2314      	movs	r3, #20
 80020a0:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80020a2:	79bb      	ldrb	r3, [r7, #6]
 80020a4:	3312      	adds	r3, #18
 80020a6:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80020a8:	79ba      	ldrb	r2, [r7, #6]
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fb58 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("no", Font_11x18, White);
 80020b4:	4b0f      	ldr	r3, [pc, #60]	@ (80020f4 <display_user_not_found_msg+0x84>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	9200      	str	r2, [sp, #0]
 80020ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020bc:	480f      	ldr	r0, [pc, #60]	@ (80020fc <display_user_not_found_msg+0x8c>)
 80020be:	f000 fb2b 	bl	8002718 <ssd1306_WriteString>
	x = 20;
 80020c2:	2314      	movs	r3, #20
 80020c4:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80020c6:	79bb      	ldrb	r3, [r7, #6]
 80020c8:	3312      	adds	r3, #18
 80020ca:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80020cc:	79ba      	ldrb	r2, [r7, #6]
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fb46 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("existente", Font_11x18, White);
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <display_user_not_found_msg+0x84>)
 80020da:	2201      	movs	r2, #1
 80020dc:	9200      	str	r2, [sp, #0]
 80020de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e0:	4807      	ldr	r0, [pc, #28]	@ (8002100 <display_user_not_found_msg+0x90>)
 80020e2:	f000 fb19 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80020e6:	f000 fa0b 	bl	8002500 <ssd1306_UpdateScreen>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	08015444 	.word	0x08015444
 80020f8:	080131d8 	.word	0x080131d8
 80020fc:	080131e8 	.word	0x080131e8
 8002100:	080131ec 	.word	0x080131ec

08002104 <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af02      	add	r7, sp, #8
	/*Muestra mensaje que indica el inicio de reconocimiento de voz*/
	uint8_t x = 20;
 800210a:	2314      	movs	r3, #20
 800210c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002112:	2000      	movs	r0, #0
 8002114:	f000 f9dc 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002118:	79ba      	ldrb	r2, [r7, #6]
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fb20 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Comienza", Font_11x18, White);
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <display_start_voice_recognition_msg+0x84>)
 8002126:	2201      	movs	r2, #1
 8002128:	9200      	str	r2, [sp, #0]
 800212a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212c:	4817      	ldr	r0, [pc, #92]	@ (800218c <display_start_voice_recognition_msg+0x88>)
 800212e:	f000 faf3 	bl	8002718 <ssd1306_WriteString>
	x = 20;
 8002132:	2314      	movs	r3, #20
 8002134:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002136:	79bb      	ldrb	r3, [r7, #6]
 8002138:	3312      	adds	r3, #18
 800213a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800213c:	79ba      	ldrb	r2, [r7, #6]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fb0e 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("captura ", Font_11x18, White);
 8002148:	4b0f      	ldr	r3, [pc, #60]	@ (8002188 <display_start_voice_recognition_msg+0x84>)
 800214a:	2201      	movs	r2, #1
 800214c:	9200      	str	r2, [sp, #0]
 800214e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002150:	480f      	ldr	r0, [pc, #60]	@ (8002190 <display_start_voice_recognition_msg+0x8c>)
 8002152:	f000 fae1 	bl	8002718 <ssd1306_WriteString>
	x = 20;
 8002156:	2314      	movs	r3, #20
 8002158:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800215a:	79bb      	ldrb	r3, [r7, #6]
 800215c:	3312      	adds	r3, #18
 800215e:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002160:	79ba      	ldrb	r2, [r7, #6]
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fafc 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("de voz", Font_11x18, White);
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <display_start_voice_recognition_msg+0x84>)
 800216e:	2201      	movs	r2, #1
 8002170:	9200      	str	r2, [sp, #0]
 8002172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002174:	4807      	ldr	r0, [pc, #28]	@ (8002194 <display_start_voice_recognition_msg+0x90>)
 8002176:	f000 facf 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800217a:	f000 f9c1 	bl	8002500 <ssd1306_UpdateScreen>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	08015444 	.word	0x08015444
 800218c:	080131f8 	.word	0x080131f8
 8002190:	08013204 	.word	0x08013204
 8002194:	08013210 	.word	0x08013210

08002198 <countdown_msg>:

void countdown_msg(void){
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 800219e:	2332      	movs	r3, #50	@ 0x32
 80021a0:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 80021a2:	231a      	movs	r3, #26
 80021a4:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 f992 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80021ac:	79ba      	ldrb	r2, [r7, #6]
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fad6 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 80021b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <countdown_msg+0x9c>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	9200      	str	r2, [sp, #0]
 80021be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c0:	481d      	ldr	r0, [pc, #116]	@ (8002238 <countdown_msg+0xa0>)
 80021c2:	f000 faa9 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80021c6:	f000 f99b 	bl	8002500 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80021ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021ce:	f007 f98f 	bl	80094f0 <vTaskDelay>
	ssd1306_Fill(Black);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f000 f97c 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80021d8:	79ba      	ldrb	r2, [r7, #6]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fac0 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 80021e4:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <countdown_msg+0x9c>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	9200      	str	r2, [sp, #0]
 80021ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ec:	4813      	ldr	r0, [pc, #76]	@ (800223c <countdown_msg+0xa4>)
 80021ee:	f000 fa93 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80021f2:	f000 f985 	bl	8002500 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80021f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021fa:	f007 f979 	bl	80094f0 <vTaskDelay>
	ssd1306_Fill(Black);
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f966 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002204:	79ba      	ldrb	r2, [r7, #6]
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f000 faaa 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 8002210:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <countdown_msg+0x9c>)
 8002212:	2201      	movs	r2, #1
 8002214:	9200      	str	r2, [sp, #0]
 8002216:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002218:	4809      	ldr	r0, [pc, #36]	@ (8002240 <countdown_msg+0xa8>)
 800221a:	f000 fa7d 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800221e:	f000 f96f 	bl	8002500 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002222:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002226:	f007 f963 	bl	80094f0 <vTaskDelay>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	08015450 	.word	0x08015450
 8002238:	08013218 	.word	0x08013218
 800223c:	0801321c 	.word	0x0801321c
 8002240:	08013220 	.word	0x08013220

08002244 <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af02      	add	r7, sp, #8
	/*Muestra mensaje que indica que se esta capturando voz*/
	uint8_t x = 10;
 800224a:	230a      	movs	r3, #10
 800224c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002252:	2000      	movs	r0, #0
 8002254:	f000 f93c 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002258:	79ba      	ldrb	r2, [r7, #6]
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fa80 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Capturando", Font_11x18, White);
 8002264:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <display_capturing_voice_msg+0x60>)
 8002266:	2201      	movs	r2, #1
 8002268:	9200      	str	r2, [sp, #0]
 800226a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226c:	480e      	ldr	r0, [pc, #56]	@ (80022a8 <display_capturing_voice_msg+0x64>)
 800226e:	f000 fa53 	bl	8002718 <ssd1306_WriteString>
	x = 50;
 8002272:	2332      	movs	r3, #50	@ 0x32
 8002274:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	3312      	adds	r3, #18
 800227a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800227c:	79ba      	ldrb	r2, [r7, #6]
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fa6e 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("...", Font_11x18, White);
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <display_capturing_voice_msg+0x60>)
 800228a:	2201      	movs	r2, #1
 800228c:	9200      	str	r2, [sp, #0]
 800228e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002290:	4806      	ldr	r0, [pc, #24]	@ (80022ac <display_capturing_voice_msg+0x68>)
 8002292:	f000 fa41 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002296:	f000 f933 	bl	8002500 <ssd1306_UpdateScreen>
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	08015444 	.word	0x08015444
 80022a8:	08013224 	.word	0x08013224
 80022ac:	08013230 	.word	0x08013230

080022b0 <display_recognized_voice_msg>:

void display_recognized_voice_msg(void){
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af02      	add	r7, sp, #8
	/*Muestra mensaje de voz reconocida*/
	uint8_t x = 40;
 80022b6:	2328      	movs	r3, #40	@ 0x28
 80022b8:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80022be:	2000      	movs	r0, #0
 80022c0:	f000 f906 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80022c4:	79ba      	ldrb	r2, [r7, #6]
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa4a 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Voz", Font_11x18, White);
 80022d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002310 <display_recognized_voice_msg+0x60>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	9200      	str	r2, [sp, #0]
 80022d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d8:	480e      	ldr	r0, [pc, #56]	@ (8002314 <display_recognized_voice_msg+0x64>)
 80022da:	f000 fa1d 	bl	8002718 <ssd1306_WriteString>
	x = 10;
 80022de:	230a      	movs	r3, #10
 80022e0:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80022e2:	79bb      	ldrb	r3, [r7, #6]
 80022e4:	3312      	adds	r3, #18
 80022e6:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80022e8:	79ba      	ldrb	r2, [r7, #6]
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fa38 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("reconocida", Font_11x18, White);
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <display_recognized_voice_msg+0x60>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	9200      	str	r2, [sp, #0]
 80022fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fc:	4806      	ldr	r0, [pc, #24]	@ (8002318 <display_recognized_voice_msg+0x68>)
 80022fe:	f000 fa0b 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002302:	f000 f8fd 	bl	8002500 <ssd1306_UpdateScreen>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	08015444 	.word	0x08015444
 8002314:	08013234 	.word	0x08013234
 8002318:	08013238 	.word	0x08013238

0800231c <display_not_recognized_voice_msg>:


void display_not_recognized_voice_msg(void){
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af02      	add	r7, sp, #8
	/*Muestra mensaje de voz no reconocida*/
	uint8_t x = 20;
 8002322:	2314      	movs	r3, #20
 8002324:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f8d0 	bl	80024d0 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002330:	79ba      	ldrb	r2, [r7, #6]
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fa14 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("Voz no", Font_11x18, White);
 800233c:	4b0f      	ldr	r3, [pc, #60]	@ (800237c <display_not_recognized_voice_msg+0x60>)
 800233e:	2201      	movs	r2, #1
 8002340:	9200      	str	r2, [sp, #0]
 8002342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002344:	480e      	ldr	r0, [pc, #56]	@ (8002380 <display_not_recognized_voice_msg+0x64>)
 8002346:	f000 f9e7 	bl	8002718 <ssd1306_WriteString>
	x = 10;
 800234a:	230a      	movs	r3, #10
 800234c:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800234e:	79bb      	ldrb	r3, [r7, #6]
 8002350:	3312      	adds	r3, #18
 8002352:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002354:	79ba      	ldrb	r2, [r7, #6]
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fa02 	bl	8002764 <ssd1306_SetCursor>
	ssd1306_WriteString("reconocida", Font_11x18, White);
 8002360:	4b06      	ldr	r3, [pc, #24]	@ (800237c <display_not_recognized_voice_msg+0x60>)
 8002362:	2201      	movs	r2, #1
 8002364:	9200      	str	r2, [sp, #0]
 8002366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002368:	4806      	ldr	r0, [pc, #24]	@ (8002384 <display_not_recognized_voice_msg+0x68>)
 800236a:	f000 f9d5 	bl	8002718 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800236e:	f000 f8c7 	bl	8002500 <ssd1306_UpdateScreen>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	08015444 	.word	0x08015444
 8002380:	08013244 	.word	0x08013244
 8002384:	08013238 	.word	0x08013238

08002388 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af04      	add	r7, sp, #16
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	2301      	movs	r3, #1
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	1dfb      	adds	r3, r7, #7
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	2200      	movs	r2, #0
 80023b4:	2178      	movs	r1, #120	@ 0x78
 80023b6:	4803      	ldr	r0, [pc, #12]	@ (80023c4 <ssd1306_WriteCommand+0x2c>)
 80023b8:	f003 f874 	bl	80054a4 <HAL_I2C_Mem_Write>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200003a8 	.word	0x200003a8

080023c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af04      	add	r7, sp, #16
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	f04f 32ff 	mov.w	r2, #4294967295
 80023da:	9202      	str	r2, [sp, #8]
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	2240      	movs	r2, #64	@ 0x40
 80023e6:	2178      	movs	r1, #120	@ 0x78
 80023e8:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <ssd1306_WriteData+0x30>)
 80023ea:	f003 f85b 	bl	80054a4 <HAL_I2C_Mem_Write>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003a8 	.word	0x200003a8

080023fc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002400:	f7ff ffc2 	bl	8002388 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8002404:	2064      	movs	r0, #100	@ 0x64
 8002406:	f007 f873 	bl	80094f0 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800240a:	2000      	movs	r0, #0
 800240c:	f000 f9d6 	bl	80027bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002410:	2020      	movs	r0, #32
 8002412:	f7ff ffc1 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff ffbe 	bl	8002398 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800241c:	20b0      	movs	r0, #176	@ 0xb0
 800241e:	f7ff ffbb 	bl	8002398 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002422:	20c8      	movs	r0, #200	@ 0xc8
 8002424:	f7ff ffb8 	bl	8002398 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002428:	2000      	movs	r0, #0
 800242a:	f7ff ffb5 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800242e:	2010      	movs	r0, #16
 8002430:	f7ff ffb2 	bl	8002398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002434:	2040      	movs	r0, #64	@ 0x40
 8002436:	f7ff ffaf 	bl	8002398 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800243a:	20ff      	movs	r0, #255	@ 0xff
 800243c:	f000 f9aa 	bl	8002794 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002440:	20a1      	movs	r0, #161	@ 0xa1
 8002442:	f7ff ffa9 	bl	8002398 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002446:	20a6      	movs	r0, #166	@ 0xa6
 8002448:	f7ff ffa6 	bl	8002398 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800244c:	20a8      	movs	r0, #168	@ 0xa8
 800244e:	f7ff ffa3 	bl	8002398 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002452:	203f      	movs	r0, #63	@ 0x3f
 8002454:	f7ff ffa0 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002458:	20a4      	movs	r0, #164	@ 0xa4
 800245a:	f7ff ff9d 	bl	8002398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800245e:	20d3      	movs	r0, #211	@ 0xd3
 8002460:	f7ff ff9a 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff ff97 	bl	8002398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800246a:	20d5      	movs	r0, #213	@ 0xd5
 800246c:	f7ff ff94 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002470:	20f0      	movs	r0, #240	@ 0xf0
 8002472:	f7ff ff91 	bl	8002398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002476:	20d9      	movs	r0, #217	@ 0xd9
 8002478:	f7ff ff8e 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800247c:	2022      	movs	r0, #34	@ 0x22
 800247e:	f7ff ff8b 	bl	8002398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002482:	20da      	movs	r0, #218	@ 0xda
 8002484:	f7ff ff88 	bl	8002398 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002488:	2012      	movs	r0, #18
 800248a:	f7ff ff85 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800248e:	20db      	movs	r0, #219	@ 0xdb
 8002490:	f7ff ff82 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002494:	2020      	movs	r0, #32
 8002496:	f7ff ff7f 	bl	8002398 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800249a:	208d      	movs	r0, #141	@ 0x8d
 800249c:	f7ff ff7c 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024a0:	2014      	movs	r0, #20
 80024a2:	f7ff ff79 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80024a6:	2001      	movs	r0, #1
 80024a8:	f000 f988 	bl	80027bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f000 f80f 	bl	80024d0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80024b2:	f000 f825 	bl	8002500 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <ssd1306_Init+0xd0>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <ssd1306_Init+0xd0>)
 80024be:	2200      	movs	r2, #0
 80024c0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80024c2:	4b02      	ldr	r3, [pc, #8]	@ (80024cc <ssd1306_Init+0xd0>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	711a      	strb	r2, [r3, #4]
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000968 	.word	0x20000968

080024d0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <ssd1306_Fill+0x14>
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <ssd1306_Fill+0x16>
 80024e4:	23ff      	movs	r3, #255	@ 0xff
 80024e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ea:	4619      	mov	r1, r3
 80024ec:	4803      	ldr	r0, [pc, #12]	@ (80024fc <ssd1306_Fill+0x2c>)
 80024ee:	f00f fd46 	bl	8011f7e <memset>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000568 	.word	0x20000568

08002500 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002506:	2300      	movs	r3, #0
 8002508:	71fb      	strb	r3, [r7, #7]
 800250a:	e016      	b.n	800253a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	3b50      	subs	r3, #80	@ 0x50
 8002510:	b2db      	uxtb	r3, r3
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff40 	bl	8002398 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff ff3d 	bl	8002398 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800251e:	2010      	movs	r0, #16
 8002520:	f7ff ff3a 	bl	8002398 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	01db      	lsls	r3, r3, #7
 8002528:	4a08      	ldr	r2, [pc, #32]	@ (800254c <ssd1306_UpdateScreen+0x4c>)
 800252a:	4413      	add	r3, r2
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff4a 	bl	80023c8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	3301      	adds	r3, #1
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b07      	cmp	r3, #7
 800253e:	d9e5      	bls.n	800250c <ssd1306_UpdateScreen+0xc>
    }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000568 	.word	0x20000568

08002550 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	460b      	mov	r3, r1
 800255c:	71bb      	strb	r3, [r7, #6]
 800255e:	4613      	mov	r3, r2
 8002560:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	db3d      	blt.n	80025e6 <ssd1306_DrawPixel+0x96>
 800256a:	79bb      	ldrb	r3, [r7, #6]
 800256c:	2b3f      	cmp	r3, #63	@ 0x3f
 800256e:	d83a      	bhi.n	80025e6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002570:	797b      	ldrb	r3, [r7, #5]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d11a      	bne.n	80025ac <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002576:	79fa      	ldrb	r2, [r7, #7]
 8002578:	79bb      	ldrb	r3, [r7, #6]
 800257a:	08db      	lsrs	r3, r3, #3
 800257c:	b2d8      	uxtb	r0, r3
 800257e:	4603      	mov	r3, r0
 8002580:	01db      	lsls	r3, r3, #7
 8002582:	4413      	add	r3, r2
 8002584:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <ssd1306_DrawPixel+0xa4>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	b25a      	sxtb	r2, r3
 800258a:	79bb      	ldrb	r3, [r7, #6]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	b25b      	sxtb	r3, r3
 8002598:	4313      	orrs	r3, r2
 800259a:	b259      	sxtb	r1, r3
 800259c:	79fa      	ldrb	r2, [r7, #7]
 800259e:	4603      	mov	r3, r0
 80025a0:	01db      	lsls	r3, r3, #7
 80025a2:	4413      	add	r3, r2
 80025a4:	b2c9      	uxtb	r1, r1
 80025a6:	4a13      	ldr	r2, [pc, #76]	@ (80025f4 <ssd1306_DrawPixel+0xa4>)
 80025a8:	54d1      	strb	r1, [r2, r3]
 80025aa:	e01d      	b.n	80025e8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025ac:	79fa      	ldrb	r2, [r7, #7]
 80025ae:	79bb      	ldrb	r3, [r7, #6]
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	b2d8      	uxtb	r0, r3
 80025b4:	4603      	mov	r3, r0
 80025b6:	01db      	lsls	r3, r3, #7
 80025b8:	4413      	add	r3, r2
 80025ba:	4a0e      	ldr	r2, [pc, #56]	@ (80025f4 <ssd1306_DrawPixel+0xa4>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	b25a      	sxtb	r2, r3
 80025c0:	79bb      	ldrb	r3, [r7, #6]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	4013      	ands	r3, r2
 80025d4:	b259      	sxtb	r1, r3
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	4603      	mov	r3, r0
 80025da:	01db      	lsls	r3, r3, #7
 80025dc:	4413      	add	r3, r2
 80025de:	b2c9      	uxtb	r1, r1
 80025e0:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <ssd1306_DrawPixel+0xa4>)
 80025e2:	54d1      	strb	r1, [r2, r3]
 80025e4:	e000      	b.n	80025e8 <ssd1306_DrawPixel+0x98>
        return;
 80025e6:	bf00      	nop
    }
}
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000568 	.word	0x20000568

080025f8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b089      	sub	sp, #36	@ 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4604      	mov	r4, r0
 8002600:	4638      	mov	r0, r7
 8002602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002606:	4623      	mov	r3, r4
 8002608:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b1f      	cmp	r3, #31
 800260e:	d902      	bls.n	8002616 <ssd1306_WriteChar+0x1e>
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	2b7e      	cmp	r3, #126	@ 0x7e
 8002614:	d901      	bls.n	800261a <ssd1306_WriteChar+0x22>
        return 0;
 8002616:	2300      	movs	r3, #0
 8002618:	e077      	b.n	800270a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800261a:	4b3e      	ldr	r3, [pc, #248]	@ (8002714 <ssd1306_WriteChar+0x11c>)
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	783b      	ldrb	r3, [r7, #0]
 8002622:	4413      	add	r3, r2
 8002624:	2b80      	cmp	r3, #128	@ 0x80
 8002626:	dc06      	bgt.n	8002636 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002628:	4b3a      	ldr	r3, [pc, #232]	@ (8002714 <ssd1306_WriteChar+0x11c>)
 800262a:	885b      	ldrh	r3, [r3, #2]
 800262c:	461a      	mov	r2, r3
 800262e:	787b      	ldrb	r3, [r7, #1]
 8002630:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002632:	2b40      	cmp	r3, #64	@ 0x40
 8002634:	dd01      	ble.n	800263a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002636:	2300      	movs	r3, #0
 8002638:	e067      	b.n	800270a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e04e      	b.n	80026de <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	7bfb      	ldrb	r3, [r7, #15]
 8002644:	3b20      	subs	r3, #32
 8002646:	7879      	ldrb	r1, [r7, #1]
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4619      	mov	r1, r3
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	440b      	add	r3, r1
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e036      	b.n	80026ce <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002670:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <ssd1306_WriteChar+0x11c>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4413      	add	r3, r2
 800267c:	b2d8      	uxtb	r0, r3
 800267e:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <ssd1306_WriteChar+0x11c>)
 8002680:	885b      	ldrh	r3, [r3, #2]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4413      	add	r3, r2
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002690:	4619      	mov	r1, r3
 8002692:	f7ff ff5d 	bl	8002550 <ssd1306_DrawPixel>
 8002696:	e017      	b.n	80026c8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <ssd1306_WriteChar+0x11c>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	b2d8      	uxtb	r0, r3
 80026a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002714 <ssd1306_WriteChar+0x11c>)
 80026a8:	885b      	ldrh	r3, [r3, #2]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	b2d9      	uxtb	r1, r3
 80026b4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	f7ff ff44 	bl	8002550 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	783b      	ldrb	r3, [r7, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d3c3      	bcc.n	8002660 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3301      	adds	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	787b      	ldrb	r3, [r7, #1]
 80026e0:	461a      	mov	r2, r3
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d3ab      	bcc.n	8002640 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <ssd1306_WriteChar+0x11c>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	2a00      	cmp	r2, #0
 80026f0:	d005      	beq.n	80026fe <ssd1306_WriteChar+0x106>
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	3a20      	subs	r2, #32
 80026f8:	440a      	add	r2, r1
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	e000      	b.n	8002700 <ssd1306_WriteChar+0x108>
 80026fe:	783a      	ldrb	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <ssd1306_WriteChar+0x11c>)
 8002706:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3724      	adds	r7, #36	@ 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	bf00      	nop
 8002714:	20000968 	.word	0x20000968

08002718 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	4638      	mov	r0, r7
 8002722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002726:	e013      	b.n	8002750 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	7818      	ldrb	r0, [r3, #0]
 800272c:	7e3b      	ldrb	r3, [r7, #24]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	463b      	mov	r3, r7
 8002732:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002734:	f7ff ff60 	bl	80025f8 <ssd1306_WriteChar>
 8002738:	4603      	mov	r3, r0
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d002      	beq.n	800274a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	e008      	b.n	800275c <ssd1306_WriteString+0x44>
        }
        str++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3301      	adds	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e7      	bne.n	8002728 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	781b      	ldrb	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	460a      	mov	r2, r1
 800276e:	71fb      	strb	r3, [r7, #7]
 8002770:	4613      	mov	r3, r2
 8002772:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	b29a      	uxth	r2, r3
 8002778:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <ssd1306_SetCursor+0x2c>)
 800277a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b03      	ldr	r3, [pc, #12]	@ (8002790 <ssd1306_SetCursor+0x2c>)
 8002782:	805a      	strh	r2, [r3, #2]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	20000968 	.word	0x20000968

08002794 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800279e:	2381      	movs	r3, #129	@ 0x81
 80027a0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fdf7 	bl	8002398 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fdf3 	bl	8002398 <ssd1306_WriteCommand>
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027cc:	23af      	movs	r3, #175	@ 0xaf
 80027ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027d0:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <ssd1306_SetDisplayOn+0x38>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	715a      	strb	r2, [r3, #5]
 80027d6:	e004      	b.n	80027e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027d8:	23ae      	movs	r3, #174	@ 0xae
 80027da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <ssd1306_SetDisplayOn+0x38>)
 80027de:	2200      	movs	r2, #0
 80027e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fdd7 	bl	8002398 <ssd1306_WriteCommand>
}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000968 	.word	0x20000968

080027f8 <handle_keypad_input>:
	TickType_t start_time;
	char buffer[SEQUENCE_LENGTH + 1];
}keypad_context_t;


indicatorMessage handle_keypad_input(char input, char *buffer, uint8_t *send_flag){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	73fb      	strb	r3, [r7, #15]
	static keypad_context_t context = { .current_state = ESPERANDO_DIGITO_1,
										.current_index = 0,
										.start_time = 0,					};
	indicatorMessage current_message = PANTALLA_IDLE;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 800280a:	4b61      	ldr	r3, [pc, #388]	@ (8002990 <handle_keypad_input+0x198>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b07      	cmp	r3, #7
 8002810:	f000 80a1 	beq.w	8002956 <handle_keypad_input+0x15e>
 8002814:	2b07      	cmp	r3, #7
 8002816:	f300 80a8 	bgt.w	800296a <handle_keypad_input+0x172>
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <handle_keypad_input+0x36>
 800281e:	2b00      	cmp	r3, #0
 8002820:	f2c0 80a3 	blt.w	800296a <handle_keypad_input+0x172>
 8002824:	3b01      	subs	r3, #1
 8002826:	2b05      	cmp	r3, #5
 8002828:	f200 809f 	bhi.w	800296a <handle_keypad_input+0x172>
 800282c:	e01c      	b.n	8002868 <handle_keypad_input+0x70>
	case ESPERANDO_DIGITO_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d016      	beq.n	8002862 <handle_keypad_input+0x6a>
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b23      	cmp	r3, #35	@ 0x23
 8002838:	d013      	beq.n	8002862 <handle_keypad_input+0x6a>
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b2a      	cmp	r3, #42	@ 0x2a
 800283e:	d010      	beq.n	8002862 <handle_keypad_input+0x6a>
			buffer[0] = input;													//Guardo digito en el buffer
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 8002846:	4b52      	ldr	r3, [pc, #328]	@ (8002990 <handle_keypad_input+0x198>)
 8002848:	2201      	movs	r2, #1
 800284a:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 800284c:	f006 ff94 	bl	8009778 <xTaskGetTickCount>
 8002850:	4603      	mov	r3, r0
 8002852:	4a4f      	ldr	r2, [pc, #316]	@ (8002990 <handle_keypad_input+0x198>)
 8002854:	6053      	str	r3, [r2, #4]
			context.current_state = ESPERANDO_DIGITO_2;							//Avanzo al siguiente estado
 8002856:	4b4e      	ldr	r3, [pc, #312]	@ (8002990 <handle_keypad_input+0x198>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
			current_message = PANTALLA_INGRESO_KEYPAD;
 800285c:	2302      	movs	r3, #2
 800285e:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = PANTALLA_DE_INICIO;
		}
		break;
 8002860:	e091      	b.n	8002986 <handle_keypad_input+0x18e>
			current_message = PANTALLA_DE_INICIO;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
		break;
 8002866:	e08e      	b.n	8002986 <handle_keypad_input+0x18e>
	case ESPERANDO_DIGITO_3:
	case ESPERANDO_DIGITO_4:
	case ESPERANDO_DIGITO_5:
	case ESPERANDO_DIGITO_6:
	case ESPERANDO_CONFIRMACION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8002868:	f006 ff86 	bl	8009778 <xTaskGetTickCount>
 800286c:	4602      	mov	r2, r0
 800286e:	4b48      	ldr	r3, [pc, #288]	@ (8002990 <handle_keypad_input+0x198>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002878:	4293      	cmp	r3, r2
 800287a:	d866      	bhi.n	800294a <handle_keypad_input+0x152>
			if(input != 0){
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d060      	beq.n	8002944 <handle_keypad_input+0x14c>
				if(input == BORRAR_DIGITO){
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b23      	cmp	r3, #35	@ 0x23
 8002886:	d124      	bne.n	80028d2 <handle_keypad_input+0xda>
					if(context.current_index > 0){
 8002888:	4b41      	ldr	r3, [pc, #260]	@ (8002990 <handle_keypad_input+0x198>)
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d079      	beq.n	8002984 <handle_keypad_input+0x18c>
						context.current_index--;
 8002890:	4b3f      	ldr	r3, [pc, #252]	@ (8002990 <handle_keypad_input+0x198>)
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	3b01      	subs	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b3d      	ldr	r3, [pc, #244]	@ (8002990 <handle_keypad_input+0x198>)
 800289a:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 800289c:	4b3c      	ldr	r3, [pc, #240]	@ (8002990 <handle_keypad_input+0x198>)
 800289e:	785b      	ldrb	r3, [r3, #1]
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4413      	add	r3, r2
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 80028aa:	f006 ff65 	bl	8009778 <xTaskGetTickCount>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a37      	ldr	r2, [pc, #220]	@ (8002990 <handle_keypad_input+0x198>)
 80028b2:	6053      	str	r3, [r2, #4]
						current_message = PANTALLA_BORRAR_KEYPAD;
 80028b4:	2303      	movs	r3, #3
 80028b6:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > ESPERANDO_DIGITO_1) ? context.current_state - 1 : ESPERANDO_DIGITO_1;
 80028b8:	4b35      	ldr	r3, [pc, #212]	@ (8002990 <handle_keypad_input+0x198>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d004      	beq.n	80028ca <handle_keypad_input+0xd2>
 80028c0:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <handle_keypad_input+0x198>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	e000      	b.n	80028cc <handle_keypad_input+0xd4>
 80028ca:	2300      	movs	r3, #0
 80028cc:	4a30      	ldr	r2, [pc, #192]	@ (8002990 <handle_keypad_input+0x198>)
 80028ce:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = PANTALLA_TIMEOUT;
		}
		break;
 80028d0:	e058      	b.n	8002984 <handle_keypad_input+0x18c>
				else if(input == ENTER){
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80028d6:	d10d      	bne.n	80028f4 <handle_keypad_input+0xfc>
					if(context.current_state == ESPERANDO_CONFIRMACION){
 80028d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <handle_keypad_input+0x198>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d103      	bne.n	80028e8 <handle_keypad_input+0xf0>
						context.current_state = BUSQUEDA_DE_USUARIO;
 80028e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002990 <handle_keypad_input+0x198>)
 80028e2:	2207      	movs	r2, #7
 80028e4:	701a      	strb	r2, [r3, #0]
		break;
 80028e6:	e04d      	b.n	8002984 <handle_keypad_input+0x18c>
						context.current_state = SECUENCIA_INCOMPLETA;
 80028e8:	4b29      	ldr	r3, [pc, #164]	@ (8002990 <handle_keypad_input+0x198>)
 80028ea:	2208      	movs	r2, #8
 80028ec:	701a      	strb	r2, [r3, #0]
						current_message = PANTALLA_SECUENCIA_INCOMPLETA;
 80028ee:	230b      	movs	r3, #11
 80028f0:	75fb      	strb	r3, [r7, #23]
		break;
 80028f2:	e047      	b.n	8002984 <handle_keypad_input+0x18c>
					if(context.current_index < SEQUENCE_LENGTH){
 80028f4:	4b26      	ldr	r3, [pc, #152]	@ (8002990 <handle_keypad_input+0x198>)
 80028f6:	785b      	ldrb	r3, [r3, #1]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d843      	bhi.n	8002984 <handle_keypad_input+0x18c>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 80028fc:	4b24      	ldr	r3, [pc, #144]	@ (8002990 <handle_keypad_input+0x198>)
 80028fe:	785b      	ldrb	r3, [r3, #1]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	b2d1      	uxtb	r1, r2
 8002904:	4a22      	ldr	r2, [pc, #136]	@ (8002990 <handle_keypad_input+0x198>)
 8002906:	7051      	strb	r1, [r2, #1]
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	4413      	add	r3, r2
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 8002912:	4b1f      	ldr	r3, [pc, #124]	@ (8002990 <handle_keypad_input+0x198>)
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4413      	add	r3, r2
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8002920:	f006 ff2a 	bl	8009778 <xTaskGetTickCount>
 8002924:	4603      	mov	r3, r0
 8002926:	4a1a      	ldr	r2, [pc, #104]	@ (8002990 <handle_keypad_input+0x198>)
 8002928:	6053      	str	r3, [r2, #4]
						current_message = PANTALLA_INGRESO_KEYPAD;
 800292a:	2302      	movs	r3, #2
 800292c:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != ESPERANDO_CONFIRMACION){
 800292e:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <handle_keypad_input+0x198>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b06      	cmp	r3, #6
 8002934:	d026      	beq.n	8002984 <handle_keypad_input+0x18c>
							context.current_state++;
 8002936:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <handle_keypad_input+0x198>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <handle_keypad_input+0x198>)
 8002940:	701a      	strb	r2, [r3, #0]
		break;
 8002942:	e01f      	b.n	8002984 <handle_keypad_input+0x18c>
				current_message = PANTALLA_IDLE;
 8002944:	2300      	movs	r3, #0
 8002946:	75fb      	strb	r3, [r7, #23]
		break;
 8002948:	e01c      	b.n	8002984 <handle_keypad_input+0x18c>
			context.current_state = TIMEOUT;
 800294a:	4b11      	ldr	r3, [pc, #68]	@ (8002990 <handle_keypad_input+0x198>)
 800294c:	2209      	movs	r2, #9
 800294e:	701a      	strb	r2, [r3, #0]
			current_message = PANTALLA_TIMEOUT;
 8002950:	230a      	movs	r3, #10
 8002952:	75fb      	strb	r3, [r7, #23]
		break;
 8002954:	e016      	b.n	8002984 <handle_keypad_input+0x18c>
	case BUSQUEDA_DE_USUARIO:
		*send_flag = 1;															//Habilito flag para enviar el string
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
		context.current_state = ESPERANDO_DIGITO_1;
 800295c:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <handle_keypad_input+0x198>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 8002962:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <handle_keypad_input+0x198>)
 8002964:	2200      	movs	r2, #0
 8002966:	705a      	strb	r2, [r3, #1]
		//current_message = PANTALLA_DE_INICIO;									//Luego del procesamiento se vuelve al estado inicial
		break;
 8002968:	e00d      	b.n	8002986 <handle_keypad_input+0x18e>
	case SECUENCIA_INCOMPLETA:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 800296a:	2107      	movs	r1, #7
 800296c:	68b8      	ldr	r0, [r7, #8]
 800296e:	f000 fcef 	bl	8003350 <clear_buffer>
		context.current_state = ESPERANDO_DIGITO_1;								//Vuelvo al estado inicial
 8002972:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <handle_keypad_input+0x198>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 8002978:	4b05      	ldr	r3, [pc, #20]	@ (8002990 <handle_keypad_input+0x198>)
 800297a:	2200      	movs	r2, #0
 800297c:	705a      	strb	r2, [r3, #1]
		current_message = PANTALLA_DE_INICIO;
 800297e:	2301      	movs	r3, #1
 8002980:	75fb      	strb	r3, [r7, #23]
		break;
 8002982:	e000      	b.n	8002986 <handle_keypad_input+0x18e>
		break;
 8002984:	bf00      	nop
	}
	return current_message;
 8002986:	7dfb      	ldrb	r3, [r7, #23]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000970 	.word	0x20000970

08002994 <set_row>:
	      	  	  	  	  		  	  	  	  {'4', '5', '6', 'B'},
											  {'7', '8', '9', 'C'},
											  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2201      	movs	r2, #1
 80029a2:	4619      	mov	r1, r3
 80029a4:	4803      	ldr	r0, [pc, #12]	@ (80029b4 <set_row+0x20>)
 80029a6:	f002 fc1f 	bl	80051e8 <HAL_GPIO_WritePin>
	return;
 80029aa:	bf00      	nop
}
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40020800 	.word	0x40020800

080029b8 <reset_row>:

static void reset_row(row_t row){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	2200      	movs	r2, #0
 80029c6:	4619      	mov	r1, r3
 80029c8:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <reset_row+0x20>)
 80029ca:	f002 fc0d 	bl	80051e8 <HAL_GPIO_WritePin>
	return;
 80029ce:	bf00      	nop
}
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020800 	.word	0x40020800

080029dc <read_col>:

static GPIO_PinState read_col(col_t col){
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	4619      	mov	r1, r3
 80029ec:	4803      	ldr	r0, [pc, #12]	@ (80029fc <read_col+0x20>)
 80029ee:	f002 fbe3 	bl	80051b8 <HAL_GPIO_ReadPin>
 80029f2:	4603      	mov	r3, r0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40020800 	.word	0x40020800

08002a00 <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8002a06:	2300      	movs	r3, #0
 8002a08:	71fb      	strb	r3, [r7, #7]
 8002a0a:	e04c      	b.n	8002aa6 <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab8 <read_keypad+0xb8>)
 8002a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ffbd 	bl	8002994 <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	71bb      	strb	r3, [r7, #6]
 8002a1e:	e035      	b.n	8002a8c <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 8002a20:	79bb      	ldrb	r3, [r7, #6]
 8002a22:	4a26      	ldr	r2, [pc, #152]	@ (8002abc <read_keypad+0xbc>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ffd8 	bl	80029dc <read_col>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d129      	bne.n	8002a86 <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 8002a32:	2014      	movs	r0, #20
 8002a34:	f006 fd5c 	bl	80094f0 <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 8002a38:	79bb      	ldrb	r3, [r7, #6]
 8002a3a:	4a20      	ldr	r2, [pc, #128]	@ (8002abc <read_keypad+0xbc>)
 8002a3c:	5cd3      	ldrb	r3, [r2, r3]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ffcc 	bl	80029dc <read_col>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d11d      	bne.n	8002a86 <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	79bb      	ldrb	r3, [r7, #6]
 8002a4e:	491c      	ldr	r1, [pc, #112]	@ (8002ac0 <read_keypad+0xc0>)
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	440a      	add	r2, r1
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 8002a5a:	bf00      	nop
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	4a17      	ldr	r2, [pc, #92]	@ (8002abc <read_keypad+0xbc>)
 8002a60:	5cd3      	ldrb	r3, [r2, r3]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ffba 	bl	80029dc <read_col>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d0f6      	beq.n	8002a5c <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <read_keypad+0xb8>)
 8002a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff ff9e 	bl	80029b8 <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 8002a7c:	200a      	movs	r0, #10
 8002a7e:	f006 fd37 	bl	80094f0 <vTaskDelay>
					return key_pressed;
 8002a82:	797b      	ldrb	r3, [r7, #5]
 8002a84:	e013      	b.n	8002aae <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8002a86:	79bb      	ldrb	r3, [r7, #6]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	71bb      	strb	r3, [r7, #6]
 8002a8c:	79bb      	ldrb	r3, [r7, #6]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d9c6      	bls.n	8002a20 <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	4a08      	ldr	r2, [pc, #32]	@ (8002ab8 <read_keypad+0xb8>)
 8002a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff ff8c 	bl	80029b8 <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	71fb      	strb	r3, [r7, #7]
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d9af      	bls.n	8002a0c <read_keypad+0xc>
	}
	return 0;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000004 	.word	0x20000004
 8002abc:	2000000c 	.word	0x2000000c
 8002ac0:	20000010 	.word	0x20000010

08002ac4 <fir_filter>:
										  -0.02485046961359185, 0.006276987439723166, -0.007413256377189857, -0.01872037528825959, 0.009067929219325404,
										  0.003579388809249739, -0.019344649278080953, 0.009987413560588994, 0.043161199365629975, 0.025663017507547244   };

/*Defino instancias para el filtro fir y la fft*/

static void fir_filter(float32_t *psrc, float32_t *pdst, const float32_t *coeff, uint16_t num_coeff, size_t block_size){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	807b      	strh	r3, [r7, #2]
	static uint8_t fir_init_flag = 0;
	float32_t *fir_state = pvPortMalloc(STATE_SIZE * sizeof(float32_t));
 8002ad2:	f242 00c4 	movw	r0, #8388	@ 0x20c4
 8002ad6:	f007 fd8f 	bl	800a5f8 <pvPortMalloc>
 8002ada:	6178      	str	r0, [r7, #20]
	if(!fir_init_flag){
 8002adc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <fir_filter+0x54>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <fir_filter+0x36>
		arm_fir_init_f32(&fir_instance, num_coeff, (float32_t *)coeff, fir_state, block_size);
 8002ae4:	8879      	ldrh	r1, [r7, #2]
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	480b      	ldr	r0, [pc, #44]	@ (8002b1c <fir_filter+0x58>)
 8002af0:	f00e f9e6 	bl	8010ec0 <arm_fir_init_f32>
		fir_init_flag = 1;
 8002af4:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <fir_filter+0x54>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	701a      	strb	r2, [r3, #0]
	}
	arm_fir_f32(&fir_instance, psrc, pdst, block_size);
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	4806      	ldr	r0, [pc, #24]	@ (8002b1c <fir_filter+0x58>)
 8002b02:	f00e f9ef 	bl	8010ee4 <arm_fir_f32>
	vPortFree(fir_state);
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f007 fe44 	bl	800a794 <vPortFree>
	fir_state = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
	return;
 8002b10:	bf00      	nop
}
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	200009a4 	.word	0x200009a4
 8002b1c:	20000980 	.word	0x20000980

08002b20 <hamming_window>:

static void hamming_window(float32_t *psrc, size_t block_size){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
	// Constantes para la ventana de hamming
	const float32_t alpha = 0.54f;
 8002b2a:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <hamming_window+0x90>)
 8002b2c:	613b      	str	r3, [r7, #16]
	const float32_t beta = 0.46f;
 8002b2e:	4b21      	ldr	r3, [pc, #132]	@ (8002bb4 <hamming_window+0x94>)
 8002b30:	60fb      	str	r3, [r7, #12]
	float32_t hamming_coeff;
	for(size_t i = 0; i < block_size; i++){
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e033      	b.n	8002ba0 <hamming_window+0x80>
		// Calculo el coeficiente de hamming para la muestra actual
		hamming_coeff = alpha - beta * arm_cos_f32((2.0f * PI * i) / (block_size - 1));
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b42:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002bb8 <hamming_window+0x98>
 8002b46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b5a:	eeb0 0a66 	vmov.f32	s0, s13
 8002b5e:	f00e fd0d 	bl	801157c <arm_cos_f32>
 8002b62:	eeb0 7a40 	vmov.f32	s14, s0
 8002b66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b76:	edc7 7a02 	vstr	s15, [r7, #8]
		// Aplico coeficiente de hamming a la muestra de la señal
		psrc[i] *= hamming_coeff;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b96:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < block_size; i++){
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	617b      	str	r3, [r7, #20]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3c7      	bcc.n	8002b38 <hamming_window+0x18>
	}
	return;
 8002ba8:	bf00      	nop
}
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	3f0a3d71 	.word	0x3f0a3d71
 8002bb4:	3eeb851f 	.word	0x3eeb851f
 8002bb8:	40c90fdb 	.word	0x40c90fdb

08002bbc <calculate_fft>:

static void calculate_fft(float32_t *psrc, float32_t *pdst, size_t block_size){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
	static uint8_t fft_init_flag = 0;
	/*Inicializo la instancia de fft si corresponde*/
	if(!fft_init_flag){
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <calculate_fft+0x3c>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d108      	bne.n	8002be2 <calculate_fft+0x26>
		arm_rfft_fast_init_f32(&fft_instance, block_size);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4809      	ldr	r0, [pc, #36]	@ (8002bfc <calculate_fft+0x40>)
 8002bd8:	f00d fc80 	bl	80104dc <arm_rfft_fast_init_f32>
		fft_init_flag = 1;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <calculate_fft+0x3c>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
	}
	/*Calculo la fft*/
	arm_rfft_fast_f32(&fft_instance, psrc, pdst, 0);					//El cero indica que se hace transformada, no antitransformada
 8002be2:	2300      	movs	r3, #0
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	68f9      	ldr	r1, [r7, #12]
 8002be8:	4804      	ldr	r0, [pc, #16]	@ (8002bfc <calculate_fft+0x40>)
 8002bea:	f00d fcfb 	bl	80105e4 <arm_rfft_fast_f32>
	return;
 8002bee:	bf00      	nop
}
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	200009a5 	.word	0x200009a5
 8002bfc:	2000098c 	.word	0x2000098c

08002c00 <normalize_array>:

static void normalize_array(float32_t *psrc, size_t block_size){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	float32_t min_val, max_val;
	uint32_t min_index, max_index;
	float32_t range;
	/*Encuentro el maximo y el minimo del array*/
	arm_min_f32(psrc, block_size, &min_val, &min_index);
 8002c0a:	f107 030c 	add.w	r3, r7, #12
 8002c0e:	f107 0214 	add.w	r2, r7, #20
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f00d fb91 	bl	801033c <arm_min_f32>
	arm_max_f32(psrc, block_size, &max_val, &max_index);
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	f107 0210 	add.w	r2, r7, #16
 8002c22:	6839      	ldr	r1, [r7, #0]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f00d fbf1 	bl	801040c <arm_max_f32>
	/*Calculo el rango*/
	range = max_val - min_val;
 8002c2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c36:	edc7 7a06 	vstr	s15, [r7, #24]
	/*Normalizo el array*/
	for(size_t i = 0; i < block_size; i++){
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e016      	b.n	8002c6e <normalize_array+0x6e>
		psrc[i] = (psrc[i] - min_val) / range;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	ed93 7a00 	vldr	s14, [r3]
 8002c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c50:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c64:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < block_size; i++){
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3e4      	bcc.n	8002c40 <normalize_array+0x40>
	}
	return;
 8002c76:	bf00      	nop
}
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <get_fft_norm_mag>:

static void get_fft_norm_mag(float32_t *psrc, float32_t *pdst, size_t block_size){
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
	/*Se tienen en cuenta la cantidad de numeros complejos, no de elementos en p_src*/
	/*Calculo la magnitud de la fft*/
	arm_cmplx_mag_f32(psrc, pdst, block_size);
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f00e fb8c 	bl	80113ac <arm_cmplx_mag_f32>
	/*Normalizo*/
	normalize_array(pdst, block_size);
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f7ff ffb2 	bl	8002c00 <normalize_array>
	return;
 8002c9c:	bf00      	nop
}
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <process_signal>:

void process_signal(float32_t *psrc, float32_t *pdst, size_t block_size){
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
	/*Reservo memoria para salida filtrada y filtro la señal.*/
	float32_t *filtered = pvPortMalloc(block_size * sizeof(float32_t));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f007 fc9f 	bl	800a5f8 <pvPortMalloc>
 8002cba:	6178      	str	r0, [r7, #20]
	fir_filter(psrc, filtered, filter_taps, NUM_TAPS, block_size);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2332      	movs	r3, #50	@ 0x32
 8002cc2:	4a14      	ldr	r2, [pc, #80]	@ (8002d14 <process_signal+0x70>)
 8002cc4:	6979      	ldr	r1, [r7, #20]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f7ff fefc 	bl	8002ac4 <fir_filter>

	//Aplico ventana de hamming al vector
	hamming_window(filtered, block_size);
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	f7ff ff26 	bl	8002b20 <hamming_window>

	/*Reservo memoria para la salida de FFT y calculo la fft. Libero memoria de salida filtrada*/
	float32_t *fft_output = pvPortMalloc(block_size * sizeof(float32_t));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f007 fc8d 	bl	800a5f8 <pvPortMalloc>
 8002cde:	6138      	str	r0, [r7, #16]
	calculate_fft(filtered, fft_output, block_size);
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6939      	ldr	r1, [r7, #16]
 8002ce4:	6978      	ldr	r0, [r7, #20]
 8002ce6:	f7ff ff69 	bl	8002bbc <calculate_fft>
	vPortFree(filtered);
 8002cea:	6978      	ldr	r0, [r7, #20]
 8002cec:	f007 fd52 	bl	800a794 <vPortFree>
	filtered = NULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

	/*Calculo la magnitud de la fft y libero la memoria ocupada por la fft.*/
	get_fft_norm_mag(fft_output, pdst, block_size / 2);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68b9      	ldr	r1, [r7, #8]
 8002cfc:	6938      	ldr	r0, [r7, #16]
 8002cfe:	f7ff ffbe 	bl	8002c7e <get_fft_norm_mag>
	vPortFree(fft_output);
 8002d02:	6938      	ldr	r0, [r7, #16]
 8002d04:	f007 fd46 	bl	800a794 <vPortFree>
	fft_output = NULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
	return;
 8002d0c:	bf00      	nop
}
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	0801545c 	.word	0x0801545c

08002d18 <compare_features>:

uint8_t compare_features(float32_t *feature_1, float32_t *feature_2, size_t length){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
	size_t bins_within_threshold = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
	float32_t bins_percentage;
	float32_t *diff = pvPortMalloc(length * sizeof(float32_t));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f007 fc63 	bl	800a5f8 <pvPortMalloc>
 8002d32:	61f8      	str	r0, [r7, #28]
	float32_t *abs_diff = pvPortMalloc(length * sizeof(float32_t));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f007 fc5d 	bl	800a5f8 <pvPortMalloc>
 8002d3e:	61b8      	str	r0, [r7, #24]
	/*Resto los feature y calculo el valor absoluto*/
	arm_sub_f32(feature_1, feature_2, diff, length);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f00e fc58 	bl	80115fc <arm_sub_f32>
	arm_abs_f32(diff, abs_diff, length);
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	69f8      	ldr	r0, [r7, #28]
 8002d52:	f00e fc99 	bl	8011688 <arm_abs_f32>
	/*Cuento cuantos bins estan por debajo del threshold*/
	for(size_t i = 0; i < length; i++){
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	e012      	b.n	8002d82 <compare_features+0x6a>
		if(abs_diff[i] <= THRESHOLD){
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	edd3 7a00 	vldr	s15, [r3]
 8002d68:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002dd4 <compare_features+0xbc>
 8002d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	d802      	bhi.n	8002d7c <compare_features+0x64>
			bins_within_threshold++;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	3301      	adds	r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
	for(size_t i = 0; i < length; i++){
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	623b      	str	r3, [r7, #32]
 8002d82:	6a3a      	ldr	r2, [r7, #32]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d3e8      	bcc.n	8002d5c <compare_features+0x44>
		}
	}
	bins_percentage = ((float32_t) bins_within_threshold) / length;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002da2:	edc7 7a05 	vstr	s15, [r7, #20]
	/*Libero la memoria utilizada*/
	vPortFree(diff);
 8002da6:	69f8      	ldr	r0, [r7, #28]
 8002da8:	f007 fcf4 	bl	800a794 <vPortFree>
	vPortFree(abs_diff);
 8002dac:	69b8      	ldr	r0, [r7, #24]
 8002dae:	f007 fcf1 	bl	800a794 <vPortFree>
	/*Chequeo si el porcentaje de bins aceptados supera el threshold*/
	if(bins_percentage >= BIN_PERCENTAGE_THRESHOLD){
 8002db2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002db6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002dd8 <compare_features+0xc0>
 8002dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc2:	db01      	blt.n	8002dc8 <compare_features+0xb0>
		return 1;										//Bloque reconocido
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <compare_features+0xb2>
	}
	else{
		return 0;										//Bloque no reconocido
 8002dc8:	2300      	movs	r3, #0
	}
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3728      	adds	r7, #40	@ 0x28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	3dcccccd 	.word	0x3dcccccd
 8002dd8:	3f4ccccd 	.word	0x3f4ccccd

08002ddc <send_uart>:

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC


void send_uart(char *string){
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fd fa65 	bl	80002b4 <strlen>
 8002dea:	4603      	mov	r3, r0
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4803      	ldr	r0, [pc, #12]	@ (8002e04 <send_uart+0x28>)
 8002df6:	f005 f893 	bl	8007f20 <HAL_UART_Transmit>
	return;
 8002dfa:	bf00      	nop
}
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200004bc 	.word	0x200004bc

08002e08 <mount_sd>:
		send_uart(str);
	}
	return;
}

void mount_sd(char* path){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8002e10:	2201      	movs	r2, #1
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4809      	ldr	r0, [pc, #36]	@ (8002e3c <mount_sd+0x34>)
 8002e16:	f00b ffb1 	bl	800ed7c <f_mount>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b08      	ldr	r3, [pc, #32]	@ (8002e40 <mount_sd+0x38>)
 8002e20:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002e22:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <mount_sd+0x38>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <mount_sd+0x2c>
		send_uart("Error al dmontar la tarjeta SD!!!\n");
 8002e2a:	4806      	ldr	r0, [pc, #24]	@ (8002e44 <mount_sd+0x3c>)
 8002e2c:	f7ff ffd6 	bl	8002ddc <send_uart>
		while(1);
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <mount_sd+0x28>
	}
	return;
 8002e34:	bf00      	nop
}
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200009a8 	.word	0x200009a8
 8002e40:	20000f58 	.word	0x20000f58
 8002e44:	08013250 	.word	0x08013250

08002e48 <unmount_sd>:

void unmount_sd(char* path){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	2000      	movs	r0, #0
 8002e56:	f00b ff91 	bl	800ed7c <f_mount>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <unmount_sd+0x34>)
 8002e60:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002e62:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <unmount_sd+0x34>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <unmount_sd+0x2c>
		send_uart("Error al desmontar la tarjeta SD!!!\n");
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <unmount_sd+0x38>)
 8002e6c:	f7ff ffb6 	bl	8002ddc <send_uart>
		while(1);
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <unmount_sd+0x28>
	}
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000f58 	.word	0x20000f58
 8002e80:	08013274 	.word	0x08013274

08002e84 <check_if_file_exists>:


FRESULT check_if_file_exists(char *filename){
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	fresult = f_stat(filename, &fno);
 8002e8c:	4909      	ldr	r1, [pc, #36]	@ (8002eb4 <check_if_file_exists+0x30>)
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f00d f899 	bl	800ffc6 <f_stat>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <check_if_file_exists+0x34>)
 8002e9a:	701a      	strb	r2, [r3, #0]
	return (fresult != FR_OK) ? FR_NO_FILE : fresult;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <check_if_file_exists+0x34>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <check_if_file_exists+0x24>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e000      	b.n	8002eaa <check_if_file_exists+0x26>
 8002ea8:	2304      	movs	r3, #4
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000e38 	.word	0x20000e38
 8002eb8:	20000f58 	.word	0x20000f58

08002ebc <create_file>:


FRESULT create_file(char *filename, char *header){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ec8:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002ecc:	6018      	str	r0, [r3, #0]
 8002ece:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ed2:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002ed6:	6019      	str	r1, [r3, #0]
	FIL fil;
	/*Creo el archivo*/
	fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 8002ed8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002edc:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002ee0:	f107 0008 	add.w	r0, r7, #8
 8002ee4:	220a      	movs	r2, #10
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	f00b ff9a 	bl	800ee20 <f_open>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <create_file+0xd0>)
 8002ef2:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002ef4:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <create_file+0xd0>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <create_file+0x46>
		return fresult;
 8002efc:	4b23      	ldr	r3, [pc, #140]	@ (8002f8c <create_file+0xd0>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	e03e      	b.n	8002f80 <create_file+0xc4>
	}
	/*Escribo el header*/
	fresult = f_write(&fil, header, strlen(header), &bw);
 8002f02:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f06:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	f7fd f9d2 	bl	80002b4 <strlen>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f16:	f5a3 7116 	sub.w	r1, r3, #600	@ 0x258
 8002f1a:	f107 0008 	add.w	r0, r7, #8
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f90 <create_file+0xd4>)
 8002f20:	6809      	ldr	r1, [r1, #0]
 8002f22:	f00c fb25 	bl	800f570 <f_write>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b18      	ldr	r3, [pc, #96]	@ (8002f8c <create_file+0xd0>)
 8002f2c:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < strlen(header)){
 8002f2e:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <create_file+0xd0>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10b      	bne.n	8002f4e <create_file+0x92>
 8002f36:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f3a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	f7fd f9b8 	bl	80002b4 <strlen>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <create_file+0xd4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d90d      	bls.n	8002f6a <create_file+0xae>
		f_close(&fil);
 8002f4e:	f107 0308 	add.w	r3, r7, #8
 8002f52:	4618      	mov	r0, r3
 8002f54:	f00c fdd2 	bl	800fafc <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;
 8002f58:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <create_file+0xd0>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <create_file+0xaa>
 8002f60:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <create_file+0xd0>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	e00c      	b.n	8002f80 <create_file+0xc4>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e00a      	b.n	8002f80 <create_file+0xc4>
	}
	/*Cierro el archivo*/
	fresult = f_close(&fil);
 8002f6a:	f107 0308 	add.w	r3, r7, #8
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00c fdc4 	bl	800fafc <f_close>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461a      	mov	r2, r3
 8002f78:	4b04      	ldr	r3, [pc, #16]	@ (8002f8c <create_file+0xd0>)
 8002f7a:	701a      	strb	r2, [r3, #0]
	return fresult;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <create_file+0xd0>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	f507 7716 	add.w	r7, r7, #600	@ 0x258
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000f58 	.word	0x20000f58
 8002f90:	20000f60 	.word	0x20000f60

08002f94 <get_time_from_rtc>:

void get_time_from_rtc(char *rtc_lecture){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	@ 0x30
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	6078      	str	r0, [r7, #4]
	/***Esta funcion devuelve en formato string la fecha y hora actual usando el RTC***/
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;
	char *time = pvPortMalloc(15 * sizeof(char));
 8002f9c:	200f      	movs	r0, #15
 8002f9e:	f007 fb2b 	bl	800a5f8 <pvPortMalloc>
 8002fa2:	6278      	str	r0, [r7, #36]	@ 0x24
	/*Obtengo el tiempo actual*/
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	2200      	movs	r2, #0
 8002faa:	4619      	mov	r1, r3
 8002fac:	4817      	ldr	r0, [pc, #92]	@ (800300c <get_time_from_rtc+0x78>)
 8002fae:	f003 fcb8 	bl	8006922 <HAL_RTC_GetTime>
	/*Obtengo la fecha actual*/
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4814      	ldr	r0, [pc, #80]	@ (800300c <get_time_from_rtc+0x78>)
 8002fbc:	f003 fd93 	bl	8006ae6 <HAL_RTC_GetDate>
	/*Guardo fecha y hora en los buffers correspondientes*/
	snprintf(time, 15, "%02d:%02d:%02d ", currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8002fc0:	7c3b      	ldrb	r3, [r7, #16]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	7c7b      	ldrb	r3, [r7, #17]
 8002fc6:	7cba      	ldrb	r2, [r7, #18]
 8002fc8:	9201      	str	r2, [sp, #4]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4a10      	ldr	r2, [pc, #64]	@ (8003010 <get_time_from_rtc+0x7c>)
 8002fd0:	210f      	movs	r1, #15
 8002fd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fd4:	f00e ff32 	bl	8011e3c <sniprintf>
	snprintf(rtc_lecture, 15, "%02d-%02d-%2d ", currentDate.Date, currentDate.Month, 2000 + currentDate.Year);
 8002fd8:	7bbb      	ldrb	r3, [r7, #14]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	7b7b      	ldrb	r3, [r7, #13]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	9200      	str	r2, [sp, #0]
 8002fea:	460b      	mov	r3, r1
 8002fec:	4a09      	ldr	r2, [pc, #36]	@ (8003014 <get_time_from_rtc+0x80>)
 8002fee:	210f      	movs	r1, #15
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f00e ff23 	bl	8011e3c <sniprintf>
	strcat(rtc_lecture, time);
 8002ff6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f00e ffc8 	bl	8011f8e <strcat>
	vPortFree(time);
 8002ffe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003000:	f007 fbc8 	bl	800a794 <vPortFree>
	return;
 8003004:	bf00      	nop
}
 8003006:	3728      	adds	r7, #40	@ 0x28
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	200003fc 	.word	0x200003fc
 8003010:	0801329c 	.word	0x0801329c
 8003014:	080132ac 	.word	0x080132ac

08003018 <save_buffer_on_sd>:

FRESULT save_buffer_on_sd(char *filename, float *buffer, size_t size){
 8003018:	b580      	push	{r7, lr}
 800301a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800301e:	af00      	add	r7, sp, #0
 8003020:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003024:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003028:	6018      	str	r0, [r3, #0]
 800302a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800302e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8003032:	6019      	str	r1, [r3, #0]
 8003034:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003038:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800303c:	601a      	str	r2, [r3, #0]
	 * Es importante que el archivo sea .bin, ya que es más conveniente guardar
	 * los datos en este formato (ocupa menos espacio y es más directa la escritura).
	 */
	//Abro el archivo
	FIL fil;
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);						//Se abre con append por si es necesario seguir escribiendo desde el final
 800303e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003042:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003046:	f107 0010 	add.w	r0, r7, #16
 800304a:	2232      	movs	r2, #50	@ 0x32
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	f00b fee7 	bl	800ee20 <f_open>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	4b24      	ldr	r3, [pc, #144]	@ (80030e8 <save_buffer_on_sd+0xd0>)
 8003058:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 800305a:	4b23      	ldr	r3, [pc, #140]	@ (80030e8 <save_buffer_on_sd+0xd0>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <save_buffer_on_sd+0x50>
		return fresult;
 8003062:	4b21      	ldr	r3, [pc, #132]	@ (80030e8 <save_buffer_on_sd+0xd0>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	e039      	b.n	80030dc <save_buffer_on_sd+0xc4>
	}
	//Escribo los datos del buffer en el archivo
	fresult = f_write(&fil, buffer, FLOAT_SIZE_BYTES(size), &bw);
 8003068:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800306c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	009a      	lsls	r2, r3, #2
 8003074:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8003078:	f5a3 7116 	sub.w	r1, r3, #600	@ 0x258
 800307c:	f107 0010 	add.w	r0, r7, #16
 8003080:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <save_buffer_on_sd+0xd4>)
 8003082:	6809      	ldr	r1, [r1, #0]
 8003084:	f00c fa74 	bl	800f570 <f_write>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <save_buffer_on_sd+0xd0>)
 800308e:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < FLOAT_SIZE_BYTES(size)){
 8003090:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <save_buffer_on_sd+0xd0>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <save_buffer_on_sd+0x94>
 8003098:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800309c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	009a      	lsls	r2, r3, #2
 80030a4:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <save_buffer_on_sd+0xd4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d90d      	bls.n	80030c8 <save_buffer_on_sd+0xb0>
		f_close(&fil);																	//Frente a un error cierro el archivo y salgo de la funcion
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f00c fd23 	bl	800fafc <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;								//Si se escribieron bytes de menos, devuelve FR_DISK_ERR
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <save_buffer_on_sd+0xd0>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <save_buffer_on_sd+0xac>
 80030be:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <save_buffer_on_sd+0xd0>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	e00b      	b.n	80030dc <save_buffer_on_sd+0xc4>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e009      	b.n	80030dc <save_buffer_on_sd+0xc4>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00c fd15 	bl	800fafc <f_close>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <save_buffer_on_sd+0xd0>)
 80030d8:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000f58 	.word	0x20000f58
 80030ec:	20000f60 	.word	0x20000f60

080030f0 <read_buffer_from_sd>:

FRESULT read_buffer_from_sd(char *filename, float *buffer, size_t size, uint32_t current_pos){
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
	 * La funcion esta pensada para leer de a bloques iguales, no guarda la ultima
	 * posicion del puntero de lectura, se debe llevar cuenta externamente.
	 */

	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 80030fe:	2201      	movs	r2, #1
 8003100:	68f9      	ldr	r1, [r7, #12]
 8003102:	4823      	ldr	r0, [pc, #140]	@ (8003190 <read_buffer_from_sd+0xa0>)
 8003104:	f00b fe8c 	bl	800ee20 <f_open>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	4b21      	ldr	r3, [pc, #132]	@ (8003194 <read_buffer_from_sd+0xa4>)
 800310e:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003110:	4b20      	ldr	r3, [pc, #128]	@ (8003194 <read_buffer_from_sd+0xa4>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <read_buffer_from_sd+0x2e>
		return fresult;
 8003118:	4b1e      	ldr	r3, [pc, #120]	@ (8003194 <read_buffer_from_sd+0xa4>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	e033      	b.n	8003186 <read_buffer_from_sd+0x96>
	}

	//Posiciono el puntero de lectura en el archivo
	fresult = f_lseek(&fil, current_pos);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2200      	movs	r2, #0
 8003122:	461c      	mov	r4, r3
 8003124:	4615      	mov	r5, r2
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	4819      	ldr	r0, [pc, #100]	@ (8003190 <read_buffer_from_sd+0xa0>)
 800312c:	f00c fd06 	bl	800fb3c <f_lseek>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	4b17      	ldr	r3, [pc, #92]	@ (8003194 <read_buffer_from_sd+0xa4>)
 8003136:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003138:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <read_buffer_from_sd+0xa4>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <read_buffer_from_sd+0x5c>
		f_close(&fil);
 8003140:	4813      	ldr	r0, [pc, #76]	@ (8003190 <read_buffer_from_sd+0xa0>)
 8003142:	f00c fcdb 	bl	800fafc <f_close>
		return fresult;
 8003146:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <read_buffer_from_sd+0xa4>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	e01c      	b.n	8003186 <read_buffer_from_sd+0x96>
	}

	//Leo el bloque de tamaño size desde el archivo
	fresult = f_read(&fil, buffer, FLOAT_SIZE_BYTES(size), &br);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	009a      	lsls	r2, r3, #2
 8003150:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <read_buffer_from_sd+0xa8>)
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	480e      	ldr	r0, [pc, #56]	@ (8003190 <read_buffer_from_sd+0xa0>)
 8003156:	f00c f89f 	bl	800f298 <f_read>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <read_buffer_from_sd+0xa4>)
 8003160:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <read_buffer_from_sd+0xa4>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <read_buffer_from_sd+0x86>
		f_close(&fil);
 800316a:	4809      	ldr	r0, [pc, #36]	@ (8003190 <read_buffer_from_sd+0xa0>)
 800316c:	f00c fcc6 	bl	800fafc <f_close>
		return fresult;
 8003170:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <read_buffer_from_sd+0xa4>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	e007      	b.n	8003186 <read_buffer_from_sd+0x96>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8003176:	4806      	ldr	r0, [pc, #24]	@ (8003190 <read_buffer_from_sd+0xa0>)
 8003178:	f00c fcc0 	bl	800fafc <f_close>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <read_buffer_from_sd+0xa4>)
 8003182:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bdb0      	pop	{r4, r5, r7, pc}
 800318e:	bf00      	nop
 8003190:	20000be8 	.word	0x20000be8
 8003194:	20000f58 	.word	0x20000f58
 8003198:	20000f5c 	.word	0x20000f5c

0800319c <write_entry>:



FRESULT write_entry(char *filename, char *entry){
 800319c:	b580      	push	{r7, lr}
 800319e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80031a8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80031ac:	6018      	str	r0, [r3, #0]
 80031ae:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80031b2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80031b6:	6019      	str	r1, [r3, #0]
	FIL fil;
	/*Abro el archivo en modo append*/
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 80031b8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80031bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80031c0:	f107 0008 	add.w	r0, r7, #8
 80031c4:	2232      	movs	r2, #50	@ 0x32
 80031c6:	6819      	ldr	r1, [r3, #0]
 80031c8:	f00b fe2a 	bl	800ee20 <f_open>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b24      	ldr	r3, [pc, #144]	@ (8003264 <write_entry+0xc8>)
 80031d2:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK){
 80031d4:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <write_entry+0xc8>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d13b      	bne.n	8003254 <write_entry+0xb8>
		char *buffer = pvPortMalloc(70 * sizeof(char));
 80031dc:	2046      	movs	r0, #70	@ 0x46
 80031de:	f007 fa0b 	bl	800a5f8 <pvPortMalloc>
 80031e2:	f8c7 025c 	str.w	r0, [r7, #604]	@ 0x25c
		snprintf(buffer, 70, "%s\n", entry);
 80031e6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80031ea:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003268 <write_entry+0xcc>)
 80031f2:	2146      	movs	r1, #70	@ 0x46
 80031f4:	f8d7 025c 	ldr.w	r0, [r7, #604]	@ 0x25c
 80031f8:	f00e fe20 	bl	8011e3c <sniprintf>
		/*Escribo la entrada en el archivo*/
		fresult = f_write(&fil, buffer, strlen(buffer), &bw);
 80031fc:	f8d7 025c 	ldr.w	r0, [r7, #604]	@ 0x25c
 8003200:	f7fd f858 	bl	80002b4 <strlen>
 8003204:	4602      	mov	r2, r0
 8003206:	f107 0008 	add.w	r0, r7, #8
 800320a:	4b18      	ldr	r3, [pc, #96]	@ (800326c <write_entry+0xd0>)
 800320c:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 8003210:	f00c f9ae 	bl	800f570 <f_write>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <write_entry+0xc8>)
 800321a:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK || bw < strlen(buffer)){
 800321c:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <write_entry+0xc8>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d108      	bne.n	8003236 <write_entry+0x9a>
 8003224:	f8d7 025c 	ldr.w	r0, [r7, #604]	@ 0x25c
 8003228:	f7fd f844 	bl	80002b4 <strlen>
 800322c:	4602      	mov	r2, r0
 800322e:	4b0f      	ldr	r3, [pc, #60]	@ (800326c <write_entry+0xd0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d901      	bls.n	800323a <write_entry+0x9e>
			return FR_DISK_ERR;
 8003236:	2301      	movs	r3, #1
 8003238:	e00e      	b.n	8003258 <write_entry+0xbc>
		}
		vPortFree(buffer);
 800323a:	f8d7 025c 	ldr.w	r0, [r7, #604]	@ 0x25c
 800323e:	f007 faa9 	bl	800a794 <vPortFree>
		fresult = f_close(&fil);
 8003242:	f107 0308 	add.w	r3, r7, #8
 8003246:	4618      	mov	r0, r3
 8003248:	f00c fc58 	bl	800fafc <f_close>
 800324c:	4603      	mov	r3, r0
 800324e:	461a      	mov	r2, r3
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <write_entry+0xc8>)
 8003252:	701a      	strb	r2, [r3, #0]
	}
	return fresult;
 8003254:	4b03      	ldr	r3, [pc, #12]	@ (8003264 <write_entry+0xc8>)
 8003256:	781b      	ldrb	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000f58 	.word	0x20000f58
 8003268:	080132bc 	.word	0x080132bc
 800326c:	20000f60 	.word	0x20000f60

08003270 <search_user>:

FRESULT search_user(char *filename, char *user_key, char *user_name){
 8003270:	b580      	push	{r7, lr}
 8003272:	b0a6      	sub	sp, #152	@ 0x98
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
	char line[LINE_BUFFER_SIZE];
	char *line_key;
	char *line_user;
	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 800327c:	2201      	movs	r2, #1
 800327e:	68f9      	ldr	r1, [r7, #12]
 8003280:	482f      	ldr	r0, [pc, #188]	@ (8003340 <search_user+0xd0>)
 8003282:	f00b fdcd 	bl	800ee20 <f_open>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	4b2e      	ldr	r3, [pc, #184]	@ (8003344 <search_user+0xd4>)
 800328c:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 800328e:	4b2d      	ldr	r3, [pc, #180]	@ (8003344 <search_user+0xd4>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <search_user+0x2c>
		return fresult;
 8003296:	4b2b      	ldr	r3, [pc, #172]	@ (8003344 <search_user+0xd4>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	e04c      	b.n	8003336 <search_user+0xc6>
	}

	//Descarto el header
	f_gets(line, LINE_BUFFER_SIZE, &fil);
 800329c:	f107 0310 	add.w	r3, r7, #16
 80032a0:	4a27      	ldr	r2, [pc, #156]	@ (8003340 <search_user+0xd0>)
 80032a2:	2180      	movs	r1, #128	@ 0x80
 80032a4:	4618      	mov	r0, r3
 80032a6:	f00c fec7 	bl	8010038 <f_gets>

	//Busco el usuario asociado linea por linea
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 80032aa:	e032      	b.n	8003312 <search_user+0xa2>
		line_key = strtok(line, " ");								//Separo la clave
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	4925      	ldr	r1, [pc, #148]	@ (8003348 <search_user+0xd8>)
 80032b2:	4618      	mov	r0, r3
 80032b4:	f00e fe9a 	bl	8011fec <strtok>
 80032b8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		line_user = strtok(NULL, "\n");								//Separo el usuario
 80032bc:	4923      	ldr	r1, [pc, #140]	@ (800334c <search_user+0xdc>)
 80032be:	2000      	movs	r0, #0
 80032c0:	f00e fe94 	bl	8011fec <strtok>
 80032c4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

		//Comparo clave
		if(line_key && strcmp(line_key, user_key) == 0){
 80032c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01a      	beq.n	8003306 <search_user+0x96>
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80032d6:	f7fc ffe3 	bl	80002a0 <strcmp>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d112      	bne.n	8003306 <search_user+0x96>
			if(line_user){
 80032e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <search_user+0x96>
				strncpy(user_name, line_user, USER_STR_SIZE - 1);
 80032e8:	221d      	movs	r2, #29
 80032ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f00e fe69 	bl	8011fc6 <strncpy>
				user_name[USER_STR_SIZE - 1] = '\0';				//Me aseguro de que haya terminacion nula
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	331d      	adds	r3, #29
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
				f_close(&fil);
 80032fc:	4810      	ldr	r0, [pc, #64]	@ (8003340 <search_user+0xd0>)
 80032fe:	f00c fbfd 	bl	800fafc <f_close>
				return FR_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e017      	b.n	8003336 <search_user+0xc6>
			}
		}

		//Limpio la linea para que no se acumulen caracteres de palabras largas
		clear_buffer(line, LINE_BUFFER_SIZE);
 8003306:	f107 0310 	add.w	r3, r7, #16
 800330a:	2180      	movs	r1, #128	@ 0x80
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f81f 	bl	8003350 <clear_buffer>
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 8003312:	f107 0310 	add.w	r3, r7, #16
 8003316:	4a0a      	ldr	r2, [pc, #40]	@ (8003340 <search_user+0xd0>)
 8003318:	2180      	movs	r1, #128	@ 0x80
 800331a:	4618      	mov	r0, r3
 800331c:	f00c fe8c 	bl	8010038 <f_gets>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1c2      	bne.n	80032ac <search_user+0x3c>
	}

	//Si se llego al final sin encontrar el usuario, devuelve mensaje de error
	fresult = f_close(&fil);
 8003326:	4806      	ldr	r0, [pc, #24]	@ (8003340 <search_user+0xd0>)
 8003328:	f00c fbe8 	bl	800fafc <f_close>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <search_user+0xd4>)
 8003332:	701a      	strb	r2, [r3, #0]
	return FR_NO_FILE;												//Devuelve FR_NO_FILE si no se encuentra el usuario
 8003334:	2304      	movs	r3, #4
}
 8003336:	4618      	mov	r0, r3
 8003338:	3798      	adds	r7, #152	@ 0x98
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000be8 	.word	0x20000be8
 8003344:	20000f58 	.word	0x20000f58
 8003348:	080132c0 	.word	0x080132c0
 800334c:	080132c4 	.word	0x080132c4

08003350 <clear_buffer>:
#include "utils.h"
//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00f      	beq.n	8003380 <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e007      	b.n	8003376 <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d3f3      	bcc.n	8003366 <clear_buffer+0x16>
 800337e:	e000      	b.n	8003382 <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 8003380:	bf00      	nop
    }
}
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <clear_char>:

void clear_char(char *buffer, char character){
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
	char *ptr = buffer;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 800339c:	e006      	b.n	80033ac <clear_char+0x20>
		if(*ptr == 0){
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <clear_char+0x2c>
			break;
		}
		ptr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d1f3      	bne.n	800339e <clear_char+0x12>
 80033b6:	e000      	b.n	80033ba <clear_char+0x2e>
			break;
 80033b8:	bf00      	nop
	}
	*ptr = 0;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
	return;
 80033c0:	bf00      	nop
}
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	indicatorMessage display_message;
	uint8_t counter = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 80033d8:	f7fe fcf8 	bl	8001dcc <display_init>
	display_start_msg();				//Muestro mensaje inicial
 80033dc:	f7fe fcfc 	bl	8001dd8 <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &display_message, portMAX_DELAY);
 80033e0:	4b59      	ldr	r3, [pc, #356]	@ (8003548 <display_task+0x17c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f107 010e 	add.w	r1, r7, #14
 80033e8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ec:	4618      	mov	r0, r3
 80033ee:	f005 fbcd 	bl	8008b8c <xQueueReceive>
		switch(display_message){
 80033f2:	7bbb      	ldrb	r3, [r7, #14]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	2b0a      	cmp	r3, #10
 80033f8:	d8f2      	bhi.n	80033e0 <display_task+0x14>
 80033fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <display_task+0x34>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	0800342d 	.word	0x0800342d
 8003404:	08003433 	.word	0x08003433
 8003408:	0800344b 	.word	0x0800344b
 800340c:	08003461 	.word	0x08003461
 8003410:	0800348f 	.word	0x0800348f
 8003414:	080034a1 	.word	0x080034a1
 8003418:	080034d3 	.word	0x080034d3
 800341c:	080034e1 	.word	0x080034e1
 8003420:	0800350b 	.word	0x0800350b
 8003424:	08003519 	.word	0x08003519
 8003428:	0800352b 	.word	0x0800352b
		case PANTALLA_DE_INICIO:
			display_start_msg();
 800342c:	f7fe fcd4 	bl	8001dd8 <display_start_msg>
			break;
 8003430:	e088      	b.n	8003544 <display_task+0x178>
		case PANTALLA_INGRESO_KEYPAD:
			if(counter < MAX_DIGITS){
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	2b05      	cmp	r3, #5
 8003436:	f200 8081 	bhi.w	800353c <display_task+0x170>
				counter++;
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3301      	adds	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fcfe 	bl	8001e44 <display_sequence_entry_msg>
			}
			break;
 8003448:	e078      	b.n	800353c <display_task+0x170>
		case PANTALLA_BORRAR_KEYPAD:
			if(counter > 0){
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d077      	beq.n	8003540 <display_task+0x174>
				counter--;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	3b01      	subs	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fcf3 	bl	8001e44 <display_sequence_entry_msg>
			}
			break;
 800345e:	e06f      	b.n	8003540 <display_task+0x174>
		case PANTALLA_USUARIO_ENCONTRADO:
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);			//Se utiliza para sincronizar las tareas sd y display
 8003460:	4b3a      	ldr	r3, [pc, #232]	@ (800354c <display_task+0x180>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f04f 31ff 	mov.w	r1, #4294967295
 8003468:	4618      	mov	r0, r3
 800346a:	f005 fc71 	bl	8008d50 <xQueueSemaphoreTake>
			display_user_found_msg();
 800346e:	f7fe fdc9 	bl	8002004 <display_user_found_msg>
			counter = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003476:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800347a:	f006 f839 	bl	80094f0 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 800347e:	4b33      	ldr	r3, [pc, #204]	@ (800354c <display_task+0x180>)
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	2300      	movs	r3, #0
 8003484:	2200      	movs	r2, #0
 8003486:	2100      	movs	r1, #0
 8003488:	f005 fa7e 	bl	8008988 <xQueueGenericSend>
			break;
 800348c:	e05a      	b.n	8003544 <display_task+0x178>
		case PANTALLA_USUARIO_NO_EXISTE:
			display_user_not_found_msg();
 800348e:	f7fe fdef 	bl	8002070 <display_user_not_found_msg>
			counter = 0;							//Reinicio el contador
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003496:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800349a:	f006 f829 	bl	80094f0 <vTaskDelay>
			break;
 800349e:	e051      	b.n	8003544 <display_task+0x178>
		case PANTALLA_RECONOCIMIENTO_DE_VOZ:
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 80034a0:	4b2a      	ldr	r3, [pc, #168]	@ (800354c <display_task+0x180>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295
 80034a8:	4618      	mov	r0, r3
 80034aa:	f005 fc51 	bl	8008d50 <xQueueSemaphoreTake>
			display_start_voice_recognition_msg();
 80034ae:	f7fe fe29 	bl	8002104 <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80034b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034b6:	f006 f81b 	bl	80094f0 <vTaskDelay>
			countdown_msg();
 80034ba:	f7fe fe6d 	bl	8002198 <countdown_msg>
			display_capturing_voice_msg();
 80034be:	f7fe fec1 	bl	8002244 <display_capturing_voice_msg>
			xSemaphoreGive(sd_display_sync);
 80034c2:	4b22      	ldr	r3, [pc, #136]	@ (800354c <display_task+0x180>)
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	2300      	movs	r3, #0
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	f005 fa5c 	bl	8008988 <xQueueGenericSend>
			break;
 80034d0:	e038      	b.n	8003544 <display_task+0x178>
		case PANTALLA_VOZ_RECONOCIDA:
			display_recognized_voice_msg();
 80034d2:	f7fe feed 	bl	80022b0 <display_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80034d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034da:	f006 f809 	bl	80094f0 <vTaskDelay>
			break;
 80034de:	e031      	b.n	8003544 <display_task+0x178>
		case PANTALLA_VOZ_NO_RECONOCIDA:
			display_not_recognized_voice_msg();
 80034e0:	f7fe ff1c 	bl	800231c <display_not_recognized_voice_msg>
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 80034e4:	4b19      	ldr	r3, [pc, #100]	@ (800354c <display_task+0x180>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	4618      	mov	r0, r3
 80034ee:	f005 fc2f 	bl	8008d50 <xQueueSemaphoreTake>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80034f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034f6:	f005 fffb 	bl	80094f0 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 80034fa:	4b14      	ldr	r3, [pc, #80]	@ (800354c <display_task+0x180>)
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	2300      	movs	r3, #0
 8003500:	2200      	movs	r2, #0
 8003502:	2100      	movs	r1, #0
 8003504:	f005 fa40 	bl	8008988 <xQueueGenericSend>
			break;
 8003508:	e01c      	b.n	8003544 <display_task+0x178>
		case PANTALLA_ACCESO_CONCEDIDO:
			display_access_granted_msg();
 800350a:	f7fe fd47 	bl	8001f9c <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 800350e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003512:	f005 ffed 	bl	80094f0 <vTaskDelay>
			break;
 8003516:	e015      	b.n	8003544 <display_task+0x178>
		case PANTALLA_TIMEOUT:
			display_timeout_msg();
 8003518:	f7fe fcd4 	bl	8001ec4 <display_timeout_msg>
			counter = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003520:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003524:	f005 ffe4 	bl	80094f0 <vTaskDelay>
			break;
 8003528:	e00c      	b.n	8003544 <display_task+0x178>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			display_incomplete_entry_msg();
 800352a:	f7fe fced 	bl	8001f08 <display_incomplete_entry_msg>
			counter = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8003532:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003536:	f005 ffdb 	bl	80094f0 <vTaskDelay>
			break;
 800353a:	e003      	b.n	8003544 <display_task+0x178>
			break;
 800353c:	bf00      	nop
 800353e:	e74f      	b.n	80033e0 <display_task+0x14>
			break;
 8003540:	bf00      	nop
 8003542:	e74d      	b.n	80033e0 <display_task+0x14>
		xQueueReceive(display_queue, &display_message, portMAX_DELAY);
 8003544:	e74c      	b.n	80033e0 <display_task+0x14>
 8003546:	bf00      	nop
 8003548:	20000508 	.word	0x20000508
 800354c:	20000510 	.word	0x20000510

08003550 <keypad_task>:
#include "input_sequence_handle.h"
#include "display_functions.h"

char kp_buffer[SEQUENCE_LENGTH + 1] = {0};
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
	char input;
	uint8_t send_flag = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	737b      	strb	r3, [r7, #13]
	indicatorMessage display_message;
	while(1){
		input = read_keypad();
 800355c:	f7ff fa50 	bl	8002a00 <read_keypad>
 8003560:	4603      	mov	r3, r0
 8003562:	73bb      	strb	r3, [r7, #14]
		display_message = handle_keypad_input(input, kp_buffer, &send_flag);
 8003564:	f107 020d 	add.w	r2, r7, #13
 8003568:	7bbb      	ldrb	r3, [r7, #14]
 800356a:	491c      	ldr	r1, [pc, #112]	@ (80035dc <keypad_task+0x8c>)
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff f943 	bl	80027f8 <handle_keypad_input>
 8003572:	4603      	mov	r3, r0
 8003574:	733b      	strb	r3, [r7, #12]
		if(send_flag){
 8003576:	7b7b      	ldrb	r3, [r7, #13]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d022      	beq.n	80035c2 <keypad_task+0x72>
			//Doy el semaforo
			xSemaphoreGive(keypad_sd_sync);
 800357c:	4b18      	ldr	r3, [pc, #96]	@ (80035e0 <keypad_task+0x90>)
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	2300      	movs	r3, #0
 8003582:	2200      	movs	r2, #0
 8003584:	2100      	movs	r1, #0
 8003586:	f005 f9ff 	bl	8008988 <xQueueGenericSend>
			//Envio uno por uno los datos del buffer
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e00c      	b.n	80035aa <keypad_task+0x5a>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 8003590:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <keypad_task+0x94>)
 8003592:	6818      	ldr	r0, [r3, #0]
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	4a11      	ldr	r2, [pc, #68]	@ (80035dc <keypad_task+0x8c>)
 8003598:	1899      	adds	r1, r3, r2
 800359a:	2300      	movs	r3, #0
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	f005 f9f2 	bl	8008988 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	3301      	adds	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b06      	cmp	r3, #6
 80035ae:	d9ef      	bls.n	8003590 <keypad_task+0x40>
			}

			//Bloqueo la tarea keypad hasta que
			xSemaphoreTake(keypad_sd_sync, portMAX_DELAY);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <keypad_task+0x90>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f04f 31ff 	mov.w	r1, #4294967295
 80035b8:	4618      	mov	r0, r3
 80035ba:	f005 fbc9 	bl	8008d50 <xQueueSemaphoreTake>
			//Reinicio el flag de envio
			send_flag = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	737b      	strb	r3, [r7, #13]
		}
		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(display_message != PANTALLA_IDLE){
 80035c2:	7b3b      	ldrb	r3, [r7, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0c9      	beq.n	800355c <keypad_task+0xc>
			xQueueSend(display_queue, &display_message, portMAX_DELAY);
 80035c8:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <keypad_task+0x98>)
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	f107 010c 	add.w	r1, r7, #12
 80035d0:	2300      	movs	r3, #0
 80035d2:	f04f 32ff 	mov.w	r2, #4294967295
 80035d6:	f005 f9d7 	bl	8008988 <xQueueGenericSend>
		input = read_keypad();
 80035da:	e7bf      	b.n	800355c <keypad_task+0xc>
 80035dc:	20000f64 	.word	0x20000f64
 80035e0:	2000050c 	.word	0x2000050c
 80035e4:	20000504 	.word	0x20000504
 80035e8:	20000508 	.word	0x20000508

080035ec <sd_task>:
#define CODE_VERSION 1
/*================[Public task]==========================*/

#if CODE_VERSION == 1
/*Comprobacion de voz simple*/
void sd_task(void *pvParameters){
 80035ec:	b5b0      	push	{r4, r5, r7, lr}
 80035ee:	b08e      	sub	sp, #56	@ 0x38
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	float *output;
	uint8_t is_recognized;
	uint8_t block_counter;

	//Controles iniciales. Verifico archivos importantes
	mount_sd("");															//Monto la tarjeta SD
 80035f4:	48b8      	ldr	r0, [pc, #736]	@ (80038d8 <sd_task+0x2ec>)
 80035f6:	f7ff fc07 	bl	8002e08 <mount_sd>

	//Chequeo existencia de base de datos de usuario
	if(check_if_file_exists("usuarios.txt") == FR_NO_FILE){
 80035fa:	48b8      	ldr	r0, [pc, #736]	@ (80038dc <sd_task+0x2f0>)
 80035fc:	f7ff fc42 	bl	8002e84 <check_if_file_exists>
 8003600:	4603      	mov	r3, r0
 8003602:	2b04      	cmp	r3, #4
 8003604:	d10c      	bne.n	8003620 <sd_task+0x34>
		current_message = PANTALLA_DATABASE_NO_EXISTE;						//Si no existe la base de datos, se muestra mensaje
 8003606:	230d      	movs	r3, #13
 8003608:	75bb      	strb	r3, [r7, #22]
		xQueueSend(display_queue, &current_message, portMAX_DELAY);			//Reiniciar y cargar la base de datos
 800360a:	4bb5      	ldr	r3, [pc, #724]	@ (80038e0 <sd_task+0x2f4>)
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	f107 0116 	add.w	r1, r7, #22
 8003612:	2300      	movs	r3, #0
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	f005 f9b6 	bl	8008988 <xQueueGenericSend>
		while(1);
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <sd_task+0x30>
	}

	//Chequeo si existe registro de accesos
	if(check_if_file_exists("registro.txt") == FR_NO_FILE){
 8003620:	48b0      	ldr	r0, [pc, #704]	@ (80038e4 <sd_task+0x2f8>)
 8003622:	f7ff fc2f 	bl	8002e84 <check_if_file_exists>
 8003626:	4603      	mov	r3, r0
 8003628:	2b04      	cmp	r3, #4
 800362a:	d103      	bne.n	8003634 <sd_task+0x48>
		create_file("registro.txt", "Fecha Usuario Estado\n");				//Si no existe se crea
 800362c:	49ae      	ldr	r1, [pc, #696]	@ (80038e8 <sd_task+0x2fc>)
 800362e:	48ad      	ldr	r0, [pc, #692]	@ (80038e4 <sd_task+0x2f8>)
 8003630:	f7ff fc44 	bl	8002ebc <create_file>
	}
	unmount_sd("");															//Desmonto tarjeta SD en caso de que sea necesario retirarla
 8003634:	48a8      	ldr	r0, [pc, #672]	@ (80038d8 <sd_task+0x2ec>)
 8003636:	f7ff fc07 	bl	8002e48 <unmount_sd>

	while(1){
		//Espero a que llegue la clave de usuario ingresada desde la tarea keypad
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 800363a:	2300      	movs	r3, #0
 800363c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8003640:	e010      	b.n	8003664 <sd_task+0x78>
			xQueueReceive(sequence_queue, &user_key_retrieved[i], portMAX_DELAY);
 8003642:	4baa      	ldr	r3, [pc, #680]	@ (80038ec <sd_task+0x300>)
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800364a:	f107 020c 	add.w	r2, r7, #12
 800364e:	4413      	add	r3, r2
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	4619      	mov	r1, r3
 8003656:	f005 fa99 	bl	8008b8c <xQueueReceive>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 800365a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800365e:	3301      	adds	r3, #1
 8003660:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8003664:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003668:	2b06      	cmp	r3, #6
 800366a:	d9ea      	bls.n	8003642 <sd_task+0x56>
		}
		xSemaphoreTake(keypad_sd_sync, 0);											//Tomo el semaforo para que el keypad no continue su ejecucion
 800366c:	4ba0      	ldr	r3, [pc, #640]	@ (80038f0 <sd_task+0x304>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f005 fb6c 	bl	8008d50 <xQueueSemaphoreTake>

		//Monto la SD para su uso y reservo memoria para guardar strings
		mount_sd("");
 8003678:	4897      	ldr	r0, [pc, #604]	@ (80038d8 <sd_task+0x2ec>)
 800367a:	f7ff fbc5 	bl	8002e08 <mount_sd>
		user_name = pvPortMalloc(USER_STR_SIZE * sizeof(char));						//Reservo espacio en heap para guardar el usuario
 800367e:	201e      	movs	r0, #30
 8003680:	f006 ffba 	bl	800a5f8 <pvPortMalloc>
 8003684:	62f8      	str	r0, [r7, #44]	@ 0x2c
		entry = pvPortMalloc(ENTRY_STR_SIZE * sizeof(char));						//Reservo para guardar la entrada del registro
 8003686:	203c      	movs	r0, #60	@ 0x3c
 8003688:	f006 ffb6 	bl	800a5f8 <pvPortMalloc>
 800368c:	62b8      	str	r0, [r7, #40]	@ 0x28

		//Verifico existencia de clave en el registro
		if(search_user("usuarios.txt", user_key_retrieved, user_name) == FR_OK){
 800368e:	f107 030c 	add.w	r3, r7, #12
 8003692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003694:	4619      	mov	r1, r3
 8003696:	4891      	ldr	r0, [pc, #580]	@ (80038dc <sd_task+0x2f0>)
 8003698:	f7ff fdea 	bl	8003270 <search_user>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f040 8134 	bne.w	800390c <sd_task+0x320>
			//Si existe el usuario en la base de datos, lo muestro por pantalla
			current_message = PANTALLA_USUARIO_ENCONTRADO;
 80036a4:	2304      	movs	r3, #4
 80036a6:	75bb      	strb	r3, [r7, #22]

			//Sincronizo tarea de display y memoria SD
			xSemaphoreGive(sd_display_sync);
 80036a8:	4b92      	ldr	r3, [pc, #584]	@ (80038f4 <sd_task+0x308>)
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	2300      	movs	r3, #0
 80036ae:	2200      	movs	r2, #0
 80036b0:	2100      	movs	r1, #0
 80036b2:	f005 f969 	bl	8008988 <xQueueGenericSend>

			//Envio pantalla al display
			xQueueSend(display_queue, &current_message, portMAX_DELAY);				//Muestro en display que se encontro el usuario
 80036b6:	4b8a      	ldr	r3, [pc, #552]	@ (80038e0 <sd_task+0x2f4>)
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	f107 0116 	add.w	r1, r7, #22
 80036be:	2300      	movs	r3, #0
 80036c0:	f04f 32ff 	mov.w	r2, #4294967295
 80036c4:	f005 f960 	bl	8008988 <xQueueGenericSend>

			//Bloqueo la tarea hasta que el display muestre su mensaje
			xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 80036c8:	4b8a      	ldr	r3, [pc, #552]	@ (80038f4 <sd_task+0x308>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	4618      	mov	r0, r3
 80036d2:	f005 fb3d 	bl	8008d50 <xQueueSemaphoreTake>

			//Limpio el carriage return
			clear_char(user_name, '\r');
 80036d6:	210d      	movs	r1, #13
 80036d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036da:	f7ff fe57 	bl	800338c <clear_char>

			//Verifico existencia de template
			template_path = pvPortMalloc(TEMPLATE_STR_SIZE * sizeof(char));
 80036de:	201e      	movs	r0, #30
 80036e0:	f006 ff8a 	bl	800a5f8 <pvPortMalloc>
 80036e4:	6378      	str	r0, [r7, #52]	@ 0x34
			snprintf(template_path, TEMPLATE_STR_SIZE, "%s.bin", user_name);
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	4a83      	ldr	r2, [pc, #524]	@ (80038f8 <sd_task+0x30c>)
 80036ea:	211e      	movs	r1, #30
 80036ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80036ee:	f00e fba5 	bl	8011e3c <sniprintf>
			if(check_if_file_exists(template_path) == FR_OK){
 80036f2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80036f4:	f7ff fbc6 	bl	8002e84 <check_if_file_exists>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f040 80e9 	bne.w	80038d2 <sd_task+0x2e6>
				//Si existe el template, realizo reconocimiento de voz
				current_message = PANTALLA_RECONOCIMIENTO_DE_VOZ;
 8003700:	2306      	movs	r3, #6
 8003702:	75bb      	strb	r3, [r7, #22]

				//Sincronizo tarea de display y memoria SD
				xSemaphoreGive(sd_display_sync);
 8003704:	4b7b      	ldr	r3, [pc, #492]	@ (80038f4 <sd_task+0x308>)
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	2200      	movs	r2, #0
 800370c:	2100      	movs	r1, #0
 800370e:	f005 f93b 	bl	8008988 <xQueueGenericSend>

				//Envio pantalla al display
				xQueueSend(display_queue, &current_message, portMAX_DELAY);						//Envio el evento de reconocimiento al display
 8003712:	4b73      	ldr	r3, [pc, #460]	@ (80038e0 <sd_task+0x2f4>)
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	f107 0116 	add.w	r1, r7, #22
 800371a:	2300      	movs	r3, #0
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	f005 f932 	bl	8008988 <xQueueGenericSend>

				//Bloqueo la tarea hasta que el display termine el conteo
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);									//Bloqueo la tarea hasta que el display me devuelva el semaforo
 8003724:	4b73      	ldr	r3, [pc, #460]	@ (80038f4 <sd_task+0x308>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f04f 31ff 	mov.w	r1, #4294967295
 800372c:	4618      	mov	r0, r3
 800372e:	f005 fb0f 	bl	8008d50 <xQueueSemaphoreTake>
																								//despues del countdown.

				//Capturo 1.5 segundos de voz
				voice_buffer = pvPortMalloc(VOICE_BUFFER_SIZE * sizeof(uint16_t));
 8003732:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8003736:	f006 ff5f 	bl	800a5f8 <pvPortMalloc>
 800373a:	6278      	str	r0, [r7, #36]	@ 0x24
				current_block = pvPortMalloc(BLOCK_SIZE * sizeof(float));
 800373c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003740:	f006 ff5a 	bl	800a5f8 <pvPortMalloc>
 8003744:	6238      	str	r0, [r7, #32]
				capture_voice(voice_buffer, VOICE_BUFFER_SIZE);
 8003746:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 800374a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800374c:	f7fe fae4 	bl	8001d18 <capture_voice>
				while(!conv_cplt_flag);															//Espero a que termine la captura
 8003750:	bf00      	nop
 8003752:	4b6a      	ldr	r3, [pc, #424]	@ (80038fc <sd_task+0x310>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f083 0301 	eor.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f7      	bne.n	8003752 <sd_task+0x166>
				conv_cplt_flag = false;
 8003762:	4b66      	ldr	r3, [pc, #408]	@ (80038fc <sd_task+0x310>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]

				//Mandar cartel procesando valores

				//Convierto los valores a tension y los guardo en la memoria SD
				for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800376e:	e015      	b.n	800379c <sd_task+0x1b0>
					//La conversion es por bloques para ahorrar espacio
					get_voltage(&voice_buffer[i * BLOCK_SIZE], current_block, BLOCK_SIZE);
 8003770:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003774:	031b      	lsls	r3, r3, #12
 8003776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003778:	4413      	add	r3, r2
 800377a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800377e:	6a39      	ldr	r1, [r7, #32]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fe fae1 	bl	8001d48 <get_voltage>
					save_buffer_on_sd("current voice.bin", current_block, BLOCK_SIZE);
 8003786:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800378a:	6a39      	ldr	r1, [r7, #32]
 800378c:	485c      	ldr	r0, [pc, #368]	@ (8003900 <sd_task+0x314>)
 800378e:	f7ff fc43 	bl	8003018 <save_buffer_on_sd>
				for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 8003792:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003796:	3301      	adds	r3, #1
 8003798:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800379c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d9e5      	bls.n	8003770 <sd_task+0x184>
				}

				//Libero memoria utilizada para poder seguir procesando
				vPortFree(voice_buffer);
 80037a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80037a6:	f006 fff5 	bl	800a794 <vPortFree>
				vPortFree(current_block);
 80037aa:	6a38      	ldr	r0, [r7, #32]
 80037ac:	f006 fff2 	bl	800a794 <vPortFree>

				//Voy leyendo el template y el current voice
				current_block = pvPortMalloc(BLOCK_SIZE * sizeof(float));
 80037b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80037b4:	f006 ff20 	bl	800a5f8 <pvPortMalloc>
 80037b8:	6238      	str	r0, [r7, #32]
				template_block = pvPortMalloc(BLOCK_SIZE / 2 * sizeof(float)); 					//El modulo de la fft tiene la mitad de tamaño
 80037ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80037be:	f006 ff1b 	bl	800a5f8 <pvPortMalloc>
 80037c2:	61f8      	str	r0, [r7, #28]
				output = pvPortMalloc(BLOCK_SIZE / 2 * sizeof(float));
 80037c4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80037c8:	f006 ff16 	bl	800a5f8 <pvPortMalloc>
 80037cc:	61b8      	str	r0, [r7, #24]
				block_counter = 0;																//Reinicio contador de bloques aceptados
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
				for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80037da:	e02c      	b.n	8003836 <sd_task+0x24a>
					//Leo template y voz capturada
					read_buffer_from_sd("current voice.bin", current_block, BLOCK_SIZE, i * BLOCK_SIZE);
 80037dc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80037e0:	02db      	lsls	r3, r3, #11
 80037e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037e6:	6a39      	ldr	r1, [r7, #32]
 80037e8:	4845      	ldr	r0, [pc, #276]	@ (8003900 <sd_task+0x314>)
 80037ea:	f7ff fc81 	bl	80030f0 <read_buffer_from_sd>
					read_buffer_from_sd(template_path, template_block, BLOCK_SIZE / 2, i * (BLOCK_SIZE / 2));
 80037ee:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80037f2:	029b      	lsls	r3, r3, #10
 80037f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f8:	69f9      	ldr	r1, [r7, #28]
 80037fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80037fc:	f7ff fc78 	bl	80030f0 <read_buffer_from_sd>

					//Proceso la voz capturada
					process_signal(current_block, output, BLOCK_SIZE);
 8003800:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003804:	69b9      	ldr	r1, [r7, #24]
 8003806:	6a38      	ldr	r0, [r7, #32]
 8003808:	f7ff fa4c 	bl	8002ca4 <process_signal>

					//Comparo features
					is_recognized = compare_features(output, template_block, BLOCK_SIZE / 2);
 800380c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003810:	69f9      	ldr	r1, [r7, #28]
 8003812:	69b8      	ldr	r0, [r7, #24]
 8003814:	f7ff fa80 	bl	8002d18 <compare_features>
 8003818:	4603      	mov	r3, r0
 800381a:	75fb      	strb	r3, [r7, #23]
					if(!is_recognized){
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00e      	beq.n	8003840 <sd_task+0x254>
						break;																	//Salgo del ciclo si algun bloque no fue reconocido
					}
					block_counter++;
 8003822:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003826:	3301      	adds	r3, #1
 8003828:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
				for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 800382c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003830:	3301      	adds	r3, #1
 8003832:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8003836:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800383a:	2b08      	cmp	r3, #8
 800383c:	d9ce      	bls.n	80037dc <sd_task+0x1f0>
 800383e:	e000      	b.n	8003842 <sd_task+0x256>
						break;																	//Salgo del ciclo si algun bloque no fue reconocido
 8003840:	bf00      	nop
				}

				//Obtengo la hora del RTC y empiezo a armar la entrada del registro
				get_time_from_rtc(entry);
 8003842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003844:	f7ff fba6 	bl	8002f94 <get_time_from_rtc>
				strcat(entry, user_name);														//Concateno fecha, hora y usuario
 8003848:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800384a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800384c:	f00e fb9f 	bl	8011f8e <strcat>

				//Chequeo si todos los bloques pasaron la prueba
				if(block_counter >= NUM_OF_BLOCKS){
 8003850:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003854:	2b08      	cmp	r3, #8
 8003856:	d91b      	bls.n	8003890 <sd_task+0x2a4>
					strcat(entry, " Concedido\n");												//Agrego estado concedido al string
 8003858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800385a:	f7fc fd2b 	bl	80002b4 <strlen>
 800385e:	4603      	mov	r3, r0
 8003860:	461a      	mov	r2, r3
 8003862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003864:	4413      	add	r3, r2
 8003866:	4a27      	ldr	r2, [pc, #156]	@ (8003904 <sd_task+0x318>)
 8003868:	461c      	mov	r4, r3
 800386a:	4613      	mov	r3, r2
 800386c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800386e:	6020      	str	r0, [r4, #0]
 8003870:	6061      	str	r1, [r4, #4]
 8003872:	60a2      	str	r2, [r4, #8]

					//Si todos los bloques pasaron la prueba, se reconoce la voz y se da acceso
					current_message = PANTALLA_VOZ_RECONOCIDA;
 8003874:	2307      	movs	r3, #7
 8003876:	75bb      	strb	r3, [r7, #22]
					xQueueSend(display_queue, &current_message, portMAX_DELAY);					//Envio pantalla de voz reconocida al display
 8003878:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <sd_task+0x2f4>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	f107 0116 	add.w	r1, r7, #22
 8003880:	2300      	movs	r3, #0
 8003882:	f04f 32ff 	mov.w	r2, #4294967295
 8003886:	f005 f87f 	bl	8008988 <xQueueGenericSend>
					current_message = PANTALLA_ACCESO_CONCEDIDO;								//Envio pantalla de acceso concedido
 800388a:	2309      	movs	r3, #9
 800388c:	75bb      	strb	r3, [r7, #22]
 800388e:	e012      	b.n	80038b6 <sd_task+0x2ca>
				}
				else{
					strcat(entry, " Denegado\n");												//Agrego estado denegado al string
 8003890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003892:	f7fc fd0f 	bl	80002b4 <strlen>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	4413      	add	r3, r2
 800389e:	491a      	ldr	r1, [pc, #104]	@ (8003908 <sd_task+0x31c>)
 80038a0:	461a      	mov	r2, r3
 80038a2:	460b      	mov	r3, r1
 80038a4:	cb03      	ldmia	r3!, {r0, r1}
 80038a6:	6010      	str	r0, [r2, #0]
 80038a8:	6051      	str	r1, [r2, #4]
 80038aa:	8819      	ldrh	r1, [r3, #0]
 80038ac:	789b      	ldrb	r3, [r3, #2]
 80038ae:	8111      	strh	r1, [r2, #8]
 80038b0:	7293      	strb	r3, [r2, #10]
					current_message = PANTALLA_VOZ_NO_RECONOCIDA;
 80038b2:	2308      	movs	r3, #8
 80038b4:	75bb      	strb	r3, [r7, #22]
				}

				//Escribo el registro con la nueva entrada
				write_entry("registro.txt", entry);
 80038b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b8:	480a      	ldr	r0, [pc, #40]	@ (80038e4 <sd_task+0x2f8>)
 80038ba:	f7ff fc6f 	bl	800319c <write_entry>

				//Libero memoria usada para el procesamiento
				vPortFree(current_block);
 80038be:	6a38      	ldr	r0, [r7, #32]
 80038c0:	f006 ff68 	bl	800a794 <vPortFree>
				vPortFree(template_block);
 80038c4:	69f8      	ldr	r0, [r7, #28]
 80038c6:	f006 ff65 	bl	800a794 <vPortFree>
				vPortFree(output);
 80038ca:	69b8      	ldr	r0, [r7, #24]
 80038cc:	f006 ff62 	bl	800a794 <vPortFree>
 80038d0:	e038      	b.n	8003944 <sd_task+0x358>
			}
			else{
				//Si no existe el template, no realizo reconocimiento de voz y mando la pantalla
				current_message = PANTALLA_TEMPLATE_NO_EXISTE;
 80038d2:	230c      	movs	r3, #12
 80038d4:	75bb      	strb	r3, [r7, #22]
 80038d6:	e035      	b.n	8003944 <sd_task+0x358>
 80038d8:	080132c8 	.word	0x080132c8
 80038dc:	080132cc 	.word	0x080132cc
 80038e0:	20000508 	.word	0x20000508
 80038e4:	080132dc 	.word	0x080132dc
 80038e8:	080132ec 	.word	0x080132ec
 80038ec:	20000504 	.word	0x20000504
 80038f0:	2000050c 	.word	0x2000050c
 80038f4:	20000510 	.word	0x20000510
 80038f8:	08013304 	.word	0x08013304
 80038fc:	20000514 	.word	0x20000514
 8003900:	0801330c 	.word	0x0801330c
 8003904:	08013320 	.word	0x08013320
 8003908:	0801332c 	.word	0x0801332c
			}
		}
		else{
			//Si no se encuentra el usuario, guardo intento de entrada en el registro
			get_time_from_rtc(entry);												//Obtengo fecha y hora del rtc
 800390c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800390e:	f7ff fb41 	bl	8002f94 <get_time_from_rtc>
			strcat(entry, "Desconocido Denegado");
 8003912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003914:	f7fc fcce 	bl	80002b4 <strlen>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800391e:	4413      	add	r3, r2
 8003920:	4a17      	ldr	r2, [pc, #92]	@ (8003980 <sd_task+0x394>)
 8003922:	461d      	mov	r5, r3
 8003924:	4614      	mov	r4, r2
 8003926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003928:	6028      	str	r0, [r5, #0]
 800392a:	6069      	str	r1, [r5, #4]
 800392c:	60aa      	str	r2, [r5, #8]
 800392e:	60eb      	str	r3, [r5, #12]
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	6128      	str	r0, [r5, #16]
 8003934:	7923      	ldrb	r3, [r4, #4]
 8003936:	752b      	strb	r3, [r5, #20]
			write_entry("registro.txt", entry);										//Escribo entrada en registro
 8003938:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800393a:	4812      	ldr	r0, [pc, #72]	@ (8003984 <sd_task+0x398>)
 800393c:	f7ff fc2e 	bl	800319c <write_entry>
			current_message = PANTALLA_USUARIO_NO_EXISTE;							//Indico en pantalla que no se encontro el usuario
 8003940:	2305      	movs	r3, #5
 8003942:	75bb      	strb	r3, [r7, #22]
		}

		//Libero memoria utilizada para escribir el registro
		vPortFree(entry);
 8003944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003946:	f006 ff25 	bl	800a794 <vPortFree>
		vPortFree(user_name);
 800394a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800394c:	f006 ff22 	bl	800a794 <vPortFree>
		vPortFree(template_path);
 8003950:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003952:	f006 ff1f 	bl	800a794 <vPortFree>

		//Desmonto la tarjeta SD
		unmount_sd("");
 8003956:	480c      	ldr	r0, [pc, #48]	@ (8003988 <sd_task+0x39c>)
 8003958:	f7ff fa76 	bl	8002e48 <unmount_sd>

		//Envio el mensaje al display
		xQueueSend(display_queue, &current_message, portMAX_DELAY);
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <sd_task+0x3a0>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	f107 0116 	add.w	r1, r7, #22
 8003964:	2300      	movs	r3, #0
 8003966:	f04f 32ff 	mov.w	r2, #4294967295
 800396a:	f005 f80d 	bl	8008988 <xQueueGenericSend>

		//Devuelvo el semaforo a la tarea keypad para que pueda continuar su ejecucion
		xSemaphoreGive(keypad_sd_sync);
 800396e:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <sd_task+0x3a4>)
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	2300      	movs	r3, #0
 8003974:	2200      	movs	r2, #0
 8003976:	2100      	movs	r1, #0
 8003978:	f005 f806 	bl	8008988 <xQueueGenericSend>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 800397c:	e65d      	b.n	800363a <sd_task+0x4e>
 800397e:	bf00      	nop
 8003980:	08013338 	.word	0x08013338
 8003984:	080132dc 	.word	0x080132dc
 8003988:	080132c8 	.word	0x080132c8
 800398c:	20000508 	.word	0x20000508
 8003990:	2000050c 	.word	0x2000050c

08003994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003998:	4b0e      	ldr	r3, [pc, #56]	@ (80039d4 <HAL_Init+0x40>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0d      	ldr	r2, [pc, #52]	@ (80039d4 <HAL_Init+0x40>)
 800399e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039a4:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0a      	ldr	r2, [pc, #40]	@ (80039d4 <HAL_Init+0x40>)
 80039aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039b0:	4b08      	ldr	r3, [pc, #32]	@ (80039d4 <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a07      	ldr	r2, [pc, #28]	@ (80039d4 <HAL_Init+0x40>)
 80039b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039bc:	2003      	movs	r0, #3
 80039be:	f000 fe62 	bl	8004686 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039c2:	200f      	movs	r0, #15
 80039c4:	f7fd ffb0 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c8:	f7fd fdd8 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00

080039d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039dc:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <HAL_IncTick+0x20>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <HAL_IncTick+0x24>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4413      	add	r3, r2
 80039e8:	4a04      	ldr	r2, [pc, #16]	@ (80039fc <HAL_IncTick+0x24>)
 80039ea:	6013      	str	r3, [r2, #0]
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000024 	.word	0x20000024
 80039fc:	20000f6c 	.word	0x20000f6c

08003a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  return uwTick;
 8003a04:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <HAL_GetTick+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	20000f6c 	.word	0x20000f6c

08003a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a20:	f7ff ffee 	bl	8003a00 <HAL_GetTick>
 8003a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d005      	beq.n	8003a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a32:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_Delay+0x44>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a3e:	bf00      	nop
 8003a40:	f7ff ffde 	bl	8003a00 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d8f7      	bhi.n	8003a40 <HAL_Delay+0x28>
  {
  }
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000024 	.word	0x20000024

08003a60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e033      	b.n	8003ade <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fda8 	bl	80015d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003aa6:	f023 0302 	bic.w	r3, r3, #2
 8003aaa:	f043 0202 	orr.w	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fbb2 	bl	800421c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ace:	e001      	b.n	8003ad4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 0320 	and.w	r3, r3, #32
 8003b14:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d049      	beq.n	8003bb0 <HAL_ADC_IRQHandler+0xca>
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d046      	beq.n	8003bb0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d12b      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d127      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b56:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d119      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0220 	bic.w	r2, r2, #32
 8003b7a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	f043 0201 	orr.w	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7fd fcbd 	bl	8001520 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0212 	mvn.w	r2, #18
 8003bae:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bbe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d057      	beq.n	8003c76 <HAL_ADC_IRQHandler+0x190>
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d054      	beq.n	8003c76 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d139      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d12b      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d124      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d11d      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d119      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c40:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fc56 	bl	8004518 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 020c 	mvn.w	r2, #12
 8003c74:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c84:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d017      	beq.n	8003cbc <HAL_ADC_IRQHandler+0x1d6>
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d014      	beq.n	8003cbc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10d      	bne.n	8003cbc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f97f 	bl	8003fb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0201 	mvn.w	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cca:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d015      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x218>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cdc:	f043 0202 	orr.w	r2, r3, #2
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0220 	mvn.w	r2, #32
 8003cec:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f968 	bl	8003fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f06f 0220 	mvn.w	r2, #32
 8003cfc:	601a      	str	r2, [r3, #0]
  }
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_ADC_Start_DMA+0x1e>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e0ce      	b.n	8003ec4 <HAL_ADC_Start_DMA+0x1bc>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d018      	beq.n	8003d6e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8003ecc <HAL_ADC_Start_DMA+0x1c4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5f      	ldr	r2, [pc, #380]	@ (8003ed0 <HAL_ADC_Start_DMA+0x1c8>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0c9a      	lsrs	r2, r3, #18
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003d60:	e002      	b.n	8003d68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f9      	bne.n	8003d62 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d7c:	d107      	bne.n	8003d8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d8c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	f040 8086 	bne.w	8003eaa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ddc:	d106      	bne.n	8003dec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	f023 0206 	bic.w	r2, r3, #6
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003dea:	e002      	b.n	8003df2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dfa:	4b36      	ldr	r3, [pc, #216]	@ (8003ed4 <HAL_ADC_Start_DMA+0x1cc>)
 8003dfc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e02:	4a35      	ldr	r2, [pc, #212]	@ (8003ed8 <HAL_ADC_Start_DMA+0x1d0>)
 8003e04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0a:	4a34      	ldr	r2, [pc, #208]	@ (8003edc <HAL_ADC_Start_DMA+0x1d4>)
 8003e0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e12:	4a33      	ldr	r2, [pc, #204]	@ (8003ee0 <HAL_ADC_Start_DMA+0x1d8>)
 8003e14:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003e2e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e3e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	334c      	adds	r3, #76	@ 0x4c
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f000 fcfc 	bl	800484c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10f      	bne.n	8003e80 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d129      	bne.n	8003ec2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	e020      	b.n	8003ec2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a17      	ldr	r2, [pc, #92]	@ (8003ee4 <HAL_ADC_Start_DMA+0x1dc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d11b      	bne.n	8003ec2 <HAL_ADC_Start_DMA+0x1ba>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d114      	bne.n	8003ec2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	e00b      	b.n	8003ec2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f043 0210 	orr.w	r2, r3, #16
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eba:	f043 0201 	orr.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000000 	.word	0x20000000
 8003ed0:	431bde83 	.word	0x431bde83
 8003ed4:	40012300 	.word	0x40012300
 8003ed8:	08004415 	.word	0x08004415
 8003edc:	080044cf 	.word	0x080044cf
 8003ee0:	080044eb 	.word	0x080044eb
 8003ee4:	40012000 	.word	0x40012000

08003ee8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_ADC_Stop_DMA+0x1a>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e048      	b.n	8003f94 <HAL_ADC_Stop_DMA+0xac>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d130      	bne.n	8003f8a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f36:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d10f      	bne.n	8003f66 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fcd6 	bl	80048fc <HAL_DMA_Abort>
 8003f50:	4603      	mov	r3, r0
 8003f52:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003f74:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x1c>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e105      	b.n	8004200 <HAL_ADC_ConfigChannel+0x228>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b09      	cmp	r3, #9
 8004002:	d925      	bls.n	8004050 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68d9      	ldr	r1, [r3, #12]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	b29b      	uxth	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	3b1e      	subs	r3, #30
 800401a:	2207      	movs	r2, #7
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43da      	mvns	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	400a      	ands	r2, r1
 8004028:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68d9      	ldr	r1, [r3, #12]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	4618      	mov	r0, r3
 800403c:	4603      	mov	r3, r0
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	4403      	add	r3, r0
 8004042:	3b1e      	subs	r3, #30
 8004044:	409a      	lsls	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	e022      	b.n	8004096 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6919      	ldr	r1, [r3, #16]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	b29b      	uxth	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	2207      	movs	r2, #7
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43da      	mvns	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	400a      	ands	r2, r1
 8004072:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6919      	ldr	r1, [r3, #16]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	4618      	mov	r0, r3
 8004086:	4603      	mov	r3, r0
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4403      	add	r3, r0
 800408c:	409a      	lsls	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d824      	bhi.n	80040e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	3b05      	subs	r3, #5
 80040b0:	221f      	movs	r2, #31
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43da      	mvns	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	400a      	ands	r2, r1
 80040be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	4618      	mov	r0, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	3b05      	subs	r3, #5
 80040da:	fa00 f203 	lsl.w	r2, r0, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80040e6:	e04c      	b.n	8004182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b0c      	cmp	r3, #12
 80040ee:	d824      	bhi.n	800413a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	3b23      	subs	r3, #35	@ 0x23
 8004102:	221f      	movs	r2, #31
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	43da      	mvns	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	400a      	ands	r2, r1
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	4618      	mov	r0, r3
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	3b23      	subs	r3, #35	@ 0x23
 800412c:	fa00 f203 	lsl.w	r2, r0, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
 8004138:	e023      	b.n	8004182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	3b41      	subs	r3, #65	@ 0x41
 800414c:	221f      	movs	r2, #31
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43da      	mvns	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	400a      	ands	r2, r1
 800415a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4618      	mov	r0, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	3b41      	subs	r3, #65	@ 0x41
 8004176:	fa00 f203 	lsl.w	r2, r0, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <HAL_ADC_ConfigChannel+0x234>)
 8004184:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <HAL_ADC_ConfigChannel+0x238>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d109      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x1cc>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b12      	cmp	r3, #18
 8004196:	d105      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a19      	ldr	r2, [pc, #100]	@ (8004210 <HAL_ADC_ConfigChannel+0x238>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d123      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x21e>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b10      	cmp	r3, #16
 80041b4:	d003      	beq.n	80041be <HAL_ADC_ConfigChannel+0x1e6>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b11      	cmp	r3, #17
 80041bc:	d11b      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b10      	cmp	r3, #16
 80041d0:	d111      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041d2:	4b10      	ldr	r3, [pc, #64]	@ (8004214 <HAL_ADC_ConfigChannel+0x23c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a10      	ldr	r2, [pc, #64]	@ (8004218 <HAL_ADC_ConfigChannel+0x240>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	0c9a      	lsrs	r2, r3, #18
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80041e8:	e002      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f9      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40012300 	.word	0x40012300
 8004210:	40012000 	.word	0x40012000
 8004214:	20000000 	.word	0x20000000
 8004218:	431bde83 	.word	0x431bde83

0800421c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004224:	4b79      	ldr	r3, [pc, #484]	@ (800440c <ADC_Init+0x1f0>)
 8004226:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	431a      	orrs	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	021a      	lsls	r2, r3, #8
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6859      	ldr	r1, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6899      	ldr	r1, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	4a58      	ldr	r2, [pc, #352]	@ (8004410 <ADC_Init+0x1f4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80042e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6899      	ldr	r1, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	e00f      	b.n	800431a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004318:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0202 	bic.w	r2, r2, #2
 8004328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6899      	ldr	r1, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	7e1b      	ldrb	r3, [r3, #24]
 8004334:	005a      	lsls	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d01b      	beq.n	8004380 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004356:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	3b01      	subs	r3, #1
 8004374:	035a      	lsls	r2, r3, #13
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
 800437e:	e007      	b.n	8004390 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800438e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	051a      	lsls	r2, r3, #20
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6899      	ldr	r1, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043d2:	025a      	lsls	r2, r3, #9
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	029a      	lsls	r2, r3, #10
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	40012300 	.word	0x40012300
 8004410:	0f000001 	.word	0x0f000001

08004414 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004420:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004426:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800442a:	2b00      	cmp	r3, #0
 800442c:	d13c      	bne.n	80044a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d12b      	bne.n	80044a0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800444c:	2b00      	cmp	r3, #0
 800444e:	d127      	bne.n	80044a0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004456:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800445a:	2b00      	cmp	r3, #0
 800445c:	d006      	beq.n	800446c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004468:	2b00      	cmp	r3, #0
 800446a:	d119      	bne.n	80044a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0220 	bic.w	r2, r2, #32
 800447a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7fd f83d 	bl	8001520 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044a6:	e00e      	b.n	80044c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff fd85 	bl	8003fc4 <HAL_ADC_ErrorCallback>
}
 80044ba:	e004      	b.n	80044c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044da:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff fd5d 	bl	8003f9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2240      	movs	r2, #64	@ 0x40
 80044fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fd5a 	bl	8003fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <__NVIC_SetPriorityGrouping+0x44>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004548:	4013      	ands	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800455c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800455e:	4a04      	ldr	r2, [pc, #16]	@ (8004570 <__NVIC_SetPriorityGrouping+0x44>)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	60d3      	str	r3, [r2, #12]
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000ed00 	.word	0xe000ed00

08004574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004578:	4b04      	ldr	r3, [pc, #16]	@ (800458c <__NVIC_GetPriorityGrouping+0x18>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	f003 0307 	and.w	r3, r3, #7
}
 8004582:	4618      	mov	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	db0b      	blt.n	80045ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	4907      	ldr	r1, [pc, #28]	@ (80045c8 <__NVIC_EnableIRQ+0x38>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2001      	movs	r0, #1
 80045b2:	fa00 f202 	lsl.w	r2, r0, r2
 80045b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	e000e100 	.word	0xe000e100

080045cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db0a      	blt.n	80045f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	490c      	ldr	r1, [pc, #48]	@ (8004618 <__NVIC_SetPriority+0x4c>)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	0112      	lsls	r2, r2, #4
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	440b      	add	r3, r1
 80045f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045f4:	e00a      	b.n	800460c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4908      	ldr	r1, [pc, #32]	@ (800461c <__NVIC_SetPriority+0x50>)
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	3b04      	subs	r3, #4
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	440b      	add	r3, r1
 800460a:	761a      	strb	r2, [r3, #24]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000e100 	.word	0xe000e100
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	@ 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f1c3 0307 	rsb	r3, r3, #7
 800463a:	2b04      	cmp	r3, #4
 800463c:	bf28      	it	cs
 800463e:	2304      	movcs	r3, #4
 8004640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3304      	adds	r3, #4
 8004646:	2b06      	cmp	r3, #6
 8004648:	d902      	bls.n	8004650 <NVIC_EncodePriority+0x30>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	3b03      	subs	r3, #3
 800464e:	e000      	b.n	8004652 <NVIC_EncodePriority+0x32>
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43da      	mvns	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	401a      	ands	r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004668:	f04f 31ff 	mov.w	r1, #4294967295
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	43d9      	mvns	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004678:	4313      	orrs	r3, r2
         );
}
 800467a:	4618      	mov	r0, r3
 800467c:	3724      	adds	r7, #36	@ 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ff4c 	bl	800452c <__NVIC_SetPriorityGrouping>
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046ae:	f7ff ff61 	bl	8004574 <__NVIC_GetPriorityGrouping>
 80046b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	f7ff ffb1 	bl	8004620 <NVIC_EncodePriority>
 80046be:	4602      	mov	r2, r0
 80046c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff ff80 	bl	80045cc <__NVIC_SetPriority>
}
 80046cc:	bf00      	nop
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ff54 	bl	8004590 <__NVIC_EnableIRQ>
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046fc:	f7ff f980 	bl	8003a00 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e099      	b.n	8004840 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472c:	e00f      	b.n	800474e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472e:	f7ff f967 	bl	8003a00 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b05      	cmp	r3, #5
 800473a:	d908      	bls.n	800474e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e078      	b.n	8004840 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e8      	bne.n	800472e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4b38      	ldr	r3, [pc, #224]	@ (8004848 <HAL_DMA_Init+0x158>)
 8004768:	4013      	ands	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d107      	bne.n	80047b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	4313      	orrs	r3, r2
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0307 	bic.w	r3, r3, #7
 80047ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d117      	bne.n	8004812 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00e      	beq.n	8004812 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fadf 	bl	8004db8 <DMA_CheckFifoParam>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2240      	movs	r2, #64	@ 0x40
 8004804:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800480e:	2301      	movs	r3, #1
 8004810:	e016      	b.n	8004840 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa96 	bl	8004d4c <DMA_CalcBaseAndBitshift>
 8004820:	4603      	mov	r3, r0
 8004822:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	223f      	movs	r2, #63	@ 0x3f
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	f010803f 	.word	0xf010803f

0800484c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004862:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_DMA_Start_IT+0x26>
 800486e:	2302      	movs	r3, #2
 8004870:	e040      	b.n	80048f4 <HAL_DMA_Start_IT+0xa8>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d12f      	bne.n	80048e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fa28 	bl	8004cf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a4:	223f      	movs	r2, #63	@ 0x3f
 80048a6:	409a      	lsls	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0216 	orr.w	r2, r2, #22
 80048ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0208 	orr.w	r2, r2, #8
 80048d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e005      	b.n	80048f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800490a:	f7ff f879 	bl	8003a00 <HAL_GetTick>
 800490e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d008      	beq.n	800492e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2280      	movs	r2, #128	@ 0x80
 8004920:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e052      	b.n	80049d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0216 	bic.w	r2, r2, #22
 800493c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800494c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <HAL_DMA_Abort+0x62>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0208 	bic.w	r2, r2, #8
 800496c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800497e:	e013      	b.n	80049a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004980:	f7ff f83e 	bl	8003a00 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b05      	cmp	r3, #5
 800498c:	d90c      	bls.n	80049a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2203      	movs	r2, #3
 8004998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e015      	b.n	80049d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e4      	bne.n	8004980 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ba:	223f      	movs	r2, #63	@ 0x3f
 80049bc:	409a      	lsls	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049e8:	4b8e      	ldr	r3, [pc, #568]	@ (8004c24 <HAL_DMA_IRQHandler+0x248>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a8e      	ldr	r2, [pc, #568]	@ (8004c28 <HAL_DMA_IRQHandler+0x24c>)
 80049ee:	fba2 2303 	umull	r2, r3, r2, r3
 80049f2:	0a9b      	lsrs	r3, r3, #10
 80049f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a06:	2208      	movs	r2, #8
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01a      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d013      	beq.n	8004a48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0204 	bic.w	r2, r2, #4
 8004a2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a34:	2208      	movs	r2, #8
 8004a36:	409a      	lsls	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	f043 0201 	orr.w	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d012      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a76:	f043 0202 	orr.w	r2, r3, #2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a82:	2204      	movs	r2, #4
 8004a84:	409a      	lsls	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d012      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aac:	f043 0204 	orr.w	r2, r3, #4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	2210      	movs	r2, #16
 8004aba:	409a      	lsls	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d043      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d03c      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d018      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d024      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	4798      	blx	r3
 8004b0a:	e01f      	b.n	8004b4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	4798      	blx	r3
 8004b1c:	e016      	b.n	8004b4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d107      	bne.n	8004b3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0208 	bic.w	r2, r2, #8
 8004b3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b50:	2220      	movs	r2, #32
 8004b52:	409a      	lsls	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 808f 	beq.w	8004c7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 8087 	beq.w	8004c7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b72:	2220      	movs	r2, #32
 8004b74:	409a      	lsls	r2, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b05      	cmp	r3, #5
 8004b84:	d136      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0216 	bic.w	r2, r2, #22
 8004b94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ba4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_DMA_IRQHandler+0x1da>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0208 	bic.w	r2, r2, #8
 8004bc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bca:	223f      	movs	r2, #63	@ 0x3f
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d07e      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
        }
        return;
 8004bf2:	e079      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01d      	beq.n	8004c3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10d      	bne.n	8004c2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d031      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
 8004c20:	e02c      	b.n	8004c7c <HAL_DMA_IRQHandler+0x2a0>
 8004c22:	bf00      	nop
 8004c24:	20000000 	.word	0x20000000
 8004c28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d023      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4798      	blx	r3
 8004c3c:	e01e      	b.n	8004c7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10f      	bne.n	8004c6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0210 	bic.w	r2, r2, #16
 8004c5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d032      	beq.n	8004cea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d022      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2205      	movs	r2, #5
 8004c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d307      	bcc.n	8004cc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f2      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x2cc>
 8004cc2:	e000      	b.n	8004cc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004cc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d005      	beq.n	8004cea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	4798      	blx	r3
 8004ce6:	e000      	b.n	8004cea <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ce8:	bf00      	nop
    }
  }
}
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b40      	cmp	r3, #64	@ 0x40
 8004d1c:	d108      	bne.n	8004d30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d2e:	e007      	b.n	8004d40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3b10      	subs	r3, #16
 8004d5c:	4a14      	ldr	r2, [pc, #80]	@ (8004db0 <DMA_CalcBaseAndBitshift+0x64>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d66:	4a13      	ldr	r2, [pc, #76]	@ (8004db4 <DMA_CalcBaseAndBitshift+0x68>)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d909      	bls.n	8004d8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	1d1a      	adds	r2, r3, #4
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d8c:	e007      	b.n	8004d9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	aaaaaaab 	.word	0xaaaaaaab
 8004db4:	08015524 	.word	0x08015524

08004db8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11f      	bne.n	8004e12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d856      	bhi.n	8004e86 <DMA_CheckFifoParam+0xce>
 8004dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004de0 <DMA_CheckFifoParam+0x28>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004e03 	.word	0x08004e03
 8004de8:	08004df1 	.word	0x08004df1
 8004dec:	08004e87 	.word	0x08004e87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d046      	beq.n	8004e8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e00:	e043      	b.n	8004e8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e0a:	d140      	bne.n	8004e8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e10:	e03d      	b.n	8004e8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1a:	d121      	bne.n	8004e60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d837      	bhi.n	8004e92 <DMA_CheckFifoParam+0xda>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <DMA_CheckFifoParam+0x70>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e39 	.word	0x08004e39
 8004e2c:	08004e3f 	.word	0x08004e3f
 8004e30:	08004e39 	.word	0x08004e39
 8004e34:	08004e51 	.word	0x08004e51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3c:	e030      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d025      	beq.n	8004e96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4e:	e022      	b.n	8004e96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e58:	d11f      	bne.n	8004e9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e5e:	e01c      	b.n	8004e9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d903      	bls.n	8004e6e <DMA_CheckFifoParam+0xb6>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d003      	beq.n	8004e74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e6c:	e018      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
      break;
 8004e72:	e015      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00e      	beq.n	8004e9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e00b      	b.n	8004e9e <DMA_CheckFifoParam+0xe6>
      break;
 8004e86:	bf00      	nop
 8004e88:	e00a      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e008      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e006      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8004e92:	bf00      	nop
 8004e94:	e004      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8004e96:	bf00      	nop
 8004e98:	e002      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e9a:	bf00      	nop
 8004e9c:	e000      	b.n	8004ea0 <DMA_CheckFifoParam+0xe8>
      break;
 8004e9e:	bf00      	nop
    }
  } 
  
  return status; 
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop

08004eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	@ 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	e159      	b.n	8005180 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ecc:	2201      	movs	r2, #1
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4013      	ands	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	f040 8148 	bne.w	800517a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d005      	beq.n	8004f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d130      	bne.n	8004f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f38:	2201      	movs	r2, #1
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	43db      	mvns	r3, r3
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4013      	ands	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 0201 	and.w	r2, r3, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d017      	beq.n	8004fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4013      	ands	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d123      	bne.n	8004ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	08da      	lsrs	r2, r3, #3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	3208      	adds	r2, #8
 8004fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	220f      	movs	r2, #15
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691a      	ldr	r2, [r3, #16]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	08da      	lsrs	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3208      	adds	r2, #8
 8004fee:	69b9      	ldr	r1, [r7, #24]
 8004ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	2203      	movs	r2, #3
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0203 	and.w	r2, r3, #3
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80a2 	beq.w	800517a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	4b57      	ldr	r3, [pc, #348]	@ (8005198 <HAL_GPIO_Init+0x2e8>)
 800503c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800503e:	4a56      	ldr	r2, [pc, #344]	@ (8005198 <HAL_GPIO_Init+0x2e8>)
 8005040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005044:	6453      	str	r3, [r2, #68]	@ 0x44
 8005046:	4b54      	ldr	r3, [pc, #336]	@ (8005198 <HAL_GPIO_Init+0x2e8>)
 8005048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005052:	4a52      	ldr	r2, [pc, #328]	@ (800519c <HAL_GPIO_Init+0x2ec>)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	089b      	lsrs	r3, r3, #2
 8005058:	3302      	adds	r3, #2
 800505a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	220f      	movs	r2, #15
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a49      	ldr	r2, [pc, #292]	@ (80051a0 <HAL_GPIO_Init+0x2f0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d019      	beq.n	80050b2 <HAL_GPIO_Init+0x202>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a48      	ldr	r2, [pc, #288]	@ (80051a4 <HAL_GPIO_Init+0x2f4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_GPIO_Init+0x1fe>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a47      	ldr	r2, [pc, #284]	@ (80051a8 <HAL_GPIO_Init+0x2f8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00d      	beq.n	80050aa <HAL_GPIO_Init+0x1fa>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a46      	ldr	r2, [pc, #280]	@ (80051ac <HAL_GPIO_Init+0x2fc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <HAL_GPIO_Init+0x1f6>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a45      	ldr	r2, [pc, #276]	@ (80051b0 <HAL_GPIO_Init+0x300>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d101      	bne.n	80050a2 <HAL_GPIO_Init+0x1f2>
 800509e:	2304      	movs	r3, #4
 80050a0:	e008      	b.n	80050b4 <HAL_GPIO_Init+0x204>
 80050a2:	2307      	movs	r3, #7
 80050a4:	e006      	b.n	80050b4 <HAL_GPIO_Init+0x204>
 80050a6:	2303      	movs	r3, #3
 80050a8:	e004      	b.n	80050b4 <HAL_GPIO_Init+0x204>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e002      	b.n	80050b4 <HAL_GPIO_Init+0x204>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <HAL_GPIO_Init+0x204>
 80050b2:	2300      	movs	r3, #0
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	f002 0203 	and.w	r2, r2, #3
 80050ba:	0092      	lsls	r2, r2, #2
 80050bc:	4093      	lsls	r3, r2
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050c4:	4935      	ldr	r1, [pc, #212]	@ (800519c <HAL_GPIO_Init+0x2ec>)
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	089b      	lsrs	r3, r3, #2
 80050ca:	3302      	adds	r3, #2
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050d2:	4b38      	ldr	r3, [pc, #224]	@ (80051b4 <HAL_GPIO_Init+0x304>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050f6:	4a2f      	ldr	r2, [pc, #188]	@ (80051b4 <HAL_GPIO_Init+0x304>)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050fc:	4b2d      	ldr	r3, [pc, #180]	@ (80051b4 <HAL_GPIO_Init+0x304>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005120:	4a24      	ldr	r2, [pc, #144]	@ (80051b4 <HAL_GPIO_Init+0x304>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005126:	4b23      	ldr	r3, [pc, #140]	@ (80051b4 <HAL_GPIO_Init+0x304>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	43db      	mvns	r3, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4013      	ands	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800514a:	4a1a      	ldr	r2, [pc, #104]	@ (80051b4 <HAL_GPIO_Init+0x304>)
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005150:	4b18      	ldr	r3, [pc, #96]	@ (80051b4 <HAL_GPIO_Init+0x304>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	43db      	mvns	r3, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4013      	ands	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005174:	4a0f      	ldr	r2, [pc, #60]	@ (80051b4 <HAL_GPIO_Init+0x304>)
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3301      	adds	r3, #1
 800517e:	61fb      	str	r3, [r7, #28]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	2b0f      	cmp	r3, #15
 8005184:	f67f aea2 	bls.w	8004ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3724      	adds	r7, #36	@ 0x24
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40023800 	.word	0x40023800
 800519c:	40013800 	.word	0x40013800
 80051a0:	40020000 	.word	0x40020000
 80051a4:	40020400 	.word	0x40020400
 80051a8:	40020800 	.word	0x40020800
 80051ac:	40020c00 	.word	0x40020c00
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40013c00 	.word	0x40013c00

080051b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	887b      	ldrh	r3, [r7, #2]
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
 80051d4:	e001      	b.n	80051da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051d6:	2300      	movs	r3, #0
 80051d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051da:	7bfb      	ldrb	r3, [r7, #15]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	807b      	strh	r3, [r7, #2]
 80051f4:	4613      	mov	r3, r2
 80051f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051f8:	787b      	ldrb	r3, [r7, #1]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051fe:	887a      	ldrh	r2, [r7, #2]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005204:	e003      	b.n	800520e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005206:	887b      	ldrh	r3, [r7, #2]
 8005208:	041a      	lsls	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	619a      	str	r2, [r3, #24]
}
 800520e:	bf00      	nop
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e12b      	b.n	8005486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fa44 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	@ 0x24
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800526e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800527e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005280:	f001 f8ea 	bl	8006458 <HAL_RCC_GetPCLK1Freq>
 8005284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4a81      	ldr	r2, [pc, #516]	@ (8005490 <HAL_I2C_Init+0x274>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d807      	bhi.n	80052a0 <HAL_I2C_Init+0x84>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a80      	ldr	r2, [pc, #512]	@ (8005494 <HAL_I2C_Init+0x278>)
 8005294:	4293      	cmp	r3, r2
 8005296:	bf94      	ite	ls
 8005298:	2301      	movls	r3, #1
 800529a:	2300      	movhi	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e006      	b.n	80052ae <HAL_I2C_Init+0x92>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a7d      	ldr	r2, [pc, #500]	@ (8005498 <HAL_I2C_Init+0x27c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bf94      	ite	ls
 80052a8:	2301      	movls	r3, #1
 80052aa:	2300      	movhi	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0e7      	b.n	8005486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a78      	ldr	r2, [pc, #480]	@ (800549c <HAL_I2C_Init+0x280>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	0c9b      	lsrs	r3, r3, #18
 80052c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a6a      	ldr	r2, [pc, #424]	@ (8005490 <HAL_I2C_Init+0x274>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d802      	bhi.n	80052f0 <HAL_I2C_Init+0xd4>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	3301      	adds	r3, #1
 80052ee:	e009      	b.n	8005304 <HAL_I2C_Init+0xe8>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	4a69      	ldr	r2, [pc, #420]	@ (80054a0 <HAL_I2C_Init+0x284>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	3301      	adds	r3, #1
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	430b      	orrs	r3, r1
 800530a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005316:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	495c      	ldr	r1, [pc, #368]	@ (8005490 <HAL_I2C_Init+0x274>)
 8005320:	428b      	cmp	r3, r1
 8005322:	d819      	bhi.n	8005358 <HAL_I2C_Init+0x13c>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1e59      	subs	r1, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005338:	400b      	ands	r3, r1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_I2C_Init+0x138>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1e59      	subs	r1, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	fbb1 f3f3 	udiv	r3, r1, r3
 800534c:	3301      	adds	r3, #1
 800534e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005352:	e051      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 8005354:	2304      	movs	r3, #4
 8005356:	e04f      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d111      	bne.n	8005384 <HAL_I2C_Init+0x168>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1e58      	subs	r0, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	440b      	add	r3, r1
 800536e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005372:	3301      	adds	r3, #1
 8005374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e012      	b.n	80053aa <HAL_I2C_Init+0x18e>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1e58      	subs	r0, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6859      	ldr	r1, [r3, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	0099      	lsls	r1, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	fbb0 f3f3 	udiv	r3, r0, r3
 800539a:	3301      	adds	r3, #1
 800539c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_I2C_Init+0x196>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e022      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10e      	bne.n	80053d8 <HAL_I2C_Init+0x1bc>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1e58      	subs	r0, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6859      	ldr	r1, [r3, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	440b      	add	r3, r1
 80053c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053d6:	e00f      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e58      	subs	r0, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	0099      	lsls	r1, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	6809      	ldr	r1, [r1, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005426:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6911      	ldr	r1, [r2, #16]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	4311      	orrs	r1, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	430b      	orrs	r3, r1
 800543a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	000186a0 	.word	0x000186a0
 8005494:	001e847f 	.word	0x001e847f
 8005498:	003d08ff 	.word	0x003d08ff
 800549c:	431bde83 	.word	0x431bde83
 80054a0:	10624dd3 	.word	0x10624dd3

080054a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	4608      	mov	r0, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	461a      	mov	r2, r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	817b      	strh	r3, [r7, #10]
 80054b6:	460b      	mov	r3, r1
 80054b8:	813b      	strh	r3, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054be:	f7fe fa9f 	bl	8003a00 <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	f040 80d9 	bne.w	8005684 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	2319      	movs	r3, #25
 80054d8:	2201      	movs	r2, #1
 80054da:	496d      	ldr	r1, [pc, #436]	@ (8005690 <HAL_I2C_Mem_Write+0x1ec>)
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f971 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	e0cc      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Mem_Write+0x56>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0c5      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b01      	cmp	r3, #1
 800550e:	d007      	beq.n	8005520 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800552e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2221      	movs	r2, #33	@ 0x21
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2240      	movs	r2, #64	@ 0x40
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a4d      	ldr	r2, [pc, #308]	@ (8005694 <HAL_I2C_Mem_Write+0x1f0>)
 8005560:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005562:	88f8      	ldrh	r0, [r7, #6]
 8005564:	893a      	ldrh	r2, [r7, #8]
 8005566:	8979      	ldrh	r1, [r7, #10]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	4603      	mov	r3, r0
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f890 	bl	8005698 <I2C_RequestMemoryWrite>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d052      	beq.n	8005624 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e081      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fa36 	bl	80059f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	2b04      	cmp	r3, #4
 8005598:	d107      	bne.n	80055aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e06b      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	781a      	ldrb	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d11b      	bne.n	8005624 <HAL_I2C_Mem_Write+0x180>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d017      	beq.n	8005624 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1aa      	bne.n	8005582 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fa29 	bl	8005a88 <I2C_WaitOnBTFFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00d      	beq.n	8005658 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	2b04      	cmp	r3, #4
 8005642:	d107      	bne.n	8005654 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005652:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e016      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	00100002 	.word	0x00100002
 8005694:	ffff0000 	.word	0xffff0000

08005698 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	4608      	mov	r0, r1
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	817b      	strh	r3, [r7, #10]
 80056aa:	460b      	mov	r3, r1
 80056ac:	813b      	strh	r3, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 f878 	bl	80057c4 <I2C_WaitOnFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e8:	d103      	bne.n	80056f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e05f      	b.n	80057b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056f6:	897b      	ldrh	r3, [r7, #10]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005704:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	6a3a      	ldr	r2, [r7, #32]
 800570a:	492d      	ldr	r1, [pc, #180]	@ (80057c0 <I2C_RequestMemoryWrite+0x128>)
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f8d3 	bl	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e04c      	b.n	80057b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f95e 	bl	80059f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	2b04      	cmp	r3, #4
 8005748:	d107      	bne.n	800575a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005758:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e02b      	b.n	80057b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d105      	bne.n	8005770 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005764:	893b      	ldrh	r3, [r7, #8]
 8005766:	b2da      	uxtb	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	611a      	str	r2, [r3, #16]
 800576e:	e021      	b.n	80057b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005770:	893b      	ldrh	r3, [r7, #8]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	b29b      	uxth	r3, r3
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800577e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005780:	6a39      	ldr	r1, [r7, #32]
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f938 	bl	80059f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00d      	beq.n	80057aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005792:	2b04      	cmp	r3, #4
 8005794:	d107      	bne.n	80057a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e005      	b.n	80057b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057aa:	893b      	ldrh	r3, [r7, #8]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	00010002 	.word	0x00010002

080057c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057d4:	e048      	b.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d044      	beq.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fe f90f 	bl	8003a00 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d139      	bne.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	0c1b      	lsrs	r3, r3, #16
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10d      	bne.n	800581a <I2C_WaitOnFlagUntilTimeout+0x56>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	43da      	mvns	r2, r3
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	4013      	ands	r3, r2
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	e00c      	b.n	8005834 <I2C_WaitOnFlagUntilTimeout+0x70>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	43da      	mvns	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4013      	ands	r3, r2
 8005826:	b29b      	uxth	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	429a      	cmp	r2, r3
 8005838:	d116      	bne.n	8005868 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e023      	b.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	0c1b      	lsrs	r3, r3, #16
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10d      	bne.n	800588e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	43da      	mvns	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4013      	ands	r3, r2
 800587e:	b29b      	uxth	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	e00c      	b.n	80058a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	43da      	mvns	r2, r3
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d093      	beq.n	80057d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058c6:	e071      	b.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058d6:	d123      	bne.n	8005920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	f043 0204 	orr.w	r2, r3, #4
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e067      	b.n	80059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d041      	beq.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005928:	f7fe f86a 	bl	8003a00 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	d302      	bcc.n	800593e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d136      	bne.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10c      	bne.n	8005962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	43da      	mvns	r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4013      	ands	r3, r2
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	bf14      	ite	ne
 800595a:	2301      	movne	r3, #1
 800595c:	2300      	moveq	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e00b      	b.n	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	43da      	mvns	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	4013      	ands	r3, r2
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf14      	ite	ne
 8005974:	2301      	movne	r3, #1
 8005976:	2300      	moveq	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e021      	b.n	80059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d10c      	bne.n	80059d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	43da      	mvns	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	4013      	ands	r3, r2
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e00b      	b.n	80059e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	43da      	mvns	r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	bf14      	ite	ne
 80059e2:	2301      	movne	r3, #1
 80059e4:	2300      	moveq	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f af6d 	bne.w	80058c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a04:	e034      	b.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 f886 	bl	8005b18 <I2C_IsAcknowledgeFailed>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e034      	b.n	8005a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1c:	d028      	beq.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1e:	f7fd ffef 	bl	8003a00 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d302      	bcc.n	8005a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11d      	bne.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a3e:	2b80      	cmp	r3, #128	@ 0x80
 8005a40:	d016      	beq.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5c:	f043 0220 	orr.w	r2, r3, #32
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e007      	b.n	8005a80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a7a:	2b80      	cmp	r3, #128	@ 0x80
 8005a7c:	d1c3      	bne.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a94:	e034      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 f83e 	bl	8005b18 <I2C_IsAcknowledgeFailed>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e034      	b.n	8005b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d028      	beq.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aae:	f7fd ffa7 	bl	8003a00 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d11d      	bne.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d016      	beq.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aec:	f043 0220 	orr.w	r2, r3, #32
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e007      	b.n	8005b10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d1c3      	bne.n	8005a96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2e:	d11b      	bne.n	8005b68 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b38:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b54:	f043 0204 	orr.w	r2, r3, #4
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e267      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d075      	beq.n	8005c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b96:	4b88      	ldr	r3, [pc, #544]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d00c      	beq.n	8005bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ba2:	4b85      	ldr	r3, [pc, #532]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005baa:	2b08      	cmp	r3, #8
 8005bac:	d112      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bae:	4b82      	ldr	r3, [pc, #520]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bba:	d10b      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d05b      	beq.n	8005c80 <HAL_RCC_OscConfig+0x108>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d157      	bne.n	8005c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e242      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bdc:	d106      	bne.n	8005bec <HAL_RCC_OscConfig+0x74>
 8005bde:	4b76      	ldr	r3, [pc, #472]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a75      	ldr	r2, [pc, #468]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be8:	6013      	str	r3, [r2, #0]
 8005bea:	e01d      	b.n	8005c28 <HAL_RCC_OscConfig+0xb0>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bf4:	d10c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x98>
 8005bf6:	4b70      	ldr	r3, [pc, #448]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6f      	ldr	r2, [pc, #444]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	4b6d      	ldr	r3, [pc, #436]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a6c      	ldr	r2, [pc, #432]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	e00b      	b.n	8005c28 <HAL_RCC_OscConfig+0xb0>
 8005c10:	4b69      	ldr	r3, [pc, #420]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a68      	ldr	r2, [pc, #416]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	4b66      	ldr	r3, [pc, #408]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a65      	ldr	r2, [pc, #404]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d013      	beq.n	8005c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fd fee6 	bl	8003a00 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c38:	f7fd fee2 	bl	8003a00 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b64      	cmp	r3, #100	@ 0x64
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e207      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0xc0>
 8005c56:	e014      	b.n	8005c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c58:	f7fd fed2 	bl	8003a00 <HAL_GetTick>
 8005c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c60:	f7fd fece 	bl	8003a00 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b64      	cmp	r3, #100	@ 0x64
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e1f3      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c72:	4b51      	ldr	r3, [pc, #324]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCC_OscConfig+0xe8>
 8005c7e:	e000      	b.n	8005c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d063      	beq.n	8005d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 030c 	and.w	r3, r3, #12
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00b      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c9a:	4b47      	ldr	r3, [pc, #284]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ca2:	2b08      	cmp	r3, #8
 8005ca4:	d11c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ca6:	4b44      	ldr	r3, [pc, #272]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d116      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cb2:	4b41      	ldr	r3, [pc, #260]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <HAL_RCC_OscConfig+0x152>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d001      	beq.n	8005cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e1c7      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cca:	4b3b      	ldr	r3, [pc, #236]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	4937      	ldr	r1, [pc, #220]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cde:	e03a      	b.n	8005d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce8:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <HAL_RCC_OscConfig+0x244>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cee:	f7fd fe87 	bl	8003a00 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cf6:	f7fd fe83 	bl	8003a00 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e1a8      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d08:	4b2b      	ldr	r3, [pc, #172]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d14:	4b28      	ldr	r3, [pc, #160]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4925      	ldr	r1, [pc, #148]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	600b      	str	r3, [r1, #0]
 8005d28:	e015      	b.n	8005d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d2a:	4b24      	ldr	r3, [pc, #144]	@ (8005dbc <HAL_RCC_OscConfig+0x244>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fd fe66 	bl	8003a00 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d38:	f7fd fe62 	bl	8003a00 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e187      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1f0      	bne.n	8005d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d036      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d016      	beq.n	8005d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <HAL_RCC_OscConfig+0x248>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d70:	f7fd fe46 	bl	8003a00 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d78:	f7fd fe42 	bl	8003a00 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e167      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0f0      	beq.n	8005d78 <HAL_RCC_OscConfig+0x200>
 8005d96:	e01b      	b.n	8005dd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d98:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <HAL_RCC_OscConfig+0x248>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9e:	f7fd fe2f 	bl	8003a00 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da4:	e00e      	b.n	8005dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da6:	f7fd fe2b 	bl	8003a00 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d907      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e150      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	42470000 	.word	0x42470000
 8005dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc4:	4b88      	ldr	r3, [pc, #544]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ea      	bne.n	8005da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 8097 	beq.w	8005f0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dde:	2300      	movs	r3, #0
 8005de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005de2:	4b81      	ldr	r3, [pc, #516]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dee:	2300      	movs	r3, #0
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	4b7d      	ldr	r3, [pc, #500]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	4a7c      	ldr	r2, [pc, #496]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e06:	60bb      	str	r3, [r7, #8]
 8005e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0e:	4b77      	ldr	r3, [pc, #476]	@ (8005fec <HAL_RCC_OscConfig+0x474>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d118      	bne.n	8005e4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e1a:	4b74      	ldr	r3, [pc, #464]	@ (8005fec <HAL_RCC_OscConfig+0x474>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a73      	ldr	r2, [pc, #460]	@ (8005fec <HAL_RCC_OscConfig+0x474>)
 8005e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e26:	f7fd fdeb 	bl	8003a00 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2e:	f7fd fde7 	bl	8003a00 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e10c      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e40:	4b6a      	ldr	r3, [pc, #424]	@ (8005fec <HAL_RCC_OscConfig+0x474>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0f0      	beq.n	8005e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d106      	bne.n	8005e62 <HAL_RCC_OscConfig+0x2ea>
 8005e54:	4b64      	ldr	r3, [pc, #400]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e58:	4a63      	ldr	r2, [pc, #396]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e60:	e01c      	b.n	8005e9c <HAL_RCC_OscConfig+0x324>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d10c      	bne.n	8005e84 <HAL_RCC_OscConfig+0x30c>
 8005e6a:	4b5f      	ldr	r3, [pc, #380]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e70:	f043 0304 	orr.w	r3, r3, #4
 8005e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e76:	4b5c      	ldr	r3, [pc, #368]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7a:	4a5b      	ldr	r2, [pc, #364]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e82:	e00b      	b.n	8005e9c <HAL_RCC_OscConfig+0x324>
 8005e84:	4b58      	ldr	r3, [pc, #352]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e88:	4a57      	ldr	r2, [pc, #348]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e90:	4b55      	ldr	r3, [pc, #340]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e94:	4a54      	ldr	r2, [pc, #336]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005e96:	f023 0304 	bic.w	r3, r3, #4
 8005e9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d015      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea4:	f7fd fdac 	bl	8003a00 <HAL_GetTick>
 8005ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eaa:	e00a      	b.n	8005ec2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eac:	f7fd fda8 	bl	8003a00 <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e0cb      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec2:	4b49      	ldr	r3, [pc, #292]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0ee      	beq.n	8005eac <HAL_RCC_OscConfig+0x334>
 8005ece:	e014      	b.n	8005efa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed0:	f7fd fd96 	bl	8003a00 <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ed6:	e00a      	b.n	8005eee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed8:	f7fd fd92 	bl	8003a00 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e0b5      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eee:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ee      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d105      	bne.n	8005f0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f00:	4b39      	ldr	r3, [pc, #228]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f04:	4a38      	ldr	r2, [pc, #224]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 80a1 	beq.w	8006058 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f16:	4b34      	ldr	r3, [pc, #208]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d05c      	beq.n	8005fdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d141      	bne.n	8005fae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f2a:	4b31      	ldr	r3, [pc, #196]	@ (8005ff0 <HAL_RCC_OscConfig+0x478>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f30:	f7fd fd66 	bl	8003a00 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f38:	f7fd fd62 	bl	8003a00 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e087      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4a:	4b27      	ldr	r3, [pc, #156]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69da      	ldr	r2, [r3, #28]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	019b      	lsls	r3, r3, #6
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	085b      	lsrs	r3, r3, #1
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	041b      	lsls	r3, r3, #16
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	491b      	ldr	r1, [pc, #108]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff0 <HAL_RCC_OscConfig+0x478>)
 8005f82:	2201      	movs	r2, #1
 8005f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f86:	f7fd fd3b 	bl	8003a00 <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f8e:	f7fd fd37 	bl	8003a00 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e05c      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fa0:	4b11      	ldr	r3, [pc, #68]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f0      	beq.n	8005f8e <HAL_RCC_OscConfig+0x416>
 8005fac:	e054      	b.n	8006058 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fae:	4b10      	ldr	r3, [pc, #64]	@ (8005ff0 <HAL_RCC_OscConfig+0x478>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb4:	f7fd fd24 	bl	8003a00 <HAL_GetTick>
 8005fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fba:	e008      	b.n	8005fce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fbc:	f7fd fd20 	bl	8003a00 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e045      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1f0      	bne.n	8005fbc <HAL_RCC_OscConfig+0x444>
 8005fda:	e03d      	b.n	8006058 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d107      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e038      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	40007000 	.word	0x40007000
 8005ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8006064 <HAL_RCC_OscConfig+0x4ec>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d028      	beq.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800600c:	429a      	cmp	r2, r3
 800600e:	d121      	bne.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800601a:	429a      	cmp	r2, r3
 800601c:	d11a      	bne.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006024:	4013      	ands	r3, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800602a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800602c:	4293      	cmp	r3, r2
 800602e:	d111      	bne.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	085b      	lsrs	r3, r3, #1
 800603c:	3b01      	subs	r3, #1
 800603e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006040:	429a      	cmp	r2, r3
 8006042:	d107      	bne.n	8006054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d001      	beq.n	8006058 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40023800 	.word	0x40023800

08006068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0cc      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800607c:	4b68      	ldr	r3, [pc, #416]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d90c      	bls.n	80060a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800608a:	4b65      	ldr	r3, [pc, #404]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006092:	4b63      	ldr	r3, [pc, #396]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d001      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e0b8      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d020      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060bc:	4b59      	ldr	r3, [pc, #356]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	4a58      	ldr	r2, [pc, #352]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80060c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060d4:	4b53      	ldr	r3, [pc, #332]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	4a52      	ldr	r2, [pc, #328]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80060de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e0:	4b50      	ldr	r3, [pc, #320]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	494d      	ldr	r1, [pc, #308]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d044      	beq.n	8006188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d107      	bne.n	8006116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006106:	4b47      	ldr	r3, [pc, #284]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d119      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e07f      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d003      	beq.n	8006126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006122:	2b03      	cmp	r3, #3
 8006124:	d107      	bne.n	8006136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006126:	4b3f      	ldr	r3, [pc, #252]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e06f      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006136:	4b3b      	ldr	r3, [pc, #236]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e067      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006146:	4b37      	ldr	r3, [pc, #220]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f023 0203 	bic.w	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	4934      	ldr	r1, [pc, #208]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	4313      	orrs	r3, r2
 8006156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006158:	f7fd fc52 	bl	8003a00 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615e:	e00a      	b.n	8006176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006160:	f7fd fc4e 	bl	8003a00 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e04f      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006176:	4b2b      	ldr	r3, [pc, #172]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 020c 	and.w	r2, r3, #12
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	429a      	cmp	r2, r3
 8006186:	d1eb      	bne.n	8006160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006188:	4b25      	ldr	r3, [pc, #148]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d20c      	bcs.n	80061b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006196:	4b22      	ldr	r3, [pc, #136]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619e:	4b20      	ldr	r3, [pc, #128]	@ (8006220 <HAL_RCC_ClockConfig+0x1b8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d001      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e032      	b.n	8006216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061bc:	4b19      	ldr	r3, [pc, #100]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	4916      	ldr	r1, [pc, #88]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d009      	beq.n	80061ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061da:	4b12      	ldr	r3, [pc, #72]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	490e      	ldr	r1, [pc, #56]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061ee:	f000 f821 	bl	8006234 <HAL_RCC_GetSysClockFreq>
 80061f2:	4602      	mov	r2, r0
 80061f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	091b      	lsrs	r3, r3, #4
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	490a      	ldr	r1, [pc, #40]	@ (8006228 <HAL_RCC_ClockConfig+0x1c0>)
 8006200:	5ccb      	ldrb	r3, [r1, r3]
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	4a09      	ldr	r2, [pc, #36]	@ (800622c <HAL_RCC_ClockConfig+0x1c4>)
 8006208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800620a:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <HAL_RCC_ClockConfig+0x1c8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7fb fb8a 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	40023c00 	.word	0x40023c00
 8006224:	40023800 	.word	0x40023800
 8006228:	08013384 	.word	0x08013384
 800622c:	20000000 	.word	0x20000000
 8006230:	20000020 	.word	0x20000020

08006234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006238:	b094      	sub	sp, #80	@ 0x50
 800623a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006240:	2300      	movs	r3, #0
 8006242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006244:	2300      	movs	r3, #0
 8006246:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800624c:	4b79      	ldr	r3, [pc, #484]	@ (8006434 <HAL_RCC_GetSysClockFreq+0x200>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
 8006254:	2b08      	cmp	r3, #8
 8006256:	d00d      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0x40>
 8006258:	2b08      	cmp	r3, #8
 800625a:	f200 80e1 	bhi.w	8006420 <HAL_RCC_GetSysClockFreq+0x1ec>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_RCC_GetSysClockFreq+0x34>
 8006262:	2b04      	cmp	r3, #4
 8006264:	d003      	beq.n	800626e <HAL_RCC_GetSysClockFreq+0x3a>
 8006266:	e0db      	b.n	8006420 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006268:	4b73      	ldr	r3, [pc, #460]	@ (8006438 <HAL_RCC_GetSysClockFreq+0x204>)
 800626a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800626c:	e0db      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800626e:	4b73      	ldr	r3, [pc, #460]	@ (800643c <HAL_RCC_GetSysClockFreq+0x208>)
 8006270:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006272:	e0d8      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006274:	4b6f      	ldr	r3, [pc, #444]	@ (8006434 <HAL_RCC_GetSysClockFreq+0x200>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800627c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800627e:	4b6d      	ldr	r3, [pc, #436]	@ (8006434 <HAL_RCC_GetSysClockFreq+0x200>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d063      	beq.n	8006352 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800628a:	4b6a      	ldr	r3, [pc, #424]	@ (8006434 <HAL_RCC_GetSysClockFreq+0x200>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	099b      	lsrs	r3, r3, #6
 8006290:	2200      	movs	r2, #0
 8006292:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006294:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629c:	633b      	str	r3, [r7, #48]	@ 0x30
 800629e:	2300      	movs	r3, #0
 80062a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062a6:	4622      	mov	r2, r4
 80062a8:	462b      	mov	r3, r5
 80062aa:	f04f 0000 	mov.w	r0, #0
 80062ae:	f04f 0100 	mov.w	r1, #0
 80062b2:	0159      	lsls	r1, r3, #5
 80062b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b8:	0150      	lsls	r0, r2, #5
 80062ba:	4602      	mov	r2, r0
 80062bc:	460b      	mov	r3, r1
 80062be:	4621      	mov	r1, r4
 80062c0:	1a51      	subs	r1, r2, r1
 80062c2:	6139      	str	r1, [r7, #16]
 80062c4:	4629      	mov	r1, r5
 80062c6:	eb63 0301 	sbc.w	r3, r3, r1
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062d8:	4659      	mov	r1, fp
 80062da:	018b      	lsls	r3, r1, #6
 80062dc:	4651      	mov	r1, sl
 80062de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062e2:	4651      	mov	r1, sl
 80062e4:	018a      	lsls	r2, r1, #6
 80062e6:	4651      	mov	r1, sl
 80062e8:	ebb2 0801 	subs.w	r8, r2, r1
 80062ec:	4659      	mov	r1, fp
 80062ee:	eb63 0901 	sbc.w	r9, r3, r1
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006306:	4690      	mov	r8, r2
 8006308:	4699      	mov	r9, r3
 800630a:	4623      	mov	r3, r4
 800630c:	eb18 0303 	adds.w	r3, r8, r3
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	462b      	mov	r3, r5
 8006314:	eb49 0303 	adc.w	r3, r9, r3
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006326:	4629      	mov	r1, r5
 8006328:	024b      	lsls	r3, r1, #9
 800632a:	4621      	mov	r1, r4
 800632c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006330:	4621      	mov	r1, r4
 8006332:	024a      	lsls	r2, r1, #9
 8006334:	4610      	mov	r0, r2
 8006336:	4619      	mov	r1, r3
 8006338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800633a:	2200      	movs	r2, #0
 800633c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800633e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006344:	f7fa fc32 	bl	8000bac <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4613      	mov	r3, r2
 800634e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006350:	e058      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006352:	4b38      	ldr	r3, [pc, #224]	@ (8006434 <HAL_RCC_GetSysClockFreq+0x200>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	099b      	lsrs	r3, r3, #6
 8006358:	2200      	movs	r2, #0
 800635a:	4618      	mov	r0, r3
 800635c:	4611      	mov	r1, r2
 800635e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006362:	623b      	str	r3, [r7, #32]
 8006364:	2300      	movs	r3, #0
 8006366:	627b      	str	r3, [r7, #36]	@ 0x24
 8006368:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800636c:	4642      	mov	r2, r8
 800636e:	464b      	mov	r3, r9
 8006370:	f04f 0000 	mov.w	r0, #0
 8006374:	f04f 0100 	mov.w	r1, #0
 8006378:	0159      	lsls	r1, r3, #5
 800637a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800637e:	0150      	lsls	r0, r2, #5
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4641      	mov	r1, r8
 8006386:	ebb2 0a01 	subs.w	sl, r2, r1
 800638a:	4649      	mov	r1, r9
 800638c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800639c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063a4:	ebb2 040a 	subs.w	r4, r2, sl
 80063a8:	eb63 050b 	sbc.w	r5, r3, fp
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	f04f 0300 	mov.w	r3, #0
 80063b4:	00eb      	lsls	r3, r5, #3
 80063b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063ba:	00e2      	lsls	r2, r4, #3
 80063bc:	4614      	mov	r4, r2
 80063be:	461d      	mov	r5, r3
 80063c0:	4643      	mov	r3, r8
 80063c2:	18e3      	adds	r3, r4, r3
 80063c4:	603b      	str	r3, [r7, #0]
 80063c6:	464b      	mov	r3, r9
 80063c8:	eb45 0303 	adc.w	r3, r5, r3
 80063cc:	607b      	str	r3, [r7, #4]
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063da:	4629      	mov	r1, r5
 80063dc:	028b      	lsls	r3, r1, #10
 80063de:	4621      	mov	r1, r4
 80063e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063e4:	4621      	mov	r1, r4
 80063e6:	028a      	lsls	r2, r1, #10
 80063e8:	4610      	mov	r0, r2
 80063ea:	4619      	mov	r1, r3
 80063ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ee:	2200      	movs	r2, #0
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	61fa      	str	r2, [r7, #28]
 80063f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f8:	f7fa fbd8 	bl	8000bac <__aeabi_uldivmod>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4613      	mov	r3, r2
 8006402:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006404:	4b0b      	ldr	r3, [pc, #44]	@ (8006434 <HAL_RCC_GetSysClockFreq+0x200>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	0c1b      	lsrs	r3, r3, #16
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	3301      	adds	r3, #1
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006414:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800641e:	e002      	b.n	8006426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <HAL_RCC_GetSysClockFreq+0x204>)
 8006422:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006428:	4618      	mov	r0, r3
 800642a:	3750      	adds	r7, #80	@ 0x50
 800642c:	46bd      	mov	sp, r7
 800642e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006432:	bf00      	nop
 8006434:	40023800 	.word	0x40023800
 8006438:	00f42400 	.word	0x00f42400
 800643c:	007a1200 	.word	0x007a1200

08006440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006444:	4b03      	ldr	r3, [pc, #12]	@ (8006454 <HAL_RCC_GetHCLKFreq+0x14>)
 8006446:	681b      	ldr	r3, [r3, #0]
}
 8006448:	4618      	mov	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000000 	.word	0x20000000

08006458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800645c:	f7ff fff0 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 8006460:	4602      	mov	r2, r0
 8006462:	4b05      	ldr	r3, [pc, #20]	@ (8006478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	0a9b      	lsrs	r3, r3, #10
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	4903      	ldr	r1, [pc, #12]	@ (800647c <HAL_RCC_GetPCLK1Freq+0x24>)
 800646e:	5ccb      	ldrb	r3, [r1, r3]
 8006470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006474:	4618      	mov	r0, r3
 8006476:	bd80      	pop	{r7, pc}
 8006478:	40023800 	.word	0x40023800
 800647c:	08013394 	.word	0x08013394

08006480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006484:	f7ff ffdc 	bl	8006440 <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0b5b      	lsrs	r3, r3, #13
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4903      	ldr	r1, [pc, #12]	@ (80064a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40023800 	.word	0x40023800
 80064a4:	08013394 	.word	0x08013394

080064a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	220f      	movs	r2, #15
 80064b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064b8:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <HAL_RCC_GetClockConfig+0x5c>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0203 	and.w	r2, r3, #3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <HAL_RCC_GetClockConfig+0x5c>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006504 <HAL_RCC_GetClockConfig+0x5c>)
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80064dc:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <HAL_RCC_GetClockConfig+0x5c>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ea:	4b07      	ldr	r3, [pc, #28]	@ (8006508 <HAL_RCC_GetClockConfig+0x60>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0207 	and.w	r2, r3, #7
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	601a      	str	r2, [r3, #0]
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	40023c00 	.word	0x40023c00

0800650c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006530:	2b00      	cmp	r3, #0
 8006532:	d035      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006534:	4b67      	ldr	r3, [pc, #412]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800653a:	f7fd fa61 	bl	8003a00 <HAL_GetTick>
 800653e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006540:	e008      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006542:	f7fd fa5d 	bl	8003a00 <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e0ba      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006554:	4b60      	ldr	r3, [pc, #384]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f0      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	019a      	lsls	r2, r3, #6
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	071b      	lsls	r3, r3, #28
 800656c:	495a      	ldr	r1, [pc, #360]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800656e:	4313      	orrs	r3, r2
 8006570:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006574:	4b57      	ldr	r3, [pc, #348]	@ (80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800657a:	f7fd fa41 	bl	8003a00 <HAL_GetTick>
 800657e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006580:	e008      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006582:	f7fd fa3d 	bl	8003a00 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b02      	cmp	r3, #2
 800658e:	d901      	bls.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e09a      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006594:	4b50      	ldr	r3, [pc, #320]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f0      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 8083 	beq.w	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	4b49      	ldr	r3, [pc, #292]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	4a48      	ldr	r2, [pc, #288]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80065be:	4b46      	ldr	r3, [pc, #280]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065ca:	4b44      	ldr	r3, [pc, #272]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a43      	ldr	r2, [pc, #268]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065d6:	f7fd fa13 	bl	8003a00 <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065dc:	e008      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80065de:	f7fd fa0f 	bl	8003a00 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d901      	bls.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e06c      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80065f0:	4b3a      	ldr	r3, [pc, #232]	@ (80066dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0f0      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065fc:	4b36      	ldr	r3, [pc, #216]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006600:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006604:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d02f      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	429a      	cmp	r2, r3
 8006618:	d028      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800661a:	4b2f      	ldr	r3, [pc, #188]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800661c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006622:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006624:	4b2e      	ldr	r3, [pc, #184]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800662a:	4b2d      	ldr	r3, [pc, #180]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006630:	4a29      	ldr	r2, [pc, #164]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006636:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b01      	cmp	r3, #1
 8006640:	d114      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006642:	f7fd f9dd 	bl	8003a00 <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006648:	e00a      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664a:	f7fd f9d9 	bl	8003a00 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e034      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006660:	4b1d      	ldr	r3, [pc, #116]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0ee      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006678:	d10d      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800667a:	4b17      	ldr	r3, [pc, #92]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800668a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668e:	4912      	ldr	r1, [pc, #72]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006690:	4313      	orrs	r3, r2
 8006692:	608b      	str	r3, [r1, #8]
 8006694:	e005      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006696:	4b10      	ldr	r3, [pc, #64]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	4a0f      	ldr	r2, [pc, #60]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800669c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80066a0:	6093      	str	r3, [r2, #8]
 80066a2:	4b0d      	ldr	r3, [pc, #52]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ae:	490a      	ldr	r1, [pc, #40]	@ (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	7c1a      	ldrb	r2, [r3, #16]
 80066c4:	4b07      	ldr	r3, [pc, #28]	@ (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066c6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	42470068 	.word	0x42470068
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40007000 	.word	0x40007000
 80066e0:	42470e40 	.word	0x42470e40
 80066e4:	424711e0 	.word	0x424711e0

080066e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e073      	b.n	80067e6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7f5b      	ldrb	r3, [r3, #29]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fb f826 	bl	8001760 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b10      	cmp	r3, #16
 8006726:	d055      	beq.n	80067d4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	22ca      	movs	r2, #202	@ 0xca
 800672e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2253      	movs	r2, #83	@ 0x53
 8006736:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa49 	bl	8006bd0 <RTC_EnterInitMode>
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d12c      	bne.n	80067a2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800675a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6899      	ldr	r1, [r3, #8]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	68d2      	ldr	r2, [r2, #12]
 8006782:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6919      	ldr	r1, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	041a      	lsls	r2, r3, #16
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa50 	bl	8006c3e <RTC_ExitInitMode>
 800679e:	4603      	mov	r3, r0
 80067a0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d110      	bne.n	80067ca <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067b6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	22ff      	movs	r2, #255	@ 0xff
 80067d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80067d2:	e001      	b.n	80067d8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d102      	bne.n	80067e4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067ee:	b590      	push	{r4, r7, lr}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7f1b      	ldrb	r3, [r3, #28]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_RTC_SetTime+0x1c>
 8006806:	2302      	movs	r3, #2
 8006808:	e087      	b.n	800691a <HAL_RTC_SetTime+0x12c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2202      	movs	r2, #2
 8006814:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d126      	bne.n	800686a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2200      	movs	r2, #0
 800682e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fa27 	bl	8006c88 <RTC_ByteToBcd2>
 800683a:	4603      	mov	r3, r0
 800683c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	785b      	ldrb	r3, [r3, #1]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fa20 	bl	8006c88 <RTC_ByteToBcd2>
 8006848:	4603      	mov	r3, r0
 800684a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800684c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	789b      	ldrb	r3, [r3, #2]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fa18 	bl	8006c88 <RTC_ByteToBcd2>
 8006858:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800685a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	78db      	ldrb	r3, [r3, #3]
 8006862:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e018      	b.n	800689c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800688a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006890:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	78db      	ldrb	r3, [r3, #3]
 8006896:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	22ca      	movs	r2, #202	@ 0xca
 80068a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2253      	movs	r2, #83	@ 0x53
 80068aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 f98f 	bl	8006bd0 <RTC_EnterInitMode>
 80068b2:	4603      	mov	r3, r0
 80068b4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80068b6:	7cfb      	ldrb	r3, [r7, #19]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d120      	bne.n	80068fe <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80068c6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80068ca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80068da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6899      	ldr	r1, [r3, #8]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f9a2 	bl	8006c3e <RTC_ExitInitMode>
 80068fa:	4603      	mov	r3, r0
 80068fc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80068fe:	7cfb      	ldrb	r3, [r7, #19]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	22ff      	movs	r2, #255	@ 0xff
 8006910:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	771a      	strb	r2, [r3, #28]

  return status;
 8006918:	7cfb      	ldrb	r3, [r7, #19]
}
 800691a:	4618      	mov	r0, r3
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	bd90      	pop	{r4, r7, pc}

08006922 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006954:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006958:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	b2db      	uxtb	r3, r3
 8006960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006964:	b2da      	uxtb	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006974:	b2da      	uxtb	r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006982:	b2da      	uxtb	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	0d9b      	lsrs	r3, r3, #22
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	b2da      	uxtb	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d11a      	bne.n	80069d4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 f98e 	bl	8006cc4 <RTC_Bcd2ToByte>
 80069a8:	4603      	mov	r3, r0
 80069aa:	461a      	mov	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 f985 	bl	8006cc4 <RTC_Bcd2ToByte>
 80069ba:	4603      	mov	r3, r0
 80069bc:	461a      	mov	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	789b      	ldrb	r3, [r3, #2]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 f97c 	bl	8006cc4 <RTC_Bcd2ToByte>
 80069cc:	4603      	mov	r3, r0
 80069ce:	461a      	mov	r2, r3
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069de:	b590      	push	{r4, r7, lr}
 80069e0:	b087      	sub	sp, #28
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	7f1b      	ldrb	r3, [r3, #28]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_RTC_SetDate+0x1c>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e071      	b.n	8006ade <HAL_RTC_SetDate+0x100>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2202      	movs	r2, #2
 8006a04:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10e      	bne.n	8006a2a <HAL_RTC_SetDate+0x4c>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	f003 0310 	and.w	r3, r3, #16
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	785b      	ldrb	r3, [r3, #1]
 8006a1c:	f023 0310 	bic.w	r3, r3, #16
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	330a      	adds	r3, #10
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d11c      	bne.n	8006a6a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	78db      	ldrb	r3, [r3, #3]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f927 	bl	8006c88 <RTC_ByteToBcd2>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f920 	bl	8006c88 <RTC_ByteToBcd2>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a4c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	789b      	ldrb	r3, [r3, #2]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 f918 	bl	8006c88 <RTC_ByteToBcd2>
 8006a58:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a5a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	e00e      	b.n	8006a88 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	78db      	ldrb	r3, [r3, #3]
 8006a6e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a76:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006a7c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	22ca      	movs	r2, #202	@ 0xca
 8006a8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2253      	movs	r2, #83	@ 0x53
 8006a96:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f899 	bl	8006bd0 <RTC_EnterInitMode>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006ab2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ab6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f8c0 	bl	8006c3e <RTC_ExitInitMode>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006ac2:	7cfb      	ldrb	r3, [r7, #19]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	22ff      	movs	r2, #255	@ 0xff
 8006ad4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	771a      	strb	r2, [r3, #28]

  return status;
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd90      	pop	{r4, r7, pc}

08006ae6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b086      	sub	sp, #24
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006b00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006b04:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	0c1b      	lsrs	r3, r3, #16
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	0b5b      	lsrs	r3, r3, #13
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f003 0307 	and.w	r3, r3, #7
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d11a      	bne.n	8006b7a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	78db      	ldrb	r3, [r3, #3]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 f8bb 	bl	8006cc4 <RTC_Bcd2ToByte>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	461a      	mov	r2, r3
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f8b2 	bl	8006cc4 <RTC_Bcd2ToByte>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461a      	mov	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	789b      	ldrb	r3, [r3, #2]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 f8a9 	bl	8006cc4 <RTC_Bcd2ToByte>
 8006b72:	4603      	mov	r3, r0
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a0d      	ldr	r2, [pc, #52]	@ (8006bcc <HAL_RTC_WaitForSynchro+0x48>)
 8006b96:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b98:	f7fc ff32 	bl	8003a00 <HAL_GetTick>
 8006b9c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b9e:	e009      	b.n	8006bb4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ba0:	f7fc ff2e 	bl	8003a00 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bae:	d901      	bls.n	8006bb4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e007      	b.n	8006bc4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0ee      	beq.n	8006ba0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	00013f5f 	.word	0x00013f5f

08006bd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d122      	bne.n	8006c34 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bfc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bfe:	f7fc feff 	bl	8003a00 <HAL_GetTick>
 8006c02:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c04:	e00c      	b.n	8006c20 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c06:	f7fc fefb 	bl	8003a00 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c14:	d904      	bls.n	8006c20 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2204      	movs	r2, #4
 8006c1a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <RTC_EnterInitMode+0x64>
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d1e8      	bne.n	8006c06 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c58:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10a      	bne.n	8006c7e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff ff8b 	bl	8006b84 <HAL_RTC_WaitForSynchro>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2204      	movs	r2, #4
 8006c78:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8006c96:	e005      	b.n	8006ca4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	3b0a      	subs	r3, #10
 8006ca2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	2b09      	cmp	r3, #9
 8006ca8:	d8f6      	bhi.n	8006c98 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	b2db      	uxtb	r3, r3
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	b2db      	uxtb	r3, r3
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e07b      	b.n	8006e0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d108      	bne.n	8006d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d22:	d009      	beq.n	8006d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	61da      	str	r2, [r3, #28]
 8006d2a:	e005      	b.n	8006d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fa fd30 	bl	80017b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dbc:	ea42 0103 	orr.w	r1, r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	f003 0104 	and.w	r1, r3, #4
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	f003 0210 	and.w	r2, r3, #16
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006df8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b088      	sub	sp, #32
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_SPI_Transmit+0x22>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e12d      	b.n	8007090 <HAL_SPI_Transmit+0x27e>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e3c:	f7fc fde0 	bl	8003a00 <HAL_GetTick>
 8006e40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d002      	beq.n	8006e58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e52:	2302      	movs	r3, #2
 8006e54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e56:	e116      	b.n	8007086 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_SPI_Transmit+0x52>
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e68:	e10d      	b.n	8007086 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	88fa      	ldrh	r2, [r7, #6]
 8006e82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eb0:	d10f      	bne.n	8006ed2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ec0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ed0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006edc:	2b40      	cmp	r3, #64	@ 0x40
 8006ede:	d007      	beq.n	8006ef0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006eee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ef8:	d14f      	bne.n	8006f9a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <HAL_SPI_Transmit+0xf6>
 8006f02:	8afb      	ldrh	r3, [r7, #22]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d142      	bne.n	8006f8e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0c:	881a      	ldrh	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f18:	1c9a      	adds	r2, r3, #2
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f2c:	e02f      	b.n	8006f8e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d112      	bne.n	8006f62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f40:	881a      	ldrh	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4c:	1c9a      	adds	r2, r3, #2
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f60:	e015      	b.n	8006f8e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f62:	f7fc fd4d 	bl	8003a00 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d803      	bhi.n	8006f7a <HAL_SPI_Transmit+0x168>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d102      	bne.n	8006f80 <HAL_SPI_Transmit+0x16e>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006f8c:	e07b      	b.n	8007086 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1ca      	bne.n	8006f2e <HAL_SPI_Transmit+0x11c>
 8006f98:	e050      	b.n	800703c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_SPI_Transmit+0x196>
 8006fa2:	8afb      	ldrh	r3, [r7, #22]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d144      	bne.n	8007032 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	330c      	adds	r3, #12
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fce:	e030      	b.n	8007032 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d113      	bne.n	8007006 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	330c      	adds	r3, #12
 8006fe8:	7812      	ldrb	r2, [r2, #0]
 8006fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007004:	e015      	b.n	8007032 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007006:	f7fc fcfb 	bl	8003a00 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d803      	bhi.n	800701e <HAL_SPI_Transmit+0x20c>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d102      	bne.n	8007024 <HAL_SPI_Transmit+0x212>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d106      	bne.n	8007032 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007030:	e029      	b.n	8007086 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1c9      	bne.n	8006fd0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fa61 	bl	8007508 <SPI_EndRxTxTransaction>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2220      	movs	r2, #32
 8007050:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800705a:	2300      	movs	r3, #0
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	613b      	str	r3, [r7, #16]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	77fb      	strb	r3, [r7, #31]
 800707c:	e003      	b.n	8007086 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800708e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3720      	adds	r7, #32
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08c      	sub	sp, #48	@ 0x30
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80070a6:	2301      	movs	r3, #1
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <HAL_SPI_TransmitReceive+0x26>
 80070ba:	2302      	movs	r3, #2
 80070bc:	e198      	b.n	80073f0 <HAL_SPI_TransmitReceive+0x358>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070c6:	f7fc fc9b 	bl	8003a00 <HAL_GetTick>
 80070ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80070dc:	887b      	ldrh	r3, [r7, #2]
 80070de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80070e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d00f      	beq.n	8007108 <HAL_SPI_TransmitReceive+0x70>
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070ee:	d107      	bne.n	8007100 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <HAL_SPI_TransmitReceive+0x68>
 80070f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d003      	beq.n	8007108 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007100:	2302      	movs	r3, #2
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007106:	e16d      	b.n	80073e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_SPI_TransmitReceive+0x82>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_SPI_TransmitReceive+0x82>
 8007114:	887b      	ldrh	r3, [r7, #2]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d103      	bne.n	8007122 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007120:	e160      	b.n	80073e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b04      	cmp	r3, #4
 800712c:	d003      	beq.n	8007136 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2205      	movs	r2, #5
 8007132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	887a      	ldrh	r2, [r7, #2]
 8007146:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	887a      	ldrh	r2, [r7, #2]
 800714c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	887a      	ldrh	r2, [r7, #2]
 8007158:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	887a      	ldrh	r2, [r7, #2]
 800715e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007176:	2b40      	cmp	r3, #64	@ 0x40
 8007178:	d007      	beq.n	800718a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007188:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007192:	d17c      	bne.n	800728e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <HAL_SPI_TransmitReceive+0x10a>
 800719c:	8b7b      	ldrh	r3, [r7, #26]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d16a      	bne.n	8007278 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a6:	881a      	ldrh	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b2:	1c9a      	adds	r2, r3, #2
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071c6:	e057      	b.n	8007278 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d11b      	bne.n	800720e <HAL_SPI_TransmitReceive+0x176>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071da:	b29b      	uxth	r3, r3
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d016      	beq.n	800720e <HAL_SPI_TransmitReceive+0x176>
 80071e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d113      	bne.n	800720e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ea:	881a      	ldrh	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007200:	b29b      	uxth	r3, r3
 8007202:	3b01      	subs	r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b01      	cmp	r3, #1
 800721a:	d119      	bne.n	8007250 <HAL_SPI_TransmitReceive+0x1b8>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d014      	beq.n	8007250 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007230:	b292      	uxth	r2, r2
 8007232:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007238:	1c9a      	adds	r2, r3, #2
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800724c:	2301      	movs	r3, #1
 800724e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007250:	f7fc fbd6 	bl	8003a00 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800725c:	429a      	cmp	r2, r3
 800725e:	d80b      	bhi.n	8007278 <HAL_SPI_TransmitReceive+0x1e0>
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007266:	d007      	beq.n	8007278 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007276:	e0b5      	b.n	80073e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1a2      	bne.n	80071c8 <HAL_SPI_TransmitReceive+0x130>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007286:	b29b      	uxth	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d19d      	bne.n	80071c8 <HAL_SPI_TransmitReceive+0x130>
 800728c:	e080      	b.n	8007390 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_SPI_TransmitReceive+0x204>
 8007296:	8b7b      	ldrh	r3, [r7, #26]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d16f      	bne.n	800737c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072c2:	e05b      	b.n	800737c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d11c      	bne.n	800730c <HAL_SPI_TransmitReceive+0x274>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d017      	beq.n	800730c <HAL_SPI_TransmitReceive+0x274>
 80072dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d114      	bne.n	800730c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	7812      	ldrb	r2, [r2, #0]
 80072ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d119      	bne.n	800734e <HAL_SPI_TransmitReceive+0x2b6>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d014      	beq.n	800734e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68da      	ldr	r2, [r3, #12]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007340:	b29b      	uxth	r3, r3
 8007342:	3b01      	subs	r3, #1
 8007344:	b29a      	uxth	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800734a:	2301      	movs	r3, #1
 800734c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800734e:	f7fc fb57 	bl	8003a00 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800735a:	429a      	cmp	r2, r3
 800735c:	d803      	bhi.n	8007366 <HAL_SPI_TransmitReceive+0x2ce>
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007364:	d102      	bne.n	800736c <HAL_SPI_TransmitReceive+0x2d4>
 8007366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800737a:	e033      	b.n	80073e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d19e      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x22c>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d199      	bne.n	80072c4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007392:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 f8b7 	bl	8007508 <SPI_EndRxTxTransaction>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d006      	beq.n	80073ae <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80073ac:	e01a      	b.n	80073e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d10a      	bne.n	80073cc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073da:	e003      	b.n	80073e4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80073ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3730      	adds	r7, #48	@ 0x30
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007408:	f7fc fafa 	bl	8003a00 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007410:	1a9b      	subs	r3, r3, r2
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	4413      	add	r3, r2
 8007416:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007418:	f7fc faf2 	bl	8003a00 <HAL_GetTick>
 800741c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800741e:	4b39      	ldr	r3, [pc, #228]	@ (8007504 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	015b      	lsls	r3, r3, #5
 8007424:	0d1b      	lsrs	r3, r3, #20
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	fb02 f303 	mul.w	r3, r2, r3
 800742c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800742e:	e054      	b.n	80074da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d050      	beq.n	80074da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007438:	f7fc fae2 	bl	8003a00 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	69fa      	ldr	r2, [r7, #28]
 8007444:	429a      	cmp	r2, r3
 8007446:	d902      	bls.n	800744e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d13d      	bne.n	80074ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800745c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007466:	d111      	bne.n	800748c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007470:	d004      	beq.n	800747c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800747a:	d107      	bne.n	800748c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800748a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007494:	d10f      	bne.n	80074b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e017      	b.n	80074fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4013      	ands	r3, r2
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	bf0c      	ite	eq
 80074ea:	2301      	moveq	r3, #1
 80074ec:	2300      	movne	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d19b      	bne.n	8007430 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000000 	.word	0x20000000

08007508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af02      	add	r7, sp, #8
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2201      	movs	r2, #1
 800751c:	2102      	movs	r1, #2
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff ff6a 	bl	80073f8 <SPI_WaitFlagStateUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752e:	f043 0220 	orr.w	r2, r3, #32
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e032      	b.n	80075a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800753a:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <SPI_EndRxTxTransaction+0xa0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1b      	ldr	r2, [pc, #108]	@ (80075ac <SPI_EndRxTxTransaction+0xa4>)
 8007540:	fba2 2303 	umull	r2, r3, r2, r3
 8007544:	0d5b      	lsrs	r3, r3, #21
 8007546:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800754a:	fb02 f303 	mul.w	r3, r2, r3
 800754e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007558:	d112      	bne.n	8007580 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2200      	movs	r2, #0
 8007562:	2180      	movs	r1, #128	@ 0x80
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7ff ff47 	bl	80073f8 <SPI_WaitFlagStateUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d016      	beq.n	800759e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007574:	f043 0220 	orr.w	r2, r3, #32
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e00f      	b.n	80075a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	3b01      	subs	r3, #1
 800758a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007596:	2b80      	cmp	r3, #128	@ 0x80
 8007598:	d0f2      	beq.n	8007580 <SPI_EndRxTxTransaction+0x78>
 800759a:	e000      	b.n	800759e <SPI_EndRxTxTransaction+0x96>
        break;
 800759c:	bf00      	nop
  }

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000000 	.word	0x20000000
 80075ac:	165e9f81 	.word	0x165e9f81

080075b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e041      	b.n	8007646 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fa f936 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	4619      	mov	r1, r3
 80075ee:	4610      	mov	r0, r2
 80075f0:	f000 fa9e 	bl	8007b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	d001      	beq.n	8007668 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e044      	b.n	80076f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1e      	ldr	r2, [pc, #120]	@ (8007700 <HAL_TIM_Base_Start_IT+0xb0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d018      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x6c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007692:	d013      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x6c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1a      	ldr	r2, [pc, #104]	@ (8007704 <HAL_TIM_Base_Start_IT+0xb4>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00e      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x6c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a19      	ldr	r2, [pc, #100]	@ (8007708 <HAL_TIM_Base_Start_IT+0xb8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d009      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x6c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a17      	ldr	r2, [pc, #92]	@ (800770c <HAL_TIM_Base_Start_IT+0xbc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x6c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a16      	ldr	r2, [pc, #88]	@ (8007710 <HAL_TIM_Base_Start_IT+0xc0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d111      	bne.n	80076e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b06      	cmp	r3, #6
 80076cc:	d010      	beq.n	80076f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f042 0201 	orr.w	r2, r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076de:	e007      	b.n	80076f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0201 	orr.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	40010000 	.word	0x40010000
 8007704:	40000400 	.word	0x40000400
 8007708:	40000800 	.word	0x40000800
 800770c:	40000c00 	.word	0x40000c00
 8007710:	40014000 	.word	0x40014000

08007714 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0201 	bic.w	r2, r2, #1
 800772a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a1a      	ldr	r2, [r3, #32]
 8007732:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007736:	4013      	ands	r3, r2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10f      	bne.n	800775c <HAL_TIM_Base_Stop_IT+0x48>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6a1a      	ldr	r2, [r3, #32]
 8007742:	f240 4344 	movw	r3, #1092	@ 0x444
 8007746:	4013      	ands	r3, r2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d107      	bne.n	800775c <HAL_TIM_Base_Stop_IT+0x48>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0201 	bic.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d020      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d01b      	beq.n	80077d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f06f 0202 	mvn.w	r2, #2
 80077a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f999 	bl	8007af4 <HAL_TIM_IC_CaptureCallback>
 80077c2:	e005      	b.n	80077d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f98b 	bl	8007ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f99c 	bl	8007b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d020      	beq.n	8007822 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01b      	beq.n	8007822 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f06f 0204 	mvn.w	r2, #4
 80077f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f973 	bl	8007af4 <HAL_TIM_IC_CaptureCallback>
 800780e:	e005      	b.n	800781c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 f965 	bl	8007ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f976 	bl	8007b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d020      	beq.n	800786e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f003 0308 	and.w	r3, r3, #8
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01b      	beq.n	800786e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f06f 0208 	mvn.w	r2, #8
 800783e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2204      	movs	r2, #4
 8007844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	f003 0303 	and.w	r3, r3, #3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f94d 	bl	8007af4 <HAL_TIM_IC_CaptureCallback>
 800785a:	e005      	b.n	8007868 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f93f 	bl	8007ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f950 	bl	8007b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	2b00      	cmp	r3, #0
 8007876:	d020      	beq.n	80078ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b00      	cmp	r3, #0
 8007880:	d01b      	beq.n	80078ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f06f 0210 	mvn.w	r2, #16
 800788a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2208      	movs	r2, #8
 8007890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f927 	bl	8007af4 <HAL_TIM_IC_CaptureCallback>
 80078a6:	e005      	b.n	80078b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f919 	bl	8007ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f92a 	bl	8007b08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00c      	beq.n	80078de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f06f 0201 	mvn.w	r2, #1
 80078d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7f9 fe39 	bl	8001550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00c      	beq.n	8007902 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fab5 	bl	8007e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00c      	beq.n	8007926 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d007      	beq.n	8007926 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800791e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f8fb 	bl	8007b1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00c      	beq.n	800794a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d007      	beq.n	800794a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f06f 0220 	mvn.w	r2, #32
 8007942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fa87 	bl	8007e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_TIM_ConfigClockSource+0x1c>
 800796a:	2302      	movs	r3, #2
 800796c:	e0b4      	b.n	8007ad8 <HAL_TIM_ConfigClockSource+0x186>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2202      	movs	r2, #2
 800797a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800798c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007994:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079a6:	d03e      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0xd4>
 80079a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ac:	f200 8087 	bhi.w	8007abe <HAL_TIM_ConfigClockSource+0x16c>
 80079b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b4:	f000 8086 	beq.w	8007ac4 <HAL_TIM_ConfigClockSource+0x172>
 80079b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079bc:	d87f      	bhi.n	8007abe <HAL_TIM_ConfigClockSource+0x16c>
 80079be:	2b70      	cmp	r3, #112	@ 0x70
 80079c0:	d01a      	beq.n	80079f8 <HAL_TIM_ConfigClockSource+0xa6>
 80079c2:	2b70      	cmp	r3, #112	@ 0x70
 80079c4:	d87b      	bhi.n	8007abe <HAL_TIM_ConfigClockSource+0x16c>
 80079c6:	2b60      	cmp	r3, #96	@ 0x60
 80079c8:	d050      	beq.n	8007a6c <HAL_TIM_ConfigClockSource+0x11a>
 80079ca:	2b60      	cmp	r3, #96	@ 0x60
 80079cc:	d877      	bhi.n	8007abe <HAL_TIM_ConfigClockSource+0x16c>
 80079ce:	2b50      	cmp	r3, #80	@ 0x50
 80079d0:	d03c      	beq.n	8007a4c <HAL_TIM_ConfigClockSource+0xfa>
 80079d2:	2b50      	cmp	r3, #80	@ 0x50
 80079d4:	d873      	bhi.n	8007abe <HAL_TIM_ConfigClockSource+0x16c>
 80079d6:	2b40      	cmp	r3, #64	@ 0x40
 80079d8:	d058      	beq.n	8007a8c <HAL_TIM_ConfigClockSource+0x13a>
 80079da:	2b40      	cmp	r3, #64	@ 0x40
 80079dc:	d86f      	bhi.n	8007abe <HAL_TIM_ConfigClockSource+0x16c>
 80079de:	2b30      	cmp	r3, #48	@ 0x30
 80079e0:	d064      	beq.n	8007aac <HAL_TIM_ConfigClockSource+0x15a>
 80079e2:	2b30      	cmp	r3, #48	@ 0x30
 80079e4:	d86b      	bhi.n	8007abe <HAL_TIM_ConfigClockSource+0x16c>
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d060      	beq.n	8007aac <HAL_TIM_ConfigClockSource+0x15a>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d867      	bhi.n	8007abe <HAL_TIM_ConfigClockSource+0x16c>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d05c      	beq.n	8007aac <HAL_TIM_ConfigClockSource+0x15a>
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d05a      	beq.n	8007aac <HAL_TIM_ConfigClockSource+0x15a>
 80079f6:	e062      	b.n	8007abe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a08:	f000 f998 	bl	8007d3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	609a      	str	r2, [r3, #8]
      break;
 8007a24:	e04f      	b.n	8007ac6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a36:	f000 f981 	bl	8007d3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689a      	ldr	r2, [r3, #8]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a48:	609a      	str	r2, [r3, #8]
      break;
 8007a4a:	e03c      	b.n	8007ac6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a58:	461a      	mov	r2, r3
 8007a5a:	f000 f8f5 	bl	8007c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2150      	movs	r1, #80	@ 0x50
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 f94e 	bl	8007d06 <TIM_ITRx_SetConfig>
      break;
 8007a6a:	e02c      	b.n	8007ac6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f000 f914 	bl	8007ca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2160      	movs	r1, #96	@ 0x60
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 f93e 	bl	8007d06 <TIM_ITRx_SetConfig>
      break;
 8007a8a:	e01c      	b.n	8007ac6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f000 f8d5 	bl	8007c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2140      	movs	r1, #64	@ 0x40
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 f92e 	bl	8007d06 <TIM_ITRx_SetConfig>
      break;
 8007aaa:	e00c      	b.n	8007ac6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	f000 f925 	bl	8007d06 <TIM_ITRx_SetConfig>
      break;
 8007abc:	e003      	b.n	8007ac6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac2:	e000      	b.n	8007ac6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ac4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a3a      	ldr	r2, [pc, #232]	@ (8007c2c <TIM_Base_SetConfig+0xfc>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d00f      	beq.n	8007b68 <TIM_Base_SetConfig+0x38>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b4e:	d00b      	beq.n	8007b68 <TIM_Base_SetConfig+0x38>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a37      	ldr	r2, [pc, #220]	@ (8007c30 <TIM_Base_SetConfig+0x100>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d007      	beq.n	8007b68 <TIM_Base_SetConfig+0x38>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a36      	ldr	r2, [pc, #216]	@ (8007c34 <TIM_Base_SetConfig+0x104>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d003      	beq.n	8007b68 <TIM_Base_SetConfig+0x38>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a35      	ldr	r2, [pc, #212]	@ (8007c38 <TIM_Base_SetConfig+0x108>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d108      	bne.n	8007b7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8007c2c <TIM_Base_SetConfig+0xfc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d01b      	beq.n	8007bba <TIM_Base_SetConfig+0x8a>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b88:	d017      	beq.n	8007bba <TIM_Base_SetConfig+0x8a>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a28      	ldr	r2, [pc, #160]	@ (8007c30 <TIM_Base_SetConfig+0x100>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <TIM_Base_SetConfig+0x8a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a27      	ldr	r2, [pc, #156]	@ (8007c34 <TIM_Base_SetConfig+0x104>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d00f      	beq.n	8007bba <TIM_Base_SetConfig+0x8a>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a26      	ldr	r2, [pc, #152]	@ (8007c38 <TIM_Base_SetConfig+0x108>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d00b      	beq.n	8007bba <TIM_Base_SetConfig+0x8a>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a25      	ldr	r2, [pc, #148]	@ (8007c3c <TIM_Base_SetConfig+0x10c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d007      	beq.n	8007bba <TIM_Base_SetConfig+0x8a>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a24      	ldr	r2, [pc, #144]	@ (8007c40 <TIM_Base_SetConfig+0x110>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d003      	beq.n	8007bba <TIM_Base_SetConfig+0x8a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a23      	ldr	r2, [pc, #140]	@ (8007c44 <TIM_Base_SetConfig+0x114>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d108      	bne.n	8007bcc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	68fa      	ldr	r2, [r7, #12]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8007c2c <TIM_Base_SetConfig+0xfc>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d103      	bne.n	8007c00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d105      	bne.n	8007c1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f023 0201 	bic.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	611a      	str	r2, [r3, #16]
  }
}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	40000400 	.word	0x40000400
 8007c34:	40000800 	.word	0x40000800
 8007c38:	40000c00 	.word	0x40000c00
 8007c3c:	40014000 	.word	0x40014000
 8007c40:	40014400 	.word	0x40014400
 8007c44:	40014800 	.word	0x40014800

08007c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	f023 0201 	bic.w	r2, r3, #1
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f023 030a 	bic.w	r3, r3, #10
 8007c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	621a      	str	r2, [r3, #32]
}
 8007c9a:	bf00      	nop
 8007c9c:	371c      	adds	r7, #28
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b087      	sub	sp, #28
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	60f8      	str	r0, [r7, #12]
 8007cae:	60b9      	str	r1, [r7, #8]
 8007cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	f023 0210 	bic.w	r2, r3, #16
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	031b      	lsls	r3, r3, #12
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	621a      	str	r2, [r3, #32]
}
 8007cfa:	bf00      	nop
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f043 0307 	orr.w	r3, r3, #7
 8007d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	609a      	str	r2, [r3, #8]
}
 8007d30:	bf00      	nop
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b087      	sub	sp, #28
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	021a      	lsls	r2, r3, #8
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	697a      	ldr	r2, [r7, #20]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	609a      	str	r2, [r3, #8]
}
 8007d70:	bf00      	nop
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d101      	bne.n	8007d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d90:	2302      	movs	r3, #2
 8007d92:	e050      	b.n	8007e36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d018      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de0:	d013      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a18      	ldr	r2, [pc, #96]	@ (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00e      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a16      	ldr	r2, [pc, #88]	@ (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d009      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a15      	ldr	r2, [pc, #84]	@ (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d004      	beq.n	8007e0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a13      	ldr	r2, [pc, #76]	@ (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10c      	bne.n	8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	40010000 	.word	0x40010000
 8007e48:	40000400 	.word	0x40000400
 8007e4c:	40000800 	.word	0x40000800
 8007e50:	40000c00 	.word	0x40000c00
 8007e54:	40014000 	.word	0x40014000

08007e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e042      	b.n	8007f18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d106      	bne.n	8007eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7f9 fcf6 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2224      	movs	r2, #36	@ 0x24
 8007eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f973 	bl	80081b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695a      	ldr	r2, [r3, #20]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68da      	ldr	r2, [r3, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2220      	movs	r2, #32
 8007f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08a      	sub	sp, #40	@ 0x28
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d175      	bne.n	800802c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <HAL_UART_Transmit+0x2c>
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e06e      	b.n	800802e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2221      	movs	r2, #33	@ 0x21
 8007f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f5e:	f7fb fd4f 	bl	8003a00 <HAL_GetTick>
 8007f62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	88fa      	ldrh	r2, [r7, #6]
 8007f6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f78:	d108      	bne.n	8007f8c <HAL_UART_Transmit+0x6c>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d104      	bne.n	8007f8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	61bb      	str	r3, [r7, #24]
 8007f8a:	e003      	b.n	8007f94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f94:	e02e      	b.n	8007ff4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2180      	movs	r1, #128	@ 0x80
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 f848 	bl	8008036 <UART_WaitOnFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e03a      	b.n	800802e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10b      	bne.n	8007fd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	3302      	adds	r3, #2
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	e007      	b.n	8007fe6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1cb      	bne.n	8007f96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2200      	movs	r2, #0
 8008006:	2140      	movs	r1, #64	@ 0x40
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f814 	bl	8008036 <UART_WaitOnFlagUntilTimeout>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d005      	beq.n	8008020 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2220      	movs	r2, #32
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e006      	b.n	800802e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	e000      	b.n	800802e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800802c:	2302      	movs	r3, #2
  }
}
 800802e:	4618      	mov	r0, r3
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b086      	sub	sp, #24
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	603b      	str	r3, [r7, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008046:	e03b      	b.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d037      	beq.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008050:	f7fb fcd6 	bl	8003a00 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	6a3a      	ldr	r2, [r7, #32]
 800805c:	429a      	cmp	r2, r3
 800805e:	d302      	bcc.n	8008066 <UART_WaitOnFlagUntilTimeout+0x30>
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e03a      	b.n	80080e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b00      	cmp	r3, #0
 8008076:	d023      	beq.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b80      	cmp	r3, #128	@ 0x80
 800807c:	d020      	beq.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b40      	cmp	r3, #64	@ 0x40
 8008082:	d01d      	beq.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b08      	cmp	r3, #8
 8008090:	d116      	bne.n	80080c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008092:	2300      	movs	r3, #0
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f81d 	bl	80080e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2208      	movs	r2, #8
 80080b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e00f      	b.n	80080e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4013      	ands	r3, r2
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	bf0c      	ite	eq
 80080d0:	2301      	moveq	r3, #1
 80080d2:	2300      	movne	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	461a      	mov	r2, r3
 80080d8:	79fb      	ldrb	r3, [r7, #7]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d0b4      	beq.n	8008048 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b095      	sub	sp, #84	@ 0x54
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	330c      	adds	r3, #12
 80080f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fa:	e853 3f00 	ldrex	r3, [r3]
 80080fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008110:	643a      	str	r2, [r7, #64]	@ 0x40
 8008112:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008116:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008118:	e841 2300 	strex	r3, r2, [r1]
 800811c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800811e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3314      	adds	r3, #20
 800812a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	61fb      	str	r3, [r7, #28]
   return(result);
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3314      	adds	r3, #20
 8008142:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008144:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800814a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e5      	bne.n	8008124 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800815c:	2b01      	cmp	r3, #1
 800815e:	d119      	bne.n	8008194 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	330c      	adds	r3, #12
 8008166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	e853 3f00 	ldrex	r3, [r3]
 800816e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f023 0310 	bic.w	r3, r3, #16
 8008176:	647b      	str	r3, [r7, #68]	@ 0x44
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008180:	61ba      	str	r2, [r7, #24]
 8008182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008184:	6979      	ldr	r1, [r7, #20]
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	e841 2300 	strex	r3, r2, [r1]
 800818c:	613b      	str	r3, [r7, #16]
   return(result);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e5      	bne.n	8008160 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2220      	movs	r2, #32
 8008198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80081a2:	bf00      	nop
 80081a4:	3754      	adds	r7, #84	@ 0x54
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
	...

080081b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081b4:	b0c0      	sub	sp, #256	@ 0x100
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80081c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081cc:	68d9      	ldr	r1, [r3, #12]
 80081ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	ea40 0301 	orr.w	r3, r0, r1
 80081d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f4:	69db      	ldr	r3, [r3, #28]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008208:	f021 010c 	bic.w	r1, r1, #12
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008216:	430b      	orrs	r3, r1
 8008218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822a:	6999      	ldr	r1, [r3, #24]
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	ea40 0301 	orr.w	r3, r0, r1
 8008236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	4b8f      	ldr	r3, [pc, #572]	@ (800847c <UART_SetConfig+0x2cc>)
 8008240:	429a      	cmp	r2, r3
 8008242:	d005      	beq.n	8008250 <UART_SetConfig+0xa0>
 8008244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b8d      	ldr	r3, [pc, #564]	@ (8008480 <UART_SetConfig+0x2d0>)
 800824c:	429a      	cmp	r2, r3
 800824e:	d104      	bne.n	800825a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008250:	f7fe f916 	bl	8006480 <HAL_RCC_GetPCLK2Freq>
 8008254:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008258:	e003      	b.n	8008262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800825a:	f7fe f8fd 	bl	8006458 <HAL_RCC_GetPCLK1Freq>
 800825e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800826c:	f040 810c 	bne.w	8008488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008274:	2200      	movs	r2, #0
 8008276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800827a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800827e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008282:	4622      	mov	r2, r4
 8008284:	462b      	mov	r3, r5
 8008286:	1891      	adds	r1, r2, r2
 8008288:	65b9      	str	r1, [r7, #88]	@ 0x58
 800828a:	415b      	adcs	r3, r3
 800828c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800828e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008292:	4621      	mov	r1, r4
 8008294:	eb12 0801 	adds.w	r8, r2, r1
 8008298:	4629      	mov	r1, r5
 800829a:	eb43 0901 	adc.w	r9, r3, r1
 800829e:	f04f 0200 	mov.w	r2, #0
 80082a2:	f04f 0300 	mov.w	r3, #0
 80082a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082b2:	4690      	mov	r8, r2
 80082b4:	4699      	mov	r9, r3
 80082b6:	4623      	mov	r3, r4
 80082b8:	eb18 0303 	adds.w	r3, r8, r3
 80082bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082c0:	462b      	mov	r3, r5
 80082c2:	eb49 0303 	adc.w	r3, r9, r3
 80082c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80082da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082de:	460b      	mov	r3, r1
 80082e0:	18db      	adds	r3, r3, r3
 80082e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80082e4:	4613      	mov	r3, r2
 80082e6:	eb42 0303 	adc.w	r3, r2, r3
 80082ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80082ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80082f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80082f4:	f7f8 fc5a 	bl	8000bac <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4b61      	ldr	r3, [pc, #388]	@ (8008484 <UART_SetConfig+0x2d4>)
 80082fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	011c      	lsls	r4, r3, #4
 8008306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008310:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	1891      	adds	r1, r2, r2
 800831e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008320:	415b      	adcs	r3, r3
 8008322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008328:	4641      	mov	r1, r8
 800832a:	eb12 0a01 	adds.w	sl, r2, r1
 800832e:	4649      	mov	r1, r9
 8008330:	eb43 0b01 	adc.w	fp, r3, r1
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008348:	4692      	mov	sl, r2
 800834a:	469b      	mov	fp, r3
 800834c:	4643      	mov	r3, r8
 800834e:	eb1a 0303 	adds.w	r3, sl, r3
 8008352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008356:	464b      	mov	r3, r9
 8008358:	eb4b 0303 	adc.w	r3, fp, r3
 800835c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800836c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008374:	460b      	mov	r3, r1
 8008376:	18db      	adds	r3, r3, r3
 8008378:	643b      	str	r3, [r7, #64]	@ 0x40
 800837a:	4613      	mov	r3, r2
 800837c:	eb42 0303 	adc.w	r3, r2, r3
 8008380:	647b      	str	r3, [r7, #68]	@ 0x44
 8008382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800838a:	f7f8 fc0f 	bl	8000bac <__aeabi_uldivmod>
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4611      	mov	r1, r2
 8008394:	4b3b      	ldr	r3, [pc, #236]	@ (8008484 <UART_SetConfig+0x2d4>)
 8008396:	fba3 2301 	umull	r2, r3, r3, r1
 800839a:	095b      	lsrs	r3, r3, #5
 800839c:	2264      	movs	r2, #100	@ 0x64
 800839e:	fb02 f303 	mul.w	r3, r2, r3
 80083a2:	1acb      	subs	r3, r1, r3
 80083a4:	00db      	lsls	r3, r3, #3
 80083a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80083aa:	4b36      	ldr	r3, [pc, #216]	@ (8008484 <UART_SetConfig+0x2d4>)
 80083ac:	fba3 2302 	umull	r2, r3, r3, r2
 80083b0:	095b      	lsrs	r3, r3, #5
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80083b8:	441c      	add	r4, r3
 80083ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083be:	2200      	movs	r2, #0
 80083c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80083c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80083cc:	4642      	mov	r2, r8
 80083ce:	464b      	mov	r3, r9
 80083d0:	1891      	adds	r1, r2, r2
 80083d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80083d4:	415b      	adcs	r3, r3
 80083d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80083dc:	4641      	mov	r1, r8
 80083de:	1851      	adds	r1, r2, r1
 80083e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80083e2:	4649      	mov	r1, r9
 80083e4:	414b      	adcs	r3, r1
 80083e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80083f4:	4659      	mov	r1, fp
 80083f6:	00cb      	lsls	r3, r1, #3
 80083f8:	4651      	mov	r1, sl
 80083fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083fe:	4651      	mov	r1, sl
 8008400:	00ca      	lsls	r2, r1, #3
 8008402:	4610      	mov	r0, r2
 8008404:	4619      	mov	r1, r3
 8008406:	4603      	mov	r3, r0
 8008408:	4642      	mov	r2, r8
 800840a:	189b      	adds	r3, r3, r2
 800840c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008410:	464b      	mov	r3, r9
 8008412:	460a      	mov	r2, r1
 8008414:	eb42 0303 	adc.w	r3, r2, r3
 8008418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800841c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008428:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800842c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008430:	460b      	mov	r3, r1
 8008432:	18db      	adds	r3, r3, r3
 8008434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008436:	4613      	mov	r3, r2
 8008438:	eb42 0303 	adc.w	r3, r2, r3
 800843c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800843e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008446:	f7f8 fbb1 	bl	8000bac <__aeabi_uldivmod>
 800844a:	4602      	mov	r2, r0
 800844c:	460b      	mov	r3, r1
 800844e:	4b0d      	ldr	r3, [pc, #52]	@ (8008484 <UART_SetConfig+0x2d4>)
 8008450:	fba3 1302 	umull	r1, r3, r3, r2
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	2164      	movs	r1, #100	@ 0x64
 8008458:	fb01 f303 	mul.w	r3, r1, r3
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	3332      	adds	r3, #50	@ 0x32
 8008462:	4a08      	ldr	r2, [pc, #32]	@ (8008484 <UART_SetConfig+0x2d4>)
 8008464:	fba2 2303 	umull	r2, r3, r2, r3
 8008468:	095b      	lsrs	r3, r3, #5
 800846a:	f003 0207 	and.w	r2, r3, #7
 800846e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4422      	add	r2, r4
 8008476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008478:	e106      	b.n	8008688 <UART_SetConfig+0x4d8>
 800847a:	bf00      	nop
 800847c:	40011000 	.word	0x40011000
 8008480:	40011400 	.word	0x40011400
 8008484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800848c:	2200      	movs	r2, #0
 800848e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800849a:	4642      	mov	r2, r8
 800849c:	464b      	mov	r3, r9
 800849e:	1891      	adds	r1, r2, r2
 80084a0:	6239      	str	r1, [r7, #32]
 80084a2:	415b      	adcs	r3, r3
 80084a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80084a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084aa:	4641      	mov	r1, r8
 80084ac:	1854      	adds	r4, r2, r1
 80084ae:	4649      	mov	r1, r9
 80084b0:	eb43 0501 	adc.w	r5, r3, r1
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	00eb      	lsls	r3, r5, #3
 80084be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084c2:	00e2      	lsls	r2, r4, #3
 80084c4:	4614      	mov	r4, r2
 80084c6:	461d      	mov	r5, r3
 80084c8:	4643      	mov	r3, r8
 80084ca:	18e3      	adds	r3, r4, r3
 80084cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084d0:	464b      	mov	r3, r9
 80084d2:	eb45 0303 	adc.w	r3, r5, r3
 80084d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084ea:	f04f 0200 	mov.w	r2, #0
 80084ee:	f04f 0300 	mov.w	r3, #0
 80084f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80084f6:	4629      	mov	r1, r5
 80084f8:	008b      	lsls	r3, r1, #2
 80084fa:	4621      	mov	r1, r4
 80084fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008500:	4621      	mov	r1, r4
 8008502:	008a      	lsls	r2, r1, #2
 8008504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008508:	f7f8 fb50 	bl	8000bac <__aeabi_uldivmod>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4b60      	ldr	r3, [pc, #384]	@ (8008694 <UART_SetConfig+0x4e4>)
 8008512:	fba3 2302 	umull	r2, r3, r3, r2
 8008516:	095b      	lsrs	r3, r3, #5
 8008518:	011c      	lsls	r4, r3, #4
 800851a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800851e:	2200      	movs	r2, #0
 8008520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008524:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800852c:	4642      	mov	r2, r8
 800852e:	464b      	mov	r3, r9
 8008530:	1891      	adds	r1, r2, r2
 8008532:	61b9      	str	r1, [r7, #24]
 8008534:	415b      	adcs	r3, r3
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800853c:	4641      	mov	r1, r8
 800853e:	1851      	adds	r1, r2, r1
 8008540:	6139      	str	r1, [r7, #16]
 8008542:	4649      	mov	r1, r9
 8008544:	414b      	adcs	r3, r1
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	f04f 0200 	mov.w	r2, #0
 800854c:	f04f 0300 	mov.w	r3, #0
 8008550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008554:	4659      	mov	r1, fp
 8008556:	00cb      	lsls	r3, r1, #3
 8008558:	4651      	mov	r1, sl
 800855a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800855e:	4651      	mov	r1, sl
 8008560:	00ca      	lsls	r2, r1, #3
 8008562:	4610      	mov	r0, r2
 8008564:	4619      	mov	r1, r3
 8008566:	4603      	mov	r3, r0
 8008568:	4642      	mov	r2, r8
 800856a:	189b      	adds	r3, r3, r2
 800856c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008570:	464b      	mov	r3, r9
 8008572:	460a      	mov	r2, r1
 8008574:	eb42 0303 	adc.w	r3, r2, r3
 8008578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008588:	f04f 0200 	mov.w	r2, #0
 800858c:	f04f 0300 	mov.w	r3, #0
 8008590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008594:	4649      	mov	r1, r9
 8008596:	008b      	lsls	r3, r1, #2
 8008598:	4641      	mov	r1, r8
 800859a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800859e:	4641      	mov	r1, r8
 80085a0:	008a      	lsls	r2, r1, #2
 80085a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80085a6:	f7f8 fb01 	bl	8000bac <__aeabi_uldivmod>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	4b38      	ldr	r3, [pc, #224]	@ (8008694 <UART_SetConfig+0x4e4>)
 80085b2:	fba3 2301 	umull	r2, r3, r3, r1
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	2264      	movs	r2, #100	@ 0x64
 80085ba:	fb02 f303 	mul.w	r3, r2, r3
 80085be:	1acb      	subs	r3, r1, r3
 80085c0:	011b      	lsls	r3, r3, #4
 80085c2:	3332      	adds	r3, #50	@ 0x32
 80085c4:	4a33      	ldr	r2, [pc, #204]	@ (8008694 <UART_SetConfig+0x4e4>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085d0:	441c      	add	r4, r3
 80085d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085d6:	2200      	movs	r2, #0
 80085d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80085da:	677a      	str	r2, [r7, #116]	@ 0x74
 80085dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	1891      	adds	r1, r2, r2
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	415b      	adcs	r3, r3
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085f0:	4641      	mov	r1, r8
 80085f2:	1851      	adds	r1, r2, r1
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	4649      	mov	r1, r9
 80085f8:	414b      	adcs	r3, r1
 80085fa:	607b      	str	r3, [r7, #4]
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008608:	4659      	mov	r1, fp
 800860a:	00cb      	lsls	r3, r1, #3
 800860c:	4651      	mov	r1, sl
 800860e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008612:	4651      	mov	r1, sl
 8008614:	00ca      	lsls	r2, r1, #3
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	4603      	mov	r3, r0
 800861c:	4642      	mov	r2, r8
 800861e:	189b      	adds	r3, r3, r2
 8008620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008622:	464b      	mov	r3, r9
 8008624:	460a      	mov	r2, r1
 8008626:	eb42 0303 	adc.w	r3, r2, r3
 800862a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800862c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	663b      	str	r3, [r7, #96]	@ 0x60
 8008636:	667a      	str	r2, [r7, #100]	@ 0x64
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008644:	4649      	mov	r1, r9
 8008646:	008b      	lsls	r3, r1, #2
 8008648:	4641      	mov	r1, r8
 800864a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800864e:	4641      	mov	r1, r8
 8008650:	008a      	lsls	r2, r1, #2
 8008652:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008656:	f7f8 faa9 	bl	8000bac <__aeabi_uldivmod>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4b0d      	ldr	r3, [pc, #52]	@ (8008694 <UART_SetConfig+0x4e4>)
 8008660:	fba3 1302 	umull	r1, r3, r3, r2
 8008664:	095b      	lsrs	r3, r3, #5
 8008666:	2164      	movs	r1, #100	@ 0x64
 8008668:	fb01 f303 	mul.w	r3, r1, r3
 800866c:	1ad3      	subs	r3, r2, r3
 800866e:	011b      	lsls	r3, r3, #4
 8008670:	3332      	adds	r3, #50	@ 0x32
 8008672:	4a08      	ldr	r2, [pc, #32]	@ (8008694 <UART_SetConfig+0x4e4>)
 8008674:	fba2 2303 	umull	r2, r3, r2, r3
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	f003 020f 	and.w	r2, r3, #15
 800867e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4422      	add	r2, r4
 8008686:	609a      	str	r2, [r3, #8]
}
 8008688:	bf00      	nop
 800868a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800868e:	46bd      	mov	sp, r7
 8008690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008694:	51eb851f 	.word	0x51eb851f

08008698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f103 0208 	add.w	r2, r3, #8
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f103 0208 	add.w	r2, r3, #8
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f103 0208 	add.w	r2, r3, #8
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
}
 800872e:	bf00      	nop
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008750:	d103      	bne.n	800875a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e00c      	b.n	8008774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3308      	adds	r3, #8
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	e002      	b.n	8008768 <vListInsert+0x2e>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	d2f6      	bcs.n	8008762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	601a      	str	r2, [r3, #0]
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6892      	ldr	r2, [r2, #8]
 80087c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6852      	ldr	r2, [r2, #4]
 80087cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d103      	bne.n	80087e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	1e5a      	subs	r2, r3, #1
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008826:	bf00      	nop
 8008828:	bf00      	nop
 800882a:	e7fd      	b.n	8008828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800882c:	f001 fe04 	bl	800a438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008838:	68f9      	ldr	r1, [r7, #12]
 800883a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800883c:	fb01 f303 	mul.w	r3, r1, r3
 8008840:	441a      	add	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885c:	3b01      	subs	r3, #1
 800885e:	68f9      	ldr	r1, [r7, #12]
 8008860:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008862:	fb01 f303 	mul.w	r3, r1, r3
 8008866:	441a      	add	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	22ff      	movs	r2, #255	@ 0xff
 8008870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	22ff      	movs	r2, #255	@ 0xff
 8008878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d114      	bne.n	80088ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d01a      	beq.n	80088c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3310      	adds	r3, #16
 800888e:	4618      	mov	r0, r3
 8008890:	f001 f8be 	bl	8009a10 <xTaskRemoveFromEventList>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d012      	beq.n	80088c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800889a:	4b0d      	ldr	r3, [pc, #52]	@ (80088d0 <xQueueGenericReset+0xd0>)
 800889c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088a0:	601a      	str	r2, [r3, #0]
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	e009      	b.n	80088c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3310      	adds	r3, #16
 80088b0:	4618      	mov	r0, r3
 80088b2:	f7ff fef1 	bl	8008698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3324      	adds	r3, #36	@ 0x24
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff feec 	bl	8008698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088c0:	f001 fdec 	bl	800a49c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80088c4:	2301      	movs	r3, #1
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08a      	sub	sp, #40	@ 0x28
 80088d8:	af02      	add	r7, sp, #8
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	4613      	mov	r3, r2
 80088e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10b      	bne.n	8008900 <xQueueGenericCreate+0x2c>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	613b      	str	r3, [r7, #16]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	fb02 f303 	mul.w	r3, r2, r3
 8008908:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	3348      	adds	r3, #72	@ 0x48
 800890e:	4618      	mov	r0, r3
 8008910:	f001 fe72 	bl	800a5f8 <pvPortMalloc>
 8008914:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d011      	beq.n	8008940 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	3348      	adds	r3, #72	@ 0x48
 8008924:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800892e:	79fa      	ldrb	r2, [r7, #7]
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	4613      	mov	r3, r2
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	68b9      	ldr	r1, [r7, #8]
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 f805 	bl	800894a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008940:	69bb      	ldr	r3, [r7, #24]
	}
 8008942:	4618      	mov	r0, r3
 8008944:	3720      	adds	r7, #32
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	e002      	b.n	800896c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008978:	2101      	movs	r1, #1
 800897a:	69b8      	ldr	r0, [r7, #24]
 800897c:	f7ff ff40 	bl	8008800 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008980:	bf00      	nop
 8008982:	3710      	adds	r7, #16
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08e      	sub	sp, #56	@ 0x38
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008996:	2300      	movs	r3, #0
 8008998:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800899e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10b      	bne.n	80089bc <xQueueGenericSend+0x34>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d103      	bne.n	80089ca <xQueueGenericSend+0x42>
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <xQueueGenericSend+0x46>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <xQueueGenericSend+0x48>
 80089ce:	2300      	movs	r3, #0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10b      	bne.n	80089ec <xQueueGenericSend+0x64>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	e7fd      	b.n	80089e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d103      	bne.n	80089fa <xQueueGenericSend+0x72>
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d101      	bne.n	80089fe <xQueueGenericSend+0x76>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <xQueueGenericSend+0x78>
 80089fe:	2300      	movs	r3, #0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10b      	bne.n	8008a1c <xQueueGenericSend+0x94>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	623b      	str	r3, [r7, #32]
}
 8008a16:	bf00      	nop
 8008a18:	bf00      	nop
 8008a1a:	e7fd      	b.n	8008a18 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a1c:	f001 f9b8 	bl	8009d90 <xTaskGetSchedulerState>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <xQueueGenericSend+0xa4>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <xQueueGenericSend+0xa8>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e000      	b.n	8008a32 <xQueueGenericSend+0xaa>
 8008a30:	2300      	movs	r3, #0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10b      	bne.n	8008a4e <xQueueGenericSend+0xc6>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	61fb      	str	r3, [r7, #28]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a4e:	f001 fcf3 	bl	800a438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d302      	bcc.n	8008a64 <xQueueGenericSend+0xdc>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d129      	bne.n	8008ab8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a6a:	f000 fa99 	bl	8008fa0 <prvCopyDataToQueue>
 8008a6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d010      	beq.n	8008a9a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7a:	3324      	adds	r3, #36	@ 0x24
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 ffc7 	bl	8009a10 <xTaskRemoveFromEventList>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d013      	beq.n	8008ab0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a88:	4b3f      	ldr	r3, [pc, #252]	@ (8008b88 <xQueueGenericSend+0x200>)
 8008a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	e00a      	b.n	8008ab0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008aa0:	4b39      	ldr	r3, [pc, #228]	@ (8008b88 <xQueueGenericSend+0x200>)
 8008aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ab0:	f001 fcf4 	bl	800a49c <vPortExitCritical>
				return pdPASS;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e063      	b.n	8008b80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008abe:	f001 fced 	bl	800a49c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e05c      	b.n	8008b80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d106      	bne.n	8008ada <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008acc:	f107 0314 	add.w	r3, r7, #20
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f001 f801 	bl	8009ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ada:	f001 fcdf 	bl	800a49c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ade:	f000 fd9f 	bl	8009620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ae2:	f001 fca9 	bl	800a438 <vPortEnterCritical>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008aec:	b25b      	sxtb	r3, r3
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af2:	d103      	bne.n	8008afc <xQueueGenericSend+0x174>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b02:	b25b      	sxtb	r3, r3
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b08:	d103      	bne.n	8008b12 <xQueueGenericSend+0x18a>
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b12:	f001 fcc3 	bl	800a49c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b16:	1d3a      	adds	r2, r7, #4
 8008b18:	f107 0314 	add.w	r3, r7, #20
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fff0 	bl	8009b04 <xTaskCheckForTimeOut>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d124      	bne.n	8008b74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b2c:	f000 fb30 	bl	8009190 <prvIsQueueFull>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d018      	beq.n	8008b68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b38:	3310      	adds	r3, #16
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 ff40 	bl	80099c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b46:	f000 fabb 	bl	80090c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b4a:	f000 fd77 	bl	800963c <xTaskResumeAll>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f47f af7c 	bne.w	8008a4e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b56:	4b0c      	ldr	r3, [pc, #48]	@ (8008b88 <xQueueGenericSend+0x200>)
 8008b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	e772      	b.n	8008a4e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b6a:	f000 faa9 	bl	80090c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b6e:	f000 fd65 	bl	800963c <xTaskResumeAll>
 8008b72:	e76c      	b.n	8008a4e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b76:	f000 faa3 	bl	80090c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b7a:	f000 fd5f 	bl	800963c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3738      	adds	r7, #56	@ 0x38
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08c      	sub	sp, #48	@ 0x30
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10b      	bne.n	8008bbe <xQueueReceive+0x32>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	623b      	str	r3, [r7, #32]
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	e7fd      	b.n	8008bba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <xQueueReceive+0x40>
 8008bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <xQueueReceive+0x44>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <xQueueReceive+0x46>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10b      	bne.n	8008bee <xQueueReceive+0x62>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	61fb      	str	r3, [r7, #28]
}
 8008be8:	bf00      	nop
 8008bea:	bf00      	nop
 8008bec:	e7fd      	b.n	8008bea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bee:	f001 f8cf 	bl	8009d90 <xTaskGetSchedulerState>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d102      	bne.n	8008bfe <xQueueReceive+0x72>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <xQueueReceive+0x76>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <xQueueReceive+0x78>
 8008c02:	2300      	movs	r3, #0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10b      	bne.n	8008c20 <xQueueReceive+0x94>
	__asm volatile
 8008c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	61bb      	str	r3, [r7, #24]
}
 8008c1a:	bf00      	nop
 8008c1c:	bf00      	nop
 8008c1e:	e7fd      	b.n	8008c1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c20:	f001 fc0a 	bl	800a438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01f      	beq.n	8008c70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c30:	68b9      	ldr	r1, [r7, #8]
 8008c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c34:	f000 fa1e 	bl	8009074 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	1e5a      	subs	r2, r3, #1
 8008c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00f      	beq.n	8008c68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fedf 	bl	8009a10 <xTaskRemoveFromEventList>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c58:	4b3c      	ldr	r3, [pc, #240]	@ (8008d4c <xQueueReceive+0x1c0>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c68:	f001 fc18 	bl	800a49c <vPortExitCritical>
				return pdPASS;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e069      	b.n	8008d44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d103      	bne.n	8008c7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c76:	f001 fc11 	bl	800a49c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e062      	b.n	8008d44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d106      	bne.n	8008c92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c84:	f107 0310 	add.w	r3, r7, #16
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f000 ff25 	bl	8009ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c92:	f001 fc03 	bl	800a49c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c96:	f000 fcc3 	bl	8009620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c9a:	f001 fbcd 	bl	800a438 <vPortEnterCritical>
 8008c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008caa:	d103      	bne.n	8008cb4 <xQueueReceive+0x128>
 8008cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cba:	b25b      	sxtb	r3, r3
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d103      	bne.n	8008cca <xQueueReceive+0x13e>
 8008cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cca:	f001 fbe7 	bl	800a49c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cce:	1d3a      	adds	r2, r7, #4
 8008cd0:	f107 0310 	add.w	r3, r7, #16
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 ff14 	bl	8009b04 <xTaskCheckForTimeOut>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d123      	bne.n	8008d2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ce4:	f000 fa3e 	bl	8009164 <prvIsQueueEmpty>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d017      	beq.n	8008d1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf0:	3324      	adds	r3, #36	@ 0x24
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fe64 	bl	80099c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cfe:	f000 f9df 	bl	80090c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d02:	f000 fc9b 	bl	800963c <xTaskResumeAll>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d189      	bne.n	8008c20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d4c <xQueueReceive+0x1c0>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	e780      	b.n	8008c20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d20:	f000 f9ce 	bl	80090c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d24:	f000 fc8a 	bl	800963c <xTaskResumeAll>
 8008d28:	e77a      	b.n	8008c20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d2c:	f000 f9c8 	bl	80090c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d30:	f000 fc84 	bl	800963c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d36:	f000 fa15 	bl	8009164 <prvIsQueueEmpty>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f43f af6f 	beq.w	8008c20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3730      	adds	r7, #48	@ 0x30
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b08e      	sub	sp, #56	@ 0x38
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	623b      	str	r3, [r7, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	bf00      	nop
 8008d82:	e7fd      	b.n	8008d80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	61fb      	str	r3, [r7, #28]
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	e7fd      	b.n	8008da0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008da4:	f000 fff4 	bl	8009d90 <xTaskGetSchedulerState>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <xQueueSemaphoreTake+0x64>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <xQueueSemaphoreTake+0x68>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e000      	b.n	8008dba <xQueueSemaphoreTake+0x6a>
 8008db8:	2300      	movs	r3, #0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10b      	bne.n	8008dd6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	61bb      	str	r3, [r7, #24]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008dd6:	f001 fb2f 	bl	800a438 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dde:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d024      	beq.n	8008e30 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	1e5a      	subs	r2, r3, #1
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008df6:	f001 f977 	bl	800a0e8 <pvTaskIncrementMutexHeldCount>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00f      	beq.n	8008e28 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0a:	3310      	adds	r3, #16
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 fdff 	bl	8009a10 <xTaskRemoveFromEventList>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d007      	beq.n	8008e28 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e18:	4b54      	ldr	r3, [pc, #336]	@ (8008f6c <xQueueSemaphoreTake+0x21c>)
 8008e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	f3bf 8f4f 	dsb	sy
 8008e24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e28:	f001 fb38 	bl	800a49c <vPortExitCritical>
				return pdPASS;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e098      	b.n	8008f62 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d112      	bne.n	8008e5c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	617b      	str	r3, [r7, #20]
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	e7fd      	b.n	8008e50 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e54:	f001 fb22 	bl	800a49c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	e082      	b.n	8008f62 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e62:	f107 030c 	add.w	r3, r7, #12
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fe36 	bl	8009ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e70:	f001 fb14 	bl	800a49c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e74:	f000 fbd4 	bl	8009620 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e78:	f001 fade 	bl	800a438 <vPortEnterCritical>
 8008e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e82:	b25b      	sxtb	r3, r3
 8008e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e88:	d103      	bne.n	8008e92 <xQueueSemaphoreTake+0x142>
 8008e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e98:	b25b      	sxtb	r3, r3
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9e:	d103      	bne.n	8008ea8 <xQueueSemaphoreTake+0x158>
 8008ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ea8:	f001 faf8 	bl	800a49c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eac:	463a      	mov	r2, r7
 8008eae:	f107 030c 	add.w	r3, r7, #12
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fe25 	bl	8009b04 <xTaskCheckForTimeOut>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d132      	bne.n	8008f26 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ec0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ec2:	f000 f94f 	bl	8009164 <prvIsQueueEmpty>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d026      	beq.n	8008f1a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d109      	bne.n	8008ee8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008ed4:	f001 fab0 	bl	800a438 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 ff75 	bl	8009dcc <xTaskPriorityInherit>
 8008ee2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008ee4:	f001 fada 	bl	800a49c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eea:	3324      	adds	r3, #36	@ 0x24
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fd67 	bl	80099c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ef6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ef8:	f000 f8e2 	bl	80090c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008efc:	f000 fb9e 	bl	800963c <xTaskResumeAll>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f47f af67 	bne.w	8008dd6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008f08:	4b18      	ldr	r3, [pc, #96]	@ (8008f6c <xQueueSemaphoreTake+0x21c>)
 8008f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	f3bf 8f4f 	dsb	sy
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	e75d      	b.n	8008dd6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f1c:	f000 f8d0 	bl	80090c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f20:	f000 fb8c 	bl	800963c <xTaskResumeAll>
 8008f24:	e757      	b.n	8008dd6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f28:	f000 f8ca 	bl	80090c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f2c:	f000 fb86 	bl	800963c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f32:	f000 f917 	bl	8009164 <prvIsQueueEmpty>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f43f af4c 	beq.w	8008dd6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00d      	beq.n	8008f60 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008f44:	f001 fa78 	bl	800a438 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f4a:	f000 f811 	bl	8008f70 <prvGetDisinheritPriorityAfterTimeout>
 8008f4e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 f836 	bl	8009fc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f5c:	f001 fa9e 	bl	800a49c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3738      	adds	r7, #56	@ 0x38
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	e000ed04 	.word	0xe000ed04

08008f70 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d006      	beq.n	8008f8e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f1c3 0307 	rsb	r3, r3, #7
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e001      	b.n	8008f92 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008f92:	68fb      	ldr	r3, [r7, #12]
	}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fac:	2300      	movs	r3, #0
 8008fae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10d      	bne.n	8008fda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d14d      	bne.n	8009062 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 ff74 	bl	8009eb8 <xTaskPriorityDisinherit>
 8008fd0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	609a      	str	r2, [r3, #8]
 8008fd8:	e043      	b.n	8009062 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d119      	bne.n	8009014 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6858      	ldr	r0, [r3, #4]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe8:	461a      	mov	r2, r3
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	f009 f8cd 	bl	801218a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	429a      	cmp	r2, r3
 8009008:	d32b      	bcc.n	8009062 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	605a      	str	r2, [r3, #4]
 8009012:	e026      	b.n	8009062 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	68d8      	ldr	r0, [r3, #12]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901c:	461a      	mov	r2, r3
 800901e:	68b9      	ldr	r1, [r7, #8]
 8009020:	f009 f8b3 	bl	801218a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902c:	425b      	negs	r3, r3
 800902e:	441a      	add	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d207      	bcs.n	8009050 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009048:	425b      	negs	r3, r3
 800904a:	441a      	add	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d105      	bne.n	8009062 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	3b01      	subs	r3, #1
 8009060:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800906a:	697b      	ldr	r3, [r7, #20]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009082:	2b00      	cmp	r3, #0
 8009084:	d018      	beq.n	80090b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908e:	441a      	add	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	429a      	cmp	r2, r3
 800909e:	d303      	bcc.n	80090a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68d9      	ldr	r1, [r3, #12]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b0:	461a      	mov	r2, r3
 80090b2:	6838      	ldr	r0, [r7, #0]
 80090b4:	f009 f869 	bl	801218a <memcpy>
	}
}
 80090b8:	bf00      	nop
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090c8:	f001 f9b6 	bl	800a438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090d4:	e011      	b.n	80090fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d012      	beq.n	8009104 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3324      	adds	r3, #36	@ 0x24
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fc94 	bl	8009a10 <xTaskRemoveFromEventList>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090ee:	f000 fd6d 	bl	8009bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dce9      	bgt.n	80090d6 <prvUnlockQueue+0x16>
 8009102:	e000      	b.n	8009106 <prvUnlockQueue+0x46>
					break;
 8009104:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	22ff      	movs	r2, #255	@ 0xff
 800910a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800910e:	f001 f9c5 	bl	800a49c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009112:	f001 f991 	bl	800a438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800911c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800911e:	e011      	b.n	8009144 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d012      	beq.n	800914e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3310      	adds	r3, #16
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fc6f 	bl	8009a10 <xTaskRemoveFromEventList>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009138:	f000 fd48 	bl	8009bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800913c:	7bbb      	ldrb	r3, [r7, #14]
 800913e:	3b01      	subs	r3, #1
 8009140:	b2db      	uxtb	r3, r3
 8009142:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009144:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009148:	2b00      	cmp	r3, #0
 800914a:	dce9      	bgt.n	8009120 <prvUnlockQueue+0x60>
 800914c:	e000      	b.n	8009150 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800914e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	22ff      	movs	r2, #255	@ 0xff
 8009154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009158:	f001 f9a0 	bl	800a49c <vPortExitCritical>
}
 800915c:	bf00      	nop
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800916c:	f001 f964 	bl	800a438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009174:	2b00      	cmp	r3, #0
 8009176:	d102      	bne.n	800917e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009178:	2301      	movs	r3, #1
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	e001      	b.n	8009182 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009182:	f001 f98b 	bl	800a49c <vPortExitCritical>

	return xReturn;
 8009186:	68fb      	ldr	r3, [r7, #12]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009198:	f001 f94e 	bl	800a438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d102      	bne.n	80091ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091a8:	2301      	movs	r3, #1
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	e001      	b.n	80091b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091b2:	f001 f973 	bl	800a49c <vPortExitCritical>

	return xReturn;
 80091b6:	68fb      	ldr	r3, [r7, #12]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	@ 0x38
 80091c4:	af04      	add	r7, sp, #16
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10b      	bne.n	80091ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	623b      	str	r3, [r7, #32]
}
 80091e6:	bf00      	nop
 80091e8:	bf00      	nop
 80091ea:	e7fd      	b.n	80091e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10b      	bne.n	800920a <xTaskCreateStatic+0x4a>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f6:	f383 8811 	msr	BASEPRI, r3
 80091fa:	f3bf 8f6f 	isb	sy
 80091fe:	f3bf 8f4f 	dsb	sy
 8009202:	61fb      	str	r3, [r7, #28]
}
 8009204:	bf00      	nop
 8009206:	bf00      	nop
 8009208:	e7fd      	b.n	8009206 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800920a:	2354      	movs	r3, #84	@ 0x54
 800920c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b54      	cmp	r3, #84	@ 0x54
 8009212:	d00b      	beq.n	800922c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	61bb      	str	r3, [r7, #24]
}
 8009226:	bf00      	nop
 8009228:	bf00      	nop
 800922a:	e7fd      	b.n	8009228 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800922c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800922e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01e      	beq.n	8009272 <xTaskCreateStatic+0xb2>
 8009234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009236:	2b00      	cmp	r3, #0
 8009238:	d01b      	beq.n	8009272 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800923a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009242:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	2202      	movs	r2, #2
 8009248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800924c:	2300      	movs	r3, #0
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009252:	9302      	str	r3, [sp, #8]
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	68b9      	ldr	r1, [r7, #8]
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 f850 	bl	800930a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800926a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800926c:	f000 f8d6 	bl	800941c <prvAddNewTaskToReadyList>
 8009270:	e001      	b.n	8009276 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009272:	2300      	movs	r3, #0
 8009274:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009276:	697b      	ldr	r3, [r7, #20]
	}
 8009278:	4618      	mov	r0, r3
 800927a:	3728      	adds	r7, #40	@ 0x28
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009280:	b580      	push	{r7, lr}
 8009282:	b08c      	sub	sp, #48	@ 0x30
 8009284:	af04      	add	r7, sp, #16
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	4613      	mov	r3, r2
 800928e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4618      	mov	r0, r3
 8009296:	f001 f9af 	bl	800a5f8 <pvPortMalloc>
 800929a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00e      	beq.n	80092c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092a2:	2054      	movs	r0, #84	@ 0x54
 80092a4:	f001 f9a8 	bl	800a5f8 <pvPortMalloc>
 80092a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80092b6:	e005      	b.n	80092c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092b8:	6978      	ldr	r0, [r7, #20]
 80092ba:	f001 fa6b 	bl	800a794 <vPortFree>
 80092be:	e001      	b.n	80092c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d017      	beq.n	80092fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092d2:	88fa      	ldrh	r2, [r7, #6]
 80092d4:	2300      	movs	r3, #0
 80092d6:	9303      	str	r3, [sp, #12]
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	9302      	str	r3, [sp, #8]
 80092dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f000 f80e 	bl	800930a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092ee:	69f8      	ldr	r0, [r7, #28]
 80092f0:	f000 f894 	bl	800941c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092f4:	2301      	movs	r3, #1
 80092f6:	61bb      	str	r3, [r7, #24]
 80092f8:	e002      	b.n	8009300 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092fa:	f04f 33ff 	mov.w	r3, #4294967295
 80092fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009300:	69bb      	ldr	r3, [r7, #24]
	}
 8009302:	4618      	mov	r0, r3
 8009304:	3720      	adds	r7, #32
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b088      	sub	sp, #32
 800930e:	af00      	add	r7, sp, #0
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800931a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009322:	3b01      	subs	r3, #1
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	f023 0307 	bic.w	r3, r3, #7
 8009330:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	617b      	str	r3, [r7, #20]
}
 800934e:	bf00      	nop
 8009350:	bf00      	nop
 8009352:	e7fd      	b.n	8009350 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01f      	beq.n	800939a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	e012      	b.n	8009386 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	4413      	add	r3, r2
 8009366:	7819      	ldrb	r1, [r3, #0]
 8009368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	4413      	add	r3, r2
 800936e:	3334      	adds	r3, #52	@ 0x34
 8009370:	460a      	mov	r2, r1
 8009372:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d006      	beq.n	800938e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	3301      	adds	r3, #1
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	2b0f      	cmp	r3, #15
 800938a:	d9e9      	bls.n	8009360 <prvInitialiseNewTask+0x56>
 800938c:	e000      	b.n	8009390 <prvInitialiseNewTask+0x86>
			{
				break;
 800938e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009398:	e003      	b.n	80093a2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a4:	2b06      	cmp	r3, #6
 80093a6:	d901      	bls.n	80093ac <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093a8:	2306      	movs	r3, #6
 80093aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093b6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80093b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ba:	2200      	movs	r2, #0
 80093bc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	3304      	adds	r3, #4
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7ff f988 	bl	80086d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ca:	3318      	adds	r3, #24
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7ff f983 	bl	80086d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093da:	f1c3 0207 	rsb	r2, r3, #7
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ea:	2200      	movs	r2, #0
 80093ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093f6:	683a      	ldr	r2, [r7, #0]
 80093f8:	68f9      	ldr	r1, [r7, #12]
 80093fa:	69b8      	ldr	r0, [r7, #24]
 80093fc:	f000 feee 	bl	800a1dc <pxPortInitialiseStack>
 8009400:	4602      	mov	r2, r0
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800940c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009412:	bf00      	nop
 8009414:	3720      	adds	r7, #32
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009424:	f001 f808 	bl	800a438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009428:	4b2a      	ldr	r3, [pc, #168]	@ (80094d4 <prvAddNewTaskToReadyList+0xb8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3301      	adds	r3, #1
 800942e:	4a29      	ldr	r2, [pc, #164]	@ (80094d4 <prvAddNewTaskToReadyList+0xb8>)
 8009430:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009432:	4b29      	ldr	r3, [pc, #164]	@ (80094d8 <prvAddNewTaskToReadyList+0xbc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800943a:	4a27      	ldr	r2, [pc, #156]	@ (80094d8 <prvAddNewTaskToReadyList+0xbc>)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009440:	4b24      	ldr	r3, [pc, #144]	@ (80094d4 <prvAddNewTaskToReadyList+0xb8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d110      	bne.n	800946a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009448:	f000 fbe4 	bl	8009c14 <prvInitialiseTaskLists>
 800944c:	e00d      	b.n	800946a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800944e:	4b23      	ldr	r3, [pc, #140]	@ (80094dc <prvAddNewTaskToReadyList+0xc0>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d109      	bne.n	800946a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009456:	4b20      	ldr	r3, [pc, #128]	@ (80094d8 <prvAddNewTaskToReadyList+0xbc>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009460:	429a      	cmp	r2, r3
 8009462:	d802      	bhi.n	800946a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009464:	4a1c      	ldr	r2, [pc, #112]	@ (80094d8 <prvAddNewTaskToReadyList+0xbc>)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800946a:	4b1d      	ldr	r3, [pc, #116]	@ (80094e0 <prvAddNewTaskToReadyList+0xc4>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3301      	adds	r3, #1
 8009470:	4a1b      	ldr	r2, [pc, #108]	@ (80094e0 <prvAddNewTaskToReadyList+0xc4>)
 8009472:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009478:	2201      	movs	r2, #1
 800947a:	409a      	lsls	r2, r3
 800947c:	4b19      	ldr	r3, [pc, #100]	@ (80094e4 <prvAddNewTaskToReadyList+0xc8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4313      	orrs	r3, r2
 8009482:	4a18      	ldr	r2, [pc, #96]	@ (80094e4 <prvAddNewTaskToReadyList+0xc8>)
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800948a:	4613      	mov	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	4413      	add	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4a15      	ldr	r2, [pc, #84]	@ (80094e8 <prvAddNewTaskToReadyList+0xcc>)
 8009494:	441a      	add	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3304      	adds	r3, #4
 800949a:	4619      	mov	r1, r3
 800949c:	4610      	mov	r0, r2
 800949e:	f7ff f928 	bl	80086f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094a2:	f000 fffb 	bl	800a49c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094a6:	4b0d      	ldr	r3, [pc, #52]	@ (80094dc <prvAddNewTaskToReadyList+0xc0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00e      	beq.n	80094cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094ae:	4b0a      	ldr	r3, [pc, #40]	@ (80094d8 <prvAddNewTaskToReadyList+0xbc>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d207      	bcs.n	80094cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094bc:	4b0b      	ldr	r3, [pc, #44]	@ (80094ec <prvAddNewTaskToReadyList+0xd0>)
 80094be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20001070 	.word	0x20001070
 80094d8:	20000f70 	.word	0x20000f70
 80094dc:	2000107c 	.word	0x2000107c
 80094e0:	2000108c 	.word	0x2000108c
 80094e4:	20001078 	.word	0x20001078
 80094e8:	20000f74 	.word	0x20000f74
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d018      	beq.n	8009534 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009502:	4b14      	ldr	r3, [pc, #80]	@ (8009554 <vTaskDelay+0x64>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00b      	beq.n	8009522 <vTaskDelay+0x32>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	60bb      	str	r3, [r7, #8]
}
 800951c:	bf00      	nop
 800951e:	bf00      	nop
 8009520:	e7fd      	b.n	800951e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009522:	f000 f87d 	bl	8009620 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009526:	2100      	movs	r1, #0
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fdf1 	bl	800a110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800952e:	f000 f885 	bl	800963c <xTaskResumeAll>
 8009532:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d107      	bne.n	800954a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800953a:	4b07      	ldr	r3, [pc, #28]	@ (8009558 <vTaskDelay+0x68>)
 800953c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20001098 	.word	0x20001098
 8009558:	e000ed04 	.word	0xe000ed04

0800955c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	@ 0x28
 8009560:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800956a:	463a      	mov	r2, r7
 800956c:	1d39      	adds	r1, r7, #4
 800956e:	f107 0308 	add.w	r3, r7, #8
 8009572:	4618      	mov	r0, r3
 8009574:	f7f7 fc92 	bl	8000e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	9202      	str	r2, [sp, #8]
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	2300      	movs	r3, #0
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	2300      	movs	r3, #0
 8009588:	460a      	mov	r2, r1
 800958a:	491f      	ldr	r1, [pc, #124]	@ (8009608 <vTaskStartScheduler+0xac>)
 800958c:	481f      	ldr	r0, [pc, #124]	@ (800960c <vTaskStartScheduler+0xb0>)
 800958e:	f7ff fe17 	bl	80091c0 <xTaskCreateStatic>
 8009592:	4603      	mov	r3, r0
 8009594:	4a1e      	ldr	r2, [pc, #120]	@ (8009610 <vTaskStartScheduler+0xb4>)
 8009596:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009598:	4b1d      	ldr	r3, [pc, #116]	@ (8009610 <vTaskStartScheduler+0xb4>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e001      	b.n	80095aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095a6:	2300      	movs	r3, #0
 80095a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d116      	bne.n	80095de <vTaskStartScheduler+0x82>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095c4:	4b13      	ldr	r3, [pc, #76]	@ (8009614 <vTaskStartScheduler+0xb8>)
 80095c6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095cc:	4b12      	ldr	r3, [pc, #72]	@ (8009618 <vTaskStartScheduler+0xbc>)
 80095ce:	2201      	movs	r2, #1
 80095d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095d2:	4b12      	ldr	r3, [pc, #72]	@ (800961c <vTaskStartScheduler+0xc0>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095d8:	f000 fe8a 	bl	800a2f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095dc:	e00f      	b.n	80095fe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e4:	d10b      	bne.n	80095fe <vTaskStartScheduler+0xa2>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60fb      	str	r3, [r7, #12]
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	e7fd      	b.n	80095fa <vTaskStartScheduler+0x9e>
}
 80095fe:	bf00      	nop
 8009600:	3718      	adds	r7, #24
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	08013350 	.word	0x08013350
 800960c:	08009be5 	.word	0x08009be5
 8009610:	20001094 	.word	0x20001094
 8009614:	20001090 	.word	0x20001090
 8009618:	2000107c 	.word	0x2000107c
 800961c:	20001074 	.word	0x20001074

08009620 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009624:	4b04      	ldr	r3, [pc, #16]	@ (8009638 <vTaskSuspendAll+0x18>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3301      	adds	r3, #1
 800962a:	4a03      	ldr	r2, [pc, #12]	@ (8009638 <vTaskSuspendAll+0x18>)
 800962c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800962e:	bf00      	nop
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	20001098 	.word	0x20001098

0800963c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009646:	2300      	movs	r3, #0
 8009648:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800964a:	4b42      	ldr	r3, [pc, #264]	@ (8009754 <xTaskResumeAll+0x118>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <xTaskResumeAll+0x2e>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	603b      	str	r3, [r7, #0]
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop
 8009668:	e7fd      	b.n	8009666 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800966a:	f000 fee5 	bl	800a438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800966e:	4b39      	ldr	r3, [pc, #228]	@ (8009754 <xTaskResumeAll+0x118>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3b01      	subs	r3, #1
 8009674:	4a37      	ldr	r2, [pc, #220]	@ (8009754 <xTaskResumeAll+0x118>)
 8009676:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009678:	4b36      	ldr	r3, [pc, #216]	@ (8009754 <xTaskResumeAll+0x118>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d161      	bne.n	8009744 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009680:	4b35      	ldr	r3, [pc, #212]	@ (8009758 <xTaskResumeAll+0x11c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d05d      	beq.n	8009744 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009688:	e02e      	b.n	80096e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800968a:	4b34      	ldr	r3, [pc, #208]	@ (800975c <xTaskResumeAll+0x120>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3318      	adds	r3, #24
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff f888 	bl	80087ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3304      	adds	r3, #4
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7ff f883 	bl	80087ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096aa:	2201      	movs	r2, #1
 80096ac:	409a      	lsls	r2, r3
 80096ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009760 <xTaskResumeAll+0x124>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	4a2a      	ldr	r2, [pc, #168]	@ (8009760 <xTaskResumeAll+0x124>)
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096bc:	4613      	mov	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4a27      	ldr	r2, [pc, #156]	@ (8009764 <xTaskResumeAll+0x128>)
 80096c6:	441a      	add	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f7ff f80f 	bl	80086f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096d8:	4b23      	ldr	r3, [pc, #140]	@ (8009768 <xTaskResumeAll+0x12c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096de:	429a      	cmp	r2, r3
 80096e0:	d302      	bcc.n	80096e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80096e2:	4b22      	ldr	r3, [pc, #136]	@ (800976c <xTaskResumeAll+0x130>)
 80096e4:	2201      	movs	r2, #1
 80096e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096e8:	4b1c      	ldr	r3, [pc, #112]	@ (800975c <xTaskResumeAll+0x120>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1cc      	bne.n	800968a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d001      	beq.n	80096fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096f6:	f000 fb2b 	bl	8009d50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009770 <xTaskResumeAll+0x134>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d010      	beq.n	8009728 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009706:	f000 f847 	bl	8009798 <xTaskIncrementTick>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009710:	4b16      	ldr	r3, [pc, #88]	@ (800976c <xTaskResumeAll+0x130>)
 8009712:	2201      	movs	r2, #1
 8009714:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3b01      	subs	r3, #1
 800971a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1f1      	bne.n	8009706 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009722:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <xTaskResumeAll+0x134>)
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009728:	4b10      	ldr	r3, [pc, #64]	@ (800976c <xTaskResumeAll+0x130>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d009      	beq.n	8009744 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009730:	2301      	movs	r3, #1
 8009732:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009734:	4b0f      	ldr	r3, [pc, #60]	@ (8009774 <xTaskResumeAll+0x138>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009744:	f000 feaa 	bl	800a49c <vPortExitCritical>

	return xAlreadyYielded;
 8009748:	68bb      	ldr	r3, [r7, #8]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20001098 	.word	0x20001098
 8009758:	20001070 	.word	0x20001070
 800975c:	20001030 	.word	0x20001030
 8009760:	20001078 	.word	0x20001078
 8009764:	20000f74 	.word	0x20000f74
 8009768:	20000f70 	.word	0x20000f70
 800976c:	20001084 	.word	0x20001084
 8009770:	20001080 	.word	0x20001080
 8009774:	e000ed04 	.word	0xe000ed04

08009778 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800977e:	4b05      	ldr	r3, [pc, #20]	@ (8009794 <xTaskGetTickCount+0x1c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009784:	687b      	ldr	r3, [r7, #4]
}
 8009786:	4618      	mov	r0, r3
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	20001074 	.word	0x20001074

08009798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a2:	4b4f      	ldr	r3, [pc, #316]	@ (80098e0 <xTaskIncrementTick+0x148>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f040 808f 	bne.w	80098ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097ac:	4b4d      	ldr	r3, [pc, #308]	@ (80098e4 <xTaskIncrementTick+0x14c>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097b4:	4a4b      	ldr	r2, [pc, #300]	@ (80098e4 <xTaskIncrementTick+0x14c>)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d121      	bne.n	8009804 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097c0:	4b49      	ldr	r3, [pc, #292]	@ (80098e8 <xTaskIncrementTick+0x150>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00b      	beq.n	80097e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	603b      	str	r3, [r7, #0]
}
 80097dc:	bf00      	nop
 80097de:	bf00      	nop
 80097e0:	e7fd      	b.n	80097de <xTaskIncrementTick+0x46>
 80097e2:	4b41      	ldr	r3, [pc, #260]	@ (80098e8 <xTaskIncrementTick+0x150>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	4b40      	ldr	r3, [pc, #256]	@ (80098ec <xTaskIncrementTick+0x154>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a3e      	ldr	r2, [pc, #248]	@ (80098e8 <xTaskIncrementTick+0x150>)
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	4a3e      	ldr	r2, [pc, #248]	@ (80098ec <xTaskIncrementTick+0x154>)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	4b3e      	ldr	r3, [pc, #248]	@ (80098f0 <xTaskIncrementTick+0x158>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3301      	adds	r3, #1
 80097fc:	4a3c      	ldr	r2, [pc, #240]	@ (80098f0 <xTaskIncrementTick+0x158>)
 80097fe:	6013      	str	r3, [r2, #0]
 8009800:	f000 faa6 	bl	8009d50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009804:	4b3b      	ldr	r3, [pc, #236]	@ (80098f4 <xTaskIncrementTick+0x15c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	429a      	cmp	r2, r3
 800980c:	d348      	bcc.n	80098a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800980e:	4b36      	ldr	r3, [pc, #216]	@ (80098e8 <xTaskIncrementTick+0x150>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d104      	bne.n	8009822 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009818:	4b36      	ldr	r3, [pc, #216]	@ (80098f4 <xTaskIncrementTick+0x15c>)
 800981a:	f04f 32ff 	mov.w	r2, #4294967295
 800981e:	601a      	str	r2, [r3, #0]
					break;
 8009820:	e03e      	b.n	80098a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009822:	4b31      	ldr	r3, [pc, #196]	@ (80098e8 <xTaskIncrementTick+0x150>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	429a      	cmp	r2, r3
 8009838:	d203      	bcs.n	8009842 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800983a:	4a2e      	ldr	r2, [pc, #184]	@ (80098f4 <xTaskIncrementTick+0x15c>)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009840:	e02e      	b.n	80098a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	3304      	adds	r3, #4
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe ffb0 	bl	80087ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009850:	2b00      	cmp	r3, #0
 8009852:	d004      	beq.n	800985e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	3318      	adds	r3, #24
 8009858:	4618      	mov	r0, r3
 800985a:	f7fe ffa7 	bl	80087ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009862:	2201      	movs	r2, #1
 8009864:	409a      	lsls	r2, r3
 8009866:	4b24      	ldr	r3, [pc, #144]	@ (80098f8 <xTaskIncrementTick+0x160>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4313      	orrs	r3, r2
 800986c:	4a22      	ldr	r2, [pc, #136]	@ (80098f8 <xTaskIncrementTick+0x160>)
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	4a1f      	ldr	r2, [pc, #124]	@ (80098fc <xTaskIncrementTick+0x164>)
 800987e:	441a      	add	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	3304      	adds	r3, #4
 8009884:	4619      	mov	r1, r3
 8009886:	4610      	mov	r0, r2
 8009888:	f7fe ff33 	bl	80086f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009890:	4b1b      	ldr	r3, [pc, #108]	@ (8009900 <xTaskIncrementTick+0x168>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009896:	429a      	cmp	r2, r3
 8009898:	d3b9      	bcc.n	800980e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800989a:	2301      	movs	r3, #1
 800989c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800989e:	e7b6      	b.n	800980e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098a0:	4b17      	ldr	r3, [pc, #92]	@ (8009900 <xTaskIncrementTick+0x168>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a6:	4915      	ldr	r1, [pc, #84]	@ (80098fc <xTaskIncrementTick+0x164>)
 80098a8:	4613      	mov	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	440b      	add	r3, r1
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d901      	bls.n	80098bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80098b8:	2301      	movs	r3, #1
 80098ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098bc:	4b11      	ldr	r3, [pc, #68]	@ (8009904 <xTaskIncrementTick+0x16c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d007      	beq.n	80098d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80098c4:	2301      	movs	r3, #1
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	e004      	b.n	80098d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009908 <xTaskIncrementTick+0x170>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	3301      	adds	r3, #1
 80098d0:	4a0d      	ldr	r2, [pc, #52]	@ (8009908 <xTaskIncrementTick+0x170>)
 80098d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098d4:	697b      	ldr	r3, [r7, #20]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20001098 	.word	0x20001098
 80098e4:	20001074 	.word	0x20001074
 80098e8:	20001028 	.word	0x20001028
 80098ec:	2000102c 	.word	0x2000102c
 80098f0:	20001088 	.word	0x20001088
 80098f4:	20001090 	.word	0x20001090
 80098f8:	20001078 	.word	0x20001078
 80098fc:	20000f74 	.word	0x20000f74
 8009900:	20000f70 	.word	0x20000f70
 8009904:	20001084 	.word	0x20001084
 8009908:	20001080 	.word	0x20001080

0800990c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009912:	4b27      	ldr	r3, [pc, #156]	@ (80099b0 <vTaskSwitchContext+0xa4>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800991a:	4b26      	ldr	r3, [pc, #152]	@ (80099b4 <vTaskSwitchContext+0xa8>)
 800991c:	2201      	movs	r2, #1
 800991e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009920:	e040      	b.n	80099a4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8009922:	4b24      	ldr	r3, [pc, #144]	@ (80099b4 <vTaskSwitchContext+0xa8>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009928:	4b23      	ldr	r3, [pc, #140]	@ (80099b8 <vTaskSwitchContext+0xac>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	fab3 f383 	clz	r3, r3
 8009934:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	f1c3 031f 	rsb	r3, r3, #31
 800993c:	617b      	str	r3, [r7, #20]
 800993e:	491f      	ldr	r1, [pc, #124]	@ (80099bc <vTaskSwitchContext+0xb0>)
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	440b      	add	r3, r1
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10b      	bne.n	800996a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	607b      	str	r3, [r7, #4]
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	e7fd      	b.n	8009966 <vTaskSwitchContext+0x5a>
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4a11      	ldr	r2, [pc, #68]	@ (80099bc <vTaskSwitchContext+0xb0>)
 8009976:	4413      	add	r3, r2
 8009978:	613b      	str	r3, [r7, #16]
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	605a      	str	r2, [r3, #4]
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	3308      	adds	r3, #8
 800998c:	429a      	cmp	r2, r3
 800998e:	d104      	bne.n	800999a <vTaskSwitchContext+0x8e>
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	605a      	str	r2, [r3, #4]
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	4a07      	ldr	r2, [pc, #28]	@ (80099c0 <vTaskSwitchContext+0xb4>)
 80099a2:	6013      	str	r3, [r2, #0]
}
 80099a4:	bf00      	nop
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	20001098 	.word	0x20001098
 80099b4:	20001084 	.word	0x20001084
 80099b8:	20001078 	.word	0x20001078
 80099bc:	20000f74 	.word	0x20000f74
 80099c0:	20000f70 	.word	0x20000f70

080099c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10b      	bne.n	80099ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	60fb      	str	r3, [r7, #12]
}
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	e7fd      	b.n	80099e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ec:	4b07      	ldr	r3, [pc, #28]	@ (8009a0c <vTaskPlaceOnEventList+0x48>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3318      	adds	r3, #24
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fe fea0 	bl	800873a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099fa:	2101      	movs	r1, #1
 80099fc:	6838      	ldr	r0, [r7, #0]
 80099fe:	f000 fb87 	bl	800a110 <prvAddCurrentTaskToDelayedList>
}
 8009a02:	bf00      	nop
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	20000f70 	.word	0x20000f70

08009a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10b      	bne.n	8009a3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	60fb      	str	r3, [r7, #12]
}
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	e7fd      	b.n	8009a3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	3318      	adds	r3, #24
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe feb2 	bl	80087ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a48:	4b1d      	ldr	r3, [pc, #116]	@ (8009ac0 <xTaskRemoveFromEventList+0xb0>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d11c      	bne.n	8009a8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fe fea9 	bl	80087ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5e:	2201      	movs	r2, #1
 8009a60:	409a      	lsls	r2, r3
 8009a62:	4b18      	ldr	r3, [pc, #96]	@ (8009ac4 <xTaskRemoveFromEventList+0xb4>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	4a16      	ldr	r2, [pc, #88]	@ (8009ac4 <xTaskRemoveFromEventList+0xb4>)
 8009a6a:	6013      	str	r3, [r2, #0]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a70:	4613      	mov	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	4413      	add	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4a13      	ldr	r2, [pc, #76]	@ (8009ac8 <xTaskRemoveFromEventList+0xb8>)
 8009a7a:	441a      	add	r2, r3
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	4619      	mov	r1, r3
 8009a82:	4610      	mov	r0, r2
 8009a84:	f7fe fe35 	bl	80086f2 <vListInsertEnd>
 8009a88:	e005      	b.n	8009a96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	3318      	adds	r3, #24
 8009a8e:	4619      	mov	r1, r3
 8009a90:	480e      	ldr	r0, [pc, #56]	@ (8009acc <xTaskRemoveFromEventList+0xbc>)
 8009a92:	f7fe fe2e 	bl	80086f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad0 <xTaskRemoveFromEventList+0xc0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d905      	bls.n	8009ab0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad4 <xTaskRemoveFromEventList+0xc4>)
 8009aaa:	2201      	movs	r2, #1
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	e001      	b.n	8009ab4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ab4:	697b      	ldr	r3, [r7, #20]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20001098 	.word	0x20001098
 8009ac4:	20001078 	.word	0x20001078
 8009ac8:	20000f74 	.word	0x20000f74
 8009acc:	20001030 	.word	0x20001030
 8009ad0:	20000f70 	.word	0x20000f70
 8009ad4:	20001084 	.word	0x20001084

08009ad8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ae0:	4b06      	ldr	r3, [pc, #24]	@ (8009afc <vTaskInternalSetTimeOutState+0x24>)
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ae8:	4b05      	ldr	r3, [pc, #20]	@ (8009b00 <vTaskInternalSetTimeOutState+0x28>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	605a      	str	r2, [r3, #4]
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20001088 	.word	0x20001088
 8009b00:	20001074 	.word	0x20001074

08009b04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b088      	sub	sp, #32
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10b      	bne.n	8009b2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	613b      	str	r3, [r7, #16]
}
 8009b26:	bf00      	nop
 8009b28:	bf00      	nop
 8009b2a:	e7fd      	b.n	8009b28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10b      	bne.n	8009b4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	60fb      	str	r3, [r7, #12]
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop
 8009b48:	e7fd      	b.n	8009b46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009b4a:	f000 fc75 	bl	800a438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8009bc4 <xTaskCheckForTimeOut+0xc0>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	69ba      	ldr	r2, [r7, #24]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b66:	d102      	bne.n	8009b6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	61fb      	str	r3, [r7, #28]
 8009b6c:	e023      	b.n	8009bb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b15      	ldr	r3, [pc, #84]	@ (8009bc8 <xTaskCheckForTimeOut+0xc4>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d007      	beq.n	8009b8a <xTaskCheckForTimeOut+0x86>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d302      	bcc.n	8009b8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b84:	2301      	movs	r3, #1
 8009b86:	61fb      	str	r3, [r7, #28]
 8009b88:	e015      	b.n	8009bb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d20b      	bcs.n	8009bac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	1ad2      	subs	r2, r2, r3
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff ff99 	bl	8009ad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	61fb      	str	r3, [r7, #28]
 8009baa:	e004      	b.n	8009bb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009bb6:	f000 fc71 	bl	800a49c <vPortExitCritical>

	return xReturn;
 8009bba:	69fb      	ldr	r3, [r7, #28]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20001074 	.word	0x20001074
 8009bc8:	20001088 	.word	0x20001088

08009bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	@ (8009be0 <vTaskMissedYield+0x14>)
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
}
 8009bd6:	bf00      	nop
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	20001084 	.word	0x20001084

08009be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bec:	f000 f852 	bl	8009c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bf0:	4b06      	ldr	r3, [pc, #24]	@ (8009c0c <prvIdleTask+0x28>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d9f9      	bls.n	8009bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bf8:	4b05      	ldr	r3, [pc, #20]	@ (8009c10 <prvIdleTask+0x2c>)
 8009bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009c08:	e7f0      	b.n	8009bec <prvIdleTask+0x8>
 8009c0a:	bf00      	nop
 8009c0c:	20000f74 	.word	0x20000f74
 8009c10:	e000ed04 	.word	0xe000ed04

08009c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	607b      	str	r3, [r7, #4]
 8009c1e:	e00c      	b.n	8009c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4a12      	ldr	r2, [pc, #72]	@ (8009c74 <prvInitialiseTaskLists+0x60>)
 8009c2c:	4413      	add	r3, r2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fe fd32 	bl	8008698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	3301      	adds	r3, #1
 8009c38:	607b      	str	r3, [r7, #4]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b06      	cmp	r3, #6
 8009c3e:	d9ef      	bls.n	8009c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c40:	480d      	ldr	r0, [pc, #52]	@ (8009c78 <prvInitialiseTaskLists+0x64>)
 8009c42:	f7fe fd29 	bl	8008698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c46:	480d      	ldr	r0, [pc, #52]	@ (8009c7c <prvInitialiseTaskLists+0x68>)
 8009c48:	f7fe fd26 	bl	8008698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c4c:	480c      	ldr	r0, [pc, #48]	@ (8009c80 <prvInitialiseTaskLists+0x6c>)
 8009c4e:	f7fe fd23 	bl	8008698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c52:	480c      	ldr	r0, [pc, #48]	@ (8009c84 <prvInitialiseTaskLists+0x70>)
 8009c54:	f7fe fd20 	bl	8008698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c58:	480b      	ldr	r0, [pc, #44]	@ (8009c88 <prvInitialiseTaskLists+0x74>)
 8009c5a:	f7fe fd1d 	bl	8008698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c8c <prvInitialiseTaskLists+0x78>)
 8009c60:	4a05      	ldr	r2, [pc, #20]	@ (8009c78 <prvInitialiseTaskLists+0x64>)
 8009c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c64:	4b0a      	ldr	r3, [pc, #40]	@ (8009c90 <prvInitialiseTaskLists+0x7c>)
 8009c66:	4a05      	ldr	r2, [pc, #20]	@ (8009c7c <prvInitialiseTaskLists+0x68>)
 8009c68:	601a      	str	r2, [r3, #0]
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000f74 	.word	0x20000f74
 8009c78:	20001000 	.word	0x20001000
 8009c7c:	20001014 	.word	0x20001014
 8009c80:	20001030 	.word	0x20001030
 8009c84:	20001044 	.word	0x20001044
 8009c88:	2000105c 	.word	0x2000105c
 8009c8c:	20001028 	.word	0x20001028
 8009c90:	2000102c 	.word	0x2000102c

08009c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c9a:	e019      	b.n	8009cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c9c:	f000 fbcc 	bl	800a438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca0:	4b10      	ldr	r3, [pc, #64]	@ (8009ce4 <prvCheckTasksWaitingTermination+0x50>)
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3304      	adds	r3, #4
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7fe fd7d 	bl	80087ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce8 <prvCheckTasksWaitingTermination+0x54>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8009ce8 <prvCheckTasksWaitingTermination+0x54>)
 8009cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8009cec <prvCheckTasksWaitingTermination+0x58>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8009cec <prvCheckTasksWaitingTermination+0x58>)
 8009cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cc6:	f000 fbe9 	bl	800a49c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f810 	bl	8009cf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cd0:	4b06      	ldr	r3, [pc, #24]	@ (8009cec <prvCheckTasksWaitingTermination+0x58>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e1      	bne.n	8009c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20001044 	.word	0x20001044
 8009ce8:	20001070 	.word	0x20001070
 8009cec:	20001058 	.word	0x20001058

08009cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d108      	bne.n	8009d14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fd44 	bl	800a794 <vPortFree>
				vPortFree( pxTCB );
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fd41 	bl	800a794 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d12:	e019      	b.n	8009d48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d103      	bne.n	8009d26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fd38 	bl	800a794 <vPortFree>
	}
 8009d24:	e010      	b.n	8009d48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d00b      	beq.n	8009d48 <prvDeleteTCB+0x58>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	bf00      	nop
 8009d46:	e7fd      	b.n	8009d44 <prvDeleteTCB+0x54>
	}
 8009d48:	bf00      	nop
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d56:	4b0c      	ldr	r3, [pc, #48]	@ (8009d88 <prvResetNextTaskUnblockTime+0x38>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d104      	bne.n	8009d6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d60:	4b0a      	ldr	r3, [pc, #40]	@ (8009d8c <prvResetNextTaskUnblockTime+0x3c>)
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295
 8009d66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d68:	e008      	b.n	8009d7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d6a:	4b07      	ldr	r3, [pc, #28]	@ (8009d88 <prvResetNextTaskUnblockTime+0x38>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	68db      	ldr	r3, [r3, #12]
 8009d72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	4a04      	ldr	r2, [pc, #16]	@ (8009d8c <prvResetNextTaskUnblockTime+0x3c>)
 8009d7a:	6013      	str	r3, [r2, #0]
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	20001028 	.word	0x20001028
 8009d8c:	20001090 	.word	0x20001090

08009d90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d96:	4b0b      	ldr	r3, [pc, #44]	@ (8009dc4 <xTaskGetSchedulerState+0x34>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d102      	bne.n	8009da4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	607b      	str	r3, [r7, #4]
 8009da2:	e008      	b.n	8009db6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da4:	4b08      	ldr	r3, [pc, #32]	@ (8009dc8 <xTaskGetSchedulerState+0x38>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d102      	bne.n	8009db2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009dac:	2302      	movs	r3, #2
 8009dae:	607b      	str	r3, [r7, #4]
 8009db0:	e001      	b.n	8009db6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009db2:	2300      	movs	r3, #0
 8009db4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009db6:	687b      	ldr	r3, [r7, #4]
	}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	2000107c 	.word	0x2000107c
 8009dc8:	20001098 	.word	0x20001098

08009dcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d05e      	beq.n	8009ea0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de6:	4b31      	ldr	r3, [pc, #196]	@ (8009eac <xTaskPriorityInherit+0xe0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d24e      	bcs.n	8009e8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	db06      	blt.n	8009e06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df8:	4b2c      	ldr	r3, [pc, #176]	@ (8009eac <xTaskPriorityInherit+0xe0>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfe:	f1c3 0207 	rsb	r2, r3, #7
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6959      	ldr	r1, [r3, #20]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4a26      	ldr	r2, [pc, #152]	@ (8009eb0 <xTaskPriorityInherit+0xe4>)
 8009e18:	4413      	add	r3, r2
 8009e1a:	4299      	cmp	r1, r3
 8009e1c:	d12f      	bne.n	8009e7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	3304      	adds	r3, #4
 8009e22:	4618      	mov	r0, r3
 8009e24:	f7fe fcc2 	bl	80087ac <uxListRemove>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10a      	bne.n	8009e44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e32:	2201      	movs	r2, #1
 8009e34:	fa02 f303 	lsl.w	r3, r2, r3
 8009e38:	43da      	mvns	r2, r3
 8009e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8009eb4 <xTaskPriorityInherit+0xe8>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	4a1c      	ldr	r2, [pc, #112]	@ (8009eb4 <xTaskPriorityInherit+0xe8>)
 8009e42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e44:	4b19      	ldr	r3, [pc, #100]	@ (8009eac <xTaskPriorityInherit+0xe0>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e52:	2201      	movs	r2, #1
 8009e54:	409a      	lsls	r2, r3
 8009e56:	4b17      	ldr	r3, [pc, #92]	@ (8009eb4 <xTaskPriorityInherit+0xe8>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	4a15      	ldr	r2, [pc, #84]	@ (8009eb4 <xTaskPriorityInherit+0xe8>)
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4a10      	ldr	r2, [pc, #64]	@ (8009eb0 <xTaskPriorityInherit+0xe4>)
 8009e6e:	441a      	add	r2, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f7fe fc3b 	bl	80086f2 <vListInsertEnd>
 8009e7c:	e004      	b.n	8009e88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009eac <xTaskPriorityInherit+0xe0>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	e008      	b.n	8009ea0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e92:	4b06      	ldr	r3, [pc, #24]	@ (8009eac <xTaskPriorityInherit+0xe0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d201      	bcs.n	8009ea0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
	}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000f70 	.word	0x20000f70
 8009eb0:	20000f74 	.word	0x20000f74
 8009eb4:	20001078 	.word	0x20001078

08009eb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d070      	beq.n	8009fb0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ece:	4b3b      	ldr	r3, [pc, #236]	@ (8009fbc <xTaskPriorityDisinherit+0x104>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d00b      	beq.n	8009ef0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009edc:	f383 8811 	msr	BASEPRI, r3
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	f3bf 8f4f 	dsb	sy
 8009ee8:	60fb      	str	r3, [r7, #12]
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	e7fd      	b.n	8009eec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10b      	bne.n	8009f10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	60bb      	str	r3, [r7, #8]
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	e7fd      	b.n	8009f0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f14:	1e5a      	subs	r2, r3, #1
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d044      	beq.n	8009fb0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d140      	bne.n	8009fb0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	3304      	adds	r3, #4
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fc3a 	bl	80087ac <uxListRemove>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d115      	bne.n	8009f6a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f42:	491f      	ldr	r1, [pc, #124]	@ (8009fc0 <xTaskPriorityDisinherit+0x108>)
 8009f44:	4613      	mov	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	440b      	add	r3, r1
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xTaskPriorityDisinherit+0xb2>
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f58:	2201      	movs	r2, #1
 8009f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5e:	43da      	mvns	r2, r3
 8009f60:	4b18      	ldr	r3, [pc, #96]	@ (8009fc4 <xTaskPriorityDisinherit+0x10c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4013      	ands	r3, r2
 8009f66:	4a17      	ldr	r2, [pc, #92]	@ (8009fc4 <xTaskPriorityDisinherit+0x10c>)
 8009f68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f76:	f1c3 0207 	rsb	r2, r3, #7
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f82:	2201      	movs	r2, #1
 8009f84:	409a      	lsls	r2, r3
 8009f86:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc4 <xTaskPriorityDisinherit+0x10c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8009fc4 <xTaskPriorityDisinherit+0x10c>)
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4a08      	ldr	r2, [pc, #32]	@ (8009fc0 <xTaskPriorityDisinherit+0x108>)
 8009f9e:	441a      	add	r2, r3
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fe fba3 	bl	80086f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fac:	2301      	movs	r3, #1
 8009fae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fb0:	697b      	ldr	r3, [r7, #20]
	}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000f70 	.word	0x20000f70
 8009fc0:	20000f74 	.word	0x20000f74
 8009fc4:	20001078 	.word	0x20001078

08009fc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d079      	beq.n	800a0d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10b      	bne.n	800a000 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	60fb      	str	r3, [r7, #12]
}
 8009ffa:	bf00      	nop
 8009ffc:	bf00      	nop
 8009ffe:	e7fd      	b.n	8009ffc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d902      	bls.n	800a010 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	61fb      	str	r3, [r7, #28]
 800a00e:	e002      	b.n	800a016 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a014:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01a:	69fa      	ldr	r2, [r7, #28]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d059      	beq.n	800a0d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	429a      	cmp	r2, r3
 800a028:	d154      	bne.n	800a0d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a02a:	4b2c      	ldr	r3, [pc, #176]	@ (800a0dc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	69ba      	ldr	r2, [r7, #24]
 800a030:	429a      	cmp	r2, r3
 800a032:	d10b      	bne.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60bb      	str	r3, [r7, #8]
}
 800a046:	bf00      	nop
 800a048:	bf00      	nop
 800a04a:	e7fd      	b.n	800a048 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	69fa      	ldr	r2, [r7, #28]
 800a056:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	db04      	blt.n	800a06a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	f1c3 0207 	rsb	r2, r3, #7
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	6959      	ldr	r1, [r3, #20]
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4a19      	ldr	r2, [pc, #100]	@ (800a0e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a07a:	4413      	add	r3, r2
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d129      	bne.n	800a0d4 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	3304      	adds	r3, #4
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe fb91 	bl	80087ac <uxListRemove>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a094:	2201      	movs	r2, #1
 800a096:	fa02 f303 	lsl.w	r3, r2, r3
 800a09a:	43da      	mvns	r2, r3
 800a09c:	4b11      	ldr	r3, [pc, #68]	@ (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	4a10      	ldr	r2, [pc, #64]	@ (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0a4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	409a      	lsls	r2, r3
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	4a0b      	ldr	r2, [pc, #44]	@ (800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4a06      	ldr	r2, [pc, #24]	@ (800a0e0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a0c6:	441a      	add	r2, r3
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fe fb0f 	bl	80086f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0d4:	bf00      	nop
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	20000f70 	.word	0x20000f70
 800a0e0:	20000f74 	.word	0x20000f74
 800a0e4:	20001078 	.word	0x20001078

0800a0e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0ec:	4b07      	ldr	r3, [pc, #28]	@ (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0f4:	4b05      	ldr	r3, [pc, #20]	@ (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a0fe:	4b03      	ldr	r3, [pc, #12]	@ (800a10c <pvTaskIncrementMutexHeldCount+0x24>)
 800a100:	681b      	ldr	r3, [r3, #0]
	}
 800a102:	4618      	mov	r0, r3
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20000f70 	.word	0x20000f70

0800a110 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a11a:	4b29      	ldr	r3, [pc, #164]	@ (800a1c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a120:	4b28      	ldr	r3, [pc, #160]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3304      	adds	r3, #4
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fb40 	bl	80087ac <uxListRemove>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10b      	bne.n	800a14a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a132:	4b24      	ldr	r3, [pc, #144]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a138:	2201      	movs	r2, #1
 800a13a:	fa02 f303 	lsl.w	r3, r2, r3
 800a13e:	43da      	mvns	r2, r3
 800a140:	4b21      	ldr	r3, [pc, #132]	@ (800a1c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4013      	ands	r3, r2
 800a146:	4a20      	ldr	r2, [pc, #128]	@ (800a1c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a148:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d10a      	bne.n	800a168 <prvAddCurrentTaskToDelayedList+0x58>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d007      	beq.n	800a168 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a158:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	3304      	adds	r3, #4
 800a15e:	4619      	mov	r1, r3
 800a160:	481a      	ldr	r0, [pc, #104]	@ (800a1cc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a162:	f7fe fac6 	bl	80086f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a166:	e026      	b.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a170:	4b14      	ldr	r3, [pc, #80]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d209      	bcs.n	800a194 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a180:	4b13      	ldr	r3, [pc, #76]	@ (800a1d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3304      	adds	r3, #4
 800a18a:	4619      	mov	r1, r3
 800a18c:	4610      	mov	r0, r2
 800a18e:	f7fe fad4 	bl	800873a <vListInsert>
}
 800a192:	e010      	b.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a194:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4619      	mov	r1, r3
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	f7fe faca 	bl	800873a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d202      	bcs.n	800a1b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a1b0:	4a09      	ldr	r2, [pc, #36]	@ (800a1d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	6013      	str	r3, [r2, #0]
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20001074 	.word	0x20001074
 800a1c4:	20000f70 	.word	0x20000f70
 800a1c8:	20001078 	.word	0x20001078
 800a1cc:	2000105c 	.word	0x2000105c
 800a1d0:	2000102c 	.word	0x2000102c
 800a1d4:	20001028 	.word	0x20001028
 800a1d8:	20001090 	.word	0x20001090

0800a1dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3b04      	subs	r3, #4
 800a1ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3b04      	subs	r3, #4
 800a1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f023 0201 	bic.w	r2, r3, #1
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3b04      	subs	r3, #4
 800a20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a20c:	4a0c      	ldr	r2, [pc, #48]	@ (800a240 <pxPortInitialiseStack+0x64>)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3b14      	subs	r3, #20
 800a216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	3b04      	subs	r3, #4
 800a222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f06f 0202 	mvn.w	r2, #2
 800a22a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3b20      	subs	r3, #32
 800a230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a232:	68fb      	ldr	r3, [r7, #12]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr
 800a240:	0800a245 	.word	0x0800a245

0800a244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a24e:	4b13      	ldr	r3, [pc, #76]	@ (800a29c <prvTaskExitError+0x58>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a256:	d00b      	beq.n	800a270 <prvTaskExitError+0x2c>
	__asm volatile
 800a258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25c:	f383 8811 	msr	BASEPRI, r3
 800a260:	f3bf 8f6f 	isb	sy
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	60fb      	str	r3, [r7, #12]
}
 800a26a:	bf00      	nop
 800a26c:	bf00      	nop
 800a26e:	e7fd      	b.n	800a26c <prvTaskExitError+0x28>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	60bb      	str	r3, [r7, #8]
}
 800a282:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a284:	bf00      	nop
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0fc      	beq.n	800a286 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a28c:	bf00      	nop
 800a28e:	bf00      	nop
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	20000028 	.word	0x20000028

0800a2a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2a0:	4b07      	ldr	r3, [pc, #28]	@ (800a2c0 <pxCurrentTCBConst2>)
 800a2a2:	6819      	ldr	r1, [r3, #0]
 800a2a4:	6808      	ldr	r0, [r1, #0]
 800a2a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2aa:	f380 8809 	msr	PSP, r0
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f04f 0000 	mov.w	r0, #0
 800a2b6:	f380 8811 	msr	BASEPRI, r0
 800a2ba:	4770      	bx	lr
 800a2bc:	f3af 8000 	nop.w

0800a2c0 <pxCurrentTCBConst2>:
 800a2c0:	20000f70 	.word	0x20000f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2c8:	4808      	ldr	r0, [pc, #32]	@ (800a2ec <prvPortStartFirstTask+0x24>)
 800a2ca:	6800      	ldr	r0, [r0, #0]
 800a2cc:	6800      	ldr	r0, [r0, #0]
 800a2ce:	f380 8808 	msr	MSP, r0
 800a2d2:	f04f 0000 	mov.w	r0, #0
 800a2d6:	f380 8814 	msr	CONTROL, r0
 800a2da:	b662      	cpsie	i
 800a2dc:	b661      	cpsie	f
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	df00      	svc	0
 800a2e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2ea:	bf00      	nop
 800a2ec:	e000ed08 	.word	0xe000ed08

0800a2f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2f6:	4b47      	ldr	r3, [pc, #284]	@ (800a414 <xPortStartScheduler+0x124>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a47      	ldr	r2, [pc, #284]	@ (800a418 <xPortStartScheduler+0x128>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d10b      	bne.n	800a318 <xPortStartScheduler+0x28>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	613b      	str	r3, [r7, #16]
}
 800a312:	bf00      	nop
 800a314:	bf00      	nop
 800a316:	e7fd      	b.n	800a314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a318:	4b3e      	ldr	r3, [pc, #248]	@ (800a414 <xPortStartScheduler+0x124>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a3f      	ldr	r2, [pc, #252]	@ (800a41c <xPortStartScheduler+0x12c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d10b      	bne.n	800a33a <xPortStartScheduler+0x4a>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	60fb      	str	r3, [r7, #12]
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	e7fd      	b.n	800a336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a33a:	4b39      	ldr	r3, [pc, #228]	@ (800a420 <xPortStartScheduler+0x130>)
 800a33c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	22ff      	movs	r2, #255	@ 0xff
 800a34a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	b2db      	uxtb	r3, r3
 800a352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	b2db      	uxtb	r3, r3
 800a358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	4b31      	ldr	r3, [pc, #196]	@ (800a424 <xPortStartScheduler+0x134>)
 800a360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a362:	4b31      	ldr	r3, [pc, #196]	@ (800a428 <xPortStartScheduler+0x138>)
 800a364:	2207      	movs	r2, #7
 800a366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a368:	e009      	b.n	800a37e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a36a:	4b2f      	ldr	r3, [pc, #188]	@ (800a428 <xPortStartScheduler+0x138>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	3b01      	subs	r3, #1
 800a370:	4a2d      	ldr	r2, [pc, #180]	@ (800a428 <xPortStartScheduler+0x138>)
 800a372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	b2db      	uxtb	r3, r3
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a37e:	78fb      	ldrb	r3, [r7, #3]
 800a380:	b2db      	uxtb	r3, r3
 800a382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a386:	2b80      	cmp	r3, #128	@ 0x80
 800a388:	d0ef      	beq.n	800a36a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a38a:	4b27      	ldr	r3, [pc, #156]	@ (800a428 <xPortStartScheduler+0x138>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f1c3 0307 	rsb	r3, r3, #7
 800a392:	2b04      	cmp	r3, #4
 800a394:	d00b      	beq.n	800a3ae <xPortStartScheduler+0xbe>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	60bb      	str	r3, [r7, #8]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a428 <xPortStartScheduler+0x138>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a428 <xPortStartScheduler+0x138>)
 800a3b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a428 <xPortStartScheduler+0x138>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3c0:	4a19      	ldr	r2, [pc, #100]	@ (800a428 <xPortStartScheduler+0x138>)
 800a3c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3cc:	4b17      	ldr	r3, [pc, #92]	@ (800a42c <xPortStartScheduler+0x13c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a16      	ldr	r2, [pc, #88]	@ (800a42c <xPortStartScheduler+0x13c>)
 800a3d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3d8:	4b14      	ldr	r3, [pc, #80]	@ (800a42c <xPortStartScheduler+0x13c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a13      	ldr	r2, [pc, #76]	@ (800a42c <xPortStartScheduler+0x13c>)
 800a3de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3e4:	f000 f8da 	bl	800a59c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3e8:	4b11      	ldr	r3, [pc, #68]	@ (800a430 <xPortStartScheduler+0x140>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3ee:	f000 f8f9 	bl	800a5e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3f2:	4b10      	ldr	r3, [pc, #64]	@ (800a434 <xPortStartScheduler+0x144>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a434 <xPortStartScheduler+0x144>)
 800a3f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a3fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3fe:	f7ff ff63 	bl	800a2c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a402:	f7ff fa83 	bl	800990c <vTaskSwitchContext>
	prvTaskExitError();
 800a406:	f7ff ff1d 	bl	800a244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3718      	adds	r7, #24
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	e000ed00 	.word	0xe000ed00
 800a418:	410fc271 	.word	0x410fc271
 800a41c:	410fc270 	.word	0x410fc270
 800a420:	e000e400 	.word	0xe000e400
 800a424:	2000109c 	.word	0x2000109c
 800a428:	200010a0 	.word	0x200010a0
 800a42c:	e000ed20 	.word	0xe000ed20
 800a430:	20000028 	.word	0x20000028
 800a434:	e000ef34 	.word	0xe000ef34

0800a438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	607b      	str	r3, [r7, #4]
}
 800a450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a452:	4b10      	ldr	r3, [pc, #64]	@ (800a494 <vPortEnterCritical+0x5c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	3301      	adds	r3, #1
 800a458:	4a0e      	ldr	r2, [pc, #56]	@ (800a494 <vPortEnterCritical+0x5c>)
 800a45a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a45c:	4b0d      	ldr	r3, [pc, #52]	@ (800a494 <vPortEnterCritical+0x5c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d110      	bne.n	800a486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a464:	4b0c      	ldr	r3, [pc, #48]	@ (800a498 <vPortEnterCritical+0x60>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00b      	beq.n	800a486 <vPortEnterCritical+0x4e>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	603b      	str	r3, [r7, #0]
}
 800a480:	bf00      	nop
 800a482:	bf00      	nop
 800a484:	e7fd      	b.n	800a482 <vPortEnterCritical+0x4a>
	}
}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	20000028 	.word	0x20000028
 800a498:	e000ed04 	.word	0xe000ed04

0800a49c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4a2:	4b12      	ldr	r3, [pc, #72]	@ (800a4ec <vPortExitCritical+0x50>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10b      	bne.n	800a4c2 <vPortExitCritical+0x26>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	607b      	str	r3, [r7, #4]
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	e7fd      	b.n	800a4be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ec <vPortExitCritical+0x50>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	4a08      	ldr	r2, [pc, #32]	@ (800a4ec <vPortExitCritical+0x50>)
 800a4ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4cc:	4b07      	ldr	r3, [pc, #28]	@ (800a4ec <vPortExitCritical+0x50>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d105      	bne.n	800a4e0 <vPortExitCritical+0x44>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	20000028 	.word	0x20000028

0800a4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4f0:	f3ef 8009 	mrs	r0, PSP
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	4b15      	ldr	r3, [pc, #84]	@ (800a550 <pxCurrentTCBConst>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	f01e 0f10 	tst.w	lr, #16
 800a500:	bf08      	it	eq
 800a502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50a:	6010      	str	r0, [r2, #0]
 800a50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a514:	f380 8811 	msr	BASEPRI, r0
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f7ff f9f4 	bl	800990c <vTaskSwitchContext>
 800a524:	f04f 0000 	mov.w	r0, #0
 800a528:	f380 8811 	msr	BASEPRI, r0
 800a52c:	bc09      	pop	{r0, r3}
 800a52e:	6819      	ldr	r1, [r3, #0]
 800a530:	6808      	ldr	r0, [r1, #0]
 800a532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a536:	f01e 0f10 	tst.w	lr, #16
 800a53a:	bf08      	it	eq
 800a53c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a540:	f380 8809 	msr	PSP, r0
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	4770      	bx	lr
 800a54a:	bf00      	nop
 800a54c:	f3af 8000 	nop.w

0800a550 <pxCurrentTCBConst>:
 800a550:	20000f70 	.word	0x20000f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	607b      	str	r3, [r7, #4]
}
 800a570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a572:	f7ff f911 	bl	8009798 <xTaskIncrementTick>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a57c:	4b06      	ldr	r3, [pc, #24]	@ (800a598 <SysTick_Handler+0x40>)
 800a57e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a582:	601a      	str	r2, [r3, #0]
 800a584:	2300      	movs	r3, #0
 800a586:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f383 8811 	msr	BASEPRI, r3
}
 800a58e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a590:	bf00      	nop
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d0 <vPortSetupTimerInterrupt+0x34>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d4 <vPortSetupTimerInterrupt+0x38>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d8 <vPortSetupTimerInterrupt+0x3c>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5dc <vPortSetupTimerInterrupt+0x40>)
 800a5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b6:	099b      	lsrs	r3, r3, #6
 800a5b8:	4a09      	ldr	r2, [pc, #36]	@ (800a5e0 <vPortSetupTimerInterrupt+0x44>)
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5be:	4b04      	ldr	r3, [pc, #16]	@ (800a5d0 <vPortSetupTimerInterrupt+0x34>)
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	601a      	str	r2, [r3, #0]
}
 800a5c4:	bf00      	nop
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	e000e010 	.word	0xe000e010
 800a5d4:	e000e018 	.word	0xe000e018
 800a5d8:	20000000 	.word	0x20000000
 800a5dc:	10624dd3 	.word	0x10624dd3
 800a5e0:	e000e014 	.word	0xe000e014

0800a5e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a5f4 <vPortEnableVFP+0x10>
 800a5e8:	6801      	ldr	r1, [r0, #0]
 800a5ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5ee:	6001      	str	r1, [r0, #0]
 800a5f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5f2:	bf00      	nop
 800a5f4:	e000ed88 	.word	0xe000ed88

0800a5f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08a      	sub	sp, #40	@ 0x28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a600:	2300      	movs	r3, #0
 800a602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a604:	f7ff f80c 	bl	8009620 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a608:	4b5c      	ldr	r3, [pc, #368]	@ (800a77c <pvPortMalloc+0x184>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a610:	f000 f924 	bl	800a85c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a614:	4b5a      	ldr	r3, [pc, #360]	@ (800a780 <pvPortMalloc+0x188>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4013      	ands	r3, r2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f040 8095 	bne.w	800a74c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d01e      	beq.n	800a666 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a628:	2208      	movs	r2, #8
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4413      	add	r3, r2
 800a62e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f003 0307 	and.w	r3, r3, #7
 800a636:	2b00      	cmp	r3, #0
 800a638:	d015      	beq.n	800a666 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f023 0307 	bic.w	r3, r3, #7
 800a640:	3308      	adds	r3, #8
 800a642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00b      	beq.n	800a666 <pvPortMalloc+0x6e>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	617b      	str	r3, [r7, #20]
}
 800a660:	bf00      	nop
 800a662:	bf00      	nop
 800a664:	e7fd      	b.n	800a662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d06f      	beq.n	800a74c <pvPortMalloc+0x154>
 800a66c:	4b45      	ldr	r3, [pc, #276]	@ (800a784 <pvPortMalloc+0x18c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	429a      	cmp	r2, r3
 800a674:	d86a      	bhi.n	800a74c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a676:	4b44      	ldr	r3, [pc, #272]	@ (800a788 <pvPortMalloc+0x190>)
 800a678:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a67a:	4b43      	ldr	r3, [pc, #268]	@ (800a788 <pvPortMalloc+0x190>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a680:	e004      	b.n	800a68c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a684:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	429a      	cmp	r2, r3
 800a694:	d903      	bls.n	800a69e <pvPortMalloc+0xa6>
 800a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d1f1      	bne.n	800a682 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a69e:	4b37      	ldr	r3, [pc, #220]	@ (800a77c <pvPortMalloc+0x184>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d051      	beq.n	800a74c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2208      	movs	r2, #8
 800a6ae:	4413      	add	r3, r2
 800a6b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
 800a6b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	1ad2      	subs	r2, r2, r3
 800a6c2:	2308      	movs	r3, #8
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d920      	bls.n	800a70c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	f003 0307 	and.w	r3, r3, #7
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00b      	beq.n	800a6f4 <pvPortMalloc+0xfc>
	__asm volatile
 800a6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e0:	f383 8811 	msr	BASEPRI, r3
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	613b      	str	r3, [r7, #16]
}
 800a6ee:	bf00      	nop
 800a6f0:	bf00      	nop
 800a6f2:	e7fd      	b.n	800a6f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a706:	69b8      	ldr	r0, [r7, #24]
 800a708:	f000 f90a 	bl	800a920 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a70c:	4b1d      	ldr	r3, [pc, #116]	@ (800a784 <pvPortMalloc+0x18c>)
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	4a1b      	ldr	r2, [pc, #108]	@ (800a784 <pvPortMalloc+0x18c>)
 800a718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a71a:	4b1a      	ldr	r3, [pc, #104]	@ (800a784 <pvPortMalloc+0x18c>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b1b      	ldr	r3, [pc, #108]	@ (800a78c <pvPortMalloc+0x194>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	d203      	bcs.n	800a72e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a726:	4b17      	ldr	r3, [pc, #92]	@ (800a784 <pvPortMalloc+0x18c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a18      	ldr	r2, [pc, #96]	@ (800a78c <pvPortMalloc+0x194>)
 800a72c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	4b13      	ldr	r3, [pc, #76]	@ (800a780 <pvPortMalloc+0x188>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	431a      	orrs	r2, r3
 800a738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	2200      	movs	r2, #0
 800a740:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a742:	4b13      	ldr	r3, [pc, #76]	@ (800a790 <pvPortMalloc+0x198>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	3301      	adds	r3, #1
 800a748:	4a11      	ldr	r2, [pc, #68]	@ (800a790 <pvPortMalloc+0x198>)
 800a74a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a74c:	f7fe ff76 	bl	800963c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	f003 0307 	and.w	r3, r3, #7
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00b      	beq.n	800a772 <pvPortMalloc+0x17a>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	60fb      	str	r3, [r7, #12]
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	e7fd      	b.n	800a76e <pvPortMalloc+0x176>
	return pvReturn;
 800a772:	69fb      	ldr	r3, [r7, #28]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3728      	adds	r7, #40	@ 0x28
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	2000e784 	.word	0x2000e784
 800a780:	2000e798 	.word	0x2000e798
 800a784:	2000e788 	.word	0x2000e788
 800a788:	2000e77c 	.word	0x2000e77c
 800a78c:	2000e78c 	.word	0x2000e78c
 800a790:	2000e790 	.word	0x2000e790

0800a794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d04f      	beq.n	800a846 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7a6:	2308      	movs	r3, #8
 800a7a8:	425b      	negs	r3, r3
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	4b25      	ldr	r3, [pc, #148]	@ (800a850 <vPortFree+0xbc>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10b      	bne.n	800a7da <vPortFree+0x46>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	60fb      	str	r3, [r7, #12]
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	e7fd      	b.n	800a7d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00b      	beq.n	800a7fa <vPortFree+0x66>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	60bb      	str	r3, [r7, #8]
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop
 800a7f8:	e7fd      	b.n	800a7f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	685a      	ldr	r2, [r3, #4]
 800a7fe:	4b14      	ldr	r3, [pc, #80]	@ (800a850 <vPortFree+0xbc>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4013      	ands	r3, r2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d01e      	beq.n	800a846 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d11a      	bne.n	800a846 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	4b0e      	ldr	r3, [pc, #56]	@ (800a850 <vPortFree+0xbc>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	43db      	mvns	r3, r3
 800a81a:	401a      	ands	r2, r3
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a820:	f7fe fefe 	bl	8009620 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	4b0a      	ldr	r3, [pc, #40]	@ (800a854 <vPortFree+0xc0>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4413      	add	r3, r2
 800a82e:	4a09      	ldr	r2, [pc, #36]	@ (800a854 <vPortFree+0xc0>)
 800a830:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a832:	6938      	ldr	r0, [r7, #16]
 800a834:	f000 f874 	bl	800a920 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a838:	4b07      	ldr	r3, [pc, #28]	@ (800a858 <vPortFree+0xc4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	4a06      	ldr	r2, [pc, #24]	@ (800a858 <vPortFree+0xc4>)
 800a840:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a842:	f7fe fefb 	bl	800963c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a846:	bf00      	nop
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	2000e798 	.word	0x2000e798
 800a854:	2000e788 	.word	0x2000e788
 800a858:	2000e794 	.word	0x2000e794

0800a85c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a862:	f24d 63d8 	movw	r3, #55000	@ 0xd6d8
 800a866:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a868:	4b27      	ldr	r3, [pc, #156]	@ (800a908 <prvHeapInit+0xac>)
 800a86a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f003 0307 	and.w	r3, r3, #7
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00c      	beq.n	800a890 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3307      	adds	r3, #7
 800a87a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f023 0307 	bic.w	r3, r3, #7
 800a882:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	4a1f      	ldr	r2, [pc, #124]	@ (800a908 <prvHeapInit+0xac>)
 800a88c:	4413      	add	r3, r2
 800a88e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a894:	4a1d      	ldr	r2, [pc, #116]	@ (800a90c <prvHeapInit+0xb0>)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a89a:	4b1c      	ldr	r3, [pc, #112]	@ (800a90c <prvHeapInit+0xb0>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8a8:	2208      	movs	r2, #8
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	1a9b      	subs	r3, r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f023 0307 	bic.w	r3, r3, #7
 800a8b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	4a15      	ldr	r2, [pc, #84]	@ (800a910 <prvHeapInit+0xb4>)
 800a8bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8be:	4b14      	ldr	r3, [pc, #80]	@ (800a910 <prvHeapInit+0xb4>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8c6:	4b12      	ldr	r3, [pc, #72]	@ (800a910 <prvHeapInit+0xb4>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a910 <prvHeapInit+0xb4>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	4a0a      	ldr	r2, [pc, #40]	@ (800a914 <prvHeapInit+0xb8>)
 800a8ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4a09      	ldr	r2, [pc, #36]	@ (800a918 <prvHeapInit+0xbc>)
 800a8f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8f4:	4b09      	ldr	r3, [pc, #36]	@ (800a91c <prvHeapInit+0xc0>)
 800a8f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a8fa:	601a      	str	r2, [r3, #0]
}
 800a8fc:	bf00      	nop
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	200010a4 	.word	0x200010a4
 800a90c:	2000e77c 	.word	0x2000e77c
 800a910:	2000e784 	.word	0x2000e784
 800a914:	2000e78c 	.word	0x2000e78c
 800a918:	2000e788 	.word	0x2000e788
 800a91c:	2000e798 	.word	0x2000e798

0800a920 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a928:	4b28      	ldr	r3, [pc, #160]	@ (800a9cc <prvInsertBlockIntoFreeList+0xac>)
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	e002      	b.n	800a934 <prvInsertBlockIntoFreeList+0x14>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d8f7      	bhi.n	800a92e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	4413      	add	r3, r2
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d108      	bne.n	800a962 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	441a      	add	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	441a      	add	r2, r3
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	429a      	cmp	r2, r3
 800a974:	d118      	bne.n	800a9a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4b15      	ldr	r3, [pc, #84]	@ (800a9d0 <prvInsertBlockIntoFreeList+0xb0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d00d      	beq.n	800a99e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	441a      	add	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	601a      	str	r2, [r3, #0]
 800a99c:	e008      	b.n	800a9b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a99e:	4b0c      	ldr	r3, [pc, #48]	@ (800a9d0 <prvInsertBlockIntoFreeList+0xb0>)
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	e003      	b.n	800a9b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d002      	beq.n	800a9be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9be:	bf00      	nop
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	2000e77c 	.word	0x2000e77c
 800a9d0:	2000e784 	.word	0x2000e784

0800a9d4 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	71fb      	strb	r3, [r7, #7]
	return SD_disk_status(pdrv);
 800a9de:	79fb      	ldrb	r3, [r7, #7]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 faf3 	bl	800afcc <SD_disk_status>
 800a9e6:	4603      	mov	r3, r0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	71fb      	strb	r3, [r7, #7]


	return SD_disk_initialize(pdrv);
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 f9f9 	bl	800adf4 <SD_disk_initialize>
 800aa02:	4603      	mov	r3, r0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60b9      	str	r1, [r7, #8]
 800aa14:	607a      	str	r2, [r7, #4]
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]

	return SD_disk_read(pdrv, buff, sector, count);
 800aa1c:	7bf8      	ldrb	r0, [r7, #15]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	f000 fae8 	bl	800aff8 <SD_disk_read>
 800aa28:	4603      	mov	r3, r0

}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b084      	sub	sp, #16
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73fb      	strb	r3, [r7, #15]

	return SD_disk_write(pdrv, buff, sector, count);
 800aa42:	7bf8      	ldrb	r0, [r7, #15]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	f000 fb43 	bl	800b0d4 <SD_disk_write>
 800aa4e:	4603      	mov	r3, r0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	603a      	str	r2, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]
 800aa64:	460b      	mov	r3, r1
 800aa66:	71bb      	strb	r3, [r7, #6]
	return SD_disk_ioctl(pdrv, cmd, buff);
 800aa68:	79b9      	ldrb	r1, [r7, #6]
 800aa6a:	79fb      	ldrb	r3, [r7, #7]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 fbba 	bl	800b1e8 <SD_disk_ioctl>
 800aa74:	4603      	mov	r3, r0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
	...

0800aa80 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800aa84:	2200      	movs	r2, #0
 800aa86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aa8a:	4804      	ldr	r0, [pc, #16]	@ (800aa9c <SELECT+0x1c>)
 800aa8c:	f7fa fbac 	bl	80051e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800aa90:	2001      	movs	r0, #1
 800aa92:	f7f8 ffc1 	bl	8003a18 <HAL_Delay>
}
 800aa96:	bf00      	nop
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	40020000 	.word	0x40020000

0800aaa0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aaaa:	4804      	ldr	r0, [pc, #16]	@ (800aabc <DESELECT+0x1c>)
 800aaac:	f7fa fb9c 	bl	80051e8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800aab0:	2001      	movs	r0, #1
 800aab2:	f7f8 ffb1 	bl	8003a18 <HAL_Delay>
}
 800aab6:	bf00      	nop
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	40020000 	.word	0x40020000

0800aac0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800aaca:	bf00      	nop
 800aacc:	4b08      	ldr	r3, [pc, #32]	@ (800aaf0 <SPI_TxByte+0x30>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	f003 0302 	and.w	r3, r3, #2
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d1f8      	bne.n	800aacc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800aada:	1df9      	adds	r1, r7, #7
 800aadc:	2364      	movs	r3, #100	@ 0x64
 800aade:	2201      	movs	r2, #1
 800aae0:	4803      	ldr	r0, [pc, #12]	@ (800aaf0 <SPI_TxByte+0x30>)
 800aae2:	f7fc f996 	bl	8006e12 <HAL_SPI_Transmit>
}
 800aae6:	bf00      	nop
 800aae8:	3708      	adds	r7, #8
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	2000041c 	.word	0x2000041c

0800aaf4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ab00:	bf00      	nop
 800ab02:	4b08      	ldr	r3, [pc, #32]	@ (800ab24 <SPI_TxBuffer+0x30>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f003 0302 	and.w	r3, r3, #2
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d1f8      	bne.n	800ab02 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800ab10:	887a      	ldrh	r2, [r7, #2]
 800ab12:	2364      	movs	r3, #100	@ 0x64
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	4803      	ldr	r0, [pc, #12]	@ (800ab24 <SPI_TxBuffer+0x30>)
 800ab18:	f7fc f97b 	bl	8006e12 <HAL_SPI_Transmit>
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	2000041c 	.word	0x2000041c

0800ab28 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800ab2e:	23ff      	movs	r3, #255	@ 0xff
 800ab30:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800ab32:	bf00      	nop
 800ab34:	4b09      	ldr	r3, [pc, #36]	@ (800ab5c <SPI_RxByte+0x34>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f003 0302 	and.w	r3, r3, #2
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d1f8      	bne.n	800ab34 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800ab42:	1dba      	adds	r2, r7, #6
 800ab44:	1df9      	adds	r1, r7, #7
 800ab46:	2364      	movs	r3, #100	@ 0x64
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	4803      	ldr	r0, [pc, #12]	@ (800ab5c <SPI_RxByte+0x34>)
 800ab4e:	f7fc faa3 	bl	8007098 <HAL_SPI_TransmitReceive>

	return data;
 800ab52:	79bb      	ldrb	r3, [r7, #6]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	2000041c 	.word	0x2000041c

0800ab60 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800ab68:	f7ff ffde 	bl	800ab28 <SPI_RxByte>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	461a      	mov	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	701a      	strb	r2, [r3, #0]
}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800ab82:	4b0a      	ldr	r3, [pc, #40]	@ (800abac <SD_ReadyWait+0x30>)
 800ab84:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800ab88:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800ab8a:	f7ff ffcd 	bl	800ab28 <SPI_RxByte>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800ab92:	79fb      	ldrb	r3, [r7, #7]
 800ab94:	2bff      	cmp	r3, #255	@ 0xff
 800ab96:	d004      	beq.n	800aba2 <SD_ReadyWait+0x26>
 800ab98:	4b04      	ldr	r3, [pc, #16]	@ (800abac <SD_ReadyWait+0x30>)
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1f3      	bne.n	800ab8a <SD_ReadyWait+0xe>

	return res;
 800aba2:	79fb      	ldrb	r3, [r7, #7]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	20000562 	.word	0x20000562

0800abb0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800abb6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800abba:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800abbc:	f7ff ff70 	bl	800aaa0 <DESELECT>
	for(int i = 0; i < 10; i++)
 800abc0:	2300      	movs	r3, #0
 800abc2:	60bb      	str	r3, [r7, #8]
 800abc4:	e005      	b.n	800abd2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800abc6:	20ff      	movs	r0, #255	@ 0xff
 800abc8:	f7ff ff7a 	bl	800aac0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	3301      	adds	r3, #1
 800abd0:	60bb      	str	r3, [r7, #8]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b09      	cmp	r3, #9
 800abd6:	ddf6      	ble.n	800abc6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800abd8:	f7ff ff52 	bl	800aa80 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800abdc:	2340      	movs	r3, #64	@ 0x40
 800abde:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800abe8:	2300      	movs	r3, #0
 800abea:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800abf0:	2395      	movs	r3, #149	@ 0x95
 800abf2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800abf4:	463b      	mov	r3, r7
 800abf6:	2106      	movs	r1, #6
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff ff7b 	bl	800aaf4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800abfe:	e002      	b.n	800ac06 <SD_PowerOn+0x56>
	{
		cnt--;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800ac06:	f7ff ff8f 	bl	800ab28 <SPI_RxByte>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d002      	beq.n	800ac16 <SD_PowerOn+0x66>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1f4      	bne.n	800ac00 <SD_PowerOn+0x50>
	}

	DESELECT();
 800ac16:	f7ff ff43 	bl	800aaa0 <DESELECT>
	SPI_TxByte(0XFF);
 800ac1a:	20ff      	movs	r0, #255	@ 0xff
 800ac1c:	f7ff ff50 	bl	800aac0 <SPI_TxByte>

	PowerFlag = 1;
 800ac20:	4b03      	ldr	r3, [pc, #12]	@ (800ac30 <SD_PowerOn+0x80>)
 800ac22:	2201      	movs	r2, #1
 800ac24:	701a      	strb	r2, [r3, #0]
}
 800ac26:	bf00      	nop
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	2000e79d 	.word	0x2000e79d

0800ac34 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800ac38:	4b03      	ldr	r3, [pc, #12]	@ (800ac48 <SD_PowerOff+0x14>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
}
 800ac3e:	bf00      	nop
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	2000e79d 	.word	0x2000e79d

0800ac4c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	af00      	add	r7, sp, #0
	return PowerFlag;
 800ac50:	4b03      	ldr	r3, [pc, #12]	@ (800ac60 <SD_CheckPower+0x14>)
 800ac52:	781b      	ldrb	r3, [r3, #0]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	2000e79d 	.word	0x2000e79d

0800ac64 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800ac6e:	4b14      	ldr	r3, [pc, #80]	@ (800acc0 <SD_RxDataBlock+0x5c>)
 800ac70:	22c8      	movs	r2, #200	@ 0xc8
 800ac72:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800ac74:	f7ff ff58 	bl	800ab28 <SPI_RxByte>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
 800ac7e:	2bff      	cmp	r3, #255	@ 0xff
 800ac80:	d104      	bne.n	800ac8c <SD_RxDataBlock+0x28>
 800ac82:	4b0f      	ldr	r3, [pc, #60]	@ (800acc0 <SD_RxDataBlock+0x5c>)
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1f3      	bne.n	800ac74 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	2bfe      	cmp	r3, #254	@ 0xfe
 800ac90:	d001      	beq.n	800ac96 <SD_RxDataBlock+0x32>
 800ac92:	2300      	movs	r3, #0
 800ac94:	e00f      	b.n	800acb6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7ff ff5f 	bl	800ab60 <SPI_RxBytePtr>
	} while(len--);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	1e5a      	subs	r2, r3, #1
 800aca6:	603a      	str	r2, [r7, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1f4      	bne.n	800ac96 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800acac:	f7ff ff3c 	bl	800ab28 <SPI_RxByte>
	SPI_RxByte();
 800acb0:	f7ff ff3a 	bl	800ab28 <SPI_RxByte>

	return TRUE;
 800acb4:	2301      	movs	r3, #1
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000561 	.word	0x20000561

0800acc4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800acd4:	f7ff ff52 	bl	800ab7c <SD_ReadyWait>
 800acd8:	4603      	mov	r3, r0
 800acda:	2bff      	cmp	r3, #255	@ 0xff
 800acdc:	d001      	beq.n	800ace2 <SD_TxDataBlock+0x1e>
 800acde:	2300      	movs	r3, #0
 800ace0:	e02f      	b.n	800ad42 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800ace2:	78fb      	ldrb	r3, [r7, #3]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff feeb 	bl	800aac0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	2bfd      	cmp	r3, #253	@ 0xfd
 800acee:	d020      	beq.n	800ad32 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800acf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff fefd 	bl	800aaf4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800acfa:	f7ff ff15 	bl	800ab28 <SPI_RxByte>
		SPI_RxByte();
 800acfe:	f7ff ff13 	bl	800ab28 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800ad02:	e00b      	b.n	800ad1c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800ad04:	f7ff ff10 	bl	800ab28 <SPI_RxByte>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	f003 031f 	and.w	r3, r3, #31
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d006      	beq.n	800ad24 <SD_TxDataBlock+0x60>
			i++;
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
 800ad1e:	2b40      	cmp	r3, #64	@ 0x40
 800ad20:	d9f0      	bls.n	800ad04 <SD_TxDataBlock+0x40>
 800ad22:	e000      	b.n	800ad26 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800ad24:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800ad26:	bf00      	nop
 800ad28:	f7ff fefe 	bl	800ab28 <SPI_RxByte>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0fa      	beq.n	800ad28 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	f003 031f 	and.w	r3, r3, #31
 800ad38:	2b05      	cmp	r3, #5
 800ad3a:	d101      	bne.n	800ad40 <SD_TxDataBlock+0x7c>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e000      	b.n	800ad42 <SD_TxDataBlock+0x7e>

	return FALSE;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	4603      	mov	r3, r0
 800ad52:	6039      	str	r1, [r7, #0]
 800ad54:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800ad56:	f7ff ff11 	bl	800ab7c <SD_ReadyWait>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2bff      	cmp	r3, #255	@ 0xff
 800ad5e:	d001      	beq.n	800ad64 <SD_SendCmd+0x1a>
 800ad60:	23ff      	movs	r3, #255	@ 0xff
 800ad62:	e042      	b.n	800adea <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff feaa 	bl	800aac0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	0e1b      	lsrs	r3, r3, #24
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff fea4 	bl	800aac0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	0c1b      	lsrs	r3, r3, #16
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff fe9e 	bl	800aac0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	0a1b      	lsrs	r3, r3, #8
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7ff fe98 	bl	800aac0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fe93 	bl	800aac0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	2b40      	cmp	r3, #64	@ 0x40
 800ad9e:	d102      	bne.n	800ada6 <SD_SendCmd+0x5c>
 800ada0:	2395      	movs	r3, #149	@ 0x95
 800ada2:	73fb      	strb	r3, [r7, #15]
 800ada4:	e007      	b.n	800adb6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800ada6:	79fb      	ldrb	r3, [r7, #7]
 800ada8:	2b48      	cmp	r3, #72	@ 0x48
 800adaa:	d102      	bne.n	800adb2 <SD_SendCmd+0x68>
 800adac:	2387      	movs	r3, #135	@ 0x87
 800adae:	73fb      	strb	r3, [r7, #15]
 800adb0:	e001      	b.n	800adb6 <SD_SendCmd+0x6c>
	else crc = 1;
 800adb2:	2301      	movs	r3, #1
 800adb4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800adb6:	7bfb      	ldrb	r3, [r7, #15]
 800adb8:	4618      	mov	r0, r3
 800adba:	f7ff fe81 	bl	800aac0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800adbe:	79fb      	ldrb	r3, [r7, #7]
 800adc0:	2b4c      	cmp	r3, #76	@ 0x4c
 800adc2:	d101      	bne.n	800adc8 <SD_SendCmd+0x7e>
 800adc4:	f7ff feb0 	bl	800ab28 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800adc8:	230a      	movs	r3, #10
 800adca:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800adcc:	f7ff feac 	bl	800ab28 <SPI_RxByte>
 800add0:	4603      	mov	r3, r0
 800add2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800add4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800add8:	2b00      	cmp	r3, #0
 800adda:	da05      	bge.n	800ade8 <SD_SendCmd+0x9e>
 800addc:	7bbb      	ldrb	r3, [r7, #14]
 800adde:	3b01      	subs	r3, #1
 800ade0:	73bb      	strb	r3, [r7, #14]
 800ade2:	7bbb      	ldrb	r3, [r7, #14]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1f1      	bne.n	800adcc <SD_SendCmd+0x82>

	return res;
 800ade8:	7b7b      	ldrb	r3, [r7, #13]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	4603      	mov	r3, r0
 800adfc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d001      	beq.n	800ae08 <SD_disk_initialize+0x14>
 800ae04:	2301      	movs	r3, #1
 800ae06:	e0d6      	b.n	800afb6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800ae08:	4b6d      	ldr	r3, [pc, #436]	@ (800afc0 <SD_disk_initialize+0x1cc>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d003      	beq.n	800ae1e <SD_disk_initialize+0x2a>
 800ae16:	4b6a      	ldr	r3, [pc, #424]	@ (800afc0 <SD_disk_initialize+0x1cc>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	e0cb      	b.n	800afb6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800ae1e:	f7ff fec7 	bl	800abb0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800ae22:	f7ff fe2d 	bl	800aa80 <SELECT>

	/* check disk type */
	type = 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	2040      	movs	r0, #64	@ 0x40
 800ae2e:	f7ff ff8c 	bl	800ad4a <SD_SendCmd>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	f040 80a6 	bne.w	800af86 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800ae3a:	4b62      	ldr	r3, [pc, #392]	@ (800afc4 <SD_disk_initialize+0x1d0>)
 800ae3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ae40:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800ae42:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800ae46:	2048      	movs	r0, #72	@ 0x48
 800ae48:	f7ff ff7f 	bl	800ad4a <SD_SendCmd>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d158      	bne.n	800af04 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800ae52:	2300      	movs	r3, #0
 800ae54:	73fb      	strb	r3, [r7, #15]
 800ae56:	e00c      	b.n	800ae72 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800ae58:	7bfc      	ldrb	r4, [r7, #15]
 800ae5a:	f7ff fe65 	bl	800ab28 <SPI_RxByte>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	461a      	mov	r2, r3
 800ae62:	f104 0310 	add.w	r3, r4, #16
 800ae66:	443b      	add	r3, r7
 800ae68:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	73fb      	strb	r3, [r7, #15]
 800ae72:	7bfb      	ldrb	r3, [r7, #15]
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d9ef      	bls.n	800ae58 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800ae78:	7abb      	ldrb	r3, [r7, #10]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	f040 8083 	bne.w	800af86 <SD_disk_initialize+0x192>
 800ae80:	7afb      	ldrb	r3, [r7, #11]
 800ae82:	2baa      	cmp	r3, #170	@ 0xaa
 800ae84:	d17f      	bne.n	800af86 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800ae86:	2100      	movs	r1, #0
 800ae88:	2077      	movs	r0, #119	@ 0x77
 800ae8a:	f7ff ff5e 	bl	800ad4a <SD_SendCmd>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d807      	bhi.n	800aea4 <SD_disk_initialize+0xb0>
 800ae94:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800ae98:	2069      	movs	r0, #105	@ 0x69
 800ae9a:	f7ff ff56 	bl	800ad4a <SD_SendCmd>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d005      	beq.n	800aeb0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 800aea4:	4b47      	ldr	r3, [pc, #284]	@ (800afc4 <SD_disk_initialize+0x1d0>)
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1eb      	bne.n	800ae86 <SD_disk_initialize+0x92>
 800aeae:	e000      	b.n	800aeb2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800aeb0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800aeb2:	4b44      	ldr	r3, [pc, #272]	@ (800afc4 <SD_disk_initialize+0x1d0>)
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d064      	beq.n	800af86 <SD_disk_initialize+0x192>
 800aebc:	2100      	movs	r1, #0
 800aebe:	207a      	movs	r0, #122	@ 0x7a
 800aec0:	f7ff ff43 	bl	800ad4a <SD_SendCmd>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d15d      	bne.n	800af86 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]
 800aece:	e00c      	b.n	800aeea <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800aed0:	7bfc      	ldrb	r4, [r7, #15]
 800aed2:	f7ff fe29 	bl	800ab28 <SPI_RxByte>
 800aed6:	4603      	mov	r3, r0
 800aed8:	461a      	mov	r2, r3
 800aeda:	f104 0310 	add.w	r3, r4, #16
 800aede:	443b      	add	r3, r7
 800aee0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	3301      	adds	r3, #1
 800aee8:	73fb      	strb	r3, [r7, #15]
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d9ef      	bls.n	800aed0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800aef0:	7a3b      	ldrb	r3, [r7, #8]
 800aef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d001      	beq.n	800aefe <SD_disk_initialize+0x10a>
 800aefa:	230c      	movs	r3, #12
 800aefc:	e000      	b.n	800af00 <SD_disk_initialize+0x10c>
 800aefe:	2304      	movs	r3, #4
 800af00:	73bb      	strb	r3, [r7, #14]
 800af02:	e040      	b.n	800af86 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800af04:	2100      	movs	r1, #0
 800af06:	2077      	movs	r0, #119	@ 0x77
 800af08:	f7ff ff1f 	bl	800ad4a <SD_SendCmd>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d808      	bhi.n	800af24 <SD_disk_initialize+0x130>
 800af12:	2100      	movs	r1, #0
 800af14:	2069      	movs	r0, #105	@ 0x69
 800af16:	f7ff ff18 	bl	800ad4a <SD_SendCmd>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d801      	bhi.n	800af24 <SD_disk_initialize+0x130>
 800af20:	2302      	movs	r3, #2
 800af22:	e000      	b.n	800af26 <SD_disk_initialize+0x132>
 800af24:	2301      	movs	r3, #1
 800af26:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800af28:	7bbb      	ldrb	r3, [r7, #14]
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d10e      	bne.n	800af4c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800af2e:	2100      	movs	r1, #0
 800af30:	2077      	movs	r0, #119	@ 0x77
 800af32:	f7ff ff0a 	bl	800ad4a <SD_SendCmd>
 800af36:	4603      	mov	r3, r0
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d80e      	bhi.n	800af5a <SD_disk_initialize+0x166>
 800af3c:	2100      	movs	r1, #0
 800af3e:	2069      	movs	r0, #105	@ 0x69
 800af40:	f7ff ff03 	bl	800ad4a <SD_SendCmd>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d107      	bne.n	800af5a <SD_disk_initialize+0x166>
 800af4a:	e00d      	b.n	800af68 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800af4c:	2100      	movs	r1, #0
 800af4e:	2041      	movs	r0, #65	@ 0x41
 800af50:	f7ff fefb 	bl	800ad4a <SD_SendCmd>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d005      	beq.n	800af66 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800af5a:	4b1a      	ldr	r3, [pc, #104]	@ (800afc4 <SD_disk_initialize+0x1d0>)
 800af5c:	881b      	ldrh	r3, [r3, #0]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e1      	bne.n	800af28 <SD_disk_initialize+0x134>
 800af64:	e000      	b.n	800af68 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800af66:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800af68:	4b16      	ldr	r3, [pc, #88]	@ (800afc4 <SD_disk_initialize+0x1d0>)
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d007      	beq.n	800af82 <SD_disk_initialize+0x18e>
 800af72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800af76:	2050      	movs	r0, #80	@ 0x50
 800af78:	f7ff fee7 	bl	800ad4a <SD_SendCmd>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d001      	beq.n	800af86 <SD_disk_initialize+0x192>
 800af82:	2300      	movs	r3, #0
 800af84:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800af86:	4a10      	ldr	r2, [pc, #64]	@ (800afc8 <SD_disk_initialize+0x1d4>)
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800af8c:	f7ff fd88 	bl	800aaa0 <DESELECT>
	SPI_RxByte();
 800af90:	f7ff fdca 	bl	800ab28 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d008      	beq.n	800afac <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800af9a:	4b09      	ldr	r3, [pc, #36]	@ (800afc0 <SD_disk_initialize+0x1cc>)
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	f023 0301 	bic.w	r3, r3, #1
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	4b06      	ldr	r3, [pc, #24]	@ (800afc0 <SD_disk_initialize+0x1cc>)
 800afa8:	701a      	strb	r2, [r3, #0]
 800afaa:	e001      	b.n	800afb0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800afac:	f7ff fe42 	bl	800ac34 <SD_PowerOff>
	}

	return Stat;
 800afb0:	4b03      	ldr	r3, [pc, #12]	@ (800afc0 <SD_disk_initialize+0x1cc>)
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	b2db      	uxtb	r3, r3
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd90      	pop	{r4, r7, pc}
 800afbe:	bf00      	nop
 800afc0:	2000002c 	.word	0x2000002c
 800afc4:	20000561 	.word	0x20000561
 800afc8:	2000e79c 	.word	0x2000e79c

0800afcc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	4603      	mov	r3, r0
 800afd4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <SD_disk_status+0x14>
 800afdc:	2301      	movs	r3, #1
 800afde:	e002      	b.n	800afe6 <SD_disk_status+0x1a>
	return Stat;
 800afe0:	4b04      	ldr	r3, [pc, #16]	@ (800aff4 <SD_disk_status+0x28>)
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	b2db      	uxtb	r3, r3
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr
 800aff2:	bf00      	nop
 800aff4:	2000002c 	.word	0x2000002c

0800aff8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	60b9      	str	r1, [r7, #8]
 800b000:	607a      	str	r2, [r7, #4]
 800b002:	603b      	str	r3, [r7, #0]
 800b004:	4603      	mov	r3, r0
 800b006:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800b008:	7bfb      	ldrb	r3, [r7, #15]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d102      	bne.n	800b014 <SD_disk_read+0x1c>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <SD_disk_read+0x20>
 800b014:	2304      	movs	r3, #4
 800b016:	e054      	b.n	800b0c2 <SD_disk_read+0xca>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b018:	4b2c      	ldr	r3, [pc, #176]	@ (800b0cc <SD_disk_read+0xd4>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	f003 0301 	and.w	r3, r3, #1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <SD_disk_read+0x32>
 800b026:	2303      	movs	r3, #3
 800b028:	e04b      	b.n	800b0c2 <SD_disk_read+0xca>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800b02a:	4b29      	ldr	r3, [pc, #164]	@ (800b0d0 <SD_disk_read+0xd8>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	f003 0304 	and.w	r3, r3, #4
 800b032:	2b00      	cmp	r3, #0
 800b034:	d102      	bne.n	800b03c <SD_disk_read+0x44>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	025b      	lsls	r3, r3, #9
 800b03a:	607b      	str	r3, [r7, #4]

	SELECT();
 800b03c:	f7ff fd20 	bl	800aa80 <SELECT>

	if (count == 1)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d111      	bne.n	800b06a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800b046:	6879      	ldr	r1, [r7, #4]
 800b048:	2051      	movs	r0, #81	@ 0x51
 800b04a:	f7ff fe7e 	bl	800ad4a <SD_SendCmd>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d12c      	bne.n	800b0ae <SD_disk_read+0xb6>
 800b054:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b058:	68b8      	ldr	r0, [r7, #8]
 800b05a:	f7ff fe03 	bl	800ac64 <SD_RxDataBlock>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d024      	beq.n	800b0ae <SD_disk_read+0xb6>
 800b064:	2300      	movs	r3, #0
 800b066:	603b      	str	r3, [r7, #0]
 800b068:	e021      	b.n	800b0ae <SD_disk_read+0xb6>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800b06a:	6879      	ldr	r1, [r7, #4]
 800b06c:	2052      	movs	r0, #82	@ 0x52
 800b06e:	f7ff fe6c 	bl	800ad4a <SD_SendCmd>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d11a      	bne.n	800b0ae <SD_disk_read+0xb6>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800b078:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b07c:	68b8      	ldr	r0, [r7, #8]
 800b07e:	f7ff fdf1 	bl	800ac64 <SD_RxDataBlock>
 800b082:	4603      	mov	r3, r0
 800b084:	f083 0301 	eor.w	r3, r3, #1
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <SD_disk_read+0xac>
				buff += 512;
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b094:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	3b01      	subs	r3, #1
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1ea      	bne.n	800b078 <SD_disk_read+0x80>
 800b0a2:	e000      	b.n	800b0a6 <SD_disk_read+0xae>
				if (!SD_RxDataBlock(buff, 512)) break;
 800b0a4:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	204c      	movs	r0, #76	@ 0x4c
 800b0aa:	f7ff fe4e 	bl	800ad4a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800b0ae:	f7ff fcf7 	bl	800aaa0 <DESELECT>
	SPI_RxByte();
 800b0b2:	f7ff fd39 	bl	800ab28 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bf14      	ite	ne
 800b0bc:	2301      	movne	r3, #1
 800b0be:	2300      	moveq	r3, #0
 800b0c0:	b2db      	uxtb	r3, r3
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	2000002c 	.word	0x2000002c
 800b0d0:	2000e79c 	.word	0x2000e79c

0800b0d4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	60b9      	str	r1, [r7, #8]
 800b0dc:	607a      	str	r2, [r7, #4]
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d102      	bne.n	800b0f0 <SD_disk_write+0x1c>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <SD_disk_write+0x20>
 800b0f0:	2304      	movs	r3, #4
 800b0f2:	e071      	b.n	800b1d8 <SD_disk_write+0x104>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b0f4:	4b3a      	ldr	r3, [pc, #232]	@ (800b1e0 <SD_disk_write+0x10c>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d001      	beq.n	800b106 <SD_disk_write+0x32>
 800b102:	2303      	movs	r3, #3
 800b104:	e068      	b.n	800b1d8 <SD_disk_write+0x104>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800b106:	4b36      	ldr	r3, [pc, #216]	@ (800b1e0 <SD_disk_write+0x10c>)
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <SD_disk_write+0x44>
 800b114:	2302      	movs	r3, #2
 800b116:	e05f      	b.n	800b1d8 <SD_disk_write+0x104>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800b118:	4b32      	ldr	r3, [pc, #200]	@ (800b1e4 <SD_disk_write+0x110>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	f003 0304 	and.w	r3, r3, #4
 800b120:	2b00      	cmp	r3, #0
 800b122:	d102      	bne.n	800b12a <SD_disk_write+0x56>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	025b      	lsls	r3, r3, #9
 800b128:	607b      	str	r3, [r7, #4]

	SELECT();
 800b12a:	f7ff fca9 	bl	800aa80 <SELECT>

	if (count == 1)
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d110      	bne.n	800b156 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800b134:	6879      	ldr	r1, [r7, #4]
 800b136:	2058      	movs	r0, #88	@ 0x58
 800b138:	f7ff fe07 	bl	800ad4a <SD_SendCmd>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d140      	bne.n	800b1c4 <SD_disk_write+0xf0>
 800b142:	21fe      	movs	r1, #254	@ 0xfe
 800b144:	68b8      	ldr	r0, [r7, #8]
 800b146:	f7ff fdbd 	bl	800acc4 <SD_TxDataBlock>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d039      	beq.n	800b1c4 <SD_disk_write+0xf0>
			count = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	e036      	b.n	800b1c4 <SD_disk_write+0xf0>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800b156:	4b23      	ldr	r3, [pc, #140]	@ (800b1e4 <SD_disk_write+0x110>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	f003 0302 	and.w	r3, r3, #2
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d007      	beq.n	800b172 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800b162:	2100      	movs	r1, #0
 800b164:	2077      	movs	r0, #119	@ 0x77
 800b166:	f7ff fdf0 	bl	800ad4a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800b16a:	6839      	ldr	r1, [r7, #0]
 800b16c:	2057      	movs	r0, #87	@ 0x57
 800b16e:	f7ff fdec 	bl	800ad4a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	2059      	movs	r0, #89	@ 0x59
 800b176:	f7ff fde8 	bl	800ad4a <SD_SendCmd>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d121      	bne.n	800b1c4 <SD_disk_write+0xf0>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b180:	21fc      	movs	r1, #252	@ 0xfc
 800b182:	68b8      	ldr	r0, [r7, #8]
 800b184:	f7ff fd9e 	bl	800acc4 <SD_TxDataBlock>
 800b188:	4603      	mov	r3, r0
 800b18a:	f083 0301 	eor.w	r3, r3, #1
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10a      	bne.n	800b1aa <SD_disk_write+0xd6>
				buff += 512;
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b19a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	603b      	str	r3, [r7, #0]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1eb      	bne.n	800b180 <SD_disk_write+0xac>
 800b1a8:	e000      	b.n	800b1ac <SD_disk_write+0xd8>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b1aa:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800b1ac:	21fd      	movs	r1, #253	@ 0xfd
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	f7ff fd88 	bl	800acc4 <SD_TxDataBlock>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	f083 0301 	eor.w	r3, r3, #1
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <SD_disk_write+0xf0>
			{
				count = 1;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800b1c4:	f7ff fc6c 	bl	800aaa0 <DESELECT>
	SPI_RxByte();
 800b1c8:	f7ff fcae 	bl	800ab28 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	bf14      	ite	ne
 800b1d2:	2301      	movne	r3, #1
 800b1d4:	2300      	moveq	r3, #0
 800b1d6:	b2db      	uxtb	r3, r3
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	2000002c 	.word	0x2000002c
 800b1e4:	2000e79c 	.word	0x2000e79c

0800b1e8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800b1e8:	b590      	push	{r4, r7, lr}
 800b1ea:	b08b      	sub	sp, #44	@ 0x2c
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	603a      	str	r2, [r7, #0]
 800b1f2:	71fb      	strb	r3, [r7, #7]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800b1fc:	79fb      	ldrb	r3, [r7, #7]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <SD_disk_ioctl+0x1e>
 800b202:	2304      	movs	r3, #4
 800b204:	e113      	b.n	800b42e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800b20c:	79bb      	ldrb	r3, [r7, #6]
 800b20e:	2b05      	cmp	r3, #5
 800b210:	d124      	bne.n	800b25c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800b212:	6a3b      	ldr	r3, [r7, #32]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	2b02      	cmp	r3, #2
 800b218:	d012      	beq.n	800b240 <SD_disk_ioctl+0x58>
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	dc1a      	bgt.n	800b254 <SD_disk_ioctl+0x6c>
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d002      	beq.n	800b228 <SD_disk_ioctl+0x40>
 800b222:	2b01      	cmp	r3, #1
 800b224:	d006      	beq.n	800b234 <SD_disk_ioctl+0x4c>
 800b226:	e015      	b.n	800b254 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800b228:	f7ff fd04 	bl	800ac34 <SD_PowerOff>
			res = RES_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800b232:	e0fa      	b.n	800b42a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800b234:	f7ff fcbc 	bl	800abb0 <SD_PowerOn>
			res = RES_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800b23e:	e0f4      	b.n	800b42a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	1c5c      	adds	r4, r3, #1
 800b244:	f7ff fd02 	bl	800ac4c <SD_CheckPower>
 800b248:	4603      	mov	r3, r0
 800b24a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800b24c:	2300      	movs	r3, #0
 800b24e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800b252:	e0ea      	b.n	800b42a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800b254:	2304      	movs	r3, #4
 800b256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b25a:	e0e6      	b.n	800b42a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b25c:	4b76      	ldr	r3, [pc, #472]	@ (800b438 <SD_disk_ioctl+0x250>)
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	b2db      	uxtb	r3, r3
 800b262:	f003 0301 	and.w	r3, r3, #1
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <SD_disk_ioctl+0x86>
 800b26a:	2303      	movs	r3, #3
 800b26c:	e0df      	b.n	800b42e <SD_disk_ioctl+0x246>

		SELECT();
 800b26e:	f7ff fc07 	bl	800aa80 <SELECT>

		switch (ctrl)
 800b272:	79bb      	ldrb	r3, [r7, #6]
 800b274:	2b0d      	cmp	r3, #13
 800b276:	f200 80c9 	bhi.w	800b40c <SD_disk_ioctl+0x224>
 800b27a:	a201      	add	r2, pc, #4	@ (adr r2, 800b280 <SD_disk_ioctl+0x98>)
 800b27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b280:	0800b377 	.word	0x0800b377
 800b284:	0800b2b9 	.word	0x0800b2b9
 800b288:	0800b367 	.word	0x0800b367
 800b28c:	0800b40d 	.word	0x0800b40d
 800b290:	0800b40d 	.word	0x0800b40d
 800b294:	0800b40d 	.word	0x0800b40d
 800b298:	0800b40d 	.word	0x0800b40d
 800b29c:	0800b40d 	.word	0x0800b40d
 800b2a0:	0800b40d 	.word	0x0800b40d
 800b2a4:	0800b40d 	.word	0x0800b40d
 800b2a8:	0800b40d 	.word	0x0800b40d
 800b2ac:	0800b389 	.word	0x0800b389
 800b2b0:	0800b3ad 	.word	0x0800b3ad
 800b2b4:	0800b3d1 	.word	0x0800b3d1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	2049      	movs	r0, #73	@ 0x49
 800b2bc:	f7ff fd45 	bl	800ad4a <SD_SendCmd>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f040 80a6 	bne.w	800b414 <SD_disk_ioctl+0x22c>
 800b2c8:	f107 030c 	add.w	r3, r7, #12
 800b2cc:	2110      	movs	r1, #16
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7ff fcc8 	bl	800ac64 <SD_RxDataBlock>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 809c 	beq.w	800b414 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800b2dc:	7b3b      	ldrb	r3, [r7, #12]
 800b2de:	099b      	lsrs	r3, r3, #6
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d10d      	bne.n	800b302 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800b2e6:	7d7b      	ldrb	r3, [r7, #21]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	7d3b      	ldrb	r3, [r7, #20]
 800b2ec:	021b      	lsls	r3, r3, #8
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	4413      	add	r3, r2
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800b2f8:	8bfb      	ldrh	r3, [r7, #30]
 800b2fa:	029a      	lsls	r2, r3, #10
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	e02d      	b.n	800b35e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b302:	7c7b      	ldrb	r3, [r7, #17]
 800b304:	f003 030f 	and.w	r3, r3, #15
 800b308:	b2da      	uxtb	r2, r3
 800b30a:	7dbb      	ldrb	r3, [r7, #22]
 800b30c:	09db      	lsrs	r3, r3, #7
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	4413      	add	r3, r2
 800b312:	b2da      	uxtb	r2, r3
 800b314:	7d7b      	ldrb	r3, [r7, #21]
 800b316:	005b      	lsls	r3, r3, #1
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	f003 0306 	and.w	r3, r3, #6
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	4413      	add	r3, r2
 800b322:	b2db      	uxtb	r3, r3
 800b324:	3302      	adds	r3, #2
 800b326:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800b32a:	7d3b      	ldrb	r3, [r7, #20]
 800b32c:	099b      	lsrs	r3, r3, #6
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	461a      	mov	r2, r3
 800b332:	7cfb      	ldrb	r3, [r7, #19]
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	b29b      	uxth	r3, r3
 800b338:	4413      	add	r3, r2
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	7cbb      	ldrb	r3, [r7, #18]
 800b33e:	029b      	lsls	r3, r3, #10
 800b340:	b29b      	uxth	r3, r3
 800b342:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b346:	b29b      	uxth	r3, r3
 800b348:	4413      	add	r3, r2
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	3301      	adds	r3, #1
 800b34e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800b350:	8bfa      	ldrh	r2, [r7, #30]
 800b352:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b356:	3b09      	subs	r3, #9
 800b358:	409a      	lsls	r2, r3
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 800b364:	e056      	b.n	800b414 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b36c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800b374:	e055      	b.n	800b422 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800b376:	f7ff fc01 	bl	800ab7c <SD_ReadyWait>
 800b37a:	4603      	mov	r3, r0
 800b37c:	2bff      	cmp	r3, #255	@ 0xff
 800b37e:	d14b      	bne.n	800b418 <SD_disk_ioctl+0x230>
 800b380:	2300      	movs	r3, #0
 800b382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800b386:	e047      	b.n	800b418 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b388:	2100      	movs	r1, #0
 800b38a:	2049      	movs	r0, #73	@ 0x49
 800b38c:	f7ff fcdd 	bl	800ad4a <SD_SendCmd>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d142      	bne.n	800b41c <SD_disk_ioctl+0x234>
 800b396:	2110      	movs	r1, #16
 800b398:	6a38      	ldr	r0, [r7, #32]
 800b39a:	f7ff fc63 	bl	800ac64 <SD_RxDataBlock>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d03b      	beq.n	800b41c <SD_disk_ioctl+0x234>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800b3aa:	e037      	b.n	800b41c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	204a      	movs	r0, #74	@ 0x4a
 800b3b0:	f7ff fccb 	bl	800ad4a <SD_SendCmd>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d132      	bne.n	800b420 <SD_disk_ioctl+0x238>
 800b3ba:	2110      	movs	r1, #16
 800b3bc:	6a38      	ldr	r0, [r7, #32]
 800b3be:	f7ff fc51 	bl	800ac64 <SD_RxDataBlock>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d02b      	beq.n	800b420 <SD_disk_ioctl+0x238>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800b3ce:	e027      	b.n	800b420 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	207a      	movs	r0, #122	@ 0x7a
 800b3d4:	f7ff fcb9 	bl	800ad4a <SD_SendCmd>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d116      	bne.n	800b40c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800b3de:	2300      	movs	r3, #0
 800b3e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b3e4:	e00b      	b.n	800b3fe <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800b3e6:	6a3c      	ldr	r4, [r7, #32]
 800b3e8:	1c63      	adds	r3, r4, #1
 800b3ea:	623b      	str	r3, [r7, #32]
 800b3ec:	f7ff fb9c 	bl	800ab28 <SPI_RxByte>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800b3f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b3fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b402:	2b03      	cmp	r3, #3
 800b404:	d9ef      	bls.n	800b3e6 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800b406:	2300      	movs	r3, #0
 800b408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800b40c:	2304      	movs	r3, #4
 800b40e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b412:	e006      	b.n	800b422 <SD_disk_ioctl+0x23a>
			break;
 800b414:	bf00      	nop
 800b416:	e004      	b.n	800b422 <SD_disk_ioctl+0x23a>
			break;
 800b418:	bf00      	nop
 800b41a:	e002      	b.n	800b422 <SD_disk_ioctl+0x23a>
			break;
 800b41c:	bf00      	nop
 800b41e:	e000      	b.n	800b422 <SD_disk_ioctl+0x23a>
			break;
 800b420:	bf00      	nop
		}

		DESELECT();
 800b422:	f7ff fb3d 	bl	800aaa0 <DESELECT>
		SPI_RxByte();
 800b426:	f7ff fb7f 	bl	800ab28 <SPI_RxByte>
	}

	return res;
 800b42a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b42e:	4618      	mov	r0, r3
 800b430:	372c      	adds	r7, #44	@ 0x2c
 800b432:	46bd      	mov	sp, r7
 800b434:	bd90      	pop	{r4, r7, pc}
 800b436:	bf00      	nop
 800b438:	2000002c 	.word	0x2000002c

0800b43c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	3301      	adds	r3, #1
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b44c:	89fb      	ldrh	r3, [r7, #14]
 800b44e:	021b      	lsls	r3, r3, #8
 800b450:	b21a      	sxth	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	b21b      	sxth	r3, r3
 800b458:	4313      	orrs	r3, r2
 800b45a:	b21b      	sxth	r3, r3
 800b45c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b45e:	89fb      	ldrh	r3, [r7, #14]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr

0800b46c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	3303      	adds	r3, #3
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	3202      	adds	r2, #2
 800b484:	7812      	ldrb	r2, [r2, #0]
 800b486:	4313      	orrs	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	021b      	lsls	r3, r3, #8
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	3201      	adds	r2, #1
 800b492:	7812      	ldrb	r2, [r2, #0]
 800b494:	4313      	orrs	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	021b      	lsls	r3, r3, #8
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	7812      	ldrb	r2, [r2, #0]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]
	return rv;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800b4b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b4b6:	b09d      	sub	sp, #116	@ 0x74
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 800b4bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4be:	3307      	adds	r3, #7
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	469a      	mov	sl, r3
 800b4c8:	4693      	mov	fp, r2
 800b4ca:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 800b4ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b4d2:	f04f 0000 	mov.w	r0, #0
 800b4d6:	f04f 0100 	mov.w	r1, #0
 800b4da:	0219      	lsls	r1, r3, #8
 800b4dc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b4e0:	0210      	lsls	r0, r2, #8
 800b4e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4e4:	3306      	adds	r3, #6
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	461c      	mov	r4, r3
 800b4ee:	4615      	mov	r5, r2
 800b4f0:	ea40 0804 	orr.w	r8, r0, r4
 800b4f4:	ea41 0905 	orr.w	r9, r1, r5
 800b4f8:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 800b4fc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b500:	f04f 0000 	mov.w	r0, #0
 800b504:	f04f 0100 	mov.w	r1, #0
 800b508:	0219      	lsls	r1, r3, #8
 800b50a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b50e:	0210      	lsls	r0, r2, #8
 800b510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b512:	3305      	adds	r3, #5
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	b2db      	uxtb	r3, r3
 800b518:	2200      	movs	r2, #0
 800b51a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b51c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b51e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800b522:	4623      	mov	r3, r4
 800b524:	4303      	orrs	r3, r0
 800b526:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b528:	462b      	mov	r3, r5
 800b52a:	430b      	orrs	r3, r1
 800b52c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b52e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b532:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800b536:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b53a:	f04f 0000 	mov.w	r0, #0
 800b53e:	f04f 0100 	mov.w	r1, #0
 800b542:	0219      	lsls	r1, r3, #8
 800b544:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b548:	0210      	lsls	r0, r2, #8
 800b54a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b54c:	3304      	adds	r3, #4
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	b2db      	uxtb	r3, r3
 800b552:	2200      	movs	r2, #0
 800b554:	653b      	str	r3, [r7, #80]	@ 0x50
 800b556:	657a      	str	r2, [r7, #84]	@ 0x54
 800b558:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800b55c:	4623      	mov	r3, r4
 800b55e:	4303      	orrs	r3, r0
 800b560:	623b      	str	r3, [r7, #32]
 800b562:	462b      	mov	r3, r5
 800b564:	430b      	orrs	r3, r1
 800b566:	627b      	str	r3, [r7, #36]	@ 0x24
 800b568:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b56c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800b570:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b574:	f04f 0000 	mov.w	r0, #0
 800b578:	f04f 0100 	mov.w	r1, #0
 800b57c:	0219      	lsls	r1, r3, #8
 800b57e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b582:	0210      	lsls	r0, r2, #8
 800b584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b586:	3303      	adds	r3, #3
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	2200      	movs	r2, #0
 800b58e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b590:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b592:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800b596:	4623      	mov	r3, r4
 800b598:	4303      	orrs	r3, r0
 800b59a:	61bb      	str	r3, [r7, #24]
 800b59c:	462b      	mov	r3, r5
 800b59e:	430b      	orrs	r3, r1
 800b5a0:	61fb      	str	r3, [r7, #28]
 800b5a2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b5a6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 800b5aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800b5ae:	f04f 0000 	mov.w	r0, #0
 800b5b2:	f04f 0100 	mov.w	r1, #0
 800b5b6:	0219      	lsls	r1, r3, #8
 800b5b8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b5bc:	0210      	lsls	r0, r2, #8
 800b5be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5c0:	3302      	adds	r3, #2
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800b5cc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800b5d0:	4623      	mov	r3, r4
 800b5d2:	4303      	orrs	r3, r0
 800b5d4:	613b      	str	r3, [r7, #16]
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b5e0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800b5e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b5e8:	f04f 0200 	mov.w	r2, #0
 800b5ec:	f04f 0300 	mov.w	r3, #0
 800b5f0:	020b      	lsls	r3, r1, #8
 800b5f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b5f6:	0202      	lsls	r2, r0, #8
 800b5f8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b5fa:	3101      	adds	r1, #1
 800b5fc:	7809      	ldrb	r1, [r1, #0]
 800b5fe:	b2c9      	uxtb	r1, r1
 800b600:	2000      	movs	r0, #0
 800b602:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b604:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800b606:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800b60a:	4621      	mov	r1, r4
 800b60c:	4311      	orrs	r1, r2
 800b60e:	60b9      	str	r1, [r7, #8]
 800b610:	4629      	mov	r1, r5
 800b612:	4319      	orrs	r1, r3
 800b614:	60f9      	str	r1, [r7, #12]
 800b616:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b61a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800b61e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b622:	f04f 0200 	mov.w	r2, #0
 800b626:	f04f 0300 	mov.w	r3, #0
 800b62a:	020b      	lsls	r3, r1, #8
 800b62c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b630:	0202      	lsls	r2, r0, #8
 800b632:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b634:	7809      	ldrb	r1, [r1, #0]
 800b636:	b2c9      	uxtb	r1, r1
 800b638:	2000      	movs	r0, #0
 800b63a:	6339      	str	r1, [r7, #48]	@ 0x30
 800b63c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b63e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b642:	4621      	mov	r1, r4
 800b644:	4311      	orrs	r1, r2
 800b646:	6039      	str	r1, [r7, #0]
 800b648:	4629      	mov	r1, r5
 800b64a:	4319      	orrs	r1, r3
 800b64c:	6079      	str	r1, [r7, #4]
 800b64e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b652:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800b656:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800b65a:	4610      	mov	r0, r2
 800b65c:	4619      	mov	r1, r3
 800b65e:	3774      	adds	r7, #116	@ 0x74
 800b660:	46bd      	mov	sp, r7
 800b662:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b666:	4770      	bx	lr

0800b668 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	1c5a      	adds	r2, r3, #1
 800b678:	607a      	str	r2, [r7, #4]
 800b67a:	887a      	ldrh	r2, [r7, #2]
 800b67c:	b2d2      	uxtb	r2, r2
 800b67e:	701a      	strb	r2, [r3, #0]
 800b680:	887b      	ldrh	r3, [r7, #2]
 800b682:	0a1b      	lsrs	r3, r3, #8
 800b684:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	607a      	str	r2, [r7, #4]
 800b68c:	887a      	ldrh	r2, [r7, #2]
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	701a      	strb	r2, [r3, #0]
}
 800b692:	bf00      	nop
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b083      	sub	sp, #12
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	607a      	str	r2, [r7, #4]
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	b2d2      	uxtb	r2, r2
 800b6b2:	701a      	strb	r2, [r3, #0]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	0a1b      	lsrs	r3, r3, #8
 800b6b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	0a1b      	lsrs	r3, r3, #8
 800b6ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	607a      	str	r2, [r7, #4]
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	b2d2      	uxtb	r2, r2
 800b6d6:	701a      	strb	r2, [r3, #0]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	0a1b      	lsrs	r3, r3, #8
 800b6dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	607a      	str	r2, [r7, #4]
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	b2d2      	uxtb	r2, r2
 800b6e8:	701a      	strb	r2, [r3, #0]
}
 800b6ea:	bf00      	nop
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	60fa      	str	r2, [r7, #12]
 800b708:	783a      	ldrb	r2, [r7, #0]
 800b70a:	701a      	strb	r2, [r3, #0]
 800b70c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b710:	f04f 0200 	mov.w	r2, #0
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	0a02      	lsrs	r2, r0, #8
 800b71a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b71e:	0a0b      	lsrs	r3, r1, #8
 800b720:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	60fa      	str	r2, [r7, #12]
 800b72a:	783a      	ldrb	r2, [r7, #0]
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b732:	f04f 0200 	mov.w	r2, #0
 800b736:	f04f 0300 	mov.w	r3, #0
 800b73a:	0a02      	lsrs	r2, r0, #8
 800b73c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b740:	0a0b      	lsrs	r3, r1, #8
 800b742:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	60fa      	str	r2, [r7, #12]
 800b74c:	783a      	ldrb	r2, [r7, #0]
 800b74e:	701a      	strb	r2, [r3, #0]
 800b750:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b754:	f04f 0200 	mov.w	r2, #0
 800b758:	f04f 0300 	mov.w	r3, #0
 800b75c:	0a02      	lsrs	r2, r0, #8
 800b75e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b762:	0a0b      	lsrs	r3, r1, #8
 800b764:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	1c5a      	adds	r2, r3, #1
 800b76c:	60fa      	str	r2, [r7, #12]
 800b76e:	783a      	ldrb	r2, [r7, #0]
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b776:	f04f 0200 	mov.w	r2, #0
 800b77a:	f04f 0300 	mov.w	r3, #0
 800b77e:	0a02      	lsrs	r2, r0, #8
 800b780:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b784:	0a0b      	lsrs	r3, r1, #8
 800b786:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	60fa      	str	r2, [r7, #12]
 800b790:	783a      	ldrb	r2, [r7, #0]
 800b792:	701a      	strb	r2, [r3, #0]
 800b794:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b798:	f04f 0200 	mov.w	r2, #0
 800b79c:	f04f 0300 	mov.w	r3, #0
 800b7a0:	0a02      	lsrs	r2, r0, #8
 800b7a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b7a6:	0a0b      	lsrs	r3, r1, #8
 800b7a8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	1c5a      	adds	r2, r3, #1
 800b7b0:	60fa      	str	r2, [r7, #12]
 800b7b2:	783a      	ldrb	r2, [r7, #0]
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7ba:	f04f 0200 	mov.w	r2, #0
 800b7be:	f04f 0300 	mov.w	r3, #0
 800b7c2:	0a02      	lsrs	r2, r0, #8
 800b7c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b7c8:	0a0b      	lsrs	r3, r1, #8
 800b7ca:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	1c5a      	adds	r2, r3, #1
 800b7d2:	60fa      	str	r2, [r7, #12]
 800b7d4:	783a      	ldrb	r2, [r7, #0]
 800b7d6:	701a      	strb	r2, [r3, #0]
 800b7d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b7dc:	f04f 0200 	mov.w	r2, #0
 800b7e0:	f04f 0300 	mov.w	r3, #0
 800b7e4:	0a02      	lsrs	r2, r0, #8
 800b7e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b7ea:	0a0b      	lsrs	r3, r1, #8
 800b7ec:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	60fa      	str	r2, [r7, #12]
 800b7f6:	783a      	ldrb	r2, [r7, #0]
 800b7f8:	701a      	strb	r2, [r3, #0]
}
 800b7fa:	bf00      	nop
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	4603      	mov	r3, r0
 800b80e:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 800b810:	2281      	movs	r2, #129	@ 0x81
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	4293      	cmp	r3, r2
 800b816:	d30f      	bcc.n	800b838 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 800b818:	229f      	movs	r2, #159	@ 0x9f
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d801      	bhi.n	800b824 <dbc_1st+0x1e>
 800b820:	2301      	movs	r3, #1
 800b822:	e00a      	b.n	800b83a <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 800b824:	22e0      	movs	r2, #224	@ 0xe0
 800b826:	79fb      	ldrb	r3, [r7, #7]
 800b828:	4293      	cmp	r3, r2
 800b82a:	d305      	bcc.n	800b838 <dbc_1st+0x32>
 800b82c:	22fc      	movs	r2, #252	@ 0xfc
 800b82e:	79fb      	ldrb	r3, [r7, #7]
 800b830:	4293      	cmp	r3, r2
 800b832:	d801      	bhi.n	800b838 <dbc_1st+0x32>
 800b834:	2301      	movs	r3, #1
 800b836:	e000      	b.n	800b83a <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr

0800b846 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 800b846:	b480      	push	{r7}
 800b848:	b083      	sub	sp, #12
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	4603      	mov	r3, r0
 800b84e:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 800b850:	2240      	movs	r2, #64	@ 0x40
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	4293      	cmp	r3, r2
 800b856:	d319      	bcc.n	800b88c <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 800b858:	227e      	movs	r2, #126	@ 0x7e
 800b85a:	79fb      	ldrb	r3, [r7, #7]
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d801      	bhi.n	800b864 <dbc_2nd+0x1e>
 800b860:	2301      	movs	r3, #1
 800b862:	e014      	b.n	800b88e <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 800b864:	2280      	movs	r2, #128	@ 0x80
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	4293      	cmp	r3, r2
 800b86a:	d305      	bcc.n	800b878 <dbc_2nd+0x32>
 800b86c:	22fc      	movs	r2, #252	@ 0xfc
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	4293      	cmp	r3, r2
 800b872:	d801      	bhi.n	800b878 <dbc_2nd+0x32>
 800b874:	2301      	movs	r3, #1
 800b876:	e00a      	b.n	800b88e <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 800b878:	2200      	movs	r2, #0
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d305      	bcc.n	800b88c <dbc_2nd+0x46>
 800b880:	2200      	movs	r2, #0
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	4293      	cmp	r3, r2
 800b886:	d801      	bhi.n	800b88c <dbc_2nd+0x46>
 800b888:	2301      	movs	r3, #1
 800b88a:	e000      	b.n	800b88e <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b086      	sub	sp, #24
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE sb;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	617a      	str	r2, [r7, #20]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 800b8b2:	8a7b      	ldrh	r3, [r7, #18]
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff ffa5 	bl	800b806 <dbc_1st>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d015      	beq.n	800b8ee <tchar2uni+0x54>
		sb = (BYTE)*p++;		/* Get 2nd byte */
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	1c5a      	adds	r2, r3, #1
 800b8c6:	617a      	str	r2, [r7, #20]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(sb)) return 0xFFFFFFFF;	/* Invalid code? */
 800b8cc:	7c7b      	ldrb	r3, [r7, #17]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff ffb9 	bl	800b846 <dbc_2nd>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d102      	bne.n	800b8e0 <tchar2uni+0x46>
 800b8da:	f04f 33ff 	mov.w	r3, #4294967295
 800b8de:	e01d      	b.n	800b91c <tchar2uni+0x82>
		wc = (wc << 8) + sb;	/* Make a DBC */
 800b8e0:	8a7b      	ldrh	r3, [r7, #18]
 800b8e2:	021b      	lsls	r3, r3, #8
 800b8e4:	b29a      	uxth	r2, r3
 800b8e6:	7c7b      	ldrb	r3, [r7, #17]
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	4413      	add	r3, r2
 800b8ec:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 800b8ee:	8a7b      	ldrh	r3, [r7, #18]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00d      	beq.n	800b910 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 800b8f4:	8a7b      	ldrh	r3, [r7, #18]
 800b8f6:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f004 fc34 	bl	8010168 <ff_oem2uni>
 800b900:	4603      	mov	r3, r0
 800b902:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 800b904:	8a7b      	ldrh	r3, [r7, #18]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d102      	bne.n	800b910 <tchar2uni+0x76>
 800b90a:	f04f 33ff 	mov.w	r3, #4294967295
 800b90e:	e005      	b.n	800b91c <tchar2uni+0x82>
	}
	uc = wc;
 800b910:	8a7b      	ldrh	r3, [r7, #18]
 800b912:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	601a      	str	r2, [r3, #0]
	return uc;
 800b91a:	68fb      	ldr	r3, [r7, #12]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <put_utf>:
static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 800b930:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
 800b934:	68f8      	ldr	r0, [r7, #12]
 800b936:	f004 fbbb 	bl	80100b0 <ff_uni2oem>
 800b93a:	4603      	mov	r3, r0
 800b93c:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 800b93e:	8afb      	ldrh	r3, [r7, #22]
 800b940:	2bff      	cmp	r3, #255	@ 0xff
 800b942:	d914      	bls.n	800b96e <put_utf+0x4a>
		if (szb < 2) return 0;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d801      	bhi.n	800b94e <put_utf+0x2a>
 800b94a:	2300      	movs	r3, #0
 800b94c:	e01e      	b.n	800b98c <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 800b94e:	8afb      	ldrh	r3, [r7, #22]
 800b950:	0a1b      	lsrs	r3, r3, #8
 800b952:	b299      	uxth	r1, r3
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	1c5a      	adds	r2, r3, #1
 800b958:	60ba      	str	r2, [r7, #8]
 800b95a:	b2ca      	uxtb	r2, r1
 800b95c:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	1c5a      	adds	r2, r3, #1
 800b962:	60ba      	str	r2, [r7, #8]
 800b964:	8afa      	ldrh	r2, [r7, #22]
 800b966:	b2d2      	uxtb	r2, r2
 800b968:	701a      	strb	r2, [r3, #0]
		return 2;
 800b96a:	2302      	movs	r3, #2
 800b96c:	e00e      	b.n	800b98c <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid character or buffer overflow? */
 800b96e:	8afb      	ldrh	r3, [r7, #22]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <put_utf+0x56>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <put_utf+0x5a>
 800b97a:	2300      	movs	r3, #0
 800b97c:	e006      	b.n	800b98c <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	60ba      	str	r2, [r7, #8]
 800b984:	8afa      	ldrh	r2, [r7, #22]
 800b986:	b2d2      	uxtb	r2, r2
 800b988:	701a      	strb	r2, [r3, #0]
	return 1;
 800b98a:	2301      	movs	r3, #1
#endif
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800b99c:	2300      	movs	r3, #0
 800b99e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	791b      	ldrb	r3, [r3, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d02c      	beq.n	800ba02 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	7858      	ldrb	r0, [r3, #1]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	f7ff f83b 	bl	800aa32 <disk_write>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d11d      	bne.n	800b9fe <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d0:	1ad2      	subs	r2, r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d213      	bcs.n	800ba02 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	78db      	ldrb	r3, [r3, #3]
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d10f      	bne.n	800ba02 <sync_window+0x6e>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	7858      	ldrb	r0, [r3, #1]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	441a      	add	r2, r3
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	f7ff f81b 	bl	800aa32 <disk_write>
 800b9fc:	e001      	b.n	800ba02 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d01b      	beq.n	800ba5c <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7ff ffb5 	bl	800b994 <sync_window>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d113      	bne.n	800ba5c <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	7858      	ldrb	r0, [r3, #1]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ba3e:	2301      	movs	r3, #1
 800ba40:	683a      	ldr	r2, [r7, #0]
 800ba42:	f7fe ffe3 	bl	800aa0c <disk_read>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d004      	beq.n	800ba56 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 800ba4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
	...

0800ba68 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 800ba68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba6c:	b08a      	sub	sp, #40	@ 0x28
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	61f8      	str	r0, [r7, #28]
	FRESULT res;


	res = sync_window(fs);
 800ba72:	69f8      	ldr	r0, [r7, #28]
 800ba74:	f7ff ff8e 	bl	800b994 <sync_window>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (res == FR_OK) {
 800ba7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f040 80c7 	bne.w	800bc16 <sync_fs+0x1ae>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	795b      	ldrb	r3, [r3, #5]
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	f040 80b5 	bne.w	800bbfc <sync_fs+0x194>
			fs->fsi_flag = 0;
 800ba92:	69fa      	ldr	r2, [r7, #28]
 800ba94:	2300      	movs	r3, #0
 800ba96:	7153      	strb	r3, [r2, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	d141      	bne.n	800bb24 <sync_fs+0xbc>
				/* Create FSInfo structure */
				memset(fs->win, 0, sizeof fs->win);
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	333c      	adds	r3, #60	@ 0x3c
 800baa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800baa8:	2100      	movs	r1, #0
 800baaa:	4618      	mov	r0, r3
 800baac:	f006 fa67 	bl	8011f7e <memset>
				st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	333c      	adds	r3, #60	@ 0x3c
 800bab4:	495b      	ldr	r1, [pc, #364]	@ (800bc24 <sync_fs+0x1bc>)
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7ff fdf1 	bl	800b69e <st_dword>
				st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800babc:	69fb      	ldr	r3, [r7, #28]
 800babe:	333c      	adds	r3, #60	@ 0x3c
 800bac0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bac4:	4958      	ldr	r1, [pc, #352]	@ (800bc28 <sync_fs+0x1c0>)
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff fde9 	bl	800b69e <st_dword>
				st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	333c      	adds	r3, #60	@ 0x3c
 800bad0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	4619      	mov	r1, r3
 800bada:	4610      	mov	r0, r2
 800badc:	f7ff fddf 	bl	800b69e <st_dword>
				st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	333c      	adds	r3, #60	@ 0x3c
 800bae4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	4619      	mov	r1, r3
 800baee:	4610      	mov	r0, r2
 800baf0:	f7ff fdd5 	bl	800b69e <st_dword>
				st_dword(fs->win + FSI_TrailSig, 0xAA550000);		/* Trailing signature */
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	333c      	adds	r3, #60	@ 0x3c
 800baf8:	f503 73f9 	add.w	r3, r3, #498	@ 0x1f2
 800bafc:	494b      	ldr	r1, [pc, #300]	@ (800bc2c <sync_fs+0x1c4>)
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7ff fdcd 	bl	800b69e <st_dword>
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	7858      	ldrb	r0, [r3, #1]
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb12:	1c5a      	adds	r2, r3, #1
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	639a      	str	r2, [r3, #56]	@ 0x38
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f7fe ff88 	bl	800aa32 <disk_write>
 800bb22:	e06b      	b.n	800bbfc <sync_fs+0x194>
			}
#if FF_FS_EXFAT
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	2b04      	cmp	r3, #4
 800bb2a:	d167      	bne.n	800bbfc <sync_fs+0x194>
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	7858      	ldrb	r0, [r3, #1]
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	639a      	str	r2, [r3, #56]	@ 0x38
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb42:	2301      	movs	r3, #1
 800bb44:	f7fe ff62 	bl	800aa0c <disk_read>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d156      	bne.n	800bbfc <sync_fs+0x194>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	699a      	ldr	r2, [r3, #24]
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	3b02      	subs	r3, #2
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d836      	bhi.n	800bbca <sync_fs+0x162>
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	69da      	ldr	r2, [r3, #28]
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	3b02      	subs	r3, #2
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4698      	mov	r8, r3
 800bb6c:	4691      	mov	r9, r2
 800bb6e:	4642      	mov	r2, r8
 800bb70:	464b      	mov	r3, r9
 800bb72:	1891      	adds	r1, r2, r2
 800bb74:	6039      	str	r1, [r7, #0]
 800bb76:	415b      	adcs	r3, r3
 800bb78:	607b      	str	r3, [r7, #4]
 800bb7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb7e:	eb12 0408 	adds.w	r4, r2, r8
 800bb82:	eb43 0509 	adc.w	r5, r3, r9
 800bb86:	f04f 0200 	mov.w	r2, #0
 800bb8a:	f04f 0300 	mov.w	r3, #0
 800bb8e:	016b      	lsls	r3, r5, #5
 800bb90:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800bb94:	0162      	lsls	r2, r4, #5
 800bb96:	eb14 0a02 	adds.w	sl, r4, r2
 800bb9a:	eb45 0b03 	adc.w	fp, r5, r3
 800bb9e:	eb1a 0308 	adds.w	r3, sl, r8
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	eb4b 0309 	adc.w	r3, fp, r9
 800bba8:	617b      	str	r3, [r7, #20]
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	3b02      	subs	r3, #2
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	60bb      	str	r3, [r7, #8]
 800bbb4:	60fa      	str	r2, [r7, #12]
 800bbb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bbbe:	f7f4 fff5 	bl	8000bac <__aeabi_uldivmod>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	b2d3      	uxtb	r3, r2
 800bbc8:	e000      	b.n	800bbcc <sync_fs+0x164>
 800bbca:	23ff      	movs	r3, #255	@ 0xff
 800bbcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bbd6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d00e      	beq.n	800bbfc <sync_fs+0x194>
						fs->win[BPB_PercInUseEx] = perc_inuse;
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800bbe4:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	7858      	ldrb	r0, [r3, #1]
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	f7fe ff1b 	bl	800aa32 <disk_write>
				}
			}
#endif
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	785b      	ldrb	r3, [r3, #1]
 800bc00:	2200      	movs	r2, #0
 800bc02:	2100      	movs	r1, #0
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fe ff27 	bl	800aa58 <disk_ioctl>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <sync_fs+0x1ae>
 800bc10:	2301      	movs	r3, #1
 800bc12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return res;
 800bc16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3728      	adds	r7, #40	@ 0x28
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc24:	41615252 	.word	0x41615252
 800bc28:	61417272 	.word	0x61417272
 800bc2c:	aa550000 	.word	0xaa550000

0800bc30 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	3b02      	subs	r3, #2
 800bc3e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	3b02      	subs	r3, #2
 800bc46:	683a      	ldr	r2, [r7, #0]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d301      	bcc.n	800bc50 <clst2sect+0x20>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	e008      	b.n	800bc62 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	895b      	ldrh	r3, [r3, #10]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	fb01 f303 	mul.w	r3, r1, r3
 800bc60:	4413      	add	r3, r2
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
	...

0800bc70 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	6809      	ldr	r1, [r1, #0]
 800bc7e:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	2901      	cmp	r1, #1
 800bc84:	d904      	bls.n	800bc90 <get_fat+0x20>
 800bc86:	69b9      	ldr	r1, [r7, #24]
 800bc88:	69c9      	ldr	r1, [r1, #28]
 800bc8a:	6838      	ldr	r0, [r7, #0]
 800bc8c:	4288      	cmp	r0, r1
 800bc8e:	d302      	bcc.n	800bc96 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bc90:	2301      	movs	r3, #1
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	e10c      	b.n	800beb0 <get_fat+0x240>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bc96:	f04f 31ff 	mov.w	r1, #4294967295
 800bc9a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800bc9c:	69b9      	ldr	r1, [r7, #24]
 800bc9e:	7809      	ldrb	r1, [r1, #0]
 800bca0:	3901      	subs	r1, #1
 800bca2:	2903      	cmp	r1, #3
 800bca4:	f200 80f8 	bhi.w	800be98 <get_fat+0x228>
 800bca8:	a001      	add	r0, pc, #4	@ (adr r0, 800bcb0 <get_fat+0x40>)
 800bcaa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bcae:	bf00      	nop
 800bcb0:	0800bcc1 	.word	0x0800bcc1
 800bcb4:	0800bd47 	.word	0x0800bd47
 800bcb8:	0800bd7d 	.word	0x0800bd7d
 800bcbc:	0800bdb7 	.word	0x0800bdb7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	085b      	lsrs	r3, r3, #1
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	4413      	add	r3, r2
 800bccc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	0a5b      	lsrs	r3, r3, #9
 800bcd6:	4413      	add	r3, r2
 800bcd8:	4619      	mov	r1, r3
 800bcda:	69b8      	ldr	r0, [r7, #24]
 800bcdc:	f7ff fe96 	bl	800ba0c <move_window>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f040 80db 	bne.w	800be9e <get_fat+0x22e>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	60fa      	str	r2, [r7, #12]
 800bcee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcf2:	69ba      	ldr	r2, [r7, #24]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcfa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	0a5b      	lsrs	r3, r3, #9
 800bd04:	4413      	add	r3, r2
 800bd06:	4619      	mov	r1, r3
 800bd08:	69b8      	ldr	r0, [r7, #24]
 800bd0a:	f7ff fe7f 	bl	800ba0c <move_window>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f040 80c6 	bne.w	800bea2 <get_fat+0x232>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd1c:	69ba      	ldr	r2, [r7, #24]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd24:	021b      	lsls	r3, r3, #8
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d002      	beq.n	800bd3c <get_fat+0xcc>
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	091b      	lsrs	r3, r3, #4
 800bd3a:	e002      	b.n	800bd42 <get_fat+0xd2>
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd42:	61fb      	str	r3, [r7, #28]
			break;
 800bd44:	e0b4      	b.n	800beb0 <get_fat+0x240>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	0a1b      	lsrs	r3, r3, #8
 800bd4e:	4413      	add	r3, r2
 800bd50:	4619      	mov	r1, r3
 800bd52:	69b8      	ldr	r0, [r7, #24]
 800bd54:	f7ff fe5a 	bl	800ba0c <move_window>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f040 80a3 	bne.w	800bea6 <get_fat+0x236>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	005b      	lsls	r3, r3, #1
 800bd6a:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bd6e:	4413      	add	r3, r2
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fb63 	bl	800b43c <ld_word>
 800bd76:	4603      	mov	r3, r0
 800bd78:	61fb      	str	r3, [r7, #28]
			break;
 800bd7a:	e099      	b.n	800beb0 <get_fat+0x240>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	09db      	lsrs	r3, r3, #7
 800bd84:	4413      	add	r3, r2
 800bd86:	4619      	mov	r1, r3
 800bd88:	69b8      	ldr	r0, [r7, #24]
 800bd8a:	f7ff fe3f 	bl	800ba0c <move_window>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f040 808a 	bne.w	800beaa <get_fat+0x23a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bda4:	4413      	add	r3, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff fb60 	bl	800b46c <ld_dword>
 800bdac:	4603      	mov	r3, r0
 800bdae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bdb2:	61fb      	str	r3, [r7, #28]
			break;
 800bdb4:	e07c      	b.n	800beb0 <get_fat+0x240>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bdbc:	4301      	orrs	r1, r0
 800bdbe:	d003      	beq.n	800bdc8 <get_fat+0x158>
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	6889      	ldr	r1, [r1, #8]
 800bdc4:	2900      	cmp	r1, #0
 800bdc6:	d103      	bne.n	800bdd0 <get_fat+0x160>
 800bdc8:	6879      	ldr	r1, [r7, #4]
 800bdca:	79c9      	ldrb	r1, [r1, #7]
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	d160      	bne.n	800be92 <get_fat+0x222>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800bdd0:	6879      	ldr	r1, [r7, #4]
 800bdd2:	6889      	ldr	r1, [r1, #8]
 800bdd4:	6838      	ldr	r0, [r7, #0]
 800bdd6:	1a41      	subs	r1, r0, r1
 800bdd8:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 800bdda:	6879      	ldr	r1, [r7, #4]
 800bddc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bde0:	1e42      	subs	r2, r0, #1
 800bde2:	f141 33ff 	adc.w	r3, r1, #4294967295
 800bde6:	f04f 0000 	mov.w	r0, #0
 800bdea:	f04f 0100 	mov.w	r1, #0
 800bdee:	0a50      	lsrs	r0, r2, #9
 800bdf0:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bdf4:	0a59      	lsrs	r1, r3, #9
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	895b      	ldrh	r3, [r3, #10]
 800bdfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800be00:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	79db      	ldrb	r3, [r3, #7]
 800be06:	2b02      	cmp	r3, #2
 800be08:	d10e      	bne.n	800be28 <get_fat+0x1b8>
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d80a      	bhi.n	800be28 <get_fat+0x1b8>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	429a      	cmp	r2, r3
 800be18:	d002      	beq.n	800be20 <get_fat+0x1b0>
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	3301      	adds	r3, #1
 800be1e:	e001      	b.n	800be24 <get_fat+0x1b4>
 800be20:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800be24:	61fb      	str	r3, [r7, #28]
					break;
 800be26:	e043      	b.n	800beb0 <get_fat+0x240>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	79db      	ldrb	r3, [r3, #7]
 800be2c:	2b03      	cmp	r3, #3
 800be2e:	d108      	bne.n	800be42 <get_fat+0x1d2>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	429a      	cmp	r2, r3
 800be38:	d203      	bcs.n	800be42 <get_fat+0x1d2>
					val = clst + 1; 	/* Generate the value */
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	3301      	adds	r3, #1
 800be3e:	61fb      	str	r3, [r7, #28]
					break;
 800be40:	e036      	b.n	800beb0 <get_fat+0x240>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	79db      	ldrb	r3, [r3, #7]
 800be46:	2b02      	cmp	r3, #2
 800be48:	d023      	beq.n	800be92 <get_fat+0x222>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	69db      	ldr	r3, [r3, #28]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d003      	beq.n	800be5a <get_fat+0x1ea>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800be52:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800be56:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800be58:	e02a      	b.n	800beb0 <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	09db      	lsrs	r3, r3, #7
 800be62:	4413      	add	r3, r2
 800be64:	4619      	mov	r1, r3
 800be66:	69b8      	ldr	r0, [r7, #24]
 800be68:	f7ff fdd0 	bl	800ba0c <move_window>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d11d      	bne.n	800beae <get_fat+0x23e>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800be80:	4413      	add	r3, r2
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff faf2 	bl	800b46c <ld_dword>
 800be88:	4603      	mov	r3, r0
 800be8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be8e:	61fb      	str	r3, [r7, #28]
					break;
 800be90:	e00e      	b.n	800beb0 <get_fat+0x240>
				}
			}
			val = 1;	/* Internal error */
 800be92:	2301      	movs	r3, #1
 800be94:	61fb      	str	r3, [r7, #28]
			break;
 800be96:	e00b      	b.n	800beb0 <get_fat+0x240>
#endif
		default:
			val = 1;	/* Internal error */
 800be98:	2301      	movs	r3, #1
 800be9a:	61fb      	str	r3, [r7, #28]
 800be9c:	e008      	b.n	800beb0 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be9e:	bf00      	nop
 800bea0:	e006      	b.n	800beb0 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bea2:	bf00      	nop
 800bea4:	e004      	b.n	800beb0 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bea6:	bf00      	nop
 800bea8:	e002      	b.n	800beb0 <get_fat+0x240>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800beaa:	bf00      	nop
 800beac:	e000      	b.n	800beb0 <get_fat+0x240>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800beae:	bf00      	nop
		}
	}

	return val;
 800beb0:	69fb      	ldr	r3, [r7, #28]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3720      	adds	r7, #32
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop

0800bebc <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bebc:	b590      	push	{r4, r7, lr}
 800bebe:	b089      	sub	sp, #36	@ 0x24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bec8:	2302      	movs	r3, #2
 800beca:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2b01      	cmp	r3, #1
 800bed0:	f240 80dd 	bls.w	800c08e <put_fat+0x1d2>
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	429a      	cmp	r2, r3
 800bedc:	f080 80d7 	bcs.w	800c08e <put_fat+0x1d2>
		switch (fs->fs_type) {
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b04      	cmp	r3, #4
 800bee6:	f300 80d2 	bgt.w	800c08e <put_fat+0x1d2>
 800beea:	2b03      	cmp	r3, #3
 800beec:	f280 8093 	bge.w	800c016 <put_fat+0x15a>
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d002      	beq.n	800befa <put_fat+0x3e>
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d06e      	beq.n	800bfd6 <put_fat+0x11a>
 800bef8:	e0c9      	b.n	800c08e <put_fat+0x1d2>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	61bb      	str	r3, [r7, #24]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	085b      	lsrs	r3, r3, #1
 800bf02:	69ba      	ldr	r2, [r7, #24]
 800bf04:	4413      	add	r3, r2
 800bf06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	0a5b      	lsrs	r3, r3, #9
 800bf10:	4413      	add	r3, r2
 800bf12:	4619      	mov	r1, r3
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7ff fd79 	bl	800ba0c <move_window>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf1e:	7ffb      	ldrb	r3, [r7, #31]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f040 80ad 	bne.w	800c080 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	1c59      	adds	r1, r3, #1
 800bf30:	61b9      	str	r1, [r7, #24]
 800bf32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf36:	4413      	add	r3, r2
 800bf38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	f003 0301 	and.w	r3, r3, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00d      	beq.n	800bf60 <put_fat+0xa4>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	f003 030f 	and.w	r3, r3, #15
 800bf4e:	b25a      	sxtb	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	011b      	lsls	r3, r3, #4
 800bf56:	b25b      	sxtb	r3, r3
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	b25b      	sxtb	r3, r3
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	e001      	b.n	800bf64 <put_fat+0xa8>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	0a5b      	lsrs	r3, r3, #9
 800bf76:	4413      	add	r3, r2
 800bf78:	4619      	mov	r1, r3
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fd46 	bl	800ba0c <move_window>
 800bf80:	4603      	mov	r3, r0
 800bf82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf84:	7ffb      	ldrb	r3, [r7, #31]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d17c      	bne.n	800c084 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf96:	4413      	add	r3, r2
 800bf98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f003 0301 	and.w	r3, r3, #1
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <put_fat+0xf0>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	091b      	lsrs	r3, r3, #4
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	e00e      	b.n	800bfca <put_fat+0x10e>
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	b25b      	sxtb	r3, r3
 800bfb2:	f023 030f 	bic.w	r3, r3, #15
 800bfb6:	b25a      	sxtb	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	0a1b      	lsrs	r3, r3, #8
 800bfbc:	b25b      	sxtb	r3, r3
 800bfbe:	f003 030f 	and.w	r3, r3, #15
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	b25b      	sxtb	r3, r3
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	697a      	ldr	r2, [r7, #20]
 800bfcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	711a      	strb	r2, [r3, #4]
			break;
 800bfd4:	e05b      	b.n	800c08e <put_fat+0x1d2>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	0a1b      	lsrs	r3, r3, #8
 800bfde:	4413      	add	r3, r2
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	68f8      	ldr	r0, [r7, #12]
 800bfe4:	f7ff fd12 	bl	800ba0c <move_window>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bfec:	7ffb      	ldrb	r3, [r7, #31]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d14a      	bne.n	800c088 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c000:	4413      	add	r3, r2
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	b292      	uxth	r2, r2
 800c006:	4611      	mov	r1, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff fb2d 	bl	800b668 <st_word>
			fs->wflag = 1;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2201      	movs	r2, #1
 800c012:	711a      	strb	r2, [r3, #4]
			break;
 800c014:	e03b      	b.n	800c08e <put_fat+0x1d2>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	09db      	lsrs	r3, r3, #7
 800c01e:	4413      	add	r3, r2
 800c020:	4619      	mov	r1, r3
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7ff fcf2 	bl	800ba0c <move_window>
 800c028:	4603      	mov	r3, r0
 800c02a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c02c:	7ffb      	ldrb	r3, [r7, #31]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d12c      	bne.n	800c08c <put_fat+0x1d0>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2b04      	cmp	r3, #4
 800c038:	d012      	beq.n	800c060 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c04e:	4413      	add	r3, r2
 800c050:	4618      	mov	r0, r3
 800c052:	f7ff fa0b 	bl	800b46c <ld_dword>
 800c056:	4603      	mov	r3, r0
 800c058:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c05c:	4323      	orrs	r3, r4
 800c05e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c06e:	4413      	add	r3, r2
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	4618      	mov	r0, r3
 800c074:	f7ff fb13 	bl	800b69e <st_dword>
			fs->wflag = 1;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2201      	movs	r2, #1
 800c07c:	711a      	strb	r2, [r3, #4]
			break;
 800c07e:	e006      	b.n	800c08e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800c080:	bf00      	nop
 800c082:	e004      	b.n	800c08e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800c084:	bf00      	nop
 800c086:	e002      	b.n	800c08e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800c088:	bf00      	nop
 800c08a:	e000      	b.n	800c08e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800c08c:	bf00      	nop
		}
	}
	return res;
 800c08e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c090:	4618      	mov	r0, r3
 800c092:	3724      	adds	r7, #36	@ 0x24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd90      	pop	{r4, r7, pc}

0800c098 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08a      	sub	sp, #40	@ 0x28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	3b02      	subs	r3, #2
 800c0a8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	3b02      	subs	r3, #2
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d301      	bcc.n	800c0ba <find_bitmap+0x22>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	61fb      	str	r3, [r7, #28]
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	61bb      	str	r3, [r7, #24]
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	0b1b      	lsrs	r3, r3, #12
 800c0ce:	4413      	add	r3, r2
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff fc9a 	bl	800ba0c <move_window>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <find_bitmap+0x4c>
 800c0de:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e2:	e051      	b.n	800c188 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	08db      	lsrs	r3, r3, #3
 800c0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0ec:	623b      	str	r3, [r7, #32]
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	f003 0307 	and.w	r3, r3, #7
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	6a3b      	ldr	r3, [r7, #32]
 800c102:	4413      	add	r3, r2
 800c104:	333c      	adds	r3, #60	@ 0x3c
 800c106:	781a      	ldrb	r2, [r3, #0]
 800c108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c10c:	4013      	ands	r3, r2
 800c10e:	74fb      	strb	r3, [r7, #19]
 800c110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	3301      	adds	r3, #1
 800c11e:	61fb      	str	r3, [r7, #28]
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	3b02      	subs	r3, #2
 800c126:	69fa      	ldr	r2, [r7, #28]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d307      	bcc.n	800c13c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800c12c:	2300      	movs	r3, #0
 800c12e:	61fb      	str	r3, [r7, #28]
 800c130:	2300      	movs	r3, #0
 800c132:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c13a:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 800c13c:	7cfb      	ldrb	r3, [r7, #19]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d109      	bne.n	800c156 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	3301      	adds	r3, #1
 800c146:	617b      	str	r3, [r7, #20]
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d106      	bne.n	800c15e <find_bitmap+0xc6>
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	3302      	adds	r3, #2
 800c154:	e018      	b.n	800c188 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	61bb      	str	r3, [r7, #24]
 800c15a:	2300      	movs	r3, #0
 800c15c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800c15e:	69fa      	ldr	r2, [r7, #28]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	429a      	cmp	r2, r3
 800c164:	d101      	bne.n	800c16a <find_bitmap+0xd2>
 800c166:	2300      	movs	r3, #0
 800c168:	e00e      	b.n	800c188 <find_bitmap+0xf0>
			} while (bm != 0);
 800c16a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1c5      	bne.n	800c0fe <find_bitmap+0x66>
			bm = 1;
 800c172:	2301      	movs	r3, #1
 800c174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	3301      	adds	r3, #1
 800c17c:	623b      	str	r3, [r7, #32]
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c184:	d3bb      	bcc.n	800c0fe <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 800c186:	e79e      	b.n	800c0c6 <find_bitmap+0x2e>
	}
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3728      	adds	r7, #40	@ 0x28
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	3b02      	subs	r3, #2
 800c1a2:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	0b1b      	lsrs	r3, r3, #12
 800c1ac:	4413      	add	r3, r2
 800c1ae:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	08db      	lsrs	r3, r3, #3
 800c1b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	f003 0307 	and.w	r3, r3, #7
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1c6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	617a      	str	r2, [r7, #20]
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f7ff fc1b 	bl	800ba0c <move_window>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <change_bitmap+0x50>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e03d      	b.n	800c25c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	333c      	adds	r3, #60	@ 0x3c
 800c1e8:	781a      	ldrb	r2, [r3, #0]
 800c1ea:	7ffb      	ldrb	r3, [r7, #31]
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bf14      	ite	ne
 800c1f4:	2301      	movne	r3, #1
 800c1f6:	2300      	moveq	r3, #0
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d101      	bne.n	800c206 <change_bitmap+0x76>
 800c202:	2302      	movs	r3, #2
 800c204:	e02a      	b.n	800c25c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	4413      	add	r3, r2
 800c20c:	333c      	adds	r3, #60	@ 0x3c
 800c20e:	781a      	ldrb	r2, [r3, #0]
 800c210:	7ffb      	ldrb	r3, [r7, #31]
 800c212:	4053      	eors	r3, r2
 800c214:	b2d9      	uxtb	r1, r3
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	4413      	add	r3, r2
 800c21c:	333c      	adds	r3, #60	@ 0x3c
 800c21e:	460a      	mov	r2, r1
 800c220:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2201      	movs	r2, #1
 800c226:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	607b      	str	r3, [r7, #4]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <change_bitmap+0xa8>
 800c234:	2300      	movs	r3, #0
 800c236:	e011      	b.n	800c25c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800c238:	7ffb      	ldrb	r3, [r7, #31]
 800c23a:	005b      	lsls	r3, r3, #1
 800c23c:	77fb      	strb	r3, [r7, #31]
 800c23e:	7ffb      	ldrb	r3, [r7, #31]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1cd      	bne.n	800c1e0 <change_bitmap+0x50>
			bm = 1;
 800c244:	2301      	movs	r3, #1
 800c246:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	3301      	adds	r3, #1
 800c24c:	61bb      	str	r3, [r7, #24]
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c254:	d3c4      	bcc.n	800c1e0 <change_bitmap+0x50>
		i = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800c25a:	e7b5      	b.n	800c1c8 <change_bitmap+0x38>
	}
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3720      	adds	r7, #32
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	79db      	ldrb	r3, [r3, #7]
 800c270:	2b03      	cmp	r3, #3
 800c272:	d121      	bne.n	800c2b8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	617b      	str	r3, [r7, #20]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	613b      	str	r3, [r7, #16]
 800c280:	e014      	b.n	800c2ac <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6818      	ldr	r0, [r3, #0]
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	3301      	adds	r3, #1
 800c28a:	461a      	mov	r2, r3
 800c28c:	6979      	ldr	r1, [r7, #20]
 800c28e:	f7ff fe15 	bl	800bebc <put_fat>
 800c292:	4603      	mov	r3, r0
 800c294:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d001      	beq.n	800c2a0 <fill_first_frag+0x3c>
 800c29c:	7bfb      	ldrb	r3, [r7, #15]
 800c29e:	e00c      	b.n	800c2ba <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	617b      	str	r3, [r7, #20]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	613b      	str	r3, [r7, #16]
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1e7      	bne.n	800c282 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3718      	adds	r7, #24
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b086      	sub	sp, #24
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	60f8      	str	r0, [r7, #12]
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800c2ce:	e020      	b.n	800c312 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6818      	ldr	r0, [r3, #0]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	1ad3      	subs	r3, r2, r3
 800c2dc:	1c59      	adds	r1, r3, #1
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	69db      	ldr	r3, [r3, #28]
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d905      	bls.n	800c2f2 <fill_last_frag+0x30>
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	3302      	adds	r3, #2
 800c2f0:	e000      	b.n	800c2f4 <fill_last_frag+0x32>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	f7ff fde1 	bl	800bebc <put_fat>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <fill_last_frag+0x46>
 800c304:	7dfb      	ldrb	r3, [r7, #23]
 800c306:	e009      	b.n	800c31c <fill_last_frag+0x5a>
		obj->n_frag--;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	1e5a      	subs	r2, r3, #1
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1da      	bne.n	800c2d0 <fill_last_frag+0xe>
	}
	return FR_OK;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3718      	adds	r7, #24
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b08a      	sub	sp, #40	@ 0x28
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c330:	2300      	movs	r3, #0
 800c332:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2b01      	cmp	r3, #1
 800c346:	d904      	bls.n	800c352 <remove_chain+0x2e>
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	69db      	ldr	r3, [r3, #28]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d301      	bcc.n	800c356 <remove_chain+0x32>
 800c352:	2302      	movs	r3, #2
 800c354:	e0c4      	b.n	800c4e0 <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d014      	beq.n	800c386 <remove_chain+0x62>
 800c35c:	69bb      	ldr	r3, [r7, #24]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	2b04      	cmp	r3, #4
 800c362:	d103      	bne.n	800c36c <remove_chain+0x48>
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	79db      	ldrb	r3, [r3, #7]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d00c      	beq.n	800c386 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c36c:	f04f 32ff 	mov.w	r2, #4294967295
 800c370:	6879      	ldr	r1, [r7, #4]
 800c372:	69b8      	ldr	r0, [r7, #24]
 800c374:	f7ff fda2 	bl	800bebc <put_fat>
 800c378:	4603      	mov	r3, r0
 800c37a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c37c:	7ffb      	ldrb	r3, [r7, #31]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <remove_chain+0x62>
 800c382:	7ffb      	ldrb	r3, [r7, #31]
 800c384:	e0ac      	b.n	800c4e0 <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c386:	68b9      	ldr	r1, [r7, #8]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff fc71 	bl	800bc70 <get_fat>
 800c38e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d055      	beq.n	800c442 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d101      	bne.n	800c3a0 <remove_chain+0x7c>
 800c39c:	2302      	movs	r3, #2
 800c39e:	e09f      	b.n	800c4e0 <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a6:	d101      	bne.n	800c3ac <remove_chain+0x88>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e099      	b.n	800c4e0 <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	2b04      	cmp	r3, #4
 800c3b2:	d00b      	beq.n	800c3cc <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	68b9      	ldr	r1, [r7, #8]
 800c3b8:	69b8      	ldr	r0, [r7, #24]
 800c3ba:	f7ff fd7f 	bl	800bebc <put_fat>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c3c2:	7ffb      	ldrb	r3, [r7, #31]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d001      	beq.n	800c3cc <remove_chain+0xa8>
 800c3c8:	7ffb      	ldrb	r3, [r7, #31]
 800c3ca:	e089      	b.n	800c4e0 <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	699a      	ldr	r2, [r3, #24]
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	69db      	ldr	r3, [r3, #28]
 800c3d4:	3b02      	subs	r3, #2
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d20b      	bcs.n	800c3f2 <remove_chain+0xce>
			fs->free_clst++;
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	795b      	ldrb	r3, [r3, #5]
 800c3e8:	f043 0301 	orr.w	r3, r3, #1
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800c3f2:	6a3b      	ldr	r3, [r7, #32]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d102      	bne.n	800c402 <remove_chain+0xde>
			ecl = nxt;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	623b      	str	r3, [r7, #32]
 800c400:	e017      	b.n	800c432 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	2b04      	cmp	r3, #4
 800c408:	d10f      	bne.n	800c42a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800c40a:	6a3a      	ldr	r2, [r7, #32]
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	1ad3      	subs	r3, r2, r3
 800c410:	1c5a      	adds	r2, r3, #1
 800c412:	2300      	movs	r3, #0
 800c414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c416:	69b8      	ldr	r0, [r7, #24]
 800c418:	f7ff feba 	bl	800c190 <change_bitmap>
 800c41c:	4603      	mov	r3, r0
 800c41e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800c420:	7ffb      	ldrb	r3, [r7, #31]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d001      	beq.n	800c42a <remove_chain+0x106>
 800c426:	7ffb      	ldrb	r3, [r7, #31]
 800c428:	e05a      	b.n	800c4e0 <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	623b      	str	r3, [r7, #32]
 800c42e:	6a3b      	ldr	r3, [r7, #32]
 800c430:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d3a2      	bcc.n	800c386 <remove_chain+0x62>
 800c440:	e000      	b.n	800c444 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800c442:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b04      	cmp	r3, #4
 800c44a:	d148      	bne.n	800c4de <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d103      	bne.n	800c45a <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	71da      	strb	r2, [r3, #7]
 800c458:	e041      	b.n	800c4de <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	79db      	ldrb	r3, [r3, #7]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d129      	bne.n	800c4b6 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800c468:	e017      	b.n	800c49a <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 800c46a:	68b9      	ldr	r1, [r7, #8]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f7ff fbff 	bl	800bc70 <get_fat>
 800c472:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d801      	bhi.n	800c47e <remove_chain+0x15a>
 800c47a:	2302      	movs	r3, #2
 800c47c:	e030      	b.n	800c4e0 <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c484:	d101      	bne.n	800c48a <remove_chain+0x166>
 800c486:	2301      	movs	r3, #1
 800c488:	e02a      	b.n	800c4e0 <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	3301      	adds	r3, #1
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	429a      	cmp	r2, r3
 800c492:	d107      	bne.n	800c4a4 <remove_chain+0x180>
					clst++;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	3301      	adds	r3, #1
 800c498:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d1e3      	bne.n	800c46a <remove_chain+0x146>
 800c4a2:	e000      	b.n	800c4a6 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 800c4a4:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d117      	bne.n	800c4de <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2202      	movs	r2, #2
 800c4b2:	71da      	strb	r2, [r3, #7]
 800c4b4:	e013      	b.n	800c4de <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	79db      	ldrb	r3, [r3, #7]
 800c4ba:	2b03      	cmp	r3, #3
 800c4bc:	d10f      	bne.n	800c4de <remove_chain+0x1ba>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d30a      	bcc.n	800c4de <remove_chain+0x1ba>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	689a      	ldr	r2, [r3, #8]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	699b      	ldr	r3, [r3, #24]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d802      	bhi.n	800c4de <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2202      	movs	r2, #2
 800c4dc:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3728      	adds	r7, #40	@ 0x28
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b088      	sub	sp, #32
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d10d      	bne.n	800c51a <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	695b      	ldr	r3, [r3, #20]
 800c502:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d004      	beq.n	800c514 <create_chain+0x2c>
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	69db      	ldr	r3, [r3, #28]
 800c50e:	69ba      	ldr	r2, [r7, #24]
 800c510:	429a      	cmp	r2, r3
 800c512:	d31b      	bcc.n	800c54c <create_chain+0x64>
 800c514:	2301      	movs	r3, #1
 800c516:	61bb      	str	r3, [r7, #24]
 800c518:	e018      	b.n	800c54c <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f7ff fba7 	bl	800bc70 <get_fat>
 800c522:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d801      	bhi.n	800c52e <create_chain+0x46>
 800c52a:	2301      	movs	r3, #1
 800c52c:	e117      	b.n	800c75e <create_chain+0x276>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c534:	d101      	bne.n	800c53a <create_chain+0x52>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	e111      	b.n	800c75e <create_chain+0x276>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	69db      	ldr	r3, [r3, #28]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	429a      	cmp	r2, r3
 800c542:	d201      	bcs.n	800c548 <create_chain+0x60>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	e10a      	b.n	800c75e <create_chain+0x276>
		scl = clst;							/* Cluster to start to find */
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <create_chain+0x70>
 800c554:	2300      	movs	r3, #0
 800c556:	e102      	b.n	800c75e <create_chain+0x276>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	2b04      	cmp	r3, #4
 800c55e:	d165      	bne.n	800c62c <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800c560:	2201      	movs	r2, #1
 800c562:	69b9      	ldr	r1, [r7, #24]
 800c564:	6938      	ldr	r0, [r7, #16]
 800c566:	f7ff fd97 	bl	800c098 <find_bitmap>
 800c56a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <create_chain+0x92>
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c578:	d101      	bne.n	800c57e <create_chain+0x96>
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	e0ef      	b.n	800c75e <create_chain+0x276>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800c57e:	2301      	movs	r3, #1
 800c580:	2201      	movs	r2, #1
 800c582:	69f9      	ldr	r1, [r7, #28]
 800c584:	6938      	ldr	r0, [r7, #16]
 800c586:	f7ff fe03 	bl	800c190 <change_bitmap>
 800c58a:	4603      	mov	r3, r0
 800c58c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	2b02      	cmp	r3, #2
 800c592:	d101      	bne.n	800c598 <create_chain+0xb0>
 800c594:	2301      	movs	r3, #1
 800c596:	e0e2      	b.n	800c75e <create_chain+0x276>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800c598:	7dfb      	ldrb	r3, [r7, #23]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d102      	bne.n	800c5a4 <create_chain+0xbc>
 800c59e:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a2:	e0dc      	b.n	800c75e <create_chain+0x276>
		if (clst == 0) {							/* Is it a new chain? */
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d103      	bne.n	800c5b2 <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2202      	movs	r2, #2
 800c5ae:	71da      	strb	r2, [r3, #7]
 800c5b0:	e011      	b.n	800c5d6 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	79db      	ldrb	r3, [r3, #7]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d10d      	bne.n	800c5d6 <create_chain+0xee>
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	69fa      	ldr	r2, [r7, #28]
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d008      	beq.n	800c5d6 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	69ba      	ldr	r2, [r7, #24]
 800c5ca:	1ad2      	subs	r2, r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2203      	movs	r2, #3
 800c5d4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	79db      	ldrb	r3, [r3, #7]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	f000 8098 	beq.w	800c710 <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	69fa      	ldr	r2, [r7, #28]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d10b      	bne.n	800c602 <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	69db      	ldr	r3, [r3, #28]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <create_chain+0x112>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	69db      	ldr	r3, [r3, #28]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	e000      	b.n	800c5fc <create_chain+0x114>
 800c5fa:	2302      	movs	r3, #2
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	61d3      	str	r3, [r2, #28]
 800c600:	e086      	b.n	800c710 <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d102      	bne.n	800c610 <create_chain+0x128>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2201      	movs	r2, #1
 800c60e:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800c610:	69fa      	ldr	r2, [r7, #28]
 800c612:	6839      	ldr	r1, [r7, #0]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff fe54 	bl	800c2c2 <fill_last_frag>
 800c61a:	4603      	mov	r3, r0
 800c61c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d175      	bne.n	800c710 <create_chain+0x228>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2201      	movs	r2, #1
 800c628:	61da      	str	r2, [r3, #28]
 800c62a:	e071      	b.n	800c710 <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 800c62c:	2300      	movs	r3, #0
 800c62e:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800c630:	69ba      	ldr	r2, [r7, #24]
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d129      	bne.n	800c68c <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	3301      	adds	r3, #1
 800c63c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	69fa      	ldr	r2, [r7, #28]
 800c644:	429a      	cmp	r2, r3
 800c646:	d301      	bcc.n	800c64c <create_chain+0x164>
 800c648:	2302      	movs	r3, #2
 800c64a:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 800c64c:	69f9      	ldr	r1, [r7, #28]
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff fb0e 	bl	800bc70 <get_fat>
 800c654:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d003      	beq.n	800c664 <create_chain+0x17c>
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c662:	d101      	bne.n	800c668 <create_chain+0x180>
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	e07a      	b.n	800c75e <create_chain+0x276>
			if (cs != 0) {						/* Not free? */
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00e      	beq.n	800c68c <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d906      	bls.n	800c688 <create_chain+0x1a0>
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	69db      	ldr	r3, [r3, #28]
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	429a      	cmp	r2, r3
 800c682:	d201      	bcs.n	800c688 <create_chain+0x1a0>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d129      	bne.n	800c6e6 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	3301      	adds	r3, #1
 800c69a:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	69db      	ldr	r3, [r3, #28]
 800c6a0:	69fa      	ldr	r2, [r7, #28]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d307      	bcc.n	800c6b6 <create_chain+0x1ce>
					ncl = 2;
 800c6a6:	2302      	movs	r3, #2
 800c6a8:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 800c6aa:	69fa      	ldr	r2, [r7, #28]
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d901      	bls.n	800c6b6 <create_chain+0x1ce>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	e053      	b.n	800c75e <create_chain+0x276>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c6b6:	69f9      	ldr	r1, [r7, #28]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f7ff fad9 	bl	800bc70 <get_fat>
 800c6be:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00e      	beq.n	800c6e4 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d003      	beq.n	800c6d4 <create_chain+0x1ec>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d2:	d101      	bne.n	800c6d8 <create_chain+0x1f0>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	e042      	b.n	800c75e <create_chain+0x276>
				if (ncl == scl) return 0;		/* No free cluster found? */
 800c6d8:	69fa      	ldr	r2, [r7, #28]
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d1da      	bne.n	800c696 <create_chain+0x1ae>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	e03c      	b.n	800c75e <create_chain+0x276>
				if (cs == 0) break;				/* Found a free cluster? */
 800c6e4:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800c6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ea:	69f9      	ldr	r1, [r7, #28]
 800c6ec:	6938      	ldr	r0, [r7, #16]
 800c6ee:	f7ff fbe5 	bl	800bebc <put_fat>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d109      	bne.n	800c710 <create_chain+0x228>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d006      	beq.n	800c710 <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800c702:	69fa      	ldr	r2, [r7, #28]
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6938      	ldr	r0, [r7, #16]
 800c708:	f7ff fbd8 	bl	800bebc <put_fat>
 800c70c:	4603      	mov	r3, r0
 800c70e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 800c710:	7dfb      	ldrb	r3, [r7, #23]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d11a      	bne.n	800c74c <create_chain+0x264>
		fs->last_clst = ncl;
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	69fa      	ldr	r2, [r7, #28]
 800c71a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d01b      	beq.n	800c75c <create_chain+0x274>
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	699a      	ldr	r2, [r3, #24]
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	69db      	ldr	r3, [r3, #28]
 800c72c:	3b02      	subs	r3, #2
 800c72e:	429a      	cmp	r2, r3
 800c730:	d814      	bhi.n	800c75c <create_chain+0x274>
			fs->free_clst--;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	1e5a      	subs	r2, r3, #1
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	795b      	ldrb	r3, [r3, #5]
 800c740:	f043 0301 	orr.w	r3, r3, #1
 800c744:	b2da      	uxtb	r2, r3
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	715a      	strb	r2, [r3, #5]
 800c74a:	e007      	b.n	800c75c <create_chain+0x274>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c74c:	7dfb      	ldrb	r3, [r7, #23]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d102      	bne.n	800c758 <create_chain+0x270>
 800c752:	f04f 33ff 	mov.w	r3, #4294967295
 800c756:	e000      	b.n	800c75a <create_chain+0x272>
 800c758:	2301      	movs	r3, #1
 800c75a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c75c:	69fb      	ldr	r3, [r7, #28]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3720      	adds	r7, #32
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b086      	sub	sp, #24
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
 800c76e:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff f90f 	bl	800b994 <sync_window>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <dir_clear+0x1a>
 800c77c:	2301      	movs	r3, #1
 800c77e:	e036      	b.n	800c7ee <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff fa54 	bl	800bc30 <clst2sect>
 800c788:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	639a      	str	r2, [r3, #56]	@ 0x38
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	333c      	adds	r3, #60	@ 0x3c
 800c794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c798:	2100      	movs	r1, #0
 800c79a:	4618      	mov	r0, r3
 800c79c:	f005 fbef 	bl	8011f7e <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	333c      	adds	r3, #60	@ 0x3c
 800c7a4:	60fb      	str	r3, [r7, #12]
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]
 800c7ae:	e003      	b.n	800c7b8 <dir_clear+0x52>
 800c7b0:	697a      	ldr	r2, [r7, #20]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	617b      	str	r3, [r7, #20]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	895b      	ldrh	r3, [r3, #10]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d20b      	bcs.n	800c7dc <dir_clear+0x76>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7858      	ldrb	r0, [r3, #1]
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	441a      	add	r2, r3
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	68f9      	ldr	r1, [r7, #12]
 800c7d2:	f7fe f92e 	bl	800aa32 <disk_write>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0e9      	beq.n	800c7b0 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	895b      	ldrh	r3, [r3, #10]
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	bf14      	ite	ne
 800c7e8:	2301      	movne	r3, #1
 800c7ea:	2300      	moveq	r3, #0
 800c7ec:	b2db      	uxtb	r3, r3
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3718      	adds	r7, #24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b086      	sub	sp, #24
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	6078      	str	r0, [r7, #4]
 800c7fe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	2b04      	cmp	r3, #4
 800c80c:	d102      	bne.n	800c814 <dir_sdi+0x1e>
 800c80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c812:	e001      	b.n	800c818 <dir_sdi+0x22>
 800c814:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d904      	bls.n	800c828 <dir_sdi+0x32>
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	f003 031f 	and.w	r3, r3, #31
 800c824:	2b00      	cmp	r3, #0
 800c826:	d001      	beq.n	800c82c <dir_sdi+0x36>
		return FR_INT_ERR;
 800c828:	2302      	movs	r3, #2
 800c82a:	e066      	b.n	800c8fa <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d109      	bne.n	800c852 <dir_sdi+0x5c>
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b02      	cmp	r3, #2
 800c844:	d905      	bls.n	800c852 <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84a:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10c      	bne.n	800c872 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	095b      	lsrs	r3, r3, #5
 800c85c:	693a      	ldr	r2, [r7, #16]
 800c85e:	8912      	ldrh	r2, [r2, #8]
 800c860:	4293      	cmp	r3, r2
 800c862:	d301      	bcc.n	800c868 <dir_sdi+0x72>
 800c864:	2302      	movs	r3, #2
 800c866:	e048      	b.n	800c8fa <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	639a      	str	r2, [r3, #56]	@ 0x38
 800c870:	e029      	b.n	800c8c6 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	895b      	ldrh	r3, [r3, #10]
 800c876:	025b      	lsls	r3, r3, #9
 800c878:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c87a:	e019      	b.n	800c8b0 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6979      	ldr	r1, [r7, #20]
 800c880:	4618      	mov	r0, r3
 800c882:	f7ff f9f5 	bl	800bc70 <get_fat>
 800c886:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88e:	d101      	bne.n	800c894 <dir_sdi+0x9e>
 800c890:	2301      	movs	r3, #1
 800c892:	e032      	b.n	800c8fa <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d904      	bls.n	800c8a4 <dir_sdi+0xae>
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	69db      	ldr	r3, [r3, #28]
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d301      	bcc.n	800c8a8 <dir_sdi+0xb2>
 800c8a4:	2302      	movs	r3, #2
 800c8a6:	e028      	b.n	800c8fa <dir_sdi+0x104>
			ofs -= csz;
 800c8a8:	683a      	ldr	r2, [r7, #0]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c8b0:	683a      	ldr	r2, [r7, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d2e1      	bcs.n	800c87c <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 800c8b8:	6979      	ldr	r1, [r7, #20]
 800c8ba:	6938      	ldr	r0, [r7, #16]
 800c8bc:	f7ff f9b8 	bl	800bc30 <clst2sect>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	697a      	ldr	r2, [r7, #20]
 800c8ca:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <dir_sdi+0xe2>
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	e010      	b.n	800c8fa <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	0a5b      	lsrs	r3, r3, #9
 800c8e0:	441a      	add	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f2:	441a      	add	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3718      	adds	r7, #24
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b086      	sub	sp, #24
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c916:	3320      	adds	r3, #32
 800c918:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b04      	cmp	r3, #4
 800c920:	d102      	bne.n	800c928 <dir_next+0x26>
 800c922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c926:	e001      	b.n	800c92c <dir_next+0x2a>
 800c928:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d802      	bhi.n	800c938 <dir_next+0x36>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2200      	movs	r2, #0
 800c936:	639a      	str	r2, [r3, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d101      	bne.n	800c944 <dir_next+0x42>
 800c940:	2304      	movs	r3, #4
 800c942:	e07f      	b.n	800ca44 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d16d      	bne.n	800ca2a <dir_next+0x128>
		dp->sect++;				/* Next sector */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c952:	1c5a      	adds	r2, r3, #1
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	639a      	str	r2, [r3, #56]	@ 0x38

		if (dp->clust == 0) {	/* Static table */
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	095b      	lsrs	r3, r3, #5
 800c964:	693a      	ldr	r2, [r7, #16]
 800c966:	8912      	ldrh	r2, [r2, #8]
 800c968:	4293      	cmp	r3, r2
 800c96a:	d35e      	bcc.n	800ca2a <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	639a      	str	r2, [r3, #56]	@ 0x38
 800c972:	2304      	movs	r3, #4
 800c974:	e066      	b.n	800ca44 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	0a5b      	lsrs	r3, r3, #9
 800c97a:	693a      	ldr	r2, [r7, #16]
 800c97c:	8952      	ldrh	r2, [r2, #10]
 800c97e:	3a01      	subs	r2, #1
 800c980:	4013      	ands	r3, r2
 800c982:	2b00      	cmp	r3, #0
 800c984:	d151      	bne.n	800ca2a <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c98c:	4619      	mov	r1, r3
 800c98e:	4610      	mov	r0, r2
 800c990:	f7ff f96e 	bl	800bc70 <get_fat>
 800c994:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d801      	bhi.n	800c9a0 <dir_next+0x9e>
 800c99c:	2302      	movs	r3, #2
 800c99e:	e051      	b.n	800ca44 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a6:	d101      	bne.n	800c9ac <dir_next+0xaa>
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e04b      	b.n	800ca44 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	69db      	ldr	r3, [r3, #28]
 800c9b0:	697a      	ldr	r2, [r7, #20]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d32f      	bcc.n	800ca16 <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d104      	bne.n	800c9c6 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	639a      	str	r2, [r3, #56]	@ 0x38
 800c9c2:	2304      	movs	r3, #4
 800c9c4:	e03e      	b.n	800ca44 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	f7ff fd8a 	bl	800c4e8 <create_chain>
 800c9d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <dir_next+0xde>
 800c9dc:	2307      	movs	r3, #7
 800c9de:	e031      	b.n	800ca44 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d101      	bne.n	800c9ea <dir_next+0xe8>
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	e02c      	b.n	800ca44 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9f0:	d101      	bne.n	800c9f6 <dir_next+0xf4>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e026      	b.n	800ca44 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800c9f6:	6979      	ldr	r1, [r7, #20]
 800c9f8:	6938      	ldr	r0, [r7, #16]
 800c9fa:	f7ff feb4 	bl	800c766 <dir_clear>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <dir_next+0x106>
 800ca04:	2301      	movs	r3, #1
 800ca06:	e01d      	b.n	800ca44 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	79db      	ldrb	r3, [r3, #7]
 800ca0c:	f043 0304 	orr.w	r3, r3, #4
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	697a      	ldr	r2, [r7, #20]
 800ca1a:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 800ca1c:	6979      	ldr	r1, [r7, #20]
 800ca1e:	6938      	ldr	r0, [r7, #16]
 800ca20:	f7ff f906 	bl	800bc30 <clst2sect>
 800ca24:	4602      	mov	r2, r0
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca3c:	441a      	add	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff fec9 	bl	800c7f6 <dir_sdi>
 800ca64:	4603      	mov	r3, r0
 800ca66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca68:	7dfb      	ldrb	r3, [r7, #23]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d140      	bne.n	800caf0 <dir_alloc+0xa4>
		n = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca76:	4619      	mov	r1, r3
 800ca78:	68f8      	ldr	r0, [r7, #12]
 800ca7a:	f7fe ffc7 	bl	800ba0c <move_window>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d132      	bne.n	800caee <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	2b04      	cmp	r3, #4
 800ca8e:	d108      	bne.n	800caa2 <dir_alloc+0x56>
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	b25b      	sxtb	r3, r3
 800ca98:	43db      	mvns	r3, r3
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	09db      	lsrs	r3, r3, #7
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	e00f      	b.n	800cac2 <dir_alloc+0x76>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	2be5      	cmp	r3, #229	@ 0xe5
 800caaa:	d004      	beq.n	800cab6 <dir_alloc+0x6a>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <dir_alloc+0x6e>
 800cab6:	2301      	movs	r3, #1
 800cab8:	e000      	b.n	800cabc <dir_alloc+0x70>
 800caba:	2300      	movs	r3, #0
 800cabc:	f003 0301 	and.w	r3, r3, #1
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d007      	beq.n	800cad6 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	3301      	adds	r3, #1
 800caca:	613b      	str	r3, [r7, #16]
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d102      	bne.n	800cada <dir_alloc+0x8e>
 800cad4:	e00c      	b.n	800caf0 <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800cad6:	2300      	movs	r3, #0
 800cad8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800cada:	2101      	movs	r1, #1
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f7ff ff10 	bl	800c902 <dir_next>
 800cae2:	4603      	mov	r3, r0
 800cae4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d0c2      	beq.n	800ca72 <dir_alloc+0x26>
 800caec:	e000      	b.n	800caf0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800caee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	2b04      	cmp	r3, #4
 800caf4:	d101      	bne.n	800cafa <dir_alloc+0xae>
 800caf6:	2307      	movs	r3, #7
 800caf8:	75fb      	strb	r3, [r7, #23]
	return res;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3718      	adds	r7, #24
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	331a      	adds	r3, #26
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe fc92 	bl	800b43c <ld_word>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d109      	bne.n	800cb38 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	3314      	adds	r3, #20
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7fe fc87 	bl	800b43c <ld_word>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	041b      	lsls	r3, r3, #16
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	4313      	orrs	r3, r2
 800cb36:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cb38:	68fb      	ldr	r3, [r7, #12]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}

0800cb42 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b084      	sub	sp, #16
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	331a      	adds	r3, #26
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	b292      	uxth	r2, r2
 800cb56:	4611      	mov	r1, r2
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fe fd85 	bl	800b668 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	d109      	bne.n	800cb7a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	f103 0214 	add.w	r2, r3, #20
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	0c1b      	lsrs	r3, r3, #16
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	4619      	mov	r1, r3
 800cb74:	4610      	mov	r0, r2
 800cb76:	f7fe fd77 	bl	800b668 <st_word>
	}
}
 800cb7a:	bf00      	nop
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
	...

0800cb84 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN to be compared */
	BYTE* dir				/* Pointer to the LFN entry */
)
{
 800cb84:	b590      	push	{r4, r7, lr}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
	UINT ni, di;
	WCHAR pchr, chr;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	331a      	adds	r3, #26
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fe fc52 	bl	800b43c <ld_word>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d001      	beq.n	800cba2 <cmp_lfn+0x1e>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e059      	b.n	800cc56 <cmp_lfn+0xd2>

	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	461a      	mov	r2, r3
 800cbae:	4613      	mov	r3, r2
 800cbb0:	005b      	lsls	r3, r3, #1
 800cbb2:	4413      	add	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	4413      	add	r3, r2
 800cbb8:	617b      	str	r3, [r7, #20]

	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 800cbba:	2301      	movs	r3, #1
 800cbbc:	81fb      	strh	r3, [r7, #14]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	613b      	str	r3, [r7, #16]
 800cbc2:	e032      	b.n	800cc2a <cmp_lfn+0xa6>
		chr = ld_word(dir + LfnOfs[di]);	/* Pick a character from the entry */
 800cbc4:	4a26      	ldr	r2, [pc, #152]	@ (800cc60 <cmp_lfn+0xdc>)
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	4413      	add	r3, r2
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	461a      	mov	r2, r3
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe fc32 	bl	800b43c <ld_word>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	81bb      	strh	r3, [r7, #12]
		if (pchr != 0) {
 800cbdc:	89fb      	ldrh	r3, [r7, #14]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d019      	beq.n	800cc16 <cmp_lfn+0x92>
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	2bff      	cmp	r3, #255	@ 0xff
 800cbe6:	d811      	bhi.n	800cc0c <cmp_lfn+0x88>
 800cbe8:	89bb      	ldrh	r3, [r7, #12]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f003 fb14 	bl	8010218 <ff_wtoupper>
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	1c5a      	adds	r2, r3, #1
 800cbf6:	617a      	str	r2, [r7, #20]
 800cbf8:	005b      	lsls	r3, r3, #1
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	4413      	add	r3, r2
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f003 fb09 	bl	8010218 <ff_wtoupper>
 800cc06:	4603      	mov	r3, r0
 800cc08:	429c      	cmp	r4, r3
 800cc0a:	d001      	beq.n	800cc10 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e022      	b.n	800cc56 <cmp_lfn+0xd2>
			}
			pchr = chr;
 800cc10:	89bb      	ldrh	r3, [r7, #12]
 800cc12:	81fb      	strh	r3, [r7, #14]
 800cc14:	e006      	b.n	800cc24 <cmp_lfn+0xa0>
		} else {
			if (chr != 0xFFFF) return 0;	/* Check filler */
 800cc16:	89bb      	ldrh	r3, [r7, #12]
 800cc18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d001      	beq.n	800cc24 <cmp_lfn+0xa0>
 800cc20:	2300      	movs	r3, #0
 800cc22:	e018      	b.n	800cc56 <cmp_lfn+0xd2>
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	3301      	adds	r3, #1
 800cc28:	613b      	str	r3, [r7, #16]
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2b0c      	cmp	r3, #12
 800cc2e:	d9c9      	bls.n	800cbc4 <cmp_lfn+0x40>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && pchr && lfnbuf[ni]) return 0;	/* Last name segment matched but different length */
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00b      	beq.n	800cc54 <cmp_lfn+0xd0>
 800cc3c:	89fb      	ldrh	r3, [r7, #14]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d008      	beq.n	800cc54 <cmp_lfn+0xd0>
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	4413      	add	r3, r2
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d001      	beq.n	800cc54 <cmp_lfn+0xd0>
 800cc50:	2300      	movs	r3, #0
 800cc52:	e000      	b.n	800cc56 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cc54:	2301      	movs	r3, #1
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd90      	pop	{r4, r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	0801552c 	.word	0x0801552c

0800cc64 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the name buffer to be stored */
	const BYTE* dir		/* Pointer to the LFN entry */
)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
	UINT ni, di;
	WCHAR pchr, chr;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	331a      	adds	r3, #26
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fe fbe2 	bl	800b43c <ld_word>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d001      	beq.n	800cc82 <pick_lfn+0x1e>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	e051      	b.n	800cd26 <pick_lfn+0xc2>

	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	4613      	mov	r3, r2
 800cc90:	005b      	lsls	r3, r3, #1
 800cc92:	4413      	add	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	617b      	str	r3, [r7, #20]

	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	81fb      	strh	r3, [r7, #14]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	613b      	str	r3, [r7, #16]
 800cca2:	e028      	b.n	800ccf6 <pick_lfn+0x92>
		chr = ld_word(dir + LfnOfs[di]);		/* Pick a character from the entry */
 800cca4:	4a22      	ldr	r2, [pc, #136]	@ (800cd30 <pick_lfn+0xcc>)
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	4413      	add	r3, r2
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	461a      	mov	r2, r3
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe fbc2 	bl	800b43c <ld_word>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	81bb      	strh	r3, [r7, #12]
		if (pchr != 0) {
 800ccbc:	89fb      	ldrh	r3, [r7, #14]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00f      	beq.n	800cce2 <pick_lfn+0x7e>
			if (ni >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2bff      	cmp	r3, #255	@ 0xff
 800ccc6:	d901      	bls.n	800cccc <pick_lfn+0x68>
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e02c      	b.n	800cd26 <pick_lfn+0xc2>
			lfnbuf[ni++] = pchr = chr;			/* Store it */
 800cccc:	89bb      	ldrh	r3, [r7, #12]
 800ccce:	81fb      	strh	r3, [r7, #14]
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	1c5a      	adds	r2, r3, #1
 800ccd4:	617a      	str	r2, [r7, #20]
 800ccd6:	005b      	lsls	r3, r3, #1
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	4413      	add	r3, r2
 800ccdc:	89fa      	ldrh	r2, [r7, #14]
 800ccde:	801a      	strh	r2, [r3, #0]
 800cce0:	e006      	b.n	800ccf0 <pick_lfn+0x8c>
		} else {
			if (chr != 0xFFFF) return 0;		/* Check filler */
 800cce2:	89bb      	ldrh	r3, [r7, #12]
 800cce4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d001      	beq.n	800ccf0 <pick_lfn+0x8c>
 800ccec:	2300      	movs	r3, #0
 800ccee:	e01a      	b.n	800cd26 <pick_lfn+0xc2>
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	613b      	str	r3, [r7, #16]
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	2b0c      	cmp	r3, #12
 800ccfa:	d9d3      	bls.n	800cca4 <pick_lfn+0x40>
		}
	}

	if (dir[LDIR_Ord] & LLEF && pchr != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00d      	beq.n	800cd24 <pick_lfn+0xc0>
 800cd08:	89fb      	ldrh	r3, [r7, #14]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00a      	beq.n	800cd24 <pick_lfn+0xc0>
		if (ni >= FF_MAX_LFN + 1) return 0;		/* Buffer overflow? */
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	2bff      	cmp	r3, #255	@ 0xff
 800cd12:	d901      	bls.n	800cd18 <pick_lfn+0xb4>
 800cd14:	2300      	movs	r3, #0
 800cd16:	e006      	b.n	800cd26 <pick_lfn+0xc2>
		lfnbuf[ni] = 0;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	4413      	add	r3, r2
 800cd20:	2200      	movs	r2, #0
 800cd22:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800cd24:	2301      	movs	r3, #1
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	0801552c 	.word	0x0801552c

0800cd34 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b088      	sub	sp, #32
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	4611      	mov	r1, r2
 800cd40:	461a      	mov	r2, r3
 800cd42:	460b      	mov	r3, r1
 800cd44:	71fb      	strb	r3, [r7, #7]
 800cd46:	4613      	mov	r3, r2
 800cd48:	71bb      	strb	r3, [r7, #6]
	UINT ni, di;
	WCHAR chr;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	330d      	adds	r3, #13
 800cd4e:	79ba      	ldrb	r2, [r7, #6]
 800cd50:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	330b      	adds	r3, #11
 800cd56:	220f      	movs	r2, #15
 800cd58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	330c      	adds	r3, #12
 800cd5e:	2200      	movs	r2, #0
 800cd60:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	331a      	adds	r3, #26
 800cd66:	2100      	movs	r1, #0
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7fe fc7d 	bl	800b668 <st_word>

	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 800cd6e:	79fb      	ldrb	r3, [r7, #7]
 800cd70:	3b01      	subs	r3, #1
 800cd72:	461a      	mov	r2, r3
 800cd74:	4613      	mov	r3, r2
 800cd76:	005b      	lsls	r3, r3, #1
 800cd78:	4413      	add	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	61fb      	str	r3, [r7, #28]
	di = chr = 0;
 800cd80:	2300      	movs	r3, #0
 800cd82:	82fb      	strh	r3, [r7, #22]
 800cd84:	2300      	movs	r3, #0
 800cd86:	61bb      	str	r3, [r7, #24]
	do {	/* Fill the directory entry */
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 800cd88:	8afb      	ldrh	r3, [r7, #22]
 800cd8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d007      	beq.n	800cda2 <put_lfn+0x6e>
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	1c5a      	adds	r2, r3, #1
 800cd96:	61fa      	str	r2, [r7, #28]
 800cd98:	005b      	lsls	r3, r3, #1
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	881b      	ldrh	r3, [r3, #0]
 800cda0:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[di], chr);	/* Set it */
 800cda2:	4a17      	ldr	r2, [pc, #92]	@ (800ce00 <put_lfn+0xcc>)
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	4413      	add	r3, r2
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	4413      	add	r3, r2
 800cdb0:	8afa      	ldrh	r2, [r7, #22]
 800cdb2:	4611      	mov	r1, r2
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fe fc57 	bl	800b668 <st_word>
		if (chr == 0) chr = 0xFFFF;		/* Padding characters after the terminator */
 800cdba:	8afb      	ldrh	r3, [r7, #22]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d102      	bne.n	800cdc6 <put_lfn+0x92>
 800cdc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cdc4:	82fb      	strh	r3, [r7, #22]
	} while (++di < 13);
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	61bb      	str	r3, [r7, #24]
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	2b0c      	cmp	r3, #12
 800cdd0:	d9da      	bls.n	800cd88 <put_lfn+0x54>
	if (chr == 0xFFFF || !lfn[ni]) ord |= LLEF;	/* Last LFN part is the start of an enrty set */
 800cdd2:	8afb      	ldrh	r3, [r7, #22]
 800cdd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d006      	beq.n	800cdea <put_lfn+0xb6>
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	4413      	add	r3, r2
 800cde4:	881b      	ldrh	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d103      	bne.n	800cdf2 <put_lfn+0xbe>
 800cdea:	79fb      	ldrb	r3, [r7, #7]
 800cdec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdf0:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set order in the entry set */
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	79fa      	ldrb	r2, [r7, #7]
 800cdf6:	701a      	strb	r2, [r3, #0]
}
 800cdf8:	bf00      	nop
 800cdfa:	3720      	adds	r7, #32
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	0801552c 	.word	0x0801552c

0800ce04 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b08c      	sub	sp, #48	@ 0x30
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD crc_sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 800ce12:	220b      	movs	r2, #11
 800ce14:	68b9      	ldr	r1, [r7, #8]
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f005 f9b7 	bl	801218a <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	2b05      	cmp	r3, #5
 800ce20:	d92b      	bls.n	800ce7a <gen_numname+0x76>
		crc_sreg = seq;
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 800ce26:	e022      	b.n	800ce6e <gen_numname+0x6a>
			wc = *lfn++;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	1c9a      	adds	r2, r3, #2
 800ce2c:	607a      	str	r2, [r7, #4]
 800ce2e:	881b      	ldrh	r3, [r3, #0]
 800ce30:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ce32:	2300      	movs	r3, #0
 800ce34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce36:	e017      	b.n	800ce68 <gen_numname+0x64>
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	005a      	lsls	r2, r3, #1
 800ce3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	4413      	add	r3, r2
 800ce44:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ce46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ce48:	085b      	lsrs	r3, r3, #1
 800ce4a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (crc_sreg & 0x10000) crc_sreg ^= 0x11021;
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d005      	beq.n	800ce62 <gen_numname+0x5e>
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ce5c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ce60:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ce62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce64:	3301      	adds	r3, #1
 800ce66:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6a:	2b0f      	cmp	r3, #15
 800ce6c:	d9e4      	bls.n	800ce38 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1d8      	bne.n	800ce28 <gen_numname+0x24>
			}
		}
		seq = (UINT)crc_sreg;
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexdecimal) */
	i = 7;
 800ce7a:	2307      	movs	r3, #7
 800ce7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	f003 030f 	and.w	r3, r3, #15
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	3330      	adds	r3, #48	@ 0x30
 800ce8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	091b      	lsrs	r3, r3, #4
 800ce92:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 800ce94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ce98:	2b39      	cmp	r3, #57	@ 0x39
 800ce9a:	d904      	bls.n	800cea6 <gen_numname+0xa2>
 800ce9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cea0:	3307      	adds	r3, #7
 800cea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800cea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea8:	1e5a      	subs	r2, r3, #1
 800ceaa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ceac:	3330      	adds	r3, #48	@ 0x30
 800ceae:	443b      	add	r3, r7
 800ceb0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ceb4:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 800ceb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d002      	beq.n	800cec4 <gen_numname+0xc0>
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1dc      	bne.n	800ce7e <gen_numname+0x7a>
	ns[i] = '~';
 800cec4:	f107 0214 	add.w	r2, r7, #20
 800cec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceca:	4413      	add	r3, r2
 800cecc:	227e      	movs	r2, #126	@ 0x7e
 800cece:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800ced0:	2300      	movs	r3, #0
 800ced2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ced4:	e014      	b.n	800cf00 <gen_numname+0xfc>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceda:	4413      	add	r3, r2
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fe fc91 	bl	800b806 <dbc_1st>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d007      	beq.n	800cefa <gen_numname+0xf6>
			if (j == i - 1) break;
 800ceea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceec:	3b01      	subs	r3, #1
 800ceee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d010      	beq.n	800cf16 <gen_numname+0x112>
			j++;
 800cef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef6:	3301      	adds	r3, #1
 800cef8:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 800cefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cefc:	3301      	adds	r3, #1
 800cefe:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d207      	bcs.n	800cf18 <gen_numname+0x114>
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0c:	4413      	add	r3, r2
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	2b20      	cmp	r3, #32
 800cf12:	d1e0      	bne.n	800ced6 <gen_numname+0xd2>
 800cf14:	e000      	b.n	800cf18 <gen_numname+0x114>
			if (j == i - 1) break;
 800cf16:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1a:	2b07      	cmp	r3, #7
 800cf1c:	d807      	bhi.n	800cf2e <gen_numname+0x12a>
 800cf1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf20:	1c5a      	adds	r2, r3, #1
 800cf22:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cf24:	3330      	adds	r3, #48	@ 0x30
 800cf26:	443b      	add	r3, r7
 800cf28:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cf2c:	e000      	b.n	800cf30 <gen_numname+0x12c>
 800cf2e:	2120      	movs	r1, #32
 800cf30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	627a      	str	r2, [r7, #36]	@ 0x24
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	4413      	add	r3, r2
 800cf3a:	460a      	mov	r2, r1
 800cf3c:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cf3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf40:	2b07      	cmp	r3, #7
 800cf42:	d9e9      	bls.n	800cf18 <gen_numname+0x114>
}
 800cf44:	bf00      	nop
 800cf46:	bf00      	nop
 800cf48:	3730      	adds	r7, #48	@ 0x30
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cf4e:	b480      	push	{r7}
 800cf50:	b085      	sub	sp, #20
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cf5a:	230b      	movs	r3, #11
 800cf5c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	0852      	lsrs	r2, r2, #1
 800cf64:	01db      	lsls	r3, r3, #7
 800cf66:	4313      	orrs	r3, r2
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	1c59      	adds	r1, r3, #1
 800cf6e:	6079      	str	r1, [r7, #4]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	4413      	add	r3, r2
 800cf74:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	60bb      	str	r3, [r7, #8]
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1ed      	bne.n	800cf5e <sum_sfn+0x10>
	return sum;
 800cf82:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b087      	sub	sp, #28
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	015b      	lsls	r3, r3, #5
 800cfa2:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	827b      	strh	r3, [r7, #18]
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	617b      	str	r3, [r7, #20]
 800cfac:	e017      	b.n	800cfde <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d103      	bne.n	800cfbc <xdir_sum+0x2c>
			i++;
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	3301      	adds	r3, #1
 800cfb8:	617b      	str	r3, [r7, #20]
 800cfba:	e00d      	b.n	800cfd8 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800cfbc:	8a7b      	ldrh	r3, [r7, #18]
 800cfbe:	03db      	lsls	r3, r3, #15
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	8a7b      	ldrh	r3, [r7, #18]
 800cfc4:	085b      	lsrs	r3, r3, #1
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	4413      	add	r3, r2
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	6879      	ldr	r1, [r7, #4]
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	440a      	add	r2, r1
 800cfd2:	7812      	ldrb	r2, [r2, #0]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	697a      	ldr	r2, [r7, #20]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d3e3      	bcc.n	800cfae <xdir_sum+0x1e>
		}
	}
	return sum;
 800cfe6:	8a7b      	ldrh	r3, [r7, #18]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	371c      	adds	r7, #28
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b084      	sub	sp, #16
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800cffc:	2300      	movs	r3, #0
 800cffe:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800d000:	e01f      	b.n	800d042 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 800d002:	89bb      	ldrh	r3, [r7, #12]
 800d004:	4618      	mov	r0, r3
 800d006:	f003 f907 	bl	8010218 <ff_wtoupper>
 800d00a:	4603      	mov	r3, r0
 800d00c:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800d00e:	89fb      	ldrh	r3, [r7, #14]
 800d010:	03db      	lsls	r3, r3, #15
 800d012:	b29a      	uxth	r2, r3
 800d014:	89fb      	ldrh	r3, [r7, #14]
 800d016:	085b      	lsrs	r3, r3, #1
 800d018:	b29b      	uxth	r3, r3
 800d01a:	4413      	add	r3, r2
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	89bb      	ldrh	r3, [r7, #12]
 800d020:	b2db      	uxtb	r3, r3
 800d022:	b29b      	uxth	r3, r3
 800d024:	4413      	add	r3, r2
 800d026:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800d028:	89fb      	ldrh	r3, [r7, #14]
 800d02a:	03db      	lsls	r3, r3, #15
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	89fb      	ldrh	r3, [r7, #14]
 800d030:	085b      	lsrs	r3, r3, #1
 800d032:	b29b      	uxth	r3, r3
 800d034:	4413      	add	r3, r2
 800d036:	b29a      	uxth	r2, r3
 800d038:	89bb      	ldrh	r3, [r7, #12]
 800d03a:	0a1b      	lsrs	r3, r3, #8
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	4413      	add	r3, r2
 800d040:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	1c9a      	adds	r2, r3, #2
 800d046:	607a      	str	r2, [r7, #4]
 800d048:	881b      	ldrh	r3, [r3, #0]
 800d04a:	81bb      	strh	r3, [r7, #12]
 800d04c:	89bb      	ldrh	r3, [r7, #12]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1d7      	bne.n	800d002 <xname_sum+0xe>
	}
	return sum;
 800d052:	89fb      	ldrh	r3, [r7, #14]
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}

0800d05c <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 800d05c:	b590      	push	{r4, r7, lr}
 800d05e:	b087      	sub	sp, #28
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d074:	4619      	mov	r1, r3
 800d076:	4610      	mov	r0, r2
 800d078:	f7fe fcc8 	bl	800ba0c <move_window>
 800d07c:	4603      	mov	r3, r0
 800d07e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d080:	7dfb      	ldrb	r3, [r7, #23]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d001      	beq.n	800d08a <load_xdir+0x2e>
 800d086:	7dfb      	ldrb	r3, [r7, #23]
 800d088:	e0a9      	b.n	800d1de <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order? */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	2b85      	cmp	r3, #133	@ 0x85
 800d092:	d001      	beq.n	800d098 <load_xdir+0x3c>
 800d094:	2302      	movs	r3, #2
 800d096:	e0a2      	b.n	800d1de <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d09c:	2220      	movs	r2, #32
 800d09e:	4619      	mov	r1, r3
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f005 f872 	bl	801218a <memcpy>
	sz_ent = ((UINT)dirb[XDIR_NumSec] + 1) * SZDIRE;	/* Size of this entry block */
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	015b      	lsls	r3, r3, #5
 800d0b0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;	/* Invalid block size? */
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2b5f      	cmp	r3, #95	@ 0x5f
 800d0b6:	d903      	bls.n	800d0c0 <load_xdir+0x64>
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800d0be:	d901      	bls.n	800d0c4 <load_xdir+0x68>
 800d0c0:	2302      	movs	r3, #2
 800d0c2:	e08c      	b.n	800d1de <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7ff fc1b 	bl	800c902 <dir_next>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	2b04      	cmp	r3, #4
 800d0d4:	d101      	bne.n	800d0da <load_xdir+0x7e>
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d001      	beq.n	800d0e4 <load_xdir+0x88>
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	e07c      	b.n	800d1de <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	4610      	mov	r0, r2
 800d0f0:	f7fe fc8c 	bl	800ba0c <move_window>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d0f8:	7dfb      	ldrb	r3, [r7, #23]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <load_xdir+0xa6>
 800d0fe:	7dfb      	ldrb	r3, [r7, #23]
 800d100:	e06d      	b.n	800d1de <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order? */
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2bc0      	cmp	r3, #192	@ 0xc0
 800d10a:	d001      	beq.n	800d110 <load_xdir+0xb4>
 800d10c:	2302      	movs	r3, #2
 800d10e:	e066      	b.n	800d1de <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f103 0020 	add.w	r0, r3, #32
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d11a:	2220      	movs	r2, #32
 800d11c:	4619      	mov	r1, r3
 800d11e:	f005 f834 	bl	801218a <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;	/* Invalid block size for the name? */
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3323      	adds	r3, #35	@ 0x23
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	332c      	adds	r3, #44	@ 0x2c
 800d12a:	4a2f      	ldr	r2, [pc, #188]	@ (800d1e8 <load_xdir+0x18c>)
 800d12c:	fba2 2303 	umull	r2, r3, r2, r3
 800d130:	08db      	lsrs	r3, r3, #3
 800d132:	015b      	lsls	r3, r3, #5
 800d134:	68ba      	ldr	r2, [r7, #8]
 800d136:	429a      	cmp	r2, r3
 800d138:	d201      	bcs.n	800d13e <load_xdir+0xe2>
 800d13a:	2302      	movs	r3, #2
 800d13c:	e04f      	b.n	800d1de <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 800d13e:	2340      	movs	r3, #64	@ 0x40
 800d140:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 800d142:	2100      	movs	r1, #0
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff fbdc 	bl	800c902 <dir_next>
 800d14a:	4603      	mov	r3, r0
 800d14c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800d14e:	7dfb      	ldrb	r3, [r7, #23]
 800d150:	2b04      	cmp	r3, #4
 800d152:	d101      	bne.n	800d158 <load_xdir+0xfc>
 800d154:	2302      	movs	r3, #2
 800d156:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d158:	7dfb      	ldrb	r3, [r7, #23]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <load_xdir+0x106>
 800d15e:	7dfb      	ldrb	r3, [r7, #23]
 800d160:	e03d      	b.n	800d1de <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d16a:	4619      	mov	r1, r3
 800d16c:	4610      	mov	r0, r2
 800d16e:	f7fe fc4d 	bl	800ba0c <move_window>
 800d172:	4603      	mov	r3, r0
 800d174:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d176:	7dfb      	ldrb	r3, [r7, #23]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d001      	beq.n	800d180 <load_xdir+0x124>
 800d17c:	7dfb      	ldrb	r3, [r7, #23]
 800d17e:	e02e      	b.n	800d1de <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order? */
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	2bc1      	cmp	r3, #193	@ 0xc1
 800d188:	d001      	beq.n	800d18e <load_xdir+0x132>
 800d18a:	2302      	movs	r3, #2
 800d18c:	e027      	b.n	800d1de <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);	/* Load name entries only if the object is accessible */
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800d194:	d208      	bcs.n	800d1a8 <load_xdir+0x14c>
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	18d0      	adds	r0, r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1a0:	2220      	movs	r2, #32
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	f004 fff1 	bl	801218a <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	3320      	adds	r3, #32
 800d1ac:	613b      	str	r3, [r7, #16]
 800d1ae:	693a      	ldr	r2, [r7, #16]
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d3c5      	bcc.n	800d142 <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800d1bc:	d80e      	bhi.n	800d1dc <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f7ff fee6 	bl	800cf90 <xdir_sum>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	461c      	mov	r4, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3302      	adds	r3, #2
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fe f935 	bl	800b43c <ld_word>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	429c      	cmp	r4, r3
 800d1d6:	d001      	beq.n	800d1dc <load_xdir+0x180>
 800d1d8:	2302      	movs	r3, #2
 800d1da:	e000      	b.n	800d1de <load_xdir+0x182>
	}

	return FR_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	371c      	adds	r7, #28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd90      	pop	{r4, r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	88888889 	.word	0x88888889

0800d1ec <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	3334      	adds	r3, #52	@ 0x34
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fe f935 	bl	800b46c <ld_dword>
 800d202:	4602      	mov	r2, r0
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	3338      	adds	r3, #56	@ 0x38
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe f94f 	bl	800b4b2 <ld_qword>
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	691b      	ldr	r3, [r3, #16]
 800d222:	3321      	adds	r3, #33	@ 0x21
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	f003 0302 	and.w	r3, r3, #2
 800d22a:	b2da      	uxtb	r2, r3
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	2200      	movs	r2, #0
 800d234:	61da      	str	r2, [r3, #28]
}
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 800d23e:	b5b0      	push	{r4, r5, r7, lr}
 800d240:	b084      	sub	sp, #16
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
 800d246:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6808      	ldr	r0, [r1, #0]
 800d24c:	6879      	ldr	r1, [r7, #4]
 800d24e:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800d250:	6839      	ldr	r1, [r7, #0]
 800d252:	6a08      	ldr	r0, [r1, #32]
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800d25c:	b2c8      	uxtb	r0, r1
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800d262:	6839      	ldr	r1, [r7, #0]
 800d264:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800d266:	2000      	movs	r0, #0
 800d268:	460c      	mov	r4, r1
 800d26a:	4605      	mov	r5, r0
 800d26c:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800d270:	2300      	movs	r3, #0
 800d272:	6879      	ldr	r1, [r7, #4]
 800d274:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7ff fab2 	bl	800c7f6 <dir_sdi>
 800d292:	4603      	mov	r3, r0
 800d294:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d296:	7bfb      	ldrb	r3, [r7, #15]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d104      	bne.n	800d2a6 <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7ff fedd 	bl	800d05c <load_xdir>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800d2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bdb0      	pop	{r4, r5, r7, pc}

0800d2b0 <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 800d2b0:	b590      	push	{r4, r7, lr}
 800d2b2:	b087      	sub	sp, #28
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	60fb      	str	r3, [r7, #12]


	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));	/* Create check sum */
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	1c9c      	adds	r4, r3, #2
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	f7ff fe63 	bl	800cf90 <xdir_sum>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f7fe f9ca 	bl	800b668 <st_word>

	/* Store the entry set to the directory */
	nent = dirb[XDIR_NumSec] + 1;	/* Number of entries */
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	613b      	str	r3, [r7, #16]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff fa86 	bl	800c7f6 <dir_sdi>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800d2ee:	e026      	b.n	800d33e <store_xdir+0x8e>
		/* Set an entry to the directory */
		res = move_window(dp->obj.fs, dp->sect);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	4610      	mov	r0, r2
 800d2fc:	f7fe fb86 	bl	800ba0c <move_window>
 800d300:	4603      	mov	r3, r0
 800d302:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d304:	7dfb      	ldrb	r3, [r7, #23]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d11d      	bne.n	800d346 <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d30e:	2220      	movs	r2, #32
 800d310:	68f9      	ldr	r1, [r7, #12]
 800d312:	4618      	mov	r0, r3
 800d314:	f004 ff39 	bl	801218a <memcpy>
		dp->obj.fs->wflag = 1;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2201      	movs	r2, #1
 800d31e:	711a      	strb	r2, [r3, #4]

		if (--nent == 0) break;	/* All done? */
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	3b01      	subs	r3, #1
 800d324:	613b      	str	r3, [r7, #16]
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00e      	beq.n	800d34a <store_xdir+0x9a>
		dirb += SZDIRE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	3320      	adds	r3, #32
 800d330:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);	/* Next entry */
 800d332:	2100      	movs	r1, #0
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff fae4 	bl	800c902 <dir_next>
 800d33a:	4603      	mov	r3, r0
 800d33c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800d33e:	7dfb      	ldrb	r3, [r7, #23]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d0d5      	beq.n	800d2f0 <store_xdir+0x40>
 800d344:	e002      	b.n	800d34c <store_xdir+0x9c>
		if (res != FR_OK) break;
 800d346:	bf00      	nop
 800d348:	e000      	b.n	800d34c <store_xdir+0x9c>
		if (--nent == 0) break;	/* All done? */
 800d34a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d002      	beq.n	800d358 <store_xdir+0xa8>
 800d352:	7dfb      	ldrb	r3, [r7, #23]
 800d354:	2b01      	cmp	r3, #1
 800d356:	d101      	bne.n	800d35c <store_xdir+0xac>
 800d358:	7dfb      	ldrb	r3, [r7, #23]
 800d35a:	e000      	b.n	800d35e <store_xdir+0xae>
 800d35c:	2302      	movs	r3, #2
}
 800d35e:	4618      	mov	r0, r3
 800d360:	371c      	adds	r7, #28
 800d362:	46bd      	mov	sp, r7
 800d364:	bd90      	pop	{r4, r7, pc}

0800d366 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 800d366:	b590      	push	{r4, r7, lr}
 800d368:	b085      	sub	sp, #20
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	6039      	str	r1, [r7, #0]
	BYTE n_c1, nlen;
	WCHAR chr;


	/* Create file-directory and stream-extension entry (1st and 2nd entry) */
	memset(dirb, 0, 2 * SZDIRE);
 800d370:	2240      	movs	r2, #64	@ 0x40
 800d372:	2100      	movs	r1, #0
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f004 fe02 	bl	8011f7e <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2285      	movs	r2, #133	@ 0x85
 800d37e:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	3320      	adds	r3, #32
 800d384:	22c0      	movs	r2, #192	@ 0xc0
 800d386:	701a      	strb	r2, [r3, #0]

	/* Create file name entries (3rd enrty and follows) */
	i = SZDIRE * 2;	/* Top of file name entries */
 800d388:	2340      	movs	r3, #64	@ 0x40
 800d38a:	60fb      	str	r3, [r7, #12]
	nlen = n_c1 = 0; chr = 1;
 800d38c:	2300      	movs	r3, #0
 800d38e:	72fb      	strb	r3, [r7, #11]
 800d390:	7afb      	ldrb	r3, [r7, #11]
 800d392:	72bb      	strb	r3, [r7, #10]
 800d394:	2301      	movs	r3, #1
 800d396:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	1c5a      	adds	r2, r3, #1
 800d39c:	60fa      	str	r2, [r7, #12]
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	22c1      	movs	r2, #193	@ 0xc1
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	60fa      	str	r2, [r7, #12]
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	4413      	add	r3, r2
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr != 0 && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800d3b4:	893b      	ldrh	r3, [r7, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00b      	beq.n	800d3d2 <create_xdir+0x6c>
 800d3ba:	7abb      	ldrb	r3, [r7, #10]
 800d3bc:	005b      	lsls	r3, r3, #1
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	813b      	strh	r3, [r7, #8]
 800d3c6:	893b      	ldrh	r3, [r7, #8]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d002      	beq.n	800d3d2 <create_xdir+0x6c>
 800d3cc:	7abb      	ldrb	r3, [r7, #10]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 	/* Store it */
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	893a      	ldrh	r2, [r7, #8]
 800d3da:	4611      	mov	r1, r2
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fe f943 	bl	800b668 <st_word>
			i += 2;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	3302      	adds	r3, #2
 800d3e6:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f003 031f 	and.w	r3, r3, #31
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1e0      	bne.n	800d3b4 <create_xdir+0x4e>
		n_c1++;
 800d3f2:	7afb      	ldrb	r3, [r7, #11]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next C1 entry if any char follows */
 800d3f8:	7abb      	ldrb	r3, [r7, #10]
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	683a      	ldr	r2, [r7, #0]
 800d3fe:	4413      	add	r3, r2
 800d400:	881b      	ldrh	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1c8      	bne.n	800d398 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3323      	adds	r3, #35	@ 0x23
 800d40a:	7aba      	ldrb	r2, [r7, #10]
 800d40c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	3301      	adds	r3, #1
 800d412:	7afa      	ldrb	r2, [r7, #11]
 800d414:	3201      	adds	r2, #1
 800d416:	b2d2      	uxtb	r2, r2
 800d418:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800d420:	6838      	ldr	r0, [r7, #0]
 800d422:	f7ff fde7 	bl	800cff4 <xname_sum>
 800d426:	4603      	mov	r3, r0
 800d428:	4619      	mov	r1, r3
 800d42a:	4620      	mov	r0, r4
 800d42c:	f7fe f91c 	bl	800b668 <st_word>
}
 800d430:	bf00      	nop
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	bd90      	pop	{r4, r7, pc}

0800d438 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b086      	sub	sp, #24
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d442:	2304      	movs	r3, #4
 800d444:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 800d44c:	23ff      	movs	r3, #255	@ 0xff
 800d44e:	757b      	strb	r3, [r7, #21]
 800d450:	23ff      	movs	r3, #255	@ 0xff
 800d452:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d454:	e09f      	b.n	800d596 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d45a:	4619      	mov	r1, r3
 800d45c:	6938      	ldr	r0, [r7, #16]
 800d45e:	f7fe fad5 	bl	800ba0c <move_window>
 800d462:	4603      	mov	r3, r0
 800d464:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d466:	7dfb      	ldrb	r3, [r7, #23]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f040 809a 	bne.w	800d5a2 <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 800d476:	7dbb      	ldrb	r3, [r7, #22]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d102      	bne.n	800d482 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d47c:	2304      	movs	r3, #4
 800d47e:	75fb      	strb	r3, [r7, #23]
 800d480:	e096      	b.n	800d5b0 <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	2b04      	cmp	r3, #4
 800d488:	d118      	bne.n	800d4bc <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 800d48a:	7dbb      	ldrb	r3, [r7, #22]
 800d48c:	2b85      	cmp	r3, #133	@ 0x85
 800d48e:	d179      	bne.n	800d584 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff fddf 	bl	800d05c <load_xdir>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d17e      	bne.n	800d5a6 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	3304      	adds	r3, #4
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	719a      	strb	r2, [r3, #6]
					}
					break;
 800d4ba:	e074      	b.n	800d5a6 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4c0:	330b      	adds	r3, #11
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d4c8:	73fb      	strb	r3, [r7, #15]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7bfa      	ldrb	r2, [r7, #15]
 800d4ce:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d4d0:	7dbb      	ldrb	r3, [r7, #22]
 800d4d2:	2be5      	cmp	r3, #229	@ 0xe5
 800d4d4:	d00e      	beq.n	800d4f4 <dir_read+0xbc>
 800d4d6:	7dbb      	ldrb	r3, [r7, #22]
 800d4d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4da:	d00b      	beq.n	800d4f4 <dir_read+0xbc>
 800d4dc:	7bfb      	ldrb	r3, [r7, #15]
 800d4de:	f023 0320 	bic.w	r3, r3, #32
 800d4e2:	2b08      	cmp	r3, #8
 800d4e4:	bf0c      	ite	eq
 800d4e6:	2301      	moveq	r3, #1
 800d4e8:	2300      	movne	r3, #0
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d002      	beq.n	800d4fa <dir_read+0xc2>
				ord = 0xFF;
 800d4f4:	23ff      	movs	r3, #255	@ 0xff
 800d4f6:	757b      	strb	r3, [r7, #21]
 800d4f8:	e044      	b.n	800d584 <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
 800d4fc:	2b0f      	cmp	r3, #15
 800d4fe:	d12f      	bne.n	800d560 <dir_read+0x128>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 800d500:	7dbb      	ldrb	r3, [r7, #22]
 800d502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00d      	beq.n	800d526 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d50e:	7b5b      	ldrb	r3, [r3, #13]
 800d510:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 800d512:	7dbb      	ldrb	r3, [r7, #22]
 800d514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d518:	75bb      	strb	r3, [r7, #22]
 800d51a:	7dbb      	ldrb	r3, [r7, #22]
 800d51c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d526:	7dba      	ldrb	r2, [r7, #22]
 800d528:	7d7b      	ldrb	r3, [r7, #21]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d115      	bne.n	800d55a <dir_read+0x122>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d532:	330d      	adds	r3, #13
 800d534:	781b      	ldrb	r3, [r3, #0]
 800d536:	7d3a      	ldrb	r2, [r7, #20]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d10e      	bne.n	800d55a <dir_read+0x122>
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	68da      	ldr	r2, [r3, #12]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d544:	4619      	mov	r1, r3
 800d546:	4610      	mov	r0, r2
 800d548:	f7ff fb8c 	bl	800cc64 <pick_lfn>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <dir_read+0x122>
 800d552:	7d7b      	ldrb	r3, [r7, #21]
 800d554:	3b01      	subs	r3, #1
 800d556:	b2db      	uxtb	r3, r3
 800d558:	e000      	b.n	800d55c <dir_read+0x124>
 800d55a:	23ff      	movs	r3, #255	@ 0xff
 800d55c:	757b      	strb	r3, [r7, #21]
 800d55e:	e011      	b.n	800d584 <dir_read+0x14c>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d560:	7d7b      	ldrb	r3, [r7, #21]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d109      	bne.n	800d57a <dir_read+0x142>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7ff fcef 	bl	800cf4e <sum_sfn>
 800d570:	4603      	mov	r3, r0
 800d572:	461a      	mov	r2, r3
 800d574:	7d3b      	ldrb	r3, [r7, #20]
 800d576:	4293      	cmp	r3, r2
 800d578:	d017      	beq.n	800d5aa <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f04f 32ff 	mov.w	r2, #4294967295
 800d580:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800d582:	e012      	b.n	800d5aa <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d584:	2100      	movs	r1, #0
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7ff f9bb 	bl	800c902 <dir_next>
 800d58c:	4603      	mov	r3, r0
 800d58e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d590:	7dfb      	ldrb	r3, [r7, #23]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10b      	bne.n	800d5ae <dir_read+0x176>
	while (dp->sect) {
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f47f af5b 	bne.w	800d456 <dir_read+0x1e>
 800d5a0:	e006      	b.n	800d5b0 <dir_read+0x178>
		if (res != FR_OK) break;
 800d5a2:	bf00      	nop
 800d5a4:	e004      	b.n	800d5b0 <dir_read+0x178>
					break;
 800d5a6:	bf00      	nop
 800d5a8:	e002      	b.n	800d5b0 <dir_read+0x178>
					break;
 800d5aa:	bf00      	nop
 800d5ac:	e000      	b.n	800d5b0 <dir_read+0x178>
		if (res != FR_OK) break;
 800d5ae:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d5b0:	7dfb      	ldrb	r3, [r7, #23]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d002      	beq.n	800d5bc <dir_read+0x184>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800d5bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3718      	adds	r7, #24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800d5c6:	b590      	push	{r4, r7, lr}
 800d5c8:	b089      	sub	sp, #36	@ 0x24
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d5d4:	2100      	movs	r1, #0
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7ff f90d 	bl	800c7f6 <dir_sdi>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800d5e0:	7ffb      	ldrb	r3, [r7, #31]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d001      	beq.n	800d5ea <dir_find+0x24>
 800d5e6:	7ffb      	ldrb	r3, [r7, #31]
 800d5e8:	e112      	b.n	800d810 <dir_find+0x24a>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	2b04      	cmp	r3, #4
 800d5f0:	d164      	bne.n	800d6bc <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7ff fcfc 	bl	800cff4 <xname_sum>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800d600:	e04f      	b.n	800d6a2 <dir_find+0xdc>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	3324      	adds	r3, #36	@ 0x24
 800d608:	4618      	mov	r0, r3
 800d60a:	f7fd ff17 	bl	800b43c <ld_word>
 800d60e:	4603      	mov	r3, r0
 800d610:	461a      	mov	r2, r3
 800d612:	893b      	ldrh	r3, [r7, #8]
 800d614:	4293      	cmp	r3, r2
 800d616:	d143      	bne.n	800d6a0 <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d620:	76fb      	strb	r3, [r7, #27]
 800d622:	2340      	movs	r3, #64	@ 0x40
 800d624:	617b      	str	r3, [r7, #20]
 800d626:	2300      	movs	r3, #0
 800d628:	613b      	str	r3, [r7, #16]
 800d62a:	e028      	b.n	800d67e <dir_find+0xb8>
				if ((di % SZDIRE) == 0) di += 2;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	f003 031f 	and.w	r3, r3, #31
 800d632:	2b00      	cmp	r3, #0
 800d634:	d102      	bne.n	800d63c <dir_find+0x76>
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	3302      	adds	r3, #2
 800d63a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	691a      	ldr	r2, [r3, #16]
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	4413      	add	r3, r2
 800d644:	4618      	mov	r0, r3
 800d646:	f7fd fef9 	bl	800b43c <ld_word>
 800d64a:	4603      	mov	r3, r0
 800d64c:	4618      	mov	r0, r3
 800d64e:	f002 fde3 	bl	8010218 <ff_wtoupper>
 800d652:	4604      	mov	r4, r0
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	68da      	ldr	r2, [r3, #12]
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	4413      	add	r3, r2
 800d65e:	881b      	ldrh	r3, [r3, #0]
 800d660:	4618      	mov	r0, r3
 800d662:	f002 fdd9 	bl	8010218 <ff_wtoupper>
 800d666:	4603      	mov	r3, r0
 800d668:	429c      	cmp	r4, r3
 800d66a:	d10c      	bne.n	800d686 <dir_find+0xc0>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d66c:	7efb      	ldrb	r3, [r7, #27]
 800d66e:	3b01      	subs	r3, #1
 800d670:	76fb      	strb	r3, [r7, #27]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	3302      	adds	r3, #2
 800d676:	617b      	str	r3, [r7, #20]
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	3301      	adds	r3, #1
 800d67c:	613b      	str	r3, [r7, #16]
 800d67e:	7efb      	ldrb	r3, [r7, #27]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d1d3      	bne.n	800d62c <dir_find+0x66>
 800d684:	e000      	b.n	800d688 <dir_find+0xc2>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d686:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d688:	7efb      	ldrb	r3, [r7, #27]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d109      	bne.n	800d6a2 <dir_find+0xdc>
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	68da      	ldr	r2, [r3, #12]
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	005b      	lsls	r3, r3, #1
 800d696:	4413      	add	r3, r2
 800d698:	881b      	ldrh	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00b      	beq.n	800d6b6 <dir_find+0xf0>
 800d69e:	e000      	b.n	800d6a2 <dir_find+0xdc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d6a0:	bf00      	nop
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7ff fec7 	bl	800d438 <dir_read>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	77fb      	strb	r3, [r7, #31]
 800d6ae:	7ffb      	ldrb	r3, [r7, #31]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d0a6      	beq.n	800d602 <dir_find+0x3c>
 800d6b4:	e000      	b.n	800d6b8 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d6b6:	bf00      	nop
		}
		return res;
 800d6b8:	7ffb      	ldrb	r3, [r7, #31]
 800d6ba:	e0a9      	b.n	800d810 <dir_find+0x24a>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d6bc:	23ff      	movs	r3, #255	@ 0xff
 800d6be:	773b      	strb	r3, [r7, #28]
 800d6c0:	7f3b      	ldrb	r3, [r7, #28]
 800d6c2:	777b      	strb	r3, [r7, #29]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ca:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	68f8      	ldr	r0, [r7, #12]
 800d6d4:	f7fe f99a 	bl	800ba0c <move_window>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800d6dc:	7ffb      	ldrb	r3, [r7, #31]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f040 8090 	bne.w	800d804 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 800d6ec:	7fbb      	ldrb	r3, [r7, #30]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d102      	bne.n	800d6f8 <dir_find+0x132>
 800d6f2:	2304      	movs	r3, #4
 800d6f4:	77fb      	strb	r3, [r7, #31]
 800d6f6:	e08a      	b.n	800d80e <dir_find+0x248>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6fc:	330b      	adds	r3, #11
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d704:	72fb      	strb	r3, [r7, #11]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	7afa      	ldrb	r2, [r7, #11]
 800d70a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d70c:	7fbb      	ldrb	r3, [r7, #30]
 800d70e:	2be5      	cmp	r3, #229	@ 0xe5
 800d710:	d007      	beq.n	800d722 <dir_find+0x15c>
 800d712:	7afb      	ldrb	r3, [r7, #11]
 800d714:	f003 0308 	and.w	r3, r3, #8
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d009      	beq.n	800d730 <dir_find+0x16a>
 800d71c:	7afb      	ldrb	r3, [r7, #11]
 800d71e:	2b0f      	cmp	r3, #15
 800d720:	d006      	beq.n	800d730 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d722:	23ff      	movs	r3, #255	@ 0xff
 800d724:	777b      	strb	r3, [r7, #29]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f04f 32ff 	mov.w	r2, #4294967295
 800d72c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d72e:	e05e      	b.n	800d7ee <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* Is it an LFN entry? */
 800d730:	7afb      	ldrb	r3, [r7, #11]
 800d732:	2b0f      	cmp	r3, #15
 800d734:	d136      	bne.n	800d7a4 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d740:	2b00      	cmp	r3, #0
 800d742:	d154      	bne.n	800d7ee <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of an entry set? */
 800d744:	7fbb      	ldrb	r3, [r7, #30]
 800d746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00d      	beq.n	800d76a <dir_find+0x1a4>
						c &= (BYTE)~LLEF;
 800d74e:	7fbb      	ldrb	r3, [r7, #30]
 800d750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d754:	77bb      	strb	r3, [r7, #30]
						ord = c;					/* Number of LFN entries */
 800d756:	7fbb      	ldrb	r3, [r7, #30]
 800d758:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	64da      	str	r2, [r3, #76]	@ 0x4c
						sum = dp->dir[LDIR_Chksum];	/* Sum of the SFN */
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d766:	7b5b      	ldrb	r3, [r3, #13]
 800d768:	773b      	strb	r3, [r7, #28]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d76a:	7fba      	ldrb	r2, [r7, #30]
 800d76c:	7f7b      	ldrb	r3, [r7, #29]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d115      	bne.n	800d79e <dir_find+0x1d8>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d776:	330d      	adds	r3, #13
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	7f3a      	ldrb	r2, [r7, #28]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d10e      	bne.n	800d79e <dir_find+0x1d8>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	68da      	ldr	r2, [r3, #12]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d788:	4619      	mov	r1, r3
 800d78a:	4610      	mov	r0, r2
 800d78c:	f7ff f9fa 	bl	800cb84 <cmp_lfn>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d003      	beq.n	800d79e <dir_find+0x1d8>
 800d796:	7f7b      	ldrb	r3, [r7, #29]
 800d798:	3b01      	subs	r3, #1
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	e000      	b.n	800d7a0 <dir_find+0x1da>
 800d79e:	23ff      	movs	r3, #255	@ 0xff
 800d7a0:	777b      	strb	r3, [r7, #29]
 800d7a2:	e024      	b.n	800d7ee <dir_find+0x228>
				}
			} else {					/* SFN entry */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d7a4:	7f7b      	ldrb	r3, [r7, #29]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d109      	bne.n	800d7be <dir_find+0x1f8>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff fbcd 	bl	800cf4e <sum_sfn>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	7f3b      	ldrb	r3, [r7, #28]
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d024      	beq.n	800d808 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10a      	bne.n	800d7e2 <dir_find+0x21c>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	3340      	adds	r3, #64	@ 0x40
 800d7d4:	220b      	movs	r2, #11
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f004 fba7 	bl	8011f2a <memcmp>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d014      	beq.n	800d80c <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Not matched, reset LFN sequence */
 800d7e2:	23ff      	movs	r3, #255	@ 0xff
 800d7e4:	777b      	strb	r3, [r7, #29]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7ff f886 	bl	800c902 <dir_next>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800d7fa:	7ffb      	ldrb	r3, [r7, #31]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f43f af65 	beq.w	800d6cc <dir_find+0x106>
 800d802:	e004      	b.n	800d80e <dir_find+0x248>
		if (res != FR_OK) break;
 800d804:	bf00      	nop
 800d806:	e002      	b.n	800d80e <dir_find+0x248>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d808:	bf00      	nop
 800d80a:	e000      	b.n	800d80e <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d80c:	bf00      	nop

	return res;
 800d80e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3724      	adds	r7, #36	@ 0x24
 800d814:	46bd      	mov	sp, r7
 800d816:	bd90      	pop	{r4, r7, pc}

0800d818 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800d818:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d81c:	b0a0      	sub	sp, #128	@ 0x80
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800d82e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <dir_register+0x22>
 800d836:	2306      	movs	r3, #6
 800d838:	e194      	b.n	800db64 <dir_register+0x34c>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800d83a:	2300      	movs	r3, #0
 800d83c:	677b      	str	r3, [r7, #116]	@ 0x74
 800d83e:	e002      	b.n	800d846 <dir_register+0x2e>
 800d840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d842:	3301      	adds	r3, #1
 800d844:	677b      	str	r3, [r7, #116]	@ 0x74
 800d846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d848:	68da      	ldr	r2, [r3, #12]
 800d84a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d84c:	005b      	lsls	r3, r3, #1
 800d84e:	4413      	add	r3, r2
 800d850:	881b      	ldrh	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1f4      	bne.n	800d840 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	2b04      	cmp	r3, #4
 800d85c:	f040 80a6 	bne.w	800d9ac <dir_register+0x194>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d860:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d862:	330e      	adds	r3, #14
 800d864:	4aa5      	ldr	r2, [pc, #660]	@ (800dafc <dir_register+0x2e4>)
 800d866:	fba2 2303 	umull	r2, r3, r2, r3
 800d86a:	08db      	lsrs	r3, r3, #3
 800d86c:	3302      	adds	r3, #2
 800d86e:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 800d870:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7ff f8ea 	bl	800ca4c <dir_alloc>
 800d878:	4603      	mov	r3, r0
 800d87a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800d87e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d882:	2b00      	cmp	r3, #0
 800d884:	d002      	beq.n	800d88c <dir_register+0x74>
 800d886:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d88a:	e16b      	b.n	800db64 <dir_register+0x34c>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d890:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d892:	3b01      	subs	r3, #1
 800d894:	015b      	lsls	r3, r3, #5
 800d896:	1ad2      	subs	r2, r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	79db      	ldrb	r3, [r3, #7]
 800d8a0:	f003 0304 	and.w	r3, r3, #4
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d077      	beq.n	800d998 <dir_register+0x180>
			dp->obj.stat &= ~4;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	79db      	ldrb	r3, [r3, #7]
 800d8ac:	f023 0304 	bic.w	r3, r3, #4
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fe fcd3 	bl	800c264 <fill_first_frag>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d8c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <dir_register+0xba>
 800d8cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d8d0:	e148      	b.n	800db64 <dir_register+0x34c>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8dc:	4619      	mov	r1, r3
 800d8de:	f7fe fcf0 	bl	800c2c2 <fill_last_frag>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800d8e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <dir_register+0xde>
 800d8f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d8f4:	e136      	b.n	800db64 <dir_register+0x34c>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d04c      	beq.n	800d998 <dir_register+0x180>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	f107 0308 	add.w	r3, r7, #8
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fc99 	bl	800d23e <load_obj_xdir>
 800d90c:	4603      	mov	r3, r0
 800d90e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 800d912:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d916:	2b00      	cmp	r3, #0
 800d918:	d002      	beq.n	800d920 <dir_register+0x108>
 800d91a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d91e:	e121      	b.n	800db64 <dir_register+0x34c>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d926:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d928:	8949      	ldrh	r1, [r1, #10]
 800d92a:	0249      	lsls	r1, r1, #9
 800d92c:	2000      	movs	r0, #0
 800d92e:	460c      	mov	r4, r1
 800d930:	4605      	mov	r5, r0
 800d932:	eb12 0804 	adds.w	r8, r2, r4
 800d936:	eb43 0905 	adc.w	r9, r3, r5
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800d940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d942:	691b      	ldr	r3, [r3, #16]
 800d944:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d94e:	4608      	mov	r0, r1
 800d950:	f7fd fed1 	bl	800b6f6 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d962:	4608      	mov	r0, r1
 800d964:	f7fd fec7 	bl	800b6f6 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	79da      	ldrb	r2, [r3, #7]
 800d96c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	3321      	adds	r3, #33	@ 0x21
 800d972:	f042 0201 	orr.w	r2, r2, #1
 800d976:	b2d2      	uxtb	r2, r2
 800d978:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 800d97a:	f107 0308 	add.w	r3, r7, #8
 800d97e:	4618      	mov	r0, r3
 800d980:	f7ff fc96 	bl	800d2b0 <store_xdir>
 800d984:	4603      	mov	r3, r0
 800d986:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 800d98a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d002      	beq.n	800d998 <dir_register+0x180>
 800d992:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d996:	e0e5      	b.n	800db64 <dir_register+0x34c>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d99a:	691a      	ldr	r2, [r3, #16]
 800d99c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	4610      	mov	r0, r2
 800d9a4:	f7ff fcdf 	bl	800d366 <create_xdir>
		return FR_OK;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e0db      	b.n	800db64 <dir_register+0x34c>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800d9b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800d9b6:	6810      	ldr	r0, [r2, #0]
 800d9b8:	6851      	ldr	r1, [r2, #4]
 800d9ba:	6892      	ldr	r2, [r2, #8]
 800d9bc:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d9be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d033      	beq.n	800da32 <dir_register+0x21a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2240      	movs	r2, #64	@ 0x40
 800d9ce:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d9d6:	e016      	b.n	800da06 <dir_register+0x1ee>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800d9de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9e0:	68da      	ldr	r2, [r3, #12]
 800d9e2:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800d9e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d9e8:	f7ff fa0c 	bl	800ce04 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f7ff fdea 	bl	800d5c6 <dir_find>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800d9f8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d106      	bne.n	800da0e <dir_register+0x1f6>
		for (n = 1; n < 100; n++) {
 800da00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da02:	3301      	adds	r3, #1
 800da04:	67bb      	str	r3, [r7, #120]	@ 0x78
 800da06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da08:	2b63      	cmp	r3, #99	@ 0x63
 800da0a:	d9e5      	bls.n	800d9d8 <dir_register+0x1c0>
 800da0c:	e000      	b.n	800da10 <dir_register+0x1f8>
			if (res != FR_OK) break;
 800da0e:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800da10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da12:	2b64      	cmp	r3, #100	@ 0x64
 800da14:	d101      	bne.n	800da1a <dir_register+0x202>
 800da16:	2307      	movs	r3, #7
 800da18:	e0a4      	b.n	800db64 <dir_register+0x34c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800da1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da1e:	2b04      	cmp	r3, #4
 800da20:	d002      	beq.n	800da28 <dir_register+0x210>
 800da22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da26:	e09d      	b.n	800db64 <dir_register+0x34c>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800da28:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800da32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800da36:	f003 0302 	and.w	r3, r3, #2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d007      	beq.n	800da4e <dir_register+0x236>
 800da3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da40:	330c      	adds	r3, #12
 800da42:	4a2f      	ldr	r2, [pc, #188]	@ (800db00 <dir_register+0x2e8>)
 800da44:	fba2 2303 	umull	r2, r3, r2, r3
 800da48:	089b      	lsrs	r3, r3, #2
 800da4a:	3301      	adds	r3, #1
 800da4c:	e000      	b.n	800da50 <dir_register+0x238>
 800da4e:	2301      	movs	r3, #1
 800da50:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 800da52:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f7fe fff9 	bl	800ca4c <dir_alloc>
 800da5a:	4603      	mov	r3, r0
 800da5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 800da60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da64:	2b00      	cmp	r3, #0
 800da66:	d14e      	bne.n	800db06 <dir_register+0x2ee>
 800da68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da6a:	3b01      	subs	r3, #1
 800da6c:	673b      	str	r3, [r7, #112]	@ 0x70
 800da6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da70:	2b00      	cmp	r3, #0
 800da72:	d048      	beq.n	800db06 <dir_register+0x2ee>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da7a:	015b      	lsls	r3, r3, #5
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	4619      	mov	r1, r3
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7fe feb8 	bl	800c7f6 <dir_sdi>
 800da86:	4603      	mov	r3, r0
 800da88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800da8c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da90:	2b00      	cmp	r3, #0
 800da92:	d138      	bne.n	800db06 <dir_register+0x2ee>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	3340      	adds	r3, #64	@ 0x40
 800da98:	4618      	mov	r0, r3
 800da9a:	f7ff fa58 	bl	800cf4e <sum_sfn>
 800da9e:	4603      	mov	r3, r0
 800daa0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa8:	4619      	mov	r1, r3
 800daaa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800daac:	f7fd ffae 	bl	800ba0c <move_window>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800dab6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d122      	bne.n	800db04 <dir_register+0x2ec>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800dabe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dac0:	68d8      	ldr	r0, [r3, #12]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800dac6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800dace:	f7ff f931 	bl	800cd34 <put_lfn>
				fs->wflag = 1;
 800dad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dad4:	2201      	movs	r2, #1
 800dad6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800dad8:	2100      	movs	r1, #0
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7fe ff11 	bl	800c902 <dir_next>
 800dae0:	4603      	mov	r3, r0
 800dae2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --n_ent);
 800dae6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800daea:	2b00      	cmp	r3, #0
 800daec:	d10b      	bne.n	800db06 <dir_register+0x2ee>
 800daee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800daf0:	3b01      	subs	r3, #1
 800daf2:	673b      	str	r3, [r7, #112]	@ 0x70
 800daf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1d4      	bne.n	800daa4 <dir_register+0x28c>
 800dafa:	e004      	b.n	800db06 <dir_register+0x2ee>
 800dafc:	88888889 	.word	0x88888889
 800db00:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800db04:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800db06:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d128      	bne.n	800db60 <dir_register+0x348>
		res = move_window(fs, dp->sect);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db12:	4619      	mov	r1, r3
 800db14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800db16:	f7fd ff79 	bl	800ba0c <move_window>
 800db1a:	4603      	mov	r3, r0
 800db1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800db20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800db24:	2b00      	cmp	r3, #0
 800db26:	d11b      	bne.n	800db60 <dir_register+0x348>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db2c:	2220      	movs	r2, #32
 800db2e:	2100      	movs	r1, #0
 800db30:	4618      	mov	r0, r3
 800db32:	f004 fa24 	bl	8011f7e <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	3340      	adds	r3, #64	@ 0x40
 800db3e:	220b      	movs	r2, #11
 800db40:	4619      	mov	r1, r3
 800db42:	f004 fb22 	bl	801218a <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db50:	330c      	adds	r3, #12
 800db52:	f002 0218 	and.w	r2, r2, #24
 800db56:	b2d2      	uxtb	r2, r2
 800db58:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800db5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800db5c:	2201      	movs	r2, #1
 800db5e:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800db60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800db64:	4618      	mov	r0, r3
 800db66:	3780      	adds	r7, #128	@ 0x80
 800db68:	46bd      	mov	sp, r7
 800db6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800db6e:	bf00      	nop

0800db70 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 800db70:	b5b0      	push	{r4, r5, r7, lr}
 800db72:	b08a      	sub	sp, #40	@ 0x28
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	BYTE lcf;
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	613b      	str	r3, [r7, #16]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2200      	movs	r2, #0
 800db84:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f000 81b6 	beq.w	800defc <get_fileinfo+0x38c>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	2b04      	cmp	r3, #4
 800db96:	f040 80a6 	bne.w	800dce6 <get_fileinfo+0x176>
		UINT nc = 0;
 800db9a:	2300      	movs	r3, #0
 800db9c:	617b      	str	r3, [r7, #20]

		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 800db9e:	2340      	movs	r3, #64	@ 0x40
 800dba0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dba2:	2300      	movs	r3, #0
 800dba4:	623b      	str	r3, [r7, #32]
		hs = 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800dbaa:	e048      	b.n	800dc3e <get_fileinfo+0xce>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 800dbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbae:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800dbb2:	d302      	bcc.n	800dbba <get_fileinfo+0x4a>
				di = 0; break;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	623b      	str	r3, [r7, #32]
 800dbb8:	e049      	b.n	800dc4e <get_fileinfo+0xde>
			}
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 800dbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbbc:	f003 031f 	and.w	r3, r3, #31
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d102      	bne.n	800dbca <get_fileinfo+0x5a>
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc6:	3302      	adds	r3, #2
 800dbc8:	627b      	str	r3, [r7, #36]	@ 0x24
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	691a      	ldr	r2, [r3, #16]
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd0:	4413      	add	r3, r2
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fd fc32 	bl	800b43c <ld_word>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	83bb      	strh	r3, [r7, #28]
 800dbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbde:	3302      	adds	r3, #2
 800dbe0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	617b      	str	r3, [r7, #20]
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800dbe8:	8b7b      	ldrh	r3, [r7, #26]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10a      	bne.n	800dc04 <get_fileinfo+0x94>
 800dbee:	8bbb      	ldrh	r3, [r7, #28]
 800dbf0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800dbf4:	d306      	bcc.n	800dc04 <get_fileinfo+0x94>
 800dbf6:	8bbb      	ldrh	r3, [r7, #28]
 800dbf8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800dbfc:	d202      	bcs.n	800dc04 <get_fileinfo+0x94>
				hs = wc; continue;				/* Get low surrogate */
 800dbfe:	8bbb      	ldrh	r3, [r7, #28]
 800dc00:	837b      	strh	r3, [r7, #26]
 800dc02:	e01c      	b.n	800dc3e <get_fileinfo+0xce>
			}
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800dc04:	8b7b      	ldrh	r3, [r7, #26]
 800dc06:	041a      	lsls	r2, r3, #16
 800dc08:	8bbb      	ldrh	r3, [r7, #28]
 800dc0a:	ea42 0003 	orr.w	r0, r2, r3
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	3318      	adds	r3, #24
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	4413      	add	r3, r2
 800dc16:	1c99      	adds	r1, r3, #2
 800dc18:	6a3b      	ldr	r3, [r7, #32]
 800dc1a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800dc1e:	461a      	mov	r2, r3
 800dc20:	f7fd fe80 	bl	800b924 <put_utf>
 800dc24:	60f8      	str	r0, [r7, #12]
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d102      	bne.n	800dc32 <get_fileinfo+0xc2>
				di = 0; break;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	623b      	str	r3, [r7, #32]
 800dc30:	e00d      	b.n	800dc4e <get_fileinfo+0xde>
			}
			di += nw;
 800dc32:	6a3a      	ldr	r2, [r7, #32]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4413      	add	r3, r2
 800dc38:	623b      	str	r3, [r7, #32]
			hs = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	3323      	adds	r3, #35	@ 0x23
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	461a      	mov	r2, r3
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d3ae      	bcc.n	800dbac <get_fileinfo+0x3c>
		}
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 800dc4e:	8b7b      	ldrh	r3, [r7, #26]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d001      	beq.n	800dc58 <get_fileinfo+0xe8>
 800dc54:	2300      	movs	r3, #0
 800dc56:	623b      	str	r3, [r7, #32]
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 800dc58:	6a3b      	ldr	r3, [r7, #32]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d106      	bne.n	800dc6c <get_fileinfo+0xfc>
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	1c5a      	adds	r2, r3, #1
 800dc62:	623a      	str	r2, [r7, #32]
 800dc64:	683a      	ldr	r2, [r7, #0]
 800dc66:	4413      	add	r3, r2
 800dc68:	223f      	movs	r2, #63	@ 0x3f
 800dc6a:	769a      	strb	r2, [r3, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 800dc6c:	683a      	ldr	r2, [r7, #0]
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	4413      	add	r3, r2
 800dc72:	331a      	adds	r3, #26
 800dc74:	2200      	movs	r2, #0
 800dc76:	701a      	strb	r2, [r3, #0]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	735a      	strb	r2, [r3, #13]

		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	3304      	adds	r3, #4
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	731a      	strb	r2, [r3, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	7b1b      	ldrb	r3, [r3, #12]
 800dc94:	f003 0310 	and.w	r3, r3, #16
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d108      	bne.n	800dcae <get_fileinfo+0x13e>
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	3338      	adds	r3, #56	@ 0x38
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fd fc05 	bl	800b4b2 <ld_qword>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	e003      	b.n	800dcb6 <get_fileinfo+0x146>
 800dcae:	f04f 0200 	mov.w	r2, #0
 800dcb2:	f04f 0300 	mov.w	r3, #0
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	e9c1 2300 	strd	r2, r3, [r1]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	330c      	adds	r3, #12
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fd fbba 	bl	800b43c <ld_word>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	461a      	mov	r2, r3
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	815a      	strh	r2, [r3, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	691b      	ldr	r3, [r3, #16]
 800dcd4:	330e      	adds	r3, #14
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fd fbb0 	bl	800b43c <ld_word>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	461a      	mov	r2, r3
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	811a      	strh	r2, [r3, #8]
		return;
 800dce4:	e10b      	b.n	800defe <get_fileinfo+0x38e>
	} else
#endif
	{	/* FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcee:	d04d      	beq.n	800dd8c <get_fileinfo+0x21c>
			si = di = 0;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	623b      	str	r3, [r7, #32]
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	627b      	str	r3, [r7, #36]	@ 0x24
			hs = 0;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 800dcfc:	e033      	b.n	800dd66 <get_fileinfo+0x1f6>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	68da      	ldr	r2, [r3, #12]
 800dd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd04:	1c59      	adds	r1, r3, #1
 800dd06:	6279      	str	r1, [r7, #36]	@ 0x24
 800dd08:	005b      	lsls	r3, r3, #1
 800dd0a:	4413      	add	r3, r2
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	83bb      	strh	r3, [r7, #28]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800dd10:	8b7b      	ldrh	r3, [r7, #26]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d10a      	bne.n	800dd2c <get_fileinfo+0x1bc>
 800dd16:	8bbb      	ldrh	r3, [r7, #28]
 800dd18:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 800dd1c:	d306      	bcc.n	800dd2c <get_fileinfo+0x1bc>
 800dd1e:	8bbb      	ldrh	r3, [r7, #28]
 800dd20:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800dd24:	d202      	bcs.n	800dd2c <get_fileinfo+0x1bc>
					hs = wc; continue;		/* Get low surrogate */
 800dd26:	8bbb      	ldrh	r3, [r7, #28]
 800dd28:	837b      	strh	r3, [r7, #26]
 800dd2a:	e01c      	b.n	800dd66 <get_fileinfo+0x1f6>
				}
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 800dd2c:	8b7b      	ldrh	r3, [r7, #26]
 800dd2e:	041a      	lsls	r2, r3, #16
 800dd30:	8bbb      	ldrh	r3, [r7, #28]
 800dd32:	ea42 0003 	orr.w	r0, r2, r3
 800dd36:	6a3b      	ldr	r3, [r7, #32]
 800dd38:	3318      	adds	r3, #24
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	1c99      	adds	r1, r3, #2
 800dd40:	6a3b      	ldr	r3, [r7, #32]
 800dd42:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800dd46:	461a      	mov	r2, r3
 800dd48:	f7fd fdec 	bl	800b924 <put_utf>
 800dd4c:	60f8      	str	r0, [r7, #12]
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d102      	bne.n	800dd5a <get_fileinfo+0x1ea>
					di = 0; break;
 800dd54:	2300      	movs	r3, #0
 800dd56:	623b      	str	r3, [r7, #32]
 800dd58:	e00d      	b.n	800dd76 <get_fileinfo+0x206>
				}
				di += nw;
 800dd5a:	6a3a      	ldr	r2, [r7, #32]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	4413      	add	r3, r2
 800dd60:	623b      	str	r3, [r7, #32]
				hs = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	68da      	ldr	r2, [r3, #12]
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	4413      	add	r3, r2
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d1c3      	bne.n	800dcfe <get_fileinfo+0x18e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 800dd76:	8b7b      	ldrh	r3, [r7, #26]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d001      	beq.n	800dd80 <get_fileinfo+0x210>
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	623b      	str	r3, [r7, #32]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 800dd80:	683a      	ldr	r2, [r7, #0]
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	4413      	add	r3, r2
 800dd86:	331a      	adds	r3, #26
 800dd88:	2200      	movs	r2, #0
 800dd8a:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	623b      	str	r3, [r7, #32]
 800dd90:	6a3b      	ldr	r3, [r7, #32]
 800dd92:	627b      	str	r3, [r7, #36]	@ 0x24
	while (si < 11) {		/* Get SFN from SFN entry */
 800dd94:	e027      	b.n	800dde6 <get_fileinfo+0x276>
		wc = dp->dir[si++];			/* Get a char */
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9c:	1c59      	adds	r1, r3, #1
 800dd9e:	6279      	str	r1, [r7, #36]	@ 0x24
 800dda0:	4413      	add	r3, r2
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	83bb      	strh	r3, [r7, #28]
		if (wc == ' ') continue;	/* Skip padding spaces */
 800dda6:	8bbb      	ldrh	r3, [r7, #28]
 800dda8:	2b20      	cmp	r3, #32
 800ddaa:	d01b      	beq.n	800dde4 <get_fileinfo+0x274>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 800ddac:	8bbb      	ldrh	r3, [r7, #28]
 800ddae:	2b05      	cmp	r3, #5
 800ddb0:	d101      	bne.n	800ddb6 <get_fileinfo+0x246>
 800ddb2:	23e5      	movs	r3, #229	@ 0xe5
 800ddb4:	83bb      	strh	r3, [r7, #28]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 800ddb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb8:	2b09      	cmp	r3, #9
 800ddba:	d109      	bne.n	800ddd0 <get_fileinfo+0x260>
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	2b0b      	cmp	r3, #11
 800ddc0:	d806      	bhi.n	800ddd0 <get_fileinfo+0x260>
 800ddc2:	6a3b      	ldr	r3, [r7, #32]
 800ddc4:	1c5a      	adds	r2, r3, #1
 800ddc6:	623a      	str	r2, [r7, #32]
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	4413      	add	r3, r2
 800ddcc:	222e      	movs	r2, #46	@ 0x2e
 800ddce:	735a      	strb	r2, [r3, #13]
		if (nw == 0) {				/* Buffer overflow? */
			di = 0; break;
		}
		di += nw;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	1c5a      	adds	r2, r3, #1
 800ddd4:	623a      	str	r2, [r7, #32]
 800ddd6:	8bba      	ldrh	r2, [r7, #28]
 800ddd8:	b2d1      	uxtb	r1, r2
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	4413      	add	r3, r2
 800ddde:	460a      	mov	r2, r1
 800dde0:	735a      	strb	r2, [r3, #13]
 800dde2:	e000      	b.n	800dde6 <get_fileinfo+0x276>
		if (wc == ' ') continue;	/* Skip padding spaces */
 800dde4:	bf00      	nop
	while (si < 11) {		/* Get SFN from SFN entry */
 800dde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde8:	2b0a      	cmp	r3, #10
 800ddea:	d9d4      	bls.n	800dd96 <get_fileinfo+0x226>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	330d      	adds	r3, #13
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	7e9b      	ldrb	r3, [r3, #26]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d152      	bne.n	800dea6 <get_fileinfo+0x336>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 800de00:	6a3b      	ldr	r3, [r7, #32]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d107      	bne.n	800de16 <get_fileinfo+0x2a6>
			fno->fname[di++] = '\?';
 800de06:	6a3b      	ldr	r3, [r7, #32]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	623a      	str	r2, [r7, #32]
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	4413      	add	r3, r2
 800de10:	223f      	movs	r2, #63	@ 0x3f
 800de12:	769a      	strb	r2, [r3, #26]
 800de14:	e038      	b.n	800de88 <get_fileinfo+0x318>
		} else {
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800de16:	2300      	movs	r3, #0
 800de18:	623b      	str	r3, [r7, #32]
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800de1e:	2308      	movs	r3, #8
 800de20:	77fb      	strb	r3, [r7, #31]
 800de22:	e02a      	b.n	800de7a <get_fileinfo+0x30a>
				wc = (WCHAR)fno->altname[si];
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de28:	4413      	add	r3, r2
 800de2a:	330d      	adds	r3, #13
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	83bb      	strh	r3, [r7, #28]
				if (wc == '.') lcf = NS_EXT;
 800de30:	8bbb      	ldrh	r3, [r7, #28]
 800de32:	2b2e      	cmp	r3, #46	@ 0x2e
 800de34:	d101      	bne.n	800de3a <get_fileinfo+0x2ca>
 800de36:	2310      	movs	r3, #16
 800de38:	77fb      	strb	r3, [r7, #31]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 800de3a:	8bbb      	ldrh	r3, [r7, #28]
 800de3c:	2b40      	cmp	r3, #64	@ 0x40
 800de3e:	d90e      	bls.n	800de5e <get_fileinfo+0x2ee>
 800de40:	8bbb      	ldrh	r3, [r7, #28]
 800de42:	2b5a      	cmp	r3, #90	@ 0x5a
 800de44:	d80b      	bhi.n	800de5e <get_fileinfo+0x2ee>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de4a:	330c      	adds	r3, #12
 800de4c:	781a      	ldrb	r2, [r3, #0]
 800de4e:	7ffb      	ldrb	r3, [r7, #31]
 800de50:	4013      	ands	r3, r2
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <get_fileinfo+0x2ee>
 800de58:	8bbb      	ldrh	r3, [r7, #28]
 800de5a:	3320      	adds	r3, #32
 800de5c:	83bb      	strh	r3, [r7, #28]
				fno->fname[di] = (TCHAR)wc;
 800de5e:	8bbb      	ldrh	r3, [r7, #28]
 800de60:	b2d9      	uxtb	r1, r3
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	4413      	add	r3, r2
 800de68:	331a      	adds	r3, #26
 800de6a:	460a      	mov	r2, r1
 800de6c:	701a      	strb	r2, [r3, #0]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800de6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de70:	3301      	adds	r3, #1
 800de72:	627b      	str	r3, [r7, #36]	@ 0x24
 800de74:	6a3b      	ldr	r3, [r7, #32]
 800de76:	3301      	adds	r3, #1
 800de78:	623b      	str	r3, [r7, #32]
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7e:	4413      	add	r3, r2
 800de80:	330d      	adds	r3, #13
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1cd      	bne.n	800de24 <get_fileinfo+0x2b4>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	6a3b      	ldr	r3, [r7, #32]
 800de8c:	4413      	add	r3, r2
 800de8e:	331a      	adds	r3, #26
 800de90:	2200      	movs	r2, #0
 800de92:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de98:	330c      	adds	r3, #12
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d102      	bne.n	800dea6 <get_fileinfo+0x336>
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	2200      	movs	r2, #0
 800dea4:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deaa:	330b      	adds	r3, #11
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800debc:	331c      	adds	r3, #28
 800debe:	4618      	mov	r0, r3
 800dec0:	f7fd fad4 	bl	800b46c <ld_dword>
 800dec4:	4603      	mov	r3, r0
 800dec6:	2200      	movs	r2, #0
 800dec8:	461c      	mov	r4, r3
 800deca:	4615      	mov	r5, r2
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	e9c3 4500 	strd	r4, r5, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ded6:	3316      	adds	r3, #22
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fd faaf 	bl	800b43c <ld_word>
 800dede:	4603      	mov	r3, r0
 800dee0:	461a      	mov	r2, r3
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deea:	3318      	adds	r3, #24
 800deec:	4618      	mov	r0, r3
 800deee:	f7fd faa5 	bl	800b43c <ld_word>
 800def2:	4603      	mov	r3, r0
 800def4:	461a      	mov	r2, r3
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	811a      	strh	r2, [r3, #8]
 800defa:	e000      	b.n	800defe <get_fileinfo+0x38e>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800defc:	bf00      	nop
}
 800defe:	3728      	adds	r7, #40	@ 0x28
 800df00:	46bd      	mov	sp, r7
 800df02:	bdb0      	pop	{r4, r5, r7, pc}

0800df04 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08a      	sub	sp, #40	@ 0x28
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60bb      	str	r3, [r7, #8]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	613b      	str	r3, [r7, #16]
 800df1c:	2300      	movs	r3, #0
 800df1e:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 800df20:	f107 0308 	add.w	r3, r7, #8
 800df24:	4618      	mov	r0, r3
 800df26:	f7fd fcb8 	bl	800b89a <tchar2uni>
 800df2a:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df32:	d101      	bne.n	800df38 <create_name+0x34>
 800df34:	2306      	movs	r3, #6
 800df36:	e1b5      	b.n	800e2a4 <create_name+0x3a0>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df3e:	d309      	bcc.n	800df54 <create_name+0x50>
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	0c19      	lsrs	r1, r3, #16
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	1c5a      	adds	r2, r3, #1
 800df48:	617a      	str	r2, [r7, #20]
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	693a      	ldr	r2, [r7, #16]
 800df4e:	4413      	add	r3, r2
 800df50:	b28a      	uxth	r2, r1
 800df52:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 800df58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df5a:	2b1f      	cmp	r3, #31
 800df5c:	d920      	bls.n	800dfa0 <create_name+0x9c>
 800df5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df60:	2b2f      	cmp	r3, #47	@ 0x2f
 800df62:	d01d      	beq.n	800dfa0 <create_name+0x9c>
 800df64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df66:	2b5c      	cmp	r3, #92	@ 0x5c
 800df68:	d01a      	beq.n	800dfa0 <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800df6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df6c:	2b7f      	cmp	r3, #127	@ 0x7f
 800df6e:	d809      	bhi.n	800df84 <create_name+0x80>
 800df70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800df72:	4619      	mov	r1, r3
 800df74:	4891      	ldr	r0, [pc, #580]	@ (800e1bc <create_name+0x2b8>)
 800df76:	f004 f819 	bl	8011fac <strchr>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <create_name+0x80>
 800df80:	2306      	movs	r3, #6
 800df82:	e18f      	b.n	800e2a4 <create_name+0x3a0>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	2bfe      	cmp	r3, #254	@ 0xfe
 800df88:	d901      	bls.n	800df8e <create_name+0x8a>
 800df8a:	2306      	movs	r3, #6
 800df8c:	e18a      	b.n	800e2a4 <create_name+0x3a0>
		lfn[di++] = wc;				/* Store the Unicode character */
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	1c5a      	adds	r2, r3, #1
 800df92:	617a      	str	r2, [r7, #20]
 800df94:	005b      	lsls	r3, r3, #1
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	4413      	add	r3, r2
 800df9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800df9c:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 800df9e:	e7bf      	b.n	800df20 <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 800dfa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dfa2:	2b1f      	cmp	r3, #31
 800dfa4:	d806      	bhi.n	800dfb4 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 800dfa6:	2304      	movs	r3, #4
 800dfa8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dfac:	e014      	b.n	800dfd8 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	60bb      	str	r3, [r7, #8]
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	2b2f      	cmp	r3, #47	@ 0x2f
 800dfba:	d0f8      	beq.n	800dfae <create_name+0xaa>
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	2b5c      	cmp	r3, #92	@ 0x5c
 800dfc2:	d0f4      	beq.n	800dfae <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	2b1f      	cmp	r3, #31
 800dfd0:	d802      	bhi.n	800dfd8 <create_name+0xd4>
 800dfd2:	2304      	movs	r3, #4
 800dfd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	601a      	str	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800dfde:	e011      	b.n	800e004 <create_name+0x100>
		wc = lfn[di - 1];
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	4413      	add	r3, r2
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 800dff2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dff4:	2b20      	cmp	r3, #32
 800dff6:	d002      	beq.n	800dffe <create_name+0xfa>
 800dff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dffa:	2b2e      	cmp	r3, #46	@ 0x2e
 800dffc:	d106      	bne.n	800e00c <create_name+0x108>
		di--;
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	3b01      	subs	r3, #1
 800e002:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1ea      	bne.n	800dfe0 <create_name+0xdc>
 800e00a:	e000      	b.n	800e00e <create_name+0x10a>
		if (wc != ' ' && wc != '.') break;
 800e00c:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	693a      	ldr	r2, [r7, #16]
 800e014:	4413      	add	r3, r2
 800e016:	2200      	movs	r2, #0
 800e018:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d101      	bne.n	800e024 <create_name+0x120>
 800e020:	2306      	movs	r3, #6
 800e022:	e13f      	b.n	800e2a4 <create_name+0x3a0>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 800e024:	2300      	movs	r3, #0
 800e026:	61bb      	str	r3, [r7, #24]
 800e028:	e002      	b.n	800e030 <create_name+0x12c>
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	3301      	adds	r3, #1
 800e02e:	61bb      	str	r3, [r7, #24]
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	005b      	lsls	r3, r3, #1
 800e034:	693a      	ldr	r2, [r7, #16]
 800e036:	4413      	add	r3, r2
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	2b20      	cmp	r3, #32
 800e03c:	d0f5      	beq.n	800e02a <create_name+0x126>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d106      	bne.n	800e052 <create_name+0x14e>
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	005b      	lsls	r3, r3, #1
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	4413      	add	r3, r2
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e050:	d109      	bne.n	800e066 <create_name+0x162>
 800e052:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e056:	f043 0303 	orr.w	r3, r3, #3
 800e05a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 800e05e:	e002      	b.n	800e066 <create_name+0x162>
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	3b01      	subs	r3, #1
 800e064:	617b      	str	r3, [r7, #20]
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d009      	beq.n	800e080 <create_name+0x17c>
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800e072:	3b01      	subs	r3, #1
 800e074:	005b      	lsls	r3, r3, #1
 800e076:	693a      	ldr	r2, [r7, #16]
 800e078:	4413      	add	r3, r2
 800e07a:	881b      	ldrh	r3, [r3, #0]
 800e07c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e07e:	d1ef      	bne.n	800e060 <create_name+0x15c>

	memset(dp->fn, ' ', 11);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	3340      	adds	r3, #64	@ 0x40
 800e084:	220b      	movs	r2, #11
 800e086:	2120      	movs	r1, #32
 800e088:	4618      	mov	r0, r3
 800e08a:	f003 ff78 	bl	8011f7e <memset>
	i = b = 0; ni = 8;
 800e08e:	2300      	movs	r3, #0
 800e090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e094:	2300      	movs	r3, #0
 800e096:	623b      	str	r3, [r7, #32]
 800e098:	2308      	movs	r3, #8
 800e09a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	1c5a      	adds	r2, r3, #1
 800e0a0:	61ba      	str	r2, [r7, #24]
 800e0a2:	005b      	lsls	r3, r3, #1
 800e0a4:	693a      	ldr	r2, [r7, #16]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 800e0ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f000 80ae 	beq.w	800e210 <create_name+0x30c>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 800e0b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0b6:	2b20      	cmp	r3, #32
 800e0b8:	d006      	beq.n	800e0c8 <create_name+0x1c4>
 800e0ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0be:	d10a      	bne.n	800e0d6 <create_name+0x1d2>
 800e0c0:	69ba      	ldr	r2, [r7, #24]
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d006      	beq.n	800e0d6 <create_name+0x1d2>
			cf |= NS_LOSS | NS_LFN;
 800e0c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e0cc:	f043 0303 	orr.w	r3, r3, #3
 800e0d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 800e0d4:	e09b      	b.n	800e20e <create_name+0x30a>
		}

		if (i >= ni || si == di) {		/* End of field? */
 800e0d6:	6a3a      	ldr	r2, [r7, #32]
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d203      	bcs.n	800e0e6 <create_name+0x1e2>
 800e0de:	69ba      	ldr	r2, [r7, #24]
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d123      	bne.n	800e12e <create_name+0x22a>
			if (ni == 11) {				/* Name extension overflow? */
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	2b0b      	cmp	r3, #11
 800e0ea:	d106      	bne.n	800e0fa <create_name+0x1f6>
				cf |= NS_LOSS | NS_LFN;
 800e0ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e0f0:	f043 0303 	orr.w	r3, r3, #3
 800e0f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 800e0f8:	e08d      	b.n	800e216 <create_name+0x312>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 800e0fa:	69ba      	ldr	r2, [r7, #24]
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d005      	beq.n	800e10e <create_name+0x20a>
 800e102:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e106:	f043 0303 	orr.w	r3, r3, #3
 800e10a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 800e10e:	69ba      	ldr	r2, [r7, #24]
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	429a      	cmp	r2, r3
 800e114:	d87e      	bhi.n	800e214 <create_name+0x310>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	61bb      	str	r3, [r7, #24]
 800e11a:	2308      	movs	r3, #8
 800e11c:	623b      	str	r3, [r7, #32]
 800e11e:	230b      	movs	r3, #11
 800e120:	61fb      	str	r3, [r7, #28]
 800e122:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 800e12c:	e06f      	b.n	800e20e <create_name+0x30a>
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 800e12e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e130:	2b7f      	cmp	r3, #127	@ 0x7f
 800e132:	d911      	bls.n	800e158 <create_name+0x254>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 800e134:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e138:	f043 0302 	orr.w	r3, r3, #2
 800e13c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
 800e140:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e142:	4618      	mov	r0, r3
 800e144:	f002 f868 	bl	8010218 <ff_wtoupper>
 800e148:	4603      	mov	r3, r0
 800e14a:	f44f 7169 	mov.w	r1, #932	@ 0x3a4
 800e14e:	4618      	mov	r0, r3
 800e150:	f001 ffae 	bl	80100b0 <ff_uni2oem>
 800e154:	4603      	mov	r3, r0
 800e156:	84bb      	strh	r3, [r7, #36]	@ 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 800e158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e15a:	2bff      	cmp	r3, #255	@ 0xff
 800e15c:	d91a      	bls.n	800e194 <create_name+0x290>
			if (i >= ni - 1) {			/* Field overflow? */
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	3b01      	subs	r3, #1
 800e162:	6a3a      	ldr	r2, [r7, #32]
 800e164:	429a      	cmp	r2, r3
 800e166:	d308      	bcc.n	800e17a <create_name+0x276>
				cf |= NS_LOSS | NS_LFN;
 800e168:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e16c:	f043 0303 	orr.w	r3, r3, #3
 800e170:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	623b      	str	r3, [r7, #32]
 800e178:	e049      	b.n	800e20e <create_name+0x30a>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 800e17a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e17c:	0a1b      	lsrs	r3, r3, #8
 800e17e:	b299      	uxth	r1, r3
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	1c5a      	adds	r2, r3, #1
 800e184:	623a      	str	r2, [r7, #32]
 800e186:	b2c9      	uxtb	r1, r1
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	4413      	add	r3, r2
 800e18c:	460a      	mov	r2, r1
 800e18e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e192:	e032      	b.n	800e1fa <create_name+0x2f6>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 800e194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e196:	2b00      	cmp	r3, #0
 800e198:	d007      	beq.n	800e1aa <create_name+0x2a6>
 800e19a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e19c:	4619      	mov	r1, r3
 800e19e:	4808      	ldr	r0, [pc, #32]	@ (800e1c0 <create_name+0x2bc>)
 800e1a0:	f003 ff04 	bl	8011fac <strchr>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00c      	beq.n	800e1c4 <create_name+0x2c0>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e1aa:	235f      	movs	r3, #95	@ 0x5f
 800e1ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e1ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e1b2:	f043 0303 	orr.w	r3, r3, #3
 800e1b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e1ba:	e01e      	b.n	800e1fa <create_name+0x2f6>
 800e1bc:	08013358 	.word	0x08013358
 800e1c0:	08013364 	.word	0x08013364
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 800e1c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1c6:	2b40      	cmp	r3, #64	@ 0x40
 800e1c8:	d908      	bls.n	800e1dc <create_name+0x2d8>
 800e1ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1cc:	2b5a      	cmp	r3, #90	@ 0x5a
 800e1ce:	d805      	bhi.n	800e1dc <create_name+0x2d8>
					b |= 2;
 800e1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1d4:	f043 0302 	orr.w	r3, r3, #2
 800e1d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 800e1dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1de:	2b60      	cmp	r3, #96	@ 0x60
 800e1e0:	d90b      	bls.n	800e1fa <create_name+0x2f6>
 800e1e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1e4:	2b7a      	cmp	r3, #122	@ 0x7a
 800e1e6:	d808      	bhi.n	800e1fa <create_name+0x2f6>
					b |= 1; wc -= 0x20;
 800e1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1ec:	f043 0301 	orr.w	r3, r3, #1
 800e1f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e1f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1f6:	3b20      	subs	r3, #32
 800e1f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	623a      	str	r2, [r7, #32]
 800e200:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e202:	b2d1      	uxtb	r1, r2
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	4413      	add	r3, r2
 800e208:	460a      	mov	r2, r1
 800e20a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		wc = lfn[si++];					/* Get an LFN character */
 800e20e:	e745      	b.n	800e09c <create_name+0x198>
		if (wc == 0) break;				/* Break on end of the LFN */
 800e210:	bf00      	nop
 800e212:	e000      	b.n	800e216 <create_name+0x312>
			if (si > di) break;						/* No name extension? */
 800e214:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e21c:	2be5      	cmp	r3, #229	@ 0xe5
 800e21e:	d103      	bne.n	800e228 <create_name+0x324>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2205      	movs	r2, #5
 800e224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	2b08      	cmp	r3, #8
 800e22c:	d104      	bne.n	800e238 <create_name+0x334>
 800e22e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 800e238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e23c:	f003 030c 	and.w	r3, r3, #12
 800e240:	2b0c      	cmp	r3, #12
 800e242:	d005      	beq.n	800e250 <create_name+0x34c>
 800e244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e248:	f003 0303 	and.w	r3, r3, #3
 800e24c:	2b03      	cmp	r3, #3
 800e24e:	d105      	bne.n	800e25c <create_name+0x358>
 800e250:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e254:	f043 0302 	orr.w	r3, r3, #2
 800e258:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e25c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e260:	f003 0302 	and.w	r3, r3, #2
 800e264:	2b00      	cmp	r3, #0
 800e266:	d117      	bne.n	800e298 <create_name+0x394>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 800e268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e26c:	f003 0301 	and.w	r3, r3, #1
 800e270:	2b00      	cmp	r3, #0
 800e272:	d005      	beq.n	800e280 <create_name+0x37c>
 800e274:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e278:	f043 0310 	orr.w	r3, r3, #16
 800e27c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e284:	f003 0304 	and.w	r3, r3, #4
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <create_name+0x394>
 800e28c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e290:	f043 0308 	orr.w	r3, r3, #8
 800e294:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e29e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800e2a2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3728      	adds	r7, #40	@ 0x28
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b086      	sub	sp, #24
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 800e2bc:	e002      	b.n	800e2c4 <follow_path+0x18>
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	603b      	str	r3, [r7, #0]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800e2ca:	d0f8      	beq.n	800e2be <follow_path+0x12>
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e2d2:	d0f4      	beq.n	800e2be <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	61da      	str	r2, [r3, #28]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b1f      	cmp	r3, #31
 800e2e6:	d80a      	bhi.n	800e2fe <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2280      	movs	r2, #128	@ 0x80
 800e2ec:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7fe fa7f 	bl	800c7f6 <dir_sdi>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	75fb      	strb	r3, [r7, #23]
 800e2fc:	e060      	b.n	800e3c0 <follow_path+0x114>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e2fe:	463b      	mov	r3, r7
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7ff fdfe 	bl	800df04 <create_name>
 800e308:	4603      	mov	r3, r0
 800e30a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d151      	bne.n	800e3b6 <follow_path+0x10a>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7ff f957 	bl	800d5c6 <dir_find>
 800e318:	4603      	mov	r3, r0
 800e31a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800e322:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800e324:	7dfb      	ldrb	r3, [r7, #23]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00a      	beq.n	800e340 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
 800e32c:	2b04      	cmp	r3, #4
 800e32e:	d144      	bne.n	800e3ba <follow_path+0x10e>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e330:	7bfb      	ldrb	r3, [r7, #15]
 800e332:	f003 0304 	and.w	r3, r3, #4
 800e336:	2b00      	cmp	r3, #0
 800e338:	d13f      	bne.n	800e3ba <follow_path+0x10e>
 800e33a:	2305      	movs	r3, #5
 800e33c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e33e:	e03c      	b.n	800e3ba <follow_path+0x10e>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800e340:	7bfb      	ldrb	r3, [r7, #15]
 800e342:	f003 0304 	and.w	r3, r3, #4
 800e346:	2b00      	cmp	r3, #0
 800e348:	d139      	bne.n	800e3be <follow_path+0x112>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	799b      	ldrb	r3, [r3, #6]
 800e34e:	f003 0310 	and.w	r3, r3, #16
 800e352:	2b00      	cmp	r3, #0
 800e354:	d102      	bne.n	800e35c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800e356:	2305      	movs	r3, #5
 800e358:	75fb      	strb	r3, [r7, #23]
 800e35a:	e031      	b.n	800e3c0 <follow_path+0x114>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	2b04      	cmp	r3, #4
 800e362:	d118      	bne.n	800e396 <follow_path+0xea>
				dp->obj.c_scl = dp->obj.sclust;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	689a      	ldr	r2, [r3, #8]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e372:	4613      	mov	r3, r2
 800e374:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	79d2      	ldrb	r2, [r2, #7]
 800e37c:	431a      	orrs	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	625a      	str	r2, [r3, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4619      	mov	r1, r3
 800e38e:	6938      	ldr	r0, [r7, #16]
 800e390:	f7fe ff2c 	bl	800d1ec <init_alloc_info>
 800e394:	e7b3      	b.n	800e2fe <follow_path+0x52>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3a4:	4413      	add	r3, r2
 800e3a6:	4619      	mov	r1, r3
 800e3a8:	6938      	ldr	r0, [r7, #16]
 800e3aa:	f7fe fbab 	bl	800cb04 <ld_clust>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e3b4:	e7a3      	b.n	800e2fe <follow_path+0x52>
			if (res != FR_OK) break;
 800e3b6:	bf00      	nop
 800e3b8:	e002      	b.n	800e3c0 <follow_path+0x114>
				break;
 800e3ba:	bf00      	nop
 800e3bc:	e000      	b.n	800e3c0 <follow_path+0x114>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800e3be:	bf00      	nop
			}
		}
	}

	return res;
 800e3c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3718      	adds	r7, #24
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}

0800e3ca <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800e3ca:	b480      	push	{r7}
 800e3cc:	b087      	sub	sp, #28
 800e3ce:	af00      	add	r7, sp, #0
 800e3d0:	6078      	str	r0, [r7, #4]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	60fb      	str	r3, [r7, #12]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	617b      	str	r3, [r7, #20]
	if (!tp) return -1;		/* Invalid path name? */
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d102      	bne.n	800e3e8 <get_ldnumber+0x1e>
 800e3e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e6:	e02c      	b.n	800e442 <get_ldnumber+0x78>
	do {					/* Find a colon in the path */
		chr = *tt++;
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	1c5a      	adds	r2, r3, #1
 800e3ec:	617a      	str	r2, [r7, #20]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	72fb      	strb	r3, [r7, #11]
	} while (!IsTerminator(chr) && chr != ':');
 800e3f2:	7afb      	ldrb	r3, [r7, #11]
 800e3f4:	2b1f      	cmp	r3, #31
 800e3f6:	d902      	bls.n	800e3fe <get_ldnumber+0x34>
 800e3f8:	7afb      	ldrb	r3, [r7, #11]
 800e3fa:	2b3a      	cmp	r3, #58	@ 0x3a
 800e3fc:	d1f4      	bne.n	800e3e8 <get_ldnumber+0x1e>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
 800e3fe:	7afb      	ldrb	r3, [r7, #11]
 800e400:	2b3a      	cmp	r3, #58	@ 0x3a
 800e402:	d11d      	bne.n	800e440 <get_ldnumber+0x76>
		i = FF_VOLUMES;
 800e404:	2301      	movs	r3, #1
 800e406:	613b      	str	r3, [r7, #16]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e40e:	d90c      	bls.n	800e42a <get_ldnumber+0x60>
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b39      	cmp	r3, #57	@ 0x39
 800e416:	d808      	bhi.n	800e42a <get_ldnumber+0x60>
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	3302      	adds	r3, #2
 800e41c:	697a      	ldr	r2, [r7, #20]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d103      	bne.n	800e42a <get_ldnumber+0x60>
			i = (int)*tp - '0';	/* Get the logical drive number */
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	3b30      	subs	r3, #48	@ 0x30
 800e428:	613b      	str	r3, [r7, #16]
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	dd02      	ble.n	800e436 <get_ldnumber+0x6c>
 800e430:	f04f 33ff 	mov.w	r3, #4294967295
 800e434:	e005      	b.n	800e442 <get_ldnumber+0x78>
		*path = tt;		/* Snip the drive prefix off */
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	697a      	ldr	r2, [r7, #20]
 800e43a:	601a      	str	r2, [r3, #0]
		return i;		/* Return the found drive number */
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	e000      	b.n	800e442 <get_ldnumber+0x78>
#endif
	/* No drive prefix */
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
 800e440:	2300      	movs	r3, #0
#endif
}
 800e442:	4618      	mov	r0, r3
 800e444:	371c      	adds	r7, #28
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr
	...

0800e450 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	711a      	strb	r2, [r3, #4]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f04f 32ff 	mov.w	r2, #4294967295
 800e466:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7fd face 	bl	800ba0c <move_window>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d001      	beq.n	800e47a <check_fs+0x2a>
 800e476:	2304      	movs	r3, #4
 800e478:	e099      	b.n	800e5ae <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	333c      	adds	r3, #60	@ 0x3c
 800e47e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e482:	4618      	mov	r0, r3
 800e484:	f7fc ffda 	bl	800b43c <ld_word>
 800e488:	4603      	mov	r3, r0
 800e48a:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 800e48c:	89fb      	ldrh	r3, [r7, #14]
 800e48e:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800e492:	4293      	cmp	r3, r2
 800e494:	d10b      	bne.n	800e4ae <check_fs+0x5e>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	333c      	adds	r3, #60	@ 0x3c
 800e49a:	220b      	movs	r2, #11
 800e49c:	4946      	ldr	r1, [pc, #280]	@ (800e5b8 <check_fs+0x168>)
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f003 fd43 	bl	8011f2a <memcmp>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d101      	bne.n	800e4ae <check_fs+0x5e>
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e07f      	b.n	800e5ae <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e4b4:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800e4b6:	7b7b      	ldrb	r3, [r7, #13]
 800e4b8:	2beb      	cmp	r3, #235	@ 0xeb
 800e4ba:	d005      	beq.n	800e4c8 <check_fs+0x78>
 800e4bc:	7b7b      	ldrb	r3, [r7, #13]
 800e4be:	2be9      	cmp	r3, #233	@ 0xe9
 800e4c0:	d002      	beq.n	800e4c8 <check_fs+0x78>
 800e4c2:	7b7b      	ldrb	r3, [r7, #13]
 800e4c4:	2be8      	cmp	r3, #232	@ 0xe8
 800e4c6:	d16a      	bne.n	800e59e <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800e4c8:	89fb      	ldrh	r3, [r7, #14]
 800e4ca:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d10c      	bne.n	800e4ec <check_fs+0x9c>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	333c      	adds	r3, #60	@ 0x3c
 800e4d6:	3352      	adds	r3, #82	@ 0x52
 800e4d8:	2208      	movs	r2, #8
 800e4da:	4938      	ldr	r1, [pc, #224]	@ (800e5bc <check_fs+0x16c>)
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f003 fd24 	bl	8011f2a <memcmp>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d101      	bne.n	800e4ec <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	e060      	b.n	800e5ae <check_fs+0x15e>
		}
		/* FAT volumes created in the early MS-DOS era lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	333c      	adds	r3, #60	@ 0x3c
 800e4f0:	330b      	adds	r3, #11
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fc ffa2 	bl	800b43c <ld_word>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800e502:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800e504:	897a      	ldrh	r2, [r7, #10]
 800e506:	897b      	ldrh	r3, [r7, #10]
 800e508:	3b01      	subs	r3, #1
 800e50a:	4013      	ands	r3, r2
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d146      	bne.n	800e59e <check_fs+0x14e>
 800e510:	897b      	ldrh	r3, [r7, #10]
 800e512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e516:	d342      	bcc.n	800e59e <check_fs+0x14e>
 800e518:	897b      	ldrh	r3, [r7, #10]
 800e51a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e51e:	d83e      	bhi.n	800e59e <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800e520:	7b7b      	ldrb	r3, [r7, #13]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d03b      	beq.n	800e59e <check_fs+0x14e>
 800e526:	7b7a      	ldrb	r2, [r7, #13]
 800e528:	7b7b      	ldrb	r3, [r7, #13]
 800e52a:	3b01      	subs	r3, #1
 800e52c:	4013      	ands	r3, r2
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d135      	bne.n	800e59e <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of number of reserved sectors (MNBZ) */
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	333c      	adds	r3, #60	@ 0x3c
 800e536:	330e      	adds	r3, #14
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fc ff7f 	bl	800b43c <ld_word>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d02c      	beq.n	800e59e <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e54a:	3b01      	subs	r3, #1
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	d826      	bhi.n	800e59e <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir size (MNBZ) */
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	333c      	adds	r3, #60	@ 0x3c
 800e554:	3311      	adds	r3, #17
 800e556:	4618      	mov	r0, r3
 800e558:	f7fc ff70 	bl	800b43c <ld_word>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d01d      	beq.n	800e59e <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	333c      	adds	r3, #60	@ 0x3c
 800e566:	3313      	adds	r3, #19
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fc ff67 	bl	800b43c <ld_word>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b7f      	cmp	r3, #127	@ 0x7f
 800e572:	d809      	bhi.n	800e588 <check_fs+0x138>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	333c      	adds	r3, #60	@ 0x3c
 800e578:	3320      	adds	r3, #32
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fc ff76 	bl	800b46c <ld_dword>
 800e580:	4603      	mov	r3, r0
 800e582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e586:	d30a      	bcc.n	800e59e <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	333c      	adds	r3, #60	@ 0x3c
 800e58c:	3316      	adds	r3, #22
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fc ff54 	bl	800b43c <ld_word>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 800e59a:	2300      	movs	r3, #0
 800e59c:	e007      	b.n	800e5ae <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 800e59e:	89fb      	ldrh	r3, [r7, #14]
 800e5a0:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d101      	bne.n	800e5ac <check_fs+0x15c>
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	e000      	b.n	800e5ae <check_fs+0x15e>
 800e5ac:	2303      	movs	r3, #3
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0801336c 	.word	0x0801336c
 800e5bc:	08013378 	.word	0x08013378

0800e5c0 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b088      	sub	sp, #32
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff ff3f 	bl	800e450 <check_fs>
 800e5d2:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d007      	beq.n	800e5ea <find_volume+0x2a>
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	2b02      	cmp	r3, #2
 800e5de:	d802      	bhi.n	800e5e6 <find_volume+0x26>
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d101      	bne.n	800e5ea <find_volume+0x2a>
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	e045      	b.n	800e676 <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	61fb      	str	r3, [r7, #28]
 800e5ee:	e014      	b.n	800e61a <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	011b      	lsls	r3, r3, #4
 800e5fa:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 800e5fe:	4413      	add	r3, r2
 800e600:	4618      	mov	r0, r3
 800e602:	f7fc ff33 	bl	800b46c <ld_dword>
 800e606:	4602      	mov	r2, r0
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	3320      	adds	r3, #32
 800e60e:	443b      	add	r3, r7
 800e610:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	3301      	adds	r3, #1
 800e618:	61fb      	str	r3, [r7, #28]
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	2b03      	cmp	r3, #3
 800e61e:	d9e7      	bls.n	800e5f0 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d002      	beq.n	800e62c <find_volume+0x6c>
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	3b01      	subs	r3, #1
 800e62a:	e000      	b.n	800e62e <find_volume+0x6e>
 800e62c:	2300      	movs	r3, #0
 800e62e:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800e630:	69fb      	ldr	r3, [r7, #28]
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	3320      	adds	r3, #32
 800e636:	443b      	add	r3, r7
 800e638:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00b      	beq.n	800e658 <find_volume+0x98>
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	3320      	adds	r3, #32
 800e646:	443b      	add	r3, r7
 800e648:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e64c:	4619      	mov	r1, r3
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f7ff fefe 	bl	800e450 <check_fs>
 800e654:	4603      	mov	r3, r0
 800e656:	e000      	b.n	800e65a <find_volume+0x9a>
 800e658:	2303      	movs	r3, #3
 800e65a:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d108      	bne.n	800e674 <find_volume+0xb4>
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	2b01      	cmp	r3, #1
 800e666:	d905      	bls.n	800e674 <find_volume+0xb4>
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	3301      	adds	r3, #1
 800e66c:	61fb      	str	r3, [r7, #28]
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	2b03      	cmp	r3, #3
 800e672:	d9dd      	bls.n	800e630 <find_volume+0x70>
	return fmt;
 800e674:	69bb      	ldr	r3, [r7, #24]
}
 800e676:	4618      	mov	r0, r3
 800e678:	3720      	adds	r7, #32
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
	...

0800e680 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800e680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e684:	b09a      	sub	sp, #104	@ 0x68
 800e686:	af00      	add	r7, sp, #0
 800e688:	61f8      	str	r0, [r7, #28]
 800e68a:	61b9      	str	r1, [r7, #24]
 800e68c:	4613      	mov	r3, r2
 800e68e:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e696:	69f8      	ldr	r0, [r7, #28]
 800e698:	f7ff fe97 	bl	800e3ca <get_ldnumber>
 800e69c:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 800e69e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	da01      	bge.n	800e6a8 <mount_volume+0x28>
 800e6a4:	230b      	movs	r3, #11
 800e6a6:	e320      	b.n	800ecea <mount_volume+0x66a>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800e6a8:	4aa4      	ldr	r2, [pc, #656]	@ (800e93c <mount_volume+0x2bc>)
 800e6aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6b0:	647b      	str	r3, [r7, #68]	@ 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800e6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d101      	bne.n	800e6bc <mount_volume+0x3c>
 800e6b8:	230c      	movs	r3, #12
 800e6ba:	e316      	b.n	800ecea <mount_volume+0x66a>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e6c0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e6c2:	7dfb      	ldrb	r3, [r7, #23]
 800e6c4:	f023 0301 	bic.w	r3, r3, #1
 800e6c8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800e6ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d01a      	beq.n	800e708 <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
 800e6d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6d4:	785b      	ldrb	r3, [r3, #1]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7fc f97c 	bl	800a9d4 <disk_status>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e6e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10c      	bne.n	800e708 <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d007      	beq.n	800e704 <mount_volume+0x84>
 800e6f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e6f8:	f003 0304 	and.w	r3, r3, #4
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
 800e700:	230a      	movs	r3, #10
 800e702:	e2f2      	b.n	800ecea <mount_volume+0x66a>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800e704:	2300      	movs	r3, #0
 800e706:	e2f0      	b.n	800ecea <mount_volume+0x66a>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800e708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e70a:	2200      	movs	r2, #0
 800e70c:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800e70e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e710:	785b      	ldrb	r3, [r3, #1]
 800e712:	4618      	mov	r0, r3
 800e714:	f7fc f96c 	bl	800a9f0 <disk_initialize>
 800e718:	4603      	mov	r3, r0
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e71e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e722:	f003 0301 	and.w	r3, r3, #1
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <mount_volume+0xae>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e72a:	2303      	movs	r3, #3
 800e72c:	e2dd      	b.n	800ecea <mount_volume+0x66a>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e72e:	7dfb      	ldrb	r3, [r7, #23]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d007      	beq.n	800e744 <mount_volume+0xc4>
 800e734:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e738:	f003 0304 	and.w	r3, r3, #4
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <mount_volume+0xc4>
		return FR_WRITE_PROTECTED;
 800e740:	230a      	movs	r3, #10
 800e742:	e2d2      	b.n	800ecea <mount_volume+0x66a>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800e744:	2100      	movs	r1, #0
 800e746:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e748:	f7ff ff3a 	bl	800e5c0 <find_volume>
 800e74c:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800e74e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e750:	2b04      	cmp	r3, #4
 800e752:	d101      	bne.n	800e758 <mount_volume+0xd8>
 800e754:	2301      	movs	r3, #1
 800e756:	e2c8      	b.n	800ecea <mount_volume+0x66a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d901      	bls.n	800e762 <mount_volume+0xe2>
 800e75e:	230d      	movs	r3, #13
 800e760:	e2c3      	b.n	800ecea <mount_volume+0x66a>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800e762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e766:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 800e768:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	f040 8141 	bne.w	800e9f2 <mount_volume+0x372>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800e770:	230b      	movs	r3, #11
 800e772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e774:	e002      	b.n	800e77c <mount_volume+0xfc>
 800e776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e778:	3301      	adds	r3, #1
 800e77a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e77c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e77e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e780:	d806      	bhi.n	800e790 <mount_volume+0x110>
 800e782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e786:	4413      	add	r3, r2
 800e788:	333c      	adds	r3, #60	@ 0x3c
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d0f2      	beq.n	800e776 <mount_volume+0xf6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800e790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e792:	2b3f      	cmp	r3, #63	@ 0x3f
 800e794:	d801      	bhi.n	800e79a <mount_volume+0x11a>
 800e796:	230d      	movs	r3, #13
 800e798:	e2a7      	b.n	800ecea <mount_volume+0x66a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800e79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e79c:	333c      	adds	r3, #60	@ 0x3c
 800e79e:	3368      	adds	r3, #104	@ 0x68
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fc fe4b 	bl	800b43c <ld_word>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7ac:	d001      	beq.n	800e7b2 <mount_volume+0x132>
 800e7ae:	230d      	movs	r3, #13
 800e7b0:	e29b      	b.n	800ecea <mount_volume+0x66a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800e7b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7b4:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800e7b8:	2b09      	cmp	r3, #9
 800e7ba:	d001      	beq.n	800e7c0 <mount_volume+0x140>
			return FR_NO_FILESYSTEM;
 800e7bc:	230d      	movs	r3, #13
 800e7be:	e294      	b.n	800ecea <mount_volume+0x66a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 800e7c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7c2:	333c      	adds	r3, #60	@ 0x3c
 800e7c4:	3348      	adds	r3, #72	@ 0x48
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f7fc fe73 	bl	800b4b2 <ld_qword>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	460b      	mov	r3, r1
 800e7d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e7d2:	2000      	movs	r0, #0
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	68b9      	ldr	r1, [r7, #8]
 800e7da:	1851      	adds	r1, r2, r1
 800e7dc:	6039      	str	r1, [r7, #0]
 800e7de:	68f9      	ldr	r1, [r7, #12]
 800e7e0:	eb43 0101 	adc.w	r1, r3, r1
 800e7e4:	6079      	str	r1, [r7, #4]
 800e7e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 800e7ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d301      	bcc.n	800e7fa <mount_volume+0x17a>
 800e7f6:	230d      	movs	r3, #13
 800e7f8:	e277      	b.n	800ecea <mount_volume+0x66a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800e7fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7fc:	333c      	adds	r3, #60	@ 0x3c
 800e7fe:	3354      	adds	r3, #84	@ 0x54
 800e800:	4618      	mov	r0, r3
 800e802:	f7fc fe33 	bl	800b46c <ld_dword>
 800e806:	4602      	mov	r2, r0
 800e808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e80a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800e80c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e80e:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 800e812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e814:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800e816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e818:	78db      	ldrb	r3, [r3, #3]
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d001      	beq.n	800e822 <mount_volume+0x1a2>
 800e81e:	230d      	movs	r3, #13
 800e820:	e263      	b.n	800ecea <mount_volume+0x66a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800e822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e824:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800e828:	461a      	mov	r2, r3
 800e82a:	2301      	movs	r3, #1
 800e82c:	4093      	lsls	r3, r2
 800e82e:	b29a      	uxth	r2, r3
 800e830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e832:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800e834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e836:	895b      	ldrh	r3, [r3, #10]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d101      	bne.n	800e840 <mount_volume+0x1c0>
 800e83c:	230d      	movs	r3, #13
 800e83e:	e254      	b.n	800ecea <mount_volume+0x66a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800e840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e842:	333c      	adds	r3, #60	@ 0x3c
 800e844:	335c      	adds	r3, #92	@ 0x5c
 800e846:	4618      	mov	r0, r3
 800e848:	f7fc fe10 	bl	800b46c <ld_dword>
 800e84c:	6338      	str	r0, [r7, #48]	@ 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800e84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e850:	4a3b      	ldr	r2, [pc, #236]	@ (800e940 <mount_volume+0x2c0>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d901      	bls.n	800e85a <mount_volume+0x1da>
 800e856:	230d      	movs	r3, #13
 800e858:	e247      	b.n	800ecea <mount_volume+0x66a>
		fs->n_fatent = nclst + 2;
 800e85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e85c:	1c9a      	adds	r2, r3, #2
 800e85e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e860:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800e862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e864:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e866:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800e868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e86a:	333c      	adds	r3, #60	@ 0x3c
 800e86c:	3358      	adds	r3, #88	@ 0x58
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fc fdfc 	bl	800b46c <ld_dword>
 800e874:	4602      	mov	r2, r0
 800e876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e878:	441a      	add	r2, r3
 800e87a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e87c:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800e87e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e880:	333c      	adds	r3, #60	@ 0x3c
 800e882:	3350      	adds	r3, #80	@ 0x50
 800e884:	4618      	mov	r0, r3
 800e886:	f7fc fdf1 	bl	800b46c <ld_dword>
 800e88a:	4602      	mov	r2, r0
 800e88c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e88e:	441a      	add	r2, r3
 800e890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e892:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 800e894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e898:	2200      	movs	r2, #0
 800e89a:	469a      	mov	sl, r3
 800e89c:	4693      	mov	fp, r2
 800e89e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8a0:	895b      	ldrh	r3, [r3, #10]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8a6:	fb02 f303 	mul.w	r3, r2, r3
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	4698      	mov	r8, r3
 800e8ae:	4691      	mov	r9, r2
 800e8b0:	eb1a 0408 	adds.w	r4, sl, r8
 800e8b4:	eb4b 0509 	adc.w	r5, fp, r9
 800e8b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e8bc:	42a2      	cmp	r2, r4
 800e8be:	41ab      	sbcs	r3, r5
 800e8c0:	d201      	bcs.n	800e8c6 <mount_volume+0x246>
 800e8c2:	230d      	movs	r3, #13
 800e8c4:	e211      	b.n	800ecea <mount_volume+0x66a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800e8c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8c8:	333c      	adds	r3, #60	@ 0x3c
 800e8ca:	3360      	adds	r3, #96	@ 0x60
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7fc fdcd 	bl	800b46c <ld_dword>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8d6:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e8dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8de:	657b      	str	r3, [r7, #84]	@ 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 800e8e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d11c      	bne.n	800e920 <mount_volume+0x2a0>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800e8e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8e8:	895b      	ldrh	r3, [r3, #10]
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d301      	bcc.n	800e8f6 <mount_volume+0x276>
 800e8f2:	230d      	movs	r3, #13
 800e8f4:	e1f9      	b.n	800ecea <mount_volume+0x66a>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800e8f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e8fe:	f7fd f997 	bl	800bc30 <clst2sect>
 800e902:	4602      	mov	r2, r0
 800e904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e906:	4413      	add	r3, r2
 800e908:	4619      	mov	r1, r3
 800e90a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e90c:	f7fd f87e 	bl	800ba0c <move_window>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d001      	beq.n	800e91a <mount_volume+0x29a>
 800e916:	2301      	movs	r3, #1
 800e918:	e1e7      	b.n	800ecea <mount_volume+0x66a>
				so++;
 800e91a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e91c:	3301      	adds	r3, #1
 800e91e:	657b      	str	r3, [r7, #84]	@ 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800e920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e924:	4413      	add	r3, r2
 800e926:	333c      	adds	r3, #60	@ 0x3c
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	2b81      	cmp	r3, #129	@ 0x81
 800e92c:	d00a      	beq.n	800e944 <mount_volume+0x2c4>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800e92e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e930:	3320      	adds	r3, #32
 800e932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e936:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (i == 0) {
 800e938:	e7d2      	b.n	800e8e0 <mount_volume+0x260>
 800e93a:	bf00      	nop
 800e93c:	2000e7a0 	.word	0x2000e7a0
 800e940:	7ffffffd 	.word	0x7ffffffd
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800e944:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 800e946:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e948:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e94c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e94e:	3314      	adds	r3, #20
 800e950:	4413      	add	r3, r2
 800e952:	4618      	mov	r0, r3
 800e954:	f7fc fd8a 	bl	800b46c <ld_dword>
 800e958:	6538      	str	r0, [r7, #80]	@ 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 800e95a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d904      	bls.n	800e96a <mount_volume+0x2ea>
 800e960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e966:	429a      	cmp	r2, r3
 800e968:	d301      	bcc.n	800e96e <mount_volume+0x2ee>
 800e96a:	230d      	movs	r3, #13
 800e96c:	e1bd      	b.n	800ecea <mount_volume+0x66a>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800e96e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e970:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e974:	895b      	ldrh	r3, [r3, #10]
 800e976:	4619      	mov	r1, r3
 800e978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e97a:	3b02      	subs	r3, #2
 800e97c:	fb01 f303 	mul.w	r3, r1, r3
 800e980:	441a      	add	r2, r3
 800e982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e984:	635a      	str	r2, [r3, #52]	@ 0x34
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 800e986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e988:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e98a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e98c:	09db      	lsrs	r3, r3, #7
 800e98e:	4413      	add	r3, r2
 800e990:	4619      	mov	r1, r3
 800e992:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e994:	f7fd f83a 	bl	800ba0c <move_window>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d001      	beq.n	800e9a2 <mount_volume+0x322>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e1a3      	b.n	800ecea <mount_volume+0x66a>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800e9a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9a4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800e9a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fc fd5a 	bl	800b46c <ld_dword>
 800e9b8:	6278      	str	r0, [r7, #36]	@ 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c0:	d008      	beq.n	800e9d4 <mount_volume+0x354>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 800e9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e9c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d0da      	beq.n	800e986 <mount_volume+0x306>
 800e9d0:	230d      	movs	r3, #13
 800e9d2:	e18a      	b.n	800ecea <mount_volume+0x66a>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800e9d4:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 800e9d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9dc:	619a      	str	r2, [r3, #24]
 800e9de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9e0:	699a      	ldr	r2, [r3, #24]
 800e9e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0;	/* Enable to sync PercInUse value in VBR */
 800e9e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	715a      	strb	r2, [r3, #5]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800e9ec:	2304      	movs	r3, #4
 800e9ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e9f0:	e166      	b.n	800ecc0 <mount_volume+0x640>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e9f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9f4:	333c      	adds	r3, #60	@ 0x3c
 800e9f6:	330b      	adds	r3, #11
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7fc fd1f 	bl	800b43c <ld_word>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea04:	d001      	beq.n	800ea0a <mount_volume+0x38a>
 800ea06:	230d      	movs	r3, #13
 800ea08:	e16f      	b.n	800ecea <mount_volume+0x66a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ea0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea0c:	333c      	adds	r3, #60	@ 0x3c
 800ea0e:	3316      	adds	r3, #22
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fc fd13 	bl	800b43c <ld_word>
 800ea16:	4603      	mov	r3, r0
 800ea18:	663b      	str	r3, [r7, #96]	@ 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ea1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d106      	bne.n	800ea2e <mount_volume+0x3ae>
 800ea20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea22:	333c      	adds	r3, #60	@ 0x3c
 800ea24:	3324      	adds	r3, #36	@ 0x24
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fc fd20 	bl	800b46c <ld_dword>
 800ea2c:	6638      	str	r0, [r7, #96]	@ 0x60
		fs->fsize = fasize;
 800ea2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ea32:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ea34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea36:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800ea3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea3c:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ea3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea40:	78db      	ldrb	r3, [r3, #3]
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d005      	beq.n	800ea52 <mount_volume+0x3d2>
 800ea46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea48:	78db      	ldrb	r3, [r3, #3]
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d001      	beq.n	800ea52 <mount_volume+0x3d2>
 800ea4e:	230d      	movs	r3, #13
 800ea50:	e14b      	b.n	800ecea <mount_volume+0x66a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ea52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea54:	78db      	ldrb	r3, [r3, #3]
 800ea56:	461a      	mov	r2, r3
 800ea58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea5a:	fb02 f303 	mul.w	r3, r2, r3
 800ea5e:	663b      	str	r3, [r7, #96]	@ 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ea60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea62:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800ea66:	461a      	mov	r2, r3
 800ea68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea6a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ea6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea6e:	895b      	ldrh	r3, [r3, #10]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d008      	beq.n	800ea86 <mount_volume+0x406>
 800ea74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea76:	895b      	ldrh	r3, [r3, #10]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea7c:	895b      	ldrh	r3, [r3, #10]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	4013      	ands	r3, r2
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <mount_volume+0x40a>
 800ea86:	230d      	movs	r3, #13
 800ea88:	e12f      	b.n	800ecea <mount_volume+0x66a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ea8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea8c:	333c      	adds	r3, #60	@ 0x3c
 800ea8e:	3311      	adds	r3, #17
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7fc fcd3 	bl	800b43c <ld_word>
 800ea96:	4603      	mov	r3, r0
 800ea98:	461a      	mov	r2, r3
 800ea9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea9c:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ea9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaa0:	891b      	ldrh	r3, [r3, #8]
 800eaa2:	f003 030f 	and.w	r3, r3, #15
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d001      	beq.n	800eab0 <mount_volume+0x430>
 800eaac:	230d      	movs	r3, #13
 800eaae:	e11c      	b.n	800ecea <mount_volume+0x66a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800eab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eab2:	333c      	adds	r3, #60	@ 0x3c
 800eab4:	3313      	adds	r3, #19
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fc fcc0 	bl	800b43c <ld_word>
 800eabc:	4603      	mov	r3, r0
 800eabe:	667b      	str	r3, [r7, #100]	@ 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800eac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d106      	bne.n	800ead4 <mount_volume+0x454>
 800eac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eac8:	333c      	adds	r3, #60	@ 0x3c
 800eaca:	3320      	adds	r3, #32
 800eacc:	4618      	mov	r0, r3
 800eace:	f7fc fccd 	bl	800b46c <ld_dword>
 800ead2:	6678      	str	r0, [r7, #100]	@ 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ead4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ead6:	333c      	adds	r3, #60	@ 0x3c
 800ead8:	330e      	adds	r3, #14
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fc fcae 	bl	800b43c <ld_word>
 800eae0:	4603      	mov	r3, r0
 800eae2:	877b      	strh	r3, [r7, #58]	@ 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800eae4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d101      	bne.n	800eaee <mount_volume+0x46e>
 800eaea:	230d      	movs	r3, #13
 800eaec:	e0fd      	b.n	800ecea <mount_volume+0x66a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800eaee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800eaf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eaf2:	4413      	add	r3, r2
 800eaf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eaf6:	8912      	ldrh	r2, [r2, #8]
 800eaf8:	0912      	lsrs	r2, r2, #4
 800eafa:	b292      	uxth	r2, r2
 800eafc:	4413      	add	r3, r2
 800eafe:	637b      	str	r3, [r7, #52]	@ 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eb00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eb02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d201      	bcs.n	800eb0c <mount_volume+0x48c>
 800eb08:	230d      	movs	r3, #13
 800eb0a:	e0ee      	b.n	800ecea <mount_volume+0x66a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800eb0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eb0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb14:	8952      	ldrh	r2, [r2, #10]
 800eb16:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb1a:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d101      	bne.n	800eb26 <mount_volume+0x4a6>
 800eb22:	230d      	movs	r3, #13
 800eb24:	e0e1      	b.n	800ecea <mount_volume+0x66a>
		fmt = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2c:	4a71      	ldr	r2, [pc, #452]	@ (800ecf4 <mount_volume+0x674>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d801      	bhi.n	800eb36 <mount_volume+0x4b6>
 800eb32:	2303      	movs	r3, #3
 800eb34:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800eb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb38:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d801      	bhi.n	800eb44 <mount_volume+0x4c4>
 800eb40:	2302      	movs	r3, #2
 800eb42:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb46:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800eb4a:	4293      	cmp	r3, r2
 800eb4c:	d801      	bhi.n	800eb52 <mount_volume+0x4d2>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800eb52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d101      	bne.n	800eb5c <mount_volume+0x4dc>
 800eb58:	230d      	movs	r3, #13
 800eb5a:	e0c6      	b.n	800ecea <mount_volume+0x66a>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5e:	1c9a      	adds	r2, r3, #2
 800eb60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb62:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800eb64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb68:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eb6a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800eb6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb6e:	441a      	add	r2, r3
 800eb70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb72:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800eb74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb78:	441a      	add	r2, r3
 800eb7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb7c:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800eb7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb80:	2b03      	cmp	r3, #3
 800eb82:	d11e      	bne.n	800ebc2 <mount_volume+0x542>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800eb84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb86:	333c      	adds	r3, #60	@ 0x3c
 800eb88:	332a      	adds	r3, #42	@ 0x2a
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7fc fc56 	bl	800b43c <ld_word>
 800eb90:	4603      	mov	r3, r0
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d001      	beq.n	800eb9a <mount_volume+0x51a>
 800eb96:	230d      	movs	r3, #13
 800eb98:	e0a7      	b.n	800ecea <mount_volume+0x66a>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eb9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb9c:	891b      	ldrh	r3, [r3, #8]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <mount_volume+0x526>
 800eba2:	230d      	movs	r3, #13
 800eba4:	e0a1      	b.n	800ecea <mount_volume+0x66a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eba8:	333c      	adds	r3, #60	@ 0x3c
 800ebaa:	332c      	adds	r3, #44	@ 0x2c
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fc fc5d 	bl	800b46c <ld_dword>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebb6:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ebb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebba:	69db      	ldr	r3, [r3, #28]
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ebc0:	e01e      	b.n	800ec00 <mount_volume+0x580>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800ebc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebc4:	891b      	ldrh	r3, [r3, #8]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d101      	bne.n	800ebce <mount_volume+0x54e>
 800ebca:	230d      	movs	r3, #13
 800ebcc:	e08d      	b.n	800ecea <mount_volume+0x66a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ebce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ebd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebd4:	441a      	add	r2, r3
 800ebd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebd8:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ebda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d103      	bne.n	800ebe8 <mount_volume+0x568>
 800ebe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebe2:	69db      	ldr	r3, [r3, #28]
 800ebe4:	005b      	lsls	r3, r3, #1
 800ebe6:	e00a      	b.n	800ebfe <mount_volume+0x57e>
 800ebe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebea:	69da      	ldr	r2, [r3, #28]
 800ebec:	4613      	mov	r3, r2
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	4413      	add	r3, r2
 800ebf2:	085a      	lsrs	r2, r3, #1
 800ebf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebf6:	69db      	ldr	r3, [r3, #28]
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ebfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ec00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec02:	6a1a      	ldr	r2, [r3, #32]
 800ec04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec06:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ec0a:	0a5b      	lsrs	r3, r3, #9
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d201      	bcs.n	800ec14 <mount_volume+0x594>
 800ec10:	230d      	movs	r3, #13
 800ec12:	e06a      	b.n	800ecea <mount_volume+0x66a>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 800ec14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec16:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1a:	619a      	str	r2, [r3, #24]
 800ec1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec1e:	699a      	ldr	r2, [r3, #24]
 800ec20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec22:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 800ec24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec26:	2280      	movs	r2, #128	@ 0x80
 800ec28:	715a      	strb	r2, [r3, #5]
		if (fmt == FS_FAT32
 800ec2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec2c:	2b03      	cmp	r3, #3
 800ec2e:	d147      	bne.n	800ecc0 <mount_volume+0x640>
			&& ld_word(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 800ec30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec32:	333c      	adds	r3, #60	@ 0x3c
 800ec34:	3330      	adds	r3, #48	@ 0x30
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fc fc00 	bl	800b43c <ld_word>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d13e      	bne.n	800ecc0 <mount_volume+0x640>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ec42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec44:	3301      	adds	r3, #1
 800ec46:	4619      	mov	r1, r3
 800ec48:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ec4a:	f7fc fedf 	bl	800ba0c <move_window>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d135      	bne.n	800ecc0 <mount_volume+0x640>
		{
			fs->fsi_flag = 0;
 800ec54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec56:	2200      	movs	r2, #0
 800ec58:	715a      	strb	r2, [r3, #5]
			if (   ld_dword(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 800ec5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec5c:	333c      	adds	r3, #60	@ 0x3c
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fc fc04 	bl	800b46c <ld_dword>
 800ec64:	4603      	mov	r3, r0
 800ec66:	4a24      	ldr	r2, [pc, #144]	@ (800ecf8 <mount_volume+0x678>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d129      	bne.n	800ecc0 <mount_volume+0x640>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272
 800ec6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec6e:	333c      	adds	r3, #60	@ 0x3c
 800ec70:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fc fbf9 	bl	800b46c <ld_dword>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	4a1f      	ldr	r2, [pc, #124]	@ (800ecfc <mount_volume+0x67c>)
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d11e      	bne.n	800ecc0 <mount_volume+0x640>
				&& ld_dword(fs->win + FSI_TrailSig) == 0xAA550000)
 800ec82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec84:	333c      	adds	r3, #60	@ 0x3c
 800ec86:	f503 73f9 	add.w	r3, r3, #498	@ 0x1f2
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7fc fbee 	bl	800b46c <ld_dword>
 800ec90:	4603      	mov	r3, r0
 800ec92:	4a1b      	ldr	r2, [pc, #108]	@ (800ed00 <mount_volume+0x680>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d113      	bne.n	800ecc0 <mount_volume+0x640>
			{
#if (FF_FS_NOFSINFO & 1) == 0	/* Get free cluster count if trust it */
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ec98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec9a:	333c      	adds	r3, #60	@ 0x3c
 800ec9c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fc fbe3 	bl	800b46c <ld_dword>
 800eca6:	4602      	mov	r2, r0
 800eca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecaa:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0	/* Get next free cluster if rtust it */
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ecac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecae:	333c      	adds	r3, #60	@ 0x3c
 800ecb0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fc fbd9 	bl	800b46c <ld_dword>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecbe:	615a      	str	r2, [r3, #20]
			}
		}
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800ecc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ecc2:	b2da      	uxtb	r2, r3
 800ecc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecc6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800ecc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ed04 <mount_volume+0x684>)
 800ecca:	881b      	ldrh	r3, [r3, #0]
 800eccc:	3301      	adds	r3, #1
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	4b0c      	ldr	r3, [pc, #48]	@ (800ed04 <mount_volume+0x684>)
 800ecd2:	801a      	strh	r2, [r3, #0]
 800ecd4:	4b0b      	ldr	r3, [pc, #44]	@ (800ed04 <mount_volume+0x684>)
 800ecd6:	881a      	ldrh	r2, [r3, #0]
 800ecd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecda:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ecdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecde:	4a0a      	ldr	r2, [pc, #40]	@ (800ed08 <mount_volume+0x688>)
 800ece0:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800ece2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ece4:	4a09      	ldr	r2, [pc, #36]	@ (800ed0c <mount_volume+0x68c>)
 800ece6:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800ece8:	2300      	movs	r3, #0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3768      	adds	r7, #104	@ 0x68
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ecf4:	0ffffff5 	.word	0x0ffffff5
 800ecf8:	41615252 	.word	0x41615252
 800ecfc:	61417272 	.word	0x61417272
 800ed00:	aa550000 	.word	0xaa550000
 800ed04:	2000e7a4 	.word	0x2000e7a4
 800ed08:	2000ea08 	.word	0x2000ea08
 800ed0c:	2000e7a8 	.word	0x2000e7a8

0800ed10 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ed1a:	2309      	movs	r3, #9
 800ed1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d01c      	beq.n	800ed5e <validate+0x4e>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d018      	beq.n	800ed5e <validate+0x4e>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d013      	beq.n	800ed5e <validate+0x4e>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	889a      	ldrh	r2, [r3, #4]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	88db      	ldrh	r3, [r3, #6]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d10c      	bne.n	800ed5e <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	785b      	ldrb	r3, [r3, #1]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f7fb fe42 	bl	800a9d4 <disk_status>
 800ed50:	4603      	mov	r3, r0
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <validate+0x4e>
			res = FR_OK;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800ed5e:	7bfb      	ldrb	r3, [r7, #15]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d102      	bne.n	800ed6a <validate+0x5a>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	e000      	b.n	800ed6c <validate+0x5c>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	6013      	str	r3, [r2, #0]
	return res;
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
	...

0800ed7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b088      	sub	sp, #32
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	4613      	mov	r3, r2
 800ed88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800ed8e:	f107 0310 	add.w	r3, r7, #16
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff fb19 	bl	800e3ca <get_ldnumber>
 800ed98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed9a:	69fb      	ldr	r3, [r7, #28]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	da01      	bge.n	800eda4 <f_mount+0x28>
 800eda0:	230b      	movs	r3, #11
 800eda2:	e02e      	b.n	800ee02 <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800eda4:	4a19      	ldr	r2, [pc, #100]	@ (800ee0c <f_mount+0x90>)
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edac:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if registered */
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d007      	beq.n	800edc4 <f_mount+0x48>
		FatFs[vol] = 0;
 800edb4:	4a15      	ldr	r2, [pc, #84]	@ (800ee0c <f_mount+0x90>)
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	2100      	movs	r1, #0
 800edba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	2200      	movs	r2, #0
 800edc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00b      	beq.n	800ede2 <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	69fa      	ldr	r2, [r7, #28]
 800edce:	b2d2      	uxtb	r2, r2
 800edd0:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	490c      	ldr	r1, [pc, #48]	@ (800ee0c <f_mount+0x90>)
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800ede2:	79fb      	ldrb	r3, [r7, #7]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d101      	bne.n	800edec <f_mount+0x70>
 800ede8:	2300      	movs	r3, #0
 800edea:	e00a      	b.n	800ee02 <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800edec:	f107 010c 	add.w	r1, r7, #12
 800edf0:	f107 0308 	add.w	r3, r7, #8
 800edf4:	2200      	movs	r2, #0
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff fc42 	bl	800e680 <mount_volume>
 800edfc:	4603      	mov	r3, r0
 800edfe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ee00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3720      	adds	r7, #32
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	2000e7a0 	.word	0x2000e7a0

0800ee10 <get_fattime>:

DWORD get_fattime(void) {
 800ee10:	b480      	push	{r7}
 800ee12:	af00      	add	r7, sp, #0
    return 0; // Sin fecha ni hora
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800ee20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee24:	b0a7      	sub	sp, #156	@ 0x9c
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	61f8      	str	r0, [r7, #28]
 800ee2a:	61b9      	str	r1, [r7, #24]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d101      	bne.n	800ee3a <f_open+0x1a>
 800ee36:	2309      	movs	r3, #9
 800ee38:	e229      	b.n	800f28e <f_open+0x46e>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800ee3a:	7dfb      	ldrb	r3, [r7, #23]
 800ee3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ee40:	75fb      	strb	r3, [r7, #23]
	res = mount_volume(&path, &fs, mode);
 800ee42:	7dfa      	ldrb	r2, [r7, #23]
 800ee44:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800ee48:	f107 0318 	add.w	r3, r7, #24
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7ff fc17 	bl	800e680 <mount_volume>
 800ee52:	4603      	mov	r3, r0
 800ee54:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 800ee58:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f040 820d 	bne.w	800f27c <f_open+0x45c>
		dj.obj.fs = fs;
 800ee62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee64:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ee66:	69ba      	ldr	r2, [r7, #24]
 800ee68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7ff fa1c 	bl	800e2ac <follow_path>
 800ee74:	4603      	mov	r3, r0
 800ee76:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800ee7a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d107      	bne.n	800ee92 <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee82:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ee86:	b25b      	sxtb	r3, r3
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	da02      	bge.n	800ee92 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee8c:	2306      	movs	r3, #6
 800ee8e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee92:	7dfb      	ldrb	r3, [r7, #23]
 800ee94:	f003 031c 	and.w	r3, r3, #28
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 80d6 	beq.w	800f04a <f_open+0x22a>
			if (res != FR_OK) {					/* No file, create new */
 800ee9e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d010      	beq.n	800eec8 <f_open+0xa8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800eea6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800eeaa:	2b04      	cmp	r3, #4
 800eeac:	d107      	bne.n	800eebe <f_open+0x9e>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800eeae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe fcb0 	bl	800d818 <dir_register>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800eebe:	7dfb      	ldrb	r3, [r7, #23]
 800eec0:	f043 0308 	orr.w	r3, r3, #8
 800eec4:	75fb      	strb	r3, [r7, #23]
 800eec6:	e011      	b.n	800eeec <f_open+0xcc>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800eec8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800eecc:	f003 0311 	and.w	r3, r3, #17
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d003      	beq.n	800eedc <f_open+0xbc>
					res = FR_DENIED;
 800eed4:	2307      	movs	r3, #7
 800eed6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800eeda:	e007      	b.n	800eeec <f_open+0xcc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800eedc:	7dfb      	ldrb	r3, [r7, #23]
 800eede:	f003 0304 	and.w	r3, r3, #4
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d002      	beq.n	800eeec <f_open+0xcc>
 800eee6:	2308      	movs	r3, #8
 800eee8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800eeec:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	f040 80c6 	bne.w	800f082 <f_open+0x262>
 800eef6:	7dfb      	ldrb	r3, [r7, #23]
 800eef8:	f003 0308 	and.w	r3, r3, #8
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f000 80c0 	beq.w	800f082 <f_open+0x262>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ef02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	2b04      	cmp	r3, #4
 800ef08:	d14e      	bne.n	800efa8 <f_open+0x188>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800ef0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 800ef10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef12:	69fa      	ldr	r2, [r7, #28]
 800ef14:	4611      	mov	r1, r2
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fe f968 	bl	800d1ec <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef1e:	691b      	ldr	r3, [r3, #16]
 800ef20:	3302      	adds	r3, #2
 800ef22:	221e      	movs	r2, #30
 800ef24:	2100      	movs	r1, #0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f003 f829 	bl	8011f7e <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2e:	691b      	ldr	r3, [r3, #16]
 800ef30:	3326      	adds	r3, #38	@ 0x26
 800ef32:	221a      	movs	r2, #26
 800ef34:	2100      	movs	r1, #0
 800ef36:	4618      	mov	r0, r3
 800ef38:	f003 f821 	bl	8011f7e <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	3304      	adds	r3, #4
 800ef42:	2220      	movs	r2, #32
 800ef44:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 800ef46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef48:	691b      	ldr	r3, [r3, #16]
 800ef4a:	f103 0408 	add.w	r4, r3, #8
 800ef4e:	f7ff ff5f 	bl	800ee10 <get_fattime>
 800ef52:	4603      	mov	r3, r0
 800ef54:	4619      	mov	r1, r3
 800ef56:	4620      	mov	r0, r4
 800ef58:	f7fc fba1 	bl	800b69e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	3321      	adds	r3, #33	@ 0x21
 800ef62:	2201      	movs	r2, #1
 800ef64:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800ef66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe f9a0 	bl	800d2b0 <store_xdir>
 800ef70:	4603      	mov	r3, r0
 800ef72:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 800ef76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f040 8081 	bne.w	800f082 <f_open+0x262>
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d07c      	beq.n	800f082 <f_open+0x262>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800ef88:	69f8      	ldr	r0, [r7, #28]
 800ef8a:	69fb      	ldr	r3, [r7, #28]
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	4619      	mov	r1, r3
 800ef92:	f7fd f9c7 	bl	800c324 <remove_chain>
 800ef96:	4603      	mov	r3, r0
 800ef98:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	689a      	ldr	r2, [r3, #8]
 800efa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa2:	3a01      	subs	r2, #1
 800efa4:	615a      	str	r2, [r3, #20]
 800efa6:	e06c      	b.n	800f082 <f_open+0x262>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800efa8:	f7ff ff32 	bl	800ee10 <get_fattime>
 800efac:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					st_dword(dj.dir + DIR_CrtTime, tm);
 800efb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efb2:	330e      	adds	r3, #14
 800efb4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fc fb70 	bl	800b69e <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800efbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efc0:	3316      	adds	r3, #22
 800efc2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7fc fb69 	bl	800b69e <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800efcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800efd0:	4611      	mov	r1, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fd fd96 	bl	800cb04 <ld_clust>
 800efd8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800efdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efde:	330b      	adds	r3, #11
 800efe0:	2220      	movs	r2, #32
 800efe2:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800efe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800efe8:	2200      	movs	r2, #0
 800efea:	4618      	mov	r0, r3
 800efec:	f7fd fda9 	bl	800cb42 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eff2:	331c      	adds	r3, #28
 800eff4:	2100      	movs	r1, #0
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fc fb51 	bl	800b69e <st_dword>
					fs->wflag = 1;
 800effc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800effe:	2201      	movs	r2, #1
 800f000:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800f002:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f006:	2b00      	cmp	r3, #0
 800f008:	d03b      	beq.n	800f082 <f_open+0x262>
						sc = fs->winsect;
 800f00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f00e:	67fb      	str	r3, [r7, #124]	@ 0x7c
						res = remove_chain(&dj.obj, cl, 0);
 800f010:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f014:	2200      	movs	r2, #0
 800f016:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fd f982 	bl	800c324 <remove_chain>
 800f020:	4603      	mov	r3, r0
 800f022:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 800f026:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d129      	bne.n	800f082 <f_open+0x262>
							res = move_window(fs, sc);
 800f02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f030:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f032:	4618      	mov	r0, r3
 800f034:	f7fc fcea 	bl	800ba0c <move_window>
 800f038:	4603      	mov	r3, r0
 800f03a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f040:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f044:	3a01      	subs	r2, #1
 800f046:	615a      	str	r2, [r3, #20]
 800f048:	e01b      	b.n	800f082 <f_open+0x262>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800f04a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d117      	bne.n	800f082 <f_open+0x262>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800f052:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f056:	f003 0310 	and.w	r3, r3, #16
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d003      	beq.n	800f066 <f_open+0x246>
					res = FR_NO_FILE;
 800f05e:	2304      	movs	r3, #4
 800f060:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800f064:	e00d      	b.n	800f082 <f_open+0x262>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	f003 0302 	and.w	r3, r3, #2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d008      	beq.n	800f082 <f_open+0x262>
 800f070:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f074:	f003 0301 	and.w	r3, r3, #1
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d002      	beq.n	800f082 <f_open+0x262>
						res = FR_DENIED;
 800f07c:	2307      	movs	r3, #7
 800f07e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800f082:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f086:	2b00      	cmp	r3, #0
 800f088:	d10f      	bne.n	800f0aa <f_open+0x28a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800f08a:	7dfb      	ldrb	r3, [r7, #23]
 800f08c:	f003 0308 	and.w	r3, r3, #8
 800f090:	2b00      	cmp	r3, #0
 800f092:	d003      	beq.n	800f09c <f_open+0x27c>
 800f094:	7dfb      	ldrb	r3, [r7, #23]
 800f096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f09a:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800f0a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f0aa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f040 80e4 	bne.w	800f27c <f_open+0x45c>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	2b04      	cmp	r3, #4
 800f0ba:	d116      	bne.n	800f0ea <f_open+0x2ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800f0bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0be:	69fb      	ldr	r3, [r7, #28]
 800f0c0:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800f0c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f0cc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f0d0:	431a      	orrs	r2, r3
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800f0d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0de:	69fa      	ldr	r2, [r7, #28]
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7fe f882 	bl	800d1ec <init_alloc_info>
 800f0e8:	e016      	b.n	800f118 <f_open+0x2f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f0ee:	4611      	mov	r1, r2
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fd fd07 	bl	800cb04 <ld_clust>
 800f0f6:	4602      	mov	r2, r0
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f0fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0fe:	331c      	adds	r3, #28
 800f100:	4618      	mov	r0, r3
 800f102:	f7fc f9b3 	bl	800b46c <ld_dword>
 800f106:	4603      	mov	r3, r0
 800f108:	2200      	movs	r2, #0
 800f10a:	60bb      	str	r3, [r7, #8]
 800f10c:	60fa      	str	r2, [r7, #12]
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f114:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800f118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f120:	88da      	ldrh	r2, [r3, #6]
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	7dfa      	ldrb	r2, [r7, #23]
 800f12a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	2200      	movs	r2, #0
 800f132:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	2200      	movs	r2, #0
 800f13a:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 800f13c:	69f9      	ldr	r1, [r7, #28]
 800f13e:	f04f 0200 	mov.w	r2, #0
 800f142:	f04f 0300 	mov.w	r3, #0
 800f146:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	3350      	adds	r3, #80	@ 0x50
 800f14e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f152:	2100      	movs	r1, #0
 800f154:	4618      	mov	r0, r3
 800f156:	f002 ff12 	bl	8011f7e <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f15a:	7dfb      	ldrb	r3, [r7, #23]
 800f15c:	f003 0320 	and.w	r3, r3, #32
 800f160:	2b00      	cmp	r3, #0
 800f162:	f000 808b 	beq.w	800f27c <f_open+0x45c>
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	f000 8085 	beq.w	800f27c <f_open+0x45c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f172:	69fb      	ldr	r3, [r7, #28]
 800f174:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f178:	69f9      	ldr	r1, [r7, #28]
 800f17a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f180:	895b      	ldrh	r3, [r3, #10]
 800f182:	025b      	lsls	r3, r3, #9
 800f184:	67bb      	str	r3, [r7, #120]	@ 0x78
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	689b      	ldr	r3, [r3, #8]
 800f18a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f194:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800f198:	e025      	b.n	800f1e6 <f_open+0x3c6>
					clst = get_fat(&fp->obj, clst);
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f7fc fd65 	bl	800bc70 <get_fat>
 800f1a6:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800f1aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d802      	bhi.n	800f1b8 <f_open+0x398>
 800f1b2:	2302      	movs	r3, #2
 800f1b4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f1b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c0:	d102      	bne.n	800f1c8 <f_open+0x3a8>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f1c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	461d      	mov	r5, r3
 800f1ce:	4616      	mov	r6, r2
 800f1d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f1d4:	1b51      	subs	r1, r2, r5
 800f1d6:	6039      	str	r1, [r7, #0]
 800f1d8:	eb63 0306 	sbc.w	r3, r3, r6
 800f1dc:	607b      	str	r3, [r7, #4]
 800f1de:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f1e2:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
 800f1e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d109      	bne.n	800f202 <f_open+0x3e2>
 800f1ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	469a      	mov	sl, r3
 800f1f4:	4693      	mov	fp, r2
 800f1f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f1fa:	4592      	cmp	sl, r2
 800f1fc:	eb7b 0303 	sbcs.w	r3, fp, r3
 800f200:	d3cb      	bcc.n	800f19a <f_open+0x37a>
				}
				fp->clust = clst;
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f208:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f20a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d134      	bne.n	800f27c <f_open+0x45c>
 800f212:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800f216:	f3c2 0808 	ubfx	r8, r2, #0, #9
 800f21a:	f04f 0900 	mov.w	r9, #0
 800f21e:	ea58 0309 	orrs.w	r3, r8, r9
 800f222:	d02b      	beq.n	800f27c <f_open+0x45c>
					sc = clst2sect(fs, clst);
 800f224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f226:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fc fd00 	bl	800bc30 <clst2sect>
 800f230:	67f8      	str	r0, [r7, #124]	@ 0x7c
					if (sc == 0) {
 800f232:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <f_open+0x420>
						res = FR_INT_ERR;
 800f238:	2302      	movs	r3, #2
 800f23a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800f23e:	e01d      	b.n	800f27c <f_open+0x45c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f240:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800f244:	f04f 0200 	mov.w	r2, #0
 800f248:	f04f 0300 	mov.w	r3, #0
 800f24c:	0a42      	lsrs	r2, r0, #9
 800f24e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f252:	0a4b      	lsrs	r3, r1, #9
 800f254:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f256:	441a      	add	r2, r3
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	645a      	str	r2, [r3, #68]	@ 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25e:	7858      	ldrb	r0, [r3, #1]
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f26a:	2301      	movs	r3, #1
 800f26c:	f7fb fbce 	bl	800aa0c <disk_read>
 800f270:	4603      	mov	r3, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	d002      	beq.n	800f27c <f_open+0x45c>
 800f276:	2301      	movs	r3, #1
 800f278:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f27c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800f280:	2b00      	cmp	r3, #0
 800f282:	d002      	beq.n	800f28a <f_open+0x46a>
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	2200      	movs	r2, #0
 800f288:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f28a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800f28e:	4618      	mov	r0, r3
 800f290:	379c      	adds	r7, #156	@ 0x9c
 800f292:	46bd      	mov	sp, r7
 800f294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f298 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f29c:	b095      	sub	sp, #84	@ 0x54
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	61f8      	str	r0, [r7, #28]
 800f2a2:	61b9      	str	r1, [r7, #24]
 800f2a4:	617a      	str	r2, [r7, #20]
 800f2a6:	613b      	str	r3, [r7, #16]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f2b8:	4611      	mov	r1, r2
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7ff fd28 	bl	800ed10 <validate>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f2c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d108      	bne.n	800f2e0 <f_read+0x48>
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f2d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800f2d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d002      	beq.n	800f2e6 <f_read+0x4e>
 800f2e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800f2e4:	e13f      	b.n	800f566 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f2ec:	f003 0301 	and.w	r3, r3, #1
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d101      	bne.n	800f2f8 <f_read+0x60>
 800f2f4:	2307      	movs	r3, #7
 800f2f6:	e136      	b.n	800f566 <f_read+0x2ce>
	remain = fp->obj.objsize - fp->fptr;
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f304:	1a86      	subs	r6, r0, r2
 800f306:	603e      	str	r6, [r7, #0]
 800f308:	eb61 0303 	sbc.w	r3, r1, r3
 800f30c:	607b      	str	r3, [r7, #4]
 800f30e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f312:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	2200      	movs	r2, #0
 800f31a:	469a      	mov	sl, r3
 800f31c:	4693      	mov	fp, r2
 800f31e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800f322:	4552      	cmp	r2, sl
 800f324:	eb73 030b 	sbcs.w	r3, r3, fp
 800f328:	f080 8118 	bcs.w	800f55c <f_read+0x2c4>
 800f32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f32e:	617b      	str	r3, [r7, #20]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800f330:	e114      	b.n	800f55c <f_read+0x2c4>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f338:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f33c:	2500      	movs	r5, #0
 800f33e:	ea54 0305 	orrs.w	r3, r4, r5
 800f342:	f040 80cd 	bne.w	800f4e0 <f_read+0x248>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f346:	69fb      	ldr	r3, [r7, #28]
 800f348:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f34c:	f04f 0200 	mov.w	r2, #0
 800f350:	f04f 0300 	mov.w	r3, #0
 800f354:	0a42      	lsrs	r2, r0, #9
 800f356:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f35a:	0a4b      	lsrs	r3, r1, #9
 800f35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f35e:	895b      	ldrh	r3, [r3, #10]
 800f360:	3b01      	subs	r3, #1
 800f362:	4013      	ands	r3, r2
 800f364:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800f366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d126      	bne.n	800f3ba <f_read+0x122>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f36c:	69fb      	ldr	r3, [r7, #28]
 800f36e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f372:	4313      	orrs	r3, r2
 800f374:	d103      	bne.n	800f37e <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f37c:	e007      	b.n	800f38e <f_read+0xf6>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f37e:	69fa      	ldr	r2, [r7, #28]
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f384:	4619      	mov	r1, r3
 800f386:	4610      	mov	r0, r2
 800f388:	f7fc fc72 	bl	800bc70 <get_fat>
 800f38c:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f38e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f390:	2b01      	cmp	r3, #1
 800f392:	d805      	bhi.n	800f3a0 <f_read+0x108>
 800f394:	69fb      	ldr	r3, [r7, #28]
 800f396:	2202      	movs	r2, #2
 800f398:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f39c:	2302      	movs	r3, #2
 800f39e:	e0e2      	b.n	800f566 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f3a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3a6:	d105      	bne.n	800f3b4 <f_read+0x11c>
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e0d8      	b.n	800f566 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 800f3b4:	69fb      	ldr	r3, [r7, #28]
 800f3b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3b8:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800f3ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	4610      	mov	r0, r2
 800f3c4:	f7fc fc34 	bl	800bc30 <clst2sect>
 800f3c8:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800f3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d105      	bne.n	800f3dc <f_read+0x144>
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	2202      	movs	r2, #2
 800f3d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f3d8:	2302      	movs	r3, #2
 800f3da:	e0c4      	b.n	800f566 <f_read+0x2ce>
			sect += csect;
 800f3dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e0:	4413      	add	r3, r2
 800f3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	0a5b      	lsrs	r3, r3, #9
 800f3e8:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800f3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d03b      	beq.n	800f468 <f_read+0x1d0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f3f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3f4:	4413      	add	r3, r2
 800f3f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3f8:	8952      	ldrh	r2, [r2, #10]
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d905      	bls.n	800f40a <f_read+0x172>
					cc = fs->csize - csect;
 800f3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f400:	895b      	ldrh	r3, [r3, #10]
 800f402:	461a      	mov	r2, r3
 800f404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40c:	7858      	ldrb	r0, [r3, #1]
 800f40e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f412:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f414:	f7fb fafa 	bl	800aa0c <disk_read>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d005      	beq.n	800f42a <f_read+0x192>
 800f41e:	69fb      	ldr	r3, [r7, #28]
 800f420:	2201      	movs	r2, #1
 800f422:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f426:	2301      	movs	r3, #1
 800f428:	e09d      	b.n	800f566 <f_read+0x2ce>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f430:	b25b      	sxtb	r3, r3
 800f432:	2b00      	cmp	r3, #0
 800f434:	da14      	bge.n	800f460 <f_read+0x1c8>
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f440:	429a      	cmp	r2, r3
 800f442:	d90d      	bls.n	800f460 <f_read+0x1c8>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	025b      	lsls	r3, r3, #9
 800f44e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f450:	18d0      	adds	r0, r2, r3
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	3350      	adds	r3, #80	@ 0x50
 800f456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f45a:	4619      	mov	r1, r3
 800f45c:	f002 fe95 	bl	801218a <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f462:	025b      	lsls	r3, r3, #9
 800f464:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800f466:	e059      	b.n	800f51c <f_read+0x284>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f46c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f46e:	429a      	cmp	r2, r3
 800f470:	d033      	beq.n	800f4da <f_read+0x242>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f472:	69fb      	ldr	r3, [r7, #28]
 800f474:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f478:	b25b      	sxtb	r3, r3
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	da1b      	bge.n	800f4b6 <f_read+0x21e>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f480:	7858      	ldrb	r0, [r3, #1]
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f48c:	2301      	movs	r3, #1
 800f48e:	f7fb fad0 	bl	800aa32 <disk_write>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d005      	beq.n	800f4a4 <f_read+0x20c>
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	2201      	movs	r2, #1
 800f49c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	e060      	b.n	800f566 <f_read+0x2ce>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f4aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4ae:	b2da      	uxtb	r2, r3
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b8:	7858      	ldrb	r0, [r3, #1]
 800f4ba:	69fb      	ldr	r3, [r7, #28]
 800f4bc:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4c4:	f7fb faa2 	bl	800aa0c <disk_read>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d005      	beq.n	800f4da <f_read+0x242>
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e045      	b.n	800f566 <f_read+0x2ce>
			}
#endif
			fp->sect = sect;
 800f4da:	69fb      	ldr	r3, [r7, #28]
 800f4dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4ec:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f4f0:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f4f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d901      	bls.n	800f4fe <f_read+0x266>
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	647b      	str	r3, [r7, #68]	@ 0x44
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f50a:	4613      	mov	r3, r2
 800f50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f510:	440b      	add	r3, r1
 800f512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f514:	4619      	mov	r1, r3
 800f516:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f518:	f002 fe37 	bl	801218a <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800f51c:	697a      	ldr	r2, [r7, #20]
 800f51e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	617b      	str	r3, [r7, #20]
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f52a:	441a      	add	r2, r3
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	601a      	str	r2, [r3, #0]
 800f530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f534:	4413      	add	r3, r2
 800f536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f53e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f540:	2000      	movs	r0, #0
 800f542:	4688      	mov	r8, r1
 800f544:	4681      	mov	r9, r0
 800f546:	eb12 0108 	adds.w	r1, r2, r8
 800f54a:	60b9      	str	r1, [r7, #8]
 800f54c:	eb43 0309 	adc.w	r3, r3, r9
 800f550:	60fb      	str	r3, [r7, #12]
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f558:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f47f aee7 	bne.w	800f332 <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3754      	adds	r7, #84	@ 0x54
 800f56a:	46bd      	mov	sp, r7
 800f56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f570 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800f570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f574:	b08d      	sub	sp, #52	@ 0x34
 800f576:	af00      	add	r7, sp, #0
 800f578:	60f8      	str	r0, [r7, #12]
 800f57a:	60b9      	str	r1, [r7, #8]
 800f57c:	607a      	str	r2, [r7, #4]
 800f57e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	2200      	movs	r2, #0
 800f588:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	f107 0210 	add.w	r2, r7, #16
 800f590:	4611      	mov	r1, r2
 800f592:	4618      	mov	r0, r3
 800f594:	f7ff fbbc 	bl	800ed10 <validate>
 800f598:	4603      	mov	r3, r0
 800f59a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f59e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d108      	bne.n	800f5b8 <f_write+0x48>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f5ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f5b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d002      	beq.n	800f5be <f_write+0x4e>
 800f5b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5bc:	e17b      	b.n	800f8b6 <f_write+0x346>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f5c4:	f003 0302 	and.w	r3, r3, #2
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d101      	bne.n	800f5d0 <f_write+0x60>
 800f5cc:	2307      	movs	r3, #7
 800f5ce:	e172      	b.n	800f8b6 <f_write+0x346>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	2b04      	cmp	r3, #4
 800f5d6:	f000 815e 	beq.w	800f896 <f_write+0x326>
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	18d1      	adds	r1, r2, r3
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	4299      	cmp	r1, r3
 800f5ee:	f080 8152 	bcs.w	800f896 <f_write+0x326>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f5f8:	4613      	mov	r3, r2
 800f5fa:	43db      	mvns	r3, r3
 800f5fc:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800f5fe:	e14a      	b.n	800f896 <f_write+0x326>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f606:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800f60a:	2500      	movs	r5, #0
 800f60c:	ea54 0305 	orrs.w	r3, r4, r5
 800f610:	f040 80ef 	bne.w	800f7f2 <f_write+0x282>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f61a:	f04f 0200 	mov.w	r2, #0
 800f61e:	f04f 0300 	mov.w	r3, #0
 800f622:	0a42      	lsrs	r2, r0, #9
 800f624:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800f628:	0a4b      	lsrs	r3, r1, #9
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	895b      	ldrh	r3, [r3, #10]
 800f62e:	3b01      	subs	r3, #1
 800f630:	4013      	ands	r3, r2
 800f632:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d13a      	bne.n	800f6b0 <f_write+0x140>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f640:	4313      	orrs	r3, r2
 800f642:	d10c      	bne.n	800f65e <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	689b      	ldr	r3, [r3, #8]
 800f648:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d10e      	bne.n	800f66e <f_write+0xfe>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2100      	movs	r1, #0
 800f654:	4618      	mov	r0, r3
 800f656:	f7fc ff47 	bl	800c4e8 <create_chain>
 800f65a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800f65c:	e007      	b.n	800f66e <f_write+0xfe>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f65e:	68fa      	ldr	r2, [r7, #12]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f664:	4619      	mov	r1, r3
 800f666:	4610      	mov	r0, r2
 800f668:	f7fc ff3e 	bl	800c4e8 <create_chain>
 800f66c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 8115 	beq.w	800f8a0 <f_write+0x330>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d105      	bne.n	800f688 <f_write+0x118>
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2202      	movs	r2, #2
 800f680:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f684:	2302      	movs	r3, #2
 800f686:	e116      	b.n	800f8b6 <f_write+0x346>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68e:	d105      	bne.n	800f69c <f_write+0x12c>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2201      	movs	r2, #1
 800f694:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f698:	2301      	movs	r3, #1
 800f69a:	e10c      	b.n	800f8b6 <f_write+0x346>
				fp->clust = clst;			/* Update current cluster */
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6a0:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	689b      	ldr	r3, [r3, #8]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d102      	bne.n	800f6b0 <f_write+0x140>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6ae:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f6b6:	b25b      	sxtb	r3, r3
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	da1b      	bge.n	800f6f4 <f_write+0x184>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	7858      	ldrb	r0, [r3, #1]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	f7fb f9b1 	bl	800aa32 <disk_write>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d005      	beq.n	800f6e2 <f_write+0x172>
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	2201      	movs	r2, #1
 800f6da:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f6de:	2301      	movs	r3, #1
 800f6e0:	e0e9      	b.n	800f8b6 <f_write+0x346>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f6e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6ec:	b2da      	uxtb	r2, r3
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800f6f4:	693a      	ldr	r2, [r7, #16]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	f7fc fa97 	bl	800bc30 <clst2sect>
 800f702:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d105      	bne.n	800f716 <f_write+0x1a6>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2202      	movs	r2, #2
 800f70e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f712:	2302      	movs	r3, #2
 800f714:	e0cf      	b.n	800f8b6 <f_write+0x346>
			sect += csect;
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	4413      	add	r3, r2
 800f71c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	0a5b      	lsrs	r3, r3, #9
 800f722:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800f724:	6a3b      	ldr	r3, [r7, #32]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d03f      	beq.n	800f7aa <f_write+0x23a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f72a:	69ba      	ldr	r2, [r7, #24]
 800f72c:	6a3b      	ldr	r3, [r7, #32]
 800f72e:	4413      	add	r3, r2
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	8952      	ldrh	r2, [r2, #10]
 800f734:	4293      	cmp	r3, r2
 800f736:	d905      	bls.n	800f744 <f_write+0x1d4>
					cc = fs->csize - csect;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	895b      	ldrh	r3, [r3, #10]
 800f73c:	461a      	mov	r2, r3
 800f73e:	69bb      	ldr	r3, [r7, #24]
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	7858      	ldrb	r0, [r3, #1]
 800f748:	6a3b      	ldr	r3, [r7, #32]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	69f9      	ldr	r1, [r7, #28]
 800f74e:	f7fb f970 	bl	800aa32 <disk_write>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d005      	beq.n	800f764 <f_write+0x1f4>
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f760:	2301      	movs	r3, #1
 800f762:	e0a8      	b.n	800f8b6 <f_write+0x346>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	1ad3      	subs	r3, r2, r3
 800f76c:	6a3a      	ldr	r2, [r7, #32]
 800f76e:	429a      	cmp	r2, r3
 800f770:	d917      	bls.n	800f7a2 <f_write+0x232>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	1ad3      	subs	r3, r2, r3
 800f780:	025b      	lsls	r3, r3, #9
 800f782:	69fa      	ldr	r2, [r7, #28]
 800f784:	4413      	add	r3, r2
 800f786:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f78a:	4619      	mov	r1, r3
 800f78c:	f002 fcfd 	bl	801218a <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	025b      	lsls	r3, r3, #9
 800f7a6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800f7a8:	e04a      	b.n	800f840 <f_write+0x2d0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d01b      	beq.n	800f7ec <f_write+0x27c>
				fp->fptr < fp->obj.objsize &&
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f7c0:	4290      	cmp	r0, r2
 800f7c2:	eb71 0303 	sbcs.w	r3, r1, r3
 800f7c6:	d211      	bcs.n	800f7ec <f_write+0x27c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	7858      	ldrb	r0, [r3, #1]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	697a      	ldr	r2, [r7, #20]
 800f7d6:	f7fb f919 	bl	800aa0c <disk_read>
 800f7da:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d005      	beq.n	800f7ec <f_write+0x27c>
					ABORT(fs, FR_DISK_ERR);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	2201      	movs	r2, #1
 800f7e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	e064      	b.n	800f8b6 <f_write+0x346>
			}
#endif
			fp->sect = sect;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	697a      	ldr	r2, [r7, #20]
 800f7f0:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f7f8:	4613      	mov	r3, r2
 800f7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7fe:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f802:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d901      	bls.n	800f810 <f_write+0x2a0>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	627b      	str	r3, [r7, #36]	@ 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f81c:	4613      	mov	r3, r2
 800f81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f822:	440b      	add	r3, r1
 800f824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f826:	69f9      	ldr	r1, [r7, #28]
 800f828:	4618      	mov	r0, r3
 800f82a:	f002 fcae 	bl	801218a <memcpy>
		fp->flag |= FA_DIRTY;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f834:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	607b      	str	r3, [r7, #4]
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84e:	441a      	add	r2, r3
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	601a      	str	r2, [r3, #0]
 800f854:	69fa      	ldr	r2, [r7, #28]
 800f856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f858:	4413      	add	r3, r2
 800f85a:	61fb      	str	r3, [r7, #28]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f864:	2000      	movs	r0, #0
 800f866:	4688      	mov	r8, r1
 800f868:	4681      	mov	r9, r0
 800f86a:	eb12 0a08 	adds.w	sl, r2, r8
 800f86e:	eb43 0b09 	adc.w	fp, r3, r9
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f87e:	68f9      	ldr	r1, [r7, #12]
 800f880:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800f884:	4282      	cmp	r2, r0
 800f886:	eb73 0601 	sbcs.w	r6, r3, r1
 800f88a:	d201      	bcs.n	800f890 <f_write+0x320>
 800f88c:	4602      	mov	r2, r0
 800f88e:	460b      	mov	r3, r1
 800f890:	68f9      	ldr	r1, [r7, #12]
 800f892:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f47f aeb1 	bne.w	800f600 <f_write+0x90>
 800f89e:	e000      	b.n	800f8a2 <f_write+0x332>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8a0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f8a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3734      	adds	r7, #52	@ 0x34
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8c0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b09a      	sub	sp, #104	@ 0x68
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f8ce:	4611      	mov	r1, r2
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff fa1d 	bl	800ed10 <validate>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800f8dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f040 8105 	bne.w	800faf0 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f8ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f000 80fd 	beq.w	800faf0 <f_sync+0x230>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f8fc:	b25b      	sxtb	r3, r3
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	da17      	bge.n	800f932 <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f902:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f904:	7858      	ldrb	r0, [r3, #1]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f910:	2301      	movs	r3, #1
 800f912:	f7fb f88e 	bl	800aa32 <disk_write>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <f_sync+0x60>
 800f91c:	2301      	movs	r3, #1
 800f91e:	e0e9      	b.n	800faf4 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f926:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f932:	f7ff fa6d 	bl	800ee10 <get_fattime>
 800f936:	6638      	str	r0, [r7, #96]	@ 0x60
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f938:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b04      	cmp	r3, #4
 800f93e:	f040 808c 	bne.w	800fa5a <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4618      	mov	r0, r3
 800f946:	f7fc fc8d 	bl	800c264 <fill_first_frag>
 800f94a:	4603      	mov	r3, r0
 800f94c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800f950:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f954:	2b00      	cmp	r3, #0
 800f956:	d10a      	bne.n	800f96e <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f95e:	f04f 32ff 	mov.w	r2, #4294967295
 800f962:	4619      	mov	r1, r3
 800f964:	f7fc fcad 	bl	800c2c2 <fill_last_frag>
 800f968:	4603      	mov	r3, r0
 800f96a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800f96e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f972:	2b00      	cmp	r3, #0
 800f974:	f040 80bc 	bne.w	800faf0 <f_sync+0x230>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	f107 0308 	add.w	r3, r7, #8
 800f97e:	4611      	mov	r1, r2
 800f980:	4618      	mov	r0, r3
 800f982:	f7fd fc5c 	bl	800d23e <load_obj_xdir>
 800f986:	4603      	mov	r3, r0
 800f988:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800f98c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800f990:	2b00      	cmp	r3, #0
 800f992:	f040 80ad 	bne.w	800faf0 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 800f996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	3304      	adds	r3, #4
 800f99c:	781a      	ldrb	r2, [r3, #0]
 800f99e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	3304      	adds	r3, #4
 800f9a4:	f042 0220 	orr.w	r2, r2, #32
 800f9a8:	b2d2      	uxtb	r2, r2
 800f9aa:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	79da      	ldrb	r2, [r3, #7]
 800f9b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	3321      	adds	r3, #33	@ 0x21
 800f9b6:	f042 0201 	orr.w	r2, r2, #1
 800f9ba:	b2d2      	uxtb	r2, r2
 800f9bc:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 800f9be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	689b      	ldr	r3, [r3, #8]
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	f7fb fe66 	bl	800b69e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 800f9d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f9e0:	4608      	mov	r0, r1
 800f9e2:	f7fb fe88 	bl	800b6f6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 800f9e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f9f4:	4608      	mov	r0, r1
 800f9f6:	f7fb fe7e 	bl	800b6f6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f9fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f9fc:	691b      	ldr	r3, [r3, #16]
 800f9fe:	330c      	adds	r3, #12
 800fa00:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fb fe4b 	bl	800b69e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800fa08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa0a:	691b      	ldr	r3, [r3, #16]
 800fa0c:	3315      	adds	r3, #21
 800fa0e:	2200      	movs	r2, #0
 800fa10:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800fa12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	3310      	adds	r3, #16
 800fa18:	2100      	movs	r1, #0
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fb fe3f 	bl	800b69e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800fa20:	f107 0308 	add.w	r3, r7, #8
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fd fc43 	bl	800d2b0 <store_xdir>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800fa30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d15b      	bne.n	800faf0 <f_sync+0x230>
							res = sync_fs(fs);
 800fa38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fc f814 	bl	800ba68 <sync_fs>
 800fa40:	4603      	mov	r3, r0
 800fa42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fa4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa50:	b2da      	uxtb	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800fa58:	e04a      	b.n	800faf0 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fa5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fa60:	4619      	mov	r1, r3
 800fa62:	4610      	mov	r0, r2
 800fa64:	f7fb ffd2 	bl	800ba0c <move_window>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800fa6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d13c      	bne.n	800faf0 <f_sync+0x230>
					dir = fp->dir_ptr;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800fa7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa7e:	330b      	adds	r3, #11
 800fa80:	781a      	ldrb	r2, [r3, #0]
 800fa82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa84:	330b      	adds	r3, #11
 800fa86:	f042 0220 	orr.w	r2, r2, #32
 800fa8a:	b2d2      	uxtb	r2, r2
 800fa8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6818      	ldr	r0, [r3, #0]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	689b      	ldr	r3, [r3, #8]
 800fa96:	461a      	mov	r2, r3
 800fa98:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800fa9a:	f7fd f852 	bl	800cb42 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fa9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800faa0:	f103 001c 	add.w	r0, r3, #28
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800faaa:	4613      	mov	r3, r2
 800faac:	4619      	mov	r1, r3
 800faae:	f7fb fdf6 	bl	800b69e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fab4:	3316      	adds	r3, #22
 800fab6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fab8:	4618      	mov	r0, r3
 800faba:	f7fb fdf0 	bl	800b69e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fabe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fac0:	3312      	adds	r3, #18
 800fac2:	2100      	movs	r1, #0
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7fb fdcf 	bl	800b668 <st_word>
					fs->wflag = 1;
 800faca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800facc:	2201      	movs	r2, #1
 800face:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fb ffc8 	bl	800ba68 <sync_fs>
 800fad8:	4603      	mov	r3, r0
 800fada:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800faf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3768      	adds	r7, #104	@ 0x68
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}

0800fafc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f7ff fedb 	bl	800f8c0 <f_sync>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fb0e:	7bfb      	ldrb	r3, [r7, #15]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d10e      	bne.n	800fb32 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f107 0208 	add.w	r2, r7, #8
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7ff f8f7 	bl	800ed10 <validate>
 800fb22:	4603      	mov	r3, r0
 800fb24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fb26:	7bfb      	ldrb	r3, [r7, #15]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d102      	bne.n	800fb32 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fb3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb40:	b0a8      	sub	sp, #160	@ 0xa0
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800fb46:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	DWORD cl, pcl, ncl, tcl, tlen, ulen;
	DWORD *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fb4a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fb4c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800fb50:	4619      	mov	r1, r3
 800fb52:	4610      	mov	r0, r2
 800fb54:	f7ff f8dc 	bl	800ed10 <validate>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fb5e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d104      	bne.n	800fb70 <f_lseek+0x34>
 800fb66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fb68:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800fb6c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800fb70:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d10f      	bne.n	800fb98 <f_lseek+0x5c>
 800fb78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	2b04      	cmp	r3, #4
 800fb80:	d10a      	bne.n	800fb98 <f_lseek+0x5c>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800fb82:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800fb84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fb86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb88:	f04f 32ff 	mov.w	r2, #4294967295
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	f7fc fb98 	bl	800c2c2 <fill_last_frag>
 800fb92:	4603      	mov	r3, r0
 800fb94:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fb98:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <f_lseek+0x6a>
 800fba0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800fba4:	e20a      	b.n	800ffbc <f_lseek+0x480>
#endif

	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
 800fba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	2b04      	cmp	r3, #4
 800fbae:	d009      	beq.n	800fbc4 <f_lseek+0x88>
 800fbb0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d305      	bcc.n	800fbc4 <f_lseek+0x88>
 800fbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbbc:	f04f 0300 	mov.w	r3, #0
 800fbc0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fbc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fbc6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800fbca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fbce:	4290      	cmp	r0, r2
 800fbd0:	eb71 0303 	sbcs.w	r3, r1, r3
 800fbd4:	d20b      	bcs.n	800fbee <f_lseek+0xb2>
 800fbd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fbd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbdc:	f003 0302 	and.w	r3, r3, #2
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d104      	bne.n	800fbee <f_lseek+0xb2>
			ofs = fp->obj.objsize;
 800fbe4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fbe6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fbea:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		}
		ifptr = fp->fptr;
 800fbee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fbf0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fbf4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		fp->fptr = nsect = 0;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fbfe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fc00:	f04f 0200 	mov.w	r2, #0
 800fc04:	f04f 0300 	mov.w	r3, #0
 800fc08:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs > 0) {
 800fc0c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fc10:	4313      	orrs	r3, r2
 800fc12:	f000 816a 	beq.w	800feea <f_lseek+0x3ae>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fc16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fc1a:	895b      	ldrh	r3, [r3, #10]
 800fc1c:	025b      	lsls	r3, r3, #9
 800fc1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (ifptr > 0 &&
 800fc22:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800fc26:	4313      	orrs	r3, r2
 800fc28:	d05d      	beq.n	800fce6 <f_lseek+0x1aa>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fc2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fc2e:	1e54      	subs	r4, r2, #1
 800fc30:	f143 35ff 	adc.w	r5, r3, #4294967295
 800fc34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fc38:	2200      	movs	r2, #0
 800fc3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fc3c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fc3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800fc42:	4620      	mov	r0, r4
 800fc44:	4629      	mov	r1, r5
 800fc46:	f7f0 ffb1 	bl	8000bac <__aeabi_uldivmod>
 800fc4a:	4602      	mov	r2, r0
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	4614      	mov	r4, r2
 800fc50:	461d      	mov	r5, r3
 800fc52:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800fc56:	1e51      	subs	r1, r2, #1
 800fc58:	6639      	str	r1, [r7, #96]	@ 0x60
 800fc5a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800fc5e:	667b      	str	r3, [r7, #100]	@ 0x64
 800fc60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fc64:	2200      	movs	r2, #0
 800fc66:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fc68:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800fc6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800fc6e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800fc72:	f7f0 ff9b 	bl	8000bac <__aeabi_uldivmod>
 800fc76:	4602      	mov	r2, r0
 800fc78:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800fc7a:	4294      	cmp	r4, r2
 800fc7c:	eb75 0303 	sbcs.w	r3, r5, r3
 800fc80:	d331      	bcc.n	800fce6 <f_lseek+0x1aa>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fc82:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800fc86:	f112 3aff 	adds.w	sl, r2, #4294967295
 800fc8a:	f143 3bff 	adc.w	fp, r3, #4294967295
 800fc8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fc92:	3b01      	subs	r3, #1
 800fc94:	2200      	movs	r2, #0
 800fc96:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc98:	657a      	str	r2, [r7, #84]	@ 0x54
 800fc9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800fc9e:	460b      	mov	r3, r1
 800fca0:	ea6f 0803 	mvn.w	r8, r3
 800fca4:	4613      	mov	r3, r2
 800fca6:	ea6f 0903 	mvn.w	r9, r3
 800fcaa:	ea0a 0308 	and.w	r3, sl, r8
 800fcae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcb0:	ea0b 0309 	and.w	r3, fp, r9
 800fcb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fcb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fcb8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800fcbc:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800fcc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fcc2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800fcc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fcca:	1a14      	subs	r4, r2, r0
 800fccc:	60bc      	str	r4, [r7, #8]
 800fcce:	eb63 0301 	sbc.w	r3, r3, r1
 800fcd2:	60fb      	str	r3, [r7, #12]
 800fcd4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800fcd8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
				clst = fp->clust;
 800fcdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fcde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fce0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800fce4:	e02b      	b.n	800fd3e <f_lseek+0x202>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fce6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fce8:	689b      	ldr	r3, [r3, #8]
 800fcea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fcee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d11f      	bne.n	800fd36 <f_lseek+0x1fa>
					clst = create_chain(&fp->obj, 0);
 800fcf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fc fbf4 	bl	800c4e8 <create_chain>
 800fd00:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fd04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d105      	bne.n	800fd18 <f_lseek+0x1dc>
 800fd0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd0e:	2202      	movs	r2, #2
 800fd10:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fd14:	2302      	movs	r3, #2
 800fd16:	e151      	b.n	800ffbc <f_lseek+0x480>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd20:	d105      	bne.n	800fd2e <f_lseek+0x1f2>
 800fd22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd24:	2201      	movs	r2, #1
 800fd26:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	e146      	b.n	800ffbc <f_lseek+0x480>
					fp->obj.sclust = clst;
 800fd2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fd30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd34:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800fd36:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fd38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd3c:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800fd3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f000 80d1 	beq.w	800feea <f_lseek+0x3ae>
				while (ofs > bcs) {						/* Cluster following loop */
 800fd48:	e082      	b.n	800fe50 <f_lseek+0x314>
					ofs -= bcs; fp->fptr += bcs;
 800fd4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fd4e:	2200      	movs	r2, #0
 800fd50:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd52:	647a      	str	r2, [r7, #68]	@ 0x44
 800fd54:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fd58:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800fd5c:	4621      	mov	r1, r4
 800fd5e:	1a51      	subs	r1, r2, r1
 800fd60:	6039      	str	r1, [r7, #0]
 800fd62:	4629      	mov	r1, r5
 800fd64:	eb63 0301 	sbc.w	r3, r3, r1
 800fd68:	607b      	str	r3, [r7, #4]
 800fd6a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800fd6e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 800fd72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fd78:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800fd7c:	2000      	movs	r0, #0
 800fd7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800fd80:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd82:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800fd86:	4621      	mov	r1, r4
 800fd88:	1851      	adds	r1, r2, r1
 800fd8a:	6339      	str	r1, [r7, #48]	@ 0x30
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	414b      	adcs	r3, r1
 800fd90:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd94:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800fd98:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fd9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fda2:	f003 0302 	and.w	r3, r3, #2
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d02a      	beq.n	800fe00 <f_lseek+0x2c4>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800fdaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fdac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800fdb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fdb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fdb6:	4282      	cmp	r2, r0
 800fdb8:	418b      	sbcs	r3, r1
 800fdba:	d20e      	bcs.n	800fdda <f_lseek+0x29e>
							fp->obj.objsize = fp->fptr;
 800fdbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fdbe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800fdc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fdc4:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800fdc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fdca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fdce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fdd6:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fdda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fddc:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7fc fb81 	bl	800c4e8 <create_chain>
 800fde6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fdea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d10e      	bne.n	800fe10 <f_lseek+0x2d4>
							ofs = 0; break;
 800fdf2:	f04f 0200 	mov.w	r2, #0
 800fdf6:	f04f 0300 	mov.w	r3, #0
 800fdfa:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 800fdfe:	e037      	b.n	800fe70 <f_lseek+0x334>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fe00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fe02:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fb ff32 	bl	800bc70 <get_fat>
 800fe0c:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe18:	d105      	bne.n	800fe26 <f_lseek+0x2ea>
 800fe1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fe1c:	2201      	movs	r2, #1
 800fe1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fe22:	2301      	movs	r3, #1
 800fe24:	e0ca      	b.n	800ffbc <f_lseek+0x480>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fe26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d906      	bls.n	800fe3c <f_lseek+0x300>
 800fe2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fe32:	69da      	ldr	r2, [r3, #28]
 800fe34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d305      	bcc.n	800fe48 <f_lseek+0x30c>
 800fe3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fe3e:	2202      	movs	r2, #2
 800fe40:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fe44:	2302      	movs	r3, #2
 800fe46:	e0b9      	b.n	800ffbc <f_lseek+0x480>
					fp->clust = clst;
 800fe48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800fe4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fe4e:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800fe50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fe54:	2200      	movs	r2, #0
 800fe56:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fe58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fe5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fe5e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800fe62:	4621      	mov	r1, r4
 800fe64:	4291      	cmp	r1, r2
 800fe66:	4629      	mov	r1, r5
 800fe68:	eb71 0303 	sbcs.w	r3, r1, r3
 800fe6c:	f4ff af6d 	bcc.w	800fd4a <f_lseek+0x20e>
				}
				fp->fptr += ofs;
 800fe70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fe72:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800fe76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fe7a:	1884      	adds	r4, r0, r2
 800fe7c:	623c      	str	r4, [r7, #32]
 800fe7e:	eb41 0303 	adc.w	r3, r1, r3
 800fe82:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fe86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fe8a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800fe8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800fe92:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800fe96:	61bb      	str	r3, [r7, #24]
 800fe98:	2300      	movs	r3, #0
 800fe9a:	61fb      	str	r3, [r7, #28]
 800fe9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fea0:	460b      	mov	r3, r1
 800fea2:	4313      	orrs	r3, r2
 800fea4:	d021      	beq.n	800feea <f_lseek+0x3ae>
					nsect = clst2sect(fs, clst);	/* Current sector */
 800fea6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800feaa:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fb febe 	bl	800bc30 <clst2sect>
 800feb4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 800feb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800febc:	2b00      	cmp	r3, #0
 800febe:	d105      	bne.n	800fecc <f_lseek+0x390>
 800fec0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fec2:	2202      	movs	r2, #2
 800fec4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800fec8:	2302      	movs	r3, #2
 800feca:	e077      	b.n	800ffbc <f_lseek+0x480>
					nsect += (DWORD)(ofs / SS(fs));
 800fecc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800fed0:	f04f 0200 	mov.w	r2, #0
 800fed4:	f04f 0300 	mov.w	r3, #0
 800fed8:	0a42      	lsrs	r2, r0, #9
 800feda:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800fede:	0a4b      	lsrs	r3, r1, #9
 800fee0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fee4:	4413      	add	r3, r2
 800fee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 800feea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800feec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800fef0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fef2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800fef6:	4290      	cmp	r0, r2
 800fef8:	eb71 0303 	sbcs.w	r3, r1, r3
 800fefc:	d20e      	bcs.n	800ff1c <f_lseek+0x3e0>
			fp->obj.objsize = fp->fptr;
 800fefe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ff04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ff06:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800ff0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ff10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff14:	b2da      	uxtb	r2, r3
 800ff16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ff1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ff22:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800ff26:	613b      	str	r3, [r7, #16]
 800ff28:	2300      	movs	r3, #0
 800ff2a:	617b      	str	r3, [r7, #20]
 800ff2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ff30:	460b      	mov	r3, r1
 800ff32:	4313      	orrs	r3, r2
 800ff34:	d040      	beq.n	800ffb8 <f_lseek+0x47c>
 800ff36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d03a      	beq.n	800ffb8 <f_lseek+0x47c>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ff42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ff48:	b25b      	sxtb	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	da1c      	bge.n	800ff88 <f_lseek+0x44c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ff52:	7858      	ldrb	r0, [r3, #1]
 800ff54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff56:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800ff5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff5e:	2301      	movs	r3, #1
 800ff60:	f7fa fd67 	bl	800aa32 <disk_write>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d005      	beq.n	800ff76 <f_lseek+0x43a>
 800ff6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ff72:	2301      	movs	r3, #1
 800ff74:	e022      	b.n	800ffbc <f_lseek+0x480>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ff7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff80:	b2da      	uxtb	r2, r3
 800ff82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ff88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ff8c:	7858      	ldrb	r0, [r3, #1]
 800ff8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ff90:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800ff94:	2301      	movs	r3, #1
 800ff96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff9a:	f7fa fd37 	bl	800aa0c <disk_read>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d005      	beq.n	800ffb0 <f_lseek+0x474>
 800ffa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ffac:	2301      	movs	r3, #1
 800ffae:	e005      	b.n	800ffbc <f_lseek+0x480>
#endif
			fp->sect = nsect;
 800ffb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ffb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ffb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800ffb8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	37a0      	adds	r7, #160	@ 0xa0
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ffc6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b098      	sub	sp, #96	@ 0x60
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
 800ffd0:	f107 0108 	add.w	r1, r7, #8
 800ffd4:	1d3b      	adds	r3, r7, #4
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fe fb51 	bl	800e680 <mount_volume>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ffe4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d11f      	bne.n	801002c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	f107 0308 	add.w	r3, r7, #8
 800fff2:	4611      	mov	r1, r2
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fe f959 	bl	800e2ac <follow_path>
 800fffa:	4603      	mov	r3, r0
 800fffc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 8010000:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010004:	2b00      	cmp	r3, #0
 8010006:	d111      	bne.n	801002c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8010008:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801000c:	b25b      	sxtb	r3, r3
 801000e:	2b00      	cmp	r3, #0
 8010010:	da03      	bge.n	801001a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8010012:	2306      	movs	r3, #6
 8010014:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010018:	e008      	b.n	801002c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d005      	beq.n	801002c <f_stat+0x66>
 8010020:	f107 0308 	add.w	r3, r7, #8
 8010024:	6839      	ldr	r1, [r7, #0]
 8010026:	4618      	mov	r0, r3
 8010028:	f7fd fda2 	bl	800db70 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801002c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8010030:	4618      	mov	r0, r3
 8010032:	3760      	adds	r7, #96	@ 0x60
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the buffer to store read string */
	int len,		/* Size of string buffer (items) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b08a      	sub	sp, #40	@ 0x28
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	607a      	str	r2, [r7, #4]
	int nc = 0;
 8010044:	2300      	movs	r3, #0
 8010046:	627b      	str	r3, [r7, #36]	@ 0x24
	TCHAR *p = buff;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	623b      	str	r3, [r7, #32]
		}
#endif
	}

#else			/* Byte-by-byte read without any conversion (ANSI/OEM API) */
	len -= 1;	/* Make a room for the terminator */
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	3b01      	subs	r3, #1
 8010050:	60bb      	str	r3, [r7, #8]
	while (nc < len) {
 8010052:	e018      	b.n	8010086 <f_gets+0x4e>
		f_read(fp, s, 1, &rc);	/* Get a byte */
 8010054:	f107 0314 	add.w	r3, r7, #20
 8010058:	f107 0118 	add.w	r1, r7, #24
 801005c:	2201      	movs	r2, #1
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f7ff f91a 	bl	800f298 <f_read>
		if (rc != 1) break;		/* EOF? */
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	2b01      	cmp	r3, #1
 8010068:	d112      	bne.n	8010090 <f_gets+0x58>
		dc = s[0];
 801006a:	7e3b      	ldrb	r3, [r7, #24]
 801006c:	61fb      	str	r3, [r7, #28]
		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;
		*p++ = (TCHAR)dc; nc++;
 801006e:	6a3b      	ldr	r3, [r7, #32]
 8010070:	1c5a      	adds	r2, r3, #1
 8010072:	623a      	str	r2, [r7, #32]
 8010074:	69fa      	ldr	r2, [r7, #28]
 8010076:	b2d2      	uxtb	r2, r2
 8010078:	701a      	strb	r2, [r3, #0]
 801007a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007c:	3301      	adds	r3, #1
 801007e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (dc == '\n') break;
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	2b0a      	cmp	r3, #10
 8010084:	d006      	beq.n	8010094 <f_gets+0x5c>
	while (nc < len) {
 8010086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	429a      	cmp	r2, r3
 801008c:	dbe2      	blt.n	8010054 <f_gets+0x1c>
 801008e:	e002      	b.n	8010096 <f_gets+0x5e>
		if (rc != 1) break;		/* EOF? */
 8010090:	bf00      	nop
 8010092:	e000      	b.n	8010096 <f_gets+0x5e>
		if (dc == '\n') break;
 8010094:	bf00      	nop
	}
#endif

	*p = 0;		/* Terminate the string */
 8010096:	6a3b      	ldr	r3, [r7, #32]
 8010098:	2200      	movs	r2, #0
 801009a:	701a      	strb	r2, [r3, #0]
	return nc ? buff : 0;	/* When no data read due to EOF or error, return with error. */
 801009c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d001      	beq.n	80100a6 <f_gets+0x6e>
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	e000      	b.n	80100a8 <f_gets+0x70>
 80100a6:	2300      	movs	r3, #0
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3728      	adds	r7, #40	@ 0x28
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b08b      	sub	sp, #44	@ 0x2c
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	460b      	mov	r3, r1
 80100ba:	807b      	strh	r3, [r7, #2]
	const WCHAR* p;
	WCHAR c = 0, uc;
 80100bc:	2300      	movs	r3, #0
 80100be:	84fb      	strh	r3, [r7, #38]	@ 0x26
	UINT i = 0, n, li, hi;
 80100c0:	2300      	movs	r3, #0
 80100c2:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80100c8:	d802      	bhi.n	80100d0 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80100ce:	e041      	b.n	8010154 <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100d6:	d23d      	bcs.n	8010154 <ff_uni2oem+0xa4>
 80100d8:	887b      	ldrh	r3, [r7, #2]
 80100da:	f5b3 7f69 	cmp.w	r3, #932	@ 0x3a4
 80100de:	d139      	bne.n	8010154 <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
 80100e4:	4b1f      	ldr	r3, [pc, #124]	@ (8010164 <ff_uni2oem+0xb4>)
 80100e6:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 80100e8:	f641 43dd 	movw	r3, #7389	@ 0x1cdd
 80100ec:	617b      	str	r3, [r7, #20]
			li = 0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
 80100f2:	2310      	movs	r3, #16
 80100f4:	61fb      	str	r3, [r7, #28]
 80100f6:	e01e      	b.n	8010136 <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
 80100f8:	697a      	ldr	r2, [r7, #20]
 80100fa:	69bb      	ldr	r3, [r7, #24]
 80100fc:	1ad3      	subs	r3, r2, r3
 80100fe:	085b      	lsrs	r3, r3, #1
 8010100:	69ba      	ldr	r2, [r7, #24]
 8010102:	4413      	add	r3, r2
 8010104:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
 8010106:	6a3b      	ldr	r3, [r7, #32]
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	68fa      	ldr	r2, [r7, #12]
 801010c:	4413      	add	r3, r2
 801010e:	881b      	ldrh	r3, [r3, #0]
 8010110:	8a7a      	ldrh	r2, [r7, #18]
 8010112:	429a      	cmp	r2, r3
 8010114:	d013      	beq.n	801013e <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
 8010116:	6a3b      	ldr	r3, [r7, #32]
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	4413      	add	r3, r2
 801011e:	881b      	ldrh	r3, [r3, #0]
 8010120:	8a7a      	ldrh	r2, [r7, #18]
 8010122:	429a      	cmp	r2, r3
 8010124:	d902      	bls.n	801012c <ff_uni2oem+0x7c>
					li = i;
 8010126:	6a3b      	ldr	r3, [r7, #32]
 8010128:	61bb      	str	r3, [r7, #24]
 801012a:	e001      	b.n	8010130 <ff_uni2oem+0x80>
				} else {
					hi = i;
 801012c:	6a3b      	ldr	r3, [r7, #32]
 801012e:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	3b01      	subs	r3, #1
 8010134:	61fb      	str	r3, [r7, #28]
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1dd      	bne.n	80100f8 <ff_uni2oem+0x48>
 801013c:	e000      	b.n	8010140 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
 801013e:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d006      	beq.n	8010154 <ff_uni2oem+0xa4>
 8010146:	6a3b      	ldr	r3, [r7, #32]
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	3302      	adds	r3, #2
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	4413      	add	r3, r2
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}
	}

	return c;
 8010154:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8010156:	4618      	mov	r0, r3
 8010158:	372c      	adds	r7, #44	@ 0x2c
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	0801553c 	.word	0x0801553c

08010168 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8010168:	b480      	push	{r7}
 801016a:	b089      	sub	sp, #36	@ 0x24
 801016c:	af00      	add	r7, sp, #0
 801016e:	4603      	mov	r3, r0
 8010170:	460a      	mov	r2, r1
 8010172:	80fb      	strh	r3, [r7, #6]
 8010174:	4613      	mov	r3, r2
 8010176:	80bb      	strh	r3, [r7, #4]
	const WCHAR* p;
	WCHAR c = 0;
 8010178:	2300      	movs	r3, #0
 801017a:	83fb      	strh	r3, [r7, #30]
	UINT i = 0, n, li, hi;
 801017c:	2300      	movs	r3, #0
 801017e:	61bb      	str	r3, [r7, #24]


	if (oem < 0x80) {	/* ASCII? */
 8010180:	88fb      	ldrh	r3, [r7, #6]
 8010182:	2b7f      	cmp	r3, #127	@ 0x7f
 8010184:	d802      	bhi.n	801018c <ff_oem2uni+0x24>
		c = oem;
 8010186:	88fb      	ldrh	r3, [r7, #6]
 8010188:	83fb      	strh	r3, [r7, #30]
 801018a:	e03b      	b.n	8010204 <ff_oem2uni+0x9c>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it valid code page? */
 801018c:	88bb      	ldrh	r3, [r7, #4]
 801018e:	f5b3 7f69 	cmp.w	r3, #932	@ 0x3a4
 8010192:	d137      	bne.n	8010204 <ff_oem2uni+0x9c>
			p = CVTBL(oem2uni, FF_CODE_PAGE);
 8010194:	4b1f      	ldr	r3, [pc, #124]	@ (8010214 <ff_oem2uni+0xac>)
 8010196:	60bb      	str	r3, [r7, #8]
			hi = sizeof CVTBL(oem2uni, FF_CODE_PAGE) / 4 - 1;
 8010198:	f641 43dd 	movw	r3, #7389	@ 0x1cdd
 801019c:	60fb      	str	r3, [r7, #12]
			li = 0;
 801019e:	2300      	movs	r3, #0
 80101a0:	613b      	str	r3, [r7, #16]
			for (n = 16; n; n--) {
 80101a2:	2310      	movs	r3, #16
 80101a4:	617b      	str	r3, [r7, #20]
 80101a6:	e01e      	b.n	80101e6 <ff_oem2uni+0x7e>
				i = li + (hi - li) / 2;
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	1ad3      	subs	r3, r2, r3
 80101ae:	085b      	lsrs	r3, r3, #1
 80101b0:	693a      	ldr	r2, [r7, #16]
 80101b2:	4413      	add	r3, r2
 80101b4:	61bb      	str	r3, [r7, #24]
				if (oem == p[i * 2]) break;
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	68ba      	ldr	r2, [r7, #8]
 80101bc:	4413      	add	r3, r2
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	88fa      	ldrh	r2, [r7, #6]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d013      	beq.n	80101ee <ff_oem2uni+0x86>
				if (oem > p[i * 2]) {
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	68ba      	ldr	r2, [r7, #8]
 80101cc:	4413      	add	r3, r2
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	88fa      	ldrh	r2, [r7, #6]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d902      	bls.n	80101dc <ff_oem2uni+0x74>
					li = i;
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	613b      	str	r3, [r7, #16]
 80101da:	e001      	b.n	80101e0 <ff_oem2uni+0x78>
				} else {
					hi = i;
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	60fb      	str	r3, [r7, #12]
			for (n = 16; n; n--) {
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	3b01      	subs	r3, #1
 80101e4:	617b      	str	r3, [r7, #20]
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d1dd      	bne.n	80101a8 <ff_oem2uni+0x40>
 80101ec:	e000      	b.n	80101f0 <ff_oem2uni+0x88>
				if (oem == p[i * 2]) break;
 80101ee:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d006      	beq.n	8010204 <ff_oem2uni+0x9c>
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	3302      	adds	r3, #2
 80101fc:	68ba      	ldr	r2, [r7, #8]
 80101fe:	4413      	add	r3, r2
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	83fb      	strh	r3, [r7, #30]
		}
	}

	return c;
 8010204:	8bfb      	ldrh	r3, [r7, #30]
}
 8010206:	4618      	mov	r0, r3
 8010208:	3724      	adds	r7, #36	@ 0x24
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr
 8010212:	bf00      	nop
 8010214:	0801c8b4 	.word	0x0801c8b4

08010218 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8010218:	b480      	push	{r7}
 801021a:	b087      	sub	sp, #28
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010226:	d27d      	bcs.n	8010324 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 801022c:	8a7b      	ldrh	r3, [r7, #18]
 801022e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010232:	d201      	bcs.n	8010238 <ff_wtoupper+0x20>
 8010234:	4b3f      	ldr	r3, [pc, #252]	@ (8010334 <ff_wtoupper+0x11c>)
 8010236:	e000      	b.n	801023a <ff_wtoupper+0x22>
 8010238:	4b3f      	ldr	r3, [pc, #252]	@ (8010338 <ff_wtoupper+0x120>)
 801023a:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	1c9a      	adds	r2, r3, #2
 8010240:	617a      	str	r2, [r7, #20]
 8010242:	881b      	ldrh	r3, [r3, #0]
 8010244:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8010246:	8a3b      	ldrh	r3, [r7, #16]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d069      	beq.n	8010320 <ff_wtoupper+0x108>
 801024c:	8a7a      	ldrh	r2, [r7, #18]
 801024e:	8a3b      	ldrh	r3, [r7, #16]
 8010250:	429a      	cmp	r2, r3
 8010252:	d365      	bcc.n	8010320 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	1c9a      	adds	r2, r3, #2
 8010258:	617a      	str	r2, [r7, #20]
 801025a:	881b      	ldrh	r3, [r3, #0]
 801025c:	81fb      	strh	r3, [r7, #14]
 801025e:	89fb      	ldrh	r3, [r7, #14]
 8010260:	0a1b      	lsrs	r3, r3, #8
 8010262:	81bb      	strh	r3, [r7, #12]
 8010264:	89fb      	ldrh	r3, [r7, #14]
 8010266:	b2db      	uxtb	r3, r3
 8010268:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 801026a:	8a7a      	ldrh	r2, [r7, #18]
 801026c:	8a39      	ldrh	r1, [r7, #16]
 801026e:	89fb      	ldrh	r3, [r7, #14]
 8010270:	440b      	add	r3, r1
 8010272:	429a      	cmp	r2, r3
 8010274:	da4a      	bge.n	801030c <ff_wtoupper+0xf4>
				switch (cmd) {
 8010276:	89bb      	ldrh	r3, [r7, #12]
 8010278:	2b08      	cmp	r3, #8
 801027a:	d850      	bhi.n	801031e <ff_wtoupper+0x106>
 801027c:	a201      	add	r2, pc, #4	@ (adr r2, 8010284 <ff_wtoupper+0x6c>)
 801027e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010282:	bf00      	nop
 8010284:	080102a9 	.word	0x080102a9
 8010288:	080102bb 	.word	0x080102bb
 801028c:	080102d1 	.word	0x080102d1
 8010290:	080102d9 	.word	0x080102d9
 8010294:	080102e1 	.word	0x080102e1
 8010298:	080102e9 	.word	0x080102e9
 801029c:	080102f1 	.word	0x080102f1
 80102a0:	080102f9 	.word	0x080102f9
 80102a4:	08010301 	.word	0x08010301
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 80102a8:	8a7a      	ldrh	r2, [r7, #18]
 80102aa:	8a3b      	ldrh	r3, [r7, #16]
 80102ac:	1ad3      	subs	r3, r2, r3
 80102ae:	005b      	lsls	r3, r3, #1
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	4413      	add	r3, r2
 80102b4:	881b      	ldrh	r3, [r3, #0]
 80102b6:	827b      	strh	r3, [r7, #18]
 80102b8:	e027      	b.n	801030a <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 80102ba:	8a7a      	ldrh	r2, [r7, #18]
 80102bc:	8a3b      	ldrh	r3, [r7, #16]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	f003 0301 	and.w	r3, r3, #1
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	8a7a      	ldrh	r2, [r7, #18]
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	827b      	strh	r3, [r7, #18]
 80102ce:	e01c      	b.n	801030a <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 80102d0:	8a7b      	ldrh	r3, [r7, #18]
 80102d2:	3b10      	subs	r3, #16
 80102d4:	827b      	strh	r3, [r7, #18]
 80102d6:	e018      	b.n	801030a <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 80102d8:	8a7b      	ldrh	r3, [r7, #18]
 80102da:	3b20      	subs	r3, #32
 80102dc:	827b      	strh	r3, [r7, #18]
 80102de:	e014      	b.n	801030a <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80102e0:	8a7b      	ldrh	r3, [r7, #18]
 80102e2:	3b30      	subs	r3, #48	@ 0x30
 80102e4:	827b      	strh	r3, [r7, #18]
 80102e6:	e010      	b.n	801030a <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80102e8:	8a7b      	ldrh	r3, [r7, #18]
 80102ea:	3b1a      	subs	r3, #26
 80102ec:	827b      	strh	r3, [r7, #18]
 80102ee:	e00c      	b.n	801030a <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 80102f0:	8a7b      	ldrh	r3, [r7, #18]
 80102f2:	3308      	adds	r3, #8
 80102f4:	827b      	strh	r3, [r7, #18]
 80102f6:	e008      	b.n	801030a <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 80102f8:	8a7b      	ldrh	r3, [r7, #18]
 80102fa:	3b50      	subs	r3, #80	@ 0x50
 80102fc:	827b      	strh	r3, [r7, #18]
 80102fe:	e004      	b.n	801030a <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8010300:	8a7b      	ldrh	r3, [r7, #18]
 8010302:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8010306:	827b      	strh	r3, [r7, #18]
 8010308:	bf00      	nop
				}
				break;
 801030a:	e008      	b.n	801031e <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 801030c:	89bb      	ldrh	r3, [r7, #12]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d194      	bne.n	801023c <ff_wtoupper+0x24>
 8010312:	89fb      	ldrh	r3, [r7, #14]
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	697a      	ldr	r2, [r7, #20]
 8010318:	4413      	add	r3, r2
 801031a:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 801031c:	e78e      	b.n	801023c <ff_wtoupper+0x24>
				break;
 801031e:	bf00      	nop
		}
		uni = uc;
 8010320:	8a7b      	ldrh	r3, [r7, #18]
 8010322:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8010324:	687b      	ldr	r3, [r7, #4]
}
 8010326:	4618      	mov	r0, r3
 8010328:	371c      	adds	r7, #28
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr
 8010332:	bf00      	nop
 8010334:	08023c2c 	.word	0x08023c2c
 8010338:	08023e20 	.word	0x08023e20

0801033c <arm_min_f32>:
 801033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010340:	1e4f      	subs	r7, r1, #1
 8010342:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8010346:	f100 0e04 	add.w	lr, r0, #4
 801034a:	edd0 7a00 	vldr	s15, [r0]
 801034e:	d058      	beq.n	8010402 <arm_min_f32+0xc6>
 8010350:	3014      	adds	r0, #20
 8010352:	46c4      	mov	ip, r8
 8010354:	2604      	movs	r6, #4
 8010356:	2400      	movs	r4, #0
 8010358:	ed10 6a04 	vldr	s12, [r0, #-16]
 801035c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8010360:	ed10 7a02 	vldr	s14, [r0, #-8]
 8010364:	ed50 5a01 	vldr	s11, [r0, #-4]
 8010368:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801036c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010370:	bf48      	it	mi
 8010372:	eef0 7a46 	vmovmi.f32	s15, s12
 8010376:	f1a6 0503 	sub.w	r5, r6, #3
 801037a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801037e:	bf48      	it	mi
 8010380:	462c      	movmi	r4, r5
 8010382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010386:	bfc8      	it	gt
 8010388:	eef0 7a66 	vmovgt.f32	s15, s13
 801038c:	f1a6 0502 	sub.w	r5, r6, #2
 8010390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010394:	bfc8      	it	gt
 8010396:	462c      	movgt	r4, r5
 8010398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039c:	bfc8      	it	gt
 801039e:	eef0 7a47 	vmovgt.f32	s15, s14
 80103a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80103a6:	eef4 7ae5 	vcmpe.f32	s15, s11
 80103aa:	bfc8      	it	gt
 80103ac:	462c      	movgt	r4, r5
 80103ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b2:	bfc8      	it	gt
 80103b4:	4634      	movgt	r4, r6
 80103b6:	bfc8      	it	gt
 80103b8:	eef0 7a65 	vmovgt.f32	s15, s11
 80103bc:	f1bc 0c01 	subs.w	ip, ip, #1
 80103c0:	f106 0604 	add.w	r6, r6, #4
 80103c4:	f100 0010 	add.w	r0, r0, #16
 80103c8:	d1c6      	bne.n	8010358 <arm_min_f32+0x1c>
 80103ca:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80103ce:	f017 0003 	ands.w	r0, r7, #3
 80103d2:	d018      	beq.n	8010406 <arm_min_f32+0xca>
 80103d4:	1a08      	subs	r0, r1, r0
 80103d6:	ecbe 7a01 	vldmia	lr!, {s14}
 80103da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80103de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103e2:	bf48      	it	mi
 80103e4:	4604      	movmi	r4, r0
 80103e6:	f100 0001 	add.w	r0, r0, #1
 80103ea:	bf58      	it	pl
 80103ec:	eeb0 7a67 	vmovpl.f32	s14, s15
 80103f0:	4288      	cmp	r0, r1
 80103f2:	eef0 7a47 	vmov.f32	s15, s14
 80103f6:	d1ee      	bne.n	80103d6 <arm_min_f32+0x9a>
 80103f8:	ed82 7a00 	vstr	s14, [r2]
 80103fc:	601c      	str	r4, [r3, #0]
 80103fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010402:	4644      	mov	r4, r8
 8010404:	e7e3      	b.n	80103ce <arm_min_f32+0x92>
 8010406:	eeb0 7a67 	vmov.f32	s14, s15
 801040a:	e7f5      	b.n	80103f8 <arm_min_f32+0xbc>

0801040c <arm_max_f32>:
 801040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010410:	1e4f      	subs	r7, r1, #1
 8010412:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8010416:	f100 0e04 	add.w	lr, r0, #4
 801041a:	edd0 7a00 	vldr	s15, [r0]
 801041e:	d058      	beq.n	80104d2 <arm_max_f32+0xc6>
 8010420:	3014      	adds	r0, #20
 8010422:	46c4      	mov	ip, r8
 8010424:	2604      	movs	r6, #4
 8010426:	2400      	movs	r4, #0
 8010428:	ed10 6a04 	vldr	s12, [r0, #-16]
 801042c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8010430:	ed10 7a02 	vldr	s14, [r0, #-8]
 8010434:	ed50 5a01 	vldr	s11, [r0, #-4]
 8010438:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801043c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010440:	bfc8      	it	gt
 8010442:	eef0 7a46 	vmovgt.f32	s15, s12
 8010446:	f1a6 0503 	sub.w	r5, r6, #3
 801044a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801044e:	bfc8      	it	gt
 8010450:	462c      	movgt	r4, r5
 8010452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010456:	bf48      	it	mi
 8010458:	eef0 7a66 	vmovmi.f32	s15, s13
 801045c:	f1a6 0502 	sub.w	r5, r6, #2
 8010460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010464:	bf48      	it	mi
 8010466:	462c      	movmi	r4, r5
 8010468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046c:	bf48      	it	mi
 801046e:	eef0 7a47 	vmovmi.f32	s15, s14
 8010472:	f106 35ff 	add.w	r5, r6, #4294967295
 8010476:	eef4 7ae5 	vcmpe.f32	s15, s11
 801047a:	bf48      	it	mi
 801047c:	462c      	movmi	r4, r5
 801047e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010482:	bf48      	it	mi
 8010484:	4634      	movmi	r4, r6
 8010486:	bf48      	it	mi
 8010488:	eef0 7a65 	vmovmi.f32	s15, s11
 801048c:	f1bc 0c01 	subs.w	ip, ip, #1
 8010490:	f106 0604 	add.w	r6, r6, #4
 8010494:	f100 0010 	add.w	r0, r0, #16
 8010498:	d1c6      	bne.n	8010428 <arm_max_f32+0x1c>
 801049a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 801049e:	f017 0003 	ands.w	r0, r7, #3
 80104a2:	d018      	beq.n	80104d6 <arm_max_f32+0xca>
 80104a4:	1a08      	subs	r0, r1, r0
 80104a6:	ecbe 7a01 	vldmia	lr!, {s14}
 80104aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80104ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b2:	bfc8      	it	gt
 80104b4:	4604      	movgt	r4, r0
 80104b6:	f100 0001 	add.w	r0, r0, #1
 80104ba:	bfd8      	it	le
 80104bc:	eeb0 7a67 	vmovle.f32	s14, s15
 80104c0:	4288      	cmp	r0, r1
 80104c2:	eef0 7a47 	vmov.f32	s15, s14
 80104c6:	d1ee      	bne.n	80104a6 <arm_max_f32+0x9a>
 80104c8:	ed82 7a00 	vstr	s14, [r2]
 80104cc:	601c      	str	r4, [r3, #0]
 80104ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d2:	4644      	mov	r4, r8
 80104d4:	e7e3      	b.n	801049e <arm_max_f32+0x92>
 80104d6:	eeb0 7a67 	vmov.f32	s14, s15
 80104da:	e7f5      	b.n	80104c8 <arm_max_f32+0xbc>

080104dc <arm_rfft_fast_init_f32>:
 80104dc:	084b      	lsrs	r3, r1, #1
 80104de:	2b80      	cmp	r3, #128	@ 0x80
 80104e0:	b410      	push	{r4}
 80104e2:	8201      	strh	r1, [r0, #16]
 80104e4:	8003      	strh	r3, [r0, #0]
 80104e6:	d047      	beq.n	8010578 <arm_rfft_fast_init_f32+0x9c>
 80104e8:	d917      	bls.n	801051a <arm_rfft_fast_init_f32+0x3e>
 80104ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104ee:	d03d      	beq.n	801056c <arm_rfft_fast_init_f32+0x90>
 80104f0:	d929      	bls.n	8010546 <arm_rfft_fast_init_f32+0x6a>
 80104f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80104f6:	d020      	beq.n	801053a <arm_rfft_fast_init_f32+0x5e>
 80104f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80104fc:	d113      	bne.n	8010526 <arm_rfft_fast_init_f32+0x4a>
 80104fe:	4921      	ldr	r1, [pc, #132]	@ (8010584 <arm_rfft_fast_init_f32+0xa8>)
 8010500:	4a21      	ldr	r2, [pc, #132]	@ (8010588 <arm_rfft_fast_init_f32+0xac>)
 8010502:	4b22      	ldr	r3, [pc, #136]	@ (801058c <arm_rfft_fast_init_f32+0xb0>)
 8010504:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8010508:	8184      	strh	r4, [r0, #12]
 801050a:	6081      	str	r1, [r0, #8]
 801050c:	6042      	str	r2, [r0, #4]
 801050e:	6143      	str	r3, [r0, #20]
 8010510:	2000      	movs	r0, #0
 8010512:	b240      	sxtb	r0, r0
 8010514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010518:	4770      	bx	lr
 801051a:	2b20      	cmp	r3, #32
 801051c:	d01c      	beq.n	8010558 <arm_rfft_fast_init_f32+0x7c>
 801051e:	2b40      	cmp	r3, #64	@ 0x40
 8010520:	d006      	beq.n	8010530 <arm_rfft_fast_init_f32+0x54>
 8010522:	2b10      	cmp	r3, #16
 8010524:	d01d      	beq.n	8010562 <arm_rfft_fast_init_f32+0x86>
 8010526:	20ff      	movs	r0, #255	@ 0xff
 8010528:	b240      	sxtb	r0, r0
 801052a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801052e:	4770      	bx	lr
 8010530:	2438      	movs	r4, #56	@ 0x38
 8010532:	4917      	ldr	r1, [pc, #92]	@ (8010590 <arm_rfft_fast_init_f32+0xb4>)
 8010534:	4a17      	ldr	r2, [pc, #92]	@ (8010594 <arm_rfft_fast_init_f32+0xb8>)
 8010536:	4b18      	ldr	r3, [pc, #96]	@ (8010598 <arm_rfft_fast_init_f32+0xbc>)
 8010538:	e7e6      	b.n	8010508 <arm_rfft_fast_init_f32+0x2c>
 801053a:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 801053e:	4917      	ldr	r1, [pc, #92]	@ (801059c <arm_rfft_fast_init_f32+0xc0>)
 8010540:	4a17      	ldr	r2, [pc, #92]	@ (80105a0 <arm_rfft_fast_init_f32+0xc4>)
 8010542:	4b18      	ldr	r3, [pc, #96]	@ (80105a4 <arm_rfft_fast_init_f32+0xc8>)
 8010544:	e7e0      	b.n	8010508 <arm_rfft_fast_init_f32+0x2c>
 8010546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801054a:	d1ec      	bne.n	8010526 <arm_rfft_fast_init_f32+0x4a>
 801054c:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8010550:	4915      	ldr	r1, [pc, #84]	@ (80105a8 <arm_rfft_fast_init_f32+0xcc>)
 8010552:	4a16      	ldr	r2, [pc, #88]	@ (80105ac <arm_rfft_fast_init_f32+0xd0>)
 8010554:	4b16      	ldr	r3, [pc, #88]	@ (80105b0 <arm_rfft_fast_init_f32+0xd4>)
 8010556:	e7d7      	b.n	8010508 <arm_rfft_fast_init_f32+0x2c>
 8010558:	2430      	movs	r4, #48	@ 0x30
 801055a:	4916      	ldr	r1, [pc, #88]	@ (80105b4 <arm_rfft_fast_init_f32+0xd8>)
 801055c:	4a16      	ldr	r2, [pc, #88]	@ (80105b8 <arm_rfft_fast_init_f32+0xdc>)
 801055e:	4b17      	ldr	r3, [pc, #92]	@ (80105bc <arm_rfft_fast_init_f32+0xe0>)
 8010560:	e7d2      	b.n	8010508 <arm_rfft_fast_init_f32+0x2c>
 8010562:	2414      	movs	r4, #20
 8010564:	4916      	ldr	r1, [pc, #88]	@ (80105c0 <arm_rfft_fast_init_f32+0xe4>)
 8010566:	4a17      	ldr	r2, [pc, #92]	@ (80105c4 <arm_rfft_fast_init_f32+0xe8>)
 8010568:	4b17      	ldr	r3, [pc, #92]	@ (80105c8 <arm_rfft_fast_init_f32+0xec>)
 801056a:	e7cd      	b.n	8010508 <arm_rfft_fast_init_f32+0x2c>
 801056c:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8010570:	4916      	ldr	r1, [pc, #88]	@ (80105cc <arm_rfft_fast_init_f32+0xf0>)
 8010572:	4a17      	ldr	r2, [pc, #92]	@ (80105d0 <arm_rfft_fast_init_f32+0xf4>)
 8010574:	4b17      	ldr	r3, [pc, #92]	@ (80105d4 <arm_rfft_fast_init_f32+0xf8>)
 8010576:	e7c7      	b.n	8010508 <arm_rfft_fast_init_f32+0x2c>
 8010578:	24d0      	movs	r4, #208	@ 0xd0
 801057a:	4917      	ldr	r1, [pc, #92]	@ (80105d8 <arm_rfft_fast_init_f32+0xfc>)
 801057c:	4a17      	ldr	r2, [pc, #92]	@ (80105dc <arm_rfft_fast_init_f32+0x100>)
 801057e:	4b18      	ldr	r3, [pc, #96]	@ (80105e0 <arm_rfft_fast_init_f32+0x104>)
 8010580:	e7c2      	b.n	8010508 <arm_rfft_fast_init_f32+0x2c>
 8010582:	bf00      	nop
 8010584:	080334e8 	.word	0x080334e8
 8010588:	08023edc 	.word	0x08023edc
 801058c:	0802a04c 	.word	0x0802a04c
 8010590:	08027fdc 	.word	0x08027fdc
 8010594:	080352a8 	.word	0x080352a8
 8010598:	08037798 	.word	0x08037798
 801059c:	080309cc 	.word	0x080309cc
 80105a0:	0802e8cc 	.word	0x0802e8cc
 80105a4:	0802804c 	.word	0x0802804c
 80105a8:	08037428 	.word	0x08037428
 80105ac:	0802e04c 	.word	0x0802e04c
 80105b0:	080354a8 	.word	0x080354a8
 80105b4:	08031884 	.word	0x08031884
 80105b8:	080308cc 	.word	0x080308cc
 80105bc:	08027edc 	.word	0x08027edc
 80105c0:	080317dc 	.word	0x080317dc
 80105c4:	0802e84c 	.word	0x0802e84c
 80105c8:	08031804 	.word	0x08031804
 80105cc:	08035ca8 	.word	0x08035ca8
 80105d0:	080324e8 	.word	0x080324e8
 80105d4:	08036028 	.word	0x08036028
 80105d8:	08037998 	.word	0x08037998
 80105dc:	080320e8 	.word	0x080320e8
 80105e0:	08037028 	.word	0x08037028

080105e4 <arm_rfft_fast_f32>:
 80105e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e8:	8a06      	ldrh	r6, [r0, #16]
 80105ea:	0876      	lsrs	r6, r6, #1
 80105ec:	4607      	mov	r7, r0
 80105ee:	4615      	mov	r5, r2
 80105f0:	8006      	strh	r6, [r0, #0]
 80105f2:	460c      	mov	r4, r1
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d15c      	bne.n	80106b2 <arm_rfft_fast_f32+0xce>
 80105f8:	461a      	mov	r2, r3
 80105fa:	2301      	movs	r3, #1
 80105fc:	f000 fbe6 	bl	8010dcc <arm_cfft_f32>
 8010600:	edd4 7a00 	vldr	s15, [r4]
 8010604:	ed94 7a01 	vldr	s14, [r4, #4]
 8010608:	883e      	ldrh	r6, [r7, #0]
 801060a:	6978      	ldr	r0, [r7, #20]
 801060c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010610:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010614:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8010618:	ee77 6a87 	vadd.f32	s13, s15, s14
 801061c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010620:	3e01      	subs	r6, #1
 8010622:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8010626:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801062a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801062e:	ed85 7a00 	vstr	s14, [r5]
 8010632:	edc5 7a01 	vstr	s15, [r5, #4]
 8010636:	3010      	adds	r0, #16
 8010638:	f105 0210 	add.w	r2, r5, #16
 801063c:	3b08      	subs	r3, #8
 801063e:	f104 0110 	add.w	r1, r4, #16
 8010642:	ed51 4a02 	vldr	s9, [r1, #-8]
 8010646:	ed93 5a02 	vldr	s10, [r3, #8]
 801064a:	ed11 7a01 	vldr	s14, [r1, #-4]
 801064e:	ed10 6a02 	vldr	s12, [r0, #-8]
 8010652:	edd3 5a03 	vldr	s11, [r3, #12]
 8010656:	ed50 6a01 	vldr	s13, [r0, #-4]
 801065a:	ee75 7a64 	vsub.f32	s15, s10, s9
 801065e:	ee35 4a87 	vadd.f32	s8, s11, s14
 8010662:	ee35 5a24 	vadd.f32	s10, s10, s9
 8010666:	ee77 5a65 	vsub.f32	s11, s14, s11
 801066a:	ee66 4a27 	vmul.f32	s9, s12, s15
 801066e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8010672:	ee34 5a85 	vadd.f32	s10, s9, s10
 8010676:	ee26 6a04 	vmul.f32	s12, s12, s8
 801067a:	ee66 6a84 	vmul.f32	s13, s13, s8
 801067e:	ee77 7a25 	vadd.f32	s15, s14, s11
 8010682:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010686:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801068a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801068e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8010692:	3e01      	subs	r6, #1
 8010694:	ed42 6a02 	vstr	s13, [r2, #-8]
 8010698:	ed42 7a01 	vstr	s15, [r2, #-4]
 801069c:	f1a3 0308 	sub.w	r3, r3, #8
 80106a0:	f101 0108 	add.w	r1, r1, #8
 80106a4:	f100 0008 	add.w	r0, r0, #8
 80106a8:	f102 0208 	add.w	r2, r2, #8
 80106ac:	d1c9      	bne.n	8010642 <arm_rfft_fast_f32+0x5e>
 80106ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106b2:	edd1 7a00 	vldr	s15, [r1]
 80106b6:	edd1 6a01 	vldr	s13, [r1, #4]
 80106ba:	6941      	ldr	r1, [r0, #20]
 80106bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80106c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80106c4:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80106c8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80106cc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80106d0:	3e01      	subs	r6, #1
 80106d2:	ed82 7a00 	vstr	s14, [r2]
 80106d6:	edc2 7a01 	vstr	s15, [r2, #4]
 80106da:	00f0      	lsls	r0, r6, #3
 80106dc:	b3ee      	cbz	r6, 801075a <arm_rfft_fast_f32+0x176>
 80106de:	3808      	subs	r0, #8
 80106e0:	f101 0e10 	add.w	lr, r1, #16
 80106e4:	4420      	add	r0, r4
 80106e6:	f104 0110 	add.w	r1, r4, #16
 80106ea:	f102 0c10 	add.w	ip, r2, #16
 80106ee:	ed90 7a02 	vldr	s14, [r0, #8]
 80106f2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80106f6:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80106fa:	ed90 4a03 	vldr	s8, [r0, #12]
 80106fe:	ed11 5a01 	vldr	s10, [r1, #-4]
 8010702:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8010706:	ee76 7ac7 	vsub.f32	s15, s13, s14
 801070a:	ee74 4a05 	vadd.f32	s9, s8, s10
 801070e:	ee26 3a27 	vmul.f32	s6, s12, s15
 8010712:	ee77 6a26 	vadd.f32	s13, s14, s13
 8010716:	ee35 5a44 	vsub.f32	s10, s10, s8
 801071a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801071e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010722:	ee77 7a05 	vadd.f32	s15, s14, s10
 8010726:	ee26 6a24 	vmul.f32	s12, s12, s9
 801072a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801072e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010732:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8010736:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801073a:	ee27 7a23 	vmul.f32	s14, s14, s7
 801073e:	3e01      	subs	r6, #1
 8010740:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8010744:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8010748:	f1a0 0008 	sub.w	r0, r0, #8
 801074c:	f101 0108 	add.w	r1, r1, #8
 8010750:	f10e 0e08 	add.w	lr, lr, #8
 8010754:	f10c 0c08 	add.w	ip, ip, #8
 8010758:	d1c9      	bne.n	80106ee <arm_rfft_fast_f32+0x10a>
 801075a:	4638      	mov	r0, r7
 801075c:	4629      	mov	r1, r5
 801075e:	461a      	mov	r2, r3
 8010760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010764:	2301      	movs	r3, #1
 8010766:	f000 bb31 	b.w	8010dcc <arm_cfft_f32>
 801076a:	bf00      	nop

0801076c <arm_cfft_radix8by2_f32>:
 801076c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010770:	ed2d 8b08 	vpush	{d8-d11}
 8010774:	f8b0 e000 	ldrh.w	lr, [r0]
 8010778:	6842      	ldr	r2, [r0, #4]
 801077a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801077e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8010782:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8010786:	4607      	mov	r7, r0
 8010788:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801078c:	f000 80af 	beq.w	80108ee <arm_cfft_radix8by2_f32+0x182>
 8010790:	3310      	adds	r3, #16
 8010792:	18ce      	adds	r6, r1, r3
 8010794:	3210      	adds	r2, #16
 8010796:	4443      	add	r3, r8
 8010798:	f101 0510 	add.w	r5, r1, #16
 801079c:	f108 0410 	add.w	r4, r8, #16
 80107a0:	ed54 1a04 	vldr	s3, [r4, #-16]
 80107a4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80107a8:	ed53 3a03 	vldr	s7, [r3, #-12]
 80107ac:	ed53 5a02 	vldr	s11, [r3, #-8]
 80107b0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80107b4:	ed54 6a03 	vldr	s13, [r4, #-12]
 80107b8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80107bc:	ed16 2a04 	vldr	s4, [r6, #-16]
 80107c0:	ed56 2a03 	vldr	s5, [r6, #-12]
 80107c4:	ed15 6a03 	vldr	s12, [r5, #-12]
 80107c8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80107cc:	ed15 3a04 	vldr	s6, [r5, #-16]
 80107d0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80107d4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80107d8:	ed16 1a01 	vldr	s2, [r6, #-4]
 80107dc:	ed55 4a02 	vldr	s9, [r5, #-8]
 80107e0:	ee73 ba21 	vadd.f32	s23, s6, s3
 80107e4:	ee36 ba26 	vadd.f32	s22, s12, s13
 80107e8:	ee37 aa27 	vadd.f32	s20, s14, s15
 80107ec:	ee72 9a04 	vadd.f32	s19, s4, s8
 80107f0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80107f4:	ee31 8a05 	vadd.f32	s16, s2, s10
 80107f8:	ee74 aa80 	vadd.f32	s21, s9, s0
 80107fc:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8010800:	ed45 ba04 	vstr	s23, [r5, #-16]
 8010804:	ed05 ba03 	vstr	s22, [r5, #-12]
 8010808:	ed45 aa02 	vstr	s21, [r5, #-8]
 801080c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8010810:	ed06 8a01 	vstr	s16, [r6, #-4]
 8010814:	ed46 9a04 	vstr	s19, [r6, #-16]
 8010818:	ed06 9a03 	vstr	s18, [r6, #-12]
 801081c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8010820:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010824:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8010828:	ed12 6a03 	vldr	s12, [r2, #-12]
 801082c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8010830:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010834:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010838:	ee26 8a86 	vmul.f32	s16, s13, s12
 801083c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8010840:	ee63 1a22 	vmul.f32	s3, s6, s5
 8010844:	ee24 4a22 	vmul.f32	s8, s8, s5
 8010848:	ee23 3a06 	vmul.f32	s6, s6, s12
 801084c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8010850:	ee23 6a86 	vmul.f32	s12, s7, s12
 8010854:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010858:	ee36 6a04 	vadd.f32	s12, s12, s8
 801085c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010860:	ee72 3a63 	vsub.f32	s7, s4, s7
 8010864:	ee71 2a88 	vadd.f32	s5, s3, s16
 8010868:	ed44 6a03 	vstr	s13, [r4, #-12]
 801086c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8010870:	ed43 3a04 	vstr	s7, [r3, #-16]
 8010874:	ed03 6a03 	vstr	s12, [r3, #-12]
 8010878:	ee77 7a67 	vsub.f32	s15, s14, s15
 801087c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8010880:	ed12 7a01 	vldr	s14, [r2, #-4]
 8010884:	ed52 5a02 	vldr	s11, [r2, #-8]
 8010888:	ee35 6a41 	vsub.f32	s12, s10, s2
 801088c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8010890:	ee67 3a87 	vmul.f32	s7, s15, s14
 8010894:	ee26 5a87 	vmul.f32	s10, s13, s14
 8010898:	ee24 4aa5 	vmul.f32	s8, s9, s11
 801089c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80108a0:	ee64 4a87 	vmul.f32	s9, s9, s14
 80108a4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80108a8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80108ac:	ee26 6a25 	vmul.f32	s12, s12, s11
 80108b0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80108b4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80108b8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80108bc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80108c0:	f1be 0e01 	subs.w	lr, lr, #1
 80108c4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80108c8:	f105 0510 	add.w	r5, r5, #16
 80108cc:	ed44 7a01 	vstr	s15, [r4, #-4]
 80108d0:	f106 0610 	add.w	r6, r6, #16
 80108d4:	ed03 6a02 	vstr	s12, [r3, #-8]
 80108d8:	ed03 7a01 	vstr	s14, [r3, #-4]
 80108dc:	f102 0210 	add.w	r2, r2, #16
 80108e0:	f104 0410 	add.w	r4, r4, #16
 80108e4:	f103 0310 	add.w	r3, r3, #16
 80108e8:	f47f af5a 	bne.w	80107a0 <arm_cfft_radix8by2_f32+0x34>
 80108ec:	687a      	ldr	r2, [r7, #4]
 80108ee:	fa1f f48c 	uxth.w	r4, ip
 80108f2:	4608      	mov	r0, r1
 80108f4:	2302      	movs	r3, #2
 80108f6:	4621      	mov	r1, r4
 80108f8:	f000 fefc 	bl	80116f4 <arm_radix8_butterfly_f32>
 80108fc:	ecbd 8b08 	vpop	{d8-d11}
 8010900:	4640      	mov	r0, r8
 8010902:	4621      	mov	r1, r4
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	2302      	movs	r3, #2
 8010908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801090c:	f000 bef2 	b.w	80116f4 <arm_radix8_butterfly_f32>

08010910 <arm_cfft_radix8by4_f32>:
 8010910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010914:	ed2d 8b0a 	vpush	{d8-d12}
 8010918:	8802      	ldrh	r2, [r0, #0]
 801091a:	ed91 6a00 	vldr	s12, [r1]
 801091e:	b08f      	sub	sp, #60	@ 0x3c
 8010920:	460f      	mov	r7, r1
 8010922:	0852      	lsrs	r2, r2, #1
 8010924:	0093      	lsls	r3, r2, #2
 8010926:	900c      	str	r0, [sp, #48]	@ 0x30
 8010928:	9103      	str	r1, [sp, #12]
 801092a:	6841      	ldr	r1, [r0, #4]
 801092c:	ed97 7a01 	vldr	s14, [r7, #4]
 8010930:	4638      	mov	r0, r7
 8010932:	4418      	add	r0, r3
 8010934:	4606      	mov	r6, r0
 8010936:	9009      	str	r0, [sp, #36]	@ 0x24
 8010938:	4418      	add	r0, r3
 801093a:	edd0 6a00 	vldr	s13, [r0]
 801093e:	edd6 3a00 	vldr	s7, [r6]
 8010942:	edd6 2a01 	vldr	s5, [r6, #4]
 8010946:	edd0 7a01 	vldr	s15, [r0, #4]
 801094a:	900a      	str	r0, [sp, #40]	@ 0x28
 801094c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8010950:	4604      	mov	r4, r0
 8010952:	4625      	mov	r5, r4
 8010954:	441c      	add	r4, r3
 8010956:	ed94 4a00 	vldr	s8, [r4]
 801095a:	ed94 5a01 	vldr	s10, [r4, #4]
 801095e:	9401      	str	r4, [sp, #4]
 8010960:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8010964:	4630      	mov	r0, r6
 8010966:	ee74 4a24 	vadd.f32	s9, s8, s9
 801096a:	463e      	mov	r6, r7
 801096c:	ee14 ea90 	vmov	lr, s9
 8010970:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010974:	f846 eb08 	str.w	lr, [r6], #8
 8010978:	ee37 6a27 	vadd.f32	s12, s14, s15
 801097c:	edd0 4a01 	vldr	s9, [r0, #4]
 8010980:	9604      	str	r6, [sp, #16]
 8010982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010986:	9e01      	ldr	r6, [sp, #4]
 8010988:	ee32 3aa6 	vadd.f32	s6, s5, s13
 801098c:	ed96 2a01 	vldr	s4, [r6, #4]
 8010990:	ee36 7a24 	vadd.f32	s14, s12, s9
 8010994:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8010998:	ee77 4ae3 	vsub.f32	s9, s15, s7
 801099c:	ee36 6a62 	vsub.f32	s12, s12, s5
 80109a0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80109a4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80109a8:	ee73 3a45 	vsub.f32	s7, s6, s10
 80109ac:	4604      	mov	r4, r0
 80109ae:	ee36 6a45 	vsub.f32	s12, s12, s10
 80109b2:	ee75 6a26 	vadd.f32	s13, s10, s13
 80109b6:	46a3      	mov	fp, r4
 80109b8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80109bc:	ee34 5a84 	vadd.f32	s10, s9, s8
 80109c0:	ee13 8a90 	vmov	r8, s7
 80109c4:	46a4      	mov	ip, r4
 80109c6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80109ca:	ed87 7a01 	vstr	s14, [r7, #4]
 80109ce:	f84b 8b08 	str.w	r8, [fp], #8
 80109d2:	f1ac 0704 	sub.w	r7, ip, #4
 80109d6:	ed8c 5a01 	vstr	s10, [ip, #4]
 80109da:	f101 0c08 	add.w	ip, r1, #8
 80109de:	462c      	mov	r4, r5
 80109e0:	f8cd c014 	str.w	ip, [sp, #20]
 80109e4:	ee15 ca90 	vmov	ip, s11
 80109e8:	f844 cb08 	str.w	ip, [r4], #8
 80109ec:	9407      	str	r4, [sp, #28]
 80109ee:	f101 0410 	add.w	r4, r1, #16
 80109f2:	ed85 6a01 	vstr	s12, [r5, #4]
 80109f6:	0852      	lsrs	r2, r2, #1
 80109f8:	9402      	str	r4, [sp, #8]
 80109fa:	462c      	mov	r4, r5
 80109fc:	f101 0518 	add.w	r5, r1, #24
 8010a00:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010a02:	46b2      	mov	sl, r6
 8010a04:	9506      	str	r5, [sp, #24]
 8010a06:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8010a0a:	3a02      	subs	r2, #2
 8010a0c:	ee16 5a90 	vmov	r5, s13
 8010a10:	46b6      	mov	lr, r6
 8010a12:	4630      	mov	r0, r6
 8010a14:	0852      	lsrs	r2, r2, #1
 8010a16:	f84a 5b08 	str.w	r5, [sl], #8
 8010a1a:	f1a0 0604 	sub.w	r6, r0, #4
 8010a1e:	edce 7a01 	vstr	s15, [lr, #4]
 8010a22:	9208      	str	r2, [sp, #32]
 8010a24:	f000 8130 	beq.w	8010c88 <arm_cfft_radix8by4_f32+0x378>
 8010a28:	4691      	mov	r9, r2
 8010a2a:	9a03      	ldr	r2, [sp, #12]
 8010a2c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010a30:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8010a34:	3b08      	subs	r3, #8
 8010a36:	f102 0510 	add.w	r5, r2, #16
 8010a3a:	f101 0c20 	add.w	ip, r1, #32
 8010a3e:	f1a4 020c 	sub.w	r2, r4, #12
 8010a42:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8010a46:	4433      	add	r3, r6
 8010a48:	3410      	adds	r4, #16
 8010a4a:	4650      	mov	r0, sl
 8010a4c:	4659      	mov	r1, fp
 8010a4e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8010a52:	ed14 5a02 	vldr	s10, [r4, #-8]
 8010a56:	ed91 7a00 	vldr	s14, [r1]
 8010a5a:	edd0 7a00 	vldr	s15, [r0]
 8010a5e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8010a62:	ed54 5a01 	vldr	s11, [r4, #-4]
 8010a66:	edd0 6a01 	vldr	s13, [r0, #4]
 8010a6a:	ed91 6a01 	vldr	s12, [r1, #4]
 8010a6e:	ee33 8a85 	vadd.f32	s16, s7, s10
 8010a72:	ee34 0a25 	vadd.f32	s0, s8, s11
 8010a76:	ee78 4a07 	vadd.f32	s9, s16, s14
 8010a7a:	ee74 5a65 	vsub.f32	s11, s8, s11
 8010a7e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8010a82:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8010a86:	ed45 4a02 	vstr	s9, [r5, #-8]
 8010a8a:	edd1 4a01 	vldr	s9, [r1, #4]
 8010a8e:	ed90 4a01 	vldr	s8, [r0, #4]
 8010a92:	ee70 4a24 	vadd.f32	s9, s0, s9
 8010a96:	ee76 aa05 	vadd.f32	s21, s12, s10
 8010a9a:	ee74 4a84 	vadd.f32	s9, s9, s8
 8010a9e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8010aa2:	ed45 4a01 	vstr	s9, [r5, #-4]
 8010aa6:	edd6 1a00 	vldr	s3, [r6]
 8010aaa:	edd7 0a00 	vldr	s1, [r7]
 8010aae:	ed92 4a02 	vldr	s8, [r2, #8]
 8010ab2:	edd3 3a02 	vldr	s7, [r3, #8]
 8010ab6:	ed93 2a01 	vldr	s4, [r3, #4]
 8010aba:	ed16 1a01 	vldr	s2, [r6, #-4]
 8010abe:	edd2 2a01 	vldr	s5, [r2, #4]
 8010ac2:	ed57 9a01 	vldr	s19, [r7, #-4]
 8010ac6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8010aca:	ee39 3a81 	vadd.f32	s6, s19, s2
 8010ace:	ee74 8a84 	vadd.f32	s17, s9, s8
 8010ad2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8010ad6:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8010ada:	ee7a aae6 	vsub.f32	s21, s21, s13
 8010ade:	ee18 aa90 	vmov	sl, s17
 8010ae2:	f847 a908 	str.w	sl, [r7], #-8
 8010ae6:	edd2 8a01 	vldr	s17, [r2, #4]
 8010aea:	ed93 9a01 	vldr	s18, [r3, #4]
 8010aee:	ee73 8a28 	vadd.f32	s17, s6, s17
 8010af2:	ee3a aa27 	vadd.f32	s20, s20, s15
 8010af6:	ee78 8a89 	vadd.f32	s17, s17, s18
 8010afa:	ee74 0a63 	vsub.f32	s1, s8, s7
 8010afe:	edc7 8a01 	vstr	s17, [r7, #4]
 8010b02:	ed18 ba02 	vldr	s22, [r8, #-8]
 8010b06:	ed58 8a01 	vldr	s17, [r8, #-4]
 8010b0a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8010b0e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8010b12:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8010b16:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8010b1a:	ee30 9a81 	vadd.f32	s18, s1, s2
 8010b1e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8010b22:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8010b26:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8010b2a:	ee69 baa8 	vmul.f32	s23, s19, s17
 8010b2e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8010b32:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8010b36:	ee69 8a28 	vmul.f32	s17, s18, s17
 8010b3a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8010b3e:	ee1c aa10 	vmov	sl, s24
 8010b42:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8010b46:	f841 ab08 	str.w	sl, [r1], #8
 8010b4a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8010b4e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8010b52:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8010b56:	ee33 3a62 	vsub.f32	s6, s6, s5
 8010b5a:	ed01 aa01 	vstr	s20, [r1, #-4]
 8010b5e:	edc2 8a01 	vstr	s17, [r2, #4]
 8010b62:	ed82 ba02 	vstr	s22, [r2, #8]
 8010b66:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8010b6a:	ee74 3a63 	vsub.f32	s7, s8, s7
 8010b6e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8010b72:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8010b76:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010b7a:	ee33 3a42 	vsub.f32	s6, s6, s4
 8010b7e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010b82:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010b86:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8010b8a:	ee63 8a04 	vmul.f32	s17, s6, s8
 8010b8e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8010b92:	ee60 9a04 	vmul.f32	s19, s0, s8
 8010b96:	ee28 8a04 	vmul.f32	s16, s16, s8
 8010b9a:	ee20 0a24 	vmul.f32	s0, s0, s9
 8010b9e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8010ba2:	ee39 4a68 	vsub.f32	s8, s18, s17
 8010ba6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8010baa:	ee14 aa10 	vmov	sl, s8
 8010bae:	ee30 0a48 	vsub.f32	s0, s0, s16
 8010bb2:	ee63 4a24 	vmul.f32	s9, s6, s9
 8010bb6:	ed44 9a02 	vstr	s19, [r4, #-8]
 8010bba:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8010bbe:	ed04 0a01 	vstr	s0, [r4, #-4]
 8010bc2:	f846 a908 	str.w	sl, [r6], #-8
 8010bc6:	ee35 6a46 	vsub.f32	s12, s10, s12
 8010bca:	ee35 7a87 	vadd.f32	s14, s11, s14
 8010bce:	edc6 3a01 	vstr	s7, [r6, #4]
 8010bd2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bda:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8010bde:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8010be2:	ee67 5a86 	vmul.f32	s11, s15, s12
 8010be6:	ee26 5a87 	vmul.f32	s10, s13, s14
 8010bea:	ee72 2a62 	vsub.f32	s5, s4, s5
 8010bee:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8010bf2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8010bf6:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010bfa:	ee62 0a86 	vmul.f32	s1, s5, s12
 8010bfe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c06:	ee21 6a06 	vmul.f32	s12, s2, s12
 8010c0a:	ee62 2a87 	vmul.f32	s5, s5, s14
 8010c0e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8010c12:	ee15 aa90 	vmov	sl, s11
 8010c16:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010c1a:	f840 ab08 	str.w	sl, [r0], #8
 8010c1e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8010c22:	ee76 2a22 	vadd.f32	s5, s12, s5
 8010c26:	f1b9 0901 	subs.w	r9, r9, #1
 8010c2a:	ed40 7a01 	vstr	s15, [r0, #-4]
 8010c2e:	f105 0508 	add.w	r5, r5, #8
 8010c32:	ed83 1a02 	vstr	s2, [r3, #8]
 8010c36:	edc3 2a01 	vstr	s5, [r3, #4]
 8010c3a:	f108 0808 	add.w	r8, r8, #8
 8010c3e:	f1a2 0208 	sub.w	r2, r2, #8
 8010c42:	f10c 0c10 	add.w	ip, ip, #16
 8010c46:	f104 0408 	add.w	r4, r4, #8
 8010c4a:	f10e 0e18 	add.w	lr, lr, #24
 8010c4e:	f1a3 0308 	sub.w	r3, r3, #8
 8010c52:	f47f aefc 	bne.w	8010a4e <arm_cfft_radix8by4_f32+0x13e>
 8010c56:	9908      	ldr	r1, [sp, #32]
 8010c58:	9802      	ldr	r0, [sp, #8]
 8010c5a:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8010c5e:	00cb      	lsls	r3, r1, #3
 8010c60:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010c64:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8010c68:	9102      	str	r1, [sp, #8]
 8010c6a:	9904      	ldr	r1, [sp, #16]
 8010c6c:	4419      	add	r1, r3
 8010c6e:	9104      	str	r1, [sp, #16]
 8010c70:	9905      	ldr	r1, [sp, #20]
 8010c72:	4419      	add	r1, r3
 8010c74:	9105      	str	r1, [sp, #20]
 8010c76:	9907      	ldr	r1, [sp, #28]
 8010c78:	449b      	add	fp, r3
 8010c7a:	4419      	add	r1, r3
 8010c7c:	449a      	add	sl, r3
 8010c7e:	9b06      	ldr	r3, [sp, #24]
 8010c80:	9107      	str	r1, [sp, #28]
 8010c82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c86:	9306      	str	r3, [sp, #24]
 8010c88:	9a04      	ldr	r2, [sp, #16]
 8010c8a:	9807      	ldr	r0, [sp, #28]
 8010c8c:	edd2 3a00 	vldr	s7, [r2]
 8010c90:	ed90 4a00 	vldr	s8, [r0]
 8010c94:	eddb 7a00 	vldr	s15, [fp]
 8010c98:	ed9a 3a00 	vldr	s6, [sl]
 8010c9c:	edd2 4a01 	vldr	s9, [r2, #4]
 8010ca0:	ed90 7a01 	vldr	s14, [r0, #4]
 8010ca4:	ed9b 2a01 	vldr	s4, [fp, #4]
 8010ca8:	edda 5a01 	vldr	s11, [sl, #4]
 8010cac:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8010cb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010cb2:	ee73 6a84 	vadd.f32	s13, s7, s8
 8010cb6:	ee34 6a87 	vadd.f32	s12, s9, s14
 8010cba:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8010cbe:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010cc2:	ee33 5a05 	vadd.f32	s10, s6, s10
 8010cc6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8010cca:	ed82 5a00 	vstr	s10, [r2]
 8010cce:	ed9b 5a01 	vldr	s10, [fp, #4]
 8010cd2:	edda 4a01 	vldr	s9, [sl, #4]
 8010cd6:	ee36 5a05 	vadd.f32	s10, s12, s10
 8010cda:	ee72 3a04 	vadd.f32	s7, s4, s8
 8010cde:	ee35 5a24 	vadd.f32	s10, s10, s9
 8010ce2:	ee77 4a67 	vsub.f32	s9, s14, s15
 8010ce6:	ed82 5a01 	vstr	s10, [r2, #4]
 8010cea:	9a05      	ldr	r2, [sp, #20]
 8010cec:	ee34 5a83 	vadd.f32	s10, s9, s6
 8010cf0:	edd2 1a00 	vldr	s3, [r2]
 8010cf4:	edd2 2a01 	vldr	s5, [r2, #4]
 8010cf8:	9a02      	ldr	r2, [sp, #8]
 8010cfa:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8010cfe:	ee36 6a42 	vsub.f32	s12, s12, s4
 8010d02:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8010d06:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010d0a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8010d0e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8010d12:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8010d16:	ee35 5a63 	vsub.f32	s10, s10, s7
 8010d1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010d1e:	edcb 2a00 	vstr	s5, [fp]
 8010d22:	ed8b 5a01 	vstr	s10, [fp, #4]
 8010d26:	edd2 3a01 	vldr	s7, [r2, #4]
 8010d2a:	ed92 5a00 	vldr	s10, [r2]
 8010d2e:	9a06      	ldr	r2, [sp, #24]
 8010d30:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010d34:	ee36 6a65 	vsub.f32	s12, s12, s11
 8010d38:	ee66 4a85 	vmul.f32	s9, s13, s10
 8010d3c:	ee26 5a05 	vmul.f32	s10, s12, s10
 8010d40:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8010d44:	ee26 6a23 	vmul.f32	s12, s12, s7
 8010d48:	ee75 6a66 	vsub.f32	s13, s10, s13
 8010d4c:	ee34 6a86 	vadd.f32	s12, s9, s12
 8010d50:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010d58:	edc0 6a01 	vstr	s13, [r0, #4]
 8010d5c:	ed80 6a00 	vstr	s12, [r0]
 8010d60:	ed92 6a01 	vldr	s12, [r2, #4]
 8010d64:	9803      	ldr	r0, [sp, #12]
 8010d66:	ee77 7a43 	vsub.f32	s15, s14, s6
 8010d6a:	ee75 5a84 	vadd.f32	s11, s11, s8
 8010d6e:	ed92 7a00 	vldr	s14, [r2]
 8010d72:	ee65 6a87 	vmul.f32	s13, s11, s14
 8010d76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010d7a:	ee65 5a86 	vmul.f32	s11, s11, s12
 8010d7e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010d82:	ee77 5a65 	vsub.f32	s11, s14, s11
 8010d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d8a:	edca 5a01 	vstr	s11, [sl, #4]
 8010d8e:	edca 7a00 	vstr	s15, [sl]
 8010d92:	6872      	ldr	r2, [r6, #4]
 8010d94:	4621      	mov	r1, r4
 8010d96:	2304      	movs	r3, #4
 8010d98:	f000 fcac 	bl	80116f4 <arm_radix8_butterfly_f32>
 8010d9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d9e:	6872      	ldr	r2, [r6, #4]
 8010da0:	4621      	mov	r1, r4
 8010da2:	2304      	movs	r3, #4
 8010da4:	f000 fca6 	bl	80116f4 <arm_radix8_butterfly_f32>
 8010da8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010daa:	6872      	ldr	r2, [r6, #4]
 8010dac:	4621      	mov	r1, r4
 8010dae:	2304      	movs	r3, #4
 8010db0:	f000 fca0 	bl	80116f4 <arm_radix8_butterfly_f32>
 8010db4:	9801      	ldr	r0, [sp, #4]
 8010db6:	6872      	ldr	r2, [r6, #4]
 8010db8:	4621      	mov	r1, r4
 8010dba:	2304      	movs	r3, #4
 8010dbc:	b00f      	add	sp, #60	@ 0x3c
 8010dbe:	ecbd 8b0a 	vpop	{d8-d12}
 8010dc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc6:	f000 bc95 	b.w	80116f4 <arm_radix8_butterfly_f32>
 8010dca:	bf00      	nop

08010dcc <arm_cfft_f32>:
 8010dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dd0:	2a01      	cmp	r2, #1
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	4617      	mov	r7, r2
 8010dd6:	460c      	mov	r4, r1
 8010dd8:	4698      	mov	r8, r3
 8010dda:	8805      	ldrh	r5, [r0, #0]
 8010ddc:	d054      	beq.n	8010e88 <arm_cfft_f32+0xbc>
 8010dde:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8010de2:	d04c      	beq.n	8010e7e <arm_cfft_f32+0xb2>
 8010de4:	d916      	bls.n	8010e14 <arm_cfft_f32+0x48>
 8010de6:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8010dea:	d01a      	beq.n	8010e22 <arm_cfft_f32+0x56>
 8010dec:	d95c      	bls.n	8010ea8 <arm_cfft_f32+0xdc>
 8010dee:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8010df2:	d044      	beq.n	8010e7e <arm_cfft_f32+0xb2>
 8010df4:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8010df8:	d105      	bne.n	8010e06 <arm_cfft_f32+0x3a>
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	6872      	ldr	r2, [r6, #4]
 8010e00:	2301      	movs	r3, #1
 8010e02:	f000 fc77 	bl	80116f4 <arm_radix8_butterfly_f32>
 8010e06:	f1b8 0f00 	cmp.w	r8, #0
 8010e0a:	d111      	bne.n	8010e30 <arm_cfft_f32+0x64>
 8010e0c:	2f01      	cmp	r7, #1
 8010e0e:	d016      	beq.n	8010e3e <arm_cfft_f32+0x72>
 8010e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e14:	2d20      	cmp	r5, #32
 8010e16:	d032      	beq.n	8010e7e <arm_cfft_f32+0xb2>
 8010e18:	d94a      	bls.n	8010eb0 <arm_cfft_f32+0xe4>
 8010e1a:	2d40      	cmp	r5, #64	@ 0x40
 8010e1c:	d0ed      	beq.n	8010dfa <arm_cfft_f32+0x2e>
 8010e1e:	2d80      	cmp	r5, #128	@ 0x80
 8010e20:	d1f1      	bne.n	8010e06 <arm_cfft_f32+0x3a>
 8010e22:	4630      	mov	r0, r6
 8010e24:	4621      	mov	r1, r4
 8010e26:	f7ff fca1 	bl	801076c <arm_cfft_radix8by2_f32>
 8010e2a:	f1b8 0f00 	cmp.w	r8, #0
 8010e2e:	d0ed      	beq.n	8010e0c <arm_cfft_f32+0x40>
 8010e30:	4620      	mov	r0, r4
 8010e32:	89b1      	ldrh	r1, [r6, #12]
 8010e34:	68b2      	ldr	r2, [r6, #8]
 8010e36:	f7ef f9d3 	bl	80001e0 <arm_bitreversal_32>
 8010e3a:	2f01      	cmp	r7, #1
 8010e3c:	d1e8      	bne.n	8010e10 <arm_cfft_f32+0x44>
 8010e3e:	ee07 5a90 	vmov	s15, r5
 8010e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e46:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010e4a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8010e4e:	2d00      	cmp	r5, #0
 8010e50:	d0de      	beq.n	8010e10 <arm_cfft_f32+0x44>
 8010e52:	f104 0108 	add.w	r1, r4, #8
 8010e56:	2300      	movs	r3, #0
 8010e58:	3301      	adds	r3, #1
 8010e5a:	429d      	cmp	r5, r3
 8010e5c:	f101 0108 	add.w	r1, r1, #8
 8010e60:	ed11 7a04 	vldr	s14, [r1, #-16]
 8010e64:	ed51 7a03 	vldr	s15, [r1, #-12]
 8010e68:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010e6c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010e70:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010e74:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010e78:	d1ee      	bne.n	8010e58 <arm_cfft_f32+0x8c>
 8010e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e7e:	4630      	mov	r0, r6
 8010e80:	4621      	mov	r1, r4
 8010e82:	f7ff fd45 	bl	8010910 <arm_cfft_radix8by4_f32>
 8010e86:	e7be      	b.n	8010e06 <arm_cfft_f32+0x3a>
 8010e88:	b1ad      	cbz	r5, 8010eb6 <arm_cfft_f32+0xea>
 8010e8a:	f101 030c 	add.w	r3, r1, #12
 8010e8e:	2200      	movs	r2, #0
 8010e90:	ed53 7a02 	vldr	s15, [r3, #-8]
 8010e94:	3201      	adds	r2, #1
 8010e96:	eef1 7a67 	vneg.f32	s15, s15
 8010e9a:	4295      	cmp	r5, r2
 8010e9c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8010ea0:	f103 0308 	add.w	r3, r3, #8
 8010ea4:	d1f4      	bne.n	8010e90 <arm_cfft_f32+0xc4>
 8010ea6:	e79a      	b.n	8010dde <arm_cfft_f32+0x12>
 8010ea8:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8010eac:	d0a5      	beq.n	8010dfa <arm_cfft_f32+0x2e>
 8010eae:	e7aa      	b.n	8010e06 <arm_cfft_f32+0x3a>
 8010eb0:	2d10      	cmp	r5, #16
 8010eb2:	d0b6      	beq.n	8010e22 <arm_cfft_f32+0x56>
 8010eb4:	e7a7      	b.n	8010e06 <arm_cfft_f32+0x3a>
 8010eb6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8010eba:	d894      	bhi.n	8010de6 <arm_cfft_f32+0x1a>
 8010ebc:	e7aa      	b.n	8010e14 <arm_cfft_f32+0x48>
 8010ebe:	bf00      	nop

08010ec0 <arm_fir_init_f32>:
 8010ec0:	b570      	push	{r4, r5, r6, lr}
 8010ec2:	9c04      	ldr	r4, [sp, #16]
 8010ec4:	6082      	str	r2, [r0, #8]
 8010ec6:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8010eca:	3c01      	subs	r4, #1
 8010ecc:	4605      	mov	r5, r0
 8010ece:	440c      	add	r4, r1
 8010ed0:	8001      	strh	r1, [r0, #0]
 8010ed2:	461e      	mov	r6, r3
 8010ed4:	00a2      	lsls	r2, r4, #2
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	2100      	movs	r1, #0
 8010eda:	f001 f850 	bl	8011f7e <memset>
 8010ede:	606e      	str	r6, [r5, #4]
 8010ee0:	bd70      	pop	{r4, r5, r6, pc}
 8010ee2:	bf00      	nop

08010ee4 <arm_fir_f32>:
 8010ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee8:	ed2d 8b10 	vpush	{d8-d15}
 8010eec:	b089      	sub	sp, #36	@ 0x24
 8010eee:	4605      	mov	r5, r0
 8010ef0:	9003      	str	r0, [sp, #12]
 8010ef2:	8800      	ldrh	r0, [r0, #0]
 8010ef4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8010ef8:	9304      	str	r3, [sp, #16]
 8010efa:	461e      	mov	r6, r3
 8010efc:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8010f00:	3b01      	subs	r3, #1
 8010f02:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8010f06:	08f3      	lsrs	r3, r6, #3
 8010f08:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8010f0c:	9001      	str	r0, [sp, #4]
 8010f0e:	4625      	mov	r5, r4
 8010f10:	9400      	str	r4, [sp, #0]
 8010f12:	9302      	str	r3, [sp, #8]
 8010f14:	f000 81ee 	beq.w	80112f4 <arm_fir_f32+0x410>
 8010f18:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8010f1c:	469e      	mov	lr, r3
 8010f1e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8010f22:	1f1e      	subs	r6, r3, #4
 8010f24:	4604      	mov	r4, r0
 8010f26:	9605      	str	r6, [sp, #20]
 8010f28:	eb08 0003 	add.w	r0, r8, r3
 8010f2c:	f004 0a07 	and.w	sl, r4, #7
 8010f30:	4613      	mov	r3, r2
 8010f32:	f10c 0420 	add.w	r4, ip, #32
 8010f36:	f8cd c018 	str.w	ip, [sp, #24]
 8010f3a:	4684      	mov	ip, r0
 8010f3c:	4648      	mov	r0, r9
 8010f3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010f42:	9107      	str	r1, [sp, #28]
 8010f44:	f105 0720 	add.w	r7, r5, #32
 8010f48:	f101 0620 	add.w	r6, r1, #32
 8010f4c:	f102 0520 	add.w	r5, r2, #32
 8010f50:	4652      	mov	r2, sl
 8010f52:	469a      	mov	sl, r3
 8010f54:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8010f58:	f847 3c20 	str.w	r3, [r7, #-32]
 8010f5c:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8010f60:	f847 3c1c 	str.w	r3, [r7, #-28]
 8010f64:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8010f68:	f847 3c18 	str.w	r3, [r7, #-24]
 8010f6c:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8010f70:	f847 3c14 	str.w	r3, [r7, #-20]
 8010f74:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8010f78:	f847 3c10 	str.w	r3, [r7, #-16]
 8010f7c:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8010f80:	f847 3c0c 	str.w	r3, [r7, #-12]
 8010f84:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8010f88:	f847 3c08 	str.w	r3, [r7, #-8]
 8010f8c:	eddf 3af1 	vldr	s7, [pc, #964]	@ 8011354 <arm_fir_f32+0x470>
 8010f90:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010f94:	f847 3c04 	str.w	r3, [r7, #-4]
 8010f98:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 8010f9c:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 8010fa0:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 8010fa4:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 8010fa8:	ed14 1a04 	vldr	s2, [r4, #-16]
 8010fac:	ed54 0a03 	vldr	s1, [r4, #-12]
 8010fb0:	ed14 0a02 	vldr	s0, [r4, #-8]
 8010fb4:	1f21      	subs	r1, r4, #4
 8010fb6:	eef0 8a63 	vmov.f32	s17, s7
 8010fba:	eef0 9a63 	vmov.f32	s19, s7
 8010fbe:	eef0 aa63 	vmov.f32	s21, s7
 8010fc2:	eef0 ba63 	vmov.f32	s23, s7
 8010fc6:	eeb0 ca63 	vmov.f32	s24, s7
 8010fca:	eef0 ca63 	vmov.f32	s25, s7
 8010fce:	eeb0 da63 	vmov.f32	s26, s7
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	f000 81e8 	beq.w	80113a8 <arm_fir_f32+0x4c4>
 8010fd8:	f108 0120 	add.w	r1, r8, #32
 8010fdc:	f104 031c 	add.w	r3, r4, #28
 8010fe0:	4683      	mov	fp, r0
 8010fe2:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 8010fe6:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 8010fea:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 8010fee:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 8010ff2:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 8010ff6:	ed11 6a04 	vldr	s12, [r1, #-16]
 8010ffa:	ed51 6a03 	vldr	s13, [r1, #-12]
 8010ffe:	ed11 7a02 	vldr	s14, [r1, #-8]
 8011002:	ed51 7a01 	vldr	s15, [r1, #-4]
 8011006:	ee23 fa04 	vmul.f32	s30, s6, s8
 801100a:	ee62 ea84 	vmul.f32	s29, s5, s8
 801100e:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 8011012:	ee22 ea04 	vmul.f32	s28, s4, s8
 8011016:	ee61 da84 	vmul.f32	s27, s3, s8
 801101a:	ee21 ba04 	vmul.f32	s22, s2, s8
 801101e:	ee20 aa84 	vmul.f32	s20, s1, s8
 8011022:	ee20 9a04 	vmul.f32	s18, s0, s8
 8011026:	ee28 4a04 	vmul.f32	s8, s16, s8
 801102a:	ee62 fa24 	vmul.f32	s31, s4, s9
 801102e:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8011032:	ee7b baad 	vadd.f32	s23, s23, s27
 8011036:	ee21 eaa4 	vmul.f32	s28, s3, s9
 801103a:	ee61 da24 	vmul.f32	s27, s2, s9
 801103e:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8011042:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8011046:	ee20 baa4 	vmul.f32	s22, s1, s9
 801104a:	ee20 aa24 	vmul.f32	s20, s0, s9
 801104e:	ee3d da0f 	vadd.f32	s26, s26, s30
 8011052:	ee7c caae 	vadd.f32	s25, s25, s29
 8011056:	ee22 faa4 	vmul.f32	s30, s5, s9
 801105a:	ee78 8a89 	vadd.f32	s17, s17, s18
 801105e:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 8011062:	ee28 9a24 	vmul.f32	s18, s16, s9
 8011066:	ee73 3a84 	vadd.f32	s7, s7, s8
 801106a:	ee63 4a24 	vmul.f32	s9, s6, s9
 801106e:	ee22 4a05 	vmul.f32	s8, s4, s10
 8011072:	ee61 ea05 	vmul.f32	s29, s2, s10
 8011076:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 801107a:	ee3d da0f 	vadd.f32	s26, s26, s30
 801107e:	ee7c caaf 	vadd.f32	s25, s25, s31
 8011082:	ee20 fa85 	vmul.f32	s30, s1, s10
 8011086:	ee61 fa85 	vmul.f32	s31, s3, s10
 801108a:	ee3c ea0e 	vadd.f32	s28, s24, s28
 801108e:	ee7b daad 	vadd.f32	s27, s23, s27
 8011092:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8011096:	ee60 ba05 	vmul.f32	s23, s0, s10
 801109a:	ee68 aa05 	vmul.f32	s21, s16, s10
 801109e:	ee39 aa8a 	vadd.f32	s20, s19, s20
 80110a2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80110a6:	ee73 3aa4 	vadd.f32	s7, s7, s9
 80110aa:	ee63 4a05 	vmul.f32	s9, s6, s10
 80110ae:	ee22 5a85 	vmul.f32	s10, s5, s10
 80110b2:	ee21 9a25 	vmul.f32	s18, s2, s11
 80110b6:	ee20 ca25 	vmul.f32	s24, s0, s11
 80110ba:	ee3d da04 	vadd.f32	s26, s26, s8
 80110be:	ee7c caaf 	vadd.f32	s25, s25, s31
 80110c2:	ee21 4aa5 	vmul.f32	s8, s3, s11
 80110c6:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80110ca:	ed53 1a04 	vldr	s3, [r3, #-16]
 80110ce:	ee60 eaa5 	vmul.f32	s29, s1, s11
 80110d2:	ee7d da8f 	vadd.f32	s27, s27, s30
 80110d6:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80110da:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80110de:	ee68 ba25 	vmul.f32	s23, s16, s11
 80110e2:	ee63 aa25 	vmul.f32	s21, s6, s11
 80110e6:	ee78 8aa4 	vadd.f32	s17, s17, s9
 80110ea:	ee73 3a85 	vadd.f32	s7, s7, s10
 80110ee:	ee22 5aa5 	vmul.f32	s10, s5, s11
 80110f2:	ee62 5a25 	vmul.f32	s11, s4, s11
 80110f6:	ee61 4a06 	vmul.f32	s9, s2, s12
 80110fa:	ee60 9a86 	vmul.f32	s19, s1, s12
 80110fe:	ee60 fa06 	vmul.f32	s31, s0, s12
 8011102:	ed13 1a03 	vldr	s2, [r3, #-12]
 8011106:	ee23 fa06 	vmul.f32	s30, s6, s12
 801110a:	ee3d da04 	vadd.f32	s26, s26, s8
 801110e:	ee7c ca89 	vadd.f32	s25, s25, s18
 8011112:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8011116:	ee28 9a06 	vmul.f32	s18, s16, s12
 801111a:	ee7d da8c 	vadd.f32	s27, s27, s24
 801111e:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8011122:	ee22 ca86 	vmul.f32	s24, s5, s12
 8011126:	ee3a aa2a 	vadd.f32	s20, s20, s21
 801112a:	ee78 8a85 	vadd.f32	s17, s17, s10
 801112e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8011132:	ee62 5a06 	vmul.f32	s11, s4, s12
 8011136:	ee21 6a86 	vmul.f32	s12, s3, s12
 801113a:	ee20 4a26 	vmul.f32	s8, s0, s13
 801113e:	ee63 ea26 	vmul.f32	s29, s6, s13
 8011142:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8011146:	ee22 5a26 	vmul.f32	s10, s4, s13
 801114a:	ee3d da24 	vadd.f32	s26, s26, s9
 801114e:	ee7c caa9 	vadd.f32	s25, s25, s19
 8011152:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8011156:	ee3e ea2f 	vadd.f32	s28, s28, s31
 801115a:	ed53 0a02 	vldr	s1, [r3, #-8]
 801115e:	ee68 fa26 	vmul.f32	s31, s16, s13
 8011162:	ee7d da89 	vadd.f32	s27, s27, s18
 8011166:	ee3b ba0f 	vadd.f32	s22, s22, s30
 801116a:	ee78 8aa5 	vadd.f32	s17, s17, s11
 801116e:	ee22 faa6 	vmul.f32	s30, s5, s13
 8011172:	ee73 3a86 	vadd.f32	s7, s7, s12
 8011176:	ee21 6aa6 	vmul.f32	s12, s3, s13
 801117a:	ee61 6a26 	vmul.f32	s13, s2, s13
 801117e:	ee60 aa07 	vmul.f32	s21, s0, s14
 8011182:	ee28 ca07 	vmul.f32	s24, s16, s14
 8011186:	ee63 ba07 	vmul.f32	s23, s6, s14
 801118a:	ee7a 9a05 	vadd.f32	s19, s20, s10
 801118e:	ee78 8a86 	vadd.f32	s17, s17, s12
 8011192:	ee3d da24 	vadd.f32	s26, s26, s9
 8011196:	ee7c ca84 	vadd.f32	s25, s25, s8
 801119a:	ee7d daae 	vadd.f32	s27, s27, s29
 801119e:	ee22 9a07 	vmul.f32	s18, s4, s14
 80111a2:	ee62 ea87 	vmul.f32	s29, s5, s14
 80111a6:	ee61 5a87 	vmul.f32	s11, s3, s14
 80111aa:	ee73 3aa6 	vadd.f32	s7, s7, s13
 80111ae:	ed13 0a01 	vldr	s0, [r3, #-4]
 80111b2:	ee61 6a07 	vmul.f32	s13, s2, s14
 80111b6:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80111ba:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80111be:	ee20 7a87 	vmul.f32	s14, s1, s14
 80111c2:	ee68 4a27 	vmul.f32	s9, s16, s15
 80111c6:	ee3d da2a 	vadd.f32	s26, s26, s21
 80111ca:	ee7c ca8c 	vadd.f32	s25, s25, s24
 80111ce:	ee23 8a27 	vmul.f32	s16, s6, s15
 80111d2:	ee3e ea2b 	vadd.f32	s28, s28, s23
 80111d6:	ee22 4aa7 	vmul.f32	s8, s5, s15
 80111da:	ee22 aa27 	vmul.f32	s20, s4, s15
 80111de:	ee21 5aa7 	vmul.f32	s10, s3, s15
 80111e2:	ee21 6a27 	vmul.f32	s12, s2, s15
 80111e6:	ee78 6aa6 	vadd.f32	s13, s17, s13
 80111ea:	ee7d daae 	vadd.f32	s27, s27, s29
 80111ee:	ee60 8aa7 	vmul.f32	s17, s1, s15
 80111f2:	ee3b ba09 	vadd.f32	s22, s22, s18
 80111f6:	ee79 9aa5 	vadd.f32	s19, s19, s11
 80111fa:	ee73 3a87 	vadd.f32	s7, s7, s14
 80111fe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011202:	f1bb 0b01 	subs.w	fp, fp, #1
 8011206:	f101 0120 	add.w	r1, r1, #32
 801120a:	ee3d da24 	vadd.f32	s26, s26, s9
 801120e:	ee7c ca88 	vadd.f32	s25, s25, s16
 8011212:	ee3e ca04 	vadd.f32	s24, s28, s8
 8011216:	ee7d ba8a 	vadd.f32	s23, s27, s20
 801121a:	ee7b aa05 	vadd.f32	s21, s22, s10
 801121e:	ee79 9a86 	vadd.f32	s19, s19, s12
 8011222:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8011226:	ee73 3aa7 	vadd.f32	s7, s7, s15
 801122a:	f103 0320 	add.w	r3, r3, #32
 801122e:	f47f aed8 	bne.w	8010fe2 <arm_fir_f32+0xfe>
 8011232:	eb09 0104 	add.w	r1, r9, r4
 8011236:	46e3      	mov	fp, ip
 8011238:	b3a2      	cbz	r2, 80112a4 <arm_fir_f32+0x3c0>
 801123a:	4613      	mov	r3, r2
 801123c:	ecbb 6a01 	vldmia	fp!, {s12}
 8011240:	ecf1 7a01 	vldmia	r1!, {s15}
 8011244:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011248:	ee22 4a86 	vmul.f32	s8, s5, s12
 801124c:	ee62 4a06 	vmul.f32	s9, s4, s12
 8011250:	ee21 5a86 	vmul.f32	s10, s3, s12
 8011254:	ee61 5a06 	vmul.f32	s11, s2, s12
 8011258:	ee60 6a86 	vmul.f32	s13, s1, s12
 801125c:	ee20 7a06 	vmul.f32	s14, s0, s12
 8011260:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011264:	3b01      	subs	r3, #1
 8011266:	ee3d da03 	vadd.f32	s26, s26, s6
 801126a:	ee7c ca84 	vadd.f32	s25, s25, s8
 801126e:	eeb0 3a62 	vmov.f32	s6, s5
 8011272:	ee3c ca24 	vadd.f32	s24, s24, s9
 8011276:	eef0 2a42 	vmov.f32	s5, s4
 801127a:	ee7b ba85 	vadd.f32	s23, s23, s10
 801127e:	eeb0 2a61 	vmov.f32	s4, s3
 8011282:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8011286:	eef0 1a41 	vmov.f32	s3, s2
 801128a:	ee79 9aa6 	vadd.f32	s19, s19, s13
 801128e:	eeb0 1a60 	vmov.f32	s2, s1
 8011292:	ee78 8a87 	vadd.f32	s17, s17, s14
 8011296:	eef0 0a40 	vmov.f32	s1, s0
 801129a:	ee73 3a86 	vadd.f32	s7, s7, s12
 801129e:	eeb0 0a67 	vmov.f32	s0, s15
 80112a2:	d1cb      	bne.n	801123c <arm_fir_f32+0x358>
 80112a4:	f1be 0e01 	subs.w	lr, lr, #1
 80112a8:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 80112ac:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 80112b0:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 80112b4:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 80112b8:	ed45 aa04 	vstr	s21, [r5, #-16]
 80112bc:	ed45 9a03 	vstr	s19, [r5, #-12]
 80112c0:	ed45 8a02 	vstr	s17, [r5, #-8]
 80112c4:	ed45 3a01 	vstr	s7, [r5, #-4]
 80112c8:	f107 0720 	add.w	r7, r7, #32
 80112cc:	f106 0620 	add.w	r6, r6, #32
 80112d0:	f104 0420 	add.w	r4, r4, #32
 80112d4:	f105 0520 	add.w	r5, r5, #32
 80112d8:	f47f ae3c 	bne.w	8010f54 <arm_fir_f32+0x70>
 80112dc:	9b02      	ldr	r3, [sp, #8]
 80112de:	9800      	ldr	r0, [sp, #0]
 80112e0:	f8dd c018 	ldr.w	ip, [sp, #24]
 80112e4:	9907      	ldr	r1, [sp, #28]
 80112e6:	015b      	lsls	r3, r3, #5
 80112e8:	4652      	mov	r2, sl
 80112ea:	4418      	add	r0, r3
 80112ec:	9000      	str	r0, [sp, #0]
 80112ee:	4419      	add	r1, r3
 80112f0:	449c      	add	ip, r3
 80112f2:	441a      	add	r2, r3
 80112f4:	9b04      	ldr	r3, [sp, #16]
 80112f6:	f013 0e07 	ands.w	lr, r3, #7
 80112fa:	d01f      	beq.n	801133c <arm_fir_f32+0x458>
 80112fc:	9f00      	ldr	r7, [sp, #0]
 80112fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011302:	4676      	mov	r6, lr
 8011304:	4665      	mov	r5, ip
 8011306:	f851 3b04 	ldr.w	r3, [r1], #4
 801130a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8011354 <arm_fir_f32+0x470>
 801130e:	f847 3b04 	str.w	r3, [r7], #4
 8011312:	4644      	mov	r4, r8
 8011314:	464b      	mov	r3, r9
 8011316:	4628      	mov	r0, r5
 8011318:	ecb0 7a01 	vldmia	r0!, {s14}
 801131c:	ecf4 7a01 	vldmia	r4!, {s15}
 8011320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011324:	3b01      	subs	r3, #1
 8011326:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801132a:	d1f5      	bne.n	8011318 <arm_fir_f32+0x434>
 801132c:	3e01      	subs	r6, #1
 801132e:	ece2 6a01 	vstmia	r2!, {s13}
 8011332:	f105 0504 	add.w	r5, r5, #4
 8011336:	d1e6      	bne.n	8011306 <arm_fir_f32+0x422>
 8011338:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 801133c:	9b01      	ldr	r3, [sp, #4]
 801133e:	1e59      	subs	r1, r3, #1
 8011340:	9b03      	ldr	r3, [sp, #12]
 8011342:	088e      	lsrs	r6, r1, #2
 8011344:	685c      	ldr	r4, [r3, #4]
 8011346:	d020      	beq.n	801138a <arm_fir_f32+0x4a6>
 8011348:	f104 0210 	add.w	r2, r4, #16
 801134c:	f10c 0310 	add.w	r3, ip, #16
 8011350:	4630      	mov	r0, r6
 8011352:	e001      	b.n	8011358 <arm_fir_f32+0x474>
 8011354:	00000000 	.word	0x00000000
 8011358:	f853 5c10 	ldr.w	r5, [r3, #-16]
 801135c:	f842 5c10 	str.w	r5, [r2, #-16]
 8011360:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8011364:	f842 5c0c 	str.w	r5, [r2, #-12]
 8011368:	f853 5c08 	ldr.w	r5, [r3, #-8]
 801136c:	f842 5c08 	str.w	r5, [r2, #-8]
 8011370:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8011374:	f842 5c04 	str.w	r5, [r2, #-4]
 8011378:	3801      	subs	r0, #1
 801137a:	f103 0310 	add.w	r3, r3, #16
 801137e:	f102 0210 	add.w	r2, r2, #16
 8011382:	d1e9      	bne.n	8011358 <arm_fir_f32+0x474>
 8011384:	0133      	lsls	r3, r6, #4
 8011386:	441c      	add	r4, r3
 8011388:	449c      	add	ip, r3
 801138a:	f011 0303 	ands.w	r3, r1, #3
 801138e:	d006      	beq.n	801139e <arm_fir_f32+0x4ba>
 8011390:	4622      	mov	r2, r4
 8011392:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011396:	f842 1b04 	str.w	r1, [r2], #4
 801139a:	3b01      	subs	r3, #1
 801139c:	d1f9      	bne.n	8011392 <arm_fir_f32+0x4ae>
 801139e:	b009      	add	sp, #36	@ 0x24
 80113a0:	ecbd 8b10 	vpop	{d8-d15}
 80113a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a8:	46c3      	mov	fp, r8
 80113aa:	e745      	b.n	8011238 <arm_fir_f32+0x354>

080113ac <arm_cmplx_mag_f32>:
 80113ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113b0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80113b4:	b084      	sub	sp, #16
 80113b6:	d07f      	beq.n	80114b8 <arm_cmplx_mag_f32+0x10c>
 80113b8:	2700      	movs	r7, #0
 80113ba:	f100 0420 	add.w	r4, r0, #32
 80113be:	f101 0510 	add.w	r5, r1, #16
 80113c2:	4646      	mov	r6, r8
 80113c4:	e05a      	b.n	801147c <arm_cmplx_mag_f32+0xd0>
 80113c6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80113ca:	eeb4 0a40 	vcmp.f32	s0, s0
 80113ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d2:	f040 80a4 	bne.w	801151e <arm_cmplx_mag_f32+0x172>
 80113d6:	ed05 0a04 	vstr	s0, [r5, #-16]
 80113da:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 80113de:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 80113e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80113e6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80113ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80113ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	f2c0 808f 	blt.w	8011518 <arm_cmplx_mag_f32+0x16c>
 80113fa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80113fe:	eeb4 0a40 	vcmp.f32	s0, s0
 8011402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011406:	f040 80af 	bne.w	8011568 <arm_cmplx_mag_f32+0x1bc>
 801140a:	ed05 0a03 	vstr	s0, [r5, #-12]
 801140e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8011412:	ed14 0a03 	vldr	s0, [r4, #-12]
 8011416:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801141a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801141e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142a:	db72      	blt.n	8011512 <arm_cmplx_mag_f32+0x166>
 801142c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8011430:	eeb4 0a40 	vcmp.f32	s0, s0
 8011434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011438:	f040 808c 	bne.w	8011554 <arm_cmplx_mag_f32+0x1a8>
 801143c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8011440:	ed54 7a02 	vldr	s15, [r4, #-8]
 8011444:	ed14 0a01 	vldr	s0, [r4, #-4]
 8011448:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801144c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011450:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011454:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801145c:	db20      	blt.n	80114a0 <arm_cmplx_mag_f32+0xf4>
 801145e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8011462:	eeb4 0a40 	vcmp.f32	s0, s0
 8011466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801146a:	d169      	bne.n	8011540 <arm_cmplx_mag_f32+0x194>
 801146c:	3e01      	subs	r6, #1
 801146e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8011472:	f104 0420 	add.w	r4, r4, #32
 8011476:	f105 0510 	add.w	r5, r5, #16
 801147a:	d019      	beq.n	80114b0 <arm_cmplx_mag_f32+0x104>
 801147c:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 8011480:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8011484:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011488:	ee20 0a00 	vmul.f32	s0, s0, s0
 801148c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011498:	da95      	bge.n	80113c6 <arm_cmplx_mag_f32+0x1a>
 801149a:	f845 7c10 	str.w	r7, [r5, #-16]
 801149e:	e79c      	b.n	80113da <arm_cmplx_mag_f32+0x2e>
 80114a0:	3e01      	subs	r6, #1
 80114a2:	f845 7c04 	str.w	r7, [r5, #-4]
 80114a6:	f104 0420 	add.w	r4, r4, #32
 80114aa:	f105 0510 	add.w	r5, r5, #16
 80114ae:	d1e5      	bne.n	801147c <arm_cmplx_mag_f32+0xd0>
 80114b0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80114b4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80114b8:	f012 0503 	ands.w	r5, r2, #3
 80114bc:	d026      	beq.n	801150c <arm_cmplx_mag_f32+0x160>
 80114be:	2600      	movs	r6, #0
 80114c0:	f100 0408 	add.w	r4, r0, #8
 80114c4:	e00c      	b.n	80114e0 <arm_cmplx_mag_f32+0x134>
 80114c6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80114ca:	eeb4 0a40 	vcmp.f32	s0, s0
 80114ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d2:	d12e      	bne.n	8011532 <arm_cmplx_mag_f32+0x186>
 80114d4:	3d01      	subs	r5, #1
 80114d6:	ed01 0a01 	vstr	s0, [r1, #-4]
 80114da:	f104 0408 	add.w	r4, r4, #8
 80114de:	d015      	beq.n	801150c <arm_cmplx_mag_f32+0x160>
 80114e0:	ed54 7a02 	vldr	s15, [r4, #-8]
 80114e4:	ed14 0a01 	vldr	s0, [r4, #-4]
 80114e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80114ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80114f0:	3104      	adds	r1, #4
 80114f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80114f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80114fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114fe:	dae2      	bge.n	80114c6 <arm_cmplx_mag_f32+0x11a>
 8011500:	3d01      	subs	r5, #1
 8011502:	f841 6c04 	str.w	r6, [r1, #-4]
 8011506:	f104 0408 	add.w	r4, r4, #8
 801150a:	d1e9      	bne.n	80114e0 <arm_cmplx_mag_f32+0x134>
 801150c:	b004      	add	sp, #16
 801150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011512:	f845 7c08 	str.w	r7, [r5, #-8]
 8011516:	e793      	b.n	8011440 <arm_cmplx_mag_f32+0x94>
 8011518:	f845 7c0c 	str.w	r7, [r5, #-12]
 801151c:	e777      	b.n	801140e <arm_cmplx_mag_f32+0x62>
 801151e:	eeb0 0a67 	vmov.f32	s0, s15
 8011522:	9203      	str	r2, [sp, #12]
 8011524:	9102      	str	r1, [sp, #8]
 8011526:	9001      	str	r0, [sp, #4]
 8011528:	f001 fdea 	bl	8013100 <sqrtf>
 801152c:	a801      	add	r0, sp, #4
 801152e:	c807      	ldmia	r0, {r0, r1, r2}
 8011530:	e751      	b.n	80113d6 <arm_cmplx_mag_f32+0x2a>
 8011532:	eeb0 0a67 	vmov.f32	s0, s15
 8011536:	9101      	str	r1, [sp, #4]
 8011538:	f001 fde2 	bl	8013100 <sqrtf>
 801153c:	9901      	ldr	r1, [sp, #4]
 801153e:	e7c9      	b.n	80114d4 <arm_cmplx_mag_f32+0x128>
 8011540:	eeb0 0a67 	vmov.f32	s0, s15
 8011544:	9203      	str	r2, [sp, #12]
 8011546:	9102      	str	r1, [sp, #8]
 8011548:	9001      	str	r0, [sp, #4]
 801154a:	f001 fdd9 	bl	8013100 <sqrtf>
 801154e:	a801      	add	r0, sp, #4
 8011550:	c807      	ldmia	r0, {r0, r1, r2}
 8011552:	e78b      	b.n	801146c <arm_cmplx_mag_f32+0xc0>
 8011554:	eeb0 0a67 	vmov.f32	s0, s15
 8011558:	9203      	str	r2, [sp, #12]
 801155a:	9102      	str	r1, [sp, #8]
 801155c:	9001      	str	r0, [sp, #4]
 801155e:	f001 fdcf 	bl	8013100 <sqrtf>
 8011562:	a801      	add	r0, sp, #4
 8011564:	c807      	ldmia	r0, {r0, r1, r2}
 8011566:	e769      	b.n	801143c <arm_cmplx_mag_f32+0x90>
 8011568:	eeb0 0a67 	vmov.f32	s0, s15
 801156c:	9203      	str	r2, [sp, #12]
 801156e:	9102      	str	r1, [sp, #8]
 8011570:	9001      	str	r0, [sp, #4]
 8011572:	f001 fdc5 	bl	8013100 <sqrtf>
 8011576:	a801      	add	r0, sp, #4
 8011578:	c807      	ldmia	r0, {r0, r1, r2}
 801157a:	e746      	b.n	801140a <arm_cmplx_mag_f32+0x5e>

0801157c <arm_cos_f32>:
 801157c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 80115f0 <arm_cos_f32+0x74>
 8011580:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011584:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8011588:	ee30 0a27 	vadd.f32	s0, s0, s15
 801158c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011594:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011598:	d504      	bpl.n	80115a4 <arm_cos_f32+0x28>
 801159a:	ee17 3a90 	vmov	r3, s15
 801159e:	3b01      	subs	r3, #1
 80115a0:	ee07 3a90 	vmov	s15, r3
 80115a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80115a8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80115f4 <arm_cos_f32+0x78>
 80115ac:	4a12      	ldr	r2, [pc, #72]	@ (80115f8 <arm_cos_f32+0x7c>)
 80115ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80115b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80115b6:	ee20 0a26 	vmul.f32	s0, s0, s13
 80115ba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80115be:	ee17 3a90 	vmov	r3, s15
 80115c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115c6:	ee07 3a90 	vmov	s15, r3
 80115ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80115ce:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80115d2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80115d6:	edd1 6a01 	vldr	s13, [r1, #4]
 80115da:	ed91 0a00 	vldr	s0, [r1]
 80115de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80115e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80115e6:	ee27 0a00 	vmul.f32	s0, s14, s0
 80115ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80115ee:	4770      	bx	lr
 80115f0:	3e22f983 	.word	0x3e22f983
 80115f4:	44000000 	.word	0x44000000
 80115f8:	080318e4 	.word	0x080318e4

080115fc <arm_sub_f32>:
 80115fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115fe:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8011602:	d033      	beq.n	801166c <arm_sub_f32+0x70>
 8011604:	f100 0610 	add.w	r6, r0, #16
 8011608:	f101 0510 	add.w	r5, r1, #16
 801160c:	f102 0410 	add.w	r4, r2, #16
 8011610:	4677      	mov	r7, lr
 8011612:	ed16 6a03 	vldr	s12, [r6, #-12]
 8011616:	ed15 4a03 	vldr	s8, [r5, #-12]
 801161a:	ed56 6a02 	vldr	s13, [r6, #-8]
 801161e:	ed55 4a02 	vldr	s9, [r5, #-8]
 8011622:	ed16 7a01 	vldr	s14, [r6, #-4]
 8011626:	ed15 5a01 	vldr	s10, [r5, #-4]
 801162a:	ed56 7a04 	vldr	s15, [r6, #-16]
 801162e:	ed55 5a04 	vldr	s11, [r5, #-16]
 8011632:	ee36 6a44 	vsub.f32	s12, s12, s8
 8011636:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801163a:	ee37 7a45 	vsub.f32	s14, s14, s10
 801163e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011642:	3f01      	subs	r7, #1
 8011644:	ed04 6a03 	vstr	s12, [r4, #-12]
 8011648:	ed44 6a02 	vstr	s13, [r4, #-8]
 801164c:	ed04 7a01 	vstr	s14, [r4, #-4]
 8011650:	ed44 7a04 	vstr	s15, [r4, #-16]
 8011654:	f106 0610 	add.w	r6, r6, #16
 8011658:	f105 0510 	add.w	r5, r5, #16
 801165c:	f104 0410 	add.w	r4, r4, #16
 8011660:	d1d7      	bne.n	8011612 <arm_sub_f32+0x16>
 8011662:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011666:	4420      	add	r0, r4
 8011668:	4421      	add	r1, r4
 801166a:	4422      	add	r2, r4
 801166c:	f013 0303 	ands.w	r3, r3, #3
 8011670:	d009      	beq.n	8011686 <arm_sub_f32+0x8a>
 8011672:	ecf0 7a01 	vldmia	r0!, {s15}
 8011676:	ecb1 7a01 	vldmia	r1!, {s14}
 801167a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801167e:	3b01      	subs	r3, #1
 8011680:	ece2 7a01 	vstmia	r2!, {s15}
 8011684:	d1f5      	bne.n	8011672 <arm_sub_f32+0x76>
 8011686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011688 <arm_abs_f32>:
 8011688:	b470      	push	{r4, r5, r6}
 801168a:	0896      	lsrs	r6, r2, #2
 801168c:	d025      	beq.n	80116da <arm_abs_f32+0x52>
 801168e:	f100 0410 	add.w	r4, r0, #16
 8011692:	f101 0310 	add.w	r3, r1, #16
 8011696:	4635      	mov	r5, r6
 8011698:	ed14 6a04 	vldr	s12, [r4, #-16]
 801169c:	ed54 6a03 	vldr	s13, [r4, #-12]
 80116a0:	ed14 7a02 	vldr	s14, [r4, #-8]
 80116a4:	ed54 7a01 	vldr	s15, [r4, #-4]
 80116a8:	eeb0 6ac6 	vabs.f32	s12, s12
 80116ac:	eef0 6ae6 	vabs.f32	s13, s13
 80116b0:	eeb0 7ac7 	vabs.f32	s14, s14
 80116b4:	eef0 7ae7 	vabs.f32	s15, s15
 80116b8:	3d01      	subs	r5, #1
 80116ba:	ed03 6a04 	vstr	s12, [r3, #-16]
 80116be:	ed43 6a03 	vstr	s13, [r3, #-12]
 80116c2:	ed03 7a02 	vstr	s14, [r3, #-8]
 80116c6:	ed43 7a01 	vstr	s15, [r3, #-4]
 80116ca:	f104 0410 	add.w	r4, r4, #16
 80116ce:	f103 0310 	add.w	r3, r3, #16
 80116d2:	d1e1      	bne.n	8011698 <arm_abs_f32+0x10>
 80116d4:	0136      	lsls	r6, r6, #4
 80116d6:	4430      	add	r0, r6
 80116d8:	4431      	add	r1, r6
 80116da:	f012 0203 	ands.w	r2, r2, #3
 80116de:	d007      	beq.n	80116f0 <arm_abs_f32+0x68>
 80116e0:	ecf0 7a01 	vldmia	r0!, {s15}
 80116e4:	3a01      	subs	r2, #1
 80116e6:	eef0 7ae7 	vabs.f32	s15, s15
 80116ea:	ece1 7a01 	vstmia	r1!, {s15}
 80116ee:	d1f7      	bne.n	80116e0 <arm_abs_f32+0x58>
 80116f0:	bc70      	pop	{r4, r5, r6}
 80116f2:	4770      	bx	lr

080116f4 <arm_radix8_butterfly_f32>:
 80116f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f8:	ed2d 8b10 	vpush	{d8-d15}
 80116fc:	b09d      	sub	sp, #116	@ 0x74
 80116fe:	461c      	mov	r4, r3
 8011700:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8011a24 <arm_radix8_butterfly_f32+0x330>
 8011704:	921a      	str	r2, [sp, #104]	@ 0x68
 8011706:	1d03      	adds	r3, r0, #4
 8011708:	4682      	mov	sl, r0
 801170a:	4689      	mov	r9, r1
 801170c:	468b      	mov	fp, r1
 801170e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8011710:	9400      	str	r4, [sp, #0]
 8011712:	469e      	mov	lr, r3
 8011714:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8011718:	005a      	lsls	r2, r3, #1
 801171a:	18d6      	adds	r6, r2, r3
 801171c:	18f5      	adds	r5, r6, r3
 801171e:	9203      	str	r2, [sp, #12]
 8011720:	195a      	adds	r2, r3, r5
 8011722:	18d0      	adds	r0, r2, r3
 8011724:	00df      	lsls	r7, r3, #3
 8011726:	1819      	adds	r1, r3, r0
 8011728:	463c      	mov	r4, r7
 801172a:	9701      	str	r7, [sp, #4]
 801172c:	4457      	add	r7, sl
 801172e:	930c      	str	r3, [sp, #48]	@ 0x30
 8011730:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8011734:	011b      	lsls	r3, r3, #4
 8011736:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 801173a:	eb07 0c04 	add.w	ip, r7, r4
 801173e:	9c00      	ldr	r4, [sp, #0]
 8011740:	9302      	str	r3, [sp, #8]
 8011742:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8011746:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 801174a:	3204      	adds	r2, #4
 801174c:	3104      	adds	r1, #4
 801174e:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8011752:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011756:	f04f 0800 	mov.w	r8, #0
 801175a:	eddc 7a00 	vldr	s15, [ip]
 801175e:	edd7 6a00 	vldr	s13, [r7]
 8011762:	edd6 3a00 	vldr	s7, [r6]
 8011766:	ed5e aa01 	vldr	s21, [lr, #-4]
 801176a:	edd5 4a00 	vldr	s9, [r5]
 801176e:	ed90 2a00 	vldr	s4, [r0]
 8011772:	ed12 7a01 	vldr	s14, [r2, #-4]
 8011776:	ed51 0a01 	vldr	s1, [r1, #-4]
 801177a:	ee77 8a82 	vadd.f32	s17, s15, s4
 801177e:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8011782:	ee76 1a87 	vadd.f32	s3, s13, s14
 8011786:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 801178a:	ee31 6a84 	vadd.f32	s12, s3, s8
 801178e:	ee33 5a28 	vadd.f32	s10, s6, s17
 8011792:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011796:	ee75 6a06 	vadd.f32	s13, s10, s12
 801179a:	ee35 5a46 	vsub.f32	s10, s10, s12
 801179e:	ed4e 6a01 	vstr	s13, [lr, #-4]
 80117a2:	ed85 5a00 	vstr	s10, [r5]
 80117a6:	ed96 1a01 	vldr	s2, [r6, #4]
 80117aa:	edd7 5a01 	vldr	s11, [r7, #4]
 80117ae:	ed92 aa00 	vldr	s20, [r2]
 80117b2:	ed91 6a00 	vldr	s12, [r1]
 80117b6:	ed9e 9a00 	vldr	s18, [lr]
 80117ba:	ed95 5a01 	vldr	s10, [r5, #4]
 80117be:	eddc 6a01 	vldr	s13, [ip, #4]
 80117c2:	edd0 9a01 	vldr	s19, [r0, #4]
 80117c6:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80117ca:	ee71 2a46 	vsub.f32	s5, s2, s12
 80117ce:	ee75 3aca 	vsub.f32	s7, s11, s20
 80117d2:	ee37 0a60 	vsub.f32	s0, s14, s1
 80117d6:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80117da:	ee37 7a20 	vadd.f32	s14, s14, s1
 80117de:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80117e2:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80117e6:	ee79 3a05 	vadd.f32	s7, s18, s10
 80117ea:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80117ee:	ee39 5a45 	vsub.f32	s10, s18, s10
 80117f2:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80117f6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80117fa:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80117fe:	ee31 6a06 	vadd.f32	s12, s2, s12
 8011802:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8011806:	ee28 8a0b 	vmul.f32	s16, s16, s22
 801180a:	ee62 2a8b 	vmul.f32	s5, s5, s22
 801180e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8011812:	ee33 3a68 	vsub.f32	s6, s6, s17
 8011816:	ee36 0a88 	vadd.f32	s0, s13, s16
 801181a:	ee75 8a86 	vadd.f32	s17, s11, s12
 801181e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8011822:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8011826:	ee75 6a62 	vsub.f32	s13, s10, s5
 801182a:	ee33 4ac9 	vsub.f32	s8, s7, s18
 801182e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8011832:	ee33 1a89 	vadd.f32	s2, s7, s18
 8011836:	ee74 5ae0 	vsub.f32	s11, s9, s1
 801183a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 801183e:	ee75 4a22 	vadd.f32	s9, s10, s5
 8011842:	ee32 5a27 	vadd.f32	s10, s4, s15
 8011846:	ee72 7a67 	vsub.f32	s15, s4, s15
 801184a:	ee33 8a06 	vadd.f32	s16, s6, s12
 801184e:	ee75 2a87 	vadd.f32	s5, s11, s14
 8011852:	ee31 9a28 	vadd.f32	s18, s2, s17
 8011856:	ee33 6a46 	vsub.f32	s12, s6, s12
 801185a:	ee74 0a61 	vsub.f32	s1, s8, s3
 801185e:	ee33 2a80 	vadd.f32	s4, s7, s0
 8011862:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8011866:	ee34 3ac5 	vsub.f32	s6, s9, s10
 801186a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801186e:	ee31 1a68 	vsub.f32	s2, s2, s17
 8011872:	ee34 4a21 	vadd.f32	s8, s8, s3
 8011876:	ee73 3ac0 	vsub.f32	s7, s7, s0
 801187a:	ee74 4a85 	vadd.f32	s9, s9, s10
 801187e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011882:	44d8      	add	r8, fp
 8011884:	45c1      	cmp	r9, r8
 8011886:	ed8e 9a00 	vstr	s18, [lr]
 801188a:	ed85 1a01 	vstr	s2, [r5, #4]
 801188e:	449e      	add	lr, r3
 8011890:	ed8c 8a00 	vstr	s16, [ip]
 8011894:	441d      	add	r5, r3
 8011896:	ed80 6a00 	vstr	s12, [r0]
 801189a:	edcc 0a01 	vstr	s1, [ip, #4]
 801189e:	ed80 4a01 	vstr	s8, [r0, #4]
 80118a2:	449c      	add	ip, r3
 80118a4:	ed87 2a00 	vstr	s4, [r7]
 80118a8:	4418      	add	r0, r3
 80118aa:	ed41 3a01 	vstr	s7, [r1, #-4]
 80118ae:	ed42 2a01 	vstr	s5, [r2, #-4]
 80118b2:	ed86 7a00 	vstr	s14, [r6]
 80118b6:	ed87 3a01 	vstr	s6, [r7, #4]
 80118ba:	edc1 4a00 	vstr	s9, [r1]
 80118be:	441f      	add	r7, r3
 80118c0:	edc2 5a00 	vstr	s11, [r2]
 80118c4:	4419      	add	r1, r3
 80118c6:	edc6 6a01 	vstr	s13, [r6, #4]
 80118ca:	441a      	add	r2, r3
 80118cc:	441e      	add	r6, r3
 80118ce:	f63f af44 	bhi.w	801175a <arm_radix8_butterfly_f32+0x66>
 80118d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80118d4:	2907      	cmp	r1, #7
 80118d6:	4620      	mov	r0, r4
 80118d8:	f240 81e9 	bls.w	8011cae <arm_radix8_butterfly_f32+0x5ba>
 80118dc:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80118e0:	193e      	adds	r6, r7, r4
 80118e2:	1935      	adds	r5, r6, r4
 80118e4:	9c03      	ldr	r4, [sp, #12]
 80118e6:	9000      	str	r0, [sp, #0]
 80118e8:	4622      	mov	r2, r4
 80118ea:	3201      	adds	r2, #1
 80118ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80118f0:	9900      	ldr	r1, [sp, #0]
 80118f2:	1828      	adds	r0, r5, r0
 80118f4:	eb00 0e01 	add.w	lr, r0, r1
 80118f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80118fa:	440a      	add	r2, r1
 80118fc:	eb04 0c01 	add.w	ip, r4, r1
 8011900:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8011904:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8011908:	9a00      	ldr	r2, [sp, #0]
 801190a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801190c:	00ed      	lsls	r5, r5, #3
 801190e:	9511      	str	r5, [sp, #68]	@ 0x44
 8011910:	00d5      	lsls	r5, r2, #3
 8011912:	950d      	str	r5, [sp, #52]	@ 0x34
 8011914:	9d01      	ldr	r5, [sp, #4]
 8011916:	3508      	adds	r5, #8
 8011918:	9516      	str	r5, [sp, #88]	@ 0x58
 801191a:	9d02      	ldr	r5, [sp, #8]
 801191c:	3508      	adds	r5, #8
 801191e:	0114      	lsls	r4, r2, #4
 8011920:	9517      	str	r5, [sp, #92]	@ 0x5c
 8011922:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011924:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8011926:	940e      	str	r4, [sp, #56]	@ 0x38
 8011928:	00c0      	lsls	r0, r0, #3
 801192a:	9010      	str	r0, [sp, #64]	@ 0x40
 801192c:	18aa      	adds	r2, r5, r2
 801192e:	9207      	str	r2, [sp, #28]
 8011930:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011932:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8011934:	18aa      	adds	r2, r5, r2
 8011936:	9208      	str	r2, [sp, #32]
 8011938:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801193a:	18aa      	adds	r2, r5, r2
 801193c:	9209      	str	r2, [sp, #36]	@ 0x24
 801193e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011942:	f10e 0204 	add.w	r2, lr, #4
 8011946:	920a      	str	r2, [sp, #40]	@ 0x28
 8011948:	00c9      	lsls	r1, r1, #3
 801194a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801194c:	310c      	adds	r1, #12
 801194e:	00f6      	lsls	r6, r6, #3
 8011950:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8011954:	9114      	str	r1, [sp, #80]	@ 0x50
 8011956:	18a9      	adds	r1, r5, r2
 8011958:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801195a:	9612      	str	r6, [sp, #72]	@ 0x48
 801195c:	00ff      	lsls	r7, r7, #3
 801195e:	19ae      	adds	r6, r5, r6
 8011960:	3008      	adds	r0, #8
 8011962:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8011966:	9606      	str	r6, [sp, #24]
 8011968:	9019      	str	r0, [sp, #100]	@ 0x64
 801196a:	18aa      	adds	r2, r5, r2
 801196c:	0164      	lsls	r4, r4, #5
 801196e:	19ee      	adds	r6, r5, r7
 8011970:	f10c 000c 	add.w	r0, ip, #12
 8011974:	9713      	str	r7, [sp, #76]	@ 0x4c
 8011976:	9604      	str	r6, [sp, #16]
 8011978:	9015      	str	r0, [sp, #84]	@ 0x54
 801197a:	9103      	str	r1, [sp, #12]
 801197c:	9205      	str	r2, [sp, #20]
 801197e:	f104 0208 	add.w	r2, r4, #8
 8011982:	9218      	str	r2, [sp, #96]	@ 0x60
 8011984:	f04f 0801 	mov.w	r8, #1
 8011988:	2200      	movs	r2, #0
 801198a:	f102 0108 	add.w	r1, r2, #8
 801198e:	460f      	mov	r7, r1
 8011990:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011992:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011994:	188e      	adds	r6, r1, r2
 8011996:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011998:	188d      	adds	r5, r1, r2
 801199a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801199c:	188c      	adds	r4, r1, r2
 801199e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80119a0:	1888      	adds	r0, r1, r2
 80119a2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80119a4:	eb01 0c02 	add.w	ip, r1, r2
 80119a8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80119aa:	440a      	add	r2, r1
 80119ac:	9903      	ldr	r1, [sp, #12]
 80119ae:	edd1 fa00 	vldr	s31, [r1]
 80119b2:	9905      	ldr	r1, [sp, #20]
 80119b4:	ed91 fa00 	vldr	s30, [r1]
 80119b8:	9904      	ldr	r1, [sp, #16]
 80119ba:	edd1 ea00 	vldr	s29, [r1]
 80119be:	9906      	ldr	r1, [sp, #24]
 80119c0:	ed91 ea00 	vldr	s28, [r1]
 80119c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80119c6:	edd1 da00 	vldr	s27, [r1]
 80119ca:	9908      	ldr	r1, [sp, #32]
 80119cc:	ed91 da00 	vldr	s26, [r1]
 80119d0:	9907      	ldr	r1, [sp, #28]
 80119d2:	edd1 ca00 	vldr	s25, [r1]
 80119d6:	9903      	ldr	r1, [sp, #12]
 80119d8:	ed91 ca01 	vldr	s24, [r1, #4]
 80119dc:	9905      	ldr	r1, [sp, #20]
 80119de:	edd1 ba01 	vldr	s23, [r1, #4]
 80119e2:	9904      	ldr	r1, [sp, #16]
 80119e4:	edd1 aa01 	vldr	s21, [r1, #4]
 80119e8:	9906      	ldr	r1, [sp, #24]
 80119ea:	ed91 aa01 	vldr	s20, [r1, #4]
 80119ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80119f0:	edd1 7a01 	vldr	s15, [r1, #4]
 80119f4:	9908      	ldr	r1, [sp, #32]
 80119f6:	edcd 7a00 	vstr	s15, [sp]
 80119fa:	edd1 7a01 	vldr	s15, [r1, #4]
 80119fe:	9907      	ldr	r1, [sp, #28]
 8011a00:	edcd 7a01 	vstr	s15, [sp, #4]
 8011a04:	edd1 7a01 	vldr	s15, [r1, #4]
 8011a08:	eb0a 0e07 	add.w	lr, sl, r7
 8011a0c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8011a0e:	edcd 7a02 	vstr	s15, [sp, #8]
 8011a12:	eb0c 010a 	add.w	r1, ip, sl
 8011a16:	4456      	add	r6, sl
 8011a18:	4455      	add	r5, sl
 8011a1a:	4454      	add	r4, sl
 8011a1c:	4450      	add	r0, sl
 8011a1e:	4452      	add	r2, sl
 8011a20:	46c4      	mov	ip, r8
 8011a22:	e001      	b.n	8011a28 <arm_radix8_butterfly_f32+0x334>
 8011a24:	3f3504f3 	.word	0x3f3504f3
 8011a28:	ed96 5a00 	vldr	s10, [r6]
 8011a2c:	ed52 9a01 	vldr	s19, [r2, #-4]
 8011a30:	ed11 6a01 	vldr	s12, [r1, #-4]
 8011a34:	edd0 7a00 	vldr	s15, [r0]
 8011a38:	ed17 7a01 	vldr	s14, [r7, #-4]
 8011a3c:	edde 3a00 	vldr	s7, [lr]
 8011a40:	ed94 3a00 	vldr	s6, [r4]
 8011a44:	ed95 2a00 	vldr	s4, [r5]
 8011a48:	ed9e 0a01 	vldr	s0, [lr, #4]
 8011a4c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8011a50:	ee32 1a06 	vadd.f32	s2, s4, s12
 8011a54:	ee33 4a29 	vadd.f32	s8, s6, s19
 8011a58:	ee77 4a87 	vadd.f32	s9, s15, s14
 8011a5c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8011a60:	ee71 6a24 	vadd.f32	s13, s2, s9
 8011a64:	ee32 2a46 	vsub.f32	s4, s4, s12
 8011a68:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8011a6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a70:	ed8e 6a00 	vstr	s12, [lr]
 8011a74:	edd0 8a01 	vldr	s17, [r0, #4]
 8011a78:	ed95 9a01 	vldr	s18, [r5, #4]
 8011a7c:	edd1 2a00 	vldr	s5, [r1]
 8011a80:	ed97 7a00 	vldr	s14, [r7]
 8011a84:	edd4 0a01 	vldr	s1, [r4, #4]
 8011a88:	ed96 6a01 	vldr	s12, [r6, #4]
 8011a8c:	edd2 5a00 	vldr	s11, [r2]
 8011a90:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8011a94:	ee33 3a69 	vsub.f32	s6, s6, s19
 8011a98:	ee39 5a62 	vsub.f32	s10, s18, s5
 8011a9c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8011aa0:	ee38 4a44 	vsub.f32	s8, s16, s8
 8011aa4:	ee38 7a87 	vadd.f32	s14, s17, s14
 8011aa8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8011aac:	ee79 2a22 	vadd.f32	s5, s18, s5
 8011ab0:	ee75 8a69 	vsub.f32	s17, s10, s19
 8011ab4:	ee32 9a27 	vadd.f32	s18, s4, s15
 8011ab8:	ee35 5a29 	vadd.f32	s10, s10, s19
 8011abc:	ee72 7a67 	vsub.f32	s15, s4, s15
 8011ac0:	ee30 2a06 	vadd.f32	s4, s0, s12
 8011ac4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8011ac8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8011acc:	ee32 9a08 	vadd.f32	s18, s4, s16
 8011ad0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8011ad4:	ee32 2a48 	vsub.f32	s4, s4, s16
 8011ad8:	ee71 4a64 	vsub.f32	s9, s2, s9
 8011adc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8011ae0:	ee32 1a87 	vadd.f32	s2, s5, s14
 8011ae4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011ae8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8011aec:	ee30 6a46 	vsub.f32	s12, s0, s12
 8011af0:	ee73 0a29 	vadd.f32	s1, s6, s19
 8011af4:	ee36 0a28 	vadd.f32	s0, s12, s17
 8011af8:	ee33 3a69 	vsub.f32	s6, s6, s19
 8011afc:	ee32 7a64 	vsub.f32	s14, s4, s9
 8011b00:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8011b04:	ee36 6a68 	vsub.f32	s12, s12, s17
 8011b08:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8011b0c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8011b10:	ee74 3a22 	vadd.f32	s7, s8, s5
 8011b14:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8011b18:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8011b1c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8011b20:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8011b24:	ee76 5a43 	vsub.f32	s11, s12, s6
 8011b28:	ee74 2a62 	vsub.f32	s5, s8, s5
 8011b2c:	ee72 4a24 	vadd.f32	s9, s4, s9
 8011b30:	ee30 4a60 	vsub.f32	s8, s0, s1
 8011b34:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8011b38:	ee30 0a20 	vadd.f32	s0, s0, s1
 8011b3c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8011b40:	ee36 6a03 	vadd.f32	s12, s12, s6
 8011b44:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011b48:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8011b4c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8011b50:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8011b54:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8011b58:	ee39 1a01 	vadd.f32	s2, s18, s2
 8011b5c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8011b60:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8011b64:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8011b68:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8011b6c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8011b70:	ee35 3a03 	vadd.f32	s6, s10, s6
 8011b74:	ee72 6a66 	vsub.f32	s13, s4, s13
 8011b78:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8011b7c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8011b80:	ed9d 4a02 	vldr	s8, [sp, #8]
 8011b84:	ed8e 1a01 	vstr	s2, [lr, #4]
 8011b88:	ee77 3a63 	vsub.f32	s7, s14, s7
 8011b8c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8011b90:	ed9d 7a01 	vldr	s14, [sp, #4]
 8011b94:	ed86 3a00 	vstr	s6, [r6]
 8011b98:	ee30 9a89 	vadd.f32	s18, s1, s18
 8011b9c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8011ba0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8011ba4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8011ba8:	ee67 2a22 	vmul.f32	s5, s14, s5
 8011bac:	ee64 1a00 	vmul.f32	s3, s8, s0
 8011bb0:	ee27 7a24 	vmul.f32	s14, s14, s9
 8011bb4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8011bb8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8011bbc:	ee64 8a28 	vmul.f32	s17, s8, s17
 8011bc0:	ed9d 4a00 	vldr	s8, [sp]
 8011bc4:	edc6 6a01 	vstr	s13, [r6, #4]
 8011bc8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8011bcc:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8011bd0:	ee64 9a29 	vmul.f32	s19, s8, s19
 8011bd4:	ee24 4a25 	vmul.f32	s8, s8, s11
 8011bd8:	ee30 7a87 	vadd.f32	s14, s1, s14
 8011bdc:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011be0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8011be4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8011be8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8011bec:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8011bf0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8011bf4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8011bf8:	ee75 1a21 	vadd.f32	s3, s10, s3
 8011bfc:	ee30 0a68 	vsub.f32	s0, s0, s17
 8011c00:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8011c04:	ee70 0a84 	vadd.f32	s1, s1, s8
 8011c08:	ee36 6a67 	vsub.f32	s12, s12, s15
 8011c0c:	44dc      	add	ip, fp
 8011c0e:	45e1      	cmp	r9, ip
 8011c10:	ed84 9a00 	vstr	s18, [r4]
 8011c14:	edc4 3a01 	vstr	s7, [r4, #4]
 8011c18:	449e      	add	lr, r3
 8011c1a:	ed02 7a01 	vstr	s14, [r2, #-4]
 8011c1e:	edc2 2a00 	vstr	s5, [r2]
 8011c22:	441e      	add	r6, r3
 8011c24:	ed85 2a00 	vstr	s4, [r5]
 8011c28:	ed85 8a01 	vstr	s16, [r5, #4]
 8011c2c:	441c      	add	r4, r3
 8011c2e:	ed47 1a01 	vstr	s3, [r7, #-4]
 8011c32:	ed87 0a00 	vstr	s0, [r7]
 8011c36:	441a      	add	r2, r3
 8011c38:	ed41 4a01 	vstr	s9, [r1, #-4]
 8011c3c:	edc1 9a00 	vstr	s19, [r1]
 8011c40:	441d      	add	r5, r3
 8011c42:	edc0 0a00 	vstr	s1, [r0]
 8011c46:	441f      	add	r7, r3
 8011c48:	ed80 6a01 	vstr	s12, [r0, #4]
 8011c4c:	4419      	add	r1, r3
 8011c4e:	4418      	add	r0, r3
 8011c50:	f63f aeea 	bhi.w	8011a28 <arm_radix8_butterfly_f32+0x334>
 8011c54:	9a03      	ldr	r2, [sp, #12]
 8011c56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8011c58:	440a      	add	r2, r1
 8011c5a:	9203      	str	r2, [sp, #12]
 8011c5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011c5e:	9a05      	ldr	r2, [sp, #20]
 8011c60:	440a      	add	r2, r1
 8011c62:	9205      	str	r2, [sp, #20]
 8011c64:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8011c66:	9a04      	ldr	r2, [sp, #16]
 8011c68:	440a      	add	r2, r1
 8011c6a:	9204      	str	r2, [sp, #16]
 8011c6c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011c6e:	9a06      	ldr	r2, [sp, #24]
 8011c70:	440a      	add	r2, r1
 8011c72:	9206      	str	r2, [sp, #24]
 8011c74:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c78:	440a      	add	r2, r1
 8011c7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c7c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011c7e:	9a08      	ldr	r2, [sp, #32]
 8011c80:	440a      	add	r2, r1
 8011c82:	9208      	str	r2, [sp, #32]
 8011c84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011c86:	9a07      	ldr	r2, [sp, #28]
 8011c88:	440a      	add	r2, r1
 8011c8a:	9207      	str	r2, [sp, #28]
 8011c8c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011c8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c90:	f108 0801 	add.w	r8, r8, #1
 8011c94:	3208      	adds	r2, #8
 8011c96:	4588      	cmp	r8, r1
 8011c98:	920a      	str	r2, [sp, #40]	@ 0x28
 8011c9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011c9c:	f47f ae75 	bne.w	801198a <arm_radix8_butterfly_f32+0x296>
 8011ca0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	46c3      	mov	fp, r8
 8011ca8:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8011cac:	e532      	b.n	8011714 <arm_radix8_butterfly_f32+0x20>
 8011cae:	b01d      	add	sp, #116	@ 0x74
 8011cb0:	ecbd 8b10 	vpop	{d8-d15}
 8011cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011cb8 <std>:
 8011cb8:	2300      	movs	r3, #0
 8011cba:	b510      	push	{r4, lr}
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8011cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011cc6:	6083      	str	r3, [r0, #8]
 8011cc8:	8181      	strh	r1, [r0, #12]
 8011cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8011ccc:	81c2      	strh	r2, [r0, #14]
 8011cce:	6183      	str	r3, [r0, #24]
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	2208      	movs	r2, #8
 8011cd4:	305c      	adds	r0, #92	@ 0x5c
 8011cd6:	f000 f952 	bl	8011f7e <memset>
 8011cda:	4b0d      	ldr	r3, [pc, #52]	@ (8011d10 <std+0x58>)
 8011cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8011cde:	4b0d      	ldr	r3, [pc, #52]	@ (8011d14 <std+0x5c>)
 8011ce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8011d18 <std+0x60>)
 8011ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8011d1c <std+0x64>)
 8011ce8:	6323      	str	r3, [r4, #48]	@ 0x30
 8011cea:	4b0d      	ldr	r3, [pc, #52]	@ (8011d20 <std+0x68>)
 8011cec:	6224      	str	r4, [r4, #32]
 8011cee:	429c      	cmp	r4, r3
 8011cf0:	d006      	beq.n	8011d00 <std+0x48>
 8011cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011cf6:	4294      	cmp	r4, r2
 8011cf8:	d002      	beq.n	8011d00 <std+0x48>
 8011cfa:	33d0      	adds	r3, #208	@ 0xd0
 8011cfc:	429c      	cmp	r4, r3
 8011cfe:	d105      	bne.n	8011d0c <std+0x54>
 8011d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d08:	f000 ba3c 	b.w	8012184 <__retarget_lock_init_recursive>
 8011d0c:	bd10      	pop	{r4, pc}
 8011d0e:	bf00      	nop
 8011d10:	08011ea5 	.word	0x08011ea5
 8011d14:	08011ec7 	.word	0x08011ec7
 8011d18:	08011eff 	.word	0x08011eff
 8011d1c:	08011f23 	.word	0x08011f23
 8011d20:	2000ec08 	.word	0x2000ec08

08011d24 <stdio_exit_handler>:
 8011d24:	4a02      	ldr	r2, [pc, #8]	@ (8011d30 <stdio_exit_handler+0xc>)
 8011d26:	4903      	ldr	r1, [pc, #12]	@ (8011d34 <stdio_exit_handler+0x10>)
 8011d28:	4803      	ldr	r0, [pc, #12]	@ (8011d38 <stdio_exit_handler+0x14>)
 8011d2a:	f000 b869 	b.w	8011e00 <_fwalk_sglue>
 8011d2e:	bf00      	nop
 8011d30:	20000030 	.word	0x20000030
 8011d34:	08012ab9 	.word	0x08012ab9
 8011d38:	20000040 	.word	0x20000040

08011d3c <cleanup_stdio>:
 8011d3c:	6841      	ldr	r1, [r0, #4]
 8011d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8011d70 <cleanup_stdio+0x34>)
 8011d40:	4299      	cmp	r1, r3
 8011d42:	b510      	push	{r4, lr}
 8011d44:	4604      	mov	r4, r0
 8011d46:	d001      	beq.n	8011d4c <cleanup_stdio+0x10>
 8011d48:	f000 feb6 	bl	8012ab8 <_fflush_r>
 8011d4c:	68a1      	ldr	r1, [r4, #8]
 8011d4e:	4b09      	ldr	r3, [pc, #36]	@ (8011d74 <cleanup_stdio+0x38>)
 8011d50:	4299      	cmp	r1, r3
 8011d52:	d002      	beq.n	8011d5a <cleanup_stdio+0x1e>
 8011d54:	4620      	mov	r0, r4
 8011d56:	f000 feaf 	bl	8012ab8 <_fflush_r>
 8011d5a:	68e1      	ldr	r1, [r4, #12]
 8011d5c:	4b06      	ldr	r3, [pc, #24]	@ (8011d78 <cleanup_stdio+0x3c>)
 8011d5e:	4299      	cmp	r1, r3
 8011d60:	d004      	beq.n	8011d6c <cleanup_stdio+0x30>
 8011d62:	4620      	mov	r0, r4
 8011d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d68:	f000 bea6 	b.w	8012ab8 <_fflush_r>
 8011d6c:	bd10      	pop	{r4, pc}
 8011d6e:	bf00      	nop
 8011d70:	2000ec08 	.word	0x2000ec08
 8011d74:	2000ec70 	.word	0x2000ec70
 8011d78:	2000ecd8 	.word	0x2000ecd8

08011d7c <global_stdio_init.part.0>:
 8011d7c:	b510      	push	{r4, lr}
 8011d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8011dac <global_stdio_init.part.0+0x30>)
 8011d80:	4c0b      	ldr	r4, [pc, #44]	@ (8011db0 <global_stdio_init.part.0+0x34>)
 8011d82:	4a0c      	ldr	r2, [pc, #48]	@ (8011db4 <global_stdio_init.part.0+0x38>)
 8011d84:	601a      	str	r2, [r3, #0]
 8011d86:	4620      	mov	r0, r4
 8011d88:	2200      	movs	r2, #0
 8011d8a:	2104      	movs	r1, #4
 8011d8c:	f7ff ff94 	bl	8011cb8 <std>
 8011d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011d94:	2201      	movs	r2, #1
 8011d96:	2109      	movs	r1, #9
 8011d98:	f7ff ff8e 	bl	8011cb8 <std>
 8011d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011da0:	2202      	movs	r2, #2
 8011da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011da6:	2112      	movs	r1, #18
 8011da8:	f7ff bf86 	b.w	8011cb8 <std>
 8011dac:	2000ed40 	.word	0x2000ed40
 8011db0:	2000ec08 	.word	0x2000ec08
 8011db4:	08011d25 	.word	0x08011d25

08011db8 <__sfp_lock_acquire>:
 8011db8:	4801      	ldr	r0, [pc, #4]	@ (8011dc0 <__sfp_lock_acquire+0x8>)
 8011dba:	f000 b9e4 	b.w	8012186 <__retarget_lock_acquire_recursive>
 8011dbe:	bf00      	nop
 8011dc0:	2000ed49 	.word	0x2000ed49

08011dc4 <__sfp_lock_release>:
 8011dc4:	4801      	ldr	r0, [pc, #4]	@ (8011dcc <__sfp_lock_release+0x8>)
 8011dc6:	f000 b9df 	b.w	8012188 <__retarget_lock_release_recursive>
 8011dca:	bf00      	nop
 8011dcc:	2000ed49 	.word	0x2000ed49

08011dd0 <__sinit>:
 8011dd0:	b510      	push	{r4, lr}
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	f7ff fff0 	bl	8011db8 <__sfp_lock_acquire>
 8011dd8:	6a23      	ldr	r3, [r4, #32]
 8011dda:	b11b      	cbz	r3, 8011de4 <__sinit+0x14>
 8011ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011de0:	f7ff bff0 	b.w	8011dc4 <__sfp_lock_release>
 8011de4:	4b04      	ldr	r3, [pc, #16]	@ (8011df8 <__sinit+0x28>)
 8011de6:	6223      	str	r3, [r4, #32]
 8011de8:	4b04      	ldr	r3, [pc, #16]	@ (8011dfc <__sinit+0x2c>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d1f5      	bne.n	8011ddc <__sinit+0xc>
 8011df0:	f7ff ffc4 	bl	8011d7c <global_stdio_init.part.0>
 8011df4:	e7f2      	b.n	8011ddc <__sinit+0xc>
 8011df6:	bf00      	nop
 8011df8:	08011d3d 	.word	0x08011d3d
 8011dfc:	2000ed40 	.word	0x2000ed40

08011e00 <_fwalk_sglue>:
 8011e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e04:	4607      	mov	r7, r0
 8011e06:	4688      	mov	r8, r1
 8011e08:	4614      	mov	r4, r2
 8011e0a:	2600      	movs	r6, #0
 8011e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011e10:	f1b9 0901 	subs.w	r9, r9, #1
 8011e14:	d505      	bpl.n	8011e22 <_fwalk_sglue+0x22>
 8011e16:	6824      	ldr	r4, [r4, #0]
 8011e18:	2c00      	cmp	r4, #0
 8011e1a:	d1f7      	bne.n	8011e0c <_fwalk_sglue+0xc>
 8011e1c:	4630      	mov	r0, r6
 8011e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e22:	89ab      	ldrh	r3, [r5, #12]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d907      	bls.n	8011e38 <_fwalk_sglue+0x38>
 8011e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	d003      	beq.n	8011e38 <_fwalk_sglue+0x38>
 8011e30:	4629      	mov	r1, r5
 8011e32:	4638      	mov	r0, r7
 8011e34:	47c0      	blx	r8
 8011e36:	4306      	orrs	r6, r0
 8011e38:	3568      	adds	r5, #104	@ 0x68
 8011e3a:	e7e9      	b.n	8011e10 <_fwalk_sglue+0x10>

08011e3c <sniprintf>:
 8011e3c:	b40c      	push	{r2, r3}
 8011e3e:	b530      	push	{r4, r5, lr}
 8011e40:	4b17      	ldr	r3, [pc, #92]	@ (8011ea0 <sniprintf+0x64>)
 8011e42:	1e0c      	subs	r4, r1, #0
 8011e44:	681d      	ldr	r5, [r3, #0]
 8011e46:	b09d      	sub	sp, #116	@ 0x74
 8011e48:	da08      	bge.n	8011e5c <sniprintf+0x20>
 8011e4a:	238b      	movs	r3, #139	@ 0x8b
 8011e4c:	602b      	str	r3, [r5, #0]
 8011e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e52:	b01d      	add	sp, #116	@ 0x74
 8011e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e58:	b002      	add	sp, #8
 8011e5a:	4770      	bx	lr
 8011e5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011e60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011e64:	bf14      	ite	ne
 8011e66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011e6a:	4623      	moveq	r3, r4
 8011e6c:	9304      	str	r3, [sp, #16]
 8011e6e:	9307      	str	r3, [sp, #28]
 8011e70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011e74:	9002      	str	r0, [sp, #8]
 8011e76:	9006      	str	r0, [sp, #24]
 8011e78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011e7e:	ab21      	add	r3, sp, #132	@ 0x84
 8011e80:	a902      	add	r1, sp, #8
 8011e82:	4628      	mov	r0, r5
 8011e84:	9301      	str	r3, [sp, #4]
 8011e86:	f000 fb09 	bl	801249c <_svfiprintf_r>
 8011e8a:	1c43      	adds	r3, r0, #1
 8011e8c:	bfbc      	itt	lt
 8011e8e:	238b      	movlt	r3, #139	@ 0x8b
 8011e90:	602b      	strlt	r3, [r5, #0]
 8011e92:	2c00      	cmp	r4, #0
 8011e94:	d0dd      	beq.n	8011e52 <sniprintf+0x16>
 8011e96:	9b02      	ldr	r3, [sp, #8]
 8011e98:	2200      	movs	r2, #0
 8011e9a:	701a      	strb	r2, [r3, #0]
 8011e9c:	e7d9      	b.n	8011e52 <sniprintf+0x16>
 8011e9e:	bf00      	nop
 8011ea0:	2000003c 	.word	0x2000003c

08011ea4 <__sread>:
 8011ea4:	b510      	push	{r4, lr}
 8011ea6:	460c      	mov	r4, r1
 8011ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eac:	f000 f91c 	bl	80120e8 <_read_r>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	bfab      	itete	ge
 8011eb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8011eb8:	181b      	addge	r3, r3, r0
 8011eba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011ebe:	bfac      	ite	ge
 8011ec0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011ec2:	81a3      	strhlt	r3, [r4, #12]
 8011ec4:	bd10      	pop	{r4, pc}

08011ec6 <__swrite>:
 8011ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eca:	461f      	mov	r7, r3
 8011ecc:	898b      	ldrh	r3, [r1, #12]
 8011ece:	05db      	lsls	r3, r3, #23
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	460c      	mov	r4, r1
 8011ed4:	4616      	mov	r6, r2
 8011ed6:	d505      	bpl.n	8011ee4 <__swrite+0x1e>
 8011ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011edc:	2302      	movs	r3, #2
 8011ede:	2200      	movs	r2, #0
 8011ee0:	f000 f8f0 	bl	80120c4 <_lseek_r>
 8011ee4:	89a3      	ldrh	r3, [r4, #12]
 8011ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011eea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011eee:	81a3      	strh	r3, [r4, #12]
 8011ef0:	4632      	mov	r2, r6
 8011ef2:	463b      	mov	r3, r7
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011efa:	f000 b907 	b.w	801210c <_write_r>

08011efe <__sseek>:
 8011efe:	b510      	push	{r4, lr}
 8011f00:	460c      	mov	r4, r1
 8011f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f06:	f000 f8dd 	bl	80120c4 <_lseek_r>
 8011f0a:	1c43      	adds	r3, r0, #1
 8011f0c:	89a3      	ldrh	r3, [r4, #12]
 8011f0e:	bf15      	itete	ne
 8011f10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011f12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011f16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011f1a:	81a3      	strheq	r3, [r4, #12]
 8011f1c:	bf18      	it	ne
 8011f1e:	81a3      	strhne	r3, [r4, #12]
 8011f20:	bd10      	pop	{r4, pc}

08011f22 <__sclose>:
 8011f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f26:	f000 b8bd 	b.w	80120a4 <_close_r>

08011f2a <memcmp>:
 8011f2a:	b510      	push	{r4, lr}
 8011f2c:	3901      	subs	r1, #1
 8011f2e:	4402      	add	r2, r0
 8011f30:	4290      	cmp	r0, r2
 8011f32:	d101      	bne.n	8011f38 <memcmp+0xe>
 8011f34:	2000      	movs	r0, #0
 8011f36:	e005      	b.n	8011f44 <memcmp+0x1a>
 8011f38:	7803      	ldrb	r3, [r0, #0]
 8011f3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011f3e:	42a3      	cmp	r3, r4
 8011f40:	d001      	beq.n	8011f46 <memcmp+0x1c>
 8011f42:	1b18      	subs	r0, r3, r4
 8011f44:	bd10      	pop	{r4, pc}
 8011f46:	3001      	adds	r0, #1
 8011f48:	e7f2      	b.n	8011f30 <memcmp+0x6>

08011f4a <memmove>:
 8011f4a:	4288      	cmp	r0, r1
 8011f4c:	b510      	push	{r4, lr}
 8011f4e:	eb01 0402 	add.w	r4, r1, r2
 8011f52:	d902      	bls.n	8011f5a <memmove+0x10>
 8011f54:	4284      	cmp	r4, r0
 8011f56:	4623      	mov	r3, r4
 8011f58:	d807      	bhi.n	8011f6a <memmove+0x20>
 8011f5a:	1e43      	subs	r3, r0, #1
 8011f5c:	42a1      	cmp	r1, r4
 8011f5e:	d008      	beq.n	8011f72 <memmove+0x28>
 8011f60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f68:	e7f8      	b.n	8011f5c <memmove+0x12>
 8011f6a:	4402      	add	r2, r0
 8011f6c:	4601      	mov	r1, r0
 8011f6e:	428a      	cmp	r2, r1
 8011f70:	d100      	bne.n	8011f74 <memmove+0x2a>
 8011f72:	bd10      	pop	{r4, pc}
 8011f74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f7c:	e7f7      	b.n	8011f6e <memmove+0x24>

08011f7e <memset>:
 8011f7e:	4402      	add	r2, r0
 8011f80:	4603      	mov	r3, r0
 8011f82:	4293      	cmp	r3, r2
 8011f84:	d100      	bne.n	8011f88 <memset+0xa>
 8011f86:	4770      	bx	lr
 8011f88:	f803 1b01 	strb.w	r1, [r3], #1
 8011f8c:	e7f9      	b.n	8011f82 <memset+0x4>

08011f8e <strcat>:
 8011f8e:	b510      	push	{r4, lr}
 8011f90:	4602      	mov	r2, r0
 8011f92:	7814      	ldrb	r4, [r2, #0]
 8011f94:	4613      	mov	r3, r2
 8011f96:	3201      	adds	r2, #1
 8011f98:	2c00      	cmp	r4, #0
 8011f9a:	d1fa      	bne.n	8011f92 <strcat+0x4>
 8011f9c:	3b01      	subs	r3, #1
 8011f9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011fa6:	2a00      	cmp	r2, #0
 8011fa8:	d1f9      	bne.n	8011f9e <strcat+0x10>
 8011faa:	bd10      	pop	{r4, pc}

08011fac <strchr>:
 8011fac:	b2c9      	uxtb	r1, r1
 8011fae:	4603      	mov	r3, r0
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fb6:	b112      	cbz	r2, 8011fbe <strchr+0x12>
 8011fb8:	428a      	cmp	r2, r1
 8011fba:	d1f9      	bne.n	8011fb0 <strchr+0x4>
 8011fbc:	4770      	bx	lr
 8011fbe:	2900      	cmp	r1, #0
 8011fc0:	bf18      	it	ne
 8011fc2:	2000      	movne	r0, #0
 8011fc4:	4770      	bx	lr

08011fc6 <strncpy>:
 8011fc6:	b510      	push	{r4, lr}
 8011fc8:	3901      	subs	r1, #1
 8011fca:	4603      	mov	r3, r0
 8011fcc:	b132      	cbz	r2, 8011fdc <strncpy+0x16>
 8011fce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011fd2:	f803 4b01 	strb.w	r4, [r3], #1
 8011fd6:	3a01      	subs	r2, #1
 8011fd8:	2c00      	cmp	r4, #0
 8011fda:	d1f7      	bne.n	8011fcc <strncpy+0x6>
 8011fdc:	441a      	add	r2, r3
 8011fde:	2100      	movs	r1, #0
 8011fe0:	4293      	cmp	r3, r2
 8011fe2:	d100      	bne.n	8011fe6 <strncpy+0x20>
 8011fe4:	bd10      	pop	{r4, pc}
 8011fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8011fea:	e7f9      	b.n	8011fe0 <strncpy+0x1a>

08011fec <strtok>:
 8011fec:	4b16      	ldr	r3, [pc, #88]	@ (8012048 <strtok+0x5c>)
 8011fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff2:	681f      	ldr	r7, [r3, #0]
 8011ff4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8011ff6:	4605      	mov	r5, r0
 8011ff8:	460e      	mov	r6, r1
 8011ffa:	b9ec      	cbnz	r4, 8012038 <strtok+0x4c>
 8011ffc:	2050      	movs	r0, #80	@ 0x50
 8011ffe:	f000 f93b 	bl	8012278 <malloc>
 8012002:	4602      	mov	r2, r0
 8012004:	6478      	str	r0, [r7, #68]	@ 0x44
 8012006:	b920      	cbnz	r0, 8012012 <strtok+0x26>
 8012008:	4b10      	ldr	r3, [pc, #64]	@ (801204c <strtok+0x60>)
 801200a:	4811      	ldr	r0, [pc, #68]	@ (8012050 <strtok+0x64>)
 801200c:	215b      	movs	r1, #91	@ 0x5b
 801200e:	f000 f8cb 	bl	80121a8 <__assert_func>
 8012012:	e9c0 4400 	strd	r4, r4, [r0]
 8012016:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801201a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801201e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8012022:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8012026:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801202a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801202e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8012032:	6184      	str	r4, [r0, #24]
 8012034:	7704      	strb	r4, [r0, #28]
 8012036:	6244      	str	r4, [r0, #36]	@ 0x24
 8012038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801203a:	4631      	mov	r1, r6
 801203c:	4628      	mov	r0, r5
 801203e:	2301      	movs	r3, #1
 8012040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012044:	f000 b806 	b.w	8012054 <__strtok_r>
 8012048:	2000003c 	.word	0x2000003c
 801204c:	08037b38 	.word	0x08037b38
 8012050:	08037b4f 	.word	0x08037b4f

08012054 <__strtok_r>:
 8012054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012056:	4604      	mov	r4, r0
 8012058:	b908      	cbnz	r0, 801205e <__strtok_r+0xa>
 801205a:	6814      	ldr	r4, [r2, #0]
 801205c:	b144      	cbz	r4, 8012070 <__strtok_r+0x1c>
 801205e:	4620      	mov	r0, r4
 8012060:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012064:	460f      	mov	r7, r1
 8012066:	f817 6b01 	ldrb.w	r6, [r7], #1
 801206a:	b91e      	cbnz	r6, 8012074 <__strtok_r+0x20>
 801206c:	b965      	cbnz	r5, 8012088 <__strtok_r+0x34>
 801206e:	6015      	str	r5, [r2, #0]
 8012070:	2000      	movs	r0, #0
 8012072:	e005      	b.n	8012080 <__strtok_r+0x2c>
 8012074:	42b5      	cmp	r5, r6
 8012076:	d1f6      	bne.n	8012066 <__strtok_r+0x12>
 8012078:	2b00      	cmp	r3, #0
 801207a:	d1f0      	bne.n	801205e <__strtok_r+0xa>
 801207c:	6014      	str	r4, [r2, #0]
 801207e:	7003      	strb	r3, [r0, #0]
 8012080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012082:	461c      	mov	r4, r3
 8012084:	e00c      	b.n	80120a0 <__strtok_r+0x4c>
 8012086:	b915      	cbnz	r5, 801208e <__strtok_r+0x3a>
 8012088:	f814 3b01 	ldrb.w	r3, [r4], #1
 801208c:	460e      	mov	r6, r1
 801208e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012092:	42ab      	cmp	r3, r5
 8012094:	d1f7      	bne.n	8012086 <__strtok_r+0x32>
 8012096:	2b00      	cmp	r3, #0
 8012098:	d0f3      	beq.n	8012082 <__strtok_r+0x2e>
 801209a:	2300      	movs	r3, #0
 801209c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80120a0:	6014      	str	r4, [r2, #0]
 80120a2:	e7ed      	b.n	8012080 <__strtok_r+0x2c>

080120a4 <_close_r>:
 80120a4:	b538      	push	{r3, r4, r5, lr}
 80120a6:	4d06      	ldr	r5, [pc, #24]	@ (80120c0 <_close_r+0x1c>)
 80120a8:	2300      	movs	r3, #0
 80120aa:	4604      	mov	r4, r0
 80120ac:	4608      	mov	r0, r1
 80120ae:	602b      	str	r3, [r5, #0]
 80120b0:	f7ef fd8c 	bl	8001bcc <_close>
 80120b4:	1c43      	adds	r3, r0, #1
 80120b6:	d102      	bne.n	80120be <_close_r+0x1a>
 80120b8:	682b      	ldr	r3, [r5, #0]
 80120ba:	b103      	cbz	r3, 80120be <_close_r+0x1a>
 80120bc:	6023      	str	r3, [r4, #0]
 80120be:	bd38      	pop	{r3, r4, r5, pc}
 80120c0:	2000ed44 	.word	0x2000ed44

080120c4 <_lseek_r>:
 80120c4:	b538      	push	{r3, r4, r5, lr}
 80120c6:	4d07      	ldr	r5, [pc, #28]	@ (80120e4 <_lseek_r+0x20>)
 80120c8:	4604      	mov	r4, r0
 80120ca:	4608      	mov	r0, r1
 80120cc:	4611      	mov	r1, r2
 80120ce:	2200      	movs	r2, #0
 80120d0:	602a      	str	r2, [r5, #0]
 80120d2:	461a      	mov	r2, r3
 80120d4:	f7ef fda1 	bl	8001c1a <_lseek>
 80120d8:	1c43      	adds	r3, r0, #1
 80120da:	d102      	bne.n	80120e2 <_lseek_r+0x1e>
 80120dc:	682b      	ldr	r3, [r5, #0]
 80120de:	b103      	cbz	r3, 80120e2 <_lseek_r+0x1e>
 80120e0:	6023      	str	r3, [r4, #0]
 80120e2:	bd38      	pop	{r3, r4, r5, pc}
 80120e4:	2000ed44 	.word	0x2000ed44

080120e8 <_read_r>:
 80120e8:	b538      	push	{r3, r4, r5, lr}
 80120ea:	4d07      	ldr	r5, [pc, #28]	@ (8012108 <_read_r+0x20>)
 80120ec:	4604      	mov	r4, r0
 80120ee:	4608      	mov	r0, r1
 80120f0:	4611      	mov	r1, r2
 80120f2:	2200      	movs	r2, #0
 80120f4:	602a      	str	r2, [r5, #0]
 80120f6:	461a      	mov	r2, r3
 80120f8:	f7ef fd2f 	bl	8001b5a <_read>
 80120fc:	1c43      	adds	r3, r0, #1
 80120fe:	d102      	bne.n	8012106 <_read_r+0x1e>
 8012100:	682b      	ldr	r3, [r5, #0]
 8012102:	b103      	cbz	r3, 8012106 <_read_r+0x1e>
 8012104:	6023      	str	r3, [r4, #0]
 8012106:	bd38      	pop	{r3, r4, r5, pc}
 8012108:	2000ed44 	.word	0x2000ed44

0801210c <_write_r>:
 801210c:	b538      	push	{r3, r4, r5, lr}
 801210e:	4d07      	ldr	r5, [pc, #28]	@ (801212c <_write_r+0x20>)
 8012110:	4604      	mov	r4, r0
 8012112:	4608      	mov	r0, r1
 8012114:	4611      	mov	r1, r2
 8012116:	2200      	movs	r2, #0
 8012118:	602a      	str	r2, [r5, #0]
 801211a:	461a      	mov	r2, r3
 801211c:	f7ef fd3a 	bl	8001b94 <_write>
 8012120:	1c43      	adds	r3, r0, #1
 8012122:	d102      	bne.n	801212a <_write_r+0x1e>
 8012124:	682b      	ldr	r3, [r5, #0]
 8012126:	b103      	cbz	r3, 801212a <_write_r+0x1e>
 8012128:	6023      	str	r3, [r4, #0]
 801212a:	bd38      	pop	{r3, r4, r5, pc}
 801212c:	2000ed44 	.word	0x2000ed44

08012130 <__errno>:
 8012130:	4b01      	ldr	r3, [pc, #4]	@ (8012138 <__errno+0x8>)
 8012132:	6818      	ldr	r0, [r3, #0]
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop
 8012138:	2000003c 	.word	0x2000003c

0801213c <__libc_init_array>:
 801213c:	b570      	push	{r4, r5, r6, lr}
 801213e:	4d0d      	ldr	r5, [pc, #52]	@ (8012174 <__libc_init_array+0x38>)
 8012140:	4c0d      	ldr	r4, [pc, #52]	@ (8012178 <__libc_init_array+0x3c>)
 8012142:	1b64      	subs	r4, r4, r5
 8012144:	10a4      	asrs	r4, r4, #2
 8012146:	2600      	movs	r6, #0
 8012148:	42a6      	cmp	r6, r4
 801214a:	d109      	bne.n	8012160 <__libc_init_array+0x24>
 801214c:	4d0b      	ldr	r5, [pc, #44]	@ (801217c <__libc_init_array+0x40>)
 801214e:	4c0c      	ldr	r4, [pc, #48]	@ (8012180 <__libc_init_array+0x44>)
 8012150:	f000 fff8 	bl	8013144 <_init>
 8012154:	1b64      	subs	r4, r4, r5
 8012156:	10a4      	asrs	r4, r4, #2
 8012158:	2600      	movs	r6, #0
 801215a:	42a6      	cmp	r6, r4
 801215c:	d105      	bne.n	801216a <__libc_init_array+0x2e>
 801215e:	bd70      	pop	{r4, r5, r6, pc}
 8012160:	f855 3b04 	ldr.w	r3, [r5], #4
 8012164:	4798      	blx	r3
 8012166:	3601      	adds	r6, #1
 8012168:	e7ee      	b.n	8012148 <__libc_init_array+0xc>
 801216a:	f855 3b04 	ldr.w	r3, [r5], #4
 801216e:	4798      	blx	r3
 8012170:	3601      	adds	r6, #1
 8012172:	e7f2      	b.n	801215a <__libc_init_array+0x1e>
 8012174:	08037c20 	.word	0x08037c20
 8012178:	08037c20 	.word	0x08037c20
 801217c:	08037c20 	.word	0x08037c20
 8012180:	08037c24 	.word	0x08037c24

08012184 <__retarget_lock_init_recursive>:
 8012184:	4770      	bx	lr

08012186 <__retarget_lock_acquire_recursive>:
 8012186:	4770      	bx	lr

08012188 <__retarget_lock_release_recursive>:
 8012188:	4770      	bx	lr

0801218a <memcpy>:
 801218a:	440a      	add	r2, r1
 801218c:	4291      	cmp	r1, r2
 801218e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012192:	d100      	bne.n	8012196 <memcpy+0xc>
 8012194:	4770      	bx	lr
 8012196:	b510      	push	{r4, lr}
 8012198:	f811 4b01 	ldrb.w	r4, [r1], #1
 801219c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121a0:	4291      	cmp	r1, r2
 80121a2:	d1f9      	bne.n	8012198 <memcpy+0xe>
 80121a4:	bd10      	pop	{r4, pc}
	...

080121a8 <__assert_func>:
 80121a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80121aa:	4614      	mov	r4, r2
 80121ac:	461a      	mov	r2, r3
 80121ae:	4b09      	ldr	r3, [pc, #36]	@ (80121d4 <__assert_func+0x2c>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	4605      	mov	r5, r0
 80121b4:	68d8      	ldr	r0, [r3, #12]
 80121b6:	b954      	cbnz	r4, 80121ce <__assert_func+0x26>
 80121b8:	4b07      	ldr	r3, [pc, #28]	@ (80121d8 <__assert_func+0x30>)
 80121ba:	461c      	mov	r4, r3
 80121bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80121c0:	9100      	str	r1, [sp, #0]
 80121c2:	462b      	mov	r3, r5
 80121c4:	4905      	ldr	r1, [pc, #20]	@ (80121dc <__assert_func+0x34>)
 80121c6:	f000 fc9f 	bl	8012b08 <fiprintf>
 80121ca:	f000 fcbf 	bl	8012b4c <abort>
 80121ce:	4b04      	ldr	r3, [pc, #16]	@ (80121e0 <__assert_func+0x38>)
 80121d0:	e7f4      	b.n	80121bc <__assert_func+0x14>
 80121d2:	bf00      	nop
 80121d4:	2000003c 	.word	0x2000003c
 80121d8:	08037be4 	.word	0x08037be4
 80121dc:	08037bb6 	.word	0x08037bb6
 80121e0:	08037ba9 	.word	0x08037ba9

080121e4 <_free_r>:
 80121e4:	b538      	push	{r3, r4, r5, lr}
 80121e6:	4605      	mov	r5, r0
 80121e8:	2900      	cmp	r1, #0
 80121ea:	d041      	beq.n	8012270 <_free_r+0x8c>
 80121ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121f0:	1f0c      	subs	r4, r1, #4
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	bfb8      	it	lt
 80121f6:	18e4      	addlt	r4, r4, r3
 80121f8:	f000 f8e8 	bl	80123cc <__malloc_lock>
 80121fc:	4a1d      	ldr	r2, [pc, #116]	@ (8012274 <_free_r+0x90>)
 80121fe:	6813      	ldr	r3, [r2, #0]
 8012200:	b933      	cbnz	r3, 8012210 <_free_r+0x2c>
 8012202:	6063      	str	r3, [r4, #4]
 8012204:	6014      	str	r4, [r2, #0]
 8012206:	4628      	mov	r0, r5
 8012208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801220c:	f000 b8e4 	b.w	80123d8 <__malloc_unlock>
 8012210:	42a3      	cmp	r3, r4
 8012212:	d908      	bls.n	8012226 <_free_r+0x42>
 8012214:	6820      	ldr	r0, [r4, #0]
 8012216:	1821      	adds	r1, r4, r0
 8012218:	428b      	cmp	r3, r1
 801221a:	bf01      	itttt	eq
 801221c:	6819      	ldreq	r1, [r3, #0]
 801221e:	685b      	ldreq	r3, [r3, #4]
 8012220:	1809      	addeq	r1, r1, r0
 8012222:	6021      	streq	r1, [r4, #0]
 8012224:	e7ed      	b.n	8012202 <_free_r+0x1e>
 8012226:	461a      	mov	r2, r3
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	b10b      	cbz	r3, 8012230 <_free_r+0x4c>
 801222c:	42a3      	cmp	r3, r4
 801222e:	d9fa      	bls.n	8012226 <_free_r+0x42>
 8012230:	6811      	ldr	r1, [r2, #0]
 8012232:	1850      	adds	r0, r2, r1
 8012234:	42a0      	cmp	r0, r4
 8012236:	d10b      	bne.n	8012250 <_free_r+0x6c>
 8012238:	6820      	ldr	r0, [r4, #0]
 801223a:	4401      	add	r1, r0
 801223c:	1850      	adds	r0, r2, r1
 801223e:	4283      	cmp	r3, r0
 8012240:	6011      	str	r1, [r2, #0]
 8012242:	d1e0      	bne.n	8012206 <_free_r+0x22>
 8012244:	6818      	ldr	r0, [r3, #0]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	6053      	str	r3, [r2, #4]
 801224a:	4408      	add	r0, r1
 801224c:	6010      	str	r0, [r2, #0]
 801224e:	e7da      	b.n	8012206 <_free_r+0x22>
 8012250:	d902      	bls.n	8012258 <_free_r+0x74>
 8012252:	230c      	movs	r3, #12
 8012254:	602b      	str	r3, [r5, #0]
 8012256:	e7d6      	b.n	8012206 <_free_r+0x22>
 8012258:	6820      	ldr	r0, [r4, #0]
 801225a:	1821      	adds	r1, r4, r0
 801225c:	428b      	cmp	r3, r1
 801225e:	bf04      	itt	eq
 8012260:	6819      	ldreq	r1, [r3, #0]
 8012262:	685b      	ldreq	r3, [r3, #4]
 8012264:	6063      	str	r3, [r4, #4]
 8012266:	bf04      	itt	eq
 8012268:	1809      	addeq	r1, r1, r0
 801226a:	6021      	streq	r1, [r4, #0]
 801226c:	6054      	str	r4, [r2, #4]
 801226e:	e7ca      	b.n	8012206 <_free_r+0x22>
 8012270:	bd38      	pop	{r3, r4, r5, pc}
 8012272:	bf00      	nop
 8012274:	2000ed50 	.word	0x2000ed50

08012278 <malloc>:
 8012278:	4b02      	ldr	r3, [pc, #8]	@ (8012284 <malloc+0xc>)
 801227a:	4601      	mov	r1, r0
 801227c:	6818      	ldr	r0, [r3, #0]
 801227e:	f000 b825 	b.w	80122cc <_malloc_r>
 8012282:	bf00      	nop
 8012284:	2000003c 	.word	0x2000003c

08012288 <sbrk_aligned>:
 8012288:	b570      	push	{r4, r5, r6, lr}
 801228a:	4e0f      	ldr	r6, [pc, #60]	@ (80122c8 <sbrk_aligned+0x40>)
 801228c:	460c      	mov	r4, r1
 801228e:	6831      	ldr	r1, [r6, #0]
 8012290:	4605      	mov	r5, r0
 8012292:	b911      	cbnz	r1, 801229a <sbrk_aligned+0x12>
 8012294:	f000 fc4a 	bl	8012b2c <_sbrk_r>
 8012298:	6030      	str	r0, [r6, #0]
 801229a:	4621      	mov	r1, r4
 801229c:	4628      	mov	r0, r5
 801229e:	f000 fc45 	bl	8012b2c <_sbrk_r>
 80122a2:	1c43      	adds	r3, r0, #1
 80122a4:	d103      	bne.n	80122ae <sbrk_aligned+0x26>
 80122a6:	f04f 34ff 	mov.w	r4, #4294967295
 80122aa:	4620      	mov	r0, r4
 80122ac:	bd70      	pop	{r4, r5, r6, pc}
 80122ae:	1cc4      	adds	r4, r0, #3
 80122b0:	f024 0403 	bic.w	r4, r4, #3
 80122b4:	42a0      	cmp	r0, r4
 80122b6:	d0f8      	beq.n	80122aa <sbrk_aligned+0x22>
 80122b8:	1a21      	subs	r1, r4, r0
 80122ba:	4628      	mov	r0, r5
 80122bc:	f000 fc36 	bl	8012b2c <_sbrk_r>
 80122c0:	3001      	adds	r0, #1
 80122c2:	d1f2      	bne.n	80122aa <sbrk_aligned+0x22>
 80122c4:	e7ef      	b.n	80122a6 <sbrk_aligned+0x1e>
 80122c6:	bf00      	nop
 80122c8:	2000ed4c 	.word	0x2000ed4c

080122cc <_malloc_r>:
 80122cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122d0:	1ccd      	adds	r5, r1, #3
 80122d2:	f025 0503 	bic.w	r5, r5, #3
 80122d6:	3508      	adds	r5, #8
 80122d8:	2d0c      	cmp	r5, #12
 80122da:	bf38      	it	cc
 80122dc:	250c      	movcc	r5, #12
 80122de:	2d00      	cmp	r5, #0
 80122e0:	4606      	mov	r6, r0
 80122e2:	db01      	blt.n	80122e8 <_malloc_r+0x1c>
 80122e4:	42a9      	cmp	r1, r5
 80122e6:	d904      	bls.n	80122f2 <_malloc_r+0x26>
 80122e8:	230c      	movs	r3, #12
 80122ea:	6033      	str	r3, [r6, #0]
 80122ec:	2000      	movs	r0, #0
 80122ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80123c8 <_malloc_r+0xfc>
 80122f6:	f000 f869 	bl	80123cc <__malloc_lock>
 80122fa:	f8d8 3000 	ldr.w	r3, [r8]
 80122fe:	461c      	mov	r4, r3
 8012300:	bb44      	cbnz	r4, 8012354 <_malloc_r+0x88>
 8012302:	4629      	mov	r1, r5
 8012304:	4630      	mov	r0, r6
 8012306:	f7ff ffbf 	bl	8012288 <sbrk_aligned>
 801230a:	1c43      	adds	r3, r0, #1
 801230c:	4604      	mov	r4, r0
 801230e:	d158      	bne.n	80123c2 <_malloc_r+0xf6>
 8012310:	f8d8 4000 	ldr.w	r4, [r8]
 8012314:	4627      	mov	r7, r4
 8012316:	2f00      	cmp	r7, #0
 8012318:	d143      	bne.n	80123a2 <_malloc_r+0xd6>
 801231a:	2c00      	cmp	r4, #0
 801231c:	d04b      	beq.n	80123b6 <_malloc_r+0xea>
 801231e:	6823      	ldr	r3, [r4, #0]
 8012320:	4639      	mov	r1, r7
 8012322:	4630      	mov	r0, r6
 8012324:	eb04 0903 	add.w	r9, r4, r3
 8012328:	f000 fc00 	bl	8012b2c <_sbrk_r>
 801232c:	4581      	cmp	r9, r0
 801232e:	d142      	bne.n	80123b6 <_malloc_r+0xea>
 8012330:	6821      	ldr	r1, [r4, #0]
 8012332:	1a6d      	subs	r5, r5, r1
 8012334:	4629      	mov	r1, r5
 8012336:	4630      	mov	r0, r6
 8012338:	f7ff ffa6 	bl	8012288 <sbrk_aligned>
 801233c:	3001      	adds	r0, #1
 801233e:	d03a      	beq.n	80123b6 <_malloc_r+0xea>
 8012340:	6823      	ldr	r3, [r4, #0]
 8012342:	442b      	add	r3, r5
 8012344:	6023      	str	r3, [r4, #0]
 8012346:	f8d8 3000 	ldr.w	r3, [r8]
 801234a:	685a      	ldr	r2, [r3, #4]
 801234c:	bb62      	cbnz	r2, 80123a8 <_malloc_r+0xdc>
 801234e:	f8c8 7000 	str.w	r7, [r8]
 8012352:	e00f      	b.n	8012374 <_malloc_r+0xa8>
 8012354:	6822      	ldr	r2, [r4, #0]
 8012356:	1b52      	subs	r2, r2, r5
 8012358:	d420      	bmi.n	801239c <_malloc_r+0xd0>
 801235a:	2a0b      	cmp	r2, #11
 801235c:	d917      	bls.n	801238e <_malloc_r+0xc2>
 801235e:	1961      	adds	r1, r4, r5
 8012360:	42a3      	cmp	r3, r4
 8012362:	6025      	str	r5, [r4, #0]
 8012364:	bf18      	it	ne
 8012366:	6059      	strne	r1, [r3, #4]
 8012368:	6863      	ldr	r3, [r4, #4]
 801236a:	bf08      	it	eq
 801236c:	f8c8 1000 	streq.w	r1, [r8]
 8012370:	5162      	str	r2, [r4, r5]
 8012372:	604b      	str	r3, [r1, #4]
 8012374:	4630      	mov	r0, r6
 8012376:	f000 f82f 	bl	80123d8 <__malloc_unlock>
 801237a:	f104 000b 	add.w	r0, r4, #11
 801237e:	1d23      	adds	r3, r4, #4
 8012380:	f020 0007 	bic.w	r0, r0, #7
 8012384:	1ac2      	subs	r2, r0, r3
 8012386:	bf1c      	itt	ne
 8012388:	1a1b      	subne	r3, r3, r0
 801238a:	50a3      	strne	r3, [r4, r2]
 801238c:	e7af      	b.n	80122ee <_malloc_r+0x22>
 801238e:	6862      	ldr	r2, [r4, #4]
 8012390:	42a3      	cmp	r3, r4
 8012392:	bf0c      	ite	eq
 8012394:	f8c8 2000 	streq.w	r2, [r8]
 8012398:	605a      	strne	r2, [r3, #4]
 801239a:	e7eb      	b.n	8012374 <_malloc_r+0xa8>
 801239c:	4623      	mov	r3, r4
 801239e:	6864      	ldr	r4, [r4, #4]
 80123a0:	e7ae      	b.n	8012300 <_malloc_r+0x34>
 80123a2:	463c      	mov	r4, r7
 80123a4:	687f      	ldr	r7, [r7, #4]
 80123a6:	e7b6      	b.n	8012316 <_malloc_r+0x4a>
 80123a8:	461a      	mov	r2, r3
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	42a3      	cmp	r3, r4
 80123ae:	d1fb      	bne.n	80123a8 <_malloc_r+0xdc>
 80123b0:	2300      	movs	r3, #0
 80123b2:	6053      	str	r3, [r2, #4]
 80123b4:	e7de      	b.n	8012374 <_malloc_r+0xa8>
 80123b6:	230c      	movs	r3, #12
 80123b8:	6033      	str	r3, [r6, #0]
 80123ba:	4630      	mov	r0, r6
 80123bc:	f000 f80c 	bl	80123d8 <__malloc_unlock>
 80123c0:	e794      	b.n	80122ec <_malloc_r+0x20>
 80123c2:	6005      	str	r5, [r0, #0]
 80123c4:	e7d6      	b.n	8012374 <_malloc_r+0xa8>
 80123c6:	bf00      	nop
 80123c8:	2000ed50 	.word	0x2000ed50

080123cc <__malloc_lock>:
 80123cc:	4801      	ldr	r0, [pc, #4]	@ (80123d4 <__malloc_lock+0x8>)
 80123ce:	f7ff beda 	b.w	8012186 <__retarget_lock_acquire_recursive>
 80123d2:	bf00      	nop
 80123d4:	2000ed48 	.word	0x2000ed48

080123d8 <__malloc_unlock>:
 80123d8:	4801      	ldr	r0, [pc, #4]	@ (80123e0 <__malloc_unlock+0x8>)
 80123da:	f7ff bed5 	b.w	8012188 <__retarget_lock_release_recursive>
 80123de:	bf00      	nop
 80123e0:	2000ed48 	.word	0x2000ed48

080123e4 <__ssputs_r>:
 80123e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123e8:	688e      	ldr	r6, [r1, #8]
 80123ea:	461f      	mov	r7, r3
 80123ec:	42be      	cmp	r6, r7
 80123ee:	680b      	ldr	r3, [r1, #0]
 80123f0:	4682      	mov	sl, r0
 80123f2:	460c      	mov	r4, r1
 80123f4:	4690      	mov	r8, r2
 80123f6:	d82d      	bhi.n	8012454 <__ssputs_r+0x70>
 80123f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80123fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012400:	d026      	beq.n	8012450 <__ssputs_r+0x6c>
 8012402:	6965      	ldr	r5, [r4, #20]
 8012404:	6909      	ldr	r1, [r1, #16]
 8012406:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801240a:	eba3 0901 	sub.w	r9, r3, r1
 801240e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012412:	1c7b      	adds	r3, r7, #1
 8012414:	444b      	add	r3, r9
 8012416:	106d      	asrs	r5, r5, #1
 8012418:	429d      	cmp	r5, r3
 801241a:	bf38      	it	cc
 801241c:	461d      	movcc	r5, r3
 801241e:	0553      	lsls	r3, r2, #21
 8012420:	d527      	bpl.n	8012472 <__ssputs_r+0x8e>
 8012422:	4629      	mov	r1, r5
 8012424:	f7ff ff52 	bl	80122cc <_malloc_r>
 8012428:	4606      	mov	r6, r0
 801242a:	b360      	cbz	r0, 8012486 <__ssputs_r+0xa2>
 801242c:	6921      	ldr	r1, [r4, #16]
 801242e:	464a      	mov	r2, r9
 8012430:	f7ff feab 	bl	801218a <memcpy>
 8012434:	89a3      	ldrh	r3, [r4, #12]
 8012436:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801243a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801243e:	81a3      	strh	r3, [r4, #12]
 8012440:	6126      	str	r6, [r4, #16]
 8012442:	6165      	str	r5, [r4, #20]
 8012444:	444e      	add	r6, r9
 8012446:	eba5 0509 	sub.w	r5, r5, r9
 801244a:	6026      	str	r6, [r4, #0]
 801244c:	60a5      	str	r5, [r4, #8]
 801244e:	463e      	mov	r6, r7
 8012450:	42be      	cmp	r6, r7
 8012452:	d900      	bls.n	8012456 <__ssputs_r+0x72>
 8012454:	463e      	mov	r6, r7
 8012456:	6820      	ldr	r0, [r4, #0]
 8012458:	4632      	mov	r2, r6
 801245a:	4641      	mov	r1, r8
 801245c:	f7ff fd75 	bl	8011f4a <memmove>
 8012460:	68a3      	ldr	r3, [r4, #8]
 8012462:	1b9b      	subs	r3, r3, r6
 8012464:	60a3      	str	r3, [r4, #8]
 8012466:	6823      	ldr	r3, [r4, #0]
 8012468:	4433      	add	r3, r6
 801246a:	6023      	str	r3, [r4, #0]
 801246c:	2000      	movs	r0, #0
 801246e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012472:	462a      	mov	r2, r5
 8012474:	f000 fb71 	bl	8012b5a <_realloc_r>
 8012478:	4606      	mov	r6, r0
 801247a:	2800      	cmp	r0, #0
 801247c:	d1e0      	bne.n	8012440 <__ssputs_r+0x5c>
 801247e:	6921      	ldr	r1, [r4, #16]
 8012480:	4650      	mov	r0, sl
 8012482:	f7ff feaf 	bl	80121e4 <_free_r>
 8012486:	230c      	movs	r3, #12
 8012488:	f8ca 3000 	str.w	r3, [sl]
 801248c:	89a3      	ldrh	r3, [r4, #12]
 801248e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012492:	81a3      	strh	r3, [r4, #12]
 8012494:	f04f 30ff 	mov.w	r0, #4294967295
 8012498:	e7e9      	b.n	801246e <__ssputs_r+0x8a>
	...

0801249c <_svfiprintf_r>:
 801249c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a0:	4698      	mov	r8, r3
 80124a2:	898b      	ldrh	r3, [r1, #12]
 80124a4:	061b      	lsls	r3, r3, #24
 80124a6:	b09d      	sub	sp, #116	@ 0x74
 80124a8:	4607      	mov	r7, r0
 80124aa:	460d      	mov	r5, r1
 80124ac:	4614      	mov	r4, r2
 80124ae:	d510      	bpl.n	80124d2 <_svfiprintf_r+0x36>
 80124b0:	690b      	ldr	r3, [r1, #16]
 80124b2:	b973      	cbnz	r3, 80124d2 <_svfiprintf_r+0x36>
 80124b4:	2140      	movs	r1, #64	@ 0x40
 80124b6:	f7ff ff09 	bl	80122cc <_malloc_r>
 80124ba:	6028      	str	r0, [r5, #0]
 80124bc:	6128      	str	r0, [r5, #16]
 80124be:	b930      	cbnz	r0, 80124ce <_svfiprintf_r+0x32>
 80124c0:	230c      	movs	r3, #12
 80124c2:	603b      	str	r3, [r7, #0]
 80124c4:	f04f 30ff 	mov.w	r0, #4294967295
 80124c8:	b01d      	add	sp, #116	@ 0x74
 80124ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ce:	2340      	movs	r3, #64	@ 0x40
 80124d0:	616b      	str	r3, [r5, #20]
 80124d2:	2300      	movs	r3, #0
 80124d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80124d6:	2320      	movs	r3, #32
 80124d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80124dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80124e0:	2330      	movs	r3, #48	@ 0x30
 80124e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012680 <_svfiprintf_r+0x1e4>
 80124e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80124ea:	f04f 0901 	mov.w	r9, #1
 80124ee:	4623      	mov	r3, r4
 80124f0:	469a      	mov	sl, r3
 80124f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124f6:	b10a      	cbz	r2, 80124fc <_svfiprintf_r+0x60>
 80124f8:	2a25      	cmp	r2, #37	@ 0x25
 80124fa:	d1f9      	bne.n	80124f0 <_svfiprintf_r+0x54>
 80124fc:	ebba 0b04 	subs.w	fp, sl, r4
 8012500:	d00b      	beq.n	801251a <_svfiprintf_r+0x7e>
 8012502:	465b      	mov	r3, fp
 8012504:	4622      	mov	r2, r4
 8012506:	4629      	mov	r1, r5
 8012508:	4638      	mov	r0, r7
 801250a:	f7ff ff6b 	bl	80123e4 <__ssputs_r>
 801250e:	3001      	adds	r0, #1
 8012510:	f000 80a7 	beq.w	8012662 <_svfiprintf_r+0x1c6>
 8012514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012516:	445a      	add	r2, fp
 8012518:	9209      	str	r2, [sp, #36]	@ 0x24
 801251a:	f89a 3000 	ldrb.w	r3, [sl]
 801251e:	2b00      	cmp	r3, #0
 8012520:	f000 809f 	beq.w	8012662 <_svfiprintf_r+0x1c6>
 8012524:	2300      	movs	r3, #0
 8012526:	f04f 32ff 	mov.w	r2, #4294967295
 801252a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801252e:	f10a 0a01 	add.w	sl, sl, #1
 8012532:	9304      	str	r3, [sp, #16]
 8012534:	9307      	str	r3, [sp, #28]
 8012536:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801253a:	931a      	str	r3, [sp, #104]	@ 0x68
 801253c:	4654      	mov	r4, sl
 801253e:	2205      	movs	r2, #5
 8012540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012544:	484e      	ldr	r0, [pc, #312]	@ (8012680 <_svfiprintf_r+0x1e4>)
 8012546:	f7ed fec3 	bl	80002d0 <memchr>
 801254a:	9a04      	ldr	r2, [sp, #16]
 801254c:	b9d8      	cbnz	r0, 8012586 <_svfiprintf_r+0xea>
 801254e:	06d0      	lsls	r0, r2, #27
 8012550:	bf44      	itt	mi
 8012552:	2320      	movmi	r3, #32
 8012554:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012558:	0711      	lsls	r1, r2, #28
 801255a:	bf44      	itt	mi
 801255c:	232b      	movmi	r3, #43	@ 0x2b
 801255e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012562:	f89a 3000 	ldrb.w	r3, [sl]
 8012566:	2b2a      	cmp	r3, #42	@ 0x2a
 8012568:	d015      	beq.n	8012596 <_svfiprintf_r+0xfa>
 801256a:	9a07      	ldr	r2, [sp, #28]
 801256c:	4654      	mov	r4, sl
 801256e:	2000      	movs	r0, #0
 8012570:	f04f 0c0a 	mov.w	ip, #10
 8012574:	4621      	mov	r1, r4
 8012576:	f811 3b01 	ldrb.w	r3, [r1], #1
 801257a:	3b30      	subs	r3, #48	@ 0x30
 801257c:	2b09      	cmp	r3, #9
 801257e:	d94b      	bls.n	8012618 <_svfiprintf_r+0x17c>
 8012580:	b1b0      	cbz	r0, 80125b0 <_svfiprintf_r+0x114>
 8012582:	9207      	str	r2, [sp, #28]
 8012584:	e014      	b.n	80125b0 <_svfiprintf_r+0x114>
 8012586:	eba0 0308 	sub.w	r3, r0, r8
 801258a:	fa09 f303 	lsl.w	r3, r9, r3
 801258e:	4313      	orrs	r3, r2
 8012590:	9304      	str	r3, [sp, #16]
 8012592:	46a2      	mov	sl, r4
 8012594:	e7d2      	b.n	801253c <_svfiprintf_r+0xa0>
 8012596:	9b03      	ldr	r3, [sp, #12]
 8012598:	1d19      	adds	r1, r3, #4
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	9103      	str	r1, [sp, #12]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	bfbb      	ittet	lt
 80125a2:	425b      	neglt	r3, r3
 80125a4:	f042 0202 	orrlt.w	r2, r2, #2
 80125a8:	9307      	strge	r3, [sp, #28]
 80125aa:	9307      	strlt	r3, [sp, #28]
 80125ac:	bfb8      	it	lt
 80125ae:	9204      	strlt	r2, [sp, #16]
 80125b0:	7823      	ldrb	r3, [r4, #0]
 80125b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80125b4:	d10a      	bne.n	80125cc <_svfiprintf_r+0x130>
 80125b6:	7863      	ldrb	r3, [r4, #1]
 80125b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80125ba:	d132      	bne.n	8012622 <_svfiprintf_r+0x186>
 80125bc:	9b03      	ldr	r3, [sp, #12]
 80125be:	1d1a      	adds	r2, r3, #4
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	9203      	str	r2, [sp, #12]
 80125c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125c8:	3402      	adds	r4, #2
 80125ca:	9305      	str	r3, [sp, #20]
 80125cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012690 <_svfiprintf_r+0x1f4>
 80125d0:	7821      	ldrb	r1, [r4, #0]
 80125d2:	2203      	movs	r2, #3
 80125d4:	4650      	mov	r0, sl
 80125d6:	f7ed fe7b 	bl	80002d0 <memchr>
 80125da:	b138      	cbz	r0, 80125ec <_svfiprintf_r+0x150>
 80125dc:	9b04      	ldr	r3, [sp, #16]
 80125de:	eba0 000a 	sub.w	r0, r0, sl
 80125e2:	2240      	movs	r2, #64	@ 0x40
 80125e4:	4082      	lsls	r2, r0
 80125e6:	4313      	orrs	r3, r2
 80125e8:	3401      	adds	r4, #1
 80125ea:	9304      	str	r3, [sp, #16]
 80125ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125f0:	4824      	ldr	r0, [pc, #144]	@ (8012684 <_svfiprintf_r+0x1e8>)
 80125f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80125f6:	2206      	movs	r2, #6
 80125f8:	f7ed fe6a 	bl	80002d0 <memchr>
 80125fc:	2800      	cmp	r0, #0
 80125fe:	d036      	beq.n	801266e <_svfiprintf_r+0x1d2>
 8012600:	4b21      	ldr	r3, [pc, #132]	@ (8012688 <_svfiprintf_r+0x1ec>)
 8012602:	bb1b      	cbnz	r3, 801264c <_svfiprintf_r+0x1b0>
 8012604:	9b03      	ldr	r3, [sp, #12]
 8012606:	3307      	adds	r3, #7
 8012608:	f023 0307 	bic.w	r3, r3, #7
 801260c:	3308      	adds	r3, #8
 801260e:	9303      	str	r3, [sp, #12]
 8012610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012612:	4433      	add	r3, r6
 8012614:	9309      	str	r3, [sp, #36]	@ 0x24
 8012616:	e76a      	b.n	80124ee <_svfiprintf_r+0x52>
 8012618:	fb0c 3202 	mla	r2, ip, r2, r3
 801261c:	460c      	mov	r4, r1
 801261e:	2001      	movs	r0, #1
 8012620:	e7a8      	b.n	8012574 <_svfiprintf_r+0xd8>
 8012622:	2300      	movs	r3, #0
 8012624:	3401      	adds	r4, #1
 8012626:	9305      	str	r3, [sp, #20]
 8012628:	4619      	mov	r1, r3
 801262a:	f04f 0c0a 	mov.w	ip, #10
 801262e:	4620      	mov	r0, r4
 8012630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012634:	3a30      	subs	r2, #48	@ 0x30
 8012636:	2a09      	cmp	r2, #9
 8012638:	d903      	bls.n	8012642 <_svfiprintf_r+0x1a6>
 801263a:	2b00      	cmp	r3, #0
 801263c:	d0c6      	beq.n	80125cc <_svfiprintf_r+0x130>
 801263e:	9105      	str	r1, [sp, #20]
 8012640:	e7c4      	b.n	80125cc <_svfiprintf_r+0x130>
 8012642:	fb0c 2101 	mla	r1, ip, r1, r2
 8012646:	4604      	mov	r4, r0
 8012648:	2301      	movs	r3, #1
 801264a:	e7f0      	b.n	801262e <_svfiprintf_r+0x192>
 801264c:	ab03      	add	r3, sp, #12
 801264e:	9300      	str	r3, [sp, #0]
 8012650:	462a      	mov	r2, r5
 8012652:	4b0e      	ldr	r3, [pc, #56]	@ (801268c <_svfiprintf_r+0x1f0>)
 8012654:	a904      	add	r1, sp, #16
 8012656:	4638      	mov	r0, r7
 8012658:	f3af 8000 	nop.w
 801265c:	1c42      	adds	r2, r0, #1
 801265e:	4606      	mov	r6, r0
 8012660:	d1d6      	bne.n	8012610 <_svfiprintf_r+0x174>
 8012662:	89ab      	ldrh	r3, [r5, #12]
 8012664:	065b      	lsls	r3, r3, #25
 8012666:	f53f af2d 	bmi.w	80124c4 <_svfiprintf_r+0x28>
 801266a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801266c:	e72c      	b.n	80124c8 <_svfiprintf_r+0x2c>
 801266e:	ab03      	add	r3, sp, #12
 8012670:	9300      	str	r3, [sp, #0]
 8012672:	462a      	mov	r2, r5
 8012674:	4b05      	ldr	r3, [pc, #20]	@ (801268c <_svfiprintf_r+0x1f0>)
 8012676:	a904      	add	r1, sp, #16
 8012678:	4638      	mov	r0, r7
 801267a:	f000 f879 	bl	8012770 <_printf_i>
 801267e:	e7ed      	b.n	801265c <_svfiprintf_r+0x1c0>
 8012680:	08037be5 	.word	0x08037be5
 8012684:	08037bef 	.word	0x08037bef
 8012688:	00000000 	.word	0x00000000
 801268c:	080123e5 	.word	0x080123e5
 8012690:	08037beb 	.word	0x08037beb

08012694 <_printf_common>:
 8012694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012698:	4616      	mov	r6, r2
 801269a:	4698      	mov	r8, r3
 801269c:	688a      	ldr	r2, [r1, #8]
 801269e:	690b      	ldr	r3, [r1, #16]
 80126a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80126a4:	4293      	cmp	r3, r2
 80126a6:	bfb8      	it	lt
 80126a8:	4613      	movlt	r3, r2
 80126aa:	6033      	str	r3, [r6, #0]
 80126ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80126b0:	4607      	mov	r7, r0
 80126b2:	460c      	mov	r4, r1
 80126b4:	b10a      	cbz	r2, 80126ba <_printf_common+0x26>
 80126b6:	3301      	adds	r3, #1
 80126b8:	6033      	str	r3, [r6, #0]
 80126ba:	6823      	ldr	r3, [r4, #0]
 80126bc:	0699      	lsls	r1, r3, #26
 80126be:	bf42      	ittt	mi
 80126c0:	6833      	ldrmi	r3, [r6, #0]
 80126c2:	3302      	addmi	r3, #2
 80126c4:	6033      	strmi	r3, [r6, #0]
 80126c6:	6825      	ldr	r5, [r4, #0]
 80126c8:	f015 0506 	ands.w	r5, r5, #6
 80126cc:	d106      	bne.n	80126dc <_printf_common+0x48>
 80126ce:	f104 0a19 	add.w	sl, r4, #25
 80126d2:	68e3      	ldr	r3, [r4, #12]
 80126d4:	6832      	ldr	r2, [r6, #0]
 80126d6:	1a9b      	subs	r3, r3, r2
 80126d8:	42ab      	cmp	r3, r5
 80126da:	dc26      	bgt.n	801272a <_printf_common+0x96>
 80126dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80126e0:	6822      	ldr	r2, [r4, #0]
 80126e2:	3b00      	subs	r3, #0
 80126e4:	bf18      	it	ne
 80126e6:	2301      	movne	r3, #1
 80126e8:	0692      	lsls	r2, r2, #26
 80126ea:	d42b      	bmi.n	8012744 <_printf_common+0xb0>
 80126ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80126f0:	4641      	mov	r1, r8
 80126f2:	4638      	mov	r0, r7
 80126f4:	47c8      	blx	r9
 80126f6:	3001      	adds	r0, #1
 80126f8:	d01e      	beq.n	8012738 <_printf_common+0xa4>
 80126fa:	6823      	ldr	r3, [r4, #0]
 80126fc:	6922      	ldr	r2, [r4, #16]
 80126fe:	f003 0306 	and.w	r3, r3, #6
 8012702:	2b04      	cmp	r3, #4
 8012704:	bf02      	ittt	eq
 8012706:	68e5      	ldreq	r5, [r4, #12]
 8012708:	6833      	ldreq	r3, [r6, #0]
 801270a:	1aed      	subeq	r5, r5, r3
 801270c:	68a3      	ldr	r3, [r4, #8]
 801270e:	bf0c      	ite	eq
 8012710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012714:	2500      	movne	r5, #0
 8012716:	4293      	cmp	r3, r2
 8012718:	bfc4      	itt	gt
 801271a:	1a9b      	subgt	r3, r3, r2
 801271c:	18ed      	addgt	r5, r5, r3
 801271e:	2600      	movs	r6, #0
 8012720:	341a      	adds	r4, #26
 8012722:	42b5      	cmp	r5, r6
 8012724:	d11a      	bne.n	801275c <_printf_common+0xc8>
 8012726:	2000      	movs	r0, #0
 8012728:	e008      	b.n	801273c <_printf_common+0xa8>
 801272a:	2301      	movs	r3, #1
 801272c:	4652      	mov	r2, sl
 801272e:	4641      	mov	r1, r8
 8012730:	4638      	mov	r0, r7
 8012732:	47c8      	blx	r9
 8012734:	3001      	adds	r0, #1
 8012736:	d103      	bne.n	8012740 <_printf_common+0xac>
 8012738:	f04f 30ff 	mov.w	r0, #4294967295
 801273c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012740:	3501      	adds	r5, #1
 8012742:	e7c6      	b.n	80126d2 <_printf_common+0x3e>
 8012744:	18e1      	adds	r1, r4, r3
 8012746:	1c5a      	adds	r2, r3, #1
 8012748:	2030      	movs	r0, #48	@ 0x30
 801274a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801274e:	4422      	add	r2, r4
 8012750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012758:	3302      	adds	r3, #2
 801275a:	e7c7      	b.n	80126ec <_printf_common+0x58>
 801275c:	2301      	movs	r3, #1
 801275e:	4622      	mov	r2, r4
 8012760:	4641      	mov	r1, r8
 8012762:	4638      	mov	r0, r7
 8012764:	47c8      	blx	r9
 8012766:	3001      	adds	r0, #1
 8012768:	d0e6      	beq.n	8012738 <_printf_common+0xa4>
 801276a:	3601      	adds	r6, #1
 801276c:	e7d9      	b.n	8012722 <_printf_common+0x8e>
	...

08012770 <_printf_i>:
 8012770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012774:	7e0f      	ldrb	r7, [r1, #24]
 8012776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012778:	2f78      	cmp	r7, #120	@ 0x78
 801277a:	4691      	mov	r9, r2
 801277c:	4680      	mov	r8, r0
 801277e:	460c      	mov	r4, r1
 8012780:	469a      	mov	sl, r3
 8012782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012786:	d807      	bhi.n	8012798 <_printf_i+0x28>
 8012788:	2f62      	cmp	r7, #98	@ 0x62
 801278a:	d80a      	bhi.n	80127a2 <_printf_i+0x32>
 801278c:	2f00      	cmp	r7, #0
 801278e:	f000 80d2 	beq.w	8012936 <_printf_i+0x1c6>
 8012792:	2f58      	cmp	r7, #88	@ 0x58
 8012794:	f000 80b9 	beq.w	801290a <_printf_i+0x19a>
 8012798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801279c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80127a0:	e03a      	b.n	8012818 <_printf_i+0xa8>
 80127a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80127a6:	2b15      	cmp	r3, #21
 80127a8:	d8f6      	bhi.n	8012798 <_printf_i+0x28>
 80127aa:	a101      	add	r1, pc, #4	@ (adr r1, 80127b0 <_printf_i+0x40>)
 80127ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80127b0:	08012809 	.word	0x08012809
 80127b4:	0801281d 	.word	0x0801281d
 80127b8:	08012799 	.word	0x08012799
 80127bc:	08012799 	.word	0x08012799
 80127c0:	08012799 	.word	0x08012799
 80127c4:	08012799 	.word	0x08012799
 80127c8:	0801281d 	.word	0x0801281d
 80127cc:	08012799 	.word	0x08012799
 80127d0:	08012799 	.word	0x08012799
 80127d4:	08012799 	.word	0x08012799
 80127d8:	08012799 	.word	0x08012799
 80127dc:	0801291d 	.word	0x0801291d
 80127e0:	08012847 	.word	0x08012847
 80127e4:	080128d7 	.word	0x080128d7
 80127e8:	08012799 	.word	0x08012799
 80127ec:	08012799 	.word	0x08012799
 80127f0:	0801293f 	.word	0x0801293f
 80127f4:	08012799 	.word	0x08012799
 80127f8:	08012847 	.word	0x08012847
 80127fc:	08012799 	.word	0x08012799
 8012800:	08012799 	.word	0x08012799
 8012804:	080128df 	.word	0x080128df
 8012808:	6833      	ldr	r3, [r6, #0]
 801280a:	1d1a      	adds	r2, r3, #4
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	6032      	str	r2, [r6, #0]
 8012810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012818:	2301      	movs	r3, #1
 801281a:	e09d      	b.n	8012958 <_printf_i+0x1e8>
 801281c:	6833      	ldr	r3, [r6, #0]
 801281e:	6820      	ldr	r0, [r4, #0]
 8012820:	1d19      	adds	r1, r3, #4
 8012822:	6031      	str	r1, [r6, #0]
 8012824:	0606      	lsls	r6, r0, #24
 8012826:	d501      	bpl.n	801282c <_printf_i+0xbc>
 8012828:	681d      	ldr	r5, [r3, #0]
 801282a:	e003      	b.n	8012834 <_printf_i+0xc4>
 801282c:	0645      	lsls	r5, r0, #25
 801282e:	d5fb      	bpl.n	8012828 <_printf_i+0xb8>
 8012830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012834:	2d00      	cmp	r5, #0
 8012836:	da03      	bge.n	8012840 <_printf_i+0xd0>
 8012838:	232d      	movs	r3, #45	@ 0x2d
 801283a:	426d      	negs	r5, r5
 801283c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012840:	4859      	ldr	r0, [pc, #356]	@ (80129a8 <_printf_i+0x238>)
 8012842:	230a      	movs	r3, #10
 8012844:	e011      	b.n	801286a <_printf_i+0xfa>
 8012846:	6821      	ldr	r1, [r4, #0]
 8012848:	6833      	ldr	r3, [r6, #0]
 801284a:	0608      	lsls	r0, r1, #24
 801284c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012850:	d402      	bmi.n	8012858 <_printf_i+0xe8>
 8012852:	0649      	lsls	r1, r1, #25
 8012854:	bf48      	it	mi
 8012856:	b2ad      	uxthmi	r5, r5
 8012858:	2f6f      	cmp	r7, #111	@ 0x6f
 801285a:	4853      	ldr	r0, [pc, #332]	@ (80129a8 <_printf_i+0x238>)
 801285c:	6033      	str	r3, [r6, #0]
 801285e:	bf14      	ite	ne
 8012860:	230a      	movne	r3, #10
 8012862:	2308      	moveq	r3, #8
 8012864:	2100      	movs	r1, #0
 8012866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801286a:	6866      	ldr	r6, [r4, #4]
 801286c:	60a6      	str	r6, [r4, #8]
 801286e:	2e00      	cmp	r6, #0
 8012870:	bfa2      	ittt	ge
 8012872:	6821      	ldrge	r1, [r4, #0]
 8012874:	f021 0104 	bicge.w	r1, r1, #4
 8012878:	6021      	strge	r1, [r4, #0]
 801287a:	b90d      	cbnz	r5, 8012880 <_printf_i+0x110>
 801287c:	2e00      	cmp	r6, #0
 801287e:	d04b      	beq.n	8012918 <_printf_i+0x1a8>
 8012880:	4616      	mov	r6, r2
 8012882:	fbb5 f1f3 	udiv	r1, r5, r3
 8012886:	fb03 5711 	mls	r7, r3, r1, r5
 801288a:	5dc7      	ldrb	r7, [r0, r7]
 801288c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012890:	462f      	mov	r7, r5
 8012892:	42bb      	cmp	r3, r7
 8012894:	460d      	mov	r5, r1
 8012896:	d9f4      	bls.n	8012882 <_printf_i+0x112>
 8012898:	2b08      	cmp	r3, #8
 801289a:	d10b      	bne.n	80128b4 <_printf_i+0x144>
 801289c:	6823      	ldr	r3, [r4, #0]
 801289e:	07df      	lsls	r7, r3, #31
 80128a0:	d508      	bpl.n	80128b4 <_printf_i+0x144>
 80128a2:	6923      	ldr	r3, [r4, #16]
 80128a4:	6861      	ldr	r1, [r4, #4]
 80128a6:	4299      	cmp	r1, r3
 80128a8:	bfde      	ittt	le
 80128aa:	2330      	movle	r3, #48	@ 0x30
 80128ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80128b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80128b4:	1b92      	subs	r2, r2, r6
 80128b6:	6122      	str	r2, [r4, #16]
 80128b8:	f8cd a000 	str.w	sl, [sp]
 80128bc:	464b      	mov	r3, r9
 80128be:	aa03      	add	r2, sp, #12
 80128c0:	4621      	mov	r1, r4
 80128c2:	4640      	mov	r0, r8
 80128c4:	f7ff fee6 	bl	8012694 <_printf_common>
 80128c8:	3001      	adds	r0, #1
 80128ca:	d14a      	bne.n	8012962 <_printf_i+0x1f2>
 80128cc:	f04f 30ff 	mov.w	r0, #4294967295
 80128d0:	b004      	add	sp, #16
 80128d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128d6:	6823      	ldr	r3, [r4, #0]
 80128d8:	f043 0320 	orr.w	r3, r3, #32
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	4833      	ldr	r0, [pc, #204]	@ (80129ac <_printf_i+0x23c>)
 80128e0:	2778      	movs	r7, #120	@ 0x78
 80128e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80128e6:	6823      	ldr	r3, [r4, #0]
 80128e8:	6831      	ldr	r1, [r6, #0]
 80128ea:	061f      	lsls	r7, r3, #24
 80128ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80128f0:	d402      	bmi.n	80128f8 <_printf_i+0x188>
 80128f2:	065f      	lsls	r7, r3, #25
 80128f4:	bf48      	it	mi
 80128f6:	b2ad      	uxthmi	r5, r5
 80128f8:	6031      	str	r1, [r6, #0]
 80128fa:	07d9      	lsls	r1, r3, #31
 80128fc:	bf44      	itt	mi
 80128fe:	f043 0320 	orrmi.w	r3, r3, #32
 8012902:	6023      	strmi	r3, [r4, #0]
 8012904:	b11d      	cbz	r5, 801290e <_printf_i+0x19e>
 8012906:	2310      	movs	r3, #16
 8012908:	e7ac      	b.n	8012864 <_printf_i+0xf4>
 801290a:	4827      	ldr	r0, [pc, #156]	@ (80129a8 <_printf_i+0x238>)
 801290c:	e7e9      	b.n	80128e2 <_printf_i+0x172>
 801290e:	6823      	ldr	r3, [r4, #0]
 8012910:	f023 0320 	bic.w	r3, r3, #32
 8012914:	6023      	str	r3, [r4, #0]
 8012916:	e7f6      	b.n	8012906 <_printf_i+0x196>
 8012918:	4616      	mov	r6, r2
 801291a:	e7bd      	b.n	8012898 <_printf_i+0x128>
 801291c:	6833      	ldr	r3, [r6, #0]
 801291e:	6825      	ldr	r5, [r4, #0]
 8012920:	6961      	ldr	r1, [r4, #20]
 8012922:	1d18      	adds	r0, r3, #4
 8012924:	6030      	str	r0, [r6, #0]
 8012926:	062e      	lsls	r6, r5, #24
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	d501      	bpl.n	8012930 <_printf_i+0x1c0>
 801292c:	6019      	str	r1, [r3, #0]
 801292e:	e002      	b.n	8012936 <_printf_i+0x1c6>
 8012930:	0668      	lsls	r0, r5, #25
 8012932:	d5fb      	bpl.n	801292c <_printf_i+0x1bc>
 8012934:	8019      	strh	r1, [r3, #0]
 8012936:	2300      	movs	r3, #0
 8012938:	6123      	str	r3, [r4, #16]
 801293a:	4616      	mov	r6, r2
 801293c:	e7bc      	b.n	80128b8 <_printf_i+0x148>
 801293e:	6833      	ldr	r3, [r6, #0]
 8012940:	1d1a      	adds	r2, r3, #4
 8012942:	6032      	str	r2, [r6, #0]
 8012944:	681e      	ldr	r6, [r3, #0]
 8012946:	6862      	ldr	r2, [r4, #4]
 8012948:	2100      	movs	r1, #0
 801294a:	4630      	mov	r0, r6
 801294c:	f7ed fcc0 	bl	80002d0 <memchr>
 8012950:	b108      	cbz	r0, 8012956 <_printf_i+0x1e6>
 8012952:	1b80      	subs	r0, r0, r6
 8012954:	6060      	str	r0, [r4, #4]
 8012956:	6863      	ldr	r3, [r4, #4]
 8012958:	6123      	str	r3, [r4, #16]
 801295a:	2300      	movs	r3, #0
 801295c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012960:	e7aa      	b.n	80128b8 <_printf_i+0x148>
 8012962:	6923      	ldr	r3, [r4, #16]
 8012964:	4632      	mov	r2, r6
 8012966:	4649      	mov	r1, r9
 8012968:	4640      	mov	r0, r8
 801296a:	47d0      	blx	sl
 801296c:	3001      	adds	r0, #1
 801296e:	d0ad      	beq.n	80128cc <_printf_i+0x15c>
 8012970:	6823      	ldr	r3, [r4, #0]
 8012972:	079b      	lsls	r3, r3, #30
 8012974:	d413      	bmi.n	801299e <_printf_i+0x22e>
 8012976:	68e0      	ldr	r0, [r4, #12]
 8012978:	9b03      	ldr	r3, [sp, #12]
 801297a:	4298      	cmp	r0, r3
 801297c:	bfb8      	it	lt
 801297e:	4618      	movlt	r0, r3
 8012980:	e7a6      	b.n	80128d0 <_printf_i+0x160>
 8012982:	2301      	movs	r3, #1
 8012984:	4632      	mov	r2, r6
 8012986:	4649      	mov	r1, r9
 8012988:	4640      	mov	r0, r8
 801298a:	47d0      	blx	sl
 801298c:	3001      	adds	r0, #1
 801298e:	d09d      	beq.n	80128cc <_printf_i+0x15c>
 8012990:	3501      	adds	r5, #1
 8012992:	68e3      	ldr	r3, [r4, #12]
 8012994:	9903      	ldr	r1, [sp, #12]
 8012996:	1a5b      	subs	r3, r3, r1
 8012998:	42ab      	cmp	r3, r5
 801299a:	dcf2      	bgt.n	8012982 <_printf_i+0x212>
 801299c:	e7eb      	b.n	8012976 <_printf_i+0x206>
 801299e:	2500      	movs	r5, #0
 80129a0:	f104 0619 	add.w	r6, r4, #25
 80129a4:	e7f5      	b.n	8012992 <_printf_i+0x222>
 80129a6:	bf00      	nop
 80129a8:	08037bf6 	.word	0x08037bf6
 80129ac:	08037c07 	.word	0x08037c07

080129b0 <__sflush_r>:
 80129b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80129b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b8:	0716      	lsls	r6, r2, #28
 80129ba:	4605      	mov	r5, r0
 80129bc:	460c      	mov	r4, r1
 80129be:	d454      	bmi.n	8012a6a <__sflush_r+0xba>
 80129c0:	684b      	ldr	r3, [r1, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	dc02      	bgt.n	80129cc <__sflush_r+0x1c>
 80129c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	dd48      	ble.n	8012a5e <__sflush_r+0xae>
 80129cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129ce:	2e00      	cmp	r6, #0
 80129d0:	d045      	beq.n	8012a5e <__sflush_r+0xae>
 80129d2:	2300      	movs	r3, #0
 80129d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80129d8:	682f      	ldr	r7, [r5, #0]
 80129da:	6a21      	ldr	r1, [r4, #32]
 80129dc:	602b      	str	r3, [r5, #0]
 80129de:	d030      	beq.n	8012a42 <__sflush_r+0x92>
 80129e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80129e2:	89a3      	ldrh	r3, [r4, #12]
 80129e4:	0759      	lsls	r1, r3, #29
 80129e6:	d505      	bpl.n	80129f4 <__sflush_r+0x44>
 80129e8:	6863      	ldr	r3, [r4, #4]
 80129ea:	1ad2      	subs	r2, r2, r3
 80129ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80129ee:	b10b      	cbz	r3, 80129f4 <__sflush_r+0x44>
 80129f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80129f2:	1ad2      	subs	r2, r2, r3
 80129f4:	2300      	movs	r3, #0
 80129f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129f8:	6a21      	ldr	r1, [r4, #32]
 80129fa:	4628      	mov	r0, r5
 80129fc:	47b0      	blx	r6
 80129fe:	1c43      	adds	r3, r0, #1
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	d106      	bne.n	8012a12 <__sflush_r+0x62>
 8012a04:	6829      	ldr	r1, [r5, #0]
 8012a06:	291d      	cmp	r1, #29
 8012a08:	d82b      	bhi.n	8012a62 <__sflush_r+0xb2>
 8012a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8012ab4 <__sflush_r+0x104>)
 8012a0c:	410a      	asrs	r2, r1
 8012a0e:	07d6      	lsls	r6, r2, #31
 8012a10:	d427      	bmi.n	8012a62 <__sflush_r+0xb2>
 8012a12:	2200      	movs	r2, #0
 8012a14:	6062      	str	r2, [r4, #4]
 8012a16:	04d9      	lsls	r1, r3, #19
 8012a18:	6922      	ldr	r2, [r4, #16]
 8012a1a:	6022      	str	r2, [r4, #0]
 8012a1c:	d504      	bpl.n	8012a28 <__sflush_r+0x78>
 8012a1e:	1c42      	adds	r2, r0, #1
 8012a20:	d101      	bne.n	8012a26 <__sflush_r+0x76>
 8012a22:	682b      	ldr	r3, [r5, #0]
 8012a24:	b903      	cbnz	r3, 8012a28 <__sflush_r+0x78>
 8012a26:	6560      	str	r0, [r4, #84]	@ 0x54
 8012a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a2a:	602f      	str	r7, [r5, #0]
 8012a2c:	b1b9      	cbz	r1, 8012a5e <__sflush_r+0xae>
 8012a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a32:	4299      	cmp	r1, r3
 8012a34:	d002      	beq.n	8012a3c <__sflush_r+0x8c>
 8012a36:	4628      	mov	r0, r5
 8012a38:	f7ff fbd4 	bl	80121e4 <_free_r>
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a40:	e00d      	b.n	8012a5e <__sflush_r+0xae>
 8012a42:	2301      	movs	r3, #1
 8012a44:	4628      	mov	r0, r5
 8012a46:	47b0      	blx	r6
 8012a48:	4602      	mov	r2, r0
 8012a4a:	1c50      	adds	r0, r2, #1
 8012a4c:	d1c9      	bne.n	80129e2 <__sflush_r+0x32>
 8012a4e:	682b      	ldr	r3, [r5, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d0c6      	beq.n	80129e2 <__sflush_r+0x32>
 8012a54:	2b1d      	cmp	r3, #29
 8012a56:	d001      	beq.n	8012a5c <__sflush_r+0xac>
 8012a58:	2b16      	cmp	r3, #22
 8012a5a:	d11e      	bne.n	8012a9a <__sflush_r+0xea>
 8012a5c:	602f      	str	r7, [r5, #0]
 8012a5e:	2000      	movs	r0, #0
 8012a60:	e022      	b.n	8012aa8 <__sflush_r+0xf8>
 8012a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a66:	b21b      	sxth	r3, r3
 8012a68:	e01b      	b.n	8012aa2 <__sflush_r+0xf2>
 8012a6a:	690f      	ldr	r7, [r1, #16]
 8012a6c:	2f00      	cmp	r7, #0
 8012a6e:	d0f6      	beq.n	8012a5e <__sflush_r+0xae>
 8012a70:	0793      	lsls	r3, r2, #30
 8012a72:	680e      	ldr	r6, [r1, #0]
 8012a74:	bf08      	it	eq
 8012a76:	694b      	ldreq	r3, [r1, #20]
 8012a78:	600f      	str	r7, [r1, #0]
 8012a7a:	bf18      	it	ne
 8012a7c:	2300      	movne	r3, #0
 8012a7e:	eba6 0807 	sub.w	r8, r6, r7
 8012a82:	608b      	str	r3, [r1, #8]
 8012a84:	f1b8 0f00 	cmp.w	r8, #0
 8012a88:	dde9      	ble.n	8012a5e <__sflush_r+0xae>
 8012a8a:	6a21      	ldr	r1, [r4, #32]
 8012a8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012a8e:	4643      	mov	r3, r8
 8012a90:	463a      	mov	r2, r7
 8012a92:	4628      	mov	r0, r5
 8012a94:	47b0      	blx	r6
 8012a96:	2800      	cmp	r0, #0
 8012a98:	dc08      	bgt.n	8012aac <__sflush_r+0xfc>
 8012a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012aa2:	81a3      	strh	r3, [r4, #12]
 8012aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aac:	4407      	add	r7, r0
 8012aae:	eba8 0800 	sub.w	r8, r8, r0
 8012ab2:	e7e7      	b.n	8012a84 <__sflush_r+0xd4>
 8012ab4:	dfbffffe 	.word	0xdfbffffe

08012ab8 <_fflush_r>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	690b      	ldr	r3, [r1, #16]
 8012abc:	4605      	mov	r5, r0
 8012abe:	460c      	mov	r4, r1
 8012ac0:	b913      	cbnz	r3, 8012ac8 <_fflush_r+0x10>
 8012ac2:	2500      	movs	r5, #0
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	bd38      	pop	{r3, r4, r5, pc}
 8012ac8:	b118      	cbz	r0, 8012ad2 <_fflush_r+0x1a>
 8012aca:	6a03      	ldr	r3, [r0, #32]
 8012acc:	b90b      	cbnz	r3, 8012ad2 <_fflush_r+0x1a>
 8012ace:	f7ff f97f 	bl	8011dd0 <__sinit>
 8012ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d0f3      	beq.n	8012ac2 <_fflush_r+0xa>
 8012ada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012adc:	07d0      	lsls	r0, r2, #31
 8012ade:	d404      	bmi.n	8012aea <_fflush_r+0x32>
 8012ae0:	0599      	lsls	r1, r3, #22
 8012ae2:	d402      	bmi.n	8012aea <_fflush_r+0x32>
 8012ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ae6:	f7ff fb4e 	bl	8012186 <__retarget_lock_acquire_recursive>
 8012aea:	4628      	mov	r0, r5
 8012aec:	4621      	mov	r1, r4
 8012aee:	f7ff ff5f 	bl	80129b0 <__sflush_r>
 8012af2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012af4:	07da      	lsls	r2, r3, #31
 8012af6:	4605      	mov	r5, r0
 8012af8:	d4e4      	bmi.n	8012ac4 <_fflush_r+0xc>
 8012afa:	89a3      	ldrh	r3, [r4, #12]
 8012afc:	059b      	lsls	r3, r3, #22
 8012afe:	d4e1      	bmi.n	8012ac4 <_fflush_r+0xc>
 8012b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b02:	f7ff fb41 	bl	8012188 <__retarget_lock_release_recursive>
 8012b06:	e7dd      	b.n	8012ac4 <_fflush_r+0xc>

08012b08 <fiprintf>:
 8012b08:	b40e      	push	{r1, r2, r3}
 8012b0a:	b503      	push	{r0, r1, lr}
 8012b0c:	4601      	mov	r1, r0
 8012b0e:	ab03      	add	r3, sp, #12
 8012b10:	4805      	ldr	r0, [pc, #20]	@ (8012b28 <fiprintf+0x20>)
 8012b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b16:	6800      	ldr	r0, [r0, #0]
 8012b18:	9301      	str	r3, [sp, #4]
 8012b1a:	f000 f875 	bl	8012c08 <_vfiprintf_r>
 8012b1e:	b002      	add	sp, #8
 8012b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b24:	b003      	add	sp, #12
 8012b26:	4770      	bx	lr
 8012b28:	2000003c 	.word	0x2000003c

08012b2c <_sbrk_r>:
 8012b2c:	b538      	push	{r3, r4, r5, lr}
 8012b2e:	4d06      	ldr	r5, [pc, #24]	@ (8012b48 <_sbrk_r+0x1c>)
 8012b30:	2300      	movs	r3, #0
 8012b32:	4604      	mov	r4, r0
 8012b34:	4608      	mov	r0, r1
 8012b36:	602b      	str	r3, [r5, #0]
 8012b38:	f7ef f87c 	bl	8001c34 <_sbrk>
 8012b3c:	1c43      	adds	r3, r0, #1
 8012b3e:	d102      	bne.n	8012b46 <_sbrk_r+0x1a>
 8012b40:	682b      	ldr	r3, [r5, #0]
 8012b42:	b103      	cbz	r3, 8012b46 <_sbrk_r+0x1a>
 8012b44:	6023      	str	r3, [r4, #0]
 8012b46:	bd38      	pop	{r3, r4, r5, pc}
 8012b48:	2000ed44 	.word	0x2000ed44

08012b4c <abort>:
 8012b4c:	b508      	push	{r3, lr}
 8012b4e:	2006      	movs	r0, #6
 8012b50:	f000 fa2e 	bl	8012fb0 <raise>
 8012b54:	2001      	movs	r0, #1
 8012b56:	f7ee fff5 	bl	8001b44 <_exit>

08012b5a <_realloc_r>:
 8012b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b5e:	4680      	mov	r8, r0
 8012b60:	4615      	mov	r5, r2
 8012b62:	460c      	mov	r4, r1
 8012b64:	b921      	cbnz	r1, 8012b70 <_realloc_r+0x16>
 8012b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b6a:	4611      	mov	r1, r2
 8012b6c:	f7ff bbae 	b.w	80122cc <_malloc_r>
 8012b70:	b92a      	cbnz	r2, 8012b7e <_realloc_r+0x24>
 8012b72:	f7ff fb37 	bl	80121e4 <_free_r>
 8012b76:	2400      	movs	r4, #0
 8012b78:	4620      	mov	r0, r4
 8012b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b7e:	f000 fa33 	bl	8012fe8 <_malloc_usable_size_r>
 8012b82:	4285      	cmp	r5, r0
 8012b84:	4606      	mov	r6, r0
 8012b86:	d802      	bhi.n	8012b8e <_realloc_r+0x34>
 8012b88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012b8c:	d8f4      	bhi.n	8012b78 <_realloc_r+0x1e>
 8012b8e:	4629      	mov	r1, r5
 8012b90:	4640      	mov	r0, r8
 8012b92:	f7ff fb9b 	bl	80122cc <_malloc_r>
 8012b96:	4607      	mov	r7, r0
 8012b98:	2800      	cmp	r0, #0
 8012b9a:	d0ec      	beq.n	8012b76 <_realloc_r+0x1c>
 8012b9c:	42b5      	cmp	r5, r6
 8012b9e:	462a      	mov	r2, r5
 8012ba0:	4621      	mov	r1, r4
 8012ba2:	bf28      	it	cs
 8012ba4:	4632      	movcs	r2, r6
 8012ba6:	f7ff faf0 	bl	801218a <memcpy>
 8012baa:	4621      	mov	r1, r4
 8012bac:	4640      	mov	r0, r8
 8012bae:	f7ff fb19 	bl	80121e4 <_free_r>
 8012bb2:	463c      	mov	r4, r7
 8012bb4:	e7e0      	b.n	8012b78 <_realloc_r+0x1e>

08012bb6 <__sfputc_r>:
 8012bb6:	6893      	ldr	r3, [r2, #8]
 8012bb8:	3b01      	subs	r3, #1
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	b410      	push	{r4}
 8012bbe:	6093      	str	r3, [r2, #8]
 8012bc0:	da08      	bge.n	8012bd4 <__sfputc_r+0x1e>
 8012bc2:	6994      	ldr	r4, [r2, #24]
 8012bc4:	42a3      	cmp	r3, r4
 8012bc6:	db01      	blt.n	8012bcc <__sfputc_r+0x16>
 8012bc8:	290a      	cmp	r1, #10
 8012bca:	d103      	bne.n	8012bd4 <__sfputc_r+0x1e>
 8012bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bd0:	f000 b932 	b.w	8012e38 <__swbuf_r>
 8012bd4:	6813      	ldr	r3, [r2, #0]
 8012bd6:	1c58      	adds	r0, r3, #1
 8012bd8:	6010      	str	r0, [r2, #0]
 8012bda:	7019      	strb	r1, [r3, #0]
 8012bdc:	4608      	mov	r0, r1
 8012bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012be2:	4770      	bx	lr

08012be4 <__sfputs_r>:
 8012be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012be6:	4606      	mov	r6, r0
 8012be8:	460f      	mov	r7, r1
 8012bea:	4614      	mov	r4, r2
 8012bec:	18d5      	adds	r5, r2, r3
 8012bee:	42ac      	cmp	r4, r5
 8012bf0:	d101      	bne.n	8012bf6 <__sfputs_r+0x12>
 8012bf2:	2000      	movs	r0, #0
 8012bf4:	e007      	b.n	8012c06 <__sfputs_r+0x22>
 8012bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bfa:	463a      	mov	r2, r7
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f7ff ffda 	bl	8012bb6 <__sfputc_r>
 8012c02:	1c43      	adds	r3, r0, #1
 8012c04:	d1f3      	bne.n	8012bee <__sfputs_r+0xa>
 8012c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c08 <_vfiprintf_r>:
 8012c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c0c:	460d      	mov	r5, r1
 8012c0e:	b09d      	sub	sp, #116	@ 0x74
 8012c10:	4614      	mov	r4, r2
 8012c12:	4698      	mov	r8, r3
 8012c14:	4606      	mov	r6, r0
 8012c16:	b118      	cbz	r0, 8012c20 <_vfiprintf_r+0x18>
 8012c18:	6a03      	ldr	r3, [r0, #32]
 8012c1a:	b90b      	cbnz	r3, 8012c20 <_vfiprintf_r+0x18>
 8012c1c:	f7ff f8d8 	bl	8011dd0 <__sinit>
 8012c20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c22:	07d9      	lsls	r1, r3, #31
 8012c24:	d405      	bmi.n	8012c32 <_vfiprintf_r+0x2a>
 8012c26:	89ab      	ldrh	r3, [r5, #12]
 8012c28:	059a      	lsls	r2, r3, #22
 8012c2a:	d402      	bmi.n	8012c32 <_vfiprintf_r+0x2a>
 8012c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c2e:	f7ff faaa 	bl	8012186 <__retarget_lock_acquire_recursive>
 8012c32:	89ab      	ldrh	r3, [r5, #12]
 8012c34:	071b      	lsls	r3, r3, #28
 8012c36:	d501      	bpl.n	8012c3c <_vfiprintf_r+0x34>
 8012c38:	692b      	ldr	r3, [r5, #16]
 8012c3a:	b99b      	cbnz	r3, 8012c64 <_vfiprintf_r+0x5c>
 8012c3c:	4629      	mov	r1, r5
 8012c3e:	4630      	mov	r0, r6
 8012c40:	f000 f938 	bl	8012eb4 <__swsetup_r>
 8012c44:	b170      	cbz	r0, 8012c64 <_vfiprintf_r+0x5c>
 8012c46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c48:	07dc      	lsls	r4, r3, #31
 8012c4a:	d504      	bpl.n	8012c56 <_vfiprintf_r+0x4e>
 8012c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8012c50:	b01d      	add	sp, #116	@ 0x74
 8012c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c56:	89ab      	ldrh	r3, [r5, #12]
 8012c58:	0598      	lsls	r0, r3, #22
 8012c5a:	d4f7      	bmi.n	8012c4c <_vfiprintf_r+0x44>
 8012c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c5e:	f7ff fa93 	bl	8012188 <__retarget_lock_release_recursive>
 8012c62:	e7f3      	b.n	8012c4c <_vfiprintf_r+0x44>
 8012c64:	2300      	movs	r3, #0
 8012c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c68:	2320      	movs	r3, #32
 8012c6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c72:	2330      	movs	r3, #48	@ 0x30
 8012c74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012e24 <_vfiprintf_r+0x21c>
 8012c78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c7c:	f04f 0901 	mov.w	r9, #1
 8012c80:	4623      	mov	r3, r4
 8012c82:	469a      	mov	sl, r3
 8012c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c88:	b10a      	cbz	r2, 8012c8e <_vfiprintf_r+0x86>
 8012c8a:	2a25      	cmp	r2, #37	@ 0x25
 8012c8c:	d1f9      	bne.n	8012c82 <_vfiprintf_r+0x7a>
 8012c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8012c92:	d00b      	beq.n	8012cac <_vfiprintf_r+0xa4>
 8012c94:	465b      	mov	r3, fp
 8012c96:	4622      	mov	r2, r4
 8012c98:	4629      	mov	r1, r5
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f7ff ffa2 	bl	8012be4 <__sfputs_r>
 8012ca0:	3001      	adds	r0, #1
 8012ca2:	f000 80a7 	beq.w	8012df4 <_vfiprintf_r+0x1ec>
 8012ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ca8:	445a      	add	r2, fp
 8012caa:	9209      	str	r2, [sp, #36]	@ 0x24
 8012cac:	f89a 3000 	ldrb.w	r3, [sl]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f000 809f 	beq.w	8012df4 <_vfiprintf_r+0x1ec>
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8012cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cc0:	f10a 0a01 	add.w	sl, sl, #1
 8012cc4:	9304      	str	r3, [sp, #16]
 8012cc6:	9307      	str	r3, [sp, #28]
 8012cc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ccc:	931a      	str	r3, [sp, #104]	@ 0x68
 8012cce:	4654      	mov	r4, sl
 8012cd0:	2205      	movs	r2, #5
 8012cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cd6:	4853      	ldr	r0, [pc, #332]	@ (8012e24 <_vfiprintf_r+0x21c>)
 8012cd8:	f7ed fafa 	bl	80002d0 <memchr>
 8012cdc:	9a04      	ldr	r2, [sp, #16]
 8012cde:	b9d8      	cbnz	r0, 8012d18 <_vfiprintf_r+0x110>
 8012ce0:	06d1      	lsls	r1, r2, #27
 8012ce2:	bf44      	itt	mi
 8012ce4:	2320      	movmi	r3, #32
 8012ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cea:	0713      	lsls	r3, r2, #28
 8012cec:	bf44      	itt	mi
 8012cee:	232b      	movmi	r3, #43	@ 0x2b
 8012cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8012cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cfa:	d015      	beq.n	8012d28 <_vfiprintf_r+0x120>
 8012cfc:	9a07      	ldr	r2, [sp, #28]
 8012cfe:	4654      	mov	r4, sl
 8012d00:	2000      	movs	r0, #0
 8012d02:	f04f 0c0a 	mov.w	ip, #10
 8012d06:	4621      	mov	r1, r4
 8012d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d0c:	3b30      	subs	r3, #48	@ 0x30
 8012d0e:	2b09      	cmp	r3, #9
 8012d10:	d94b      	bls.n	8012daa <_vfiprintf_r+0x1a2>
 8012d12:	b1b0      	cbz	r0, 8012d42 <_vfiprintf_r+0x13a>
 8012d14:	9207      	str	r2, [sp, #28]
 8012d16:	e014      	b.n	8012d42 <_vfiprintf_r+0x13a>
 8012d18:	eba0 0308 	sub.w	r3, r0, r8
 8012d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8012d20:	4313      	orrs	r3, r2
 8012d22:	9304      	str	r3, [sp, #16]
 8012d24:	46a2      	mov	sl, r4
 8012d26:	e7d2      	b.n	8012cce <_vfiprintf_r+0xc6>
 8012d28:	9b03      	ldr	r3, [sp, #12]
 8012d2a:	1d19      	adds	r1, r3, #4
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	9103      	str	r1, [sp, #12]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	bfbb      	ittet	lt
 8012d34:	425b      	neglt	r3, r3
 8012d36:	f042 0202 	orrlt.w	r2, r2, #2
 8012d3a:	9307      	strge	r3, [sp, #28]
 8012d3c:	9307      	strlt	r3, [sp, #28]
 8012d3e:	bfb8      	it	lt
 8012d40:	9204      	strlt	r2, [sp, #16]
 8012d42:	7823      	ldrb	r3, [r4, #0]
 8012d44:	2b2e      	cmp	r3, #46	@ 0x2e
 8012d46:	d10a      	bne.n	8012d5e <_vfiprintf_r+0x156>
 8012d48:	7863      	ldrb	r3, [r4, #1]
 8012d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d4c:	d132      	bne.n	8012db4 <_vfiprintf_r+0x1ac>
 8012d4e:	9b03      	ldr	r3, [sp, #12]
 8012d50:	1d1a      	adds	r2, r3, #4
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	9203      	str	r2, [sp, #12]
 8012d56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012d5a:	3402      	adds	r4, #2
 8012d5c:	9305      	str	r3, [sp, #20]
 8012d5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012e34 <_vfiprintf_r+0x22c>
 8012d62:	7821      	ldrb	r1, [r4, #0]
 8012d64:	2203      	movs	r2, #3
 8012d66:	4650      	mov	r0, sl
 8012d68:	f7ed fab2 	bl	80002d0 <memchr>
 8012d6c:	b138      	cbz	r0, 8012d7e <_vfiprintf_r+0x176>
 8012d6e:	9b04      	ldr	r3, [sp, #16]
 8012d70:	eba0 000a 	sub.w	r0, r0, sl
 8012d74:	2240      	movs	r2, #64	@ 0x40
 8012d76:	4082      	lsls	r2, r0
 8012d78:	4313      	orrs	r3, r2
 8012d7a:	3401      	adds	r4, #1
 8012d7c:	9304      	str	r3, [sp, #16]
 8012d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d82:	4829      	ldr	r0, [pc, #164]	@ (8012e28 <_vfiprintf_r+0x220>)
 8012d84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d88:	2206      	movs	r2, #6
 8012d8a:	f7ed faa1 	bl	80002d0 <memchr>
 8012d8e:	2800      	cmp	r0, #0
 8012d90:	d03f      	beq.n	8012e12 <_vfiprintf_r+0x20a>
 8012d92:	4b26      	ldr	r3, [pc, #152]	@ (8012e2c <_vfiprintf_r+0x224>)
 8012d94:	bb1b      	cbnz	r3, 8012dde <_vfiprintf_r+0x1d6>
 8012d96:	9b03      	ldr	r3, [sp, #12]
 8012d98:	3307      	adds	r3, #7
 8012d9a:	f023 0307 	bic.w	r3, r3, #7
 8012d9e:	3308      	adds	r3, #8
 8012da0:	9303      	str	r3, [sp, #12]
 8012da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012da4:	443b      	add	r3, r7
 8012da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012da8:	e76a      	b.n	8012c80 <_vfiprintf_r+0x78>
 8012daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8012dae:	460c      	mov	r4, r1
 8012db0:	2001      	movs	r0, #1
 8012db2:	e7a8      	b.n	8012d06 <_vfiprintf_r+0xfe>
 8012db4:	2300      	movs	r3, #0
 8012db6:	3401      	adds	r4, #1
 8012db8:	9305      	str	r3, [sp, #20]
 8012dba:	4619      	mov	r1, r3
 8012dbc:	f04f 0c0a 	mov.w	ip, #10
 8012dc0:	4620      	mov	r0, r4
 8012dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dc6:	3a30      	subs	r2, #48	@ 0x30
 8012dc8:	2a09      	cmp	r2, #9
 8012dca:	d903      	bls.n	8012dd4 <_vfiprintf_r+0x1cc>
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d0c6      	beq.n	8012d5e <_vfiprintf_r+0x156>
 8012dd0:	9105      	str	r1, [sp, #20]
 8012dd2:	e7c4      	b.n	8012d5e <_vfiprintf_r+0x156>
 8012dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012dd8:	4604      	mov	r4, r0
 8012dda:	2301      	movs	r3, #1
 8012ddc:	e7f0      	b.n	8012dc0 <_vfiprintf_r+0x1b8>
 8012dde:	ab03      	add	r3, sp, #12
 8012de0:	9300      	str	r3, [sp, #0]
 8012de2:	462a      	mov	r2, r5
 8012de4:	4b12      	ldr	r3, [pc, #72]	@ (8012e30 <_vfiprintf_r+0x228>)
 8012de6:	a904      	add	r1, sp, #16
 8012de8:	4630      	mov	r0, r6
 8012dea:	f3af 8000 	nop.w
 8012dee:	4607      	mov	r7, r0
 8012df0:	1c78      	adds	r0, r7, #1
 8012df2:	d1d6      	bne.n	8012da2 <_vfiprintf_r+0x19a>
 8012df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012df6:	07d9      	lsls	r1, r3, #31
 8012df8:	d405      	bmi.n	8012e06 <_vfiprintf_r+0x1fe>
 8012dfa:	89ab      	ldrh	r3, [r5, #12]
 8012dfc:	059a      	lsls	r2, r3, #22
 8012dfe:	d402      	bmi.n	8012e06 <_vfiprintf_r+0x1fe>
 8012e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e02:	f7ff f9c1 	bl	8012188 <__retarget_lock_release_recursive>
 8012e06:	89ab      	ldrh	r3, [r5, #12]
 8012e08:	065b      	lsls	r3, r3, #25
 8012e0a:	f53f af1f 	bmi.w	8012c4c <_vfiprintf_r+0x44>
 8012e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e10:	e71e      	b.n	8012c50 <_vfiprintf_r+0x48>
 8012e12:	ab03      	add	r3, sp, #12
 8012e14:	9300      	str	r3, [sp, #0]
 8012e16:	462a      	mov	r2, r5
 8012e18:	4b05      	ldr	r3, [pc, #20]	@ (8012e30 <_vfiprintf_r+0x228>)
 8012e1a:	a904      	add	r1, sp, #16
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f7ff fca7 	bl	8012770 <_printf_i>
 8012e22:	e7e4      	b.n	8012dee <_vfiprintf_r+0x1e6>
 8012e24:	08037be5 	.word	0x08037be5
 8012e28:	08037bef 	.word	0x08037bef
 8012e2c:	00000000 	.word	0x00000000
 8012e30:	08012be5 	.word	0x08012be5
 8012e34:	08037beb 	.word	0x08037beb

08012e38 <__swbuf_r>:
 8012e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e3a:	460e      	mov	r6, r1
 8012e3c:	4614      	mov	r4, r2
 8012e3e:	4605      	mov	r5, r0
 8012e40:	b118      	cbz	r0, 8012e4a <__swbuf_r+0x12>
 8012e42:	6a03      	ldr	r3, [r0, #32]
 8012e44:	b90b      	cbnz	r3, 8012e4a <__swbuf_r+0x12>
 8012e46:	f7fe ffc3 	bl	8011dd0 <__sinit>
 8012e4a:	69a3      	ldr	r3, [r4, #24]
 8012e4c:	60a3      	str	r3, [r4, #8]
 8012e4e:	89a3      	ldrh	r3, [r4, #12]
 8012e50:	071a      	lsls	r2, r3, #28
 8012e52:	d501      	bpl.n	8012e58 <__swbuf_r+0x20>
 8012e54:	6923      	ldr	r3, [r4, #16]
 8012e56:	b943      	cbnz	r3, 8012e6a <__swbuf_r+0x32>
 8012e58:	4621      	mov	r1, r4
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	f000 f82a 	bl	8012eb4 <__swsetup_r>
 8012e60:	b118      	cbz	r0, 8012e6a <__swbuf_r+0x32>
 8012e62:	f04f 37ff 	mov.w	r7, #4294967295
 8012e66:	4638      	mov	r0, r7
 8012e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e6a:	6823      	ldr	r3, [r4, #0]
 8012e6c:	6922      	ldr	r2, [r4, #16]
 8012e6e:	1a98      	subs	r0, r3, r2
 8012e70:	6963      	ldr	r3, [r4, #20]
 8012e72:	b2f6      	uxtb	r6, r6
 8012e74:	4283      	cmp	r3, r0
 8012e76:	4637      	mov	r7, r6
 8012e78:	dc05      	bgt.n	8012e86 <__swbuf_r+0x4e>
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	4628      	mov	r0, r5
 8012e7e:	f7ff fe1b 	bl	8012ab8 <_fflush_r>
 8012e82:	2800      	cmp	r0, #0
 8012e84:	d1ed      	bne.n	8012e62 <__swbuf_r+0x2a>
 8012e86:	68a3      	ldr	r3, [r4, #8]
 8012e88:	3b01      	subs	r3, #1
 8012e8a:	60a3      	str	r3, [r4, #8]
 8012e8c:	6823      	ldr	r3, [r4, #0]
 8012e8e:	1c5a      	adds	r2, r3, #1
 8012e90:	6022      	str	r2, [r4, #0]
 8012e92:	701e      	strb	r6, [r3, #0]
 8012e94:	6962      	ldr	r2, [r4, #20]
 8012e96:	1c43      	adds	r3, r0, #1
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d004      	beq.n	8012ea6 <__swbuf_r+0x6e>
 8012e9c:	89a3      	ldrh	r3, [r4, #12]
 8012e9e:	07db      	lsls	r3, r3, #31
 8012ea0:	d5e1      	bpl.n	8012e66 <__swbuf_r+0x2e>
 8012ea2:	2e0a      	cmp	r6, #10
 8012ea4:	d1df      	bne.n	8012e66 <__swbuf_r+0x2e>
 8012ea6:	4621      	mov	r1, r4
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	f7ff fe05 	bl	8012ab8 <_fflush_r>
 8012eae:	2800      	cmp	r0, #0
 8012eb0:	d0d9      	beq.n	8012e66 <__swbuf_r+0x2e>
 8012eb2:	e7d6      	b.n	8012e62 <__swbuf_r+0x2a>

08012eb4 <__swsetup_r>:
 8012eb4:	b538      	push	{r3, r4, r5, lr}
 8012eb6:	4b29      	ldr	r3, [pc, #164]	@ (8012f5c <__swsetup_r+0xa8>)
 8012eb8:	4605      	mov	r5, r0
 8012eba:	6818      	ldr	r0, [r3, #0]
 8012ebc:	460c      	mov	r4, r1
 8012ebe:	b118      	cbz	r0, 8012ec8 <__swsetup_r+0x14>
 8012ec0:	6a03      	ldr	r3, [r0, #32]
 8012ec2:	b90b      	cbnz	r3, 8012ec8 <__swsetup_r+0x14>
 8012ec4:	f7fe ff84 	bl	8011dd0 <__sinit>
 8012ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ecc:	0719      	lsls	r1, r3, #28
 8012ece:	d422      	bmi.n	8012f16 <__swsetup_r+0x62>
 8012ed0:	06da      	lsls	r2, r3, #27
 8012ed2:	d407      	bmi.n	8012ee4 <__swsetup_r+0x30>
 8012ed4:	2209      	movs	r2, #9
 8012ed6:	602a      	str	r2, [r5, #0]
 8012ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012edc:	81a3      	strh	r3, [r4, #12]
 8012ede:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee2:	e033      	b.n	8012f4c <__swsetup_r+0x98>
 8012ee4:	0758      	lsls	r0, r3, #29
 8012ee6:	d512      	bpl.n	8012f0e <__swsetup_r+0x5a>
 8012ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012eea:	b141      	cbz	r1, 8012efe <__swsetup_r+0x4a>
 8012eec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ef0:	4299      	cmp	r1, r3
 8012ef2:	d002      	beq.n	8012efa <__swsetup_r+0x46>
 8012ef4:	4628      	mov	r0, r5
 8012ef6:	f7ff f975 	bl	80121e4 <_free_r>
 8012efa:	2300      	movs	r3, #0
 8012efc:	6363      	str	r3, [r4, #52]	@ 0x34
 8012efe:	89a3      	ldrh	r3, [r4, #12]
 8012f00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012f04:	81a3      	strh	r3, [r4, #12]
 8012f06:	2300      	movs	r3, #0
 8012f08:	6063      	str	r3, [r4, #4]
 8012f0a:	6923      	ldr	r3, [r4, #16]
 8012f0c:	6023      	str	r3, [r4, #0]
 8012f0e:	89a3      	ldrh	r3, [r4, #12]
 8012f10:	f043 0308 	orr.w	r3, r3, #8
 8012f14:	81a3      	strh	r3, [r4, #12]
 8012f16:	6923      	ldr	r3, [r4, #16]
 8012f18:	b94b      	cbnz	r3, 8012f2e <__swsetup_r+0x7a>
 8012f1a:	89a3      	ldrh	r3, [r4, #12]
 8012f1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012f24:	d003      	beq.n	8012f2e <__swsetup_r+0x7a>
 8012f26:	4621      	mov	r1, r4
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f000 f88b 	bl	8013044 <__smakebuf_r>
 8012f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f32:	f013 0201 	ands.w	r2, r3, #1
 8012f36:	d00a      	beq.n	8012f4e <__swsetup_r+0x9a>
 8012f38:	2200      	movs	r2, #0
 8012f3a:	60a2      	str	r2, [r4, #8]
 8012f3c:	6962      	ldr	r2, [r4, #20]
 8012f3e:	4252      	negs	r2, r2
 8012f40:	61a2      	str	r2, [r4, #24]
 8012f42:	6922      	ldr	r2, [r4, #16]
 8012f44:	b942      	cbnz	r2, 8012f58 <__swsetup_r+0xa4>
 8012f46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012f4a:	d1c5      	bne.n	8012ed8 <__swsetup_r+0x24>
 8012f4c:	bd38      	pop	{r3, r4, r5, pc}
 8012f4e:	0799      	lsls	r1, r3, #30
 8012f50:	bf58      	it	pl
 8012f52:	6962      	ldrpl	r2, [r4, #20]
 8012f54:	60a2      	str	r2, [r4, #8]
 8012f56:	e7f4      	b.n	8012f42 <__swsetup_r+0x8e>
 8012f58:	2000      	movs	r0, #0
 8012f5a:	e7f7      	b.n	8012f4c <__swsetup_r+0x98>
 8012f5c:	2000003c 	.word	0x2000003c

08012f60 <_raise_r>:
 8012f60:	291f      	cmp	r1, #31
 8012f62:	b538      	push	{r3, r4, r5, lr}
 8012f64:	4605      	mov	r5, r0
 8012f66:	460c      	mov	r4, r1
 8012f68:	d904      	bls.n	8012f74 <_raise_r+0x14>
 8012f6a:	2316      	movs	r3, #22
 8012f6c:	6003      	str	r3, [r0, #0]
 8012f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f72:	bd38      	pop	{r3, r4, r5, pc}
 8012f74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f76:	b112      	cbz	r2, 8012f7e <_raise_r+0x1e>
 8012f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f7c:	b94b      	cbnz	r3, 8012f92 <_raise_r+0x32>
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f000 f830 	bl	8012fe4 <_getpid_r>
 8012f84:	4622      	mov	r2, r4
 8012f86:	4601      	mov	r1, r0
 8012f88:	4628      	mov	r0, r5
 8012f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f8e:	f000 b817 	b.w	8012fc0 <_kill_r>
 8012f92:	2b01      	cmp	r3, #1
 8012f94:	d00a      	beq.n	8012fac <_raise_r+0x4c>
 8012f96:	1c59      	adds	r1, r3, #1
 8012f98:	d103      	bne.n	8012fa2 <_raise_r+0x42>
 8012f9a:	2316      	movs	r3, #22
 8012f9c:	6003      	str	r3, [r0, #0]
 8012f9e:	2001      	movs	r0, #1
 8012fa0:	e7e7      	b.n	8012f72 <_raise_r+0x12>
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012fa8:	4620      	mov	r0, r4
 8012faa:	4798      	blx	r3
 8012fac:	2000      	movs	r0, #0
 8012fae:	e7e0      	b.n	8012f72 <_raise_r+0x12>

08012fb0 <raise>:
 8012fb0:	4b02      	ldr	r3, [pc, #8]	@ (8012fbc <raise+0xc>)
 8012fb2:	4601      	mov	r1, r0
 8012fb4:	6818      	ldr	r0, [r3, #0]
 8012fb6:	f7ff bfd3 	b.w	8012f60 <_raise_r>
 8012fba:	bf00      	nop
 8012fbc:	2000003c 	.word	0x2000003c

08012fc0 <_kill_r>:
 8012fc0:	b538      	push	{r3, r4, r5, lr}
 8012fc2:	4d07      	ldr	r5, [pc, #28]	@ (8012fe0 <_kill_r+0x20>)
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	4608      	mov	r0, r1
 8012fca:	4611      	mov	r1, r2
 8012fcc:	602b      	str	r3, [r5, #0]
 8012fce:	f7ee fda9 	bl	8001b24 <_kill>
 8012fd2:	1c43      	adds	r3, r0, #1
 8012fd4:	d102      	bne.n	8012fdc <_kill_r+0x1c>
 8012fd6:	682b      	ldr	r3, [r5, #0]
 8012fd8:	b103      	cbz	r3, 8012fdc <_kill_r+0x1c>
 8012fda:	6023      	str	r3, [r4, #0]
 8012fdc:	bd38      	pop	{r3, r4, r5, pc}
 8012fde:	bf00      	nop
 8012fe0:	2000ed44 	.word	0x2000ed44

08012fe4 <_getpid_r>:
 8012fe4:	f7ee bd96 	b.w	8001b14 <_getpid>

08012fe8 <_malloc_usable_size_r>:
 8012fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fec:	1f18      	subs	r0, r3, #4
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	bfbc      	itt	lt
 8012ff2:	580b      	ldrlt	r3, [r1, r0]
 8012ff4:	18c0      	addlt	r0, r0, r3
 8012ff6:	4770      	bx	lr

08012ff8 <__swhatbuf_r>:
 8012ff8:	b570      	push	{r4, r5, r6, lr}
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013000:	2900      	cmp	r1, #0
 8013002:	b096      	sub	sp, #88	@ 0x58
 8013004:	4615      	mov	r5, r2
 8013006:	461e      	mov	r6, r3
 8013008:	da0d      	bge.n	8013026 <__swhatbuf_r+0x2e>
 801300a:	89a3      	ldrh	r3, [r4, #12]
 801300c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013010:	f04f 0100 	mov.w	r1, #0
 8013014:	bf14      	ite	ne
 8013016:	2340      	movne	r3, #64	@ 0x40
 8013018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801301c:	2000      	movs	r0, #0
 801301e:	6031      	str	r1, [r6, #0]
 8013020:	602b      	str	r3, [r5, #0]
 8013022:	b016      	add	sp, #88	@ 0x58
 8013024:	bd70      	pop	{r4, r5, r6, pc}
 8013026:	466a      	mov	r2, sp
 8013028:	f000 f848 	bl	80130bc <_fstat_r>
 801302c:	2800      	cmp	r0, #0
 801302e:	dbec      	blt.n	801300a <__swhatbuf_r+0x12>
 8013030:	9901      	ldr	r1, [sp, #4]
 8013032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801303a:	4259      	negs	r1, r3
 801303c:	4159      	adcs	r1, r3
 801303e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013042:	e7eb      	b.n	801301c <__swhatbuf_r+0x24>

08013044 <__smakebuf_r>:
 8013044:	898b      	ldrh	r3, [r1, #12]
 8013046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013048:	079d      	lsls	r5, r3, #30
 801304a:	4606      	mov	r6, r0
 801304c:	460c      	mov	r4, r1
 801304e:	d507      	bpl.n	8013060 <__smakebuf_r+0x1c>
 8013050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013054:	6023      	str	r3, [r4, #0]
 8013056:	6123      	str	r3, [r4, #16]
 8013058:	2301      	movs	r3, #1
 801305a:	6163      	str	r3, [r4, #20]
 801305c:	b003      	add	sp, #12
 801305e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013060:	ab01      	add	r3, sp, #4
 8013062:	466a      	mov	r2, sp
 8013064:	f7ff ffc8 	bl	8012ff8 <__swhatbuf_r>
 8013068:	9f00      	ldr	r7, [sp, #0]
 801306a:	4605      	mov	r5, r0
 801306c:	4639      	mov	r1, r7
 801306e:	4630      	mov	r0, r6
 8013070:	f7ff f92c 	bl	80122cc <_malloc_r>
 8013074:	b948      	cbnz	r0, 801308a <__smakebuf_r+0x46>
 8013076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801307a:	059a      	lsls	r2, r3, #22
 801307c:	d4ee      	bmi.n	801305c <__smakebuf_r+0x18>
 801307e:	f023 0303 	bic.w	r3, r3, #3
 8013082:	f043 0302 	orr.w	r3, r3, #2
 8013086:	81a3      	strh	r3, [r4, #12]
 8013088:	e7e2      	b.n	8013050 <__smakebuf_r+0xc>
 801308a:	89a3      	ldrh	r3, [r4, #12]
 801308c:	6020      	str	r0, [r4, #0]
 801308e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013092:	81a3      	strh	r3, [r4, #12]
 8013094:	9b01      	ldr	r3, [sp, #4]
 8013096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801309a:	b15b      	cbz	r3, 80130b4 <__smakebuf_r+0x70>
 801309c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130a0:	4630      	mov	r0, r6
 80130a2:	f000 f81d 	bl	80130e0 <_isatty_r>
 80130a6:	b128      	cbz	r0, 80130b4 <__smakebuf_r+0x70>
 80130a8:	89a3      	ldrh	r3, [r4, #12]
 80130aa:	f023 0303 	bic.w	r3, r3, #3
 80130ae:	f043 0301 	orr.w	r3, r3, #1
 80130b2:	81a3      	strh	r3, [r4, #12]
 80130b4:	89a3      	ldrh	r3, [r4, #12]
 80130b6:	431d      	orrs	r5, r3
 80130b8:	81a5      	strh	r5, [r4, #12]
 80130ba:	e7cf      	b.n	801305c <__smakebuf_r+0x18>

080130bc <_fstat_r>:
 80130bc:	b538      	push	{r3, r4, r5, lr}
 80130be:	4d07      	ldr	r5, [pc, #28]	@ (80130dc <_fstat_r+0x20>)
 80130c0:	2300      	movs	r3, #0
 80130c2:	4604      	mov	r4, r0
 80130c4:	4608      	mov	r0, r1
 80130c6:	4611      	mov	r1, r2
 80130c8:	602b      	str	r3, [r5, #0]
 80130ca:	f7ee fd8b 	bl	8001be4 <_fstat>
 80130ce:	1c43      	adds	r3, r0, #1
 80130d0:	d102      	bne.n	80130d8 <_fstat_r+0x1c>
 80130d2:	682b      	ldr	r3, [r5, #0]
 80130d4:	b103      	cbz	r3, 80130d8 <_fstat_r+0x1c>
 80130d6:	6023      	str	r3, [r4, #0]
 80130d8:	bd38      	pop	{r3, r4, r5, pc}
 80130da:	bf00      	nop
 80130dc:	2000ed44 	.word	0x2000ed44

080130e0 <_isatty_r>:
 80130e0:	b538      	push	{r3, r4, r5, lr}
 80130e2:	4d06      	ldr	r5, [pc, #24]	@ (80130fc <_isatty_r+0x1c>)
 80130e4:	2300      	movs	r3, #0
 80130e6:	4604      	mov	r4, r0
 80130e8:	4608      	mov	r0, r1
 80130ea:	602b      	str	r3, [r5, #0]
 80130ec:	f7ee fd8a 	bl	8001c04 <_isatty>
 80130f0:	1c43      	adds	r3, r0, #1
 80130f2:	d102      	bne.n	80130fa <_isatty_r+0x1a>
 80130f4:	682b      	ldr	r3, [r5, #0]
 80130f6:	b103      	cbz	r3, 80130fa <_isatty_r+0x1a>
 80130f8:	6023      	str	r3, [r4, #0]
 80130fa:	bd38      	pop	{r3, r4, r5, pc}
 80130fc:	2000ed44 	.word	0x2000ed44

08013100 <sqrtf>:
 8013100:	b508      	push	{r3, lr}
 8013102:	ed2d 8b02 	vpush	{d8}
 8013106:	eeb0 8a40 	vmov.f32	s16, s0
 801310a:	f000 f817 	bl	801313c <__ieee754_sqrtf>
 801310e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013116:	d60c      	bvs.n	8013132 <sqrtf+0x32>
 8013118:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8013138 <sqrtf+0x38>
 801311c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013124:	d505      	bpl.n	8013132 <sqrtf+0x32>
 8013126:	f7ff f803 	bl	8012130 <__errno>
 801312a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801312e:	2321      	movs	r3, #33	@ 0x21
 8013130:	6003      	str	r3, [r0, #0]
 8013132:	ecbd 8b02 	vpop	{d8}
 8013136:	bd08      	pop	{r3, pc}
 8013138:	00000000 	.word	0x00000000

0801313c <__ieee754_sqrtf>:
 801313c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013140:	4770      	bx	lr
	...

08013144 <_init>:
 8013144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013146:	bf00      	nop
 8013148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801314a:	bc08      	pop	{r3}
 801314c:	469e      	mov	lr, r3
 801314e:	4770      	bx	lr

08013150 <_fini>:
 8013150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013152:	bf00      	nop
 8013154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013156:	bc08      	pop	{r3}
 8013158:	469e      	mov	lr, r3
 801315a:	4770      	bx	lr
