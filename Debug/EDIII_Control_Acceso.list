
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017f24  08014dfc  08014dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cd20  0802cd20  0002e6d4  2**0
                  CONTENTS
  4 .ARM          00000008  0802cd20  0802cd20  0002dd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cd28  0802cd28  0002e6d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802cd28  0802cd28  0002dd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802cd2c  0802cd2c  0002dd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006d4  20000000  0802cd30  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001313c  200006d8  0802d404  0002e6d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000a04  20013814  0802d404  0002e814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e6d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ad1d  00000000  00000000  0002e704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007a8f  00000000  00000000  00059421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002690  00000000  00000000  00060eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c12  00000000  00000000  00063540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246ad  00000000  00000000  00065152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ef57  00000000  00000000  000897ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b34fb  00000000  00000000  000c8756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0017bc51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a4e4  00000000  00000000  0017bd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  001861e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004e2c  00000000  00000000  0018626e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001c0  00000000  00000000  0018b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200006d8 	.word	0x200006d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014de4 	.word	0x08014de4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200006dc 	.word	0x200006dc
 80001dc:	08014de4 	.word	0x08014de4

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	@ 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea6:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <SELECT+0x14>)
 8000ea8:	f005 fc38 	bl	800671c <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ebe:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <DESELECT+0x14>)
 8000ec0:	f005 fc2c 	bl	800671c <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40020000 	.word	0x40020000

08000ecc <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000ed6:	bf00      	nop
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <SPI_TxByte+0x30>)
 8000eda:	f007 fd21 	bl	8008920 <HAL_SPI_GetState>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d1f9      	bne.n	8000ed8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8000ee4:	1df9      	adds	r1, r7, #7
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <SPI_TxByte+0x30>)
 8000eee:	f007 fa2a 	bl	8008346 <HAL_SPI_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000814 	.word	0x20000814

08000f00 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f06:	23ff      	movs	r3, #255	@ 0xff
 8000f08:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000f0e:	bf00      	nop
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <SPI_RxByte+0x38>)
 8000f12:	f007 fd05 	bl	8008920 <HAL_SPI_GetState>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d1f9      	bne.n	8000f10 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8000f1c:	1dba      	adds	r2, r7, #6
 8000f1e:	1df9      	adds	r1, r7, #7
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <SPI_RxByte+0x38>)
 8000f2a:	f007 fb50 	bl	80085ce <HAL_SPI_TransmitReceive>
  
  return data;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000814 	.word	0x20000814

08000f3c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f44:	f7ff ffdc 	bl	8000f00 <SPI_RxByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <SD_ReadyWait+0x34>)
 8000f60:	2232      	movs	r2, #50	@ 0x32
 8000f62:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000f64:	f7ff ffcc 	bl	8000f00 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000f68:	f7ff ffca 	bl	8000f00 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	d004      	beq.n	8000f80 <SD_ReadyWait+0x28>
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SD_ReadyWait+0x34>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <SD_ReadyWait+0x10>
  
  return res;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000095e 	.word	0x2000095e

08000f90 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000f96:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000f9a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000f9c:	f7ff ff8a 	bl	8000eb4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	e005      	b.n	8000fb2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000fa6:	20ff      	movs	r0, #255	@ 0xff
 8000fa8:	f7ff ff90 	bl	8000ecc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	ddf6      	ble.n	8000fa6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000fb8:	f7ff ff70 	bl	8000e9c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000fbc:	2340      	movs	r3, #64	@ 0x40
 8000fbe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000fd0:	2395      	movs	r3, #149	@ 0x95
 8000fd2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e009      	b.n	8000fee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff72 	bl	8000ecc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	ddf2      	ble.n	8000fda <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000ff4:	e002      	b.n	8000ffc <SD_PowerOn+0x6c>
  {
    Count--;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000ffc:	f7ff ff80 	bl	8000f00 <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d002      	beq.n	800100c <SD_PowerOn+0x7c>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f4      	bne.n	8000ff6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800100c:	f7ff ff52 	bl	8000eb4 <DESELECT>
  SPI_TxByte(0XFF);
 8001010:	20ff      	movs	r0, #255	@ 0xff
 8001012:	f7ff ff5b 	bl	8000ecc <SPI_TxByte>
  
  PowerFlag = 1;
 8001016:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <SD_PowerOn+0x94>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200006f5 	.word	0x200006f5

08001028 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <SD_PowerOff+0x14>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	200006f5 	.word	0x200006f5

08001040 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <SD_CheckPower+0x14>)
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200006f5 	.word	0x200006f5

08001058 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <SD_RxDataBlock+0x68>)
 8001064:	220a      	movs	r2, #10
 8001066:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001068:	f7ff ff4a 	bl	8000f00 <SPI_RxByte>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2bff      	cmp	r3, #255	@ 0xff
 8001074:	d104      	bne.n	8001080 <SD_RxDataBlock+0x28>
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <SD_RxDataBlock+0x68>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f3      	bne.n	8001068 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2bfe      	cmp	r3, #254	@ 0xfe
 8001084:	d001      	beq.n	800108a <SD_RxDataBlock+0x32>
    return FALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	e016      	b.n	80010b8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff53 	bl	8000f3c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff4d 	bl	8000f3c <SPI_RxBytePtr>
  } while(btr -= 2);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3b02      	subs	r3, #2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1ed      	bne.n	800108a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80010ae:	f7ff ff27 	bl	8000f00 <SPI_RxByte>
  SPI_RxByte();
 80010b2:	f7ff ff25 	bl	8000f00 <SPI_RxByte>
  
  return TRUE;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000095d 	.word	0x2000095d

080010c4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010d4:	f7ff ff40 	bl	8000f58 <SD_ReadyWait>
 80010d8:	4603      	mov	r3, r0
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d001      	beq.n	80010e2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	e040      	b.n	8001164 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fef1 	bl	8000ecc <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80010ee:	d031      	beq.n	8001154 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fee5 	bl	8000ecc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fede 	bl	8000ecc <SPI_TxByte>
    } while (--wc);
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	3b01      	subs	r3, #1
 8001114:	73bb      	strb	r3, [r7, #14]
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1eb      	bne.n	80010f4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800111c:	f7ff fef0 	bl	8000f00 <SPI_RxByte>
    SPI_RxByte();
 8001120:	f7ff feee 	bl	8000f00 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001124:	e00b      	b.n	800113e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001126:	f7ff feeb 	bl	8000f00 <SPI_RxByte>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2b05      	cmp	r3, #5
 8001136:	d006      	beq.n	8001146 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	3301      	adds	r3, #1
 800113c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800113e:	7b7b      	ldrb	r3, [r7, #13]
 8001140:	2b40      	cmp	r3, #64	@ 0x40
 8001142:	d9f0      	bls.n	8001126 <SD_TxDataBlock+0x62>
 8001144:	e000      	b.n	8001148 <SD_TxDataBlock+0x84>
        break;
 8001146:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001148:	bf00      	nop
 800114a:	f7ff fed9 	bl	8000f00 <SPI_RxByte>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0fa      	beq.n	800114a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2b05      	cmp	r3, #5
 800115c:	d101      	bne.n	8001162 <SD_TxDataBlock+0x9e>
    return TRUE;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001178:	f7ff feee 	bl	8000f58 <SD_ReadyWait>
 800117c:	4603      	mov	r3, r0
 800117e:	2bff      	cmp	r3, #255	@ 0xff
 8001180:	d001      	beq.n	8001186 <SD_SendCmd+0x1a>
    return 0xFF;
 8001182:	23ff      	movs	r3, #255	@ 0xff
 8001184:	e040      	b.n	8001208 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe9f 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	0e1b      	lsrs	r3, r3, #24
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe99 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe93 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe8d 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe88 	bl	8000ecc <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b40      	cmp	r3, #64	@ 0x40
 80011c4:	d101      	bne.n	80011ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80011c6:	2395      	movs	r3, #149	@ 0x95
 80011c8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b48      	cmp	r3, #72	@ 0x48
 80011ce:	d101      	bne.n	80011d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80011d0:	2387      	movs	r3, #135	@ 0x87
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fe78 	bl	8000ecc <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b4c      	cmp	r3, #76	@ 0x4c
 80011e0:	d101      	bne.n	80011e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80011e2:	f7ff fe8d 	bl	8000f00 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80011e6:	230a      	movs	r3, #10
 80011e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80011ea:	f7ff fe89 	bl	8000f00 <SPI_RxByte>
 80011ee:	4603      	mov	r3, r0
 80011f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80011f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da05      	bge.n	8001206 <SD_SendCmd+0x9a>
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	73bb      	strb	r3, [r7, #14]
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f1      	bne.n	80011ea <SD_SendCmd+0x7e>
  
  return res;
 8001206:	7b7b      	ldrb	r3, [r7, #13]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001220:	2301      	movs	r3, #1
 8001222:	e0d5      	b.n	80013d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001224:	4b6c      	ldr	r3, [pc, #432]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <SD_disk_initialize+0x2a>
    return Stat;        
 8001232:	4b69      	ldr	r3, [pc, #420]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	e0ca      	b.n	80013d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800123a:	f7ff fea9 	bl	8000f90 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800123e:	f7ff fe2d 	bl	8000e9c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001246:	2100      	movs	r1, #0
 8001248:	2040      	movs	r0, #64	@ 0x40
 800124a:	f7ff ff8f 	bl	800116c <SD_SendCmd>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	f040 80a5 	bne.w	80013a0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001256:	4b61      	ldr	r3, [pc, #388]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001258:	2264      	movs	r2, #100	@ 0x64
 800125a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800125c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001260:	2048      	movs	r0, #72	@ 0x48
 8001262:	f7ff ff83 	bl	800116c <SD_SendCmd>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d158      	bne.n	800131e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e00c      	b.n	800128c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001272:	7bfc      	ldrb	r4, [r7, #15]
 8001274:	f7ff fe44 	bl	8000f00 <SPI_RxByte>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	f104 0310 	add.w	r3, r4, #16
 8001280:	443b      	add	r3, r7
 8001282:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d9ef      	bls.n	8001272 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001292:	7abb      	ldrb	r3, [r7, #10]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8083 	bne.w	80013a0 <SD_disk_initialize+0x190>
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	2baa      	cmp	r3, #170	@ 0xaa
 800129e:	d17f      	bne.n	80013a0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80012a0:	2100      	movs	r1, #0
 80012a2:	2077      	movs	r0, #119	@ 0x77
 80012a4:	f7ff ff62 	bl	800116c <SD_SendCmd>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d807      	bhi.n	80012be <SD_disk_initialize+0xae>
 80012ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012b2:	2069      	movs	r0, #105	@ 0x69
 80012b4:	f7ff ff5a 	bl	800116c <SD_SendCmd>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80012be:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <SD_disk_initialize+0x1cc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1eb      	bne.n	80012a0 <SD_disk_initialize+0x90>
 80012c8:	e000      	b.n	80012cc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80012ca:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <SD_disk_initialize+0x1cc>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d064      	beq.n	80013a0 <SD_disk_initialize+0x190>
 80012d6:	2100      	movs	r1, #0
 80012d8:	207a      	movs	r0, #122	@ 0x7a
 80012da:	f7ff ff47 	bl	800116c <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d15d      	bne.n	80013a0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e00c      	b.n	8001304 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80012ea:	7bfc      	ldrb	r4, [r7, #15]
 80012ec:	f7ff fe08 	bl	8000f00 <SPI_RxByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	443b      	add	r3, r7
 80012fa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9ef      	bls.n	80012ea <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800130a:	7a3b      	ldrb	r3, [r7, #8]
 800130c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SD_disk_initialize+0x108>
 8001314:	2306      	movs	r3, #6
 8001316:	e000      	b.n	800131a <SD_disk_initialize+0x10a>
 8001318:	2302      	movs	r3, #2
 800131a:	73bb      	strb	r3, [r7, #14]
 800131c:	e040      	b.n	80013a0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800131e:	2100      	movs	r1, #0
 8001320:	2077      	movs	r0, #119	@ 0x77
 8001322:	f7ff ff23 	bl	800116c <SD_SendCmd>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d808      	bhi.n	800133e <SD_disk_initialize+0x12e>
 800132c:	2100      	movs	r1, #0
 800132e:	2069      	movs	r0, #105	@ 0x69
 8001330:	f7ff ff1c 	bl	800116c <SD_SendCmd>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d801      	bhi.n	800133e <SD_disk_initialize+0x12e>
 800133a:	2302      	movs	r3, #2
 800133c:	e000      	b.n	8001340 <SD_disk_initialize+0x130>
 800133e:	2301      	movs	r3, #1
 8001340:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d10e      	bne.n	8001366 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001348:	2100      	movs	r1, #0
 800134a:	2077      	movs	r0, #119	@ 0x77
 800134c:	f7ff ff0e 	bl	800116c <SD_SendCmd>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d80e      	bhi.n	8001374 <SD_disk_initialize+0x164>
 8001356:	2100      	movs	r1, #0
 8001358:	2069      	movs	r0, #105	@ 0x69
 800135a:	f7ff ff07 	bl	800116c <SD_SendCmd>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001364:	e00d      	b.n	8001382 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001366:	2100      	movs	r1, #0
 8001368:	2041      	movs	r0, #65	@ 0x41
 800136a:	f7ff feff 	bl	800116c <SD_SendCmd>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e1      	bne.n	8001342 <SD_disk_initialize+0x132>
 800137e:	e000      	b.n	8001382 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001380:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <SD_disk_initialize+0x18c>
 800138c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001390:	2050      	movs	r0, #80	@ 0x50
 8001392:	f7ff feeb 	bl	800116c <SD_SendCmd>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80013a0:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <SD_disk_initialize+0x1d0>)
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80013a6:	f7ff fd85 	bl	8000eb4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80013aa:	f7ff fda9 	bl	8000f00 <SPI_RxByte>
  
  if (type) 
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e001      	b.n	80013ca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80013c6:	f7ff fe2f 	bl	8001028 <SD_PowerOff>
  }
  
  return Stat;
 80013ca:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	2000095d 	.word	0x2000095d
 80013e0:	200006f4 	.word	0x200006f4

080013e4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80013f4:	2301      	movs	r3, #1
 80013f6:	e002      	b.n	80013fe <SD_disk_status+0x1a>
  
  return Stat;
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <SD_disk_status+0x28>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000000 	.word	0x20000000

08001410 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <SD_disk_read+0x1c>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <SD_disk_read+0x20>
    return RES_PARERR;
 800142c:	2304      	movs	r3, #4
 800142e:	e051      	b.n	80014d4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <SD_disk_read+0xcc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800143e:	2303      	movs	r3, #3
 8001440:	e048      	b.n	80014d4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001442:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <SD_disk_read+0xd0>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001454:	f7ff fd22 	bl	8000e9c <SELECT>
  
  if (count == 1) 
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d111      	bne.n	8001482 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	2051      	movs	r0, #81	@ 0x51
 8001462:	f7ff fe83 	bl	800116c <SD_SendCmd>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d129      	bne.n	80014c0 <SD_disk_read+0xb0>
 800146c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f7ff fdf1 	bl	8001058 <SD_RxDataBlock>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d021      	beq.n	80014c0 <SD_disk_read+0xb0>
      count = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	e01e      	b.n	80014c0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2052      	movs	r0, #82	@ 0x52
 8001486:	f7ff fe71 	bl	800116c <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d117      	bne.n	80014c0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f7ff fddf 	bl	8001058 <SD_RxDataBlock>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00a      	beq.n	80014b6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80014a6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ed      	bne.n	8001490 <SD_disk_read+0x80>
 80014b4:	e000      	b.n	80014b8 <SD_disk_read+0xa8>
          break;
 80014b6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80014b8:	2100      	movs	r1, #0
 80014ba:	204c      	movs	r0, #76	@ 0x4c
 80014bc:	f7ff fe56 	bl	800116c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80014c0:	f7ff fcf8 	bl	8000eb4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80014c4:	f7ff fd1c 	bl	8000f00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	200006f4 	.word	0x200006f4

080014e4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <SD_disk_write+0x1c>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <SD_disk_write+0x20>
    return RES_PARERR;
 8001500:	2304      	movs	r3, #4
 8001502:	e06b      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001504:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <SD_disk_write+0x100>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001512:	2303      	movs	r3, #3
 8001514:	e062      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001516:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <SD_disk_write+0x100>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001524:	2302      	movs	r3, #2
 8001526:	e059      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <SD_disk_write+0x104>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800153a:	f7ff fcaf 	bl	8000e9c <SELECT>
  
  if (count == 1) 
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d110      	bne.n	8001566 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	2058      	movs	r0, #88	@ 0x58
 8001548:	f7ff fe10 	bl	800116c <SD_SendCmd>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d13a      	bne.n	80015c8 <SD_disk_write+0xe4>
 8001552:	21fe      	movs	r1, #254	@ 0xfe
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f7ff fdb5 	bl	80010c4 <SD_TxDataBlock>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d033      	beq.n	80015c8 <SD_disk_write+0xe4>
      count = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	e030      	b.n	80015c8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <SD_disk_write+0x104>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001572:	2100      	movs	r1, #0
 8001574:	2077      	movs	r0, #119	@ 0x77
 8001576:	f7ff fdf9 	bl	800116c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	2057      	movs	r0, #87	@ 0x57
 800157e:	f7ff fdf5 	bl	800116c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	2059      	movs	r0, #89	@ 0x59
 8001586:	f7ff fdf1 	bl	800116c <SD_SendCmd>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11b      	bne.n	80015c8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001590:	21fc      	movs	r1, #252	@ 0xfc
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff fd96 	bl	80010c4 <SD_TxDataBlock>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <SD_disk_write+0xac>
 80015b2:	e000      	b.n	80015b6 <SD_disk_write+0xd2>
          break;
 80015b4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80015b6:	21fd      	movs	r1, #253	@ 0xfd
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fd83 	bl	80010c4 <SD_TxDataBlock>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80015c8:	f7ff fc74 	bl	8000eb4 <DESELECT>
  SPI_RxByte();
 80015cc:	f7ff fc98 	bl	8000f00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	200006f4 	.word	0x200006f4

080015ec <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08b      	sub	sp, #44	@ 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	603a      	str	r2, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	460b      	mov	r3, r1
 80015fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001606:	2304      	movs	r3, #4
 8001608:	e119      	b.n	800183e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d129      	bne.n	800166a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d017      	beq.n	800164e <SD_disk_ioctl+0x62>
 800161e:	2b02      	cmp	r3, #2
 8001620:	dc1f      	bgt.n	8001662 <SD_disk_ioctl+0x76>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <SD_disk_ioctl+0x40>
 8001626:	2b01      	cmp	r3, #1
 8001628:	d00b      	beq.n	8001642 <SD_disk_ioctl+0x56>
 800162a:	e01a      	b.n	8001662 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800162c:	f7ff fd08 	bl	8001040 <SD_CheckPower>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001636:	f7ff fcf7 	bl	8001028 <SD_PowerOff>
      res = RES_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001640:	e0fb      	b.n	800183a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001642:	f7ff fca5 	bl	8000f90 <SD_PowerOn>
      res = RES_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800164c:	e0f5      	b.n	800183a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5c      	adds	r4, r3, #1
 8001652:	f7ff fcf5 	bl	8001040 <SD_CheckPower>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001660:	e0eb      	b.n	800183a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001662:	2304      	movs	r3, #4
 8001664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001668:	e0e7      	b.n	800183a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800166a:	4b77      	ldr	r3, [pc, #476]	@ (8001848 <SD_disk_ioctl+0x25c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001678:	2303      	movs	r3, #3
 800167a:	e0e0      	b.n	800183e <SD_disk_ioctl+0x252>
    
    SELECT();
 800167c:	f7ff fc0e 	bl	8000e9c <SELECT>
    
    switch (ctrl) 
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b0d      	cmp	r3, #13
 8001684:	f200 80ca 	bhi.w	800181c <SD_disk_ioctl+0x230>
 8001688:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <SD_disk_ioctl+0xa4>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	08001787 	.word	0x08001787
 8001694:	080016c9 	.word	0x080016c9
 8001698:	08001777 	.word	0x08001777
 800169c:	0800181d 	.word	0x0800181d
 80016a0:	0800181d 	.word	0x0800181d
 80016a4:	0800181d 	.word	0x0800181d
 80016a8:	0800181d 	.word	0x0800181d
 80016ac:	0800181d 	.word	0x0800181d
 80016b0:	0800181d 	.word	0x0800181d
 80016b4:	0800181d 	.word	0x0800181d
 80016b8:	0800181d 	.word	0x0800181d
 80016bc:	08001799 	.word	0x08001799
 80016c0:	080017bd 	.word	0x080017bd
 80016c4:	080017e1 	.word	0x080017e1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80016c8:	2100      	movs	r1, #0
 80016ca:	2049      	movs	r0, #73	@ 0x49
 80016cc:	f7ff fd4e 	bl	800116c <SD_SendCmd>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80a6 	bne.w	8001824 <SD_disk_ioctl+0x238>
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fcba 	bl	8001058 <SD_RxDataBlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 809c 	beq.w	8001824 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10d      	bne.n	8001712 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	461a      	mov	r2, r3
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001708:	8bfb      	ldrh	r3, [r7, #30]
 800170a:	029a      	lsls	r2, r3, #10
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e02d      	b.n	800176e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001712:	7c7b      	ldrb	r3, [r7, #17]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b2da      	uxtb	r2, r3
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	09db      	lsrs	r3, r3, #7
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4413      	add	r3, r2
 8001722:	b2da      	uxtb	r2, r3
 8001724:	7d7b      	ldrb	r3, [r7, #21]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0306 	and.w	r3, r3, #6
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	3302      	adds	r3, #2
 8001736:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800173a:	7d3b      	ldrb	r3, [r7, #20]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	7cfb      	ldrb	r3, [r7, #19]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	b29b      	uxth	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b29a      	uxth	r2, r3
 800174c:	7cbb      	ldrb	r3, [r7, #18]
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	b29b      	uxth	r3, r3
 8001752:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001756:	b29b      	uxth	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	3301      	adds	r3, #1
 800175e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001760:	8bfa      	ldrh	r2, [r7, #30]
 8001762:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001766:	3b09      	subs	r3, #9
 8001768:	409a      	lsls	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001774:	e056      	b.n	8001824 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001784:	e055      	b.n	8001832 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001786:	f7ff fbe7 	bl	8000f58 <SD_ReadyWait>
 800178a:	4603      	mov	r3, r0
 800178c:	2bff      	cmp	r3, #255	@ 0xff
 800178e:	d14b      	bne.n	8001828 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001796:	e047      	b.n	8001828 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001798:	2100      	movs	r1, #0
 800179a:	2049      	movs	r0, #73	@ 0x49
 800179c:	f7ff fce6 	bl	800116c <SD_SendCmd>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d142      	bne.n	800182c <SD_disk_ioctl+0x240>
 80017a6:	2110      	movs	r1, #16
 80017a8:	6a38      	ldr	r0, [r7, #32]
 80017aa:	f7ff fc55 	bl	8001058 <SD_RxDataBlock>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03b      	beq.n	800182c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017ba:	e037      	b.n	800182c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017bc:	2100      	movs	r1, #0
 80017be:	204a      	movs	r0, #74	@ 0x4a
 80017c0:	f7ff fcd4 	bl	800116c <SD_SendCmd>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d132      	bne.n	8001830 <SD_disk_ioctl+0x244>
 80017ca:	2110      	movs	r1, #16
 80017cc:	6a38      	ldr	r0, [r7, #32]
 80017ce:	f7ff fc43 	bl	8001058 <SD_RxDataBlock>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02b      	beq.n	8001830 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017de:	e027      	b.n	8001830 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80017e0:	2100      	movs	r1, #0
 80017e2:	207a      	movs	r0, #122	@ 0x7a
 80017e4:	f7ff fcc2 	bl	800116c <SD_SendCmd>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017f4:	e00b      	b.n	800180e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80017f6:	6a3c      	ldr	r4, [r7, #32]
 80017f8:	1c63      	adds	r3, r4, #1
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	f7ff fb80 	bl	8000f00 <SPI_RxByte>
 8001800:	4603      	mov	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001804:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001808:	3301      	adds	r3, #1
 800180a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800180e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001812:	2b03      	cmp	r3, #3
 8001814:	d9ef      	bls.n	80017f6 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 800181c:	2304      	movs	r3, #4
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001822:	e006      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001824:	bf00      	nop
 8001826:	e004      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001828:	bf00      	nop
 800182a:	e002      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001830:	bf00      	nop
    }
    
    DESELECT();
 8001832:	f7ff fb3f 	bl	8000eb4 <DESELECT>
    SPI_RxByte();
 8001836:	f7ff fb63 	bl	8000f00 <SPI_RxByte>
  }
  
  return res;
 800183a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800183e:	4618      	mov	r0, r3
 8001840:	372c      	adds	r7, #44	@ 0x2c
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000

0800184c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001852:	f003 fb39 	bl	8004ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001856:	f000 f891 	bl	800197c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185a:	f000 faa3 	bl	8001da4 <MX_GPIO_Init>
  MX_DMA_Init();
 800185e:	f000 fa81 	bl	8001d64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001862:	f000 fa55 	bl	8001d10 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001866:	f000 f947 	bl	8001af8 <MX_I2C1_Init>
  MX_SPI3_Init();
 800186a:	f000 f9cd 	bl	8001c08 <MX_SPI3_Init>
  MX_RTC_Init();
 800186e:	f000 f971 	bl	8001b54 <MX_RTC_Init>
  MX_ADC1_Init();
 8001872:	f000 f8ef 	bl	8001a54 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001876:	f000 f9fd 	bl	8001c74 <MX_TIM3_Init>
  MX_FATFS_Init();
 800187a:	f008 f9af 	bl	8009bdc <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  keypad_sd_sync = xSemaphoreCreateBinary();
 800187e:	2203      	movs	r2, #3
 8001880:	2100      	movs	r1, #0
 8001882:	2001      	movs	r0, #1
 8001884:	f00e f9e0 	bl	800fc48 <xQueueGenericCreate>
 8001888:	4603      	mov	r3, r0
 800188a:	4a2d      	ldr	r2, [pc, #180]	@ (8001940 <main+0xf4>)
 800188c:	6013      	str	r3, [r2, #0]
  sd_display_sync = xSemaphoreCreateBinary();
 800188e:	2203      	movs	r2, #3
 8001890:	2100      	movs	r1, #0
 8001892:	2001      	movs	r0, #1
 8001894:	f00e f9d8 	bl	800fc48 <xQueueGenericCreate>
 8001898:	4603      	mov	r3, r0
 800189a:	4a2a      	ldr	r2, [pc, #168]	@ (8001944 <main+0xf8>)
 800189c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_message_t));
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	2001      	movs	r0, #1
 80018a4:	f00e f9d0 	bl	800fc48 <xQueueGenericCreate>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a27      	ldr	r2, [pc, #156]	@ (8001948 <main+0xfc>)
 80018ac:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 80018ae:	2200      	movs	r2, #0
 80018b0:	2101      	movs	r1, #1
 80018b2:	2001      	movs	r0, #1
 80018b4:	f00e f9c8 	bl	800fc48 <xQueueGenericCreate>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a24      	ldr	r2, [pc, #144]	@ (800194c <main+0x100>)
 80018bc:	6013      	str	r3, [r2, #0]
  lock_state_queue = xQueueCreate(1, sizeof(bool));
 80018be:	2200      	movs	r2, #0
 80018c0:	2101      	movs	r1, #1
 80018c2:	2001      	movs	r0, #1
 80018c4:	f00e f9c0 	bl	800fc48 <xQueueGenericCreate>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a21      	ldr	r2, [pc, #132]	@ (8001950 <main+0x104>)
 80018cc:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", 3* configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 80018ce:	2300      	movs	r3, #0
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	2304      	movs	r3, #4
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80018dc:	491d      	ldr	r1, [pc, #116]	@ (8001954 <main+0x108>)
 80018de:	481e      	ldr	r0, [pc, #120]	@ (8001958 <main+0x10c>)
 80018e0:	f00e ff80 	bl	80107e4 <xTaskCreate>
  xTaskCreate(lock_task, "Tarea Lock", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
 80018e4:	2300      	movs	r3, #0
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	2303      	movs	r3, #3
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	2280      	movs	r2, #128	@ 0x80
 80018f0:	491a      	ldr	r1, [pc, #104]	@ (800195c <main+0x110>)
 80018f2:	481b      	ldr	r0, [pc, #108]	@ (8001960 <main+0x114>)
 80018f4:	f00e ff76 	bl	80107e4 <xTaskCreate>
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 15000, NULL, tskIDLE_PRIORITY + 2, NULL);
 80018f8:	2300      	movs	r3, #0
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	2302      	movs	r3, #2
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001906:	4917      	ldr	r1, [pc, #92]	@ (8001964 <main+0x118>)
 8001908:	4817      	ldr	r0, [pc, #92]	@ (8001968 <main+0x11c>)
 800190a:	f00e ff6b 	bl	80107e4 <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", 1 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800190e:	2300      	movs	r3, #0
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	2301      	movs	r3, #1
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	2300      	movs	r3, #0
 8001918:	2280      	movs	r2, #128	@ 0x80
 800191a:	4914      	ldr	r1, [pc, #80]	@ (800196c <main+0x120>)
 800191c:	4814      	ldr	r0, [pc, #80]	@ (8001970 <main+0x124>)
 800191e:	f00e ff61 	bl	80107e4 <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", 1 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8001922:	2300      	movs	r3, #0
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2300      	movs	r3, #0
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	2280      	movs	r2, #128	@ 0x80
 800192e:	4911      	ldr	r1, [pc, #68]	@ (8001974 <main+0x128>)
 8001930:	4811      	ldr	r0, [pc, #68]	@ (8001978 <main+0x12c>)
 8001932:	f00e ff57 	bl	80107e4 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001936:	f00f f8bf 	bl	8010ab8 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800193a:	bf00      	nop
 800193c:	e7fd      	b.n	800193a <main+0xee>
 800193e:	bf00      	nop
 8001940:	20000908 	.word	0x20000908
 8001944:	2000090c 	.word	0x2000090c
 8001948:	20000900 	.word	0x20000900
 800194c:	200008fc 	.word	0x200008fc
 8001950:	20000904 	.word	0x20000904
 8001954:	08014dfc 	.word	0x08014dfc
 8001958:	08004979 	.word	0x08004979
 800195c:	08014e0c 	.word	0x08014e0c
 8001960:	08004c65 	.word	0x08004c65
 8001964:	08014e18 	.word	0x08014e18
 8001968:	08004cad 	.word	0x08004cad
 800196c:	08014e24 	.word	0x08014e24
 8001970:	08004bb9 	.word	0x08004bb9
 8001974:	08014e34 	.word	0x08014e34
 8001978:	08001ec9 	.word	0x08001ec9

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	@ 0x50
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2230      	movs	r2, #48	@ 0x30
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f012 f953 	bl	8013c36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b29      	ldr	r3, [pc, #164]	@ (8001a4c <SystemClock_Config+0xd0>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	4a28      	ldr	r2, [pc, #160]	@ (8001a4c <SystemClock_Config+0xd0>)
 80019aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b0:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <SystemClock_Config+0xd0>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <SystemClock_Config+0xd4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019c8:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <SystemClock_Config+0xd4>)
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <SystemClock_Config+0xd4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019dc:	2309      	movs	r3, #9
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019e6:	2301      	movs	r3, #1
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f4:	2304      	movs	r3, #4
 80019f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80019f8:	2340      	movs	r3, #64	@ 0x40
 80019fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a00:	2307      	movs	r3, #7
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f005 fb4f 	bl	80070ac <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a14:	f000 fa85 	bl	8001f22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2102      	movs	r1, #2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f005 fdb1 	bl	800759c <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a40:	f000 fa6f 	bl	8001f22 <Error_Handler>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3750      	adds	r7, #80	@ 0x50
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a66:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a68:	4a22      	ldr	r2, [pc, #136]	@ (8001af4 <MX_ADC1_Init+0xa0>)
 8001a6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a72:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab6:	480e      	ldr	r0, [pc, #56]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001ab8:	f003 fa6c 	bl	8004f94 <HAL_ADC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001ac2:	f000 fa2e 	bl	8001f22 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4806      	ldr	r0, [pc, #24]	@ (8001af0 <MX_ADC1_Init+0x9c>)
 8001ad8:	f003 fd18 	bl	800550c <HAL_ADC_ConfigChannel>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001ae2:	f000 fa1e 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200006f8 	.word	0x200006f8
 8001af4:	40012000 	.word	0x40012000

08001af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001afc:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001afe:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <MX_I2C1_Init+0x54>)
 8001b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b04:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <MX_I2C1_Init+0x58>)
 8001b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	@ (8001b48 <MX_I2C1_Init+0x50>)
 8001b36:	f004 fe0b 	bl	8006750 <HAL_I2C_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b40:	f000 f9ef 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200007a0 	.word	0x200007a0
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	00061a80 	.word	0x00061a80

08001b54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b68:	2300      	movs	r3, #0
 8001b6a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b6c:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b6e:	4a25      	ldr	r2, [pc, #148]	@ (8001c04 <MX_RTC_Init+0xb0>)
 8001b70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b72:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b78:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b7a:	227f      	movs	r2, #127	@ 0x7f
 8001b7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b80:	22ff      	movs	r2, #255	@ 0xff
 8001b82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b96:	481a      	ldr	r0, [pc, #104]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001b98:	f006 f840 	bl	8007c1c <HAL_RTC_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001ba2:	f000 f9be 	bl	8001f22 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8001ba6:	230f      	movs	r3, #15
 8001ba8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480f      	ldr	r0, [pc, #60]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001bc2:	f006 f8ae 	bl	8007d22 <HAL_RTC_SetTime>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001bcc:	f000 f9a9 	bl	8001f22 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8001bd8:	2306      	movs	r3, #6
 8001bda:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001bdc:	2318      	movs	r3, #24
 8001bde:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001be0:	463b      	mov	r3, r7
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	@ (8001c00 <MX_RTC_Init+0xac>)
 8001be8:	f006 f993 	bl	8007f12 <HAL_RTC_SetDate>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001bf2:	f000 f996 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200007f4 	.word	0x200007f4
 8001c04:	40002800 	.word	0x40002800

08001c08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c0e:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <MX_SPI3_Init+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c12:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c20:	4b12      	ldr	r3, [pc, #72]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c26:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c32:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4c:	4b07      	ldr	r3, [pc, #28]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c54:	220a      	movs	r2, #10
 8001c56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c58:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <MX_SPI3_Init+0x64>)
 8001c5a:	f006 faeb 	bl	8008234 <HAL_SPI_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c64:	f000 f95d 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000814 	.word	0x20000814
 8001c70:	40003c00 	.word	0x40003c00

08001c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <MX_TIM3_Init+0x98>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000 - 1;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001ca4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001ca8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cb6:	4814      	ldr	r0, [pc, #80]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cb8:	f006 ff1c 	bl	8008af4 <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cc2:	f000 f92e 	bl	8001f22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cd4:	f007 f8df 	bl	8008e96 <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001cde:	f000 f920 	bl	8001f22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <MX_TIM3_Init+0x94>)
 8001cf0:	f007 fae6 	bl	80092c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cfa:	f000 f912 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000086c 	.word	0x2000086c
 8001d0c:	40000400 	.word	0x40000400

08001d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <MX_USART2_UART_Init+0x50>)
 8001d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <MX_USART2_UART_Init+0x4c>)
 8001d48:	f007 fb3c 	bl	80093c4 <HAL_UART_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d52:	f000 f8e6 	bl	8001f22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200008b4 	.word	0x200008b4
 8001d60:	40004400 	.word	0x40004400

08001d64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a0b      	ldr	r2, [pc, #44]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_DMA_Init+0x3c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	2038      	movs	r0, #56	@ 0x38
 8001d8c:	f003 ff20 	bl	8005bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d90:	2038      	movs	r0, #56	@ 0x38
 8001d92:	f003 ff39 	bl	8005c08 <HAL_NVIC_EnableIRQ>

}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800

08001da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b3c      	ldr	r3, [pc, #240]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b38      	ldr	r3, [pc, #224]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a37      	ldr	r2, [pc, #220]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b31      	ldr	r3, [pc, #196]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a30      	ldr	r2, [pc, #192]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a29      	ldr	r2, [pc, #164]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <MX_GPIO_Init+0x118>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001e30:	4823      	ldr	r0, [pc, #140]	@ (8001ec0 <MX_GPIO_Init+0x11c>)
 8001e32:	f004 fc73 	bl	800671c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001e3c:	4821      	ldr	r0, [pc, #132]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e3e:	f004 fc6d 	bl	800671c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e48:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	481a      	ldr	r0, [pc, #104]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e5a:	f004 fac3 	bl	80063e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4814      	ldr	r0, [pc, #80]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001e72:	f004 fab7 	bl	80063e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_SD_Pin;
 8001e76:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <MX_GPIO_Init+0x11c>)
 8001e90:	f004 faa8 	bl	80063e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e94:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001e98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_GPIO_Init+0x120>)
 8001eae:	f004 fa99 	bl	80063e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020800 	.word	0x40020800

08001ec8 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	while(1);
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <idle_task+0x8>

08001ed4 <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8001edc:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <HAL_ADC_ConvCpltCallback+0x24>)
 8001ede:	f006 febb 	bl	8008c58 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8001ee2:	4806      	ldr	r0, [pc, #24]	@ (8001efc <HAL_ADC_ConvCpltCallback+0x28>)
 8001ee4:	f003 fa9a 	bl	800541c <HAL_ADC_Stop_DMA>
	conv_cplt_flag = true;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000086c 	.word	0x2000086c
 8001efc:	200006f8 	.word	0x200006f8
 8001f00:	20000910 	.word	0x20000910

08001f04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f16:	f002 fff9 	bl	8004f0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f26:	b672      	cpsid	i
}
 8001f28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f2a:	bf00      	nop
 8001f2c:	e7fd      	b.n	8001f2a <Error_Handler+0x8>
	...

08001f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <HAL_MspInit+0x54>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	4a11      	ldr	r2, [pc, #68]	@ (8001f84 <HAL_MspInit+0x54>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <HAL_MspInit+0x54>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_MspInit+0x54>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <HAL_MspInit+0x54>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f62:	4b08      	ldr	r3, [pc, #32]	@ (8001f84 <HAL_MspInit+0x54>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	210f      	movs	r1, #15
 8001f72:	f06f 0001 	mvn.w	r0, #1
 8001f76:	f003 fe2b 	bl	8005bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800

08001f88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a32      	ldr	r2, [pc, #200]	@ (8002070 <HAL_ADC_MspInit+0xe8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d15e      	bne.n	8002068 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_ADC_MspInit+0xec>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	4a30      	ldr	r2, [pc, #192]	@ (8002074 <HAL_ADC_MspInit+0xec>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fba:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <HAL_ADC_MspInit+0xec>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <HAL_ADC_MspInit+0xec>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a29      	ldr	r2, [pc, #164]	@ (8002074 <HAL_ADC_MspInit+0xec>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <HAL_ADC_MspInit+0xec>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4820      	ldr	r0, [pc, #128]	@ (8002078 <HAL_ADC_MspInit+0xf0>)
 8001ff6:	f004 f9f5 	bl	80063e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8001ffc:	4a20      	ldr	r2, [pc, #128]	@ (8002080 <HAL_ADC_MspInit+0xf8>)
 8001ffe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002000:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8002002:	2200      	movs	r2, #0
 8002004:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002006:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800200c:	4b1b      	ldr	r3, [pc, #108]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8002014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002018:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 800201c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002020:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8002024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002028:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8002038:	2200      	movs	r2, #0
 800203a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800203c:	480f      	ldr	r0, [pc, #60]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 800203e:	f003 fdf1 	bl	8005c24 <HAL_DMA_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002048:	f7ff ff6b 	bl	8001f22 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a0b      	ldr	r2, [pc, #44]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8002050:	639a      	str	r2, [r3, #56]	@ 0x38
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <HAL_ADC_MspInit+0xf4>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2105      	movs	r1, #5
 800205c:	2012      	movs	r0, #18
 800205e:	f003 fdb7 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002062:	2012      	movs	r0, #18
 8002064:	f003 fdd0 	bl	8005c08 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	@ 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40012000 	.word	0x40012000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	20000740 	.word	0x20000740
 8002080:	40026410 	.word	0x40026410

08002084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a19      	ldr	r2, [pc, #100]	@ (8002108 <HAL_I2C_MspInit+0x84>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d12b      	bne.n	80020fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <HAL_I2C_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	4a17      	ldr	r2, [pc, #92]	@ (800210c <HAL_I2C_MspInit+0x88>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020b6:	4b15      	ldr	r3, [pc, #84]	@ (800210c <HAL_I2C_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c2:	23c0      	movs	r3, #192	@ 0xc0
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c6:	2312      	movs	r3, #18
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d2:	2304      	movs	r3, #4
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <HAL_I2C_MspInit+0x8c>)
 80020de:	f004 f981 	bl	80063e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b09      	ldr	r3, [pc, #36]	@ (800210c <HAL_I2C_MspInit+0x88>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	4a08      	ldr	r2, [pc, #32]	@ (800210c <HAL_I2C_MspInit+0x88>)
 80020ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_I2C_MspInit+0x88>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	@ 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40005400 	.word	0x40005400
 800210c:	40023800 	.word	0x40023800
 8002110:	40020400 	.word	0x40020400

08002114 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0c      	ldr	r2, [pc, #48]	@ (8002164 <HAL_RTC_MspInit+0x50>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d111      	bne.n	800215a <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002136:	2302      	movs	r3, #2
 8002138:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800213a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800213e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	4618      	mov	r0, r3
 8002146:	f005 fc7b 	bl	8007a40 <HAL_RCCEx_PeriphCLKConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002150:	f7ff fee7 	bl	8001f22 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <HAL_RTC_MspInit+0x54>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40002800 	.word	0x40002800
 8002168:	42470e3c 	.word	0x42470e3c

0800216c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	@ 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a22      	ldr	r2, [pc, #136]	@ (8002214 <HAL_SPI_MspInit+0xa8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d13d      	bne.n	800220a <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_SPI_MspInit+0xac>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	4a20      	ldr	r2, [pc, #128]	@ (8002218 <HAL_SPI_MspInit+0xac>)
 8002198:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800219c:	6413      	str	r3, [r2, #64]	@ 0x40
 800219e:	4b1e      	ldr	r3, [pc, #120]	@ (8002218 <HAL_SPI_MspInit+0xac>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_SPI_MspInit+0xac>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	4a19      	ldr	r2, [pc, #100]	@ (8002218 <HAL_SPI_MspInit+0xac>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ba:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <HAL_SPI_MspInit+0xac>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021d8:	2306      	movs	r3, #6
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	480e      	ldr	r0, [pc, #56]	@ (800221c <HAL_SPI_MspInit+0xb0>)
 80021e4:	f004 f8fe 	bl	80063e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021e8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021fa:	2306      	movs	r3, #6
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	@ (800221c <HAL_SPI_MspInit+0xb0>)
 8002206:	f004 f8ed 	bl	80063e4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	@ 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40003c00 	.word	0x40003c00
 8002218:	40023800 	.word	0x40023800
 800221c:	40020800 	.word	0x40020800

08002220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a0e      	ldr	r2, [pc, #56]	@ (8002268 <HAL_TIM_Base_MspInit+0x48>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d115      	bne.n	800225e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <HAL_TIM_Base_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a0c      	ldr	r2, [pc, #48]	@ (800226c <HAL_TIM_Base_MspInit+0x4c>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_TIM_Base_MspInit+0x4c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2105      	movs	r1, #5
 8002252:	201d      	movs	r0, #29
 8002254:	f003 fcbc 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002258:	201d      	movs	r0, #29
 800225a:	f003 fcd5 	bl	8005c08 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40000400 	.word	0x40000400
 800226c:	40023800 	.word	0x40023800

08002270 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	@ (80022f4 <HAL_UART_MspInit+0x84>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d12b      	bne.n	80022ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b18      	ldr	r3, [pc, #96]	@ (80022f8 <HAL_UART_MspInit+0x88>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <HAL_UART_MspInit+0x88>)
 800229c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_UART_MspInit+0x88>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b11      	ldr	r3, [pc, #68]	@ (80022f8 <HAL_UART_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a10      	ldr	r2, [pc, #64]	@ (80022f8 <HAL_UART_MspInit+0x88>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_UART_MspInit+0x88>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022ca:	230c      	movs	r3, #12
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022da:	2307      	movs	r3, #7
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	@ (80022fc <HAL_UART_MspInit+0x8c>)
 80022e6:	f004 f87d 	bl	80063e4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80022ea:	bf00      	nop
 80022ec:	3728      	adds	r7, #40	@ 0x28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40004400 	.word	0x40004400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000

08002300 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08e      	sub	sp, #56	@ 0x38
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	4b34      	ldr	r3, [pc, #208]	@ (80023e8 <HAL_InitTick+0xe8>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	4a33      	ldr	r2, [pc, #204]	@ (80023e8 <HAL_InitTick+0xe8>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002320:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <HAL_InitTick+0xe8>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800232c:	f107 0210 	add.w	r2, r7, #16
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f005 fb50 	bl	80079dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d103      	bne.n	800234e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002346:	f005 fb21 	bl	800798c <HAL_RCC_GetPCLK1Freq>
 800234a:	6378      	str	r0, [r7, #52]	@ 0x34
 800234c:	e004      	b.n	8002358 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800234e:	f005 fb1d 	bl	800798c <HAL_RCC_GetPCLK1Freq>
 8002352:	4603      	mov	r3, r0
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235a:	4a24      	ldr	r2, [pc, #144]	@ (80023ec <HAL_InitTick+0xec>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	3b01      	subs	r3, #1
 8002364:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002366:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <HAL_InitTick+0xf0>)
 8002368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800236c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <HAL_InitTick+0xf0>)
 8002370:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002374:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002376:	4a1e      	ldr	r2, [pc, #120]	@ (80023f0 <HAL_InitTick+0xf0>)
 8002378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <HAL_InitTick+0xf0>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002382:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <HAL_InitTick+0xf0>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002388:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <HAL_InitTick+0xf0>)
 800238a:	2200      	movs	r2, #0
 800238c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800238e:	4818      	ldr	r0, [pc, #96]	@ (80023f0 <HAL_InitTick+0xf0>)
 8002390:	f006 fbb0 	bl	8008af4 <HAL_TIM_Base_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800239a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11b      	bne.n	80023da <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80023a2:	4813      	ldr	r0, [pc, #76]	@ (80023f0 <HAL_InitTick+0xf0>)
 80023a4:	f006 fbf6 	bl	8008b94 <HAL_TIM_Base_Start_IT>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d111      	bne.n	80023da <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023b6:	201c      	movs	r0, #28
 80023b8:	f003 fc26 	bl	8005c08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	d808      	bhi.n	80023d4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80023c2:	2200      	movs	r2, #0
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	201c      	movs	r0, #28
 80023c8:	f003 fc02 	bl	8005bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023cc:	4a09      	ldr	r2, [pc, #36]	@ (80023f4 <HAL_InitTick+0xf4>)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e002      	b.n	80023da <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3738      	adds	r7, #56	@ 0x38
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	431bde83 	.word	0x431bde83
 80023f0:	20000914 	.word	0x20000914
 80023f4:	20000658 	.word	0x20000658

080023f8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80023fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002438 <SDTimer_Handler+0x40>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <SDTimer_Handler+0x1c>
    Timer1--;
 8002406:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <SDTimer_Handler+0x40>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <SDTimer_Handler+0x40>)
 8002412:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <SDTimer_Handler+0x44>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <SDTimer_Handler+0x34>
    Timer2--;
 800241e:	4b07      	ldr	r3, [pc, #28]	@ (800243c <SDTimer_Handler+0x44>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b04      	ldr	r3, [pc, #16]	@ (800243c <SDTimer_Handler+0x44>)
 800242a:	701a      	strb	r2, [r3, #0]
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	2000095d 	.word	0x2000095d
 800243c:	2000095e 	.word	0x2000095e

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <NMI_Handler+0x4>

08002448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <MemManage_Handler+0x4>

08002458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <UsageFault_Handler+0x4>

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <ADC_IRQHandler+0x10>)
 800247e:	f002 fdcc 	bl	800501a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200006f8 	.word	0x200006f8

0800248c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8002490:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <TIM2_IRQHandler+0x30>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	3301      	adds	r3, #1
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <TIM2_IRQHandler+0x30>)
 800249c:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 800249e:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <TIM2_IRQHandler+0x30>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	d904      	bls.n	80024b2 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <TIM2_IRQHandler+0x30>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 80024ae:	f7ff ffa3 	bl	80023f8 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024b2:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <TIM2_IRQHandler+0x34>)
 80024b4:	f006 fbff 	bl	8008cb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	2000095c 	.word	0x2000095c
 80024c0:	20000914 	.word	0x20000914

080024c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024c8:	4802      	ldr	r0, [pc, #8]	@ (80024d4 <TIM3_IRQHandler+0x10>)
 80024ca:	f006 fbf4 	bl	8008cb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000086c 	.word	0x2000086c

080024d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024dc:	4802      	ldr	r0, [pc, #8]	@ (80024e8 <DMA2_Stream0_IRQHandler+0x10>)
 80024de:	f003 fd17 	bl	8005f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000740 	.word	0x20000740

080024ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return 1;
 80024f0:	2301      	movs	r3, #1
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_kill>:

int _kill(int pid, int sig)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002506:	f011 fc63 	bl	8013dd0 <__errno>
 800250a:	4603      	mov	r3, r0
 800250c:	2216      	movs	r2, #22
 800250e:	601a      	str	r2, [r3, #0]
  return -1;
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_exit>:

void _exit (int status)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ffe7 	bl	80024fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800252e:	bf00      	nop
 8002530:	e7fd      	b.n	800252e <_exit+0x12>

08002532 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e00a      	b.n	800255a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002544:	f3af 8000 	nop.w
 8002548:	4601      	mov	r1, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	60ba      	str	r2, [r7, #8]
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	429a      	cmp	r2, r3
 8002560:	dbf0      	blt.n	8002544 <_read+0x12>
  }

  return len;
 8002562:	687b      	ldr	r3, [r7, #4]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e009      	b.n	8002592 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	60ba      	str	r2, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	dbf1      	blt.n	800257e <_write+0x12>
  }
  return len;
 800259a:	687b      	ldr	r3, [r7, #4]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <_close>:

int _close(int file)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025cc:	605a      	str	r2, [r3, #4]
  return 0;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <_isatty>:

int _isatty(int file)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002614:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <_sbrk+0x5c>)
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <_sbrk+0x60>)
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002620:	4b13      	ldr	r3, [pc, #76]	@ (8002670 <_sbrk+0x64>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <_sbrk+0x64>)
 800262a:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <_sbrk+0x68>)
 800262c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	429a      	cmp	r2, r3
 800263a:	d207      	bcs.n	800264c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800263c:	f011 fbc8 	bl	8013dd0 <__errno>
 8002640:	4603      	mov	r3, r0
 8002642:	220c      	movs	r2, #12
 8002644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
 800264a:	e009      	b.n	8002660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800264c:	4b08      	ldr	r3, [pc, #32]	@ (8002670 <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002652:	4b07      	ldr	r3, [pc, #28]	@ (8002670 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	4a05      	ldr	r2, [pc, #20]	@ (8002670 <_sbrk+0x64>)
 800265c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20018000 	.word	0x20018000
 800266c:	00000800 	.word	0x00000800
 8002670:	20000960 	.word	0x20000960
 8002674:	20013818 	.word	0x20013818

08002678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <SystemInit+0x20>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002682:	4a05      	ldr	r2, [pc, #20]	@ (8002698 <SystemInit+0x20>)
 8002684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 800269c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026a0:	f7ff ffea 	bl	8002678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a4:	480c      	ldr	r0, [pc, #48]	@ (80026d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026a6:	490d      	ldr	r1, [pc, #52]	@ (80026dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026bc:	4c0a      	ldr	r4, [pc, #40]	@ (80026e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80026ca:	f011 fb87 	bl	8013ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ce:	f7ff f8bd 	bl	800184c <main>
  bx  lr    
 80026d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	200006d4 	.word	0x200006d4
  ldr r2, =_sidata
 80026e0:	0802cd30 	.word	0x0802cd30
  ldr r2, =_sbss
 80026e4:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 80026e8:	20013814 	.word	0x20013814

080026ec <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <DMA1_Stream0_IRQHandler>

080026ee <display_init>:

#define LINE_HEIGHT 18  // Altura de la fuente (ajustar según la fuente usada)
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 64
/*================[Public functions]=====================*/
void display_init(void){
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80026f2:	f000 fa53 	bl	8002b9c <ssd1306_Init>
	return;
 80026f6:	bf00      	nop
}
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <display_text>:

void display_text(const char *text,  uint8_t font_size) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af02      	add	r7, sp, #8
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	70fb      	strb	r3, [r7, #3]
    uint8_t x = 0;  			// Posición inicial en X
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;  			// Posición inicial en Y
 800270c:	2300      	movs	r3, #0
 800270e:	73bb      	strb	r3, [r7, #14]
    uint8_t char_width = 0;   	// Ancho del carácter actual
 8002710:	2300      	movs	r3, #0
 8002712:	737b      	strb	r3, [r7, #13]
    uint8_t line_height = 0;  	// Altura de la línea actual
 8002714:	2300      	movs	r3, #0
 8002716:	733b      	strb	r3, [r7, #12]
    // Configurar la fuente según el tamaño
    switch (font_size) {
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	2b03      	cmp	r3, #3
 800271c:	d010      	beq.n	8002740 <display_text+0x44>
 800271e:	2b03      	cmp	r3, #3
 8002720:	dc13      	bgt.n	800274a <display_text+0x4e>
 8002722:	2b01      	cmp	r3, #1
 8002724:	d002      	beq.n	800272c <display_text+0x30>
 8002726:	2b02      	cmp	r3, #2
 8002728:	d005      	beq.n	8002736 <display_text+0x3a>
 800272a:	e00e      	b.n	800274a <display_text+0x4e>
        case 1: 									// Tamaño pequeño
            char_width = 7;
 800272c:	2307      	movs	r3, #7
 800272e:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8002730:	230a      	movs	r3, #10
 8002732:	733b      	strb	r3, [r7, #12]
            break;
 8002734:	e00e      	b.n	8002754 <display_text+0x58>
        case 2: 									// Tamaño mediano
            char_width = 11;
 8002736:	230b      	movs	r3, #11
 8002738:	737b      	strb	r3, [r7, #13]
            line_height = 18;
 800273a:	2312      	movs	r3, #18
 800273c:	733b      	strb	r3, [r7, #12]
            break;
 800273e:	e009      	b.n	8002754 <display_text+0x58>
        case 3: 									// Tamaño grande
            char_width = 16;
 8002740:	2310      	movs	r3, #16
 8002742:	737b      	strb	r3, [r7, #13]
            line_height = 24;
 8002744:	2318      	movs	r3, #24
 8002746:	733b      	strb	r3, [r7, #12]
            break;
 8002748:	e004      	b.n	8002754 <display_text+0x58>
        default: 									// Tamaño por defecto
            char_width = 7;
 800274a:	2307      	movs	r3, #7
 800274c:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 800274e:	230a      	movs	r3, #10
 8002750:	733b      	strb	r3, [r7, #12]
            break;
 8002752:	bf00      	nop
    }

    ssd1306_Fill(Black);  // Limpiar la pantalla
 8002754:	2000      	movs	r0, #0
 8002756:	f000 fa8b 	bl	8002c70 <ssd1306_Fill>

    while (*text) {
 800275a:	e053      	b.n	8002804 <display_text+0x108>
        // Verificar si es un salto de línea manual
        if (*text == '\n') {
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b0a      	cmp	r3, #10
 8002762:	d106      	bne.n	8002772 <display_text+0x76>
            y += line_height;  											// Avanzo a la siguiente linea
 8002764:	7bba      	ldrb	r2, [r7, #14]
 8002766:	7b3b      	ldrb	r3, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	73bb      	strb	r3, [r7, #14]
            x = 0;             											// Reinicio x
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e040      	b.n	80027f4 <display_text+0xf8>
        } else {
            // Escribir el carácter actual
            ssd1306_SetCursor(x, y);
 8002772:	7bba      	ldrb	r2, [r7, #14]
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fbc3 	bl	8002f04 <ssd1306_SetCursor>
            if(font_size == 1){
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <display_text+0x9a>
            	ssd1306_WriteChar(*text, Font_7x10, White);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7818      	ldrb	r0, [r3, #0]
 8002788:	4b24      	ldr	r3, [pc, #144]	@ (800281c <display_text+0x120>)
 800278a:	2201      	movs	r2, #1
 800278c:	9200      	str	r2, [sp, #0]
 800278e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002790:	f000 fb02 	bl	8002d98 <ssd1306_WriteChar>
 8002794:	e01f      	b.n	80027d6 <display_text+0xda>
            }
            else if(font_size == 2){
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d108      	bne.n	80027ae <display_text+0xb2>
            	ssd1306_WriteChar(*text, Font_11x18, White);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7818      	ldrb	r0, [r3, #0]
 80027a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <display_text+0x124>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	9200      	str	r2, [sp, #0]
 80027a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a8:	f000 faf6 	bl	8002d98 <ssd1306_WriteChar>
 80027ac:	e013      	b.n	80027d6 <display_text+0xda>
            }
            else if(font_size == 3){
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d108      	bne.n	80027c6 <display_text+0xca>
            	ssd1306_WriteChar(*text, Font_16x24, White);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7818      	ldrb	r0, [r3, #0]
 80027b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <display_text+0x128>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	9200      	str	r2, [sp, #0]
 80027be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c0:	f000 faea 	bl	8002d98 <ssd1306_WriteChar>
 80027c4:	e007      	b.n	80027d6 <display_text+0xda>
            }
            else{
            	ssd1306_WriteChar(*text, Font_7x10, White);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7818      	ldrb	r0, [r3, #0]
 80027ca:	4b14      	ldr	r3, [pc, #80]	@ (800281c <display_text+0x120>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	9200      	str	r2, [sp, #0]
 80027d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d2:	f000 fae1 	bl	8002d98 <ssd1306_WriteChar>
            }

            // Avanzar la posición X
            x += char_width;  // Avanzar por el ancho de la fuente
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	7b7b      	ldrb	r3, [r7, #13]
 80027da:	4413      	add	r3, r2
 80027dc:	73fb      	strb	r3, [r7, #15]
            if (x + char_width > DISPLAY_WIDTH) {  							// Si se pasa del ancho de pantalla
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	7b7b      	ldrb	r3, [r7, #13]
 80027e2:	4413      	add	r3, r2
 80027e4:	2b80      	cmp	r3, #128	@ 0x80
 80027e6:	dd05      	ble.n	80027f4 <display_text+0xf8>
                x = 0;                      								// Reinicio x
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
                y += line_height;           								// Avanzo a la siguiente linea
 80027ec:	7bba      	ldrb	r2, [r7, #14]
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	4413      	add	r3, r2
 80027f2:	73bb      	strb	r3, [r7, #14]
            }
        }

        // Avanzar al siguiente carácter
        text++;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3301      	adds	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]

        // Verificar si alcanzamos el final de la pantalla
        if (y + line_height > DISPLAY_HEIGHT) {
 80027fa:	7bba      	ldrb	r2, [r7, #14]
 80027fc:	7b3b      	ldrb	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	2b40      	cmp	r3, #64	@ 0x40
 8002802:	dc04      	bgt.n	800280e <display_text+0x112>
    while (*text) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1a7      	bne.n	800275c <display_text+0x60>
 800280c:	e000      	b.n	8002810 <display_text+0x114>
            break;  // No hay más espacio para mostrar texto
 800280e:	bf00      	nop
        }
    }

    ssd1306_UpdateScreen();  // Actualizar pantalla
 8002810:	f000 fa46 	bl	8002ca0 <ssd1306_UpdateScreen>
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	08018b5c 	.word	0x08018b5c
 8002820:	08018b68 	.word	0x08018b68
 8002824:	08018b80 	.word	0x08018b80

08002828 <display_start_msg>:

void display_start_msg(void){
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 800282e:	2305      	movs	r3, #5
 8002830:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8002836:	2000      	movs	r0, #0
 8002838:	f000 fa1a 	bl	8002c70 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 800283c:	79ba      	ldrb	r2, [r7, #6]
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fb5e 	bl	8002f04 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <display_start_msg+0x60>)
 800284a:	2201      	movs	r2, #1
 800284c:	9200      	str	r2, [sp, #0]
 800284e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002850:	480e      	ldr	r0, [pc, #56]	@ (800288c <display_start_msg+0x64>)
 8002852:	f000 fb31 	bl	8002eb8 <ssd1306_WriteString>
	x += 15;
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	330f      	adds	r3, #15
 800285a:	71fb      	strb	r3, [r7, #7]
	y += 28;
 800285c:	79bb      	ldrb	r3, [r7, #6]
 800285e:	331c      	adds	r3, #28
 8002860:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002862:	79ba      	ldrb	r2, [r7, #6]
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fb4b 	bl	8002f04 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <display_start_msg+0x60>)
 8002870:	2201      	movs	r2, #1
 8002872:	9200      	str	r2, [sp, #0]
 8002874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <display_start_msg+0x68>)
 8002878:	f000 fb1e 	bl	8002eb8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800287c:	f000 fa10 	bl	8002ca0 <ssd1306_UpdateScreen>
	return;
 8002880:	bf00      	nop
}
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	08018b74 	.word	0x08018b74
 800288c:	08014e40 	.word	0x08014e40
 8002890:	08014e48 	.word	0x08014e48

08002894 <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af02      	add	r7, sp, #8
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[SEQUENCE_LENGTH + 1] = {0};
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	f107 0310 	add.w	r3, r7, #16
 80028a6:	2100      	movs	r1, #0
 80028a8:	460a      	mov	r2, r1
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	460a      	mov	r2, r1
 80028ae:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 80028b0:	230a      	movs	r3, #10
 80028b2:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 80028b4:	231a      	movs	r3, #26
 80028b6:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= SEQUENCE_LENGTH){
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d823      	bhi.n	8002906 <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]
 80028c2:	e008      	b.n	80028d6 <display_sequence_entry_msg+0x42>
			message[i] = '*';
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	3318      	adds	r3, #24
 80028c8:	443b      	add	r3, r7
 80028ca:	222a      	movs	r2, #42	@ 0x2a
 80028cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	3301      	adds	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
 80028d6:	7dfa      	ldrb	r2, [r7, #23]
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d3f2      	bcc.n	80028c4 <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f9c6 	bl	8002c70 <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 80028e4:	7d7a      	ldrb	r2, [r7, #21]
 80028e6:	7dbb      	ldrb	r3, [r7, #22]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fb0a 	bl	8002f04 <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 80028f0:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <display_sequence_entry_msg+0x7c>)
 80028f2:	f107 000c 	add.w	r0, r7, #12
 80028f6:	2201      	movs	r2, #1
 80028f8:	9200      	str	r2, [sp, #0]
 80028fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028fc:	f000 fadc 	bl	8002eb8 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002900:	f000 f9ce 	bl	8002ca0 <ssd1306_UpdateScreen>
	}
	return;
 8002904:	bf00      	nop
 8002906:	bf00      	nop
}
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	08018b74 	.word	0x08018b74

08002914 <display_timeout_msg>:


void display_timeout_msg(void){
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
	display_text("\n Timeout!!!", 2);
 8002918:	2102      	movs	r1, #2
 800291a:	4802      	ldr	r0, [pc, #8]	@ (8002924 <display_timeout_msg+0x10>)
 800291c:	f7ff feee 	bl	80026fc <display_text>
	return;
 8002920:	bf00      	nop
}
 8002922:	bd80      	pop	{r7, pc}
 8002924:	08014e50 	.word	0x08014e50

08002928 <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
	display_text("  Ingrese\n secuencia\n  valida", 2);
 800292c:	2102      	movs	r1, #2
 800292e:	4802      	ldr	r0, [pc, #8]	@ (8002938 <display_incomplete_entry_msg+0x10>)
 8002930:	f7ff fee4 	bl	80026fc <display_text>
	return;
 8002934:	bf00      	nop
}
 8002936:	bd80      	pop	{r7, pc}
 8002938:	08014e60 	.word	0x08014e60

0800293c <display_access_granted_msg>:

void display_access_granted_msg(void){
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	display_text("  Acceso\n concedido", 2);
 8002940:	2102      	movs	r1, #2
 8002942:	4802      	ldr	r0, [pc, #8]	@ (800294c <display_access_granted_msg+0x10>)
 8002944:	f7ff feda 	bl	80026fc <display_text>
	return;
 8002948:	bf00      	nop
}
 800294a:	bd80      	pop	{r7, pc}
 800294c:	08014e80 	.word	0x08014e80

08002950 <display_access_denied_msg>:

void display_access_denied_msg(void){
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	display_text("  Acceso\n denegado", 2);
 8002954:	2102      	movs	r1, #2
 8002956:	4802      	ldr	r0, [pc, #8]	@ (8002960 <display_access_denied_msg+0x10>)
 8002958:	f7ff fed0 	bl	80026fc <display_text>
	return;
 800295c:	bf00      	nop
}
 800295e:	bd80      	pop	{r7, pc}
 8002960:	08014e94 	.word	0x08014e94

08002964 <display_user_found_msg>:

void display_user_found_msg(void){
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	display_text("  Usuario\n  hallado", 2);
 8002968:	2102      	movs	r1, #2
 800296a:	4802      	ldr	r0, [pc, #8]	@ (8002974 <display_user_found_msg+0x10>)
 800296c:	f7ff fec6 	bl	80026fc <display_text>
	return;
 8002970:	bf00      	nop
}
 8002972:	bd80      	pop	{r7, pc}
 8002974:	08014ea8 	.word	0x08014ea8

08002978 <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	display_text("  Usuario\n    no\n  existe", 2);
 800297c:	2102      	movs	r1, #2
 800297e:	4802      	ldr	r0, [pc, #8]	@ (8002988 <display_user_not_found_msg+0x10>)
 8002980:	f7ff febc 	bl	80026fc <display_text>
	return;
 8002984:	bf00      	nop
}
 8002986:	bd80      	pop	{r7, pc}
 8002988:	08014ebc 	.word	0x08014ebc

0800298c <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
	display_text("  Comienza\n  captura\n  de voz", 2);
 8002990:	2102      	movs	r1, #2
 8002992:	4802      	ldr	r0, [pc, #8]	@ (800299c <display_start_voice_recognition_msg+0x10>)
 8002994:	f7ff feb2 	bl	80026fc <display_text>
	return;
 8002998:	bf00      	nop
}
 800299a:	bd80      	pop	{r7, pc}
 800299c:	08014ed8 	.word	0x08014ed8

080029a0 <countdown_msg>:

void countdown_msg(void){
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 80029a6:	2332      	movs	r3, #50	@ 0x32
 80029a8:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 80029aa:	231a      	movs	r3, #26
 80029ac:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f000 f95e 	bl	8002c70 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80029b4:	79ba      	ldrb	r2, [r7, #6]
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 faa2 	bl	8002f04 <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 80029c0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a3c <countdown_msg+0x9c>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	9200      	str	r2, [sp, #0]
 80029c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c8:	481d      	ldr	r0, [pc, #116]	@ (8002a40 <countdown_msg+0xa0>)
 80029ca:	f000 fa75 	bl	8002eb8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80029ce:	f000 f967 	bl	8002ca0 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80029d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029d6:	f00e f839 	bl	8010a4c <vTaskDelay>
	ssd1306_Fill(Black);
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f948 	bl	8002c70 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80029e0:	79ba      	ldrb	r2, [r7, #6]
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fa8c 	bl	8002f04 <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <countdown_msg+0x9c>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	9200      	str	r2, [sp, #0]
 80029f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f4:	4813      	ldr	r0, [pc, #76]	@ (8002a44 <countdown_msg+0xa4>)
 80029f6:	f000 fa5f 	bl	8002eb8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80029fa:	f000 f951 	bl	8002ca0 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80029fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a02:	f00e f823 	bl	8010a4c <vTaskDelay>
	ssd1306_Fill(Black);
 8002a06:	2000      	movs	r0, #0
 8002a08:	f000 f932 	bl	8002c70 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002a0c:	79ba      	ldrb	r2, [r7, #6]
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fa76 	bl	8002f04 <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <countdown_msg+0x9c>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	9200      	str	r2, [sp, #0]
 8002a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a20:	4809      	ldr	r0, [pc, #36]	@ (8002a48 <countdown_msg+0xa8>)
 8002a22:	f000 fa49 	bl	8002eb8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002a26:	f000 f93b 	bl	8002ca0 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002a2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a2e:	f00e f80d 	bl	8010a4c <vTaskDelay>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	08018b74 	.word	0x08018b74
 8002a40:	08014ef8 	.word	0x08014ef8
 8002a44:	08014efc 	.word	0x08014efc
 8002a48:	08014f00 	.word	0x08014f00

08002a4c <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	display_text("  Captura\n    ...", 2);
 8002a50:	2102      	movs	r1, #2
 8002a52:	4802      	ldr	r0, [pc, #8]	@ (8002a5c <display_capturing_voice_msg+0x10>)
 8002a54:	f7ff fe52 	bl	80026fc <display_text>
	return;
 8002a58:	bf00      	nop
}
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	08014f04 	.word	0x08014f04

08002a60 <display_processing_data_msg>:
void display_not_recognized_voice_msg(void){
	display_text("   Voz no\n reconocida", 2);
	return;
}

void display_processing_data_msg(void){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	display_text("  Aguarde\n    ...", 2);
 8002a64:	2102      	movs	r1, #2
 8002a66:	4802      	ldr	r0, [pc, #8]	@ (8002a70 <display_processing_data_msg+0x10>)
 8002a68:	f7ff fe48 	bl	80026fc <display_text>
	return;
 8002a6c:	bf00      	nop
}
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	08014f44 	.word	0x08014f44

08002a74 <display_missing_database_msg>:

void display_missing_database_msg(void){
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	display_text("  Database\n  faltante", 2);
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <display_missing_database_msg+0x10>)
 8002a7c:	f7ff fe3e 	bl	80026fc <display_text>
	return;
 8002a80:	bf00      	nop
}
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	08014f58 	.word	0x08014f58

08002a88 <display_missing_template_msg>:

void display_missing_template_msg(void){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	display_text("  Template\n  faltante", 2);
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <display_missing_template_msg+0x10>)
 8002a90:	f7ff fe34 	bl	80026fc <display_text>
	return;
 8002a94:	bf00      	nop
}
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	08014f70 	.word	0x08014f70

08002a9c <display_template_saved_msg>:

void display_template_saved_msg(void){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	display_text("  Template\n  guardado", 2);
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	4802      	ldr	r0, [pc, #8]	@ (8002aac <display_template_saved_msg+0x10>)
 8002aa4:	f7ff fe2a 	bl	80026fc <display_text>
	return;
 8002aa8:	bf00      	nop
}
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	08014f88 	.word	0x08014f88

08002ab0 <display_template_not_created_msg>:

void display_template_not_created_msg(void){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
	display_text("  Template\n  Fallo", 2);
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <display_template_not_created_msg+0x10>)
 8002ab8:	f7ff fe20 	bl	80026fc <display_text>
	return;
 8002abc:	bf00      	nop
}
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	08014fa0 	.word	0x08014fa0

08002ac4 <display_mounting_error_msg>:

void display_mounting_error_msg(void){
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	display_text("  Mounting\n  Error", 2);
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <display_mounting_error_msg+0x10>)
 8002acc:	f7ff fe16 	bl	80026fc <display_text>
	return;
 8002ad0:	bf00      	nop
}
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	08014fb4 	.word	0x08014fb4

08002ad8 <display_register_not_created_msg>:

void display_register_not_created_msg(void){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	display_text("  Registro\n  Fallo", 2);
 8002adc:	2102      	movs	r1, #2
 8002ade:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <display_register_not_created_msg+0x10>)
 8002ae0:	f7ff fe0c 	bl	80026fc <display_text>
	return;
 8002ae4:	bf00      	nop
}
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	08014fc8 	.word	0x08014fc8

08002aec <display_memory_error_msg>:

void display_memory_error_msg(void){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
	display_text("  Error\n  Malloc", 2);
 8002af0:	2102      	movs	r1, #2
 8002af2:	4802      	ldr	r0, [pc, #8]	@ (8002afc <display_memory_error_msg+0x10>)
 8002af4:	f7ff fe02 	bl	80026fc <display_text>
	return;
 8002af8:	bf00      	nop
}
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	08014fdc 	.word	0x08014fdc

08002b00 <display_read_sd_error_msg>:

void display_read_sd_error_msg(void){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	display_text("  Error\n Read SD", 2);
 8002b04:	2102      	movs	r1, #2
 8002b06:	4802      	ldr	r0, [pc, #8]	@ (8002b10 <display_read_sd_error_msg+0x10>)
 8002b08:	f7ff fdf8 	bl	80026fc <display_text>
	return;
 8002b0c:	bf00      	nop
}
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	08014ff0 	.word	0x08014ff0

08002b14 <display_write_sd_error_msg>:

void display_write_sd_error_msg(void){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
	display_text("  Error\n Write SD", 2);
 8002b18:	2102      	movs	r1, #2
 8002b1a:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <display_write_sd_error_msg+0x10>)
 8002b1c:	f7ff fdee 	bl	80026fc <display_text>
	return;
 8002b20:	bf00      	nop
}
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	08015004 	.word	0x08015004

08002b28 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af04      	add	r7, sp, #16
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295
 8002b46:	9302      	str	r3, [sp, #8]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	1dfb      	adds	r3, r7, #7
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2301      	movs	r3, #1
 8002b52:	2200      	movs	r2, #0
 8002b54:	2178      	movs	r1, #120	@ 0x78
 8002b56:	4803      	ldr	r0, [pc, #12]	@ (8002b64 <ssd1306_WriteCommand+0x2c>)
 8002b58:	f003 ff3e 	bl	80069d8 <HAL_I2C_Mem_Write>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200007a0 	.word	0x200007a0

08002b68 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af04      	add	r7, sp, #16
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7a:	9202      	str	r2, [sp, #8]
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2301      	movs	r3, #1
 8002b84:	2240      	movs	r2, #64	@ 0x40
 8002b86:	2178      	movs	r1, #120	@ 0x78
 8002b88:	4803      	ldr	r0, [pc, #12]	@ (8002b98 <ssd1306_WriteData+0x30>)
 8002b8a:	f003 ff25 	bl	80069d8 <HAL_I2C_Mem_Write>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200007a0 	.word	0x200007a0

08002b9c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002ba0:	f7ff ffc2 	bl	8002b28 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8002ba4:	2064      	movs	r0, #100	@ 0x64
 8002ba6:	f00d ff51 	bl	8010a4c <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002baa:	2000      	movs	r0, #0
 8002bac:	f000 f9d6 	bl	8002f5c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002bb0:	2020      	movs	r0, #32
 8002bb2:	f7ff ffc1 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7ff ffbe 	bl	8002b38 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002bbc:	20b0      	movs	r0, #176	@ 0xb0
 8002bbe:	f7ff ffbb 	bl	8002b38 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002bc2:	20c8      	movs	r0, #200	@ 0xc8
 8002bc4:	f7ff ffb8 	bl	8002b38 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7ff ffb5 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002bce:	2010      	movs	r0, #16
 8002bd0:	f7ff ffb2 	bl	8002b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002bd4:	2040      	movs	r0, #64	@ 0x40
 8002bd6:	f7ff ffaf 	bl	8002b38 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002bda:	20ff      	movs	r0, #255	@ 0xff
 8002bdc:	f000 f9aa 	bl	8002f34 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002be0:	20a1      	movs	r0, #161	@ 0xa1
 8002be2:	f7ff ffa9 	bl	8002b38 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002be6:	20a6      	movs	r0, #166	@ 0xa6
 8002be8:	f7ff ffa6 	bl	8002b38 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002bec:	20a8      	movs	r0, #168	@ 0xa8
 8002bee:	f7ff ffa3 	bl	8002b38 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002bf2:	203f      	movs	r0, #63	@ 0x3f
 8002bf4:	f7ff ffa0 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002bf8:	20a4      	movs	r0, #164	@ 0xa4
 8002bfa:	f7ff ff9d 	bl	8002b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002bfe:	20d3      	movs	r0, #211	@ 0xd3
 8002c00:	f7ff ff9a 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7ff ff97 	bl	8002b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002c0a:	20d5      	movs	r0, #213	@ 0xd5
 8002c0c:	f7ff ff94 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002c10:	20f0      	movs	r0, #240	@ 0xf0
 8002c12:	f7ff ff91 	bl	8002b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002c16:	20d9      	movs	r0, #217	@ 0xd9
 8002c18:	f7ff ff8e 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002c1c:	2022      	movs	r0, #34	@ 0x22
 8002c1e:	f7ff ff8b 	bl	8002b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002c22:	20da      	movs	r0, #218	@ 0xda
 8002c24:	f7ff ff88 	bl	8002b38 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002c28:	2012      	movs	r0, #18
 8002c2a:	f7ff ff85 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002c2e:	20db      	movs	r0, #219	@ 0xdb
 8002c30:	f7ff ff82 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002c34:	2020      	movs	r0, #32
 8002c36:	f7ff ff7f 	bl	8002b38 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002c3a:	208d      	movs	r0, #141	@ 0x8d
 8002c3c:	f7ff ff7c 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002c40:	2014      	movs	r0, #20
 8002c42:	f7ff ff79 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002c46:	2001      	movs	r0, #1
 8002c48:	f000 f988 	bl	8002f5c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f000 f80f 	bl	8002c70 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002c52:	f000 f825 	bl	8002ca0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002c56:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <ssd1306_Init+0xd0>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <ssd1306_Init+0xd0>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002c62:	4b02      	ldr	r3, [pc, #8]	@ (8002c6c <ssd1306_Init+0xd0>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	711a      	strb	r2, [r3, #4]
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000d64 	.word	0x20000d64

08002c70 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <ssd1306_Fill+0x14>
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <ssd1306_Fill+0x16>
 8002c84:	23ff      	movs	r3, #255	@ 0xff
 8002c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <ssd1306_Fill+0x2c>)
 8002c8e:	f010 ffd2 	bl	8013c36 <memset>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000964 	.word	0x20000964

08002ca0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	71fb      	strb	r3, [r7, #7]
 8002caa:	e016      	b.n	8002cda <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	3b50      	subs	r3, #80	@ 0x50
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff ff40 	bl	8002b38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7ff ff3d 	bl	8002b38 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002cbe:	2010      	movs	r0, #16
 8002cc0:	f7ff ff3a 	bl	8002b38 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	01db      	lsls	r3, r3, #7
 8002cc8:	4a08      	ldr	r2, [pc, #32]	@ (8002cec <ssd1306_UpdateScreen+0x4c>)
 8002cca:	4413      	add	r3, r2
 8002ccc:	2180      	movs	r1, #128	@ 0x80
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff4a 	bl	8002b68 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	71fb      	strb	r3, [r7, #7]
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	2b07      	cmp	r3, #7
 8002cde:	d9e5      	bls.n	8002cac <ssd1306_UpdateScreen+0xc>
    }
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000964 	.word	0x20000964

08002cf0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	71bb      	strb	r3, [r7, #6]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db3d      	blt.n	8002d86 <ssd1306_DrawPixel+0x96>
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d0e:	d83a      	bhi.n	8002d86 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002d10:	797b      	ldrb	r3, [r7, #5]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d11a      	bne.n	8002d4c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002d16:	79fa      	ldrb	r2, [r7, #7]
 8002d18:	79bb      	ldrb	r3, [r7, #6]
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	b2d8      	uxtb	r0, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	01db      	lsls	r3, r3, #7
 8002d22:	4413      	add	r3, r2
 8002d24:	4a1b      	ldr	r2, [pc, #108]	@ (8002d94 <ssd1306_DrawPixel+0xa4>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	b25a      	sxtb	r2, r3
 8002d2a:	79bb      	ldrb	r3, [r7, #6]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	2101      	movs	r1, #1
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	b259      	sxtb	r1, r3
 8002d3c:	79fa      	ldrb	r2, [r7, #7]
 8002d3e:	4603      	mov	r3, r0
 8002d40:	01db      	lsls	r3, r3, #7
 8002d42:	4413      	add	r3, r2
 8002d44:	b2c9      	uxtb	r1, r1
 8002d46:	4a13      	ldr	r2, [pc, #76]	@ (8002d94 <ssd1306_DrawPixel+0xa4>)
 8002d48:	54d1      	strb	r1, [r2, r3]
 8002d4a:	e01d      	b.n	8002d88 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002d4c:	79fa      	ldrb	r2, [r7, #7]
 8002d4e:	79bb      	ldrb	r3, [r7, #6]
 8002d50:	08db      	lsrs	r3, r3, #3
 8002d52:	b2d8      	uxtb	r0, r3
 8002d54:	4603      	mov	r3, r0
 8002d56:	01db      	lsls	r3, r3, #7
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d94 <ssd1306_DrawPixel+0xa4>)
 8002d5c:	5cd3      	ldrb	r3, [r2, r3]
 8002d5e:	b25a      	sxtb	r2, r3
 8002d60:	79bb      	ldrb	r3, [r7, #6]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	b25b      	sxtb	r3, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	4013      	ands	r3, r2
 8002d74:	b259      	sxtb	r1, r3
 8002d76:	79fa      	ldrb	r2, [r7, #7]
 8002d78:	4603      	mov	r3, r0
 8002d7a:	01db      	lsls	r3, r3, #7
 8002d7c:	4413      	add	r3, r2
 8002d7e:	b2c9      	uxtb	r1, r1
 8002d80:	4a04      	ldr	r2, [pc, #16]	@ (8002d94 <ssd1306_DrawPixel+0xa4>)
 8002d82:	54d1      	strb	r1, [r2, r3]
 8002d84:	e000      	b.n	8002d88 <ssd1306_DrawPixel+0x98>
        return;
 8002d86:	bf00      	nop
    }
}
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20000964 	.word	0x20000964

08002d98 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b089      	sub	sp, #36	@ 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4638      	mov	r0, r7
 8002da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002da6:	4623      	mov	r3, r4
 8002da8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	2b1f      	cmp	r3, #31
 8002dae:	d902      	bls.n	8002db6 <ssd1306_WriteChar+0x1e>
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b7e      	cmp	r3, #126	@ 0x7e
 8002db4:	d901      	bls.n	8002dba <ssd1306_WriteChar+0x22>
        return 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e077      	b.n	8002eaa <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002dba:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb4 <ssd1306_WriteChar+0x11c>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	783b      	ldrb	r3, [r7, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	2b80      	cmp	r3, #128	@ 0x80
 8002dc6:	dc06      	bgt.n	8002dd6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb4 <ssd1306_WriteChar+0x11c>)
 8002dca:	885b      	ldrh	r3, [r3, #2]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	787b      	ldrb	r3, [r7, #1]
 8002dd0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002dd2:	2b40      	cmp	r3, #64	@ 0x40
 8002dd4:	dd01      	ble.n	8002dda <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e067      	b.n	8002eaa <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	e04e      	b.n	8002e7e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	3b20      	subs	r3, #32
 8002de6:	7879      	ldrb	r1, [r7, #1]
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4619      	mov	r1, r3
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	440b      	add	r3, r1
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e036      	b.n	8002e6e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002e10:	4b28      	ldr	r3, [pc, #160]	@ (8002eb4 <ssd1306_WriteChar+0x11c>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b2d8      	uxtb	r0, r3
 8002e1e:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <ssd1306_WriteChar+0x11c>)
 8002e20:	885b      	ldrh	r3, [r3, #2]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7ff ff5d 	bl	8002cf0 <ssd1306_DrawPixel>
 8002e36:	e017      	b.n	8002e68 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002e38:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <ssd1306_WriteChar+0x11c>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	b2d8      	uxtb	r0, r3
 8002e46:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb4 <ssd1306_WriteChar+0x11c>)
 8002e48:	885b      	ldrh	r3, [r3, #2]
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	b2d9      	uxtb	r1, r3
 8002e54:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	f7ff ff44 	bl	8002cf0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	783b      	ldrb	r3, [r7, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d3c3      	bcc.n	8002e00 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	787b      	ldrb	r3, [r7, #1]
 8002e80:	461a      	mov	r2, r3
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d3ab      	bcc.n	8002de0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002e88:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <ssd1306_WriteChar+0x11c>)
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	d005      	beq.n	8002e9e <ssd1306_WriteChar+0x106>
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	3a20      	subs	r2, #32
 8002e98:	440a      	add	r2, r1
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	e000      	b.n	8002ea0 <ssd1306_WriteChar+0x108>
 8002e9e:	783a      	ldrb	r2, [r7, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b03      	ldr	r3, [pc, #12]	@ (8002eb4 <ssd1306_WriteChar+0x11c>)
 8002ea6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3724      	adds	r7, #36	@ 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000d64 	.word	0x20000d64

08002eb8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	4638      	mov	r0, r7
 8002ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002ec6:	e013      	b.n	8002ef0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	7818      	ldrb	r0, [r3, #0]
 8002ecc:	7e3b      	ldrb	r3, [r7, #24]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	463b      	mov	r3, r7
 8002ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed4:	f7ff ff60 	bl	8002d98 <ssd1306_WriteChar>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d002      	beq.n	8002eea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	e008      	b.n	8002efc <ssd1306_WriteString+0x44>
        }
        str++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	3301      	adds	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1e7      	bne.n	8002ec8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	781b      	ldrb	r3, [r3, #0]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	460a      	mov	r2, r1
 8002f0e:	71fb      	strb	r3, [r7, #7]
 8002f10:	4613      	mov	r3, r2
 8002f12:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <ssd1306_SetCursor+0x2c>)
 8002f1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002f1c:	79bb      	ldrb	r3, [r7, #6]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <ssd1306_SetCursor+0x2c>)
 8002f22:	805a      	strh	r2, [r3, #2]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	20000d64 	.word	0x20000d64

08002f34 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002f3e:	2381      	movs	r3, #129	@ 0x81
 8002f40:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fdf7 	bl	8002b38 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fdf3 	bl	8002b38 <ssd1306_WriteCommand>
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002f6c:	23af      	movs	r3, #175	@ 0xaf
 8002f6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f70:	4b08      	ldr	r3, [pc, #32]	@ (8002f94 <ssd1306_SetDisplayOn+0x38>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	715a      	strb	r2, [r3, #5]
 8002f76:	e004      	b.n	8002f82 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f78:	23ae      	movs	r3, #174	@ 0xae
 8002f7a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <ssd1306_SetDisplayOn+0x38>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fdd7 	bl	8002b38 <ssd1306_WriteCommand>
}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000d64 	.word	0x20000d64

08002f98 <set_row>:
	      	  	  	  	  		  	  	  	  	  {'4', '5', '6', 'B'},
												  {'7', '8', '9', 'C'},
												  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4803      	ldr	r0, [pc, #12]	@ (8002fb8 <set_row+0x20>)
 8002faa:	f003 fbb7 	bl	800671c <HAL_GPIO_WritePin>
	return;
 8002fae:	bf00      	nop
}
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40020800 	.word	0x40020800

08002fbc <reset_row>:

static void reset_row(row_t row){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4803      	ldr	r0, [pc, #12]	@ (8002fdc <reset_row+0x20>)
 8002fce:	f003 fba5 	bl	800671c <HAL_GPIO_WritePin>
	return;
 8002fd2:	bf00      	nop
}
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40020800 	.word	0x40020800

08002fe0 <read_col>:

static GPIO_PinState read_col(col_t col){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4803      	ldr	r0, [pc, #12]	@ (8003000 <read_col+0x20>)
 8002ff2:	f003 fb7b 	bl	80066ec <HAL_GPIO_ReadPin>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40020800 	.word	0x40020800

08003004 <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 800300a:	2300      	movs	r3, #0
 800300c:	71fb      	strb	r3, [r7, #7]
 800300e:	e04c      	b.n	80030aa <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	4a2a      	ldr	r2, [pc, #168]	@ (80030bc <read_keypad+0xb8>)
 8003014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ffbd 	bl	8002f98 <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 800301e:	2300      	movs	r3, #0
 8003020:	71bb      	strb	r3, [r7, #6]
 8003022:	e035      	b.n	8003090 <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 8003024:	79bb      	ldrb	r3, [r7, #6]
 8003026:	4a26      	ldr	r2, [pc, #152]	@ (80030c0 <read_keypad+0xbc>)
 8003028:	5cd3      	ldrb	r3, [r2, r3]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ffd8 	bl	8002fe0 <read_col>
 8003030:	4603      	mov	r3, r0
 8003032:	2b01      	cmp	r3, #1
 8003034:	d129      	bne.n	800308a <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 8003036:	2014      	movs	r0, #20
 8003038:	f00d fd08 	bl	8010a4c <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 800303c:	79bb      	ldrb	r3, [r7, #6]
 800303e:	4a20      	ldr	r2, [pc, #128]	@ (80030c0 <read_keypad+0xbc>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ffcc 	bl	8002fe0 <read_col>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d11d      	bne.n	800308a <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 800304e:	79fa      	ldrb	r2, [r7, #7]
 8003050:	79bb      	ldrb	r3, [r7, #6]
 8003052:	491c      	ldr	r1, [pc, #112]	@ (80030c4 <read_keypad+0xc0>)
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	440a      	add	r2, r1
 8003058:	4413      	add	r3, r2
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 800305e:	bf00      	nop
 8003060:	79bb      	ldrb	r3, [r7, #6]
 8003062:	4a17      	ldr	r2, [pc, #92]	@ (80030c0 <read_keypad+0xbc>)
 8003064:	5cd3      	ldrb	r3, [r2, r3]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ffba 	bl	8002fe0 <read_col>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d0f6      	beq.n	8003060 <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <read_keypad+0xb8>)
 8003076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff9e 	bl	8002fbc <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 8003080:	200a      	movs	r0, #10
 8003082:	f00d fce3 	bl	8010a4c <vTaskDelay>
					return key_pressed;
 8003086:	797b      	ldrb	r3, [r7, #5]
 8003088:	e013      	b.n	80030b2 <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 800308a:	79bb      	ldrb	r3, [r7, #6]
 800308c:	3301      	adds	r3, #1
 800308e:	71bb      	strb	r3, [r7, #6]
 8003090:	79bb      	ldrb	r3, [r7, #6]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d9c6      	bls.n	8003024 <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <read_keypad+0xb8>)
 800309a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff8c 	bl	8002fbc <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	3301      	adds	r3, #1
 80030a8:	71fb      	strb	r3, [r7, #7]
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d9af      	bls.n	8003010 <read_keypad+0xc>
	}
	return 0;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000008 	.word	0x20000008
 80030c0:	20000010 	.word	0x20000010
 80030c4:	08018b8c 	.word	0x08018b8c

080030c8 <save_data_on_sd>:
extern FRESULT fresult;  // result
extern UINT br, bw;  // File read/write count


//Funcion para escribir el contenido de buffers en un archivo
bool save_data_on_sd(char *filename, void *buffer, uint32_t btw){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
	bool res;
	//Abro el archivo
	res = try_f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 80030d4:	2232      	movs	r2, #50	@ 0x32
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	4818      	ldr	r0, [pc, #96]	@ (800313c <save_data_on_sd+0x74>)
 80030da:	f000 f8cd 	bl	8003278 <try_f_open>
 80030de:	4603      	mov	r3, r0
 80030e0:	75fb      	strb	r3, [r7, #23]
	if(!res){
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	f083 0301 	eor.w	r3, r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <save_data_on_sd+0x2a>
		//No se pudo abrir el archivo
		return false;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e01f      	b.n	8003132 <save_data_on_sd+0x6a>
	}

	//Escribo los datos del buffer en el archivo
	res = try_f_write(&fil, buffer, btw, &bw);
 80030f2:	4b13      	ldr	r3, [pc, #76]	@ (8003140 <save_data_on_sd+0x78>)
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	4810      	ldr	r0, [pc, #64]	@ (800313c <save_data_on_sd+0x74>)
 80030fa:	f000 f923 	bl	8003344 <try_f_write>
 80030fe:	4603      	mov	r3, r0
 8003100:	75fb      	strb	r3, [r7, #23]
	if(!res || bw < btw){
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	f083 0301 	eor.w	r3, r3, #1
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <save_data_on_sd+0x50>
 800310e:	4b0c      	ldr	r3, [pc, #48]	@ (8003140 <save_data_on_sd+0x78>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d906      	bls.n	8003126 <save_data_on_sd+0x5e>
		res = try_f_close(&fil);
 8003118:	4808      	ldr	r0, [pc, #32]	@ (800313c <save_data_on_sd+0x74>)
 800311a:	f000 f8d1 	bl	80032c0 <try_f_close>
 800311e:	4603      	mov	r3, r0
 8003120:	75fb      	strb	r3, [r7, #23]
		return false;
 8003122:	2300      	movs	r3, #0
 8003124:	e005      	b.n	8003132 <save_data_on_sd+0x6a>
	}

	//Cierro el archivo
	res = try_f_close(&fil);
 8003126:	4805      	ldr	r0, [pc, #20]	@ (800313c <save_data_on_sd+0x74>)
 8003128:	f000 f8ca 	bl	80032c0 <try_f_close>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
	return res ? true : false;
 8003130:	7dfb      	ldrb	r3, [r7, #23]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20001db0 	.word	0x20001db0
 8003140:	20002f30 	.word	0x20002f30

08003144 <read_data_from_sd>:

//Funcion para leer datos desde archivo y guardarlos en un buffer
bool read_data_from_sd(char *filename, void *buffer, uint32_t btr, uint32_t *last_pos){
 8003144:	b5b0      	push	{r4, r5, r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
	//Current pos debe ser multiplicado por el numero de bytes de un float, o guardar la ultima posicion
	bool res;
	//Abro el archivo
	res = try_f_open(&fil, filename, FA_READ);
 8003152:	2201      	movs	r2, #1
 8003154:	68f9      	ldr	r1, [r7, #12]
 8003156:	4824      	ldr	r0, [pc, #144]	@ (80031e8 <read_data_from_sd+0xa4>)
 8003158:	f000 f88e 	bl	8003278 <try_f_open>
 800315c:	4603      	mov	r3, r0
 800315e:	75fb      	strb	r3, [r7, #23]
	if(!res){
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	f083 0301 	eor.w	r3, r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <read_data_from_sd+0x2c>
		//No se pudo abrir el archivo
		return false;
 800316c:	2300      	movs	r3, #0
 800316e:	e036      	b.n	80031de <read_data_from_sd+0x9a>
	}

	//Posiciono el puntero de lectura
	fresult = f_lseek(&fil, *last_pos);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2200      	movs	r2, #0
 8003176:	461c      	mov	r4, r3
 8003178:	4615      	mov	r5, r2
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	481a      	ldr	r0, [pc, #104]	@ (80031e8 <read_data_from_sd+0xa4>)
 8003180:	f00b fc14 	bl	800e9ac <f_lseek>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	4b18      	ldr	r3, [pc, #96]	@ (80031ec <read_data_from_sd+0xa8>)
 800318a:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 800318c:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <read_data_from_sd+0xa8>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d004      	beq.n	800319e <read_data_from_sd+0x5a>
		try_f_close(&fil);
 8003194:	4814      	ldr	r0, [pc, #80]	@ (80031e8 <read_data_from_sd+0xa4>)
 8003196:	f000 f893 	bl	80032c0 <try_f_close>
		return false;
 800319a:	2300      	movs	r3, #0
 800319c:	e01f      	b.n	80031de <read_data_from_sd+0x9a>
	}

	//Leo datos desde archivo y los guardo en un buffer
	res = try_f_read(&fil, buffer, btr, &br);
 800319e:	4b14      	ldr	r3, [pc, #80]	@ (80031f0 <read_data_from_sd+0xac>)
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	4810      	ldr	r0, [pc, #64]	@ (80031e8 <read_data_from_sd+0xa4>)
 80031a6:	f000 f8a9 	bl	80032fc <try_f_read>
 80031aa:	4603      	mov	r3, r0
 80031ac:	75fb      	strb	r3, [r7, #23]
	if(!res){
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <read_data_from_sd+0x84>
		res = try_f_close(&fil);
 80031ba:	480b      	ldr	r0, [pc, #44]	@ (80031e8 <read_data_from_sd+0xa4>)
 80031bc:	f000 f880 	bl	80032c0 <try_f_close>
 80031c0:	4603      	mov	r3, r0
 80031c2:	75fb      	strb	r3, [r7, #23]
		return false;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e00a      	b.n	80031de <read_data_from_sd+0x9a>
	}

	//Guardo la ultima posicion
	*last_pos = f_tell(&fil);
 80031c8:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <read_data_from_sd+0xa4>)
 80031ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	601a      	str	r2, [r3, #0]

	//Cierro el archivo
	res = try_f_close(&fil);
 80031d2:	4805      	ldr	r0, [pc, #20]	@ (80031e8 <read_data_from_sd+0xa4>)
 80031d4:	f000 f874 	bl	80032c0 <try_f_close>
 80031d8:	4603      	mov	r3, r0
 80031da:	75fb      	strb	r3, [r7, #23]
	return res ? true : false;
 80031dc:	7dfb      	ldrb	r3, [r7, #23]

}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bdb0      	pop	{r4, r5, r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20001db0 	.word	0x20001db0
 80031ec:	20002f28 	.word	0x20002f28
 80031f0:	20002f2c 	.word	0x20002f2c

080031f4 <try_mount>:
FILINFO fno;
FRESULT fresult;  // result
UINT br, bw;  // File read/write count

//Esta funcion monta la tarjeta SD para su uso
bool try_mount(char *path){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	bool is_mounted = false;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
	uint8_t attemps = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	73bb      	strb	r3, [r7, #14]

	//Intento montar la tarjeta SD
	do{
		res = f_mount(&fs, path, 1);
 8003204:	2201      	movs	r2, #1
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	480a      	ldr	r0, [pc, #40]	@ (8003234 <try_mount+0x40>)
 800320a:	f00a fb37 	bl	800d87c <f_mount>
 800320e:	4603      	mov	r3, r0
 8003210:	737b      	strb	r3, [r7, #13]
		if(res == FR_OK){
 8003212:	7b7b      	ldrb	r3, [r7, #13]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <try_mount+0x2a>
			is_mounted = true;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
			break;
 800321c:	e005      	b.n	800322a <try_mount+0x36>
		}
		attemps++;
 800321e:	7bbb      	ldrb	r3, [r7, #14]
 8003220:	3301      	adds	r3, #1
 8003222:	73bb      	strb	r3, [r7, #14]
	}while(attemps < MAX_RETRIES);				//Se intenta un numero de veces. Si falla todas devuelve false
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	2bff      	cmp	r3, #255	@ 0xff
 8003228:	d1ec      	bne.n	8003204 <try_mount+0x10>

	//Devuelvo estado de montaje
	return is_mounted;
 800322a:	7bfb      	ldrb	r3, [r7, #15]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000d6c 	.word	0x20000d6c

08003238 <try_unmount>:

//Esta funcion desmonta la tarjeta SD
bool try_unmount(char *path){
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	bool is_unmounted = false;
 8003240:	2300      	movs	r3, #0
 8003242:	73fb      	strb	r3, [r7, #15]
	uint8_t attemps = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	73bb      	strb	r3, [r7, #14]

	//Intento desmontar la tarjeta SD
	do{
		res = f_mount(NULL, path, 1);
 8003248:	2201      	movs	r2, #1
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	2000      	movs	r0, #0
 800324e:	f00a fb15 	bl	800d87c <f_mount>
 8003252:	4603      	mov	r3, r0
 8003254:	737b      	strb	r3, [r7, #13]
		if(res == FR_OK){
 8003256:	7b7b      	ldrb	r3, [r7, #13]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <try_unmount+0x2a>
			is_unmounted = true;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
			break;
 8003260:	e005      	b.n	800326e <try_unmount+0x36>
		}
		attemps++;
 8003262:	7bbb      	ldrb	r3, [r7, #14]
 8003264:	3301      	adds	r3, #1
 8003266:	73bb      	strb	r3, [r7, #14]
	}while(attemps < MAX_RETRIES);
 8003268:	7bbb      	ldrb	r3, [r7, #14]
 800326a:	2bff      	cmp	r3, #255	@ 0xff
 800326c:	d1ec      	bne.n	8003248 <try_unmount+0x10>

	//Devuelvo estado de desmontaje
	return is_unmounted;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <try_f_open>:

bool try_f_open(FIL *fil, char *path, BYTE mode){
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	4613      	mov	r3, r2
 8003284:	71fb      	strb	r3, [r7, #7]
	FRESULT res;
	uint8_t attemps = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
	bool is_open = false;
 800328a:	2300      	movs	r3, #0
 800328c:	75bb      	strb	r3, [r7, #22]

	//Intento abrir el archivo
	do{
		res = f_open(fil, path, mode);
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	461a      	mov	r2, r3
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f00a fb55 	bl	800d944 <f_open>
 800329a:	4603      	mov	r3, r0
 800329c:	757b      	strb	r3, [r7, #21]
		if(res == FR_OK){
 800329e:	7d7b      	ldrb	r3, [r7, #21]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <try_f_open+0x32>
			is_open = true;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75bb      	strb	r3, [r7, #22]
			break;
 80032a8:	e005      	b.n	80032b6 <try_f_open+0x3e>
		}
		attemps++;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	3301      	adds	r3, #1
 80032ae:	75fb      	strb	r3, [r7, #23]
	}while(attemps < MAX_RETRIES);
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2bff      	cmp	r3, #255	@ 0xff
 80032b4:	d1eb      	bne.n	800328e <try_f_open+0x16>

	//Devuelvo estado de lectura
	return is_open;
 80032b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <try_f_close>:

bool try_f_close(FIL *fil){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	uint8_t attemps = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
	bool is_closed = false;
 80032cc:	2300      	movs	r3, #0
 80032ce:	73bb      	strb	r3, [r7, #14]

	//Intento abrir el archivo
	do{
		res = f_close(fil);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f00b fb3c 	bl	800e94e <f_close>
 80032d6:	4603      	mov	r3, r0
 80032d8:	737b      	strb	r3, [r7, #13]
		if(res == FR_OK){
 80032da:	7b7b      	ldrb	r3, [r7, #13]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <try_f_close+0x26>
			is_closed = true;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73bb      	strb	r3, [r7, #14]
			break;
 80032e4:	e005      	b.n	80032f2 <try_f_close+0x32>
		}
		attemps++;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	3301      	adds	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
	}while(attemps < MAX_RETRIES);
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2bff      	cmp	r3, #255	@ 0xff
 80032f0:	d1ee      	bne.n	80032d0 <try_f_close+0x10>

	//Devuelvo estado de lectura
	return is_closed;
 80032f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <try_f_read>:

//Esta funcion lee bytes de un archivo
bool try_f_read(FIL *fil, void *buffer, UINT btr, UINT *br){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
	FRESULT res;
	uint8_t attemps = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
	bool is_read = false;
 800330e:	2300      	movs	r3, #0
 8003310:	75bb      	strb	r3, [r7, #22]

	//Intento leer desde SD
	do{
		res = f_read(fil, buffer, btr, br);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f00a fe08 	bl	800df2e <f_read>
 800331e:	4603      	mov	r3, r0
 8003320:	757b      	strb	r3, [r7, #21]
		if(res == FR_OK){
 8003322:	7d7b      	ldrb	r3, [r7, #21]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <try_f_read+0x32>
			is_read = true;
 8003328:	2301      	movs	r3, #1
 800332a:	75bb      	strb	r3, [r7, #22]
			break;
 800332c:	e005      	b.n	800333a <try_f_read+0x3e>
		}
		attemps++;
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	3301      	adds	r3, #1
 8003332:	75fb      	strb	r3, [r7, #23]
	}while(attemps < MAX_RETRIES);
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2bff      	cmp	r3, #255	@ 0xff
 8003338:	d1eb      	bne.n	8003312 <try_f_read+0x16>

	//Devuelvo estado de lectura
	return is_read;
 800333a:	7dbb      	ldrb	r3, [r7, #22]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <try_f_write>:

//Esta funcion escribe bytes en un archivo
bool try_f_write(FIL *fil, void *buffer, UINT btw, UINT *bw){
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
	FRESULT res;
	uint8_t attemps = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
	bool is_written = false;
 8003356:	2300      	movs	r3, #0
 8003358:	75bb      	strb	r3, [r7, #22]

	//Intento leer desde SD
	do{
		res = f_write(fil, buffer, btw, bw);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f00a ffab 	bl	800e2bc <f_write>
 8003366:	4603      	mov	r3, r0
 8003368:	757b      	strb	r3, [r7, #21]
		if(res == FR_OK){
 800336a:	7d7b      	ldrb	r3, [r7, #21]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <try_f_write+0x32>
			is_written = true;
 8003370:	2301      	movs	r3, #1
 8003372:	75bb      	strb	r3, [r7, #22]
			break;
 8003374:	e005      	b.n	8003382 <try_f_write+0x3e>
		}
		attemps++;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
 8003378:	3301      	adds	r3, #1
 800337a:	75fb      	strb	r3, [r7, #23]
	}while(attemps < MAX_RETRIES);
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2bff      	cmp	r3, #255	@ 0xff
 8003380:	d1eb      	bne.n	800335a <try_f_write+0x16>

	//Devuelvo estado de lectura
	return is_written;
 8003382:	7dbb      	ldrb	r3, [r7, #22]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <get_file_size>:

uint32_t get_file_size(char *filename){
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	FRESULT res;
	uint32_t file_size;
	res = f_stat(filename, &fno);
 8003394:	490a      	ldr	r1, [pc, #40]	@ (80033c0 <get_file_size+0x34>)
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f00b ff4b 	bl	800f232 <f_stat>
 800339c:	4603      	mov	r3, r0
 800339e:	73fb      	strb	r3, [r7, #15]
	file_size = (res == FR_OK) ? (uint32_t)fno.fsize : 0;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <get_file_size+0x24>
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <get_file_size+0x34>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	4613      	mov	r3, r2
 80033ae:	e000      	b.n	80033b2 <get_file_size+0x26>
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]
	return file_size;
 80033b4:	68bb      	ldr	r3, [r7, #8]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20002e08 	.word	0x20002e08

080033c4 <check_if_file_exists>:
extern FILINFO fno;
extern FRESULT fresult;  // result
extern UINT br, bw;  // File read/write count


bool check_if_file_exists(char *filename){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	res = f_stat(filename, &fno);
 80033cc:	4907      	ldr	r1, [pc, #28]	@ (80033ec <check_if_file_exists+0x28>)
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f00b ff2f 	bl	800f232 <f_stat>
 80033d4:	4603      	mov	r3, r0
 80033d6:	73fb      	strb	r3, [r7, #15]
	return (res != FR_OK) ? false : true;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20002e08 	.word	0x20002e08

080033f0 <create_file>:


bool create_file(char *filename, char *header){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
	bool res;
	/*Creo el archivo*/
	res = try_f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 80033fa:	220a      	movs	r2, #10
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	481b      	ldr	r0, [pc, #108]	@ (800346c <create_file+0x7c>)
 8003400:	f7ff ff3a 	bl	8003278 <try_f_open>
 8003404:	4603      	mov	r3, r0
 8003406:	73fb      	strb	r3, [r7, #15]
	if(!res){
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	f083 0301 	eor.w	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <create_file+0x28>
		//No se pudo abrir el archivo
		return false;
 8003414:	2300      	movs	r3, #0
 8003416:	e025      	b.n	8003464 <create_file+0x74>
	}

	/*Escribo el header*/
	res = try_f_write(&fil, header, strlen(header), &bw);
 8003418:	6838      	ldr	r0, [r7, #0]
 800341a:	f7fc ff4b 	bl	80002b4 <strlen>
 800341e:	4602      	mov	r2, r0
 8003420:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <create_file+0x80>)
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	4811      	ldr	r0, [pc, #68]	@ (800346c <create_file+0x7c>)
 8003426:	f7ff ff8d 	bl	8003344 <try_f_write>
 800342a:	4603      	mov	r3, r0
 800342c:	73fb      	strb	r3, [r7, #15]
	if(!res || bw < strlen(header)){
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	f083 0301 	eor.w	r3, r3, #1
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <create_file+0x5a>
 800343a:	6838      	ldr	r0, [r7, #0]
 800343c:	f7fc ff3a 	bl	80002b4 <strlen>
 8003440:	4602      	mov	r2, r0
 8003442:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <create_file+0x80>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d906      	bls.n	8003458 <create_file+0x68>
		res = try_f_close(&fil);
 800344a:	4808      	ldr	r0, [pc, #32]	@ (800346c <create_file+0x7c>)
 800344c:	f7ff ff38 	bl	80032c0 <try_f_close>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]
		return false;
 8003454:	2300      	movs	r3, #0
 8003456:	e005      	b.n	8003464 <create_file+0x74>
	}
	/*Cierro el archivo*/
	res = try_f_close(&fil);
 8003458:	4804      	ldr	r0, [pc, #16]	@ (800346c <create_file+0x7c>)
 800345a:	f7ff ff31 	bl	80032c0 <try_f_close>
 800345e:	4603      	mov	r3, r0
 8003460:	73fb      	strb	r3, [r7, #15]
	return res ? true : false;
 8003462:	7bfb      	ldrb	r3, [r7, #15]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20001db0 	.word	0x20001db0
 8003470:	20002f30 	.word	0x20002f30

08003474 <get_time_from_rtc>:

void get_time_from_rtc(char *rtc_lecture){
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	@ 0x38
 8003478:	af02      	add	r7, sp, #8
 800347a:	6078      	str	r0, [r7, #4]
	/***Esta funcion devuelve en formato string la fecha y hora actual usando el RTC***/
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;
	char time[15];
	/*Obtengo el tiempo actual*/
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800347c:	f107 031c 	add.w	r3, r7, #28
 8003480:	2200      	movs	r2, #0
 8003482:	4619      	mov	r1, r3
 8003484:	4817      	ldr	r0, [pc, #92]	@ (80034e4 <get_time_from_rtc+0x70>)
 8003486:	f004 fce6 	bl	8007e56 <HAL_RTC_GetTime>
	/*Obtengo la fecha actual*/
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 800348a:	f107 0318 	add.w	r3, r7, #24
 800348e:	2200      	movs	r2, #0
 8003490:	4619      	mov	r1, r3
 8003492:	4814      	ldr	r0, [pc, #80]	@ (80034e4 <get_time_from_rtc+0x70>)
 8003494:	f004 fdc1 	bl	800801a <HAL_RTC_GetDate>
	/*Guardo fecha y hora en los buffers correspondientes*/
	snprintf(time, 15, "%02d:%02d:%02d ", currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8003498:	7f3b      	ldrb	r3, [r7, #28]
 800349a:	4619      	mov	r1, r3
 800349c:	7f7b      	ldrb	r3, [r7, #29]
 800349e:	7fba      	ldrb	r2, [r7, #30]
 80034a0:	f107 0008 	add.w	r0, r7, #8
 80034a4:	9201      	str	r2, [sp, #4]
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	460b      	mov	r3, r1
 80034aa:	4a0f      	ldr	r2, [pc, #60]	@ (80034e8 <get_time_from_rtc+0x74>)
 80034ac:	210f      	movs	r1, #15
 80034ae:	f010 fb31 	bl	8013b14 <sniprintf>
	snprintf(rtc_lecture, 15, "%02d-%02d-%2d ", currentDate.Date, currentDate.Month, 2000 + currentDate.Year);
 80034b2:	7ebb      	ldrb	r3, [r7, #26]
 80034b4:	4619      	mov	r1, r3
 80034b6:	7e7b      	ldrb	r3, [r7, #25]
 80034b8:	461a      	mov	r2, r3
 80034ba:	7efb      	ldrb	r3, [r7, #27]
 80034bc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	9200      	str	r2, [sp, #0]
 80034c4:	460b      	mov	r3, r1
 80034c6:	4a09      	ldr	r2, [pc, #36]	@ (80034ec <get_time_from_rtc+0x78>)
 80034c8:	210f      	movs	r1, #15
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f010 fb22 	bl	8013b14 <sniprintf>
	strcat(rtc_lecture, time);
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f010 fbb5 	bl	8013c46 <strcat>
	return;
 80034dc:	bf00      	nop
}
 80034de:	3730      	adds	r7, #48	@ 0x30
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200007f4 	.word	0x200007f4
 80034e8:	08015018 	.word	0x08015018
 80034ec:	08015028 	.word	0x08015028

080034f0 <write_entry>:

bool write_entry (char *filename, char *entry){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034fe:	f843 0c64 	str.w	r0, [r3, #-100]
 8003502:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003506:	f843 1c68 	str.w	r1, [r3, #-104]
	FIL fil;
	bool res;
	bool is_written = true;
 800350a:	2301      	movs	r3, #1
 800350c:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8003510:	f102 0207 	add.w	r2, r2, #7
 8003514:	7013      	strb	r3, [r2, #0]
	//Abro archivo en modo append
	res = try_f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 8003516:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800351a:	4619      	mov	r1, r3
 800351c:	f107 0308 	add.w	r3, r7, #8
 8003520:	2232      	movs	r2, #50	@ 0x32
 8003522:	f851 1c64 	ldr.w	r1, [r1, #-100]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fea6 	bl	8003278 <try_f_open>
 800352c:	4603      	mov	r3, r0
 800352e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8003532:	f102 0206 	add.w	r2, r2, #6
 8003536:	7013      	strb	r3, [r2, #0]
	if(!res){
 8003538:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800353c:	f103 0306 	add.w	r3, r3, #6
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	f083 0301 	eor.w	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00b      	beq.n	8003564 <write_entry+0x74>
		is_written = false;
 800354c:	2300      	movs	r3, #0
 800354e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8003552:	f102 0207 	add.w	r2, r2, #7
 8003556:	7013      	strb	r3, [r2, #0]
		return is_written;
 8003558:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800355c:	f103 0307 	add.w	r3, r3, #7
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	e05e      	b.n	8003622 <write_entry+0x132>
	}

	//Escribo la entrada en el archivo de registro
	res = try_f_write(&fil, entry, strlen(entry), &bw);
 8003564:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003568:	f853 0c68 	ldr.w	r0, [r3, #-104]
 800356c:	f7fc fea2 	bl	80002b4 <strlen>
 8003570:	4602      	mov	r2, r0
 8003572:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003576:	4619      	mov	r1, r3
 8003578:	f107 0008 	add.w	r0, r7, #8
 800357c:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <write_entry+0x140>)
 800357e:	f851 1c68 	ldr.w	r1, [r1, #-104]
 8003582:	f7ff fedf 	bl	8003344 <try_f_write>
 8003586:	4603      	mov	r3, r0
 8003588:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800358c:	f102 0206 	add.w	r2, r2, #6
 8003590:	7013      	strb	r3, [r2, #0]
	if(!res || bw < strlen(entry)){
 8003592:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003596:	f103 0306 	add.w	r3, r3, #6
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f083 0301 	eor.w	r3, r3, #1
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10a      	bne.n	80035bc <write_entry+0xcc>
 80035a6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80035aa:	f853 0c68 	ldr.w	r0, [r3, #-104]
 80035ae:	f7fc fe81 	bl	80002b4 <strlen>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <write_entry+0x140>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d912      	bls.n	80035e2 <write_entry+0xf2>
		if(res){
 80035bc:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80035c0:	f103 0306 	add.w	r3, r3, #6
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <write_entry+0xe6>
			//Si se escribieron bytes de menos, elimino el archivo
			f_unlink(filename);
 80035ca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80035ce:	f853 0c64 	ldr.w	r0, [r3, #-100]
 80035d2:	f00b fe88 	bl	800f2e6 <f_unlink>
		}
		is_written = false;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80035dc:	f102 0207 	add.w	r2, r2, #7
 80035e0:	7013      	strb	r3, [r2, #0]
	}

	//Cierro el archivo
	res = try_f_close(&fil);
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fe6a 	bl	80032c0 <try_f_close>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80035f2:	f102 0206 	add.w	r2, r2, #6
 80035f6:	7013      	strb	r3, [r2, #0]
	if(!res){
 80035f8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80035fc:	f103 0306 	add.w	r3, r3, #6
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	f083 0301 	eor.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <write_entry+0x128>
		is_written = false;
 800360c:	2300      	movs	r3, #0
 800360e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8003612:	f102 0207 	add.w	r2, r2, #7
 8003616:	7013      	strb	r3, [r2, #0]
	}
	return is_written;
 8003618:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800361c:	f103 0307 	add.w	r3, r3, #7
 8003620:	781b      	ldrb	r3, [r3, #0]
}
 8003622:	4618      	mov	r0, r3
 8003624:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20002f30 	.word	0x20002f30

08003634 <search_user>:


bool search_user(char *filename, char *user_key, char *user_name){
 8003634:	b580      	push	{r7, lr}
 8003636:	b0a8      	sub	sp, #160	@ 0xa0
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
	char *line_user;
	bool is_found;
	bool res;

	//Abro el archivo en modo lectura
	res = try_f_open(&fil, filename, FA_READ);
 8003640:	2201      	movs	r2, #1
 8003642:	68f9      	ldr	r1, [r7, #12]
 8003644:	4837      	ldr	r0, [pc, #220]	@ (8003724 <search_user+0xf0>)
 8003646:	f7ff fe17 	bl	8003278 <try_f_open>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if(!res){
 8003650:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <search_user+0x36>
		is_found = false;;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
		return is_found;
 8003664:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8003668:	e057      	b.n	800371a <search_user+0xe6>
	}

	//Descarto el header
	f_gets(line, LINE_BUFFER_SIZE, &fil);
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	4a2d      	ldr	r2, [pc, #180]	@ (8003724 <search_user+0xf0>)
 8003670:	2180      	movs	r1, #128	@ 0x80
 8003672:	4618      	mov	r0, r3
 8003674:	f00b ff3f 	bl	800f4f6 <f_gets>

	//Busco el usuario asociado linea por linea
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 8003678:	e03a      	b.n	80036f0 <search_user+0xbc>
		line_key = strtok(line, " ");								//Separo la clave
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	492a      	ldr	r1, [pc, #168]	@ (8003728 <search_user+0xf4>)
 8003680:	4618      	mov	r0, r3
 8003682:	f010 fb03 	bl	8013c8c <strtok>
 8003686:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
		line_user = strtok(NULL, "\n");								//Separo el usuario
 800368a:	4928      	ldr	r1, [pc, #160]	@ (800372c <search_user+0xf8>)
 800368c:	2000      	movs	r0, #0
 800368e:	f010 fafd 	bl	8013c8c <strtok>
 8003692:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

		//Comparo clave
		if(line_key && strcmp(line_key, user_key) == 0){
 8003696:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800369a:	2b00      	cmp	r3, #0
 800369c:	d022      	beq.n	80036e4 <search_user+0xb0>
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80036a4:	f7fc fdfc 	bl	80002a0 <strcmp>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11a      	bne.n	80036e4 <search_user+0xb0>
			if(line_user){
 80036ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d016      	beq.n	80036e4 <search_user+0xb0>
				strncpy(user_name, line_user, USER_STR_SIZE - 1);
 80036b6:	2227      	movs	r2, #39	@ 0x27
 80036b8:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f010 fad1 	bl	8013c64 <strncpy>
				user_name[USER_STR_SIZE - 1] = '\0';				//Me aseguro de que haya terminacion nula
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3327      	adds	r3, #39	@ 0x27
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
				res = try_f_close(&fil);
 80036ca:	4816      	ldr	r0, [pc, #88]	@ (8003724 <search_user+0xf0>)
 80036cc:	f7ff fdf8 	bl	80032c0 <try_f_close>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				is_found =  res ? true : false;
 80036d6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80036da:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
				return is_found;
 80036de:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 80036e2:	e01a      	b.n	800371a <search_user+0xe6>
			}
		}
		//Limpio la linea para que no se acumulen caracteres de palabras largas
		clear_buffer(line, LINE_BUFFER_SIZE);
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	2180      	movs	r1, #128	@ 0x80
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fb60 	bl	8004db0 <clear_buffer>
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003724 <search_user+0xf0>)
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	4618      	mov	r0, r3
 80036fa:	f00b fefc 	bl	800f4f6 <f_gets>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ba      	bne.n	800367a <search_user+0x46>
	}

	//Si se llego al final del archivo y no se encontro el usuario, devuelve false
	res = try_f_close(&fil);
 8003704:	4807      	ldr	r0, [pc, #28]	@ (8003724 <search_user+0xf0>)
 8003706:	f7ff fddb 	bl	80032c0 <try_f_close>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	is_found = false;
 8003710:	2300      	movs	r3, #0
 8003712:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	return is_found;
 8003716:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
}
 800371a:	4618      	mov	r0, r3
 800371c:	37a0      	adds	r7, #160	@ 0xa0
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20001db0 	.word	0x20001db0
 8003728:	08015038 	.word	0x08015038
 800372c:	0801503c 	.word	0x0801503c

08003730 <receive_user_key>:
 * @brief Recibe secuencia ingresada por el usuario desde la tarea keypad.
 *
 * @param user_key Puntero char al vector donde se guardara la secuencia.
 * @return None
 */
void receive_user_key(char *user_key){
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < SEQUENCE_LENGTH; i++){
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e00c      	b.n	8003758 <receive_user_key+0x28>
		xQueueReceive(sequence_queue, &user_key[i], portMAX_DELAY);
 800373e:	4b0a      	ldr	r3, [pc, #40]	@ (8003768 <receive_user_key+0x38>)
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	4413      	add	r3, r2
 8003748:	f04f 32ff 	mov.w	r2, #4294967295
 800374c:	4619      	mov	r1, r3
 800374e:	f00c fc63 	bl	8010018 <xQueueReceive>
	for(uint8_t i = 0; i < SEQUENCE_LENGTH; i++){
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	3301      	adds	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b05      	cmp	r3, #5
 800375c:	d9ef      	bls.n	800373e <receive_user_key+0xe>
	}
	return;
 800375e:	bf00      	nop
}
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200008fc 	.word	0x200008fc

0800376c <is_template_creation>:
 * @brief Chequea si se ingreso secuencia para creación de template.
 *
 * @param user_key Puntero char que apunta al inicio de la secuencia.
 * @return true si la secuencia coincide con la secuencia de creacion de template, false en caso contrario.
 */
bool is_template_creation(char *user_key){
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	return strcmp(user_key, TEMPLATE_CREATION_SEQUENCE) == 0;
 8003774:	4906      	ldr	r1, [pc, #24]	@ (8003790 <is_template_creation+0x24>)
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fc fd92 	bl	80002a0 <strcmp>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf0c      	ite	eq
 8003782:	2301      	moveq	r3, #1
 8003784:	2300      	movne	r3, #0
 8003786:	b2db      	uxtb	r3, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	08015040 	.word	0x08015040

08003794 <handle_template_creation>:
 * envia via uart hacia la PC. Alli se creara el template de voz.
 *
 * @param None
 * @return None
 */
void handle_template_creation(void){
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
	//Declaracion de variables
	display_message_t message;

	//Genero template
	message = generate_template() ? DISPLAY_TEMPLATE_SAVED : DISPLAY_TEMPLATE_NOT_CREATED;
 800379a:	f000 fe01 	bl	80043a0 <generate_template>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <handle_template_creation+0x14>
 80037a4:	230c      	movs	r3, #12
 80037a6:	e000      	b.n	80037aa <handle_template_creation+0x16>
 80037a8:	230d      	movs	r3, #13
 80037aa:	71fb      	strb	r3, [r7, #7]

	//Envio mensaje al display
	send_message(message, BLOCKING);
 80037ac:	79fb      	ldrb	r3, [r7, #7]
 80037ae:	2101      	movs	r1, #1
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fb3b 	bl	8004e2c <send_message>

	//Cedo semaforo para que el keypad pueda continuar ejecutandose
	xSemaphoreGive(keypad_sd_sync);
 80037b6:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <handle_template_creation+0x38>)
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	2300      	movs	r3, #0
 80037bc:	2200      	movs	r2, #0
 80037be:	2100      	movs	r1, #0
 80037c0:	f00c fa98 	bl	800fcf4 <xQueueGenericSend>
	return;
 80037c4:	bf00      	nop
}
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000908 	.word	0x20000908

080037d0 <handle_user_verification>:
 *
 * @param user_key Puntero char que apunta al inicio de la secuencia.
 * @return None
 */

void handle_user_verification(char *user_key){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b09a      	sub	sp, #104	@ 0x68
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	char user_name[USER_STR_SIZE] = {0};
 80037d8:	2300      	movs	r3, #0
 80037da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80037e0:	2224      	movs	r2, #36	@ 0x24
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f010 fa26 	bl	8013c36 <memset>
	char template_path[TEMPLATE_STR_SIZE] = {0};
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	222e      	movs	r2, #46	@ 0x2e
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f010 fa1d 	bl	8013c36 <memset>
	display_message_t message;
	//Verifico existencia de usuario en base de datos
	if(!process_user_key(user_key, user_name)){
 80037fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003800:	4619      	mov	r1, r3
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fbac 	bl	8003f60 <process_user_key>
 8003808:	4603      	mov	r3, r0
 800380a:	f083 0301 	eor.w	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00f      	beq.n	8003834 <handle_user_verification+0x64>
		//Usuario no encontrado
		message = DISPLAY_USER_NOT_FOUND;
 8003814:	2305      	movs	r3, #5
 8003816:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		send_error(message);
 800381a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fb28 	bl	8004e74 <send_error>
		xSemaphoreGive(keypad_sd_sync);											//Devuelvo el control a la tarea keypad
 8003824:	4b25      	ldr	r3, [pc, #148]	@ (80038bc <handle_user_verification+0xec>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	2300      	movs	r3, #0
 800382a:	2200      	movs	r2, #0
 800382c:	2100      	movs	r1, #0
 800382e:	f00c fa61 	bl	800fcf4 <xQueueGenericSend>
		return;
 8003832:	e03f      	b.n	80038b4 <handle_user_verification+0xe4>
	}

	//Indicar que el usuario fue encontrado
	send_message(DISPLAY_USER_FOUND, NON_BLOCKING);
 8003834:	2100      	movs	r1, #0
 8003836:	2004      	movs	r0, #4
 8003838:	f001 faf8 	bl	8004e2c <send_message>

	//Verifico que exista template asociado al usuario
	snprintf(template_path, TEMPLATE_STR_SIZE, "%s.bin", user_name);
 800383c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003840:	f107 0008 	add.w	r0, r7, #8
 8003844:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <handle_user_verification+0xf0>)
 8003846:	2132      	movs	r1, #50	@ 0x32
 8003848:	f010 f964 	bl	8013b14 <sniprintf>
	if(!check_if_file_exists(template_path)){
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fdb7 	bl	80033c4 <check_if_file_exists>
 8003856:	4603      	mov	r3, r0
 8003858:	f083 0301 	eor.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <handle_user_verification+0xa8>
		//Template no encontrado
		send_error(DISPLAY_TEMPLATE_NOT_FOUND);
 8003862:	200f      	movs	r0, #15
 8003864:	f001 fb06 	bl	8004e74 <send_error>
		xSemaphoreGive(keypad_sd_sync);
 8003868:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <handle_user_verification+0xec>)
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	2300      	movs	r3, #0
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	f00c fa3f 	bl	800fcf4 <xQueueGenericSend>
		return;
 8003876:	e01d      	b.n	80038b4 <handle_user_verification+0xe4>
	}
	//El template existe, procedo al reconocimiento de voz
	message = recognize_user_voice(template_path, user_name) ? DISPLAY_ACCESS_GRANTED : DISPLAY_ACCESS_DENIED;
 8003878:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800387c:	f107 0308 	add.w	r3, r7, #8
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fff6 	bl	8004874 <recognize_user_voice>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <handle_user_verification+0xc2>
 800388e:	2308      	movs	r3, #8
 8003890:	e000      	b.n	8003894 <handle_user_verification+0xc4>
 8003892:	2309      	movs	r3, #9
 8003894:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	//Envio mensaje al display
	send_message(message, BLOCKING);
 8003898:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800389c:	2101      	movs	r1, #1
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 fac4 	bl	8004e2c <send_message>

	//Cedo semaforo para que el keypad pueda continuar ejecutandose
	xSemaphoreGive(keypad_sd_sync);
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <handle_user_verification+0xec>)
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	2300      	movs	r3, #0
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	f00c fa21 	bl	800fcf4 <xQueueGenericSend>
	return;
 80038b2:	bf00      	nop
}
 80038b4:	3768      	adds	r7, #104	@ 0x68
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000908 	.word	0x20000908
 80038c0:	08015048 	.word	0x08015048

080038c4 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80038ce:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 80038d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80038d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038dc:	db0a      	blt.n	80038f4 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80038de:	ed97 0a01 	vldr	s0, [r7, #4]
 80038e2:	f011 fa5d 	bl	8014da0 <sqrtf>
 80038e6:	eef0 7a40 	vmov.f32	s15, s0
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80038f0:	2300      	movs	r3, #0
 80038f2:	e005      	b.n	8003900 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <euclidean_distance>:
#define __FPU_PRESENT  1U
#define ARM_MATH_CM4
#include "arm_math.h"
#include "common_utils.h"

float32_t euclidean_distance(float32_t *array_1, float32_t *array_2){
 8003908:	b580      	push	{r7, lr}
 800390a:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	f107 0310 	add.w	r3, r7, #16
 8003916:	f843 0c0c 	str.w	r0, [r3, #-12]
 800391a:	f107 0310 	add.w	r3, r7, #16
 800391e:	f843 1c10 	str.w	r1, [r3, #-16]
	float32_t diff[FEATURE_SIZE] = {0};
 8003922:	f107 0310 	add.w	r3, r7, #16
 8003926:	4618      	mov	r0, r3
 8003928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800392c:	461a      	mov	r2, r3
 800392e:	2100      	movs	r1, #0
 8003930:	f010 f981 	bl	8013c36 <memset>
	float32_t distance = 0;
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	461a      	mov	r2, r3
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	f842 3c04 	str.w	r3, [r2, #-4]

	//Resto vectores
	arm_sub_f32(array_1, array_2, diff, FEATURE_SIZE);
 8003942:	f107 0210 	add.w	r2, r7, #16
 8003946:	f107 0310 	add.w	r3, r7, #16
 800394a:	4619      	mov	r1, r3
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	4618      	mov	r0, r3
 8003952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003956:	f851 1c10 	ldr.w	r1, [r1, #-16]
 800395a:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 800395e:	f00f fc73 	bl	8013248 <arm_sub_f32>

	//Calculo la suma de los cuadrados
	arm_dot_prod_f32(diff, diff, FEATURE_SIZE, &distance);
 8003962:	f107 0310 	add.w	r3, r7, #16
 8003966:	3b04      	subs	r3, #4
 8003968:	f107 0110 	add.w	r1, r7, #16
 800396c:	f107 0010 	add.w	r0, r7, #16
 8003970:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003974:	f00f fce4 	bl	8013340 <arm_dot_prod_f32>

	//Calculo la raiz para obtener la distancia euclideana
	arm_sqrt_f32(distance, &distance);
 8003978:	f107 0310 	add.w	r3, r7, #16
 800397c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003980:	f107 0310 	add.w	r3, r7, #16
 8003984:	3b04      	subs	r3, #4
 8003986:	4618      	mov	r0, r3
 8003988:	eeb0 0a67 	vmov.f32	s0, s15
 800398c:	f7ff ff9a 	bl	80038c4 <arm_sqrt_f32>

	//Devuelvo distancia calculada
	return distance;
 8003990:	f107 0310 	add.w	r3, r7, #16
 8003994:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8003998:	ee07 3a90 	vmov	s15, r3
}
 800399c:	eeb0 0a67 	vmov.f32	s0, s15
 80039a0:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <filter_signal>:
#include "processing_functions.h"
#define NUM_TAPS 401
#define STATE_SIZE 	(NUM_TAPS + BLOCK_SIZE - 1)
#define ENERGY_THRESHOLD 0.001000f

bool filter_signal(char *input_file, char *output_file){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	f5ad 4dcc 	sub.w	sp, sp, #26112	@ 0x6600
 80039b2:	b09c      	sub	sp, #112	@ 0x70
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 80039ba:	f2a3 636c 	subw	r3, r3, #1644	@ 0x66c
 80039be:	6018      	str	r0, [r3, #0]
 80039c0:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 80039c4:	f5a3 63ce 	sub.w	r3, r3, #1648	@ 0x670
 80039c8:	6019      	str	r1, [r3, #0]
	//Declaro vectores de procesamiento y variables a utilizar
	arm_fir_instance_f32 fir_instance;
	float32_t voice_block[BLOCK_SIZE] = {0};
 80039ca:	f507 438c 	add.w	r3, r7, #17920	@ 0x4600
 80039ce:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 80039d2:	3b20      	subs	r3, #32
 80039d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f010 f92b 	bl	8013c36 <memset>
	float32_t filtered_block[BLOCK_SIZE] = {0};
 80039e0:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 80039e4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80039e8:	3b20      	subs	r3, #32
 80039ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f010 f920 	bl	8013c36 <memset>
	float32_t state_vector[STATE_SIZE] = {0};
 80039f6:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 80039fa:	f5a3 63cc 	sub.w	r3, r3, #1632	@ 0x660
 80039fe:	4618      	mov	r0, r3
 8003a00:	f44f 5319 	mov.w	r3, #9792	@ 0x2640
 8003a04:	461a      	mov	r2, r3
 8003a06:	2100      	movs	r1, #0
 8003a08:	f010 f915 	bl	8013c36 <memset>
	uint32_t last_pos = 0;
 8003a0c:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8003a10:	f2a3 6364 	subw	r3, r3, #1636	@ 0x664
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
	uint32_t num_of_blocks;
	uint32_t remaining_samples;
	bool res;

	//Inicializo filtro fir
	initialize_filter(&fir_instance, state_vector, BLOCK_SIZE);
 8003a18:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003a1c:	3b60      	subs	r3, #96	@ 0x60
 8003a1e:	f507 40cc 	add.w	r0, r7, #26112	@ 0x6600
 8003a22:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 8003a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f000 fc42 	bl	80042b4 <initialize_filter>

	//Calculo la cantidad de bloques
	file_size = get_file_size(input_file);
 8003a30:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8003a34:	f2a3 636c 	subw	r3, r3, #1644	@ 0x66c
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	f7ff fca7 	bl	800338c <get_file_size>
 8003a3e:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003a42:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003a46:	6018      	str	r0, [r3, #0]
	num_of_blocks = file_size / (FLOAT_SIZE_BYTES(BLOCK_SIZE));
 8003a48:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003a4c:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	0b5b      	lsrs	r3, r3, #13
 8003a54:	f507 42cc 	add.w	r2, r7, #26112	@ 0x6600
 8003a58:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003a5c:	6013      	str	r3, [r2, #0]
	remaining_samples = (file_size / sizeof(float32_t)) % BLOCK_SIZE;
 8003a5e:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003a62:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a6e:	f507 42cc 	add.w	r2, r7, #26112	@ 0x6600
 8003a72:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003a76:	6013      	str	r3, [r2, #0]

	for(uint32_t i = 0; i < num_of_blocks; i++){
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f507 42cc 	add.w	r2, r7, #26112	@ 0x6600
 8003a7e:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e066      	b.n	8003b54 <filter_signal+0x1a8>
		//Leo bloque teniendo en cuenta el solapamiento
		res = read_data_from_sd(input_file, (void *) voice_block, FLOAT_SIZE_BYTES(BLOCK_SIZE), &last_pos);
 8003a86:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003a8a:	3b64      	subs	r3, #100	@ 0x64
 8003a8c:	f507 418c 	add.w	r1, r7, #17920	@ 0x4600
 8003a90:	f101 0170 	add.w	r1, r1, #112	@ 0x70
 8003a94:	3920      	subs	r1, #32
 8003a96:	f507 62ce 	add.w	r2, r7, #1648	@ 0x670
 8003a9a:	f2a2 606c 	subw	r0, r2, #1644	@ 0x66c
 8003a9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aa2:	6800      	ldr	r0, [r0, #0]
 8003aa4:	f7ff fb4e 	bl	8003144 <read_data_from_sd>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f507 42cc 	add.w	r2, r7, #26112	@ 0x6600
 8003aae:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 8003ab2:	7013      	strb	r3, [r2, #0]
		if(!res){
 8003ab4:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003ab8:	f103 035f 	add.w	r3, r3, #95	@ 0x5f
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	f083 0301 	eor.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d004      	beq.n	8003ad2 <filter_signal+0x126>
			//Manejo error de lectura en SD
			send_error(DISPLAY_READ_SD_ERROR);
 8003ac8:	2013      	movs	r0, #19
 8003aca:	f001 f9d3 	bl	8004e74 <send_error>
			return false;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e0c4      	b.n	8003c5c <filter_signal+0x2b0>
		}

		//Filtro el bloque
		filter_block(&fir_instance, voice_block, filtered_block, BLOCK_SIZE);
 8003ad2:	f507 5219 	add.w	r2, r7, #9792	@ 0x2640
 8003ad6:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003ada:	3a20      	subs	r2, #32
 8003adc:	f507 418c 	add.w	r1, r7, #17920	@ 0x4600
 8003ae0:	f101 0170 	add.w	r1, r1, #112	@ 0x70
 8003ae4:	3920      	subs	r1, #32
 8003ae6:	f507 40cc 	add.w	r0, r7, #26112	@ 0x6600
 8003aea:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 8003aee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003af2:	f000 fbf5 	bl	80042e0 <filter_block>

		//Guardo bloque filtrado en archivo
		res = save_data_on_sd(output_file, (void *) filtered_block, FLOAT_SIZE_BYTES(BLOCK_SIZE));
 8003af6:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 8003afa:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003afe:	3b20      	subs	r3, #32
 8003b00:	f507 62ce 	add.w	r2, r7, #1648	@ 0x670
 8003b04:	f5a2 60ce 	sub.w	r0, r2, #1648	@ 0x670
 8003b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6800      	ldr	r0, [r0, #0]
 8003b10:	f7ff fada 	bl	80030c8 <save_data_on_sd>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f507 42cc 	add.w	r2, r7, #26112	@ 0x6600
 8003b1a:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 8003b1e:	7013      	strb	r3, [r2, #0]
		if(!res){
 8003b20:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003b24:	f103 035f 	add.w	r3, r3, #95	@ 0x5f
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	f083 0301 	eor.w	r3, r3, #1
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <filter_signal+0x192>
			//Manejo error de lectura en SD
			send_error(DISPLAY_WRITE_SD_ERROR);
 8003b34:	2014      	movs	r0, #20
 8003b36:	f001 f99d 	bl	8004e74 <send_error>
			return false;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e08e      	b.n	8003c5c <filter_signal+0x2b0>
	for(uint32_t i = 0; i < num_of_blocks; i++){
 8003b3e:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003b42:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	f507 42cc 	add.w	r2, r7, #26112	@ 0x6600
 8003b4e:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003b58:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003b62:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d38c      	bcc.n	8003a86 <filter_signal+0xda>
		}
	}

	//Verifico si hay que procesar muestras restantes
	if(remaining_samples > 0){
 8003b6c:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003b70:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d06f      	beq.n	8003c5a <filter_signal+0x2ae>
		//Hago zero padding en el vector de voz para completar el block size
		arm_fill_f32(0.0f, voice_block, BLOCK_SIZE);
 8003b7a:	f507 438c 	add.w	r3, r7, #17920	@ 0x4600
 8003b7e:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8003b82:	3b20      	subs	r3, #32
 8003b84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b88:	4618      	mov	r0, r3
 8003b8a:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8003c68 <filter_signal+0x2bc>
 8003b8e:	f00e f9dd 	bl	8011f4c <arm_fill_f32>

		//Leo muestras restantes
		res = read_data_from_sd(input_file, (void *) voice_block, FLOAT_SIZE_BYTES(remaining_samples), &last_pos);
 8003b92:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003b96:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	009a      	lsls	r2, r3, #2
 8003b9e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003ba2:	3b64      	subs	r3, #100	@ 0x64
 8003ba4:	f507 418c 	add.w	r1, r7, #17920	@ 0x4600
 8003ba8:	f101 0170 	add.w	r1, r1, #112	@ 0x70
 8003bac:	3920      	subs	r1, #32
 8003bae:	f507 60ce 	add.w	r0, r7, #1648	@ 0x670
 8003bb2:	f2a0 606c 	subw	r0, r0, #1644	@ 0x66c
 8003bb6:	6800      	ldr	r0, [r0, #0]
 8003bb8:	f7ff fac4 	bl	8003144 <read_data_from_sd>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f507 42cc 	add.w	r2, r7, #26112	@ 0x6600
 8003bc2:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 8003bc6:	7013      	strb	r3, [r2, #0]
		if(!res){
 8003bc8:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003bcc:	f103 035f 	add.w	r3, r3, #95	@ 0x5f
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	f083 0301 	eor.w	r3, r3, #1
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <filter_signal+0x23a>
			//Manejo error de lectura en SD
			send_error(DISPLAY_READ_SD_ERROR);
 8003bdc:	2013      	movs	r0, #19
 8003bde:	f001 f949 	bl	8004e74 <send_error>
			return false;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e03a      	b.n	8003c5c <filter_signal+0x2b0>
		}

		//Filtro muestras restantes
		filter_block(&fir_instance, voice_block, filtered_block, BLOCK_SIZE);
 8003be6:	f507 5219 	add.w	r2, r7, #9792	@ 0x2640
 8003bea:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003bee:	3a20      	subs	r2, #32
 8003bf0:	f507 418c 	add.w	r1, r7, #17920	@ 0x4600
 8003bf4:	f101 0170 	add.w	r1, r1, #112	@ 0x70
 8003bf8:	3920      	subs	r1, #32
 8003bfa:	f507 40cc 	add.w	r0, r7, #26112	@ 0x6600
 8003bfe:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 8003c02:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c06:	f000 fb6b 	bl	80042e0 <filter_block>

		//Guardo los datos filtrados restantes
		res = save_data_on_sd(output_file, (void *) filtered_block, FLOAT_SIZE_BYTES(remaining_samples));
 8003c0a:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003c0e:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	009a      	lsls	r2, r3, #2
 8003c16:	f507 5319 	add.w	r3, r7, #9792	@ 0x2640
 8003c1a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003c1e:	3b20      	subs	r3, #32
 8003c20:	f507 61ce 	add.w	r1, r7, #1648	@ 0x670
 8003c24:	f5a1 60ce 	sub.w	r0, r1, #1648	@ 0x670
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6800      	ldr	r0, [r0, #0]
 8003c2c:	f7ff fa4c 	bl	80030c8 <save_data_on_sd>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f507 42cc 	add.w	r2, r7, #26112	@ 0x6600
 8003c36:	f102 025f 	add.w	r2, r2, #95	@ 0x5f
 8003c3a:	7013      	strb	r3, [r2, #0]
		if(!res){
 8003c3c:	f507 43cc 	add.w	r3, r7, #26112	@ 0x6600
 8003c40:	f103 035f 	add.w	r3, r3, #95	@ 0x5f
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	f083 0301 	eor.w	r3, r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <filter_signal+0x2ae>
			//Manejo error de lectura en SD
			send_error(DISPLAY_WRITE_SD_ERROR);
 8003c50:	2014      	movs	r0, #20
 8003c52:	f001 f90f 	bl	8004e74 <send_error>
			return false;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e000      	b.n	8003c5c <filter_signal+0x2b0>
		}
	}

	//Devuelvo false si todas las operaciones de lectura / escritura fueron correctas. Caso contrario false.
	return true;
 8003c5a:	2301      	movs	r3, #1
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f507 47cc 	add.w	r7, r7, #26112	@ 0x6600
 8003c62:	3770      	adds	r7, #112	@ 0x70
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	00000000 	.word	0x00000000

08003c6c <get_fft_feature>:



bool get_fft_feature(char *input_file, char *output_file){
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	f5ad 4da0 	sub.w	sp, sp, #20480	@ 0x5000
 8003c72:	b090      	sub	sp, #64	@ 0x40
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003c7a:	f843 0c3c 	str.w	r0, [r3, #-60]
 8003c7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003c82:	f843 1c40 	str.w	r1, [r3, #-64]
	//Declaro vectores de procesamiento y variables importantes
	arm_rfft_fast_instance_f32 rfft_instance;
	float32_t voice_block[BLOCK_SIZE] = {0};
 8003c86:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8003c8a:	3b2c      	subs	r3, #44	@ 0x2c
 8003c8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f00f ffcf 	bl	8013c36 <memset>
	float32_t fft_block[BLOCK_SIZE] = {0};
 8003c98:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8003c9c:	3b2c      	subs	r3, #44	@ 0x2c
 8003c9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f00f ffc6 	bl	8013c36 <memset>
	float32_t feature_block[FEATURE_SIZE] = {0};
 8003caa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003cae:	3b2c      	subs	r3, #44	@ 0x2c
 8003cb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f00f ffbd 	bl	8013c36 <memset>
	float32_t energy;
	uint32_t step = BLOCK_SIZE - OVERLAP;
 8003cbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cc0:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8003cc4:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8003cc8:	6013      	str	r3, [r2, #0]
	uint32_t file_size;
	uint32_t total_samples;
	bool res;

	//Calculo cantidad de bloques (se espera que sea multiplo de block size)
	file_size = get_file_size(input_file);
 8003cca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003cce:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 8003cd2:	f7ff fb5b 	bl	800338c <get_file_size>
 8003cd6:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003cda:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003cde:	6018      	str	r0, [r3, #0]
	total_samples = file_size / sizeof(float32_t);
 8003ce0:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003ce4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8003cf0:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003cf4:	6013      	str	r3, [r2, #0]
	//num_of_blocks = (total_samples - OVERLAP) / OVERLAP;

	//Inicializo la fft
	res = initialize_fft(&rfft_instance, BLOCK_SIZE);
 8003cf6:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003cfa:	f103 0314 	add.w	r3, r3, #20
 8003cfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fa60 	bl	80041c8 <initialize_fft>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8003d0e:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 8003d12:	7013      	strb	r3, [r2, #0]
	if(!res){
 8003d14:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003d18:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	f083 0301 	eor.w	r3, r3, #1
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <get_fft_feature+0xc6>
		send_error(DISPLAY_MEMORY_ERROR);											//Envio error al display
 8003d28:	2012      	movs	r0, #18
 8003d2a:	f001 f8a3 	bl	8004e74 <send_error>
		return false;																//No se pudo completar correctamente la operacion
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e0ce      	b.n	8003ed0 <get_fft_feature+0x264>
	}

	//Leo de a bloques, con solapamiento de 50%, y obtengo los features
	for(uint32_t start = 0; start <= total_samples - BLOCK_SIZE; start += step){
 8003d32:	2300      	movs	r3, #0
 8003d34:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8003d38:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e0b7      	b.n	8003eb0 <get_fft_feature+0x244>
		//Leo bloque desde archivo
		last_pos = FLOAT_SIZE_BYTES(start);																		//Conversion a cantidad de bytes
 8003d40:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003d44:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003d50:	f842 3c34 	str.w	r3, [r2, #-52]
		res = read_data_from_sd(input_file, (void *) voice_block, FLOAT_SIZE_BYTES(BLOCK_SIZE), &last_pos);
 8003d54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003d58:	3b34      	subs	r3, #52	@ 0x34
 8003d5a:	f507 5141 	add.w	r1, r7, #12352	@ 0x3040
 8003d5e:	392c      	subs	r1, #44	@ 0x2c
 8003d60:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003d64:	4610      	mov	r0, r2
 8003d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d6a:	f850 0c3c 	ldr.w	r0, [r0, #-60]
 8003d6e:	f7ff f9e9 	bl	8003144 <read_data_from_sd>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8003d78:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 8003d7c:	7013      	strb	r3, [r2, #0]
		if(!res){
 8003d7e:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003d82:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f083 0301 	eor.w	r3, r3, #1
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <get_fft_feature+0x130>
			//Manejo error de lectura en SD
			send_error(DISPLAY_READ_SD_ERROR);
 8003d92:	2013      	movs	r0, #19
 8003d94:	f001 f86e 	bl	8004e74 <send_error>
			return false;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e099      	b.n	8003ed0 <get_fft_feature+0x264>
		}

		//Aplico ventana de hamming al bloque
		apply_hamming_windowing(voice_block, BLOCK_SIZE);
 8003d9c:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8003da0:	3b2c      	subs	r3, #44	@ 0x2c
 8003da2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 faac 	bl	8004304 <apply_hamming_windowing>

		//Calculo la fft
		calculate_rfft(&rfft_instance, voice_block, fft_block);
 8003dac:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8003db0:	3a2c      	subs	r2, #44	@ 0x2c
 8003db2:	f507 5341 	add.w	r3, r7, #12352	@ 0x3040
 8003db6:	3b2c      	subs	r3, #44	@ 0x2c
 8003db8:	f507 40a0 	add.w	r0, r7, #20480	@ 0x5000
 8003dbc:	f100 0014 	add.w	r0, r0, #20
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f000 fa19 	bl	80041f8 <calculate_rfft>

		//Calculo la magnitud de la fft
		calculate_magnitude(fft_block, feature_block, FEATURE_SIZE);											//El tamaño es la cantidad de nros complejos en el vector de entrada
 8003dc6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003dca:	392c      	subs	r1, #44	@ 0x2c
 8003dcc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8003dd0:	3b2c      	subs	r3, #44	@ 0x2c
 8003dd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fa1e 	bl	8004218 <calculate_magnitude>

		//Escalo la magnitud de la fft para escalar la energia
		arm_scale_f32(feature_block, 1.0f / BLOCK_SIZE, feature_block, BLOCK_SIZE);
 8003ddc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003de0:	392c      	subs	r1, #44	@ 0x2c
 8003de2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003de6:	3b2c      	subs	r3, #44	@ 0x2c
 8003de8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dec:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8003edc <get_fft_feature+0x270>
 8003df0:	4618      	mov	r0, r3
 8003df2:	f00f fa6f 	bl	80132d4 <arm_scale_f32>

		//Calculo la energia del bloque
		arm_dot_prod_f32(feature_block, feature_block, FEATURE_SIZE, &energy);
 8003df6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003dfa:	3b30      	subs	r3, #48	@ 0x30
 8003dfc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003e00:	392c      	subs	r1, #44	@ 0x2c
 8003e02:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003e06:	382c      	subs	r0, #44	@ 0x2c
 8003e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e0c:	f00f fa98 	bl	8013340 <arm_dot_prod_f32>

		//Verifico que supere el threshold para comprobar que hay una voz presente
		if(energy > ENERGY_THRESHOLD){
 8003e10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e14:	ed53 7a0c 	vldr	s15, [r3, #-48]	@ 0xffffffd0
 8003e18:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8003ee0 <get_fft_feature+0x274>
 8003e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	dd08      	ble.n	8003e38 <get_fft_feature+0x1cc>
			//Normalizo el array
			normalize_array(feature_block, FEATURE_SIZE);
 8003e26:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e2a:	3b2c      	subs	r3, #44	@ 0x2c
 8003e2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fa00 	bl	8004236 <normalize_array>
 8003e36:	e009      	b.n	8003e4c <get_fft_feature+0x1e0>
		}
		else{
			//Si no hay voz presente se llena con ceros el vector para explicitar que no hay voz
			arm_fill_f32(0.0f, feature_block, FEATURE_SIZE);
 8003e38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e3c:	3b2c      	subs	r3, #44	@ 0x2c
 8003e3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e42:	4618      	mov	r0, r3
 8003e44:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8003ee4 <get_fft_feature+0x278>
 8003e48:	f00e f880 	bl	8011f4c <arm_fill_f32>
		}

		//Guardo bloque procesado en la memoria SD
		res = save_data_on_sd(output_file, (void *) feature_block, FLOAT_SIZE_BYTES(FEATURE_SIZE));
 8003e4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e50:	3b2c      	subs	r3, #44	@ 0x2c
 8003e52:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003e56:	4610      	mov	r0, r2
 8003e58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f850 0c40 	ldr.w	r0, [r0, #-64]
 8003e62:	f7ff f931 	bl	80030c8 <save_data_on_sd>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8003e6c:	f102 022f 	add.w	r2, r2, #47	@ 0x2f
 8003e70:	7013      	strb	r3, [r2, #0]
		if(!res){
 8003e72:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003e76:	f103 032f 	add.w	r3, r3, #47	@ 0x2f
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	f083 0301 	eor.w	r3, r3, #1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <get_fft_feature+0x224>
			//Manejo error de lectura en SD
			send_error(DISPLAY_WRITE_SD_ERROR);
 8003e86:	2014      	movs	r0, #20
 8003e88:	f000 fff4 	bl	8004e74 <send_error>
			return false;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	e01f      	b.n	8003ed0 <get_fft_feature+0x264>
	for(uint32_t start = 0; start <= total_samples - BLOCK_SIZE; start += step){
 8003e90:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003e94:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003e9e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8003eaa:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	f507 43a0 	add.w	r3, r7, #20480	@ 0x5000
 8003eb4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003ebe:	f507 42a0 	add.w	r2, r7, #20480	@ 0x5000
 8003ec2:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f67f af39 	bls.w	8003d40 <get_fft_feature+0xd4>
		}
	}

	//Features extraidas exitosamente
	return true;
 8003ece:	2301      	movs	r3, #1
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f507 47a0 	add.w	r7, r7, #20480	@ 0x5000
 8003ed6:	3740      	adds	r7, #64	@ 0x40
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	3a000000 	.word	0x3a000000
 8003ee0:	3a83126f 	.word	0x3a83126f
 8003ee4:	00000000 	.word	0x00000000

08003ee8 <initialize_sd_and_verify_files>:
 * se lo crea.
 *
 * @param error_message Puntero a variable display_message_t usada para enviar mensajes al display.
 * @return true si los archivos estan en la memoria SD, false si no los encuentra o no los puede crear.
 */
bool initialize_sd_and_verify_files(display_message_t *error_message){
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	bool res;
	//Verifico existencia de la base de datos
	res = check_if_file_exists(DATABASE);
 8003ef0:	4818      	ldr	r0, [pc, #96]	@ (8003f54 <initialize_sd_and_verify_files+0x6c>)
 8003ef2:	f7ff fa67 	bl	80033c4 <check_if_file_exists>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	73fb      	strb	r3, [r7, #15]
	if(!res){
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	f083 0301 	eor.w	r3, r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <initialize_sd_and_verify_files+0x28>
		*error_message = DISPLAY_DATABASE_NOT_FOUND;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2210      	movs	r2, #16
 8003f0a:	701a      	strb	r2, [r3, #0]
		return false;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e01c      	b.n	8003f4a <initialize_sd_and_verify_files+0x62>
	}

	//Verifico existencia del registro de acceso, o lo creo en su defecto
	res = check_if_file_exists(REGISTER);
 8003f10:	4811      	ldr	r0, [pc, #68]	@ (8003f58 <initialize_sd_and_verify_files+0x70>)
 8003f12:	f7ff fa57 	bl	80033c4 <check_if_file_exists>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]
	if(!res){
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	f083 0301 	eor.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d010      	beq.n	8003f48 <initialize_sd_and_verify_files+0x60>
		res = create_file(REGISTER, "Fecha Usuario Estado\n");
 8003f26:	490d      	ldr	r1, [pc, #52]	@ (8003f5c <initialize_sd_and_verify_files+0x74>)
 8003f28:	480b      	ldr	r0, [pc, #44]	@ (8003f58 <initialize_sd_and_verify_files+0x70>)
 8003f2a:	f7ff fa61 	bl	80033f0 <create_file>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	73fb      	strb	r3, [r7, #15]
		if(!res){
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	f083 0301 	eor.w	r3, r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <initialize_sd_and_verify_files+0x60>
			*error_message = DISPLAY_REGISTER_NOT_CREATED;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2211      	movs	r2, #17
 8003f42:	701a      	strb	r2, [r3, #0]
			return false;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <initialize_sd_and_verify_files+0x62>
		}
	}

	//Archivos y SD inicializados correctamente
	return true;
 8003f48:	2301      	movs	r3, #1
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	08015050 	.word	0x08015050
 8003f58:	08015060 	.word	0x08015060
 8003f5c:	08015070 	.word	0x08015070

08003f60 <process_user_key>:
 *
 * @param user_key Puntero char que apunta al inicio de la secuencia.
 * @param user_name Puntero al inicio del vector que contendra el nombre de usuario.
 * @return true si se encontro el usuario, false en caso contrario.
 */
bool process_user_key(char *user_key, char *user_name){
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
	//Busco el usuario
	if(!search_user(DATABASE, user_key, user_name)){
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	480a      	ldr	r0, [pc, #40]	@ (8003f98 <process_user_key+0x38>)
 8003f70:	f7ff fb60 	bl	8003634 <search_user>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f083 0301 	eor.w	r3, r3, #1
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <process_user_key+0x24>
		//Devuelve false si no lo encuentra
		return false;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e004      	b.n	8003f8e <process_user_key+0x2e>
	}

	//Usuario encontrado
	clear_char(user_name, '\r');										//Limpio '\r' agregado por windows
 8003f84:	210d      	movs	r1, #13
 8003f86:	6838      	ldr	r0, [r7, #0]
 8003f88:	f000 ff30 	bl	8004dec <clear_char>
	return true;														//True indica usuario encontrado
 8003f8c:	2301      	movs	r3, #1
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	08015050 	.word	0x08015050

08003f9c <build_entry_message>:
 * @param entry Puntero char al vector que contendra la entrada del registro.
 * @param user_name Puntero char al vector que contiene el nombre de usuario (si es que se tiene).
 * @param status String con el estado del acceso (Concedido o Denegado).
 * @return None
 */
void build_entry_message(char *entry, char *user_name, const char *status){
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
	get_time_from_rtc(entry);						//Obtengo fecha y hora
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff fa63 	bl	8003474 <get_time_from_rtc>
	if(user_name != NULL){
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <build_entry_message+0x22>
		strcat(entry, user_name);					//Concateno nombre de usuario
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f00f fe45 	bl	8013c46 <strcat>
 8003fbc:	e00d      	b.n	8003fda <build_entry_message+0x3e>
	}
	else{
		strcat(entry, "Desconocido");				//Si no existe, concateno desconocido
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7fc f978 	bl	80002b4 <strlen>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	4a13      	ldr	r2, [pc, #76]	@ (800401c <build_entry_message+0x80>)
 8003fce:	461c      	mov	r4, r3
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fd4:	6020      	str	r0, [r4, #0]
 8003fd6:	6061      	str	r1, [r4, #4]
 8003fd8:	60a2      	str	r2, [r4, #8]
	}
	strcat(entry, " ");
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7fc f96a 	bl	80002b4 <strlen>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	490d      	ldr	r1, [pc, #52]	@ (8004020 <build_entry_message+0x84>)
 8003fea:	461a      	mov	r2, r3
 8003fec:	460b      	mov	r3, r1
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	8013      	strh	r3, [r2, #0]
	strcat(entry, status);							//Concateno estado de acceso
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f00f fe26 	bl	8013c46 <strcat>
	strcat(entry, "\n");
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7fc f95a 	bl	80002b4 <strlen>
 8004000:	4603      	mov	r3, r0
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	4906      	ldr	r1, [pc, #24]	@ (8004024 <build_entry_message+0x88>)
 800400a:	461a      	mov	r2, r3
 800400c:	460b      	mov	r3, r1
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	8013      	strh	r3, [r2, #0]
	return;
 8004012:	bf00      	nop
}
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	bd90      	pop	{r4, r7, pc}
 800401a:	bf00      	nop
 800401c:	08015088 	.word	0x08015088
 8004020:	08015094 	.word	0x08015094
 8004024:	08015098 	.word	0x08015098

08004028 <handle_keypad_input>:
	uint8_t current_index;
	TickType_t start_time;
}keypad_context_t;

/*================[Public functions]=========================*/
display_message_t handle_keypad_input(char input, char *buffer, bool *send_flag){
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	73fb      	strb	r3, [r7, #15]
	static keypad_context_t context = { .current_state = WAITING_FOR_DIGIT_1,
										.current_index = 0,
										.start_time = 0,					};
	display_message_t current_message = DISPLAY_IDLE;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 800403a:	4b62      	ldr	r3, [pc, #392]	@ (80041c4 <handle_keypad_input+0x19c>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b07      	cmp	r3, #7
 8004040:	f000 80a1 	beq.w	8004186 <handle_keypad_input+0x15e>
 8004044:	2b07      	cmp	r3, #7
 8004046:	f300 80aa 	bgt.w	800419e <handle_keypad_input+0x176>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <handle_keypad_input+0x36>
 800404e:	2b00      	cmp	r3, #0
 8004050:	f2c0 80a5 	blt.w	800419e <handle_keypad_input+0x176>
 8004054:	3b01      	subs	r3, #1
 8004056:	2b05      	cmp	r3, #5
 8004058:	f200 80a1 	bhi.w	800419e <handle_keypad_input+0x176>
 800405c:	e01c      	b.n	8004098 <handle_keypad_input+0x70>
	case WAITING_FOR_DIGIT_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d016      	beq.n	8004092 <handle_keypad_input+0x6a>
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b23      	cmp	r3, #35	@ 0x23
 8004068:	d013      	beq.n	8004092 <handle_keypad_input+0x6a>
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	2b2a      	cmp	r3, #42	@ 0x2a
 800406e:	d010      	beq.n	8004092 <handle_keypad_input+0x6a>
			buffer[0] = input;													//Guardo digito en el buffer
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 8004076:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004078:	2201      	movs	r2, #1
 800407a:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 800407c:	f00c fe10 	bl	8010ca0 <xTaskGetTickCount>
 8004080:	4603      	mov	r3, r0
 8004082:	4a50      	ldr	r2, [pc, #320]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004084:	6053      	str	r3, [r2, #4]
			context.current_state = WAITING_FOR_DIGIT_2;						//Avanzo al siguiente estado
 8004086:	4b4f      	ldr	r3, [pc, #316]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_ENTER_DIGIT;
 800408c:	2302      	movs	r3, #2
 800408e:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = DISPLAY_IDLE;
		}
		break;
 8004090:	e093      	b.n	80041ba <handle_keypad_input+0x192>
			current_message = DISPLAY_IDLE;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]
		break;
 8004096:	e090      	b.n	80041ba <handle_keypad_input+0x192>
	case WAITING_FOR_DIGIT_3:
	case WAITING_FOR_DIGIT_4:
	case WAITING_FOR_DIGIT_5:
	case WAITING_FOR_DIGIT_6:
	case WAITING_FOR_CONFIRMATION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8004098:	f00c fe02 	bl	8010ca0 <xTaskGetTickCount>
 800409c:	4602      	mov	r2, r0
 800409e:	4b49      	ldr	r3, [pc, #292]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d866      	bhi.n	800417a <handle_keypad_input+0x152>
			if(input != 0){
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d060      	beq.n	8004174 <handle_keypad_input+0x14c>
				if(input == BORRAR_DIGITO){
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b23      	cmp	r3, #35	@ 0x23
 80040b6:	d124      	bne.n	8004102 <handle_keypad_input+0xda>
					if(context.current_index > 0){
 80040b8:	4b42      	ldr	r3, [pc, #264]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d07b      	beq.n	80041b8 <handle_keypad_input+0x190>
						context.current_index--;
 80040c0:	4b40      	ldr	r3, [pc, #256]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	4b3e      	ldr	r3, [pc, #248]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040ca:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 80040cc:	4b3d      	ldr	r3, [pc, #244]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	461a      	mov	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	4413      	add	r3, r2
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 80040da:	f00c fde1 	bl	8010ca0 <xTaskGetTickCount>
 80040de:	4603      	mov	r3, r0
 80040e0:	4a38      	ldr	r2, [pc, #224]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040e2:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ERASE_DIGIT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > WAITING_FOR_DIGIT_1) ? context.current_state - 1 : WAITING_FOR_DIGIT_1;
 80040e8:	4b36      	ldr	r3, [pc, #216]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <handle_keypad_input+0xd2>
 80040f0:	4b34      	ldr	r3, [pc, #208]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	e000      	b.n	80040fc <handle_keypad_input+0xd4>
 80040fa:	2300      	movs	r3, #0
 80040fc:	4a31      	ldr	r2, [pc, #196]	@ (80041c4 <handle_keypad_input+0x19c>)
 80040fe:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = DISPLAY_TIMEOUT_EVENT;
		}
		break;
 8004100:	e05a      	b.n	80041b8 <handle_keypad_input+0x190>
				else if(input == ENTER){
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b2a      	cmp	r3, #42	@ 0x2a
 8004106:	d10d      	bne.n	8004124 <handle_keypad_input+0xfc>
					if(context.current_state == WAITING_FOR_CONFIRMATION){
 8004108:	4b2e      	ldr	r3, [pc, #184]	@ (80041c4 <handle_keypad_input+0x19c>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b06      	cmp	r3, #6
 800410e:	d103      	bne.n	8004118 <handle_keypad_input+0xf0>
						context.current_state = SEND_SEQUENCE_TO_SD;
 8004110:	4b2c      	ldr	r3, [pc, #176]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004112:	2207      	movs	r2, #7
 8004114:	701a      	strb	r2, [r3, #0]
		break;
 8004116:	e04f      	b.n	80041b8 <handle_keypad_input+0x190>
						context.current_state = INCOMPLETE_SEQUENCE;
 8004118:	4b2a      	ldr	r3, [pc, #168]	@ (80041c4 <handle_keypad_input+0x19c>)
 800411a:	2208      	movs	r2, #8
 800411c:	701a      	strb	r2, [r3, #0]
						current_message = DISPLAY_INCOMPLETE_SEQUENCE_EVENT;
 800411e:	230b      	movs	r3, #11
 8004120:	75fb      	strb	r3, [r7, #23]
		break;
 8004122:	e049      	b.n	80041b8 <handle_keypad_input+0x190>
					if(context.current_index < SEQUENCE_LENGTH){
 8004124:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004126:	785b      	ldrb	r3, [r3, #1]
 8004128:	2b05      	cmp	r3, #5
 800412a:	d845      	bhi.n	80041b8 <handle_keypad_input+0x190>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 800412c:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <handle_keypad_input+0x19c>)
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	b2d1      	uxtb	r1, r2
 8004134:	4a23      	ldr	r2, [pc, #140]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004136:	7051      	strb	r1, [r2, #1]
 8004138:	461a      	mov	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	7bfa      	ldrb	r2, [r7, #15]
 8004140:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 8004142:	4b20      	ldr	r3, [pc, #128]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004144:	785b      	ldrb	r3, [r3, #1]
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4413      	add	r3, r2
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8004150:	f00c fda6 	bl	8010ca0 <xTaskGetTickCount>
 8004154:	4603      	mov	r3, r0
 8004156:	4a1b      	ldr	r2, [pc, #108]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004158:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ENTER_DIGIT;
 800415a:	2302      	movs	r3, #2
 800415c:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != WAITING_FOR_CONFIRMATION){
 800415e:	4b19      	ldr	r3, [pc, #100]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b06      	cmp	r3, #6
 8004164:	d028      	beq.n	80041b8 <handle_keypad_input+0x190>
							context.current_state++;
 8004166:	4b17      	ldr	r3, [pc, #92]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	3301      	adds	r3, #1
 800416c:	b2da      	uxtb	r2, r3
 800416e:	4b15      	ldr	r3, [pc, #84]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004170:	701a      	strb	r2, [r3, #0]
		break;
 8004172:	e021      	b.n	80041b8 <handle_keypad_input+0x190>
				current_message = DISPLAY_IDLE;
 8004174:	2300      	movs	r3, #0
 8004176:	75fb      	strb	r3, [r7, #23]
		break;
 8004178:	e01e      	b.n	80041b8 <handle_keypad_input+0x190>
			context.current_state = TIMEOUT;
 800417a:	4b12      	ldr	r3, [pc, #72]	@ (80041c4 <handle_keypad_input+0x19c>)
 800417c:	2209      	movs	r2, #9
 800417e:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_TIMEOUT_EVENT;
 8004180:	230a      	movs	r3, #10
 8004182:	75fb      	strb	r3, [r7, #23]
		break;
 8004184:	e018      	b.n	80041b8 <handle_keypad_input+0x190>
	case SEND_SEQUENCE_TO_SD:
		*send_flag = 1;															//Habilito flag para enviar el string
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
		context.current_state = WAITING_FOR_DIGIT_1;
 800418c:	4b0d      	ldr	r3, [pc, #52]	@ (80041c4 <handle_keypad_input+0x19c>)
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 8004192:	4b0c      	ldr	r3, [pc, #48]	@ (80041c4 <handle_keypad_input+0x19c>)
 8004194:	2200      	movs	r2, #0
 8004196:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;								//Luego del procesamiento se vuelve al estado inicial
 8004198:	2301      	movs	r3, #1
 800419a:	75fb      	strb	r3, [r7, #23]
		break;
 800419c:	e00d      	b.n	80041ba <handle_keypad_input+0x192>
	case INCOMPLETE_SEQUENCE:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 800419e:	2107      	movs	r1, #7
 80041a0:	68b8      	ldr	r0, [r7, #8]
 80041a2:	f000 fe05 	bl	8004db0 <clear_buffer>
		context.current_state = WAITING_FOR_DIGIT_1;							//Vuelvo al estado inicial
 80041a6:	4b07      	ldr	r3, [pc, #28]	@ (80041c4 <handle_keypad_input+0x19c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <handle_keypad_input+0x19c>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
		break;
 80041b6:	e000      	b.n	80041ba <handle_keypad_input+0x192>
		break;
 80041b8:	bf00      	nop
	}
	return current_message;
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20002f34 	.word	0x20002f34

080041c8 <initialize_fft>:
#define __FPU_PRESENT  1U
#define ARM_MATH_CM4
#include "arm_math.h"
#include "common_utils.h"

bool initialize_fft(arm_rfft_fast_instance_f32 *rfft_instance, uint32_t block_size){
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
	arm_status status;
	status = arm_rfft_fast_init_f32(rfft_instance, block_size);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f00d ffa5 	bl	8012128 <arm_rfft_fast_init_f32>
 80041de:	4603      	mov	r3, r0
 80041e0:	73fb      	strb	r3, [r7, #15]
	if(status != ARM_MATH_SUCCESS){
 80041e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <initialize_fft+0x26>
		return false;											//Error al inicializar instancia de fft
 80041ea:	2300      	movs	r3, #0
 80041ec:	e000      	b.n	80041f0 <initialize_fft+0x28>
	}
	return true;
 80041ee:	2301      	movs	r3, #1
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <calculate_rfft>:

void calculate_rfft(arm_rfft_fast_instance_f32 *rfft_instance, float32_t *psrc, float32_t *pdst){
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
	/*Calculo la fft*/
	arm_rfft_fast_f32(rfft_instance, psrc, pdst, 0);					//El cero indica que se hace transformada, no antitransformada
 8004204:	2300      	movs	r3, #0
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f00e f810 	bl	8012230 <arm_rfft_fast_f32>
	return;
 8004210:	bf00      	nop
}
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <calculate_magnitude>:


void calculate_magnitude(float32_t *psrc, float32_t *pdst, uint32_t block_size){
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
	//Calculo el valor absoluto de la fft
	arm_cmplx_mag_f32(psrc, pdst, block_size);
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f00e fee5 	bl	8012ff8 <arm_cmplx_mag_f32>
	return;
 800422e:	bf00      	nop
}
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <normalize_array>:

void normalize_array(float32_t *psrc, uint32_t block_size){
 8004236:	b580      	push	{r7, lr}
 8004238:	b088      	sub	sp, #32
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
	float32_t min_val, max_val;
	uint32_t min_index, max_index;
	float32_t range;

	/*Encuentro el maximo y el minimo del array*/
	arm_min_f32(psrc, block_size, &min_val, &min_index);
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	f107 0214 	add.w	r2, r7, #20
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f00d fe9c 	bl	8011f88 <arm_min_f32>
	arm_max_f32(psrc, block_size, &max_val, &max_index);
 8004250:	f107 0308 	add.w	r3, r7, #8
 8004254:	f107 0210 	add.w	r2, r7, #16
 8004258:	6839      	ldr	r1, [r7, #0]
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f00d fefc 	bl	8012058 <arm_max_f32>

	/*Calculo el rango*/
	range = max_val - min_val;
 8004260:	ed97 7a04 	vldr	s14, [r7, #16]
 8004264:	edd7 7a05 	vldr	s15, [r7, #20]
 8004268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800426c:	edc7 7a06 	vstr	s15, [r7, #24]

	/*Normalizo el array*/
	for(size_t i = 0; i < block_size; i++){
 8004270:	2300      	movs	r3, #0
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e016      	b.n	80042a4 <normalize_array+0x6e>
		psrc[i] = (psrc[i] - min_val) / range;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	ed93 7a00 	vldr	s14, [r3]
 8004282:	edd7 7a05 	vldr	s15, [r7, #20]
 8004286:	ee77 6a67 	vsub.f32	s13, s14, s15
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	ed97 7a06 	vldr	s14, [r7, #24]
 8004296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800429a:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < block_size; i++){
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3301      	adds	r3, #1
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d3e4      	bcc.n	8004276 <normalize_array+0x40>
	}
	return;
 80042ac:	bf00      	nop
}
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <initialize_filter>:
    0.000053, -0.000068, -0.000243, -0.000179, 0.000046, 0.000116, -0.000037, -0.000146, -0.000023, 0.000164,
    0.000156, -0.000005, -0.000050, 0.000103, 0.000235, 0.000161, 0.000011, 0.000023, 0.000184, 0.000252,
    0.000127
};

void initialize_filter(arm_fir_instance_f32 *fir_instance, float32_t *state, uint32_t block_size){
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
	arm_fir_init_f32(fir_instance, NUM_TAPS,(float32_t *) fir_coefficients, state, block_size);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a05      	ldr	r2, [pc, #20]	@ (80042dc <initialize_filter+0x28>)
 80042c8:	f240 1191 	movw	r1, #401	@ 0x191
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f00e fc1d 	bl	8012b0c <arm_fir_init_f32>
	return;
 80042d2:	bf00      	nop
}
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000014 	.word	0x20000014

080042e0 <filter_block>:

void filter_block(arm_fir_instance_f32 *fir_instance, float32_t *psrc, float32_t *pdst, uint32_t block_size){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
	arm_fir_f32(fir_instance, psrc, pdst, block_size);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f00e fc1b 	bl	8012b30 <arm_fir_f32>
	return;
 80042fa:	bf00      	nop
}
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <apply_hamming_windowing>:
#define __FPU_PRESENT  1U
#define ARM_MATH_CM4
#include "arm_math.h"
#include "common_utils.h"

void apply_hamming_windowing(float32_t *psrc, uint32_t block_size){
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]

	// Constantes para la ventana de hamming
	const float32_t alpha = 0.54f;
 800430e:	4b21      	ldr	r3, [pc, #132]	@ (8004394 <apply_hamming_windowing+0x90>)
 8004310:	613b      	str	r3, [r7, #16]
	const float32_t beta = 0.46f;
 8004312:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <apply_hamming_windowing+0x94>)
 8004314:	60fb      	str	r3, [r7, #12]
	float32_t hamming_coeff;

	for(uint32_t i = 0; i < block_size; i++){
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e033      	b.n	8004384 <apply_hamming_windowing+0x80>
		// Calculo el coeficiente de hamming para la muestra actual
		hamming_coeff = alpha - beta * arm_cos_f32((2.0f * PI * i) / (block_size - 1));
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800439c <apply_hamming_windowing+0x98>
 800432a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	3b01      	subs	r3, #1
 8004332:	ee07 3a90 	vmov	s15, r3
 8004336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800433e:	eeb0 0a66 	vmov.f32	s0, s13
 8004342:	f00e ff41 	bl	80131c8 <arm_cos_f32>
 8004346:	eeb0 7a40 	vmov.f32	s14, s0
 800434a:	edd7 7a03 	vldr	s15, [r7, #12]
 800434e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004352:	ed97 7a04 	vldr	s14, [r7, #16]
 8004356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Aplico coeficiente de hamming a la muestra de la señal
		psrc[i] *= hamming_coeff;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	ed93 7a00 	vldr	s14, [r3]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	edd7 7a02 	vldr	s15, [r7, #8]
 8004376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800437a:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < block_size; i++){
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3301      	adds	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d3c7      	bcc.n	800431c <apply_hamming_windowing+0x18>
	}
	return;
 800438c:	bf00      	nop
}
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	3f0a3d71 	.word	0x3f0a3d71
 8004398:	3eeb851f 	.word	0x3eeb851f
 800439c:	40c90fdb 	.word	0x40c90fdb

080043a0 <generate_template>:
 * @return true si se capturaron correctamente las voces, false en caso contrario.
 */

//Defines asociados al template
#define NUM_OF_TEMPLATE_SAMPLES 20
bool generate_template(void){
 80043a0:	b580      	push	{r7, lr}
 80043a2:	f5ad 4d40 	sub.w	sp, sp, #49152	@ 0xc000
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
	uint16_t voice_buffer[AUDIO_BUFFER_SIZE] = {0};
 80043aa:	f107 0308 	add.w	r3, r7, #8
 80043ae:	3b04      	subs	r3, #4
 80043b0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f00f fc3d 	bl	8013c36 <memset>
	bool res;
	for(uint8_t i = 0; i < NUM_OF_TEMPLATE_SAMPLES; i++){
 80043bc:	2300      	movs	r3, #0
 80043be:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 80043c2:	f102 0207 	add.w	r2, r2, #7
 80043c6:	7013      	strb	r3, [r2, #0]
 80043c8:	e034      	b.n	8004434 <generate_template+0x94>
		//Envio mensaje al display para indicar que comienza reconocimiento de voz
		send_message(DISPLAY_START_SPEECH_REC, BLOCKING);
 80043ca:	2101      	movs	r1, #1
 80043cc:	2006      	movs	r0, #6
 80043ce:	f000 fd2d 	bl	8004e2c <send_message>

		//Capturo voz
		capture_voice(voice_buffer, AUDIO_BUFFER_SIZE);
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	3b04      	subs	r3, #4
 80043d8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 f837 	bl	8004450 <capture_voice>

		//Muestro en pantalla que se estan procesando los datos
		send_message(DISPLAY_PROCESSING_DATA, NON_BLOCKING);						//Se envia no bloqueante para seguir procesando datos mientras se muestra el mensaje
 80043e2:	2100      	movs	r1, #0
 80043e4:	2007      	movs	r0, #7
 80043e6:	f000 fd21 	bl	8004e2c <send_message>

		//Envio voz por uart
		res = send_uart((uint8_t *) voice_buffer, U16_SIZE_BYTES(AUDIO_BUFFER_SIZE));
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	3b04      	subs	r3, #4
 80043f0:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fd4b 	bl	8004e90 <send_uart>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 8004400:	f102 0206 	add.w	r2, r2, #6
 8004404:	7013      	strb	r3, [r2, #0]
		if(!res) return false;
 8004406:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 800440a:	f103 0306 	add.w	r3, r3, #6
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	f083 0301 	eor.w	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <generate_template+0x7e>
 800441a:	2300      	movs	r3, #0
 800441c:	e012      	b.n	8004444 <generate_template+0xa4>
	for(uint8_t i = 0; i < NUM_OF_TEMPLATE_SAMPLES; i++){
 800441e:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8004422:	f103 0307 	add.w	r3, r3, #7
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 800442e:	f102 0207 	add.w	r2, r2, #7
 8004432:	7013      	strb	r3, [r2, #0]
 8004434:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 8004438:	f103 0307 	add.w	r3, r3, #7
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b13      	cmp	r3, #19
 8004440:	d9c3      	bls.n	80043ca <generate_template+0x2a>
	}

	//Si se creo el template correctamente devuelve true
	return true;
 8004442:	2301      	movs	r3, #1
}
 8004444:	4618      	mov	r0, r3
 8004446:	f507 4740 	add.w	r7, r7, #49152	@ 0xc000
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <capture_voice>:
 *
 * @param buffer Puntero uint16_t al buffer donde se guardara la señal capturada.
 * @param size Tamaño del buffer.
 * @return None
 */
void capture_voice(uint16_t *buffer, uint32_t size){
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 800445a:	480c      	ldr	r0, [pc, #48]	@ (800448c <capture_voice+0x3c>)
 800445c:	f004 fb9a 	bl	8008b94 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, size);					//Inicio captura de datos con ADC
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	480a      	ldr	r0, [pc, #40]	@ (8004490 <capture_voice+0x40>)
 8004466:	f000 fee9 	bl	800523c <HAL_ADC_Start_DMA>
	while(!conv_cplt_flag);												//Espero a que termine la captura
 800446a:	bf00      	nop
 800446c:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <capture_voice+0x44>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f7      	bne.n	800446c <capture_voice+0x1c>
	conv_cplt_flag = false;
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <capture_voice+0x44>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
	return;
 8004482:	bf00      	nop
}
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	2000086c 	.word	0x2000086c
 8004490:	200006f8 	.word	0x200006f8
 8004494:	20000910 	.word	0x20000910

08004498 <get_voltage>:
 * @param in_buffer Puntero uint16_t al buffer que contiene la voz capturada por el ADC.
 * @param out_buffer Puntero float32_t al vector de salida que contendra las tensiones.
 * @param size Tamaño de ambos vectores de entrada y salida.
 * @return None
 */
static void get_voltage(uint16_t *in_buffer, float32_t *out_buffer, uint32_t size){
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < size; i++){
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e029      	b.n	80044fe <get_voltage+0x66>
		out_buffer[i] = VOLTAGE_REFERENCE * ((float32_t)in_buffer[i]) / ADC_RESOLUTION;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	ee07 3a90 	vmov	s15, r3
 80044b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044bc:	ee17 0a90 	vmov	r0, s15
 80044c0:	f7fc f8ba 	bl	8000638 <__aeabi_f2d>
 80044c4:	a313      	add	r3, pc, #76	@ (adr r3, 8004514 <get_voltage+0x7c>)
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f7fc f90d 	bl	80006e8 <__aeabi_dmul>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <get_voltage+0x78>)
 80044dc:	f7fc fa2e 	bl	800093c <__aeabi_ddiv>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	18d4      	adds	r4, r2, r3
 80044f0:	f7fc fb0c 	bl	8000b0c <__aeabi_d2f>
 80044f4:	4603      	mov	r3, r0
 80044f6:	6023      	str	r3, [r4, #0]
	for(uint32_t i = 0; i < size; i++){
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	3301      	adds	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d3d1      	bcc.n	80044aa <get_voltage+0x12>
	}
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	bd90      	pop	{r4, r7, pc}
 8004510:	40b00000 	.word	0x40b00000
 8004514:	66666666 	.word	0x66666666
 8004518:	400a6666 	.word	0x400a6666

0800451c <save_voice>:
 * @param voice_buffer Puntero uint16_t al buffer que contiene la voz capturada por el ADC.
 * @param total_size Tamaño de voice_buffer.
 * @param block_size Tamaño de bloque de procesamiento.
 * @return true si la operacion se llevo a cabo con exito, false en caso contrario.
 */
static bool save_voice(char *voice_path, uint16_t *voice_buffer, uint32_t total_size, uint32_t block_size){
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	f107 0420 	add.w	r4, r7, #32
 800452a:	f844 0c14 	str.w	r0, [r4, #-20]
 800452e:	f107 0020 	add.w	r0, r7, #32
 8004532:	f840 1c18 	str.w	r1, [r0, #-24]
 8004536:	f107 0120 	add.w	r1, r7, #32
 800453a:	f841 2c1c 	str.w	r2, [r1, #-28]
 800453e:	f107 0220 	add.w	r2, r7, #32
 8004542:	f842 3c20 	str.w	r3, [r2, #-32]
	//Declaro vector de procesamiento
	float32_t voice_block[BLOCK_SIZE] = {0};
 8004546:	f107 0320 	add.w	r3, r7, #32
 800454a:	3b0c      	subs	r3, #12
 800454c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f00f fb6f 	bl	8013c36 <memset>
	uint32_t num_of_blocks;
	bool res;

	//Verifico que el tamaño total sea multiplo del tamaño del bloque
	if(total_size % block_size != 0){
 8004558:	f107 0320 	add.w	r3, r7, #32
 800455c:	f107 0220 	add.w	r2, r7, #32
 8004560:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004564:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8004568:	fbb3 f1f1 	udiv	r1, r3, r1
 800456c:	f852 2c20 	ldr.w	r2, [r2, #-32]
 8004570:	fb01 f202 	mul.w	r2, r1, r2
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <save_voice+0x62>
		return false;
 800457a:	2300      	movs	r3, #0
 800457c:	e06f      	b.n	800465e <save_voice+0x142>
	}

	//Calculo numero de bloques
	num_of_blocks = total_size / block_size;
 800457e:	f107 0320 	add.w	r3, r7, #32
 8004582:	461a      	mov	r2, r3
 8004584:	f107 0320 	add.w	r3, r7, #32
 8004588:	f852 2c1c 	ldr.w	r2, [r2, #-28]
 800458c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8004598:	f102 0218 	add.w	r2, r2, #24
 800459c:	6013      	str	r3, [r2, #0]

	//Convierto la voz a float de a bloques
	for(uint8_t i = 0; i < num_of_blocks; i++){
 800459e:	2300      	movs	r3, #0
 80045a0:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 80045a4:	f102 021f 	add.w	r2, r2, #31
 80045a8:	7013      	strb	r3, [r2, #0]
 80045aa:	e04b      	b.n	8004644 <save_voice+0x128>
		//Convierto cuentas del adc a valores de tension
		get_voltage(&voice_buffer[i * block_size], voice_block, block_size);
 80045ac:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80045b0:	f103 031f 	add.w	r3, r3, #31
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	f107 0220 	add.w	r2, r7, #32
 80045ba:	f852 2c20 	ldr.w	r2, [r2, #-32]
 80045be:	fb02 f303 	mul.w	r3, r2, r3
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	f107 0220 	add.w	r2, r7, #32
 80045c8:	f852 2c18 	ldr.w	r2, [r2, #-24]
 80045cc:	18d0      	adds	r0, r2, r3
 80045ce:	f107 0320 	add.w	r3, r7, #32
 80045d2:	461a      	mov	r2, r3
 80045d4:	f107 0320 	add.w	r3, r7, #32
 80045d8:	3b0c      	subs	r3, #12
 80045da:	f852 2c20 	ldr.w	r2, [r2, #-32]
 80045de:	4619      	mov	r1, r3
 80045e0:	f7ff ff5a 	bl	8004498 <get_voltage>

		//Guardo bloque
		res = save_data_on_sd(voice_path, (void *)voice_block, FLOAT_SIZE_BYTES(block_size));
 80045e4:	f107 0320 	add.w	r3, r7, #32
 80045e8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80045ec:	009a      	lsls	r2, r3, #2
 80045ee:	f107 0320 	add.w	r3, r7, #32
 80045f2:	3b0c      	subs	r3, #12
 80045f4:	f107 0120 	add.w	r1, r7, #32
 80045f8:	4608      	mov	r0, r1
 80045fa:	4619      	mov	r1, r3
 80045fc:	f850 0c14 	ldr.w	r0, [r0, #-20]
 8004600:	f7fe fd62 	bl	80030c8 <save_data_on_sd>
 8004604:	4603      	mov	r3, r0
 8004606:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800460a:	f102 0217 	add.w	r2, r2, #23
 800460e:	7013      	strb	r3, [r2, #0]
		if(!res){
 8004610:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8004614:	f103 0317 	add.w	r3, r3, #23
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	f083 0301 	eor.w	r3, r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <save_voice+0x112>
			send_error(DISPLAY_WRITE_SD_ERROR);							//Envio el error al display
 8004624:	2014      	movs	r0, #20
 8004626:	f000 fc25 	bl	8004e74 <send_error>
			return false;
 800462a:	2300      	movs	r3, #0
 800462c:	e017      	b.n	800465e <save_voice+0x142>
	for(uint8_t i = 0; i < num_of_blocks; i++){
 800462e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8004632:	f103 031f 	add.w	r3, r3, #31
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800463e:	f102 021f 	add.w	r2, r2, #31
 8004642:	7013      	strb	r3, [r2, #0]
 8004644:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8004648:	f103 031f 	add.w	r3, r3, #31
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8004652:	f102 0218 	add.w	r2, r2, #24
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d8a7      	bhi.n	80045ac <save_voice+0x90>
		}
	}

	//Si se llego hasta aca, la operacion de guardado fue un exito
	return true;
 800465c:	2301      	movs	r3, #1
}
 800465e:	4618      	mov	r0, r3
 8004660:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 8004664:	3724      	adds	r7, #36	@ 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd90      	pop	{r4, r7, pc}

0800466a <capture_voice_signal>:
 * sera convertida a tension para poder interpretarla fisicamente.
 *
 * @param voice_path String con el nombre del archivo terminado en .bin.
 * @return true si la operacion se llevo a cabo con exito, false en caso contrario.
 */
bool capture_voice_signal(char *voice_path){
 800466a:	b580      	push	{r7, lr}
 800466c:	f5ad 4d40 	sub.w	sp, sp, #49152	@ 0xc000
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	f107 0310 	add.w	r3, r7, #16
 8004678:	f843 0c0c 	str.w	r0, [r3, #-12]
	//Declaracion de variables
	uint16_t voice_buffer[AUDIO_BUFFER_SIZE] = {0};
 800467c:	f107 0310 	add.w	r3, r7, #16
 8004680:	3b04      	subs	r3, #4
 8004682:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f00f fad4 	bl	8013c36 <memset>
	bool res;

	//Envio mensaje al display para indicar que comienza reconocimiento de voz
	send_message(DISPLAY_START_SPEECH_REC, BLOCKING);
 800468e:	2101      	movs	r1, #1
 8004690:	2006      	movs	r0, #6
 8004692:	f000 fbcb 	bl	8004e2c <send_message>

	//Capturo voz
	capture_voice(voice_buffer, AUDIO_BUFFER_SIZE);
 8004696:	f107 0310 	add.w	r3, r7, #16
 800469a:	3b04      	subs	r3, #4
 800469c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fed5 	bl	8004450 <capture_voice>

	//Muestro en pantalla que se estan procesando los datos
	send_message(DISPLAY_PROCESSING_DATA, NON_BLOCKING);						//Se envia no bloqueante para seguir procesando datos mientras se muestra el mensaje
 80046a6:	2100      	movs	r1, #0
 80046a8:	2007      	movs	r0, #7
 80046aa:	f000 fbbf 	bl	8004e2c <send_message>

	//Almaceno la voz en la memoria SD
	res = save_voice(voice_path, voice_buffer, AUDIO_BUFFER_SIZE, BLOCK_SIZE);
 80046ae:	f107 0110 	add.w	r1, r7, #16
 80046b2:	3904      	subs	r1, #4
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	4618      	mov	r0, r3
 80046ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046be:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 80046c2:	f850 0c0c 	ldr.w	r0, [r0, #-12]
 80046c6:	f7ff ff29 	bl	800451c <save_voice>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f507 4240 	add.w	r2, r7, #49152	@ 0xc000
 80046d0:	f102 020f 	add.w	r2, r2, #15
 80046d4:	7013      	strb	r3, [r2, #0]
	if(!res){
 80046d6:	f507 4340 	add.w	r3, r7, #49152	@ 0xc000
 80046da:	f103 030f 	add.w	r3, r3, #15
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f083 0301 	eor.w	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <capture_voice_signal+0x84>
		//No se pudo capturar correctamente la voz. Retorna false
		return false;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <capture_voice_signal+0x86>
	}

	//Voz capturada con exito
	return true;
 80046ee:	2301      	movs	r3, #1
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	f507 4740 	add.w	r7, r7, #49152	@ 0xc000
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <compare_features>:
 *
 * @param feature_1 String que contiene el nombre del archivo con el feature 1 (terminado en .bin).
 * @param feature_1 String que contiene el nombre del archivo con el feature 2 (terminado en .bin).
 * @return true si la voz fue reconocida, false en caso contrario.
 */
bool compare_features(char *feature_1, char *feature_2){
 80046fc:	b580      	push	{r7, lr}
 80046fe:	f5ad 5d00 	sub.w	sp, sp, #8192	@ 0x2000
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	f107 0320 	add.w	r3, r7, #32
 800470a:	f843 0c1c 	str.w	r0, [r3, #-28]
 800470e:	f107 0320 	add.w	r3, r7, #32
 8004712:	f843 1c20 	str.w	r1, [r3, #-32]
	//Declaro vectores de procesamiento
	float32_t feature1_block[FEATURE_SIZE] = {0};
 8004716:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800471a:	3b10      	subs	r3, #16
 800471c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f00f fa87 	bl	8013c36 <memset>
	float32_t feature2_block[FEATURE_SIZE] = {0};
 8004728:	f107 0320 	add.w	r3, r7, #32
 800472c:	3b10      	subs	r3, #16
 800472e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f00f fa7e 	bl	8013c36 <memset>
	float32_t distance = 0;
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8004742:	f102 0214 	add.w	r2, r2, #20
 8004746:	6013      	str	r3, [r2, #0]
	uint32_t blocks_ok = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800474e:	f102 021c 	add.w	r2, r2, #28
 8004752:	6013      	str	r3, [r2, #0]
	uint32_t last_pos[2] = {0};
 8004754:	f107 0320 	add.w	r3, r7, #32
 8004758:	3b18      	subs	r3, #24
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]
	bool is_recognized;

	for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 8004760:	2300      	movs	r3, #0
 8004762:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8004766:	f102 021b 	add.w	r2, r2, #27
 800476a:	7013      	strb	r3, [r2, #0]
 800476c:	e062      	b.n	8004834 <compare_features+0x138>
		//Leo cada bloque del archivo, y comparo bin a bin
		if(!read_data_from_sd(feature_1, (void *) feature1_block, FLOAT_SIZE_BYTES(FEATURE_SIZE), &last_pos[0]) ||
 800476e:	f107 0320 	add.w	r3, r7, #32
 8004772:	3b18      	subs	r3, #24
 8004774:	f507 5181 	add.w	r1, r7, #4128	@ 0x1020
 8004778:	3910      	subs	r1, #16
 800477a:	f107 0220 	add.w	r2, r7, #32
 800477e:	4610      	mov	r0, r2
 8004780:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004784:	f850 0c1c 	ldr.w	r0, [r0, #-28]
 8004788:	f7fe fcdc 	bl	8003144 <read_data_from_sd>
 800478c:	4603      	mov	r3, r0
 800478e:	f083 0301 	eor.w	r3, r3, #1
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d115      	bne.n	80047c4 <compare_features+0xc8>
		   !read_data_from_sd(feature_2, (void *) feature2_block, FLOAT_SIZE_BYTES(FEATURE_SIZE), &last_pos[1])){
 8004798:	f107 0320 	add.w	r3, r7, #32
 800479c:	3b18      	subs	r3, #24
 800479e:	3304      	adds	r3, #4
 80047a0:	f107 0120 	add.w	r1, r7, #32
 80047a4:	3910      	subs	r1, #16
 80047a6:	f107 0220 	add.w	r2, r7, #32
 80047aa:	4610      	mov	r0, r2
 80047ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80047b0:	f850 0c20 	ldr.w	r0, [r0, #-32]
 80047b4:	f7fe fcc6 	bl	8003144 <read_data_from_sd>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f083 0301 	eor.w	r3, r3, #1
 80047be:	b2db      	uxtb	r3, r3
		if(!read_data_from_sd(feature_1, (void *) feature1_block, FLOAT_SIZE_BYTES(FEATURE_SIZE), &last_pos[0]) ||
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <compare_features+0xd2>
			send_error(DISPLAY_READ_SD_ERROR);
 80047c4:	2013      	movs	r0, #19
 80047c6:	f000 fb55 	bl	8004e74 <send_error>
			return false;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e04c      	b.n	8004868 <compare_features+0x16c>
		}

		//Calculo la distancia euclideana
		distance = euclidean_distance(feature1_block, feature2_block);
 80047ce:	f107 0220 	add.w	r2, r7, #32
 80047d2:	3a10      	subs	r2, #16
 80047d4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80047d8:	3b10      	subs	r3, #16
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff f893 	bl	8003908 <euclidean_distance>
 80047e2:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80047e6:	f103 0314 	add.w	r3, r3, #20
 80047ea:	ed83 0a00 	vstr	s0, [r3]

		//Verifico si es menor al threshold
		if(distance <= DISTANCE_THRESHOLD){
 80047ee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 80047f2:	f103 0314 	add.w	r3, r3, #20
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80047fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004806:	d80a      	bhi.n	800481e <compare_features+0x122>
			blocks_ok++;
 8004808:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 800480c:	f103 031c 	add.w	r3, r3, #28
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8004818:	f102 021c 	add.w	r2, r2, #28
 800481c:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < NUM_OF_BLOCKS; i++){
 800481e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8004822:	f103 031b 	add.w	r3, r3, #27
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 800482e:	f102 021b 	add.w	r2, r2, #27
 8004832:	7013      	strb	r3, [r2, #0]
 8004834:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8004838:	f103 031b 	add.w	r3, r3, #27
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b16      	cmp	r3, #22
 8004840:	d995      	bls.n	800476e <compare_features+0x72>
		}
	}

	//Chequeo si pasaron la verificacion la cantidad de bloques requeridos
	is_recognized = (blocks_ok >= ACCEPTED_BLOCK_TH) ? true : false;
 8004842:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8004846:	f103 031c 	add.w	r3, r3, #28
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b14      	cmp	r3, #20
 800484e:	bf8c      	ite	hi
 8004850:	2301      	movhi	r3, #1
 8004852:	2300      	movls	r3, #0
 8004854:	f507 5200 	add.w	r2, r7, #8192	@ 0x2000
 8004858:	f102 0213 	add.w	r2, r2, #19
 800485c:	7013      	strb	r3, [r2, #0]

	//Devuelvo estado de reconocimiento
	return is_recognized;
 800485e:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8004862:	f103 0313 	add.w	r3, r3, #19
 8004866:	781b      	ldrb	r3, [r3, #0]
}
 8004868:	4618      	mov	r0, r3
 800486a:	f507 5700 	add.w	r7, r7, #8192	@ 0x2000
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <recognize_user_voice>:
 * @param template_path String con la direccion del template.
 * @param user_name String con el nombre de usuario correspondiente al template.
 * @return true si se reconoce la voz, false en caso contrario.
 */

bool recognize_user_voice(char *template_path, char *user_name){
 8004874:	b580      	push	{r7, lr}
 8004876:	b092      	sub	sp, #72	@ 0x48
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
	char entry[ENTRY_STR_SIZE];
	bool res;
	bool is_recognized;

	//Capturo voz
	res = capture_voice_signal(VOICE_PATH);
 800487e:	4838      	ldr	r0, [pc, #224]	@ (8004960 <recognize_user_voice+0xec>)
 8004880:	f7ff fef3 	bl	800466a <capture_voice_signal>
 8004884:	4603      	mov	r3, r0
 8004886:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(!res){
 800488a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800488e:	f083 0301 	eor.w	r3, r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <recognize_user_voice+0x2e>
		f_unlink(VOICE_PATH);
 8004898:	4831      	ldr	r0, [pc, #196]	@ (8004960 <recognize_user_voice+0xec>)
 800489a:	f00a fd24 	bl	800f2e6 <f_unlink>
		return false;
 800489e:	2300      	movs	r3, #0
 80048a0:	e059      	b.n	8004956 <recognize_user_voice+0xe2>
	}

	//Filtro la señal
	res = filter_signal(VOICE_PATH, FILTERED_PATH);
 80048a2:	4930      	ldr	r1, [pc, #192]	@ (8004964 <recognize_user_voice+0xf0>)
 80048a4:	482e      	ldr	r0, [pc, #184]	@ (8004960 <recognize_user_voice+0xec>)
 80048a6:	f7ff f881 	bl	80039ac <filter_signal>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(!res){
 80048b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80048b4:	f083 0301 	eor.w	r3, r3, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <recognize_user_voice+0x5a>
		//Borro archivo de voz y de señal filtrada
		f_unlink(VOICE_PATH);
 80048be:	4828      	ldr	r0, [pc, #160]	@ (8004960 <recognize_user_voice+0xec>)
 80048c0:	f00a fd11 	bl	800f2e6 <f_unlink>
		f_unlink(FILTERED_PATH);
 80048c4:	4827      	ldr	r0, [pc, #156]	@ (8004964 <recognize_user_voice+0xf0>)
 80048c6:	f00a fd0e 	bl	800f2e6 <f_unlink>
		return false;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e043      	b.n	8004956 <recognize_user_voice+0xe2>
	}

	//Obtengo features
	res = get_fft_feature(FILTERED_PATH, FEATURE_PATH);
 80048ce:	4926      	ldr	r1, [pc, #152]	@ (8004968 <recognize_user_voice+0xf4>)
 80048d0:	4824      	ldr	r0, [pc, #144]	@ (8004964 <recognize_user_voice+0xf0>)
 80048d2:	f7ff f9cb 	bl	8003c6c <get_fft_feature>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(!res){
 80048dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80048e0:	f083 0301 	eor.w	r3, r3, #1
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <recognize_user_voice+0x8c>
		//Borro archivo de señal filtrada y de feature
		f_unlink(VOICE_PATH);
 80048ea:	481d      	ldr	r0, [pc, #116]	@ (8004960 <recognize_user_voice+0xec>)
 80048ec:	f00a fcfb 	bl	800f2e6 <f_unlink>
		f_unlink(FILTERED_PATH);
 80048f0:	481c      	ldr	r0, [pc, #112]	@ (8004964 <recognize_user_voice+0xf0>)
 80048f2:	f00a fcf8 	bl	800f2e6 <f_unlink>
		f_unlink(FEATURE_PATH);
 80048f6:	481c      	ldr	r0, [pc, #112]	@ (8004968 <recognize_user_voice+0xf4>)
 80048f8:	f00a fcf5 	bl	800f2e6 <f_unlink>
		return false;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e02a      	b.n	8004956 <recognize_user_voice+0xe2>
	}

	//Comparo features con el template
	is_recognized = compare_features(FEATURE_PATH, template_path);
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4819      	ldr	r0, [pc, #100]	@ (8004968 <recognize_user_voice+0xf4>)
 8004904:	f7ff fefa 	bl	80046fc <compare_features>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	if(is_recognized){
 800490e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <recognize_user_voice+0xb2>
		build_entry_message(entry, user_name, "Concedido");
 8004916:	f107 0308 	add.w	r3, r7, #8
 800491a:	4a14      	ldr	r2, [pc, #80]	@ (800496c <recognize_user_voice+0xf8>)
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fb3c 	bl	8003f9c <build_entry_message>
 8004924:	e006      	b.n	8004934 <recognize_user_voice+0xc0>
	}
	else{
		build_entry_message(entry, user_name, "Denegado");
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	4a11      	ldr	r2, [pc, #68]	@ (8004970 <recognize_user_voice+0xfc>)
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fb34 	bl	8003f9c <build_entry_message>
	}

	//Escribo entrada de registro
	write_entry(REGISTER_PATH, entry);
 8004934:	f107 0308 	add.w	r3, r7, #8
 8004938:	4619      	mov	r1, r3
 800493a:	480e      	ldr	r0, [pc, #56]	@ (8004974 <recognize_user_voice+0x100>)
 800493c:	f7fe fdd8 	bl	80034f0 <write_entry>

	//Elimino los archivos creados en el reconocimiento de voz
	f_unlink(VOICE_PATH);
 8004940:	4807      	ldr	r0, [pc, #28]	@ (8004960 <recognize_user_voice+0xec>)
 8004942:	f00a fcd0 	bl	800f2e6 <f_unlink>
	f_unlink(FILTERED_PATH);
 8004946:	4807      	ldr	r0, [pc, #28]	@ (8004964 <recognize_user_voice+0xf0>)
 8004948:	f00a fccd 	bl	800f2e6 <f_unlink>
	f_unlink(FEATURE_PATH);
 800494c:	4806      	ldr	r0, [pc, #24]	@ (8004968 <recognize_user_voice+0xf4>)
 800494e:	f00a fcca 	bl	800f2e6 <f_unlink>

	//Devuelvo estado de reconocimiento
	return is_recognized;
 8004952:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
}
 8004956:	4618      	mov	r0, r3
 8004958:	3748      	adds	r7, #72	@ 0x48
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	0801509c 	.word	0x0801509c
 8004964:	080150b0 	.word	0x080150b0
 8004968:	080150c4 	.word	0x080150c4
 800496c:	080150d8 	.word	0x080150d8
 8004970:	080150e4 	.word	0x080150e4
 8004974:	080150f0 	.word	0x080150f0

08004978 <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	display_message_t message;
	uint8_t counter = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 8004984:	f7fd feb3 	bl	80026ee <display_init>
	display_start_msg();				//Muestro mensaje inicial
 8004988:	f7fd ff4e 	bl	8002828 <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &message, portMAX_DELAY);				//Espero a que llegue una pantalla para mostrar
 800498c:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <display_task+0x238>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f107 010e 	add.w	r1, r7, #14
 8004994:	f04f 32ff 	mov.w	r2, #4294967295
 8004998:	4618      	mov	r0, r3
 800499a:	f00b fb3d 	bl	8010018 <xQueueReceive>
		switch(message){
 800499e:	7bbb      	ldrb	r3, [r7, #14]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	2b13      	cmp	r3, #19
 80049a4:	d8f2      	bhi.n	800498c <display_task+0x14>
 80049a6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <display_task+0x34>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049fd 	.word	0x080049fd
 80049b0:	08004a03 	.word	0x08004a03
 80049b4:	08004a1b 	.word	0x08004a1b
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004a45 	.word	0x08004a45
 80049c0:	08004a65 	.word	0x08004a65
 80049c4:	08004a89 	.word	0x08004a89
 80049c8:	08004a8f 	.word	0x08004a8f
 80049cc:	08004aab 	.word	0x08004aab
 80049d0:	08004ac7 	.word	0x08004ac7
 80049d4:	08004ad9 	.word	0x08004ad9
 80049d8:	08004aeb 	.word	0x08004aeb
 80049dc:	08004b07 	.word	0x08004b07
 80049e0:	08004b23 	.word	0x08004b23
 80049e4:	08004b29 	.word	0x08004b29
 80049e8:	08004b45 	.word	0x08004b45
 80049ec:	08004b4b 	.word	0x08004b4b
 80049f0:	08004b51 	.word	0x08004b51
 80049f4:	08004b6d 	.word	0x08004b6d
 80049f8:	08004b89 	.word	0x08004b89
		case DISPLAY_SCREEN_WELCOME:
			display_start_msg();
 80049fc:	f7fd ff14 	bl	8002828 <display_start_msg>
			break;
 8004a00:	e0d4      	b.n	8004bac <display_task+0x234>
		case DISPLAY_ENTER_DIGIT:
			if(counter < SEQUENCE_LENGTH){
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	f200 80cd 	bhi.w	8004ba4 <display_task+0x22c>
				counter++;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd ff3e 	bl	8002894 <display_sequence_entry_msg>
			}
			break;
 8004a18:	e0c4      	b.n	8004ba4 <display_task+0x22c>
		case DISPLAY_ERASE_DIGIT:
			if(counter > 0){
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80c3 	beq.w	8004ba8 <display_task+0x230>
				counter--;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd ff32 	bl	8002894 <display_sequence_entry_msg>
			}
			break;
 8004a30:	e0ba      	b.n	8004ba8 <display_task+0x230>
		case DISPLAY_USER_FOUND:
			display_user_found_msg();
 8004a32:	f7fd ff97 	bl	8002964 <display_user_found_msg>
			counter = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004a3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004a3e:	f00c f805 	bl	8010a4c <vTaskDelay>
			break;
 8004a42:	e0b3      	b.n	8004bac <display_task+0x234>
		case DISPLAY_USER_NOT_FOUND:
			display_user_not_found_msg();
 8004a44:	f7fd ff98 	bl	8002978 <display_user_not_found_msg>
			counter = 0;													//Reinicio el contador
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004a4c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004a50:	f00b fffc 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);								//Luego del delay, doy semaforo para que tarea sd siga ejecutandose
 8004a54:	4b57      	ldr	r3, [pc, #348]	@ (8004bb4 <display_task+0x23c>)
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	f00b f949 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004a62:	e0a3      	b.n	8004bac <display_task+0x234>
		case DISPLAY_START_SPEECH_REC:
			display_start_voice_recognition_msg();
 8004a64:	f7fd ff92 	bl	800298c <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004a68:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004a6c:	f00b ffee 	bl	8010a4c <vTaskDelay>
			countdown_msg();
 8004a70:	f7fd ff96 	bl	80029a0 <countdown_msg>
			display_capturing_voice_msg();
 8004a74:	f7fd ffea 	bl	8002a4c <display_capturing_voice_msg>
			xSemaphoreGive(sd_display_sync);
 8004a78:	4b4e      	ldr	r3, [pc, #312]	@ (8004bb4 <display_task+0x23c>)
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2100      	movs	r1, #0
 8004a82:	f00b f937 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004a86:	e091      	b.n	8004bac <display_task+0x234>
		case DISPLAY_PROCESSING_DATA:
			display_processing_data_msg();
 8004a88:	f7fd ffea 	bl	8002a60 <display_processing_data_msg>
			//vTaskDelay(2000 / portTICK_RATE_MS);
			break;
 8004a8c:	e08e      	b.n	8004bac <display_task+0x234>
		case DISPLAY_ACCESS_GRANTED:
			display_access_granted_msg();
 8004a8e:	f7fd ff55 	bl	800293c <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004a92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004a96:	f00b ffd9 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004a9a:	4b46      	ldr	r3, [pc, #280]	@ (8004bb4 <display_task+0x23c>)
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	f00b f926 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004aa8:	e080      	b.n	8004bac <display_task+0x234>
		case DISPLAY_ACCESS_DENIED:
			display_access_denied_msg();
 8004aaa:	f7fd ff51 	bl	8002950 <display_access_denied_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004aae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004ab2:	f00b ffcb 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8004bb4 <display_task+0x23c>)
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	2300      	movs	r3, #0
 8004abc:	2200      	movs	r2, #0
 8004abe:	2100      	movs	r1, #0
 8004ac0:	f00b f918 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004ac4:	e072      	b.n	8004bac <display_task+0x234>
		case DISPLAY_TIMEOUT_EVENT:
			display_timeout_msg();
 8004ac6:	f7fd ff25 	bl	8002914 <display_timeout_msg>
			counter = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004ace:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004ad2:	f00b ffbb 	bl	8010a4c <vTaskDelay>
			break;
 8004ad6:	e069      	b.n	8004bac <display_task+0x234>
		case DISPLAY_INCOMPLETE_SEQUENCE_EVENT:
			display_incomplete_entry_msg();
 8004ad8:	f7fd ff26 	bl	8002928 <display_incomplete_entry_msg>
			counter = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004ae0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004ae4:	f00b ffb2 	bl	8010a4c <vTaskDelay>
			break;
 8004ae8:	e060      	b.n	8004bac <display_task+0x234>
		case DISPLAY_TEMPLATE_SAVED:
			display_template_saved_msg();
 8004aea:	f7fd ffd7 	bl	8002a9c <display_template_saved_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004aee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004af2:	f00b ffab 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004af6:	4b2f      	ldr	r3, [pc, #188]	@ (8004bb4 <display_task+0x23c>)
 8004af8:	6818      	ldr	r0, [r3, #0]
 8004afa:	2300      	movs	r3, #0
 8004afc:	2200      	movs	r2, #0
 8004afe:	2100      	movs	r1, #0
 8004b00:	f00b f8f8 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004b04:	e052      	b.n	8004bac <display_task+0x234>
		//Casos asociados a errores
		case DISPLAY_TEMPLATE_NOT_CREATED:
			display_template_not_created_msg();
 8004b06:	f7fd ffd3 	bl	8002ab0 <display_template_not_created_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004b0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004b0e:	f00b ff9d 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004b12:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <display_task+0x23c>)
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	2300      	movs	r3, #0
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	f00b f8ea 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004b20:	e044      	b.n	8004bac <display_task+0x234>
		case DISPLAY_MOUNTING_ERROR:
			display_mounting_error_msg();
 8004b22:	f7fd ffcf 	bl	8002ac4 <display_mounting_error_msg>
			break;
 8004b26:	e041      	b.n	8004bac <display_task+0x234>
		case DISPLAY_TEMPLATE_NOT_FOUND:
			display_missing_template_msg();
 8004b28:	f7fd ffae 	bl	8002a88 <display_missing_template_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004b2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004b30:	f00b ff8c 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004b34:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb4 <display_task+0x23c>)
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	f00b f8d9 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004b42:	e033      	b.n	8004bac <display_task+0x234>
		case DISPLAY_DATABASE_NOT_FOUND:
			display_missing_database_msg();
 8004b44:	f7fd ff96 	bl	8002a74 <display_missing_database_msg>
			break;
 8004b48:	e030      	b.n	8004bac <display_task+0x234>
		case DISPLAY_REGISTER_NOT_CREATED:
			display_register_not_created_msg();
 8004b4a:	f7fd ffc5 	bl	8002ad8 <display_register_not_created_msg>
			break;
 8004b4e:	e02d      	b.n	8004bac <display_task+0x234>
		case DISPLAY_MEMORY_ERROR:
			display_memory_error_msg();
 8004b50:	f7fd ffcc 	bl	8002aec <display_memory_error_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004b54:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004b58:	f00b ff78 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004b5c:	4b15      	ldr	r3, [pc, #84]	@ (8004bb4 <display_task+0x23c>)
 8004b5e:	6818      	ldr	r0, [r3, #0]
 8004b60:	2300      	movs	r3, #0
 8004b62:	2200      	movs	r2, #0
 8004b64:	2100      	movs	r1, #0
 8004b66:	f00b f8c5 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004b6a:	e01f      	b.n	8004bac <display_task+0x234>
		case DISPLAY_READ_SD_ERROR:
			display_read_sd_error_msg();
 8004b6c:	f7fd ffc8 	bl	8002b00 <display_read_sd_error_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004b70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004b74:	f00b ff6a 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004b78:	4b0e      	ldr	r3, [pc, #56]	@ (8004bb4 <display_task+0x23c>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2100      	movs	r1, #0
 8004b82:	f00b f8b7 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004b86:	e011      	b.n	8004bac <display_task+0x234>
		case DISPLAY_WRITE_SD_ERROR:
			display_write_sd_error_msg();
 8004b88:	f7fd ffc4 	bl	8002b14 <display_write_sd_error_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004b8c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004b90:	f00b ff5c 	bl	8010a4c <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004b94:	4b07      	ldr	r3, [pc, #28]	@ (8004bb4 <display_task+0x23c>)
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	f00b f8a9 	bl	800fcf4 <xQueueGenericSend>
			break;
 8004ba2:	e003      	b.n	8004bac <display_task+0x234>
			break;
 8004ba4:	bf00      	nop
 8004ba6:	e6f1      	b.n	800498c <display_task+0x14>
			break;
 8004ba8:	bf00      	nop
 8004baa:	e6ef      	b.n	800498c <display_task+0x14>
		xQueueReceive(display_queue, &message, portMAX_DELAY);				//Espero a que llegue una pantalla para mostrar
 8004bac:	e6ee      	b.n	800498c <display_task+0x14>
 8004bae:	bf00      	nop
 8004bb0:	20000900 	.word	0x20000900
 8004bb4:	2000090c 	.word	0x2000090c

08004bb8 <keypad_task>:
#include <digit_handle_logic.h>
#include "keypad_functions.h"
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	char input;
	char kp_buffer[SEQUENCE_LENGTH + 1] = {0};										//Son 7 elementos para incluir el caracter '\0'
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	f107 0310 	add.w	r3, r7, #16
 8004bc8:	2100      	movs	r1, #0
 8004bca:	460a      	mov	r2, r1
 8004bcc:	801a      	strh	r2, [r3, #0]
 8004bce:	460a      	mov	r2, r1
 8004bd0:	709a      	strb	r2, [r3, #2]
	bool send_flag = false;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	72fb      	strb	r3, [r7, #11]
	display_message_t message;
	while(1){
		input = read_keypad();
 8004bd6:	f7fe fa15 	bl	8003004 <read_keypad>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	75bb      	strb	r3, [r7, #22]
		message = handle_keypad_input(input, kp_buffer, &send_flag);				//Manejo la logica de recepcion. Con 6 digitos se envia
 8004bde:	f107 020b 	add.w	r2, r7, #11
 8004be2:	f107 010c 	add.w	r1, r7, #12
 8004be6:	7dbb      	ldrb	r3, [r7, #22]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fa1d 	bl	8004028 <handle_keypad_input>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	72bb      	strb	r3, [r7, #10]
		if(send_flag){
 8004bf2:	7afb      	ldrb	r3, [r7, #11]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d022      	beq.n	8004c3e <keypad_task+0x86>
			//Envio uno por uno los digitos obtenidos con el keypad a la tarea SD
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	75fb      	strb	r3, [r7, #23]
 8004bfc:	e00d      	b.n	8004c1a <keypad_task+0x62>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 8004bfe:	4b16      	ldr	r3, [pc, #88]	@ (8004c58 <keypad_task+0xa0>)
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	f107 020c 	add.w	r2, r7, #12
 8004c08:	18d1      	adds	r1, r2, r3
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	f00b f870 	bl	800fcf4 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	3301      	adds	r3, #1
 8004c18:	75fb      	strb	r3, [r7, #23]
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
 8004c1c:	2b06      	cmp	r3, #6
 8004c1e:	d9ee      	bls.n	8004bfe <keypad_task+0x46>
			}
			xSemaphoreTake(keypad_sd_sync, portMAX_DELAY);							//Espero que la tarea SD devuelva el semaforo
 8004c20:	4b0e      	ldr	r3, [pc, #56]	@ (8004c5c <keypad_task+0xa4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f04f 31ff 	mov.w	r1, #4294967295
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f00b fad7 	bl	80101dc <xQueueSemaphoreTake>

			//Reinicio el flag de envio
			send_flag = false;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	72fb      	strb	r3, [r7, #11]

			//Limpio el vector char que guarda la secuencia
			clear_buffer(kp_buffer, SEQUENCE_LENGTH);
 8004c32:	f107 030c 	add.w	r3, r7, #12
 8004c36:	2106      	movs	r1, #6
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f8b9 	bl	8004db0 <clear_buffer>
		}

		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(message != DISPLAY_IDLE){
 8004c3e:	7abb      	ldrb	r3, [r7, #10]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0c8      	beq.n	8004bd6 <keypad_task+0x1e>
			xQueueSend(display_queue, &message, portMAX_DELAY);
 8004c44:	4b06      	ldr	r3, [pc, #24]	@ (8004c60 <keypad_task+0xa8>)
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	f107 010a 	add.w	r1, r7, #10
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c52:	f00b f84f 	bl	800fcf4 <xQueueGenericSend>
		input = read_keypad();
 8004c56:	e7be      	b.n	8004bd6 <keypad_task+0x1e>
 8004c58:	200008fc 	.word	0x200008fc
 8004c5c:	20000908 	.word	0x20000908
 8004c60:	20000900 	.word	0x20000900

08004c64 <lock_task>:
#include "common_utils.h"

void lock_task(void *pvParameters){
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	bool lock_state;
	while(1){
		xQueueReceive(lock_state_queue, &lock_state, portMAX_DELAY);
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <lock_task+0x40>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f107 010f 	add.w	r1, r7, #15
 8004c74:	f04f 32ff 	mov.w	r2, #4294967295
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f00b f9cd 	bl	8010018 <xQueueReceive>
		if(lock_state){
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f3      	beq.n	8004c6c <lock_task+0x8>
			HAL_GPIO_WritePin(Lock_GPIO_Port, Lock_Pin, GPIO_PIN_RESET);			//Abro la cerradura
 8004c84:	2200      	movs	r2, #0
 8004c86:	2120      	movs	r1, #32
 8004c88:	4807      	ldr	r0, [pc, #28]	@ (8004ca8 <lock_task+0x44>)
 8004c8a:	f001 fd47 	bl	800671c <HAL_GPIO_WritePin>
			HAL_Delay(3000);														//Doy tiempo prudencial para pasar
 8004c8e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004c92:	f000 f95b 	bl	8004f4c <HAL_Delay>
			HAL_GPIO_WritePin(Lock_GPIO_Port, Lock_Pin, GPIO_PIN_SET);				//Cierro la cerradura
 8004c96:	2201      	movs	r2, #1
 8004c98:	2120      	movs	r1, #32
 8004c9a:	4803      	ldr	r0, [pc, #12]	@ (8004ca8 <lock_task+0x44>)
 8004c9c:	f001 fd3e 	bl	800671c <HAL_GPIO_WritePin>
		xQueueReceive(lock_state_queue, &lock_state, portMAX_DELAY);
 8004ca0:	e7e4      	b.n	8004c6c <lock_task+0x8>
 8004ca2:	bf00      	nop
 8004ca4:	20000904 	.word	0x20000904
 8004ca8:	40020800 	.word	0x40020800

08004cac <sd_task>:
#include "sd_functions.h"
/*================[Private defines]========================*/
#define CODE_VERSION 1
/*================[Public task]==========================*/
#if CODE_VERSION == 1
void sd_task(void *pvParameters){
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	display_message_t message;										//Para enviar mensajes al display
	char user_key_retrieved[SEQUENCE_LENGTH + 1];					//Para recibir los digitos desde el keypad
	bool res;

	//Montar tarjeta SD aca
	res = try_mount("");
 8004cb4:	483d      	ldr	r0, [pc, #244]	@ (8004dac <sd_task+0x100>)
 8004cb6:	f7fe fa9d 	bl	80031f4 <try_mount>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	75fb      	strb	r3, [r7, #23]
	if(!res){
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	f083 0301 	eor.w	r3, r3, #1
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <sd_task+0x28>
		send_error(DISPLAY_MOUNTING_ERROR);
 8004cca:	200e      	movs	r0, #14
 8004ccc:	f000 f8d2 	bl	8004e74 <send_error>
		while(1);
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <sd_task+0x24>
	}

	//Control inicial. Verifico existencia de archivos importantes
	if(!initialize_sd_and_verify_files(&message)){
 8004cd4:	f107 0316 	add.w	r3, r7, #22
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff f905 	bl	8003ee8 <initialize_sd_and_verify_files>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f083 0301 	eor.w	r3, r3, #1
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <sd_task+0x54>
		//No se pudieron realizar las inicializaciones
		res = try_unmount("");										//Desmonto tarjeta SD
 8004cea:	4830      	ldr	r0, [pc, #192]	@ (8004dac <sd_task+0x100>)
 8004cec:	f7fe faa4 	bl	8003238 <try_unmount>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	75fb      	strb	r3, [r7, #23]
		send_error(message);
 8004cf4:	7dbb      	ldrb	r3, [r7, #22]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f8bc 	bl	8004e74 <send_error>
		while(1);													//Loop permanente. Resetear y solucionar el problema.
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <sd_task+0x50>
	}

	//Desmonto tarjeta SD
	res = try_unmount("");
 8004d00:	482a      	ldr	r0, [pc, #168]	@ (8004dac <sd_task+0x100>)
 8004d02:	f7fe fa99 	bl	8003238 <try_unmount>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]
	if(!res){
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	f083 0301 	eor.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <sd_task+0x74>
		send_error(DISPLAY_MOUNTING_ERROR);
 8004d16:	200e      	movs	r0, #14
 8004d18:	f000 f8ac 	bl	8004e74 <send_error>
		while(1);
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <sd_task+0x70>
	}

	while(1){
		//Recibo clave desde tarea keypad
		receive_user_key(user_key_retrieved);
 8004d20:	f107 030c 	add.w	r3, r7, #12
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fd03 	bl	8003730 <receive_user_key>

		//Monto tarjeta SD
		res = try_mount("");
 8004d2a:	4820      	ldr	r0, [pc, #128]	@ (8004dac <sd_task+0x100>)
 8004d2c:	f7fe fa62 	bl	80031f4 <try_mount>
 8004d30:	4603      	mov	r3, r0
 8004d32:	75fb      	strb	r3, [r7, #23]
		if(!res){
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	f083 0301 	eor.w	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d004      	beq.n	8004d4a <sd_task+0x9e>
			send_error(DISPLAY_MOUNTING_ERROR);
 8004d40:	200e      	movs	r0, #14
 8004d42:	f000 f897 	bl	8004e74 <send_error>
			while(1);
 8004d46:	bf00      	nop
 8004d48:	e7fd      	b.n	8004d46 <sd_task+0x9a>
		}

		//Verifico si se ingreso clave para creacion de template
		if(is_template_creation(user_key_retrieved)){
 8004d4a:	f107 030c 	add.w	r3, r7, #12
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fd0c 	bl	800376c <is_template_creation>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d011      	beq.n	8004d7e <sd_task+0xd2>
			//Creo template
			handle_template_creation();
 8004d5a:	f7fe fd1b 	bl	8003794 <handle_template_creation>

			//Desmonto tarjeta SD
			res = try_unmount("");
 8004d5e:	4813      	ldr	r0, [pc, #76]	@ (8004dac <sd_task+0x100>)
 8004d60:	f7fe fa6a 	bl	8003238 <try_unmount>
 8004d64:	4603      	mov	r3, r0
 8004d66:	75fb      	strb	r3, [r7, #23]
			if(!res){
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
 8004d6a:	f083 0301 	eor.w	r3, r3, #1
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d019      	beq.n	8004da8 <sd_task+0xfc>
				send_error(DISPLAY_MOUNTING_ERROR);
 8004d74:	200e      	movs	r0, #14
 8004d76:	f000 f87d 	bl	8004e74 <send_error>
				while(1);
 8004d7a:	bf00      	nop
 8004d7c:	e7fd      	b.n	8004d7a <sd_task+0xce>
			}
			continue;
		}

		//Realizo verificacion de usuario normal
		handle_user_verification(user_key_retrieved);
 8004d7e:	f107 030c 	add.w	r3, r7, #12
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fd24 	bl	80037d0 <handle_user_verification>

		//Desmonto tarjeta SD
		res = try_unmount("");
 8004d88:	4808      	ldr	r0, [pc, #32]	@ (8004dac <sd_task+0x100>)
 8004d8a:	f7fe fa55 	bl	8003238 <try_unmount>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	75fb      	strb	r3, [r7, #23]
		if(!res){
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	f083 0301 	eor.w	r3, r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0c0      	beq.n	8004d20 <sd_task+0x74>
			send_error(DISPLAY_MOUNTING_ERROR);
 8004d9e:	200e      	movs	r0, #14
 8004da0:	f000 f868 	bl	8004e74 <send_error>
			while(1);
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <sd_task+0xf8>
			continue;
 8004da8:	bf00      	nop
		receive_user_key(user_key_retrieved);
 8004daa:	e7b9      	b.n	8004d20 <sd_task+0x74>
 8004dac:	08015100 	.word	0x08015100

08004db0 <clear_buffer>:
#include "common_utils.h"

extern UART_HandleTypeDef huart2;

//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00f      	beq.n	8004de0 <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e007      	b.n	8004dd6 <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4413      	add	r3, r2
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d3f3      	bcc.n	8004dc6 <clear_buffer+0x16>
 8004dde:	e000      	b.n	8004de2 <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 8004de0:	bf00      	nop
    }
}
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <clear_char>:

void clear_char(char *buffer, char character){
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
	char *ptr = buffer;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 8004dfc:	e006      	b.n	8004e0c <clear_char+0x20>
		if(*ptr == 0){
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <clear_char+0x2c>
			break;
		}
		ptr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d1f3      	bne.n	8004dfe <clear_char+0x12>
 8004e16:	e000      	b.n	8004e1a <clear_char+0x2e>
			break;
 8004e18:	bf00      	nop
	}
	*ptr = 0;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]
	return;
 8004e20:	bf00      	nop
}
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <send_message>:


void send_message(display_message_t message, bool is_blocking){
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	460a      	mov	r2, r1
 8004e36:	71fb      	strb	r3, [r7, #7]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71bb      	strb	r3, [r7, #6]
	xQueueSend(display_queue, &message, portMAX_DELAY);					//Envio mensaje de error al display
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <send_message+0x40>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	1df9      	adds	r1, r7, #7
 8004e42:	2300      	movs	r3, #0
 8004e44:	f04f 32ff 	mov.w	r2, #4294967295
 8004e48:	f00a ff54 	bl	800fcf4 <xQueueGenericSend>

	//Compruebo si es bloqueante el mensaje
	if(is_blocking){
 8004e4c:	79bb      	ldrb	r3, [r7, #6]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <send_message+0x36>
		xSemaphoreTake(sd_display_sync, portMAX_DELAY);					//Esperar hasta que el display termine de mostrar el mensaje
 8004e52:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <send_message+0x44>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f04f 31ff 	mov.w	r1, #4294967295
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f00b f9be 	bl	80101dc <xQueueSemaphoreTake>
	}
	return;
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
}
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000900 	.word	0x20000900
 8004e70:	2000090c 	.word	0x2000090c

08004e74 <send_error>:

void send_error(display_message_t error_message){
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
	send_message(error_message, BLOCKING);
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	2101      	movs	r1, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff ffd2 	bl	8004e2c <send_message>
	return;
 8004e88:	bf00      	nop
}
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <send_uart>:
void generate_filename(char *filename, uint32_t x){
	snprintf(filename, "voice_%d.bin", x);
	return;
}

bool send_uart(uint8_t *buffer, uint16_t size){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, buffer, size, HAL_MAX_DELAY);
 8004e9c:	887a      	ldrh	r2, [r7, #2]
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4807      	ldr	r0, [pc, #28]	@ (8004ec4 <send_uart+0x34>)
 8004ea6:	f004 fadd 	bl	8009464 <HAL_UART_Transmit>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	73fb      	strb	r3, [r7, #15]
	return (status == HAL_OK) ? true : false;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200008b4 	.word	0x200008b4

08004ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <HAL_Init+0x40>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0d      	ldr	r2, [pc, #52]	@ (8004f08 <HAL_Init+0x40>)
 8004ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f08 <HAL_Init+0x40>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a0a      	ldr	r2, [pc, #40]	@ (8004f08 <HAL_Init+0x40>)
 8004ede:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ee4:	4b08      	ldr	r3, [pc, #32]	@ (8004f08 <HAL_Init+0x40>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a07      	ldr	r2, [pc, #28]	@ (8004f08 <HAL_Init+0x40>)
 8004eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ef0:	2003      	movs	r0, #3
 8004ef2:	f000 fe62 	bl	8005bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ef6:	200f      	movs	r0, #15
 8004ef8:	f7fd fa02 	bl	8002300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004efc:	f7fd f818 	bl	8001f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40023c00 	.word	0x40023c00

08004f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f10:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <HAL_IncTick+0x20>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <HAL_IncTick+0x24>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	4a04      	ldr	r2, [pc, #16]	@ (8004f30 <HAL_IncTick+0x24>)
 8004f1e:	6013      	str	r3, [r2, #0]
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	2000065c 	.word	0x2000065c
 8004f30:	20002f3c 	.word	0x20002f3c

08004f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return uwTick;
 8004f38:	4b03      	ldr	r3, [pc, #12]	@ (8004f48 <HAL_GetTick+0x14>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20002f3c 	.word	0x20002f3c

08004f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f54:	f7ff ffee 	bl	8004f34 <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d005      	beq.n	8004f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f66:	4b0a      	ldr	r3, [pc, #40]	@ (8004f90 <HAL_Delay+0x44>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f72:	bf00      	nop
 8004f74:	f7ff ffde 	bl	8004f34 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d8f7      	bhi.n	8004f74 <HAL_Delay+0x28>
  {
  }
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	2000065c 	.word	0x2000065c

08004f94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e033      	b.n	8005012 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc ffe8 	bl	8001f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d118      	bne.n	8005004 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004fda:	f023 0302 	bic.w	r3, r3, #2
 8004fde:	f043 0202 	orr.w	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fbb2 	bl	8005750 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	f043 0201 	orr.w	r2, r3, #1
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	641a      	str	r2, [r3, #64]	@ 0x40
 8005002:	e001      	b.n	8005008 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b086      	sub	sp, #24
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d049      	beq.n	80050e4 <HAL_ADC_IRQHandler+0xca>
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d046      	beq.n	80050e4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d12b      	bne.n	80050d4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005080:	2b00      	cmp	r3, #0
 8005082:	d127      	bne.n	80050d4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800508e:	2b00      	cmp	r3, #0
 8005090:	d006      	beq.n	80050a0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800509c:	2b00      	cmp	r3, #0
 800509e:	d119      	bne.n	80050d4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0220 	bic.w	r2, r2, #32
 80050ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	f043 0201 	orr.w	r2, r3, #1
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fc fefd 	bl	8001ed4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f06f 0212 	mvn.w	r2, #18
 80050e2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d057      	beq.n	80051aa <HAL_ADC_IRQHandler+0x190>
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d054      	beq.n	80051aa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d105      	bne.n	8005118 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d139      	bne.n	800519a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005130:	2b00      	cmp	r3, #0
 8005132:	d006      	beq.n	8005142 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800513e:	2b00      	cmp	r3, #0
 8005140:	d12b      	bne.n	800519a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800514c:	2b00      	cmp	r3, #0
 800514e:	d124      	bne.n	800519a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11d      	bne.n	800519a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005162:	2b00      	cmp	r3, #0
 8005164:	d119      	bne.n	800519a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005174:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fc56 	bl	8005a4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 020c 	mvn.w	r2, #12
 80051a8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051b8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d017      	beq.n	80051f0 <HAL_ADC_IRQHandler+0x1d6>
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d014      	beq.n	80051f0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d10d      	bne.n	80051f0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f97f 	bl	80054e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f06f 0201 	mvn.w	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051fe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d015      	beq.n	8005232 <HAL_ADC_IRQHandler+0x218>
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005210:	f043 0202 	orr.w	r2, r3, #2
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0220 	mvn.w	r2, #32
 8005220:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f968 	bl	80054f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0220 	mvn.w	r2, #32
 8005230:	601a      	str	r2, [r3, #0]
  }
}
 8005232:	bf00      	nop
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_ADC_Start_DMA+0x1e>
 8005256:	2302      	movs	r3, #2
 8005258:	e0ce      	b.n	80053f8 <HAL_ADC_Start_DMA+0x1bc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d018      	beq.n	80052a2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005280:	4b5f      	ldr	r3, [pc, #380]	@ (8005400 <HAL_ADC_Start_DMA+0x1c4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a5f      	ldr	r2, [pc, #380]	@ (8005404 <HAL_ADC_Start_DMA+0x1c8>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	0c9a      	lsrs	r2, r3, #18
 800528c:	4613      	mov	r3, r2
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	4413      	add	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8005294:	e002      	b.n	800529c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	3b01      	subs	r3, #1
 800529a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f9      	bne.n	8005296 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052b0:	d107      	bne.n	80052c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	f040 8086 	bne.w	80053de <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80052fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800530c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005310:	d106      	bne.n	8005320 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005316:	f023 0206 	bic.w	r2, r3, #6
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	645a      	str	r2, [r3, #68]	@ 0x44
 800531e:	e002      	b.n	8005326 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800532e:	4b36      	ldr	r3, [pc, #216]	@ (8005408 <HAL_ADC_Start_DMA+0x1cc>)
 8005330:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005336:	4a35      	ldr	r2, [pc, #212]	@ (800540c <HAL_ADC_Start_DMA+0x1d0>)
 8005338:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533e:	4a34      	ldr	r2, [pc, #208]	@ (8005410 <HAL_ADC_Start_DMA+0x1d4>)
 8005340:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005346:	4a33      	ldr	r2, [pc, #204]	@ (8005414 <HAL_ADC_Start_DMA+0x1d8>)
 8005348:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005352:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8005362:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005372:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	334c      	adds	r3, #76	@ 0x4c
 800537e:	4619      	mov	r1, r3
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f000 fcfc 	bl	8005d80 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10f      	bne.n	80053b4 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d129      	bne.n	80053f6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053b0:	609a      	str	r2, [r3, #8]
 80053b2:	e020      	b.n	80053f6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a17      	ldr	r2, [pc, #92]	@ (8005418 <HAL_ADC_Start_DMA+0x1dc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d11b      	bne.n	80053f6 <HAL_ADC_Start_DMA+0x1ba>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d114      	bne.n	80053f6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	e00b      	b.n	80053f6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e2:	f043 0210 	orr.w	r2, r3, #16
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000004 	.word	0x20000004
 8005404:	431bde83 	.word	0x431bde83
 8005408:	40012300 	.word	0x40012300
 800540c:	08005949 	.word	0x08005949
 8005410:	08005a03 	.word	0x08005a03
 8005414:	08005a1f 	.word	0x08005a1f
 8005418:	40012000 	.word	0x40012000

0800541c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_ADC_Stop_DMA+0x1a>
 8005432:	2302      	movs	r3, #2
 8005434:	e048      	b.n	80054c8 <HAL_ADC_Stop_DMA+0xac>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d130      	bne.n	80054be <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800546a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d10f      	bne.n	800549a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fcd6 	bl	8005e30 <HAL_DMA_Abort>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005492:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80054a8:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80054b2:	f023 0301 	bic.w	r3, r3, #1
 80054b6:	f043 0201 	orr.w	r2, r3, #1
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x1c>
 8005524:	2302      	movs	r3, #2
 8005526:	e105      	b.n	8005734 <HAL_ADC_ConfigChannel+0x228>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b09      	cmp	r3, #9
 8005536:	d925      	bls.n	8005584 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68d9      	ldr	r1, [r3, #12]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	4613      	mov	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	3b1e      	subs	r3, #30
 800554e:	2207      	movs	r2, #7
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43da      	mvns	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	400a      	ands	r2, r1
 800555c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68d9      	ldr	r1, [r3, #12]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	4618      	mov	r0, r3
 8005570:	4603      	mov	r3, r0
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	4403      	add	r3, r0
 8005576:	3b1e      	subs	r3, #30
 8005578:	409a      	lsls	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	e022      	b.n	80055ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6919      	ldr	r1, [r3, #16]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	4613      	mov	r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4413      	add	r3, r2
 8005598:	2207      	movs	r2, #7
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43da      	mvns	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	400a      	ands	r2, r1
 80055a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6919      	ldr	r1, [r3, #16]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	4618      	mov	r0, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	4403      	add	r3, r0
 80055c0:	409a      	lsls	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d824      	bhi.n	800561c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	3b05      	subs	r3, #5
 80055e4:	221f      	movs	r2, #31
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43da      	mvns	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	400a      	ands	r2, r1
 80055f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	4618      	mov	r0, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	3b05      	subs	r3, #5
 800560e:	fa00 f203 	lsl.w	r2, r0, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	635a      	str	r2, [r3, #52]	@ 0x34
 800561a:	e04c      	b.n	80056b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b0c      	cmp	r3, #12
 8005622:	d824      	bhi.n	800566e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	3b23      	subs	r3, #35	@ 0x23
 8005636:	221f      	movs	r2, #31
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	43da      	mvns	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	400a      	ands	r2, r1
 8005644:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	4618      	mov	r0, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	3b23      	subs	r3, #35	@ 0x23
 8005660:	fa00 f203 	lsl.w	r2, r0, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	631a      	str	r2, [r3, #48]	@ 0x30
 800566c:	e023      	b.n	80056b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	3b41      	subs	r3, #65	@ 0x41
 8005680:	221f      	movs	r2, #31
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43da      	mvns	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	400a      	ands	r2, r1
 800568e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	4618      	mov	r0, r3
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	3b41      	subs	r3, #65	@ 0x41
 80056aa:	fa00 f203 	lsl.w	r2, r0, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056b6:	4b22      	ldr	r3, [pc, #136]	@ (8005740 <HAL_ADC_ConfigChannel+0x234>)
 80056b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a21      	ldr	r2, [pc, #132]	@ (8005744 <HAL_ADC_ConfigChannel+0x238>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d109      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x1cc>
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2b12      	cmp	r3, #18
 80056ca:	d105      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a19      	ldr	r2, [pc, #100]	@ (8005744 <HAL_ADC_ConfigChannel+0x238>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d123      	bne.n	800572a <HAL_ADC_ConfigChannel+0x21e>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d003      	beq.n	80056f2 <HAL_ADC_ConfigChannel+0x1e6>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b11      	cmp	r3, #17
 80056f0:	d11b      	bne.n	800572a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2b10      	cmp	r3, #16
 8005704:	d111      	bne.n	800572a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005706:	4b10      	ldr	r3, [pc, #64]	@ (8005748 <HAL_ADC_ConfigChannel+0x23c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a10      	ldr	r2, [pc, #64]	@ (800574c <HAL_ADC_ConfigChannel+0x240>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	0c9a      	lsrs	r2, r3, #18
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800571c:	e002      	b.n	8005724 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	3b01      	subs	r3, #1
 8005722:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f9      	bne.n	800571e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40012300 	.word	0x40012300
 8005744:	40012000 	.word	0x40012000
 8005748:	20000004 	.word	0x20000004
 800574c:	431bde83 	.word	0x431bde83

08005750 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005758:	4b79      	ldr	r3, [pc, #484]	@ (8005940 <ADC_Init+0x1f0>)
 800575a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	021a      	lsls	r2, r3, #8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80057a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6859      	ldr	r1, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e2:	4a58      	ldr	r2, [pc, #352]	@ (8005944 <ADC_Init+0x1f4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d022      	beq.n	800582e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80057f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6899      	ldr	r1, [r3, #8]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6899      	ldr	r1, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
 800582c:	e00f      	b.n	800584e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800583c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800584c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0202 	bic.w	r2, r2, #2
 800585c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6899      	ldr	r1, [r3, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7e1b      	ldrb	r3, [r3, #24]
 8005868:	005a      	lsls	r2, r3, #1
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01b      	beq.n	80058b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800588a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800589a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a6:	3b01      	subs	r3, #1
 80058a8:	035a      	lsls	r2, r3, #13
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	e007      	b.n	80058c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80058d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	3b01      	subs	r3, #1
 80058e0:	051a      	lsls	r2, r3, #20
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80058f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005906:	025a      	lsls	r2, r3, #9
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800591e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6899      	ldr	r1, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	029a      	lsls	r2, r3, #10
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40012300 	.word	0x40012300
 8005944:	0f000001 	.word	0x0f000001

08005948 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d13c      	bne.n	80059dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005966:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d12b      	bne.n	80059d4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005980:	2b00      	cmp	r3, #0
 8005982:	d127      	bne.n	80059d4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800598e:	2b00      	cmp	r3, #0
 8005990:	d006      	beq.n	80059a0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800599c:	2b00      	cmp	r3, #0
 800599e:	d119      	bne.n	80059d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0220 	bic.w	r2, r2, #32
 80059ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d105      	bne.n	80059d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059cc:	f043 0201 	orr.w	r2, r3, #1
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7fc fa7d 	bl	8001ed4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80059da:	e00e      	b.n	80059fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fd85 	bl	80054f8 <HAL_ADC_ErrorCallback>
}
 80059ee:	e004      	b.n	80059fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff fd5d 	bl	80054d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2240      	movs	r2, #64	@ 0x40
 8005a30:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	f043 0204 	orr.w	r2, r3, #4
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7ff fd5a 	bl	80054f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a70:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a92:	4a04      	ldr	r2, [pc, #16]	@ (8005aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	60d3      	str	r3, [r2, #12]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000ed00 	.word	0xe000ed00

08005aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aac:	4b04      	ldr	r3, [pc, #16]	@ (8005ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	0a1b      	lsrs	r3, r3, #8
 8005ab2:	f003 0307 	and.w	r3, r3, #7
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	e000ed00 	.word	0xe000ed00

08005ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	db0b      	blt.n	8005aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	f003 021f 	and.w	r2, r3, #31
 8005adc:	4907      	ldr	r1, [pc, #28]	@ (8005afc <__NVIC_EnableIRQ+0x38>)
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	e000e100 	.word	0xe000e100

08005b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	6039      	str	r1, [r7, #0]
 8005b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	db0a      	blt.n	8005b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	490c      	ldr	r1, [pc, #48]	@ (8005b4c <__NVIC_SetPriority+0x4c>)
 8005b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1e:	0112      	lsls	r2, r2, #4
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	440b      	add	r3, r1
 8005b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b28:	e00a      	b.n	8005b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4908      	ldr	r1, [pc, #32]	@ (8005b50 <__NVIC_SetPriority+0x50>)
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3b04      	subs	r3, #4
 8005b38:	0112      	lsls	r2, r2, #4
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	761a      	strb	r2, [r3, #24]
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	e000e100 	.word	0xe000e100
 8005b50:	e000ed00 	.word	0xe000ed00

08005b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	@ 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f1c3 0307 	rsb	r3, r3, #7
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	bf28      	it	cs
 8005b72:	2304      	movcs	r3, #4
 8005b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d902      	bls.n	8005b84 <NVIC_EncodePriority+0x30>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	3b03      	subs	r3, #3
 8005b82:	e000      	b.n	8005b86 <NVIC_EncodePriority+0x32>
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43da      	mvns	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	401a      	ands	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba6:	43d9      	mvns	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bac:	4313      	orrs	r3, r2
         );
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3724      	adds	r7, #36	@ 0x24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ff4c 	bl	8005a60 <__NVIC_SetPriorityGrouping>
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005be2:	f7ff ff61 	bl	8005aa8 <__NVIC_GetPriorityGrouping>
 8005be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	6978      	ldr	r0, [r7, #20]
 8005bee:	f7ff ffb1 	bl	8005b54 <NVIC_EncodePriority>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ff80 	bl	8005b00 <__NVIC_SetPriority>
}
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff ff54 	bl	8005ac4 <__NVIC_EnableIRQ>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c30:	f7ff f980 	bl	8004f34 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e099      	b.n	8005d74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c60:	e00f      	b.n	8005c82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c62:	f7ff f967 	bl	8004f34 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d908      	bls.n	8005c82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e078      	b.n	8005d74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e8      	bne.n	8005c62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4b38      	ldr	r3, [pc, #224]	@ (8005d7c <HAL_DMA_Init+0x158>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d107      	bne.n	8005cec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0307 	bic.w	r3, r3, #7
 8005d02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d117      	bne.n	8005d46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fadf 	bl	80062ec <DMA_CheckFifoParam>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2240      	movs	r2, #64	@ 0x40
 8005d38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005d42:	2301      	movs	r3, #1
 8005d44:	e016      	b.n	8005d74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa96 	bl	8006280 <DMA_CalcBaseAndBitshift>
 8005d54:	4603      	mov	r3, r0
 8005d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5c:	223f      	movs	r2, #63	@ 0x3f
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	f010803f 	.word	0xf010803f

08005d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_DMA_Start_IT+0x26>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e040      	b.n	8005e28 <HAL_DMA_Start_IT+0xa8>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d12f      	bne.n	8005e1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fa28 	bl	8006224 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd8:	223f      	movs	r2, #63	@ 0x3f
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0216 	orr.w	r2, r2, #22
 8005dee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0208 	orr.w	r2, r2, #8
 8005e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e005      	b.n	8005e26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
 8005e24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e3e:	f7ff f879 	bl	8004f34 <HAL_GetTick>
 8005e42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d008      	beq.n	8005e62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2280      	movs	r2, #128	@ 0x80
 8005e54:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e052      	b.n	8005f08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0216 	bic.w	r2, r2, #22
 8005e70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <HAL_DMA_Abort+0x62>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0208 	bic.w	r2, r2, #8
 8005ea0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0201 	bic.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eb2:	e013      	b.n	8005edc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eb4:	f7ff f83e 	bl	8004f34 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d90c      	bls.n	8005edc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2203      	movs	r2, #3
 8005ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e015      	b.n	8005f08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e4      	bne.n	8005eb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eee:	223f      	movs	r2, #63	@ 0x3f
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f1c:	4b8e      	ldr	r3, [pc, #568]	@ (8006158 <HAL_DMA_IRQHandler+0x248>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a8e      	ldr	r2, [pc, #568]	@ (800615c <HAL_DMA_IRQHandler+0x24c>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	0a9b      	lsrs	r3, r3, #10
 8005f28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3a:	2208      	movs	r2, #8
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4013      	ands	r3, r2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01a      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0204 	bic.w	r2, r2, #4
 8005f62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f68:	2208      	movs	r2, #8
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f74:	f043 0201 	orr.w	r2, r3, #1
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f80:	2201      	movs	r2, #1
 8005f82:	409a      	lsls	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4013      	ands	r3, r2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d012      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	409a      	lsls	r2, r3
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	f043 0202 	orr.w	r2, r3, #2
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d012      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00b      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe0:	f043 0204 	orr.w	r2, r3, #4
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fec:	2210      	movs	r2, #16
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d043      	beq.n	8006080 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0308 	and.w	r3, r3, #8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d03c      	beq.n	8006080 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600a:	2210      	movs	r2, #16
 800600c:	409a      	lsls	r2, r3
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d018      	beq.n	8006052 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d108      	bne.n	8006040 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d024      	beq.n	8006080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	4798      	blx	r3
 800603e:	e01f      	b.n	8006080 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01b      	beq.n	8006080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
 8006050:	e016      	b.n	8006080 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d107      	bne.n	8006070 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0208 	bic.w	r2, r2, #8
 800606e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006084:	2220      	movs	r2, #32
 8006086:	409a      	lsls	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 808f 	beq.w	80061b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8087 	beq.w	80061b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a6:	2220      	movs	r2, #32
 80060a8:	409a      	lsls	r2, r3
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d136      	bne.n	8006128 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0216 	bic.w	r2, r2, #22
 80060c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <HAL_DMA_IRQHandler+0x1da>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0208 	bic.w	r2, r2, #8
 80060f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fe:	223f      	movs	r2, #63	@ 0x3f
 8006100:	409a      	lsls	r2, r3
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611a:	2b00      	cmp	r3, #0
 800611c:	d07e      	beq.n	800621c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
        }
        return;
 8006126:	e079      	b.n	800621c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01d      	beq.n	8006172 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10d      	bne.n	8006160 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006148:	2b00      	cmp	r3, #0
 800614a:	d031      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
 8006154:	e02c      	b.n	80061b0 <HAL_DMA_IRQHandler+0x2a0>
 8006156:	bf00      	nop
 8006158:	20000004 	.word	0x20000004
 800615c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006164:	2b00      	cmp	r3, #0
 8006166:	d023      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	4798      	blx	r3
 8006170:	e01e      	b.n	80061b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10f      	bne.n	80061a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0210 	bic.w	r2, r2, #16
 800618e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d032      	beq.n	800621e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d022      	beq.n	800620a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2205      	movs	r2, #5
 80061c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	3301      	adds	r3, #1
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d307      	bcc.n	80061f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f2      	bne.n	80061dc <HAL_DMA_IRQHandler+0x2cc>
 80061f6:	e000      	b.n	80061fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
 800621a:	e000      	b.n	800621e <HAL_DMA_IRQHandler+0x30e>
        return;
 800621c:	bf00      	nop
    }
  }
}
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006240:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b40      	cmp	r3, #64	@ 0x40
 8006250:	d108      	bne.n	8006264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006262:	e007      	b.n	8006274 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	60da      	str	r2, [r3, #12]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	3b10      	subs	r3, #16
 8006290:	4a14      	ldr	r2, [pc, #80]	@ (80062e4 <DMA_CalcBaseAndBitshift+0x64>)
 8006292:	fba2 2303 	umull	r2, r3, r2, r3
 8006296:	091b      	lsrs	r3, r3, #4
 8006298:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800629a:	4a13      	ldr	r2, [pc, #76]	@ (80062e8 <DMA_CalcBaseAndBitshift+0x68>)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d909      	bls.n	80062c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80062b6:	f023 0303 	bic.w	r3, r3, #3
 80062ba:	1d1a      	adds	r2, r3, #4
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	659a      	str	r2, [r3, #88]	@ 0x58
 80062c0:	e007      	b.n	80062d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80062ca:	f023 0303 	bic.w	r3, r3, #3
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	aaaaaaab 	.word	0xaaaaaaab
 80062e8:	08018b9c 	.word	0x08018b9c

080062ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d11f      	bne.n	8006346 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b03      	cmp	r3, #3
 800630a:	d856      	bhi.n	80063ba <DMA_CheckFifoParam+0xce>
 800630c:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <DMA_CheckFifoParam+0x28>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	08006325 	.word	0x08006325
 8006318:	08006337 	.word	0x08006337
 800631c:	08006325 	.word	0x08006325
 8006320:	080063bb 	.word	0x080063bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d046      	beq.n	80063be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006334:	e043      	b.n	80063be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800633e:	d140      	bne.n	80063c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006344:	e03d      	b.n	80063c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800634e:	d121      	bne.n	8006394 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b03      	cmp	r3, #3
 8006354:	d837      	bhi.n	80063c6 <DMA_CheckFifoParam+0xda>
 8006356:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <DMA_CheckFifoParam+0x70>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	0800636d 	.word	0x0800636d
 8006360:	08006373 	.word	0x08006373
 8006364:	0800636d 	.word	0x0800636d
 8006368:	08006385 	.word	0x08006385
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
      break;
 8006370:	e030      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006376:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d025      	beq.n	80063ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006382:	e022      	b.n	80063ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800638c:	d11f      	bne.n	80063ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006392:	e01c      	b.n	80063ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d903      	bls.n	80063a2 <DMA_CheckFifoParam+0xb6>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b03      	cmp	r3, #3
 800639e:	d003      	beq.n	80063a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063a0:	e018      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	73fb      	strb	r3, [r7, #15]
      break;
 80063a6:	e015      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
      break;
 80063b8:	e00b      	b.n	80063d2 <DMA_CheckFifoParam+0xe6>
      break;
 80063ba:	bf00      	nop
 80063bc:	e00a      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063be:	bf00      	nop
 80063c0:	e008      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063c2:	bf00      	nop
 80063c4:	e006      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063c6:	bf00      	nop
 80063c8:	e004      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063ca:	bf00      	nop
 80063cc:	e002      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80063ce:	bf00      	nop
 80063d0:	e000      	b.n	80063d4 <DMA_CheckFifoParam+0xe8>
      break;
 80063d2:	bf00      	nop
    }
  } 
  
  return status; 
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop

080063e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b089      	sub	sp, #36	@ 0x24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	e159      	b.n	80066b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006400:	2201      	movs	r2, #1
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4013      	ands	r3, r2
 8006412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	429a      	cmp	r2, r3
 800641a:	f040 8148 	bne.w	80066ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b01      	cmp	r3, #1
 8006428:	d005      	beq.n	8006436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006432:	2b02      	cmp	r3, #2
 8006434:	d130      	bne.n	8006498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	2203      	movs	r2, #3
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	43db      	mvns	r3, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4013      	ands	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	fa02 f303 	lsl.w	r3, r2, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4313      	orrs	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800646c:	2201      	movs	r2, #1
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	43db      	mvns	r3, r3
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	4013      	ands	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	091b      	lsrs	r3, r3, #4
 8006482:	f003 0201 	and.w	r2, r3, #1
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	4313      	orrs	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f003 0303 	and.w	r3, r3, #3
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d017      	beq.n	80064d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	2203      	movs	r2, #3
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	43db      	mvns	r3, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4013      	ands	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d123      	bne.n	8006528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	08da      	lsrs	r2, r3, #3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3208      	adds	r2, #8
 80064e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	220f      	movs	r2, #15
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4013      	ands	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	4313      	orrs	r3, r2
 8006518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	08da      	lsrs	r2, r3, #3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3208      	adds	r2, #8
 8006522:	69b9      	ldr	r1, [r7, #24]
 8006524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	2203      	movs	r2, #3
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	43db      	mvns	r3, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4013      	ands	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 0203 	and.w	r2, r3, #3
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	4313      	orrs	r3, r2
 8006554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80a2 	beq.w	80066ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	4b57      	ldr	r3, [pc, #348]	@ (80066cc <HAL_GPIO_Init+0x2e8>)
 8006570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006572:	4a56      	ldr	r2, [pc, #344]	@ (80066cc <HAL_GPIO_Init+0x2e8>)
 8006574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006578:	6453      	str	r3, [r2, #68]	@ 0x44
 800657a:	4b54      	ldr	r3, [pc, #336]	@ (80066cc <HAL_GPIO_Init+0x2e8>)
 800657c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006586:	4a52      	ldr	r2, [pc, #328]	@ (80066d0 <HAL_GPIO_Init+0x2ec>)
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	089b      	lsrs	r3, r3, #2
 800658c:	3302      	adds	r3, #2
 800658e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	220f      	movs	r2, #15
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	43db      	mvns	r3, r3
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	4013      	ands	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a49      	ldr	r2, [pc, #292]	@ (80066d4 <HAL_GPIO_Init+0x2f0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d019      	beq.n	80065e6 <HAL_GPIO_Init+0x202>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a48      	ldr	r2, [pc, #288]	@ (80066d8 <HAL_GPIO_Init+0x2f4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <HAL_GPIO_Init+0x1fe>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a47      	ldr	r2, [pc, #284]	@ (80066dc <HAL_GPIO_Init+0x2f8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00d      	beq.n	80065de <HAL_GPIO_Init+0x1fa>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a46      	ldr	r2, [pc, #280]	@ (80066e0 <HAL_GPIO_Init+0x2fc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <HAL_GPIO_Init+0x1f6>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a45      	ldr	r2, [pc, #276]	@ (80066e4 <HAL_GPIO_Init+0x300>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d101      	bne.n	80065d6 <HAL_GPIO_Init+0x1f2>
 80065d2:	2304      	movs	r3, #4
 80065d4:	e008      	b.n	80065e8 <HAL_GPIO_Init+0x204>
 80065d6:	2307      	movs	r3, #7
 80065d8:	e006      	b.n	80065e8 <HAL_GPIO_Init+0x204>
 80065da:	2303      	movs	r3, #3
 80065dc:	e004      	b.n	80065e8 <HAL_GPIO_Init+0x204>
 80065de:	2302      	movs	r3, #2
 80065e0:	e002      	b.n	80065e8 <HAL_GPIO_Init+0x204>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <HAL_GPIO_Init+0x204>
 80065e6:	2300      	movs	r3, #0
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	f002 0203 	and.w	r2, r2, #3
 80065ee:	0092      	lsls	r2, r2, #2
 80065f0:	4093      	lsls	r3, r2
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065f8:	4935      	ldr	r1, [pc, #212]	@ (80066d0 <HAL_GPIO_Init+0x2ec>)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	089b      	lsrs	r3, r3, #2
 80065fe:	3302      	adds	r3, #2
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006606:	4b38      	ldr	r3, [pc, #224]	@ (80066e8 <HAL_GPIO_Init+0x304>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	43db      	mvns	r3, r3
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	4013      	ands	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800662a:	4a2f      	ldr	r2, [pc, #188]	@ (80066e8 <HAL_GPIO_Init+0x304>)
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006630:	4b2d      	ldr	r3, [pc, #180]	@ (80066e8 <HAL_GPIO_Init+0x304>)
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	43db      	mvns	r3, r3
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	4013      	ands	r3, r2
 800663e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006654:	4a24      	ldr	r2, [pc, #144]	@ (80066e8 <HAL_GPIO_Init+0x304>)
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800665a:	4b23      	ldr	r3, [pc, #140]	@ (80066e8 <HAL_GPIO_Init+0x304>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	43db      	mvns	r3, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4013      	ands	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4313      	orrs	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800667e:	4a1a      	ldr	r2, [pc, #104]	@ (80066e8 <HAL_GPIO_Init+0x304>)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006684:	4b18      	ldr	r3, [pc, #96]	@ (80066e8 <HAL_GPIO_Init+0x304>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066a8:	4a0f      	ldr	r2, [pc, #60]	@ (80066e8 <HAL_GPIO_Init+0x304>)
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	2b0f      	cmp	r3, #15
 80066b8:	f67f aea2 	bls.w	8006400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	3724      	adds	r7, #36	@ 0x24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40020000 	.word	0x40020000
 80066d8:	40020400 	.word	0x40020400
 80066dc:	40020800 	.word	0x40020800
 80066e0:	40020c00 	.word	0x40020c00
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40013c00 	.word	0x40013c00

080066ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	887b      	ldrh	r3, [r7, #2]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006704:	2301      	movs	r3, #1
 8006706:	73fb      	strb	r3, [r7, #15]
 8006708:	e001      	b.n	800670e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800670a:	2300      	movs	r3, #0
 800670c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	807b      	strh	r3, [r7, #2]
 8006728:	4613      	mov	r3, r2
 800672a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800672c:	787b      	ldrb	r3, [r7, #1]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006732:	887a      	ldrh	r2, [r7, #2]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006738:	e003      	b.n	8006742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800673a:	887b      	ldrh	r3, [r7, #2]
 800673c:	041a      	lsls	r2, r3, #16
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	619a      	str	r2, [r3, #24]
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e12b      	b.n	80069ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fb fc84 	bl	8002084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	@ 0x24
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067b4:	f001 f8ea 	bl	800798c <HAL_RCC_GetPCLK1Freq>
 80067b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4a81      	ldr	r2, [pc, #516]	@ (80069c4 <HAL_I2C_Init+0x274>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d807      	bhi.n	80067d4 <HAL_I2C_Init+0x84>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a80      	ldr	r2, [pc, #512]	@ (80069c8 <HAL_I2C_Init+0x278>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	bf94      	ite	ls
 80067cc:	2301      	movls	r3, #1
 80067ce:	2300      	movhi	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e006      	b.n	80067e2 <HAL_I2C_Init+0x92>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4a7d      	ldr	r2, [pc, #500]	@ (80069cc <HAL_I2C_Init+0x27c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	bf94      	ite	ls
 80067dc:	2301      	movls	r3, #1
 80067de:	2300      	movhi	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e0e7      	b.n	80069ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a78      	ldr	r2, [pc, #480]	@ (80069d0 <HAL_I2C_Init+0x280>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	0c9b      	lsrs	r3, r3, #18
 80067f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	430a      	orrs	r2, r1
 8006808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4a6a      	ldr	r2, [pc, #424]	@ (80069c4 <HAL_I2C_Init+0x274>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d802      	bhi.n	8006824 <HAL_I2C_Init+0xd4>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	3301      	adds	r3, #1
 8006822:	e009      	b.n	8006838 <HAL_I2C_Init+0xe8>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	4a69      	ldr	r2, [pc, #420]	@ (80069d4 <HAL_I2C_Init+0x284>)
 8006830:	fba2 2303 	umull	r2, r3, r2, r3
 8006834:	099b      	lsrs	r3, r3, #6
 8006836:	3301      	adds	r3, #1
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	430b      	orrs	r3, r1
 800683e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800684a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	495c      	ldr	r1, [pc, #368]	@ (80069c4 <HAL_I2C_Init+0x274>)
 8006854:	428b      	cmp	r3, r1
 8006856:	d819      	bhi.n	800688c <HAL_I2C_Init+0x13c>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	1e59      	subs	r1, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	fbb1 f3f3 	udiv	r3, r1, r3
 8006866:	1c59      	adds	r1, r3, #1
 8006868:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800686c:	400b      	ands	r3, r1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <HAL_I2C_Init+0x138>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1e59      	subs	r1, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006880:	3301      	adds	r3, #1
 8006882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006886:	e051      	b.n	800692c <HAL_I2C_Init+0x1dc>
 8006888:	2304      	movs	r3, #4
 800688a:	e04f      	b.n	800692c <HAL_I2C_Init+0x1dc>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d111      	bne.n	80068b8 <HAL_I2C_Init+0x168>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1e58      	subs	r0, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	440b      	add	r3, r1
 80068a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068a6:	3301      	adds	r3, #1
 80068a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e012      	b.n	80068de <HAL_I2C_Init+0x18e>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1e58      	subs	r0, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6859      	ldr	r1, [r3, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	0099      	lsls	r1, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ce:	3301      	adds	r3, #1
 80068d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_I2C_Init+0x196>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e022      	b.n	800692c <HAL_I2C_Init+0x1dc>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10e      	bne.n	800690c <HAL_I2C_Init+0x1bc>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1e58      	subs	r0, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6859      	ldr	r1, [r3, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	440b      	add	r3, r1
 80068fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006900:	3301      	adds	r3, #1
 8006902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690a:	e00f      	b.n	800692c <HAL_I2C_Init+0x1dc>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1e58      	subs	r0, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	0099      	lsls	r1, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006922:	3301      	adds	r3, #1
 8006924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006928:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	6809      	ldr	r1, [r1, #0]
 8006930:	4313      	orrs	r3, r2
 8006932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69da      	ldr	r2, [r3, #28]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800695a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6911      	ldr	r1, [r2, #16]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68d2      	ldr	r2, [r2, #12]
 8006966:	4311      	orrs	r1, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	430b      	orrs	r3, r1
 800696e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	000186a0 	.word	0x000186a0
 80069c8:	001e847f 	.word	0x001e847f
 80069cc:	003d08ff 	.word	0x003d08ff
 80069d0:	431bde83 	.word	0x431bde83
 80069d4:	10624dd3 	.word	0x10624dd3

080069d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	461a      	mov	r2, r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	817b      	strh	r3, [r7, #10]
 80069ea:	460b      	mov	r3, r1
 80069ec:	813b      	strh	r3, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069f2:	f7fe fa9f 	bl	8004f34 <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	f040 80d9 	bne.w	8006bb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	2319      	movs	r3, #25
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	496d      	ldr	r1, [pc, #436]	@ (8006bc4 <HAL_I2C_Mem_Write+0x1ec>)
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f971 	bl	8006cf8 <I2C_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e0cc      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d101      	bne.n	8006a2e <HAL_I2C_Mem_Write+0x56>
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e0c5      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d007      	beq.n	8006a54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0201 	orr.w	r2, r2, #1
 8006a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2221      	movs	r2, #33	@ 0x21
 8006a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2240      	movs	r2, #64	@ 0x40
 8006a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4a4d      	ldr	r2, [pc, #308]	@ (8006bc8 <HAL_I2C_Mem_Write+0x1f0>)
 8006a94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a96:	88f8      	ldrh	r0, [r7, #6]
 8006a98:	893a      	ldrh	r2, [r7, #8]
 8006a9a:	8979      	ldrh	r1, [r7, #10]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	68f8      	ldr	r0, [r7, #12]
 8006aa8:	f000 f890 	bl	8006bcc <I2C_RequestMemoryWrite>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d052      	beq.n	8006b58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e081      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 fa36 	bl	8006f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00d      	beq.n	8006ae2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d107      	bne.n	8006ade <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006adc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e06b      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	781a      	ldrb	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d11b      	bne.n	8006b58 <HAL_I2C_Mem_Write+0x180>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d017      	beq.n	8006b58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1aa      	bne.n	8006ab6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa29 	bl	8006fbc <I2C_WaitOnBTFFlagUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d107      	bne.n	8006b88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e016      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	e000      	b.n	8006bba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006bb8:	2302      	movs	r3, #2
  }
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3718      	adds	r7, #24
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	00100002 	.word	0x00100002
 8006bc8:	ffff0000 	.word	0xffff0000

08006bcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	460b      	mov	r3, r1
 8006be0:	813b      	strh	r3, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 f878 	bl	8006cf8 <I2C_WaitOnFlagUntilTimeout>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00d      	beq.n	8006c2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c1c:	d103      	bne.n	8006c26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e05f      	b.n	8006cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c2a:	897b      	ldrh	r3, [r7, #10]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	6a3a      	ldr	r2, [r7, #32]
 8006c3e:	492d      	ldr	r1, [pc, #180]	@ (8006cf4 <I2C_RequestMemoryWrite+0x128>)
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f8d3 	bl	8006dec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e04c      	b.n	8006cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c50:	2300      	movs	r3, #0
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c68:	6a39      	ldr	r1, [r7, #32]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f95e 	bl	8006f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00d      	beq.n	8006c92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d107      	bne.n	8006c8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e02b      	b.n	8006cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d105      	bne.n	8006ca4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c98:	893b      	ldrh	r3, [r7, #8]
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	611a      	str	r2, [r3, #16]
 8006ca2:	e021      	b.n	8006ce8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ca4:	893b      	ldrh	r3, [r7, #8]
 8006ca6:	0a1b      	lsrs	r3, r3, #8
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb4:	6a39      	ldr	r1, [r7, #32]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 f938 	bl	8006f2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d107      	bne.n	8006cda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e005      	b.n	8006cea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cde:	893b      	ldrh	r3, [r7, #8]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	00010002 	.word	0x00010002

08006cf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	4613      	mov	r3, r2
 8006d06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d08:	e048      	b.n	8006d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d10:	d044      	beq.n	8006d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d12:	f7fe f90f 	bl	8004f34 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d302      	bcc.n	8006d28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d139      	bne.n	8006d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	0c1b      	lsrs	r3, r3, #16
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d10d      	bne.n	8006d4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	43da      	mvns	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	bf0c      	ite	eq
 8006d44:	2301      	moveq	r3, #1
 8006d46:	2300      	movne	r3, #0
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	e00c      	b.n	8006d68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	43da      	mvns	r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bf0c      	ite	eq
 8006d60:	2301      	moveq	r3, #1
 8006d62:	2300      	movne	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	79fb      	ldrb	r3, [r7, #7]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d116      	bne.n	8006d9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e023      	b.n	8006de4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	0c1b      	lsrs	r3, r3, #16
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d10d      	bne.n	8006dc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	43da      	mvns	r2, r3
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	4013      	ands	r3, r2
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bf0c      	ite	eq
 8006db8:	2301      	moveq	r3, #1
 8006dba:	2300      	movne	r3, #0
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	e00c      	b.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	43da      	mvns	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	bf0c      	ite	eq
 8006dd4:	2301      	moveq	r3, #1
 8006dd6:	2300      	movne	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	461a      	mov	r2, r3
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d093      	beq.n	8006d0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dfa:	e071      	b.n	8006ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e0a:	d123      	bne.n	8006e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	f043 0204 	orr.w	r2, r3, #4
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e067      	b.n	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d041      	beq.n	8006ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e5c:	f7fe f86a 	bl	8004f34 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d302      	bcc.n	8006e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d136      	bne.n	8006ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10c      	bne.n	8006e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	43da      	mvns	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4013      	ands	r3, r2
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bf14      	ite	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	2300      	moveq	r3, #0
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	e00b      	b.n	8006eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	43da      	mvns	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	bf14      	ite	ne
 8006ea8:	2301      	movne	r3, #1
 8006eaa:	2300      	moveq	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d016      	beq.n	8006ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ecc:	f043 0220 	orr.w	r2, r3, #32
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e021      	b.n	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d10c      	bne.n	8006f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	43da      	mvns	r2, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bf14      	ite	ne
 8006efc:	2301      	movne	r3, #1
 8006efe:	2300      	moveq	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e00b      	b.n	8006f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	43da      	mvns	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	bf14      	ite	ne
 8006f16:	2301      	movne	r3, #1
 8006f18:	2300      	moveq	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f47f af6d 	bne.w	8006dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f38:	e034      	b.n	8006fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f886 	bl	800704c <I2C_IsAcknowledgeFailed>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e034      	b.n	8006fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d028      	beq.n	8006fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f52:	f7fd ffef 	bl	8004f34 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d11d      	bne.n	8006fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f72:	2b80      	cmp	r3, #128	@ 0x80
 8006f74:	d016      	beq.n	8006fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f90:	f043 0220 	orr.w	r2, r3, #32
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e007      	b.n	8006fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fae:	2b80      	cmp	r3, #128	@ 0x80
 8006fb0:	d1c3      	bne.n	8006f3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fc8:	e034      	b.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f83e 	bl	800704c <I2C_IsAcknowledgeFailed>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e034      	b.n	8007044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe0:	d028      	beq.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe2:	f7fd ffa7 	bl	8004f34 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d302      	bcc.n	8006ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d11d      	bne.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b04      	cmp	r3, #4
 8007004:	d016      	beq.n	8007034 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2220      	movs	r2, #32
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007020:	f043 0220 	orr.w	r2, r3, #32
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e007      	b.n	8007044 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b04      	cmp	r3, #4
 8007040:	d1c3      	bne.n	8006fca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800705e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007062:	d11b      	bne.n	800709c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800706c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007088:	f043 0204 	orr.w	r2, r3, #4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e000      	b.n	800709e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e267      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d075      	beq.n	80071b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80070ca:	4b88      	ldr	r3, [pc, #544]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 030c 	and.w	r3, r3, #12
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d00c      	beq.n	80070f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070d6:	4b85      	ldr	r3, [pc, #532]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d112      	bne.n	8007108 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070e2:	4b82      	ldr	r3, [pc, #520]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ee:	d10b      	bne.n	8007108 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	4b7e      	ldr	r3, [pc, #504]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d05b      	beq.n	80071b4 <HAL_RCC_OscConfig+0x108>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d157      	bne.n	80071b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e242      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007110:	d106      	bne.n	8007120 <HAL_RCC_OscConfig+0x74>
 8007112:	4b76      	ldr	r3, [pc, #472]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a75      	ldr	r2, [pc, #468]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e01d      	b.n	800715c <HAL_RCC_OscConfig+0xb0>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007128:	d10c      	bne.n	8007144 <HAL_RCC_OscConfig+0x98>
 800712a:	4b70      	ldr	r3, [pc, #448]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a6f      	ldr	r2, [pc, #444]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	4b6d      	ldr	r3, [pc, #436]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a6c      	ldr	r2, [pc, #432]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e00b      	b.n	800715c <HAL_RCC_OscConfig+0xb0>
 8007144:	4b69      	ldr	r3, [pc, #420]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a68      	ldr	r2, [pc, #416]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800714a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4b66      	ldr	r3, [pc, #408]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a65      	ldr	r2, [pc, #404]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800715a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d013      	beq.n	800718c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007164:	f7fd fee6 	bl	8004f34 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800716c:	f7fd fee2 	bl	8004f34 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b64      	cmp	r3, #100	@ 0x64
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e207      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800717e:	4b5b      	ldr	r3, [pc, #364]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0f0      	beq.n	800716c <HAL_RCC_OscConfig+0xc0>
 800718a:	e014      	b.n	80071b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718c:	f7fd fed2 	bl	8004f34 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007194:	f7fd fece 	bl	8004f34 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b64      	cmp	r3, #100	@ 0x64
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e1f3      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071a6:	4b51      	ldr	r3, [pc, #324]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0xe8>
 80071b2:	e000      	b.n	80071b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d063      	beq.n	800728a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071c2:	4b4a      	ldr	r3, [pc, #296]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f003 030c 	and.w	r3, r3, #12
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ce:	4b47      	ldr	r3, [pc, #284]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d11c      	bne.n	8007214 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071da:	4b44      	ldr	r3, [pc, #272]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d116      	bne.n	8007214 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071e6:	4b41      	ldr	r3, [pc, #260]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_RCC_OscConfig+0x152>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d001      	beq.n	80071fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e1c7      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fe:	4b3b      	ldr	r3, [pc, #236]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4937      	ldr	r1, [pc, #220]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007212:	e03a      	b.n	800728a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d020      	beq.n	800725e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800721c:	4b34      	ldr	r3, [pc, #208]	@ (80072f0 <HAL_RCC_OscConfig+0x244>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007222:	f7fd fe87 	bl	8004f34 <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800722a:	f7fd fe83 	bl	8004f34 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e1a8      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723c:	4b2b      	ldr	r3, [pc, #172]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0f0      	beq.n	800722a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007248:	4b28      	ldr	r3, [pc, #160]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	4925      	ldr	r1, [pc, #148]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007258:	4313      	orrs	r3, r2
 800725a:	600b      	str	r3, [r1, #0]
 800725c:	e015      	b.n	800728a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800725e:	4b24      	ldr	r3, [pc, #144]	@ (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007264:	f7fd fe66 	bl	8004f34 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800726c:	f7fd fe62 	bl	8004f34 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e187      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800727e:	4b1b      	ldr	r3, [pc, #108]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f0      	bne.n	800726c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d036      	beq.n	8007304 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800729e:	4b15      	ldr	r3, [pc, #84]	@ (80072f4 <HAL_RCC_OscConfig+0x248>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a4:	f7fd fe46 	bl	8004f34 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ac:	f7fd fe42 	bl	8004f34 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e167      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072be:	4b0b      	ldr	r3, [pc, #44]	@ (80072ec <HAL_RCC_OscConfig+0x240>)
 80072c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0x200>
 80072ca:	e01b      	b.n	8007304 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072cc:	4b09      	ldr	r3, [pc, #36]	@ (80072f4 <HAL_RCC_OscConfig+0x248>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072d2:	f7fd fe2f 	bl	8004f34 <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d8:	e00e      	b.n	80072f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072da:	f7fd fe2b 	bl	8004f34 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d907      	bls.n	80072f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e150      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
 80072ec:	40023800 	.word	0x40023800
 80072f0:	42470000 	.word	0x42470000
 80072f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f8:	4b88      	ldr	r3, [pc, #544]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80072fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1ea      	bne.n	80072da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8097 	beq.w	8007440 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007312:	2300      	movs	r3, #0
 8007314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007316:	4b81      	ldr	r3, [pc, #516]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10f      	bne.n	8007342 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007322:	2300      	movs	r3, #0
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	4b7d      	ldr	r3, [pc, #500]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	4a7c      	ldr	r2, [pc, #496]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800732c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007330:	6413      	str	r3, [r2, #64]	@ 0x40
 8007332:	4b7a      	ldr	r3, [pc, #488]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800733a:	60bb      	str	r3, [r7, #8]
 800733c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800733e:	2301      	movs	r3, #1
 8007340:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007342:	4b77      	ldr	r3, [pc, #476]	@ (8007520 <HAL_RCC_OscConfig+0x474>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734a:	2b00      	cmp	r3, #0
 800734c:	d118      	bne.n	8007380 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800734e:	4b74      	ldr	r3, [pc, #464]	@ (8007520 <HAL_RCC_OscConfig+0x474>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a73      	ldr	r2, [pc, #460]	@ (8007520 <HAL_RCC_OscConfig+0x474>)
 8007354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007358:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800735a:	f7fd fdeb 	bl	8004f34 <HAL_GetTick>
 800735e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007360:	e008      	b.n	8007374 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007362:	f7fd fde7 	bl	8004f34 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e10c      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007374:	4b6a      	ldr	r3, [pc, #424]	@ (8007520 <HAL_RCC_OscConfig+0x474>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0f0      	beq.n	8007362 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d106      	bne.n	8007396 <HAL_RCC_OscConfig+0x2ea>
 8007388:	4b64      	ldr	r3, [pc, #400]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738c:	4a63      	ldr	r2, [pc, #396]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	6713      	str	r3, [r2, #112]	@ 0x70
 8007394:	e01c      	b.n	80073d0 <HAL_RCC_OscConfig+0x324>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b05      	cmp	r3, #5
 800739c:	d10c      	bne.n	80073b8 <HAL_RCC_OscConfig+0x30c>
 800739e:	4b5f      	ldr	r3, [pc, #380]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a2:	4a5e      	ldr	r2, [pc, #376]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073a4:	f043 0304 	orr.w	r3, r3, #4
 80073a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073aa:	4b5c      	ldr	r3, [pc, #368]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ae:	4a5b      	ldr	r2, [pc, #364]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073b0:	f043 0301 	orr.w	r3, r3, #1
 80073b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073b6:	e00b      	b.n	80073d0 <HAL_RCC_OscConfig+0x324>
 80073b8:	4b58      	ldr	r3, [pc, #352]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073bc:	4a57      	ldr	r2, [pc, #348]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073c4:	4b55      	ldr	r3, [pc, #340]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c8:	4a54      	ldr	r2, [pc, #336]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073ca:	f023 0304 	bic.w	r3, r3, #4
 80073ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d015      	beq.n	8007404 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d8:	f7fd fdac 	bl	8004f34 <HAL_GetTick>
 80073dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073de:	e00a      	b.n	80073f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073e0:	f7fd fda8 	bl	8004f34 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e0cb      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f6:	4b49      	ldr	r3, [pc, #292]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0ee      	beq.n	80073e0 <HAL_RCC_OscConfig+0x334>
 8007402:	e014      	b.n	800742e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007404:	f7fd fd96 	bl	8004f34 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800740a:	e00a      	b.n	8007422 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740c:	f7fd fd92 	bl	8004f34 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800741a:	4293      	cmp	r3, r2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e0b5      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007422:	4b3e      	ldr	r3, [pc, #248]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1ee      	bne.n	800740c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d105      	bne.n	8007440 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007434:	4b39      	ldr	r3, [pc, #228]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007438:	4a38      	ldr	r2, [pc, #224]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800743e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80a1 	beq.w	800758c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800744a:	4b34      	ldr	r3, [pc, #208]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 030c 	and.w	r3, r3, #12
 8007452:	2b08      	cmp	r3, #8
 8007454:	d05c      	beq.n	8007510 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d141      	bne.n	80074e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800745e:	4b31      	ldr	r3, [pc, #196]	@ (8007524 <HAL_RCC_OscConfig+0x478>)
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007464:	f7fd fd66 	bl	8004f34 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800746c:	f7fd fd62 	bl	8004f34 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e087      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747e:	4b27      	ldr	r3, [pc, #156]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69da      	ldr	r2, [r3, #28]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	019b      	lsls	r3, r3, #6
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	3b01      	subs	r3, #1
 80074a4:	041b      	lsls	r3, r3, #16
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ac:	061b      	lsls	r3, r3, #24
 80074ae:	491b      	ldr	r1, [pc, #108]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007524 <HAL_RCC_OscConfig+0x478>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ba:	f7fd fd3b 	bl	8004f34 <HAL_GetTick>
 80074be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c0:	e008      	b.n	80074d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c2:	f7fd fd37 	bl	8004f34 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e05c      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d4:	4b11      	ldr	r3, [pc, #68]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCC_OscConfig+0x416>
 80074e0:	e054      	b.n	800758c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e2:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <HAL_RCC_OscConfig+0x478>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e8:	f7fd fd24 	bl	8004f34 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fd fd20 	bl	8004f34 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e045      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007502:	4b06      	ldr	r3, [pc, #24]	@ (800751c <HAL_RCC_OscConfig+0x470>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x444>
 800750e:	e03d      	b.n	800758c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d107      	bne.n	8007528 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e038      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
 800751c:	40023800 	.word	0x40023800
 8007520:	40007000 	.word	0x40007000
 8007524:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007528:	4b1b      	ldr	r3, [pc, #108]	@ (8007598 <HAL_RCC_OscConfig+0x4ec>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d028      	beq.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007540:	429a      	cmp	r2, r3
 8007542:	d121      	bne.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754e:	429a      	cmp	r2, r3
 8007550:	d11a      	bne.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007558:	4013      	ands	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800755e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007560:	4293      	cmp	r3, r2
 8007562:	d111      	bne.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	3b01      	subs	r3, #1
 8007572:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007574:	429a      	cmp	r2, r3
 8007576:	d107      	bne.n	8007588 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007584:	429a      	cmp	r2, r3
 8007586:	d001      	beq.n	800758c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40023800 	.word	0x40023800

0800759c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0cc      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075b0:	4b68      	ldr	r3, [pc, #416]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d90c      	bls.n	80075d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075be:	4b65      	ldr	r3, [pc, #404]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075c6:	4b63      	ldr	r3, [pc, #396]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d001      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0b8      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d020      	beq.n	8007626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075f0:	4b59      	ldr	r3, [pc, #356]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	4a58      	ldr	r2, [pc, #352]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80075f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007608:	4b53      	ldr	r3, [pc, #332]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4a52      	ldr	r2, [pc, #328]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800760e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007614:	4b50      	ldr	r3, [pc, #320]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	494d      	ldr	r1, [pc, #308]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 8007622:	4313      	orrs	r3, r2
 8007624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d044      	beq.n	80076bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d107      	bne.n	800764a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763a:	4b47      	ldr	r3, [pc, #284]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d119      	bne.n	800767a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e07f      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d003      	beq.n	800765a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007656:	2b03      	cmp	r3, #3
 8007658:	d107      	bne.n	800766a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800765a:	4b3f      	ldr	r3, [pc, #252]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d109      	bne.n	800767a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e06f      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800766a:	4b3b      	ldr	r3, [pc, #236]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e067      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800767a:	4b37      	ldr	r3, [pc, #220]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f023 0203 	bic.w	r2, r3, #3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	4934      	ldr	r1, [pc, #208]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 8007688:	4313      	orrs	r3, r2
 800768a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800768c:	f7fd fc52 	bl	8004f34 <HAL_GetTick>
 8007690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007692:	e00a      	b.n	80076aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007694:	f7fd fc4e 	bl	8004f34 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e04f      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076aa:	4b2b      	ldr	r3, [pc, #172]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 020c 	and.w	r2, r3, #12
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d1eb      	bne.n	8007694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076bc:	4b25      	ldr	r3, [pc, #148]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0307 	and.w	r3, r3, #7
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d20c      	bcs.n	80076e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ca:	4b22      	ldr	r3, [pc, #136]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d2:	4b20      	ldr	r3, [pc, #128]	@ (8007754 <HAL_RCC_ClockConfig+0x1b8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d001      	beq.n	80076e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e032      	b.n	800774a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076f0:	4b19      	ldr	r3, [pc, #100]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	4916      	ldr	r1, [pc, #88]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0308 	and.w	r3, r3, #8
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800770e:	4b12      	ldr	r3, [pc, #72]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	490e      	ldr	r1, [pc, #56]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800771e:	4313      	orrs	r3, r2
 8007720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007722:	f000 f821 	bl	8007768 <HAL_RCC_GetSysClockFreq>
 8007726:	4602      	mov	r2, r0
 8007728:	4b0b      	ldr	r3, [pc, #44]	@ (8007758 <HAL_RCC_ClockConfig+0x1bc>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	490a      	ldr	r1, [pc, #40]	@ (800775c <HAL_RCC_ClockConfig+0x1c0>)
 8007734:	5ccb      	ldrb	r3, [r1, r3]
 8007736:	fa22 f303 	lsr.w	r3, r2, r3
 800773a:	4a09      	ldr	r2, [pc, #36]	@ (8007760 <HAL_RCC_ClockConfig+0x1c4>)
 800773c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800773e:	4b09      	ldr	r3, [pc, #36]	@ (8007764 <HAL_RCC_ClockConfig+0x1c8>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f7fa fddc 	bl	8002300 <HAL_InitTick>

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40023c00 	.word	0x40023c00
 8007758:	40023800 	.word	0x40023800
 800775c:	08015160 	.word	0x08015160
 8007760:	20000004 	.word	0x20000004
 8007764:	20000658 	.word	0x20000658

08007768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800776c:	b094      	sub	sp, #80	@ 0x50
 800776e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007780:	4b79      	ldr	r3, [pc, #484]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 030c 	and.w	r3, r3, #12
 8007788:	2b08      	cmp	r3, #8
 800778a:	d00d      	beq.n	80077a8 <HAL_RCC_GetSysClockFreq+0x40>
 800778c:	2b08      	cmp	r3, #8
 800778e:	f200 80e1 	bhi.w	8007954 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_RCC_GetSysClockFreq+0x34>
 8007796:	2b04      	cmp	r3, #4
 8007798:	d003      	beq.n	80077a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800779a:	e0db      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800779c:	4b73      	ldr	r3, [pc, #460]	@ (800796c <HAL_RCC_GetSysClockFreq+0x204>)
 800779e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077a0:	e0db      	b.n	800795a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077a2:	4b73      	ldr	r3, [pc, #460]	@ (8007970 <HAL_RCC_GetSysClockFreq+0x208>)
 80077a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077a6:	e0d8      	b.n	800795a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d063      	beq.n	8007886 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077be:	4b6a      	ldr	r3, [pc, #424]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	099b      	lsrs	r3, r3, #6
 80077c4:	2200      	movs	r2, #0
 80077c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80077d2:	2300      	movs	r3, #0
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80077da:	4622      	mov	r2, r4
 80077dc:	462b      	mov	r3, r5
 80077de:	f04f 0000 	mov.w	r0, #0
 80077e2:	f04f 0100 	mov.w	r1, #0
 80077e6:	0159      	lsls	r1, r3, #5
 80077e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077ec:	0150      	lsls	r0, r2, #5
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4621      	mov	r1, r4
 80077f4:	1a51      	subs	r1, r2, r1
 80077f6:	6139      	str	r1, [r7, #16]
 80077f8:	4629      	mov	r1, r5
 80077fa:	eb63 0301 	sbc.w	r3, r3, r1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800780c:	4659      	mov	r1, fp
 800780e:	018b      	lsls	r3, r1, #6
 8007810:	4651      	mov	r1, sl
 8007812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007816:	4651      	mov	r1, sl
 8007818:	018a      	lsls	r2, r1, #6
 800781a:	4651      	mov	r1, sl
 800781c:	ebb2 0801 	subs.w	r8, r2, r1
 8007820:	4659      	mov	r1, fp
 8007822:	eb63 0901 	sbc.w	r9, r3, r1
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007832:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007836:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800783a:	4690      	mov	r8, r2
 800783c:	4699      	mov	r9, r3
 800783e:	4623      	mov	r3, r4
 8007840:	eb18 0303 	adds.w	r3, r8, r3
 8007844:	60bb      	str	r3, [r7, #8]
 8007846:	462b      	mov	r3, r5
 8007848:	eb49 0303 	adc.w	r3, r9, r3
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800785a:	4629      	mov	r1, r5
 800785c:	024b      	lsls	r3, r1, #9
 800785e:	4621      	mov	r1, r4
 8007860:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007864:	4621      	mov	r1, r4
 8007866:	024a      	lsls	r2, r1, #9
 8007868:	4610      	mov	r0, r2
 800786a:	4619      	mov	r1, r3
 800786c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800786e:	2200      	movs	r2, #0
 8007870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007872:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007874:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007878:	f7f9 f998 	bl	8000bac <__aeabi_uldivmod>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4613      	mov	r3, r2
 8007882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007884:	e058      	b.n	8007938 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007886:	4b38      	ldr	r3, [pc, #224]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	099b      	lsrs	r3, r3, #6
 800788c:	2200      	movs	r2, #0
 800788e:	4618      	mov	r0, r3
 8007890:	4611      	mov	r1, r2
 8007892:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007896:	623b      	str	r3, [r7, #32]
 8007898:	2300      	movs	r3, #0
 800789a:	627b      	str	r3, [r7, #36]	@ 0x24
 800789c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078a0:	4642      	mov	r2, r8
 80078a2:	464b      	mov	r3, r9
 80078a4:	f04f 0000 	mov.w	r0, #0
 80078a8:	f04f 0100 	mov.w	r1, #0
 80078ac:	0159      	lsls	r1, r3, #5
 80078ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078b2:	0150      	lsls	r0, r2, #5
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4641      	mov	r1, r8
 80078ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80078be:	4649      	mov	r1, r9
 80078c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078d8:	ebb2 040a 	subs.w	r4, r2, sl
 80078dc:	eb63 050b 	sbc.w	r5, r3, fp
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	00eb      	lsls	r3, r5, #3
 80078ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ee:	00e2      	lsls	r2, r4, #3
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	4643      	mov	r3, r8
 80078f6:	18e3      	adds	r3, r4, r3
 80078f8:	603b      	str	r3, [r7, #0]
 80078fa:	464b      	mov	r3, r9
 80078fc:	eb45 0303 	adc.w	r3, r5, r3
 8007900:	607b      	str	r3, [r7, #4]
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800790e:	4629      	mov	r1, r5
 8007910:	028b      	lsls	r3, r1, #10
 8007912:	4621      	mov	r1, r4
 8007914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007918:	4621      	mov	r1, r4
 800791a:	028a      	lsls	r2, r1, #10
 800791c:	4610      	mov	r0, r2
 800791e:	4619      	mov	r1, r3
 8007920:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007922:	2200      	movs	r2, #0
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	61fa      	str	r2, [r7, #28]
 8007928:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800792c:	f7f9 f93e 	bl	8000bac <__aeabi_uldivmod>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4613      	mov	r3, r2
 8007936:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007938:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <HAL_RCC_GetSysClockFreq+0x200>)
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	3301      	adds	r3, #1
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007948:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800794a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007952:	e002      	b.n	800795a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007954:	4b05      	ldr	r3, [pc, #20]	@ (800796c <HAL_RCC_GetSysClockFreq+0x204>)
 8007956:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800795a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800795c:	4618      	mov	r0, r3
 800795e:	3750      	adds	r7, #80	@ 0x50
 8007960:	46bd      	mov	sp, r7
 8007962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007966:	bf00      	nop
 8007968:	40023800 	.word	0x40023800
 800796c:	00f42400 	.word	0x00f42400
 8007970:	007a1200 	.word	0x007a1200

08007974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007978:	4b03      	ldr	r3, [pc, #12]	@ (8007988 <HAL_RCC_GetHCLKFreq+0x14>)
 800797a:	681b      	ldr	r3, [r3, #0]
}
 800797c:	4618      	mov	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	20000004 	.word	0x20000004

0800798c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007990:	f7ff fff0 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 8007994:	4602      	mov	r2, r0
 8007996:	4b05      	ldr	r3, [pc, #20]	@ (80079ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	0a9b      	lsrs	r3, r3, #10
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	4903      	ldr	r1, [pc, #12]	@ (80079b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079a2:	5ccb      	ldrb	r3, [r1, r3]
 80079a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	40023800 	.word	0x40023800
 80079b0:	08015170 	.word	0x08015170

080079b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079b8:	f7ff ffdc 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 80079bc:	4602      	mov	r2, r0
 80079be:	4b05      	ldr	r3, [pc, #20]	@ (80079d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	0b5b      	lsrs	r3, r3, #13
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	4903      	ldr	r1, [pc, #12]	@ (80079d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079ca:	5ccb      	ldrb	r3, [r1, r3]
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40023800 	.word	0x40023800
 80079d8:	08015170 	.word	0x08015170

080079dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	220f      	movs	r2, #15
 80079ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80079ec:	4b12      	ldr	r3, [pc, #72]	@ (8007a38 <HAL_RCC_GetClockConfig+0x5c>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 0203 	and.w	r2, r3, #3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80079f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007a38 <HAL_RCC_GetClockConfig+0x5c>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a04:	4b0c      	ldr	r3, [pc, #48]	@ (8007a38 <HAL_RCC_GetClockConfig+0x5c>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a10:	4b09      	ldr	r3, [pc, #36]	@ (8007a38 <HAL_RCC_GetClockConfig+0x5c>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	08db      	lsrs	r3, r3, #3
 8007a16:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a1e:	4b07      	ldr	r3, [pc, #28]	@ (8007a3c <HAL_RCC_GetClockConfig+0x60>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0207 	and.w	r2, r3, #7
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	601a      	str	r2, [r3, #0]
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	40023800 	.word	0x40023800
 8007a3c:	40023c00 	.word	0x40023c00

08007a40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d105      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d035      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a68:	4b67      	ldr	r3, [pc, #412]	@ (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a6e:	f7fd fa61 	bl	8004f34 <HAL_GetTick>
 8007a72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a74:	e008      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a76:	f7fd fa5d 	bl	8004f34 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e0ba      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a88:	4b60      	ldr	r3, [pc, #384]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1f0      	bne.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	019a      	lsls	r2, r3, #6
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	071b      	lsls	r3, r3, #28
 8007aa0:	495a      	ldr	r1, [pc, #360]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007aa8:	4b57      	ldr	r3, [pc, #348]	@ (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007aae:	f7fd fa41 	bl	8004f34 <HAL_GetTick>
 8007ab2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ab4:	e008      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ab6:	f7fd fa3d 	bl	8004f34 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d901      	bls.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e09a      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ac8:	4b50      	ldr	r3, [pc, #320]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0f0      	beq.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8083 	beq.w	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	4b49      	ldr	r3, [pc, #292]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aea:	4a48      	ldr	r2, [pc, #288]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007af2:	4b46      	ldr	r3, [pc, #280]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007afe:	4b44      	ldr	r3, [pc, #272]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a43      	ldr	r2, [pc, #268]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b0a:	f7fd fa13 	bl	8004f34 <HAL_GetTick>
 8007b0e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b10:	e008      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b12:	f7fd fa0f 	bl	8004f34 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e06c      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b24:	4b3a      	ldr	r3, [pc, #232]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f0      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b30:	4b36      	ldr	r3, [pc, #216]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b38:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d02f      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d028      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b58:	4b2e      	ldr	r3, [pc, #184]	@ (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b64:	4a29      	ldr	r2, [pc, #164]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b6a:	4b28      	ldr	r3, [pc, #160]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d114      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b76:	f7fd f9dd 	bl	8004f34 <HAL_GetTick>
 8007b7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b7c:	e00a      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fd f9d9 	bl	8004f34 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e034      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b94:	4b1d      	ldr	r3, [pc, #116]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0ee      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ba8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bac:	d10d      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007bae:	4b17      	ldr	r3, [pc, #92]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc2:	4912      	ldr	r1, [pc, #72]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	608b      	str	r3, [r1, #8]
 8007bc8:	e005      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007bca:	4b10      	ldr	r3, [pc, #64]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	4a0f      	ldr	r2, [pc, #60]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007bd0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007bd4:	6093      	str	r3, [r2, #8]
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007bd8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007be2:	490a      	ldr	r1, [pc, #40]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7c1a      	ldrb	r2, [r3, #16]
 8007bf8:	4b07      	ldr	r3, [pc, #28]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bfa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	42470068 	.word	0x42470068
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	40007000 	.word	0x40007000
 8007c14:	42470e40 	.word	0x42470e40
 8007c18:	424711e0 	.word	0x424711e0

08007c1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e073      	b.n	8007d1a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	7f5b      	ldrb	r3, [r3, #29]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d105      	bne.n	8007c48 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fa fa66 	bl	8002114 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d055      	beq.n	8007d08 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	22ca      	movs	r2, #202	@ 0xca
 8007c62:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2253      	movs	r2, #83	@ 0x53
 8007c6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fa49 	bl	8008104 <RTC_EnterInitMode>
 8007c72:	4603      	mov	r3, r0
 8007c74:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d12c      	bne.n	8007cd6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c8e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6899      	ldr	r1, [r3, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	68d2      	ldr	r2, [r2, #12]
 8007cb6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6919      	ldr	r1, [r3, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	041a      	lsls	r2, r3, #16
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fa50 	bl	8008172 <RTC_ExitInitMode>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d110      	bne.n	8007cfe <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007cea:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699a      	ldr	r2, [r3, #24]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	22ff      	movs	r2, #255	@ 0xff
 8007d04:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d06:	e001      	b.n	8007d0c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d22:	b590      	push	{r4, r7, lr}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	7f1b      	ldrb	r3, [r3, #28]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <HAL_RTC_SetTime+0x1c>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e087      	b.n	8007e4e <HAL_RTC_SetTime+0x12c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2202      	movs	r2, #2
 8007d48:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d126      	bne.n	8007d9e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d102      	bne.n	8007d64 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2200      	movs	r2, #0
 8007d62:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fa27 	bl	80081bc <RTC_ByteToBcd2>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fa20 	bl	80081bc <RTC_ByteToBcd2>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007d80:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	789b      	ldrb	r3, [r3, #2]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fa18 	bl	80081bc <RTC_ByteToBcd2>
 8007d8c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007d8e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	78db      	ldrb	r3, [r3, #3]
 8007d96:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	e018      	b.n	8007dd0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2200      	movs	r2, #0
 8007db0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	785b      	ldrb	r3, [r3, #1]
 8007dbc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007dbe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007dc4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	78db      	ldrb	r3, [r3, #3]
 8007dca:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	22ca      	movs	r2, #202	@ 0xca
 8007dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2253      	movs	r2, #83	@ 0x53
 8007dde:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f98f 	bl	8008104 <RTC_EnterInitMode>
 8007de6:	4603      	mov	r3, r0
 8007de8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007dea:	7cfb      	ldrb	r3, [r7, #19]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d120      	bne.n	8007e32 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007dfa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007dfe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007e0e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6899      	ldr	r1, [r3, #8]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 f9a2 	bl	8008172 <RTC_ExitInitMode>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007e32:	7cfb      	ldrb	r3, [r7, #19]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d102      	bne.n	8007e3e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	22ff      	movs	r2, #255	@ 0xff
 8007e44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	771a      	strb	r2, [r3, #28]

  return status;
 8007e4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd90      	pop	{r4, r7, pc}

08007e56 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b086      	sub	sp, #24
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007e88:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007e8c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	0c1b      	lsrs	r3, r3, #16
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	0d9b      	lsrs	r3, r3, #22
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d11a      	bne.n	8007f08 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 f98e 	bl	80081f8 <RTC_Bcd2ToByte>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	785b      	ldrb	r3, [r3, #1]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 f985 	bl	80081f8 <RTC_Bcd2ToByte>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	789b      	ldrb	r3, [r3, #2]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 f97c 	bl	80081f8 <RTC_Bcd2ToByte>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f12:	b590      	push	{r4, r7, lr}
 8007f14:	b087      	sub	sp, #28
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	7f1b      	ldrb	r3, [r3, #28]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_RTC_SetDate+0x1c>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e071      	b.n	8008012 <HAL_RTC_SetDate+0x100>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2201      	movs	r2, #1
 8007f32:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2202      	movs	r2, #2
 8007f38:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10e      	bne.n	8007f5e <HAL_RTC_SetDate+0x4c>
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d008      	beq.n	8007f5e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	f023 0310 	bic.w	r3, r3, #16
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	330a      	adds	r3, #10
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d11c      	bne.n	8007f9e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	78db      	ldrb	r3, [r3, #3]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 f927 	bl	80081bc <RTC_ByteToBcd2>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	785b      	ldrb	r3, [r3, #1]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f920 	bl	80081bc <RTC_ByteToBcd2>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007f80:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	789b      	ldrb	r3, [r3, #2]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f918 	bl	80081bc <RTC_ByteToBcd2>
 8007f8c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007f8e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
 8007f9c:	e00e      	b.n	8007fbc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	78db      	ldrb	r3, [r3, #3]
 8007fa2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007faa:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007fb0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	22ca      	movs	r2, #202	@ 0xca
 8007fc2:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2253      	movs	r2, #83	@ 0x53
 8007fca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f000 f899 	bl	8008104 <RTC_EnterInitMode>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007fd6:	7cfb      	ldrb	r3, [r7, #19]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10c      	bne.n	8007ff6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007fe6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007fea:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f8c0 	bl	8008172 <RTC_ExitInitMode>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007ff6:	7cfb      	ldrb	r3, [r7, #19]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2201      	movs	r2, #1
 8008000:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	22ff      	movs	r2, #255	@ 0xff
 8008008:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	771a      	strb	r2, [r3, #28]

  return status;
 8008010:	7cfb      	ldrb	r3, [r7, #19]
}
 8008012:	4618      	mov	r0, r3
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	bd90      	pop	{r4, r7, pc}

0800801a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b086      	sub	sp, #24
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008034:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008038:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	0c1b      	lsrs	r3, r3, #16
 800803e:	b2da      	uxtb	r2, r3
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	0a1b      	lsrs	r3, r3, #8
 8008048:	b2db      	uxtb	r3, r3
 800804a:	f003 031f 	and.w	r3, r3, #31
 800804e:	b2da      	uxtb	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800805c:	b2da      	uxtb	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	0b5b      	lsrs	r3, r3, #13
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	b2da      	uxtb	r2, r3
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d11a      	bne.n	80080ae <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	78db      	ldrb	r3, [r3, #3]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f8bb 	bl	80081f8 <RTC_Bcd2ToByte>
 8008082:	4603      	mov	r3, r0
 8008084:	461a      	mov	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 f8b2 	bl	80081f8 <RTC_Bcd2ToByte>
 8008094:	4603      	mov	r3, r0
 8008096:	461a      	mov	r2, r3
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	789b      	ldrb	r3, [r3, #2]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 f8a9 	bl	80081f8 <RTC_Bcd2ToByte>
 80080a6:	4603      	mov	r3, r0
 80080a8:	461a      	mov	r2, r3
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a0d      	ldr	r2, [pc, #52]	@ (8008100 <HAL_RTC_WaitForSynchro+0x48>)
 80080ca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080cc:	f7fc ff32 	bl	8004f34 <HAL_GetTick>
 80080d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80080d2:	e009      	b.n	80080e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80080d4:	f7fc ff2e 	bl	8004f34 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080e2:	d901      	bls.n	80080e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e007      	b.n	80080f8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0ee      	beq.n	80080d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	00013f5f 	.word	0x00013f5f

08008104 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	d122      	bne.n	8008168 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008130:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008132:	f7fc feff 	bl	8004f34 <HAL_GetTick>
 8008136:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008138:	e00c      	b.n	8008154 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800813a:	f7fc fefb 	bl	8004f34 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008148:	d904      	bls.n	8008154 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2204      	movs	r2, #4
 800814e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <RTC_EnterInitMode+0x64>
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d1e8      	bne.n	800813a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800818c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f003 0320 	and.w	r3, r3, #32
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff ff8b 	bl	80080b8 <HAL_RTC_WaitForSynchro>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d004      	beq.n	80081b2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2204      	movs	r2, #4
 80081ac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80081ca:	e005      	b.n	80081d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3301      	adds	r3, #1
 80081d0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80081d2:	79fb      	ldrb	r3, [r7, #7]
 80081d4:	3b0a      	subs	r3, #10
 80081d6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b09      	cmp	r3, #9
 80081dc:	d8f6      	bhi.n	80081cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	b2db      	uxtb	r3, r3
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8008206:	79fb      	ldrb	r3, [r7, #7]
 8008208:	091b      	lsrs	r3, r3, #4
 800820a:	b2db      	uxtb	r3, r3
 800820c:	461a      	mov	r2, r3
 800820e:	4613      	mov	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	b2da      	uxtb	r2, r3
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	b2db      	uxtb	r3, r3
 8008224:	4413      	add	r3, r2
 8008226:	b2db      	uxtb	r3, r3
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e07b      	b.n	800833e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824a:	2b00      	cmp	r3, #0
 800824c:	d108      	bne.n	8008260 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008256:	d009      	beq.n	800826c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	61da      	str	r2, [r3, #28]
 800825e:	e005      	b.n	800826c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7f9 ff70 	bl	800216c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80082b4:	431a      	orrs	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082be:	431a      	orrs	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082dc:	431a      	orrs	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f0:	ea42 0103 	orr.w	r1, r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	0c1b      	lsrs	r3, r3, #16
 800830a:	f003 0104 	and.w	r1, r3, #4
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008312:	f003 0210 	and.w	r2, r3, #16
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69da      	ldr	r2, [r3, #28]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800832c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b088      	sub	sp, #32
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	4613      	mov	r3, r2
 8008354:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008356:	f7fc fded 	bl	8004f34 <HAL_GetTick>
 800835a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800835c:	88fb      	ldrh	r3, [r7, #6]
 800835e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b01      	cmp	r3, #1
 800836a:	d001      	beq.n	8008370 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800836c:	2302      	movs	r3, #2
 800836e:	e12a      	b.n	80085c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <HAL_SPI_Transmit+0x36>
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e122      	b.n	80085c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_SPI_Transmit+0x48>
 800838a:	2302      	movs	r3, #2
 800838c:	e11b      	b.n	80085c6 <HAL_SPI_Transmit+0x280>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2203      	movs	r2, #3
 800839a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	88fa      	ldrh	r2, [r7, #6]
 80083ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	88fa      	ldrh	r2, [r7, #6]
 80083b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083dc:	d10f      	bne.n	80083fe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008408:	2b40      	cmp	r3, #64	@ 0x40
 800840a:	d007      	beq.n	800841c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800841a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008424:	d152      	bne.n	80084cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <HAL_SPI_Transmit+0xee>
 800842e:	8b7b      	ldrh	r3, [r7, #26]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d145      	bne.n	80084c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008438:	881a      	ldrh	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008444:	1c9a      	adds	r2, r3, #2
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008458:	e032      	b.n	80084c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f003 0302 	and.w	r3, r3, #2
 8008464:	2b02      	cmp	r3, #2
 8008466:	d112      	bne.n	800848e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846c:	881a      	ldrh	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008478:	1c9a      	adds	r2, r3, #2
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008482:	b29b      	uxth	r3, r3
 8008484:	3b01      	subs	r3, #1
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800848c:	e018      	b.n	80084c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800848e:	f7fc fd51 	bl	8004f34 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d803      	bhi.n	80084a6 <HAL_SPI_Transmit+0x160>
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a4:	d102      	bne.n	80084ac <HAL_SPI_Transmit+0x166>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d109      	bne.n	80084c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e082      	b.n	80085c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1c7      	bne.n	800845a <HAL_SPI_Transmit+0x114>
 80084ca:	e053      	b.n	8008574 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <HAL_SPI_Transmit+0x194>
 80084d4:	8b7b      	ldrh	r3, [r7, #26]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d147      	bne.n	800856a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	330c      	adds	r3, #12
 80084e4:	7812      	ldrb	r2, [r2, #0]
 80084e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008500:	e033      	b.n	800856a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0302 	and.w	r3, r3, #2
 800850c:	2b02      	cmp	r3, #2
 800850e:	d113      	bne.n	8008538 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	330c      	adds	r3, #12
 800851a:	7812      	ldrb	r2, [r2, #0]
 800851c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008536:	e018      	b.n	800856a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008538:	f7fc fcfc 	bl	8004f34 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	429a      	cmp	r2, r3
 8008546:	d803      	bhi.n	8008550 <HAL_SPI_Transmit+0x20a>
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854e:	d102      	bne.n	8008556 <HAL_SPI_Transmit+0x210>
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d109      	bne.n	800856a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e02d      	b.n	80085c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800856e:	b29b      	uxth	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1c6      	bne.n	8008502 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 fa67 	bl	8008a4c <SPI_EndRxTxTransaction>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10a      	bne.n	80085a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	617b      	str	r3, [r7, #20]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e000      	b.n	80085c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80085c4:	2300      	movs	r3, #0
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3720      	adds	r7, #32
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b08a      	sub	sp, #40	@ 0x28
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
 80085da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085dc:	2301      	movs	r3, #1
 80085de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085e0:	f7fc fca8 	bl	8004f34 <HAL_GetTick>
 80085e4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80085ec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80085f4:	887b      	ldrh	r3, [r7, #2]
 80085f6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085f8:	7ffb      	ldrb	r3, [r7, #31]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d00c      	beq.n	8008618 <HAL_SPI_TransmitReceive+0x4a>
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008604:	d106      	bne.n	8008614 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d102      	bne.n	8008614 <HAL_SPI_TransmitReceive+0x46>
 800860e:	7ffb      	ldrb	r3, [r7, #31]
 8008610:	2b04      	cmp	r3, #4
 8008612:	d001      	beq.n	8008618 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8008614:	2302      	movs	r3, #2
 8008616:	e17f      	b.n	8008918 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d005      	beq.n	800862a <HAL_SPI_TransmitReceive+0x5c>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d002      	beq.n	800862a <HAL_SPI_TransmitReceive+0x5c>
 8008624:	887b      	ldrh	r3, [r7, #2]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e174      	b.n	8008918 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_SPI_TransmitReceive+0x6e>
 8008638:	2302      	movs	r3, #2
 800863a:	e16d      	b.n	8008918 <HAL_SPI_TransmitReceive+0x34a>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b04      	cmp	r3, #4
 800864e:	d003      	beq.n	8008658 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2205      	movs	r2, #5
 8008654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	887a      	ldrh	r2, [r7, #2]
 8008668:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	887a      	ldrh	r2, [r7, #2]
 800866e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	887a      	ldrh	r2, [r7, #2]
 800867a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	887a      	ldrh	r2, [r7, #2]
 8008680:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008698:	2b40      	cmp	r3, #64	@ 0x40
 800869a:	d007      	beq.n	80086ac <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086b4:	d17e      	bne.n	80087b4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <HAL_SPI_TransmitReceive+0xf6>
 80086be:	8afb      	ldrh	r3, [r7, #22]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d16c      	bne.n	800879e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c8:	881a      	ldrh	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d4:	1c9a      	adds	r2, r3, #2
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086e8:	e059      	b.n	800879e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d11b      	bne.n	8008730 <HAL_SPI_TransmitReceive+0x162>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d016      	beq.n	8008730 <HAL_SPI_TransmitReceive+0x162>
 8008702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008704:	2b01      	cmp	r3, #1
 8008706:	d113      	bne.n	8008730 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870c:	881a      	ldrh	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008718:	1c9a      	adds	r2, r3, #2
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b01      	cmp	r3, #1
 800873c:	d119      	bne.n	8008772 <HAL_SPI_TransmitReceive+0x1a4>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008742:	b29b      	uxth	r3, r3
 8008744:	2b00      	cmp	r3, #0
 8008746:	d014      	beq.n	8008772 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008752:	b292      	uxth	r2, r2
 8008754:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875a:	1c9a      	adds	r2, r3, #2
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008764:	b29b      	uxth	r3, r3
 8008766:	3b01      	subs	r3, #1
 8008768:	b29a      	uxth	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800876e:	2301      	movs	r3, #1
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008772:	f7fc fbdf 	bl	8004f34 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800877e:	429a      	cmp	r2, r3
 8008780:	d80d      	bhi.n	800879e <HAL_SPI_TransmitReceive+0x1d0>
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008788:	d009      	beq.n	800879e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e0bc      	b.n	8008918 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1a0      	bne.n	80086ea <HAL_SPI_TransmitReceive+0x11c>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d19b      	bne.n	80086ea <HAL_SPI_TransmitReceive+0x11c>
 80087b2:	e082      	b.n	80088ba <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <HAL_SPI_TransmitReceive+0x1f4>
 80087bc:	8afb      	ldrh	r3, [r7, #22]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d171      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	330c      	adds	r3, #12
 80087cc:	7812      	ldrb	r2, [r2, #0]
 80087ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d4:	1c5a      	adds	r2, r3, #1
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087de:	b29b      	uxth	r3, r3
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087e8:	e05d      	b.n	80088a6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d11c      	bne.n	8008832 <HAL_SPI_TransmitReceive+0x264>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d017      	beq.n	8008832 <HAL_SPI_TransmitReceive+0x264>
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	2b01      	cmp	r3, #1
 8008806:	d114      	bne.n	8008832 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	330c      	adds	r3, #12
 8008812:	7812      	ldrb	r2, [r2, #0]
 8008814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800881a:	1c5a      	adds	r2, r3, #1
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008824:	b29b      	uxth	r3, r3
 8008826:	3b01      	subs	r3, #1
 8008828:	b29a      	uxth	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b01      	cmp	r3, #1
 800883e:	d119      	bne.n	8008874 <HAL_SPI_TransmitReceive+0x2a6>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008844:	b29b      	uxth	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d014      	beq.n	8008874 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008866:	b29b      	uxth	r3, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008870:	2301      	movs	r3, #1
 8008872:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008874:	f7fc fb5e 	bl	8004f34 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008880:	429a      	cmp	r2, r3
 8008882:	d803      	bhi.n	800888c <HAL_SPI_TransmitReceive+0x2be>
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888a:	d102      	bne.n	8008892 <HAL_SPI_TransmitReceive+0x2c4>
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	2b00      	cmp	r3, #0
 8008890:	d109      	bne.n	80088a6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e038      	b.n	8008918 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d19c      	bne.n	80087ea <HAL_SPI_TransmitReceive+0x21c>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d197      	bne.n	80087ea <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088ba:	6a3a      	ldr	r2, [r7, #32]
 80088bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 f8c4 	bl	8008a4c <SPI_EndRxTxTransaction>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d008      	beq.n	80088dc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2220      	movs	r2, #32
 80088ce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e01d      	b.n	8008918 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088e4:	2300      	movs	r3, #0
 80088e6:	613b      	str	r3, [r7, #16]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	613b      	str	r3, [r7, #16]
 80088f8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e000      	b.n	8008918 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008916:	2300      	movs	r3, #0
  }
}
 8008918:	4618      	mov	r0, r3
 800891a:	3728      	adds	r7, #40	@ 0x28
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800892e:	b2db      	uxtb	r3, r3
}
 8008930:	4618      	mov	r0, r3
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	603b      	str	r3, [r7, #0]
 8008948:	4613      	mov	r3, r2
 800894a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800894c:	f7fc faf2 	bl	8004f34 <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	1a9b      	subs	r3, r3, r2
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	4413      	add	r3, r2
 800895a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800895c:	f7fc faea 	bl	8004f34 <HAL_GetTick>
 8008960:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008962:	4b39      	ldr	r3, [pc, #228]	@ (8008a48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	015b      	lsls	r3, r3, #5
 8008968:	0d1b      	lsrs	r3, r3, #20
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	fb02 f303 	mul.w	r3, r2, r3
 8008970:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008972:	e054      	b.n	8008a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897a:	d050      	beq.n	8008a1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800897c:	f7fc fada 	bl	8004f34 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	69fa      	ldr	r2, [r7, #28]
 8008988:	429a      	cmp	r2, r3
 800898a:	d902      	bls.n	8008992 <SPI_WaitFlagStateUntilTimeout+0x56>
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d13d      	bne.n	8008a0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089aa:	d111      	bne.n	80089d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089b4:	d004      	beq.n	80089c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089be:	d107      	bne.n	80089d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089d8:	d10f      	bne.n	80089fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80089e8:	601a      	str	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e017      	b.n	8008a3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	4013      	ands	r3, r2
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	bf0c      	ite	eq
 8008a2e:	2301      	moveq	r3, #1
 8008a30:	2300      	movne	r3, #0
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d19b      	bne.n	8008974 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3720      	adds	r7, #32
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20000004 	.word	0x20000004

08008a4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b088      	sub	sp, #32
 8008a50:	af02      	add	r7, sp, #8
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	2102      	movs	r1, #2
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f7ff ff6a 	bl	800893c <SPI_WaitFlagStateUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a72:	f043 0220 	orr.w	r2, r3, #32
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e032      	b.n	8008ae4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008aec <SPI_EndRxTxTransaction+0xa0>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a1b      	ldr	r2, [pc, #108]	@ (8008af0 <SPI_EndRxTxTransaction+0xa4>)
 8008a84:	fba2 2303 	umull	r2, r3, r2, r3
 8008a88:	0d5b      	lsrs	r3, r3, #21
 8008a8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008a8e:	fb02 f303 	mul.w	r3, r2, r3
 8008a92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a9c:	d112      	bne.n	8008ac4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2180      	movs	r1, #128	@ 0x80
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f7ff ff47 	bl	800893c <SPI_WaitFlagStateUntilTimeout>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d016      	beq.n	8008ae2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab8:	f043 0220 	orr.w	r2, r3, #32
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e00f      	b.n	8008ae4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ada:	2b80      	cmp	r3, #128	@ 0x80
 8008adc:	d0f2      	beq.n	8008ac4 <SPI_EndRxTxTransaction+0x78>
 8008ade:	e000      	b.n	8008ae2 <SPI_EndRxTxTransaction+0x96>
        break;
 8008ae0:	bf00      	nop
  }

  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3718      	adds	r7, #24
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	20000004 	.word	0x20000004
 8008af0:	165e9f81 	.word	0x165e9f81

08008af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e041      	b.n	8008b8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d106      	bne.n	8008b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7f9 fb80 	bl	8002220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4619      	mov	r1, r3
 8008b32:	4610      	mov	r0, r2
 8008b34:	f000 fa9e 	bl	8009074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d001      	beq.n	8008bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e044      	b.n	8008c36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68da      	ldr	r2, [r3, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f042 0201 	orr.w	r2, r2, #1
 8008bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c44 <HAL_TIM_Base_Start_IT+0xb0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d018      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x6c>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd6:	d013      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x6c>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8008c48 <HAL_TIM_Base_Start_IT+0xb4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00e      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x6c>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a19      	ldr	r2, [pc, #100]	@ (8008c4c <HAL_TIM_Base_Start_IT+0xb8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d009      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x6c>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a17      	ldr	r2, [pc, #92]	@ (8008c50 <HAL_TIM_Base_Start_IT+0xbc>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <HAL_TIM_Base_Start_IT+0x6c>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a16      	ldr	r2, [pc, #88]	@ (8008c54 <HAL_TIM_Base_Start_IT+0xc0>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d111      	bne.n	8008c24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b06      	cmp	r3, #6
 8008c10:	d010      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f042 0201 	orr.w	r2, r2, #1
 8008c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c22:	e007      	b.n	8008c34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 0201 	orr.w	r2, r2, #1
 8008c32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	40010000 	.word	0x40010000
 8008c48:	40000400 	.word	0x40000400
 8008c4c:	40000800 	.word	0x40000800
 8008c50:	40000c00 	.word	0x40000c00
 8008c54:	40014000 	.word	0x40014000

08008c58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68da      	ldr	r2, [r3, #12]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 0201 	bic.w	r2, r2, #1
 8008c6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6a1a      	ldr	r2, [r3, #32]
 8008c76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10f      	bne.n	8008ca0 <HAL_TIM_Base_Stop_IT+0x48>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6a1a      	ldr	r2, [r3, #32]
 8008c86:	f240 4344 	movw	r3, #1092	@ 0x444
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d107      	bne.n	8008ca0 <HAL_TIM_Base_Stop_IT+0x48>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0201 	bic.w	r2, r2, #1
 8008c9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008ca8:	2300      	movs	r3, #0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d020      	beq.n	8008d1a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d01b      	beq.n	8008d1a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f06f 0202 	mvn.w	r2, #2
 8008cea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	f003 0303 	and.w	r3, r3, #3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f999 	bl	8009038 <HAL_TIM_IC_CaptureCallback>
 8008d06:	e005      	b.n	8008d14 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f98b 	bl	8009024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f99c 	bl	800904c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d020      	beq.n	8008d66 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01b      	beq.n	8008d66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f06f 0204 	mvn.w	r2, #4
 8008d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f973 	bl	8009038 <HAL_TIM_IC_CaptureCallback>
 8008d52:	e005      	b.n	8008d60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f965 	bl	8009024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f976 	bl	800904c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f003 0308 	and.w	r3, r3, #8
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d020      	beq.n	8008db2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01b      	beq.n	8008db2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f06f 0208 	mvn.w	r2, #8
 8008d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2204      	movs	r2, #4
 8008d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d003      	beq.n	8008da0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f94d 	bl	8009038 <HAL_TIM_IC_CaptureCallback>
 8008d9e:	e005      	b.n	8008dac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f93f 	bl	8009024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f950 	bl	800904c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d020      	beq.n	8008dfe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f003 0310 	and.w	r3, r3, #16
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d01b      	beq.n	8008dfe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f06f 0210 	mvn.w	r2, #16
 8008dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2208      	movs	r2, #8
 8008dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d003      	beq.n	8008dec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f927 	bl	8009038 <HAL_TIM_IC_CaptureCallback>
 8008dea:	e005      	b.n	8008df8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f919 	bl	8009024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f92a 	bl	800904c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00c      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f06f 0201 	mvn.w	r2, #1
 8008e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7f9 f871 	bl	8001f04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00c      	beq.n	8008e46 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 fab5 	bl	80093b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00c      	beq.n	8008e6a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d007      	beq.n	8008e6a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f8fb 	bl	8009060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00c      	beq.n	8008e8e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f003 0320 	and.w	r3, r3, #32
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d007      	beq.n	8008e8e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f06f 0220 	mvn.w	r2, #32
 8008e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fa87 	bl	800939c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d101      	bne.n	8008eb2 <HAL_TIM_ConfigClockSource+0x1c>
 8008eae:	2302      	movs	r3, #2
 8008eb0:	e0b4      	b.n	800901c <HAL_TIM_ConfigClockSource+0x186>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008ed0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ed8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eea:	d03e      	beq.n	8008f6a <HAL_TIM_ConfigClockSource+0xd4>
 8008eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ef0:	f200 8087 	bhi.w	8009002 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ef8:	f000 8086 	beq.w	8009008 <HAL_TIM_ConfigClockSource+0x172>
 8008efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f00:	d87f      	bhi.n	8009002 <HAL_TIM_ConfigClockSource+0x16c>
 8008f02:	2b70      	cmp	r3, #112	@ 0x70
 8008f04:	d01a      	beq.n	8008f3c <HAL_TIM_ConfigClockSource+0xa6>
 8008f06:	2b70      	cmp	r3, #112	@ 0x70
 8008f08:	d87b      	bhi.n	8009002 <HAL_TIM_ConfigClockSource+0x16c>
 8008f0a:	2b60      	cmp	r3, #96	@ 0x60
 8008f0c:	d050      	beq.n	8008fb0 <HAL_TIM_ConfigClockSource+0x11a>
 8008f0e:	2b60      	cmp	r3, #96	@ 0x60
 8008f10:	d877      	bhi.n	8009002 <HAL_TIM_ConfigClockSource+0x16c>
 8008f12:	2b50      	cmp	r3, #80	@ 0x50
 8008f14:	d03c      	beq.n	8008f90 <HAL_TIM_ConfigClockSource+0xfa>
 8008f16:	2b50      	cmp	r3, #80	@ 0x50
 8008f18:	d873      	bhi.n	8009002 <HAL_TIM_ConfigClockSource+0x16c>
 8008f1a:	2b40      	cmp	r3, #64	@ 0x40
 8008f1c:	d058      	beq.n	8008fd0 <HAL_TIM_ConfigClockSource+0x13a>
 8008f1e:	2b40      	cmp	r3, #64	@ 0x40
 8008f20:	d86f      	bhi.n	8009002 <HAL_TIM_ConfigClockSource+0x16c>
 8008f22:	2b30      	cmp	r3, #48	@ 0x30
 8008f24:	d064      	beq.n	8008ff0 <HAL_TIM_ConfigClockSource+0x15a>
 8008f26:	2b30      	cmp	r3, #48	@ 0x30
 8008f28:	d86b      	bhi.n	8009002 <HAL_TIM_ConfigClockSource+0x16c>
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d060      	beq.n	8008ff0 <HAL_TIM_ConfigClockSource+0x15a>
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	d867      	bhi.n	8009002 <HAL_TIM_ConfigClockSource+0x16c>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d05c      	beq.n	8008ff0 <HAL_TIM_ConfigClockSource+0x15a>
 8008f36:	2b10      	cmp	r3, #16
 8008f38:	d05a      	beq.n	8008ff0 <HAL_TIM_ConfigClockSource+0x15a>
 8008f3a:	e062      	b.n	8009002 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f4c:	f000 f998 	bl	8009280 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	609a      	str	r2, [r3, #8]
      break;
 8008f68:	e04f      	b.n	800900a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f7a:	f000 f981 	bl	8009280 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f8c:	609a      	str	r2, [r3, #8]
      break;
 8008f8e:	e03c      	b.n	800900a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f000 f8f5 	bl	800918c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2150      	movs	r1, #80	@ 0x50
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 f94e 	bl	800924a <TIM_ITRx_SetConfig>
      break;
 8008fae:	e02c      	b.n	800900a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f000 f914 	bl	80091ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2160      	movs	r1, #96	@ 0x60
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f93e 	bl	800924a <TIM_ITRx_SetConfig>
      break;
 8008fce:	e01c      	b.n	800900a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f000 f8d5 	bl	800918c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2140      	movs	r1, #64	@ 0x40
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 f92e 	bl	800924a <TIM_ITRx_SetConfig>
      break;
 8008fee:	e00c      	b.n	800900a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f000 f925 	bl	800924a <TIM_ITRx_SetConfig>
      break;
 8009000:	e003      	b.n	800900a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	73fb      	strb	r3, [r7, #15]
      break;
 8009006:	e000      	b.n	800900a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009008:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009054:	bf00      	nop
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a3a      	ldr	r2, [pc, #232]	@ (8009170 <TIM_Base_SetConfig+0xfc>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d00f      	beq.n	80090ac <TIM_Base_SetConfig+0x38>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009092:	d00b      	beq.n	80090ac <TIM_Base_SetConfig+0x38>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a37      	ldr	r2, [pc, #220]	@ (8009174 <TIM_Base_SetConfig+0x100>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d007      	beq.n	80090ac <TIM_Base_SetConfig+0x38>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a36      	ldr	r2, [pc, #216]	@ (8009178 <TIM_Base_SetConfig+0x104>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d003      	beq.n	80090ac <TIM_Base_SetConfig+0x38>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a35      	ldr	r2, [pc, #212]	@ (800917c <TIM_Base_SetConfig+0x108>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d108      	bne.n	80090be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a2b      	ldr	r2, [pc, #172]	@ (8009170 <TIM_Base_SetConfig+0xfc>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d01b      	beq.n	80090fe <TIM_Base_SetConfig+0x8a>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090cc:	d017      	beq.n	80090fe <TIM_Base_SetConfig+0x8a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a28      	ldr	r2, [pc, #160]	@ (8009174 <TIM_Base_SetConfig+0x100>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d013      	beq.n	80090fe <TIM_Base_SetConfig+0x8a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a27      	ldr	r2, [pc, #156]	@ (8009178 <TIM_Base_SetConfig+0x104>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d00f      	beq.n	80090fe <TIM_Base_SetConfig+0x8a>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a26      	ldr	r2, [pc, #152]	@ (800917c <TIM_Base_SetConfig+0x108>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00b      	beq.n	80090fe <TIM_Base_SetConfig+0x8a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a25      	ldr	r2, [pc, #148]	@ (8009180 <TIM_Base_SetConfig+0x10c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d007      	beq.n	80090fe <TIM_Base_SetConfig+0x8a>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a24      	ldr	r2, [pc, #144]	@ (8009184 <TIM_Base_SetConfig+0x110>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d003      	beq.n	80090fe <TIM_Base_SetConfig+0x8a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a23      	ldr	r2, [pc, #140]	@ (8009188 <TIM_Base_SetConfig+0x114>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d108      	bne.n	8009110 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a0e      	ldr	r2, [pc, #56]	@ (8009170 <TIM_Base_SetConfig+0xfc>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d103      	bne.n	8009144 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	691a      	ldr	r2, [r3, #16]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b01      	cmp	r3, #1
 8009154:	d105      	bne.n	8009162 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	f023 0201 	bic.w	r2, r3, #1
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	611a      	str	r2, [r3, #16]
  }
}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40010000 	.word	0x40010000
 8009174:	40000400 	.word	0x40000400
 8009178:	40000800 	.word	0x40000800
 800917c:	40000c00 	.word	0x40000c00
 8009180:	40014000 	.word	0x40014000
 8009184:	40014400 	.word	0x40014400
 8009188:	40014800 	.word	0x40014800

0800918c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	f023 0201 	bic.w	r2, r3, #1
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	011b      	lsls	r3, r3, #4
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	4313      	orrs	r3, r2
 80091c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f023 030a 	bic.w	r3, r3, #10
 80091c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b087      	sub	sp, #28
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6a1b      	ldr	r3, [r3, #32]
 8009200:	f023 0210 	bic.w	r2, r3, #16
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	031b      	lsls	r3, r3, #12
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4313      	orrs	r3, r2
 800921e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009226:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	4313      	orrs	r3, r2
 8009230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	621a      	str	r2, [r3, #32]
}
 800923e:	bf00      	nop
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800924a:	b480      	push	{r7}
 800924c:	b085      	sub	sp, #20
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009262:	683a      	ldr	r2, [r7, #0]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4313      	orrs	r3, r2
 8009268:	f043 0307 	orr.w	r3, r3, #7
 800926c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	609a      	str	r2, [r3, #8]
}
 8009274:	bf00      	nop
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009280:	b480      	push	{r7}
 8009282:	b087      	sub	sp, #28
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800929a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	021a      	lsls	r2, r3, #8
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	431a      	orrs	r2, r3
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	609a      	str	r2, [r3, #8]
}
 80092b4:	bf00      	nop
 80092b6:	371c      	adds	r7, #28
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d101      	bne.n	80092d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092d4:	2302      	movs	r3, #2
 80092d6:	e050      	b.n	800937a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	4313      	orrs	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a1c      	ldr	r2, [pc, #112]	@ (8009388 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d018      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009324:	d013      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a18      	ldr	r2, [pc, #96]	@ (800938c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d00e      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a16      	ldr	r2, [pc, #88]	@ (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d009      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a15      	ldr	r2, [pc, #84]	@ (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d004      	beq.n	800934e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a13      	ldr	r2, [pc, #76]	@ (8009398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d10c      	bne.n	8009368 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	4313      	orrs	r3, r2
 800935e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	40010000 	.word	0x40010000
 800938c:	40000400 	.word	0x40000400
 8009390:	40000800 	.word	0x40000800
 8009394:	40000c00 	.word	0x40000c00
 8009398:	40014000 	.word	0x40014000

0800939c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e042      	b.n	800945c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d106      	bne.n	80093f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7f8 ff40 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2224      	movs	r2, #36	@ 0x24
 80093f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68da      	ldr	r2, [r3, #12]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009406:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f973 	bl	80096f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	691a      	ldr	r2, [r3, #16]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800941c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	695a      	ldr	r2, [r3, #20]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800942c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800943c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2220      	movs	r2, #32
 8009450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08a      	sub	sp, #40	@ 0x28
 8009468:	af02      	add	r7, sp, #8
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	4613      	mov	r3, r2
 8009472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b20      	cmp	r3, #32
 8009482:	d175      	bne.n	8009570 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d002      	beq.n	8009490 <HAL_UART_Transmit+0x2c>
 800948a:	88fb      	ldrh	r3, [r7, #6]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e06e      	b.n	8009572 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2221      	movs	r2, #33	@ 0x21
 800949e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094a2:	f7fb fd47 	bl	8004f34 <HAL_GetTick>
 80094a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	88fa      	ldrh	r2, [r7, #6]
 80094ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	88fa      	ldrh	r2, [r7, #6]
 80094b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094bc:	d108      	bne.n	80094d0 <HAL_UART_Transmit+0x6c>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d104      	bne.n	80094d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80094c6:	2300      	movs	r3, #0
 80094c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	61bb      	str	r3, [r7, #24]
 80094ce:	e003      	b.n	80094d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80094d8:	e02e      	b.n	8009538 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	2200      	movs	r2, #0
 80094e2:	2180      	movs	r1, #128	@ 0x80
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 f848 	bl	800957a <UART_WaitOnFlagUntilTimeout>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80094f8:	2303      	movs	r3, #3
 80094fa:	e03a      	b.n	8009572 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10b      	bne.n	800951a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009510:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	3302      	adds	r3, #2
 8009516:	61bb      	str	r3, [r7, #24]
 8009518:	e007      	b.n	800952a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	781a      	ldrb	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	3301      	adds	r3, #1
 8009528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800952e:	b29b      	uxth	r3, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800953c:	b29b      	uxth	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1cb      	bne.n	80094da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	9300      	str	r3, [sp, #0]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2200      	movs	r2, #0
 800954a:	2140      	movs	r1, #64	@ 0x40
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f814 	bl	800957a <UART_WaitOnFlagUntilTimeout>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d005      	beq.n	8009564 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2220      	movs	r2, #32
 800955c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e006      	b.n	8009572 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	e000      	b.n	8009572 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009570:	2302      	movs	r3, #2
  }
}
 8009572:	4618      	mov	r0, r3
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b086      	sub	sp, #24
 800957e:	af00      	add	r7, sp, #0
 8009580:	60f8      	str	r0, [r7, #12]
 8009582:	60b9      	str	r1, [r7, #8]
 8009584:	603b      	str	r3, [r7, #0]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800958a:	e03b      	b.n	8009604 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009592:	d037      	beq.n	8009604 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009594:	f7fb fcce 	bl	8004f34 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	6a3a      	ldr	r2, [r7, #32]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d302      	bcc.n	80095aa <UART_WaitOnFlagUntilTimeout+0x30>
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e03a      	b.n	8009624 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d023      	beq.n	8009604 <UART_WaitOnFlagUntilTimeout+0x8a>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b80      	cmp	r3, #128	@ 0x80
 80095c0:	d020      	beq.n	8009604 <UART_WaitOnFlagUntilTimeout+0x8a>
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	2b40      	cmp	r3, #64	@ 0x40
 80095c6:	d01d      	beq.n	8009604 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0308 	and.w	r3, r3, #8
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d116      	bne.n	8009604 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80095d6:	2300      	movs	r3, #0
 80095d8:	617b      	str	r3, [r7, #20]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f81d 	bl	800962c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2208      	movs	r2, #8
 80095f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e00f      	b.n	8009624 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	4013      	ands	r3, r2
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	429a      	cmp	r2, r3
 8009612:	bf0c      	ite	eq
 8009614:	2301      	moveq	r3, #1
 8009616:	2300      	movne	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	461a      	mov	r2, r3
 800961c:	79fb      	ldrb	r3, [r7, #7]
 800961e:	429a      	cmp	r2, r3
 8009620:	d0b4      	beq.n	800958c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800962c:	b480      	push	{r7}
 800962e:	b095      	sub	sp, #84	@ 0x54
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	330c      	adds	r3, #12
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009646:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800964a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	330c      	adds	r3, #12
 8009652:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009654:	643a      	str	r2, [r7, #64]	@ 0x40
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800965a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e5      	bne.n	8009634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3314      	adds	r3, #20
 800966e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	61fb      	str	r3, [r7, #28]
   return(result);
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	f023 0301 	bic.w	r3, r3, #1
 800967e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3314      	adds	r3, #20
 8009686:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009688:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800968a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800968e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e5      	bne.n	8009668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d119      	bne.n	80096d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	330c      	adds	r3, #12
 80096aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f023 0310 	bic.w	r3, r3, #16
 80096ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096c4:	61ba      	str	r2, [r7, #24]
 80096c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6979      	ldr	r1, [r7, #20]
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	613b      	str	r3, [r7, #16]
   return(result);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e5      	bne.n	80096a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80096e6:	bf00      	nop
 80096e8:	3754      	adds	r7, #84	@ 0x54
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096f8:	b0c0      	sub	sp, #256	@ 0x100
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800970c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009710:	68d9      	ldr	r1, [r3, #12]
 8009712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	ea40 0301 	orr.w	r3, r0, r1
 800971c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800971e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	431a      	orrs	r2, r3
 800972c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	431a      	orrs	r2, r3
 8009734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	4313      	orrs	r3, r2
 800973c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800974c:	f021 010c 	bic.w	r1, r1, #12
 8009750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800975a:	430b      	orrs	r3, r1
 800975c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800975e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800976a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976e:	6999      	ldr	r1, [r3, #24]
 8009770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	ea40 0301 	orr.w	r3, r0, r1
 800977a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800977c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	4b8f      	ldr	r3, [pc, #572]	@ (80099c0 <UART_SetConfig+0x2cc>)
 8009784:	429a      	cmp	r2, r3
 8009786:	d005      	beq.n	8009794 <UART_SetConfig+0xa0>
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	4b8d      	ldr	r3, [pc, #564]	@ (80099c4 <UART_SetConfig+0x2d0>)
 8009790:	429a      	cmp	r2, r3
 8009792:	d104      	bne.n	800979e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009794:	f7fe f90e 	bl	80079b4 <HAL_RCC_GetPCLK2Freq>
 8009798:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800979c:	e003      	b.n	80097a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800979e:	f7fe f8f5 	bl	800798c <HAL_RCC_GetPCLK1Freq>
 80097a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097b0:	f040 810c 	bne.w	80099cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097b8:	2200      	movs	r2, #0
 80097ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80097be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80097c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80097c6:	4622      	mov	r2, r4
 80097c8:	462b      	mov	r3, r5
 80097ca:	1891      	adds	r1, r2, r2
 80097cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80097ce:	415b      	adcs	r3, r3
 80097d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80097d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80097d6:	4621      	mov	r1, r4
 80097d8:	eb12 0801 	adds.w	r8, r2, r1
 80097dc:	4629      	mov	r1, r5
 80097de:	eb43 0901 	adc.w	r9, r3, r1
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	f04f 0300 	mov.w	r3, #0
 80097ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097f6:	4690      	mov	r8, r2
 80097f8:	4699      	mov	r9, r3
 80097fa:	4623      	mov	r3, r4
 80097fc:	eb18 0303 	adds.w	r3, r8, r3
 8009800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009804:	462b      	mov	r3, r5
 8009806:	eb49 0303 	adc.w	r3, r9, r3
 800980a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800980e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800981a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800981e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009822:	460b      	mov	r3, r1
 8009824:	18db      	adds	r3, r3, r3
 8009826:	653b      	str	r3, [r7, #80]	@ 0x50
 8009828:	4613      	mov	r3, r2
 800982a:	eb42 0303 	adc.w	r3, r2, r3
 800982e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009838:	f7f7 f9b8 	bl	8000bac <__aeabi_uldivmod>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4b61      	ldr	r3, [pc, #388]	@ (80099c8 <UART_SetConfig+0x2d4>)
 8009842:	fba3 2302 	umull	r2, r3, r3, r2
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	011c      	lsls	r4, r3, #4
 800984a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800984e:	2200      	movs	r2, #0
 8009850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009854:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800985c:	4642      	mov	r2, r8
 800985e:	464b      	mov	r3, r9
 8009860:	1891      	adds	r1, r2, r2
 8009862:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009864:	415b      	adcs	r3, r3
 8009866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800986c:	4641      	mov	r1, r8
 800986e:	eb12 0a01 	adds.w	sl, r2, r1
 8009872:	4649      	mov	r1, r9
 8009874:	eb43 0b01 	adc.w	fp, r3, r1
 8009878:	f04f 0200 	mov.w	r2, #0
 800987c:	f04f 0300 	mov.w	r3, #0
 8009880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800988c:	4692      	mov	sl, r2
 800988e:	469b      	mov	fp, r3
 8009890:	4643      	mov	r3, r8
 8009892:	eb1a 0303 	adds.w	r3, sl, r3
 8009896:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800989a:	464b      	mov	r3, r9
 800989c:	eb4b 0303 	adc.w	r3, fp, r3
 80098a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80098b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80098b8:	460b      	mov	r3, r1
 80098ba:	18db      	adds	r3, r3, r3
 80098bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80098be:	4613      	mov	r3, r2
 80098c0:	eb42 0303 	adc.w	r3, r2, r3
 80098c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80098c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80098ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80098ce:	f7f7 f96d 	bl	8000bac <__aeabi_uldivmod>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4611      	mov	r1, r2
 80098d8:	4b3b      	ldr	r3, [pc, #236]	@ (80099c8 <UART_SetConfig+0x2d4>)
 80098da:	fba3 2301 	umull	r2, r3, r3, r1
 80098de:	095b      	lsrs	r3, r3, #5
 80098e0:	2264      	movs	r2, #100	@ 0x64
 80098e2:	fb02 f303 	mul.w	r3, r2, r3
 80098e6:	1acb      	subs	r3, r1, r3
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80098ee:	4b36      	ldr	r3, [pc, #216]	@ (80099c8 <UART_SetConfig+0x2d4>)
 80098f0:	fba3 2302 	umull	r2, r3, r3, r2
 80098f4:	095b      	lsrs	r3, r3, #5
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80098fc:	441c      	add	r4, r3
 80098fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009902:	2200      	movs	r2, #0
 8009904:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009908:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800990c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009910:	4642      	mov	r2, r8
 8009912:	464b      	mov	r3, r9
 8009914:	1891      	adds	r1, r2, r2
 8009916:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009918:	415b      	adcs	r3, r3
 800991a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800991c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009920:	4641      	mov	r1, r8
 8009922:	1851      	adds	r1, r2, r1
 8009924:	6339      	str	r1, [r7, #48]	@ 0x30
 8009926:	4649      	mov	r1, r9
 8009928:	414b      	adcs	r3, r1
 800992a:	637b      	str	r3, [r7, #52]	@ 0x34
 800992c:	f04f 0200 	mov.w	r2, #0
 8009930:	f04f 0300 	mov.w	r3, #0
 8009934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009938:	4659      	mov	r1, fp
 800993a:	00cb      	lsls	r3, r1, #3
 800993c:	4651      	mov	r1, sl
 800993e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009942:	4651      	mov	r1, sl
 8009944:	00ca      	lsls	r2, r1, #3
 8009946:	4610      	mov	r0, r2
 8009948:	4619      	mov	r1, r3
 800994a:	4603      	mov	r3, r0
 800994c:	4642      	mov	r2, r8
 800994e:	189b      	adds	r3, r3, r2
 8009950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009954:	464b      	mov	r3, r9
 8009956:	460a      	mov	r2, r1
 8009958:	eb42 0303 	adc.w	r3, r2, r3
 800995c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800996c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009974:	460b      	mov	r3, r1
 8009976:	18db      	adds	r3, r3, r3
 8009978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800997a:	4613      	mov	r3, r2
 800997c:	eb42 0303 	adc.w	r3, r2, r3
 8009980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800998a:	f7f7 f90f 	bl	8000bac <__aeabi_uldivmod>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4b0d      	ldr	r3, [pc, #52]	@ (80099c8 <UART_SetConfig+0x2d4>)
 8009994:	fba3 1302 	umull	r1, r3, r3, r2
 8009998:	095b      	lsrs	r3, r3, #5
 800999a:	2164      	movs	r1, #100	@ 0x64
 800999c:	fb01 f303 	mul.w	r3, r1, r3
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	3332      	adds	r3, #50	@ 0x32
 80099a6:	4a08      	ldr	r2, [pc, #32]	@ (80099c8 <UART_SetConfig+0x2d4>)
 80099a8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	f003 0207 	and.w	r2, r3, #7
 80099b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4422      	add	r2, r4
 80099ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80099bc:	e106      	b.n	8009bcc <UART_SetConfig+0x4d8>
 80099be:	bf00      	nop
 80099c0:	40011000 	.word	0x40011000
 80099c4:	40011400 	.word	0x40011400
 80099c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80099da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80099de:	4642      	mov	r2, r8
 80099e0:	464b      	mov	r3, r9
 80099e2:	1891      	adds	r1, r2, r2
 80099e4:	6239      	str	r1, [r7, #32]
 80099e6:	415b      	adcs	r3, r3
 80099e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80099ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099ee:	4641      	mov	r1, r8
 80099f0:	1854      	adds	r4, r2, r1
 80099f2:	4649      	mov	r1, r9
 80099f4:	eb43 0501 	adc.w	r5, r3, r1
 80099f8:	f04f 0200 	mov.w	r2, #0
 80099fc:	f04f 0300 	mov.w	r3, #0
 8009a00:	00eb      	lsls	r3, r5, #3
 8009a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a06:	00e2      	lsls	r2, r4, #3
 8009a08:	4614      	mov	r4, r2
 8009a0a:	461d      	mov	r5, r3
 8009a0c:	4643      	mov	r3, r8
 8009a0e:	18e3      	adds	r3, r4, r3
 8009a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a14:	464b      	mov	r3, r9
 8009a16:	eb45 0303 	adc.w	r3, r5, r3
 8009a1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a2e:	f04f 0200 	mov.w	r2, #0
 8009a32:	f04f 0300 	mov.w	r3, #0
 8009a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	008b      	lsls	r3, r1, #2
 8009a3e:	4621      	mov	r1, r4
 8009a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a44:	4621      	mov	r1, r4
 8009a46:	008a      	lsls	r2, r1, #2
 8009a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009a4c:	f7f7 f8ae 	bl	8000bac <__aeabi_uldivmod>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4b60      	ldr	r3, [pc, #384]	@ (8009bd8 <UART_SetConfig+0x4e4>)
 8009a56:	fba3 2302 	umull	r2, r3, r3, r2
 8009a5a:	095b      	lsrs	r3, r3, #5
 8009a5c:	011c      	lsls	r4, r3, #4
 8009a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009a70:	4642      	mov	r2, r8
 8009a72:	464b      	mov	r3, r9
 8009a74:	1891      	adds	r1, r2, r2
 8009a76:	61b9      	str	r1, [r7, #24]
 8009a78:	415b      	adcs	r3, r3
 8009a7a:	61fb      	str	r3, [r7, #28]
 8009a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a80:	4641      	mov	r1, r8
 8009a82:	1851      	adds	r1, r2, r1
 8009a84:	6139      	str	r1, [r7, #16]
 8009a86:	4649      	mov	r1, r9
 8009a88:	414b      	adcs	r3, r1
 8009a8a:	617b      	str	r3, [r7, #20]
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	f04f 0300 	mov.w	r3, #0
 8009a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a98:	4659      	mov	r1, fp
 8009a9a:	00cb      	lsls	r3, r1, #3
 8009a9c:	4651      	mov	r1, sl
 8009a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009aa2:	4651      	mov	r1, sl
 8009aa4:	00ca      	lsls	r2, r1, #3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	4642      	mov	r2, r8
 8009aae:	189b      	adds	r3, r3, r2
 8009ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ab4:	464b      	mov	r3, r9
 8009ab6:	460a      	mov	r2, r1
 8009ab8:	eb42 0303 	adc.w	r3, r2, r3
 8009abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009aca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009ad8:	4649      	mov	r1, r9
 8009ada:	008b      	lsls	r3, r1, #2
 8009adc:	4641      	mov	r1, r8
 8009ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	008a      	lsls	r2, r1, #2
 8009ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009aea:	f7f7 f85f 	bl	8000bac <__aeabi_uldivmod>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4611      	mov	r1, r2
 8009af4:	4b38      	ldr	r3, [pc, #224]	@ (8009bd8 <UART_SetConfig+0x4e4>)
 8009af6:	fba3 2301 	umull	r2, r3, r3, r1
 8009afa:	095b      	lsrs	r3, r3, #5
 8009afc:	2264      	movs	r2, #100	@ 0x64
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
 8009b02:	1acb      	subs	r3, r1, r3
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	3332      	adds	r3, #50	@ 0x32
 8009b08:	4a33      	ldr	r2, [pc, #204]	@ (8009bd8 <UART_SetConfig+0x4e4>)
 8009b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0e:	095b      	lsrs	r3, r3, #5
 8009b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b14:	441c      	add	r4, r3
 8009b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b24:	4642      	mov	r2, r8
 8009b26:	464b      	mov	r3, r9
 8009b28:	1891      	adds	r1, r2, r2
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	415b      	adcs	r3, r3
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b34:	4641      	mov	r1, r8
 8009b36:	1851      	adds	r1, r2, r1
 8009b38:	6039      	str	r1, [r7, #0]
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	414b      	adcs	r3, r1
 8009b3e:	607b      	str	r3, [r7, #4]
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b4c:	4659      	mov	r1, fp
 8009b4e:	00cb      	lsls	r3, r1, #3
 8009b50:	4651      	mov	r1, sl
 8009b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b56:	4651      	mov	r1, sl
 8009b58:	00ca      	lsls	r2, r1, #3
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4603      	mov	r3, r0
 8009b60:	4642      	mov	r2, r8
 8009b62:	189b      	adds	r3, r3, r2
 8009b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b66:	464b      	mov	r3, r9
 8009b68:	460a      	mov	r2, r1
 8009b6a:	eb42 0303 	adc.w	r3, r2, r3
 8009b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009b88:	4649      	mov	r1, r9
 8009b8a:	008b      	lsls	r3, r1, #2
 8009b8c:	4641      	mov	r1, r8
 8009b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b92:	4641      	mov	r1, r8
 8009b94:	008a      	lsls	r2, r1, #2
 8009b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009b9a:	f7f7 f807 	bl	8000bac <__aeabi_uldivmod>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd8 <UART_SetConfig+0x4e4>)
 8009ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ba8:	095b      	lsrs	r3, r3, #5
 8009baa:	2164      	movs	r1, #100	@ 0x64
 8009bac:	fb01 f303 	mul.w	r3, r1, r3
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	3332      	adds	r3, #50	@ 0x32
 8009bb6:	4a08      	ldr	r2, [pc, #32]	@ (8009bd8 <UART_SetConfig+0x4e4>)
 8009bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbc:	095b      	lsrs	r3, r3, #5
 8009bbe:	f003 020f 	and.w	r2, r3, #15
 8009bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4422      	add	r2, r4
 8009bca:	609a      	str	r2, [r3, #8]
}
 8009bcc:	bf00      	nop
 8009bce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bd8:	51eb851f 	.word	0x51eb851f

08009bdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009be0:	4904      	ldr	r1, [pc, #16]	@ (8009bf4 <MX_FATFS_Init+0x18>)
 8009be2:	4805      	ldr	r0, [pc, #20]	@ (8009bf8 <MX_FATFS_Init+0x1c>)
 8009be4:	f005 fd12 	bl	800f60c <FATFS_LinkDriver>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461a      	mov	r2, r3
 8009bec:	4b03      	ldr	r3, [pc, #12]	@ (8009bfc <MX_FATFS_Init+0x20>)
 8009bee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009bf0:	bf00      	nop
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20002f44 	.word	0x20002f44
 8009bf8:	20000660 	.word	0x20000660
 8009bfc:	20002f40 	.word	0x20002f40

08009c00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009c04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7f7 faf7 	bl	8001210 <SD_disk_initialize>
 8009c22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009c36:	79fb      	ldrb	r3, [r7, #7]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7f7 fbd3 	bl	80013e4 <SD_disk_status>
 8009c3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60b9      	str	r1, [r7, #8]
 8009c50:	607a      	str	r2, [r7, #4]
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	4603      	mov	r3, r0
 8009c56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009c58:	7bf8      	ldrb	r0, [r7, #15]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	68b9      	ldr	r1, [r7, #8]
 8009c60:	f7f7 fbd6 	bl	8001410 <SD_disk_read>
 8009c64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b084      	sub	sp, #16
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8009c7e:	7bf8      	ldrb	r0, [r7, #15]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	68b9      	ldr	r1, [r7, #8]
 8009c86:	f7f7 fc2d 	bl	80014e4 <SD_disk_write>
 8009c8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	603a      	str	r2, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8009ca4:	79b9      	ldrb	r1, [r7, #6]
 8009ca6:	79fb      	ldrb	r3, [r7, #7]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7f7 fc9e 	bl	80015ec <SD_disk_ioctl>
 8009cb0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	4a08      	ldr	r2, [pc, #32]	@ (8009cec <disk_status+0x30>)
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	79fa      	ldrb	r2, [r7, #7]
 8009cd4:	4905      	ldr	r1, [pc, #20]	@ (8009cec <disk_status+0x30>)
 8009cd6:	440a      	add	r2, r1
 8009cd8:	7a12      	ldrb	r2, [r2, #8]
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4798      	blx	r3
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20002f70 	.word	0x20002f70

08009cf0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	4a0e      	ldr	r2, [pc, #56]	@ (8009d3c <disk_initialize+0x4c>)
 8009d02:	5cd3      	ldrb	r3, [r2, r3]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d114      	bne.n	8009d32 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009d08:	79fb      	ldrb	r3, [r7, #7]
 8009d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009d3c <disk_initialize+0x4c>)
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	79fa      	ldrb	r2, [r7, #7]
 8009d16:	4909      	ldr	r1, [pc, #36]	@ (8009d3c <disk_initialize+0x4c>)
 8009d18:	440a      	add	r2, r1
 8009d1a:	7a12      	ldrb	r2, [r2, #8]
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	4a03      	ldr	r2, [pc, #12]	@ (8009d3c <disk_initialize+0x4c>)
 8009d2e:	2101      	movs	r1, #1
 8009d30:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20002f70 	.word	0x20002f70

08009d40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009d40:	b590      	push	{r4, r7, lr}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	607a      	str	r2, [r7, #4]
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	4a0a      	ldr	r2, [pc, #40]	@ (8009d7c <disk_read+0x3c>)
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	689c      	ldr	r4, [r3, #8]
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
 8009d5e:	4a07      	ldr	r2, [pc, #28]	@ (8009d7c <disk_read+0x3c>)
 8009d60:	4413      	add	r3, r2
 8009d62:	7a18      	ldrb	r0, [r3, #8]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	47a0      	blx	r4
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd90      	pop	{r4, r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20002f70 	.word	0x20002f70

08009d80 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009d80:	b590      	push	{r4, r7, lr}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60b9      	str	r1, [r7, #8]
 8009d88:	607a      	str	r2, [r7, #4]
 8009d8a:	603b      	str	r3, [r7, #0]
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009d90:	7bfb      	ldrb	r3, [r7, #15]
 8009d92:	4a0a      	ldr	r2, [pc, #40]	@ (8009dbc <disk_write+0x3c>)
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	68dc      	ldr	r4, [r3, #12]
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	4a07      	ldr	r2, [pc, #28]	@ (8009dbc <disk_write+0x3c>)
 8009da0:	4413      	add	r3, r2
 8009da2:	7a18      	ldrb	r0, [r3, #8]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	47a0      	blx	r4
 8009dac:	4603      	mov	r3, r0
 8009dae:	75fb      	strb	r3, [r7, #23]
  return res;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	371c      	adds	r7, #28
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd90      	pop	{r4, r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20002f70 	.word	0x20002f70

08009dc0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	603a      	str	r2, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009dd0:	79fb      	ldrb	r3, [r7, #7]
 8009dd2:	4a09      	ldr	r2, [pc, #36]	@ (8009df8 <disk_ioctl+0x38>)
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	79fa      	ldrb	r2, [r7, #7]
 8009dde:	4906      	ldr	r1, [pc, #24]	@ (8009df8 <disk_ioctl+0x38>)
 8009de0:	440a      	add	r2, r1
 8009de2:	7a10      	ldrb	r0, [r2, #8]
 8009de4:	79b9      	ldrb	r1, [r7, #6]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	4798      	blx	r3
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
  return res;
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20002f70 	.word	0x20002f70

08009dfc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3301      	adds	r3, #1
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009e0c:	89fb      	ldrh	r3, [r7, #14]
 8009e0e:	021b      	lsls	r3, r3, #8
 8009e10:	b21a      	sxth	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	b21b      	sxth	r3, r3
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	b21b      	sxth	r3, r3
 8009e1c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009e1e:	89fb      	ldrh	r3, [r7, #14]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3303      	adds	r3, #3
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	3202      	adds	r2, #2
 8009e44:	7812      	ldrb	r2, [r2, #0]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	3201      	adds	r2, #1
 8009e52:	7812      	ldrb	r2, [r2, #0]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	021b      	lsls	r3, r3, #8
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]
	return rv;
 8009e64:	68fb      	ldr	r3, [r7, #12]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009e72:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009e76:	b09d      	sub	sp, #116	@ 0x74
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8009e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e7e:	3307      	adds	r3, #7
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2200      	movs	r2, #0
 8009e86:	469a      	mov	sl, r3
 8009e88:	4693      	mov	fp, r2
 8009e8a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8009e8e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009e92:	f04f 0000 	mov.w	r0, #0
 8009e96:	f04f 0100 	mov.w	r1, #0
 8009e9a:	0219      	lsls	r1, r3, #8
 8009e9c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009ea0:	0210      	lsls	r0, r2, #8
 8009ea2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ea4:	3306      	adds	r3, #6
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2200      	movs	r2, #0
 8009eac:	461c      	mov	r4, r3
 8009eae:	4615      	mov	r5, r2
 8009eb0:	ea40 0804 	orr.w	r8, r0, r4
 8009eb4:	ea41 0905 	orr.w	r9, r1, r5
 8009eb8:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8009ebc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009ec0:	f04f 0000 	mov.w	r0, #0
 8009ec4:	f04f 0100 	mov.w	r1, #0
 8009ec8:	0219      	lsls	r1, r3, #8
 8009eca:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009ece:	0210      	lsls	r0, r2, #8
 8009ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ed2:	3305      	adds	r3, #5
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2200      	movs	r2, #0
 8009eda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009edc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009ede:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009ee2:	4623      	mov	r3, r4
 8009ee4:	4303      	orrs	r3, r0
 8009ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ee8:	462b      	mov	r3, r5
 8009eea:	430b      	orrs	r3, r1
 8009eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8009ef2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8009ef6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009efa:	f04f 0000 	mov.w	r0, #0
 8009efe:	f04f 0100 	mov.w	r1, #0
 8009f02:	0219      	lsls	r1, r3, #8
 8009f04:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009f08:	0210      	lsls	r0, r2, #8
 8009f0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2200      	movs	r2, #0
 8009f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f16:	657a      	str	r2, [r7, #84]	@ 0x54
 8009f18:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8009f1c:	4623      	mov	r3, r4
 8009f1e:	4303      	orrs	r3, r0
 8009f20:	623b      	str	r3, [r7, #32]
 8009f22:	462b      	mov	r3, r5
 8009f24:	430b      	orrs	r3, r1
 8009f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f28:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009f2c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8009f30:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009f34:	f04f 0000 	mov.w	r0, #0
 8009f38:	f04f 0100 	mov.w	r1, #0
 8009f3c:	0219      	lsls	r1, r3, #8
 8009f3e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009f42:	0210      	lsls	r0, r2, #8
 8009f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f46:	3303      	adds	r3, #3
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f50:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009f52:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8009f56:	4623      	mov	r3, r4
 8009f58:	4303      	orrs	r3, r0
 8009f5a:	61bb      	str	r3, [r7, #24]
 8009f5c:	462b      	mov	r3, r5
 8009f5e:	430b      	orrs	r3, r1
 8009f60:	61fb      	str	r3, [r7, #28]
 8009f62:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009f66:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8009f6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009f6e:	f04f 0000 	mov.w	r0, #0
 8009f72:	f04f 0100 	mov.w	r1, #0
 8009f76:	0219      	lsls	r1, r3, #8
 8009f78:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009f7c:	0210      	lsls	r0, r2, #8
 8009f7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f80:	3302      	adds	r3, #2
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2200      	movs	r2, #0
 8009f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f8c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8009f90:	4623      	mov	r3, r4
 8009f92:	4303      	orrs	r3, r0
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	462b      	mov	r3, r5
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009fa0:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8009fa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fa8:	f04f 0200 	mov.w	r2, #0
 8009fac:	f04f 0300 	mov.w	r3, #0
 8009fb0:	020b      	lsls	r3, r1, #8
 8009fb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009fb6:	0202      	lsls	r2, r0, #8
 8009fb8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009fba:	3101      	adds	r1, #1
 8009fbc:	7809      	ldrb	r1, [r1, #0]
 8009fbe:	b2c9      	uxtb	r1, r1
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009fc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009fc6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4311      	orrs	r1, r2
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4319      	orrs	r1, r3
 8009fd4:	60f9      	str	r1, [r7, #12]
 8009fd6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009fda:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8009fde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009fe2:	f04f 0200 	mov.w	r2, #0
 8009fe6:	f04f 0300 	mov.w	r3, #0
 8009fea:	020b      	lsls	r3, r1, #8
 8009fec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ff0:	0202      	lsls	r2, r0, #8
 8009ff2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009ff4:	7809      	ldrb	r1, [r1, #0]
 8009ff6:	b2c9      	uxtb	r1, r1
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ffc:	6378      	str	r0, [r7, #52]	@ 0x34
 8009ffe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a002:	4621      	mov	r1, r4
 800a004:	4311      	orrs	r1, r2
 800a006:	6039      	str	r1, [r7, #0]
 800a008:	4629      	mov	r1, r5
 800a00a:	4319      	orrs	r1, r3
 800a00c:	6079      	str	r1, [r7, #4]
 800a00e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a012:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 800a016:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800a01a:	4610      	mov	r0, r2
 800a01c:	4619      	mov	r1, r3
 800a01e:	3774      	adds	r7, #116	@ 0x74
 800a020:	46bd      	mov	sp, r7
 800a022:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a026:	4770      	bx	lr

0800a028 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	460b      	mov	r3, r1
 800a032:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	1c5a      	adds	r2, r3, #1
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	887a      	ldrh	r2, [r7, #2]
 800a03c:	b2d2      	uxtb	r2, r2
 800a03e:	701a      	strb	r2, [r3, #0]
 800a040:	887b      	ldrh	r3, [r7, #2]
 800a042:	0a1b      	lsrs	r3, r3, #8
 800a044:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	887a      	ldrh	r2, [r7, #2]
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	701a      	strb	r2, [r3, #0]
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr

0800a05e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a05e:	b480      	push	{r7}
 800a060:	b083      	sub	sp, #12
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	607a      	str	r2, [r7, #4]
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	b2d2      	uxtb	r2, r2
 800a072:	701a      	strb	r2, [r3, #0]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	0a1b      	lsrs	r3, r3, #8
 800a078:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	b2d2      	uxtb	r2, r2
 800a084:	701a      	strb	r2, [r3, #0]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	0a1b      	lsrs	r3, r3, #8
 800a08a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	1c5a      	adds	r2, r3, #1
 800a090:	607a      	str	r2, [r7, #4]
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	b2d2      	uxtb	r2, r2
 800a096:	701a      	strb	r2, [r3, #0]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	0a1b      	lsrs	r3, r3, #8
 800a09c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	1c5a      	adds	r2, r3, #1
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	b2d2      	uxtb	r2, r2
 800a0a8:	701a      	strb	r2, [r3, #0]
}
 800a0aa:	bf00      	nop
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b085      	sub	sp, #20
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	60fa      	str	r2, [r7, #12]
 800a0c8:	783a      	ldrb	r2, [r7, #0]
 800a0ca:	701a      	strb	r2, [r3, #0]
 800a0cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	0a02      	lsrs	r2, r0, #8
 800a0da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a0de:	0a0b      	lsrs	r3, r1, #8
 800a0e0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	60fa      	str	r2, [r7, #12]
 800a0ea:	783a      	ldrb	r2, [r7, #0]
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0f2:	f04f 0200 	mov.w	r2, #0
 800a0f6:	f04f 0300 	mov.w	r3, #0
 800a0fa:	0a02      	lsrs	r2, r0, #8
 800a0fc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a100:	0a0b      	lsrs	r3, r1, #8
 800a102:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	60fa      	str	r2, [r7, #12]
 800a10c:	783a      	ldrb	r2, [r7, #0]
 800a10e:	701a      	strb	r2, [r3, #0]
 800a110:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a114:	f04f 0200 	mov.w	r2, #0
 800a118:	f04f 0300 	mov.w	r3, #0
 800a11c:	0a02      	lsrs	r2, r0, #8
 800a11e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a122:	0a0b      	lsrs	r3, r1, #8
 800a124:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	1c5a      	adds	r2, r3, #1
 800a12c:	60fa      	str	r2, [r7, #12]
 800a12e:	783a      	ldrb	r2, [r7, #0]
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	0a02      	lsrs	r2, r0, #8
 800a140:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a144:	0a0b      	lsrs	r3, r1, #8
 800a146:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	60fa      	str	r2, [r7, #12]
 800a150:	783a      	ldrb	r2, [r7, #0]
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a158:	f04f 0200 	mov.w	r2, #0
 800a15c:	f04f 0300 	mov.w	r3, #0
 800a160:	0a02      	lsrs	r2, r0, #8
 800a162:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a166:	0a0b      	lsrs	r3, r1, #8
 800a168:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	60fa      	str	r2, [r7, #12]
 800a172:	783a      	ldrb	r2, [r7, #0]
 800a174:	701a      	strb	r2, [r3, #0]
 800a176:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	f04f 0300 	mov.w	r3, #0
 800a182:	0a02      	lsrs	r2, r0, #8
 800a184:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a188:	0a0b      	lsrs	r3, r1, #8
 800a18a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	60fa      	str	r2, [r7, #12]
 800a194:	783a      	ldrb	r2, [r7, #0]
 800a196:	701a      	strb	r2, [r3, #0]
 800a198:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a19c:	f04f 0200 	mov.w	r2, #0
 800a1a0:	f04f 0300 	mov.w	r3, #0
 800a1a4:	0a02      	lsrs	r2, r0, #8
 800a1a6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a1aa:	0a0b      	lsrs	r3, r1, #8
 800a1ac:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	60fa      	str	r2, [r7, #12]
 800a1b6:	783a      	ldrb	r2, [r7, #0]
 800a1b8:	701a      	strb	r2, [r3, #0]
}
 800a1ba:	bf00      	nop
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a1c6:	b480      	push	{r7}
 800a1c8:	b087      	sub	sp, #28
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00d      	beq.n	800a1fc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	1c53      	adds	r3, r2, #1
 800a1e4:	613b      	str	r3, [r7, #16]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	1c59      	adds	r1, r3, #1
 800a1ea:	6179      	str	r1, [r7, #20]
 800a1ec:	7812      	ldrb	r2, [r2, #0]
 800a1ee:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	607b      	str	r3, [r7, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1f1      	bne.n	800a1e0 <mem_cpy+0x1a>
	}
}
 800a1fc:	bf00      	nop
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a208:	b480      	push	{r7}
 800a20a:	b087      	sub	sp, #28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	1c5a      	adds	r2, r3, #1
 800a21c:	617a      	str	r2, [r7, #20]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	b2d2      	uxtb	r2, r2
 800a222:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3b01      	subs	r3, #1
 800a228:	607b      	str	r3, [r7, #4]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1f3      	bne.n	800a218 <mem_set+0x10>
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	371c      	adds	r7, #28
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a23e:	b480      	push	{r7}
 800a240:	b089      	sub	sp, #36	@ 0x24
 800a242:	af00      	add	r7, sp, #0
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	60b9      	str	r1, [r7, #8]
 800a248:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	61fb      	str	r3, [r7, #28]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	61fa      	str	r2, [r7, #28]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	4619      	mov	r1, r3
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	61ba      	str	r2, [r7, #24]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	1acb      	subs	r3, r1, r3
 800a26a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3b01      	subs	r3, #1
 800a270:	607b      	str	r3, [r7, #4]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <mem_cmp+0x40>
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0eb      	beq.n	800a256 <mem_cmp+0x18>

	return r;
 800a27e:	697b      	ldr	r3, [r7, #20]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3724      	adds	r7, #36	@ 0x24
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a296:	e002      	b.n	800a29e <chk_chr+0x12>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3301      	adds	r3, #1
 800a29c:	607b      	str	r3, [r7, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d005      	beq.n	800a2b2 <chk_chr+0x26>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d1f2      	bne.n	800a298 <chk_chr+0xc>
	return *str;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d009      	beq.n	800a2e4 <lock_fs+0x22>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f005 fa99 	bl	800f80c <ff_req_grant>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <lock_fs+0x22>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e000      	b.n	800a2e6 <lock_fs+0x24>
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00d      	beq.n	800a31c <unlock_fs+0x2e>
 800a300:	78fb      	ldrb	r3, [r7, #3]
 800a302:	2b0c      	cmp	r3, #12
 800a304:	d00a      	beq.n	800a31c <unlock_fs+0x2e>
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	2b0b      	cmp	r3, #11
 800a30a:	d007      	beq.n	800a31c <unlock_fs+0x2e>
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	2b0f      	cmp	r3, #15
 800a310:	d004      	beq.n	800a31c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	4618      	mov	r0, r3
 800a318:	f005 fa8d 	bl	800f836 <ff_rel_grant>
	}
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a32e:	2300      	movs	r3, #0
 800a330:	60bb      	str	r3, [r7, #8]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	60fb      	str	r3, [r7, #12]
 800a336:	e029      	b.n	800a38c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a338:	4a27      	ldr	r2, [pc, #156]	@ (800a3d8 <chk_lock+0xb4>)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	4413      	add	r3, r2
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01d      	beq.n	800a382 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a346:	4a24      	ldr	r2, [pc, #144]	@ (800a3d8 <chk_lock+0xb4>)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	011b      	lsls	r3, r3, #4
 800a34c:	4413      	add	r3, r2
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d116      	bne.n	800a386 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a358:	4a1f      	ldr	r2, [pc, #124]	@ (800a3d8 <chk_lock+0xb4>)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	011b      	lsls	r3, r3, #4
 800a35e:	4413      	add	r3, r2
 800a360:	3304      	adds	r3, #4
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a368:	429a      	cmp	r2, r3
 800a36a:	d10c      	bne.n	800a386 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a36c:	4a1a      	ldr	r2, [pc, #104]	@ (800a3d8 <chk_lock+0xb4>)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	011b      	lsls	r3, r3, #4
 800a372:	4413      	add	r3, r2
 800a374:	3308      	adds	r3, #8
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d102      	bne.n	800a386 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a380:	e007      	b.n	800a392 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a382:	2301      	movs	r3, #1
 800a384:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3301      	adds	r3, #1
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d9d2      	bls.n	800a338 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d109      	bne.n	800a3ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d102      	bne.n	800a3a4 <chk_lock+0x80>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d101      	bne.n	800a3a8 <chk_lock+0x84>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	e010      	b.n	800a3ca <chk_lock+0xa6>
 800a3a8:	2312      	movs	r3, #18
 800a3aa:	e00e      	b.n	800a3ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d108      	bne.n	800a3c4 <chk_lock+0xa0>
 800a3b2:	4a09      	ldr	r2, [pc, #36]	@ (800a3d8 <chk_lock+0xb4>)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	011b      	lsls	r3, r3, #4
 800a3b8:	4413      	add	r3, r2
 800a3ba:	330c      	adds	r3, #12
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c2:	d101      	bne.n	800a3c8 <chk_lock+0xa4>
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	e000      	b.n	800a3ca <chk_lock+0xa6>
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	20002f50 	.word	0x20002f50

0800a3dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	607b      	str	r3, [r7, #4]
 800a3e6:	e002      	b.n	800a3ee <enq_lock+0x12>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	607b      	str	r3, [r7, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d806      	bhi.n	800a402 <enq_lock+0x26>
 800a3f4:	4a09      	ldr	r2, [pc, #36]	@ (800a41c <enq_lock+0x40>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	011b      	lsls	r3, r3, #4
 800a3fa:	4413      	add	r3, r2
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1f2      	bne.n	800a3e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b02      	cmp	r3, #2
 800a406:	bf14      	ite	ne
 800a408:	2301      	movne	r3, #1
 800a40a:	2300      	moveq	r3, #0
 800a40c:	b2db      	uxtb	r3, r3
}
 800a40e:	4618      	mov	r0, r3
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	20002f50 	.word	0x20002f50

0800a420 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	e01f      	b.n	800a470 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a430:	4a41      	ldr	r2, [pc, #260]	@ (800a538 <inc_lock+0x118>)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	011b      	lsls	r3, r3, #4
 800a436:	4413      	add	r3, r2
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d113      	bne.n	800a46a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a442:	4a3d      	ldr	r2, [pc, #244]	@ (800a538 <inc_lock+0x118>)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	011b      	lsls	r3, r3, #4
 800a448:	4413      	add	r3, r2
 800a44a:	3304      	adds	r3, #4
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a452:	429a      	cmp	r2, r3
 800a454:	d109      	bne.n	800a46a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a456:	4a38      	ldr	r2, [pc, #224]	@ (800a538 <inc_lock+0x118>)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	011b      	lsls	r3, r3, #4
 800a45c:	4413      	add	r3, r2
 800a45e:	3308      	adds	r3, #8
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800a466:	429a      	cmp	r2, r3
 800a468:	d006      	beq.n	800a478 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3301      	adds	r3, #1
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b01      	cmp	r3, #1
 800a474:	d9dc      	bls.n	800a430 <inc_lock+0x10>
 800a476:	e000      	b.n	800a47a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a478:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d132      	bne.n	800a4e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e002      	b.n	800a48c <inc_lock+0x6c>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	3301      	adds	r3, #1
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d806      	bhi.n	800a4a0 <inc_lock+0x80>
 800a492:	4a29      	ldr	r2, [pc, #164]	@ (800a538 <inc_lock+0x118>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	4413      	add	r3, r2
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f2      	bne.n	800a486 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d101      	bne.n	800a4aa <inc_lock+0x8a>
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e040      	b.n	800a52c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4922      	ldr	r1, [pc, #136]	@ (800a538 <inc_lock+0x118>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	440b      	add	r3, r1
 800a4b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	689a      	ldr	r2, [r3, #8]
 800a4bc:	491e      	ldr	r1, [pc, #120]	@ (800a538 <inc_lock+0x118>)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	011b      	lsls	r3, r3, #4
 800a4c2:	440b      	add	r3, r1
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4cc:	491a      	ldr	r1, [pc, #104]	@ (800a538 <inc_lock+0x118>)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	440b      	add	r3, r1
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a4d8:	4a17      	ldr	r2, [pc, #92]	@ (800a538 <inc_lock+0x118>)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	011b      	lsls	r3, r3, #4
 800a4de:	4413      	add	r3, r2
 800a4e0:	330c      	adds	r3, #12
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d009      	beq.n	800a500 <inc_lock+0xe0>
 800a4ec:	4a12      	ldr	r2, [pc, #72]	@ (800a538 <inc_lock+0x118>)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	011b      	lsls	r3, r3, #4
 800a4f2:	4413      	add	r3, r2
 800a4f4:	330c      	adds	r3, #12
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <inc_lock+0xe0>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	e015      	b.n	800a52c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d108      	bne.n	800a518 <inc_lock+0xf8>
 800a506:	4a0c      	ldr	r2, [pc, #48]	@ (800a538 <inc_lock+0x118>)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	011b      	lsls	r3, r3, #4
 800a50c:	4413      	add	r3, r2
 800a50e:	330c      	adds	r3, #12
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	3301      	adds	r3, #1
 800a514:	b29a      	uxth	r2, r3
 800a516:	e001      	b.n	800a51c <inc_lock+0xfc>
 800a518:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a51c:	4906      	ldr	r1, [pc, #24]	@ (800a538 <inc_lock+0x118>)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	011b      	lsls	r3, r3, #4
 800a522:	440b      	add	r3, r1
 800a524:	330c      	adds	r3, #12
 800a526:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3301      	adds	r3, #1
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	20002f50 	.word	0x20002f50

0800a53c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3b01      	subs	r3, #1
 800a548:	607b      	str	r3, [r7, #4]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d825      	bhi.n	800a59c <dec_lock+0x60>
		n = Files[i].ctr;
 800a550:	4a17      	ldr	r2, [pc, #92]	@ (800a5b0 <dec_lock+0x74>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	011b      	lsls	r3, r3, #4
 800a556:	4413      	add	r3, r2
 800a558:	330c      	adds	r3, #12
 800a55a:	881b      	ldrh	r3, [r3, #0]
 800a55c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a55e:	89fb      	ldrh	r3, [r7, #14]
 800a560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a564:	d101      	bne.n	800a56a <dec_lock+0x2e>
 800a566:	2300      	movs	r3, #0
 800a568:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a56a:	89fb      	ldrh	r3, [r7, #14]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <dec_lock+0x3a>
 800a570:	89fb      	ldrh	r3, [r7, #14]
 800a572:	3b01      	subs	r3, #1
 800a574:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a576:	4a0e      	ldr	r2, [pc, #56]	@ (800a5b0 <dec_lock+0x74>)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	011b      	lsls	r3, r3, #4
 800a57c:	4413      	add	r3, r2
 800a57e:	330c      	adds	r3, #12
 800a580:	89fa      	ldrh	r2, [r7, #14]
 800a582:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a584:	89fb      	ldrh	r3, [r7, #14]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d105      	bne.n	800a596 <dec_lock+0x5a>
 800a58a:	4a09      	ldr	r2, [pc, #36]	@ (800a5b0 <dec_lock+0x74>)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	4413      	add	r3, r2
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	737b      	strb	r3, [r7, #13]
 800a59a:	e001      	b.n	800a5a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a59c:	2302      	movs	r3, #2
 800a59e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20002f50 	.word	0x20002f50

0800a5b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a5bc:	2300      	movs	r3, #0
 800a5be:	60fb      	str	r3, [r7, #12]
 800a5c0:	e010      	b.n	800a5e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a5c2:	4a0d      	ldr	r2, [pc, #52]	@ (800a5f8 <clear_lock+0x44>)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	011b      	lsls	r3, r3, #4
 800a5c8:	4413      	add	r3, r2
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d105      	bne.n	800a5de <clear_lock+0x2a>
 800a5d2:	4a09      	ldr	r2, [pc, #36]	@ (800a5f8 <clear_lock+0x44>)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	4413      	add	r3, r2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d9eb      	bls.n	800a5c2 <clear_lock+0xe>
	}
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	20002f50 	.word	0x20002f50

0800a5fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	78db      	ldrb	r3, [r3, #3]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d034      	beq.n	800a67a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a614:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	7858      	ldrb	r0, [r3, #1]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a620:	2301      	movs	r3, #1
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	f7ff fbac 	bl	8009d80 <disk_write>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a62e:	2301      	movs	r3, #1
 800a630:	73fb      	strb	r3, [r7, #15]
 800a632:	e022      	b.n	800a67a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	1ad2      	subs	r2, r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a646:	429a      	cmp	r2, r3
 800a648:	d217      	bcs.n	800a67a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	789b      	ldrb	r3, [r3, #2]
 800a64e:	613b      	str	r3, [r7, #16]
 800a650:	e010      	b.n	800a674 <sync_window+0x78>
					wsect += fs->fsize;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4413      	add	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7858      	ldrb	r0, [r3, #1]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a666:	2301      	movs	r3, #1
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	f7ff fb89 	bl	8009d80 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	3b01      	subs	r3, #1
 800a672:	613b      	str	r3, [r7, #16]
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d8eb      	bhi.n	800a652 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3718      	adds	r7, #24
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a696:	683a      	ldr	r2, [r7, #0]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d01b      	beq.n	800a6d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff ffad 	bl	800a5fc <sync_window>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d113      	bne.n	800a6d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7858      	ldrb	r0, [r3, #1]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	f7ff fb41 	bl	8009d40 <disk_read>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d004      	beq.n	800a6ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
	return res;
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff ff87 	bl	800a5fc <sync_window>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d159      	bne.n	800a7ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d149      	bne.n	800a794 <sync_fs+0xb4>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	791b      	ldrb	r3, [r3, #4]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d145      	bne.n	800a794 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	899b      	ldrh	r3, [r3, #12]
 800a712:	461a      	mov	r2, r3
 800a714:	2100      	movs	r1, #0
 800a716:	f7ff fd77 	bl	800a208 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	3340      	adds	r3, #64	@ 0x40
 800a71e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a722:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a726:	4618      	mov	r0, r3
 800a728:	f7ff fc7e 	bl	800a028 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	3340      	adds	r3, #64	@ 0x40
 800a730:	4921      	ldr	r1, [pc, #132]	@ (800a7b8 <sync_fs+0xd8>)
 800a732:	4618      	mov	r0, r3
 800a734:	f7ff fc93 	bl	800a05e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3340      	adds	r3, #64	@ 0x40
 800a73c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a740:	491e      	ldr	r1, [pc, #120]	@ (800a7bc <sync_fs+0xdc>)
 800a742:	4618      	mov	r0, r3
 800a744:	f7ff fc8b 	bl	800a05e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3340      	adds	r3, #64	@ 0x40
 800a74c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a1b      	ldr	r3, [r3, #32]
 800a754:	4619      	mov	r1, r3
 800a756:	4610      	mov	r0, r2
 800a758:	f7ff fc81 	bl	800a05e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3340      	adds	r3, #64	@ 0x40
 800a760:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	69db      	ldr	r3, [r3, #28]
 800a768:	4619      	mov	r1, r3
 800a76a:	4610      	mov	r0, r2
 800a76c:	f7ff fc77 	bl	800a05e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	63da      	str	r2, [r3, #60]	@ 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	7858      	ldrb	r0, [r3, #1]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a788:	2301      	movs	r3, #1
 800a78a:	f7ff faf9 	bl	8009d80 <disk_write>
			fs->fsi_flag = 0;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	785b      	ldrb	r3, [r3, #1]
 800a798:	2200      	movs	r2, #0
 800a79a:	2100      	movs	r1, #0
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fb0f 	bl	8009dc0 <disk_ioctl>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <sync_fs+0xcc>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	41615252 	.word	0x41615252
 800a7bc:	61417272 	.word	0x61417272

0800a7c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	3b02      	subs	r3, #2
 800a7ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d4:	3b02      	subs	r3, #2
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d301      	bcc.n	800a7e0 <clust2sect+0x20>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e008      	b.n	800a7f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	895b      	ldrh	r3, [r3, #10]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	fb03 f202 	mul.w	r2, r3, r2
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f0:	4413      	add	r3, r2
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
	...

0800a800 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a800:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a804:	b088      	sub	sp, #32
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d904      	bls.n	800a822 <get_fat+0x22>
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d302      	bcc.n	800a828 <get_fat+0x28>
		val = 1;	/* Internal error */
 800a822:	2301      	movs	r3, #1
 800a824:	61fb      	str	r3, [r7, #28]
 800a826:	e139      	b.n	800aa9c <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a828:	f04f 33ff 	mov.w	r3, #4294967295
 800a82c:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	3b01      	subs	r3, #1
 800a834:	2b03      	cmp	r3, #3
 800a836:	f200 8125 	bhi.w	800aa84 <get_fat+0x284>
 800a83a:	a201      	add	r2, pc, #4	@ (adr r2, 800a840 <get_fat+0x40>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a851 	.word	0x0800a851
 800a844:	0800a8fd 	.word	0x0800a8fd
 800a848:	0800a949 	.word	0x0800a949
 800a84c:	0800a999 	.word	0x0800a999
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	085b      	lsrs	r3, r3, #1
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	899b      	ldrh	r3, [r3, #12]
 800a866:	4619      	mov	r1, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a86e:	4413      	add	r3, r2
 800a870:	4619      	mov	r1, r3
 800a872:	69b8      	ldr	r0, [r7, #24]
 800a874:	f7ff ff06 	bl	800a684 <move_window>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f040 8105 	bne.w	800aa8a <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	60fa      	str	r2, [r7, #12]
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	8992      	ldrh	r2, [r2, #12]
 800a88a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a88e:	fb01 f202 	mul.w	r2, r1, r2
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	69ba      	ldr	r2, [r7, #24]
 800a896:	4413      	add	r3, r2
 800a898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a89c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	899b      	ldrh	r3, [r3, #12]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8ae:	4413      	add	r3, r2
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	69b8      	ldr	r0, [r7, #24]
 800a8b4:	f7ff fee6 	bl	800a684 <move_window>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f040 80e7 	bne.w	800aa8e <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	899b      	ldrh	r3, [r3, #12]
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8cc:	fb01 f202 	mul.w	r2, r1, r2
 800a8d0:	1a9b      	subs	r3, r3, r2
 800a8d2:	69ba      	ldr	r2, [r7, #24]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a8da:	021b      	lsls	r3, r3, #8
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <get_fat+0xf2>
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	091b      	lsrs	r3, r3, #4
 800a8f0:	e002      	b.n	800a8f8 <get_fat+0xf8>
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8f8:	61fb      	str	r3, [r7, #28]
			break;
 800a8fa:	e0cf      	b.n	800aa9c <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	899b      	ldrh	r3, [r3, #12]
 800a904:	085b      	lsrs	r3, r3, #1
 800a906:	b29b      	uxth	r3, r3
 800a908:	4619      	mov	r1, r3
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a910:	4413      	add	r3, r2
 800a912:	4619      	mov	r1, r3
 800a914:	69b8      	ldr	r0, [r7, #24]
 800a916:	f7ff feb5 	bl	800a684 <move_window>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f040 80b8 	bne.w	800aa92 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	69ba      	ldr	r2, [r7, #24]
 800a92e:	8992      	ldrh	r2, [r2, #12]
 800a930:	fbb3 f0f2 	udiv	r0, r3, r2
 800a934:	fb00 f202 	mul.w	r2, r0, r2
 800a938:	1a9b      	subs	r3, r3, r2
 800a93a:	440b      	add	r3, r1
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff fa5d 	bl	8009dfc <ld_word>
 800a942:	4603      	mov	r3, r0
 800a944:	61fb      	str	r3, [r7, #28]
			break;
 800a946:	e0a9      	b.n	800aa9c <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	899b      	ldrh	r3, [r3, #12]
 800a950:	089b      	lsrs	r3, r3, #2
 800a952:	b29b      	uxth	r3, r3
 800a954:	4619      	mov	r1, r3
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	fbb3 f3f1 	udiv	r3, r3, r1
 800a95c:	4413      	add	r3, r2
 800a95e:	4619      	mov	r1, r3
 800a960:	69b8      	ldr	r0, [r7, #24]
 800a962:	f7ff fe8f 	bl	800a684 <move_window>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f040 8094 	bne.w	800aa96 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	8992      	ldrh	r2, [r2, #12]
 800a97c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a980:	fb00 f202 	mul.w	r2, r0, r2
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	440b      	add	r3, r1
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fa4f 	bl	8009e2c <ld_dword>
 800a98e:	4603      	mov	r3, r0
 800a990:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a994:	61fb      	str	r3, [r7, #28]
			break;
 800a996:	e081      	b.n	800aa9c <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	d070      	beq.n	800aa84 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a9b2:	1e54      	subs	r4, r2, #1
 800a9b4:	f143 35ff 	adc.w	r5, r3, #4294967295
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	899b      	ldrh	r3, [r3, #12]
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	2200      	movs	r2, #0
 800a9c0:	4698      	mov	r8, r3
 800a9c2:	4691      	mov	r9, r2
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7f6 f8ee 	bl	8000bac <__aeabi_uldivmod>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	895b      	ldrh	r3, [r3, #10]
 800a9d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9dc:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	79db      	ldrb	r3, [r3, #7]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d10e      	bne.n	800aa04 <get_fat+0x204>
					if (cofs <= clen) {
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d80a      	bhi.n	800aa04 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d002      	beq.n	800a9fc <get_fat+0x1fc>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	e001      	b.n	800aa00 <get_fat+0x200>
 800a9fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800aa00:	61fb      	str	r3, [r7, #28]
						break;
 800aa02:	e04b      	b.n	800aa9c <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	79db      	ldrb	r3, [r3, #7]
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d108      	bne.n	800aa1e <get_fat+0x21e>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d203      	bcs.n	800aa1e <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	61fb      	str	r3, [r7, #28]
					break;
 800aa1c:	e03e      	b.n	800aa9c <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	79db      	ldrb	r3, [r3, #7]
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d02e      	beq.n	800aa84 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d003      	beq.n	800aa36 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800aa2e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800aa32:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800aa34:	e032      	b.n	800aa9c <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	899b      	ldrh	r3, [r3, #12]
 800aa3e:	089b      	lsrs	r3, r3, #2
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4619      	mov	r1, r3
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa4a:	4413      	add	r3, r2
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	69b8      	ldr	r0, [r7, #24]
 800aa50:	f7ff fe18 	bl	800a684 <move_window>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d11f      	bne.n	800aa9a <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	8992      	ldrh	r2, [r2, #12]
 800aa68:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa6c:	fb00 f202 	mul.w	r2, r0, r2
 800aa70:	1a9b      	subs	r3, r3, r2
 800aa72:	440b      	add	r3, r1
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7ff f9d9 	bl	8009e2c <ld_dword>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa80:	61fb      	str	r3, [r7, #28]
					break;
 800aa82:	e00b      	b.n	800aa9c <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aa84:	2301      	movs	r3, #1
 800aa86:	61fb      	str	r3, [r7, #28]
 800aa88:	e008      	b.n	800aa9c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa8a:	bf00      	nop
 800aa8c:	e006      	b.n	800aa9c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa8e:	bf00      	nop
 800aa90:	e004      	b.n	800aa9c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aa92:	bf00      	nop
 800aa94:	e002      	b.n	800aa9c <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa96:	bf00      	nop
 800aa98:	e000      	b.n	800aa9c <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa9a:	bf00      	nop
		}
	}

	return val;
 800aa9c:	69fb      	ldr	r3, [r7, #28]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3720      	adds	r7, #32
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800aaa8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aaa8:	b590      	push	{r4, r7, lr}
 800aaaa:	b089      	sub	sp, #36	@ 0x24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aab4:	2302      	movs	r3, #2
 800aab6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	f240 810d 	bls.w	800acda <put_fat+0x232>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	f080 8107 	bcs.w	800acda <put_fat+0x232>
		switch (fs->fs_type) {
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b04      	cmp	r3, #4
 800aad2:	f300 8102 	bgt.w	800acda <put_fat+0x232>
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	f280 80b3 	bge.w	800ac42 <put_fat+0x19a>
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d003      	beq.n	800aae8 <put_fat+0x40>
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	f000 8083 	beq.w	800abec <put_fat+0x144>
 800aae6:	e0f8      	b.n	800acda <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	61bb      	str	r3, [r7, #24]
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	085b      	lsrs	r3, r3, #1
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	899b      	ldrh	r3, [r3, #12]
 800aafe:	4619      	mov	r1, r3
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab06:	4413      	add	r3, r2
 800ab08:	4619      	mov	r1, r3
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7ff fdba 	bl	800a684 <move_window>
 800ab10:	4603      	mov	r3, r0
 800ab12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab14:	7ffb      	ldrb	r3, [r7, #31]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f040 80d8 	bne.w	800accc <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	61ba      	str	r2, [r7, #24]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	8992      	ldrh	r2, [r2, #12]
 800ab2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab30:	fb00 f202 	mul.w	r2, r0, r2
 800ab34:	1a9b      	subs	r3, r3, r2
 800ab36:	440b      	add	r3, r1
 800ab38:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00d      	beq.n	800ab60 <put_fat+0xb8>
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	b25b      	sxtb	r3, r3
 800ab4a:	f003 030f 	and.w	r3, r3, #15
 800ab4e:	b25a      	sxtb	r2, r3
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	011b      	lsls	r3, r3, #4
 800ab56:	b25b      	sxtb	r3, r3
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	b25b      	sxtb	r3, r3
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	e001      	b.n	800ab64 <put_fat+0xbc>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	899b      	ldrh	r3, [r3, #12]
 800ab76:	4619      	mov	r1, r3
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab7e:	4413      	add	r3, r2
 800ab80:	4619      	mov	r1, r3
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fd7e 	bl	800a684 <move_window>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab8c:	7ffb      	ldrb	r3, [r7, #31]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f040 809e 	bne.w	800acd0 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	899b      	ldrh	r3, [r3, #12]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	fbb3 f0f2 	udiv	r0, r3, r2
 800aba6:	fb00 f202 	mul.w	r2, r0, r2
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	440b      	add	r3, r1
 800abae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <put_fat+0x11a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	091b      	lsrs	r3, r3, #4
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	e00e      	b.n	800abe0 <put_fat+0x138>
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	b25b      	sxtb	r3, r3
 800abc8:	f023 030f 	bic.w	r3, r3, #15
 800abcc:	b25a      	sxtb	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	0a1b      	lsrs	r3, r3, #8
 800abd2:	b25b      	sxtb	r3, r3
 800abd4:	f003 030f 	and.w	r3, r3, #15
 800abd8:	b25b      	sxtb	r3, r3
 800abda:	4313      	orrs	r3, r2
 800abdc:	b25b      	sxtb	r3, r3
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2201      	movs	r2, #1
 800abe8:	70da      	strb	r2, [r3, #3]
			break;
 800abea:	e076      	b.n	800acda <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	899b      	ldrh	r3, [r3, #12]
 800abf4:	085b      	lsrs	r3, r3, #1
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	4619      	mov	r1, r3
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac00:	4413      	add	r3, r2
 800ac02:	4619      	mov	r1, r3
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7ff fd3d 	bl	800a684 <move_window>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac0e:	7ffb      	ldrb	r3, [r7, #31]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d15f      	bne.n	800acd4 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	8992      	ldrh	r2, [r2, #12]
 800ac22:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac26:	fb00 f202 	mul.w	r2, r0, r2
 800ac2a:	1a9b      	subs	r3, r3, r2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	b292      	uxth	r2, r2
 800ac32:	4611      	mov	r1, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff f9f7 	bl	800a028 <st_word>
			fs->wflag = 1;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	70da      	strb	r2, [r3, #3]
			break;
 800ac40:	e04b      	b.n	800acda <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	899b      	ldrh	r3, [r3, #12]
 800ac4a:	089b      	lsrs	r3, r3, #2
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	4619      	mov	r1, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac56:	4413      	add	r3, r2
 800ac58:	4619      	mov	r1, r3
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fd12 	bl	800a684 <move_window>
 800ac60:	4603      	mov	r3, r0
 800ac62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac64:	7ffb      	ldrb	r3, [r7, #31]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d136      	bne.n	800acd8 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d017      	beq.n	800aca2 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	8992      	ldrh	r2, [r2, #12]
 800ac86:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac8a:	fb00 f202 	mul.w	r2, r0, r2
 800ac8e:	1a9b      	subs	r3, r3, r2
 800ac90:	440b      	add	r3, r1
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff f8ca 	bl	8009e2c <ld_dword>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ac9e:	4323      	orrs	r3, r4
 800aca0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	8992      	ldrh	r2, [r2, #12]
 800acb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800acb4:	fb00 f202 	mul.w	r2, r0, r2
 800acb8:	1a9b      	subs	r3, r3, r2
 800acba:	440b      	add	r3, r1
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff f9cd 	bl	800a05e <st_dword>
			fs->wflag = 1;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2201      	movs	r2, #1
 800acc8:	70da      	strb	r2, [r3, #3]
			break;
 800acca:	e006      	b.n	800acda <put_fat+0x232>
			if (res != FR_OK) break;
 800accc:	bf00      	nop
 800acce:	e004      	b.n	800acda <put_fat+0x232>
			if (res != FR_OK) break;
 800acd0:	bf00      	nop
 800acd2:	e002      	b.n	800acda <put_fat+0x232>
			if (res != FR_OK) break;
 800acd4:	bf00      	nop
 800acd6:	e000      	b.n	800acda <put_fat+0x232>
			if (res != FR_OK) break;
 800acd8:	bf00      	nop
		}
	}
	return res;
 800acda:	7ffb      	ldrb	r3, [r7, #31]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	3724      	adds	r7, #36	@ 0x24
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}

0800ace4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b08a      	sub	sp, #40	@ 0x28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	3b02      	subs	r3, #2
 800acf4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfa:	3b02      	subs	r3, #2
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d301      	bcc.n	800ad06 <find_bitmap+0x22>
 800ad02:	2300      	movs	r3, #0
 800ad04:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	61fb      	str	r3, [r7, #28]
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	61bb      	str	r3, [r7, #24]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	08db      	lsrs	r3, r3, #3
 800ad1a:	68f9      	ldr	r1, [r7, #12]
 800ad1c:	8989      	ldrh	r1, [r1, #12]
 800ad1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad22:	4413      	add	r3, r2
 800ad24:	4619      	mov	r1, r3
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f7ff fcac 	bl	800a684 <move_window>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d002      	beq.n	800ad38 <find_bitmap+0x54>
 800ad32:	f04f 33ff 	mov.w	r3, #4294967295
 800ad36:	e058      	b.n	800adea <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	08db      	lsrs	r3, r3, #3
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	8992      	ldrh	r2, [r2, #12]
 800ad40:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad44:	fb01 f202 	mul.w	r2, r1, r2
 800ad48:	1a9b      	subs	r3, r3, r2
 800ad4a:	623b      	str	r3, [r7, #32]
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	f003 0307 	and.w	r3, r3, #7
 800ad52:	2201      	movs	r2, #1
 800ad54:	fa02 f303 	lsl.w	r3, r2, r3
 800ad58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	4413      	add	r3, r2
 800ad62:	3340      	adds	r3, #64	@ 0x40
 800ad64:	781a      	ldrb	r2, [r3, #0]
 800ad66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	74fb      	strb	r3, [r7, #19]
 800ad6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	61fb      	str	r3, [r7, #28]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad82:	3b02      	subs	r3, #2
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d307      	bcc.n	800ad9a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	61fb      	str	r3, [r7, #28]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	899b      	ldrh	r3, [r3, #12]
 800ad98:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800ad9a:	7cfb      	ldrb	r3, [r7, #19]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d109      	bne.n	800adb4 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	3301      	adds	r3, #1
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d106      	bne.n	800adbc <find_bitmap+0xd8>
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	3302      	adds	r3, #2
 800adb2:	e01a      	b.n	800adea <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	61bb      	str	r3, [r7, #24]
 800adb8:	2300      	movs	r3, #0
 800adba:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800adbc:	69fa      	ldr	r2, [r7, #28]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d101      	bne.n	800adc8 <find_bitmap+0xe4>
 800adc4:	2300      	movs	r3, #0
 800adc6:	e010      	b.n	800adea <find_bitmap+0x106>
			} while (bm);
 800adc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1c5      	bne.n	800ad5c <find_bitmap+0x78>
			bm = 1;
 800add0:	2301      	movs	r3, #1
 800add2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800add6:	6a3b      	ldr	r3, [r7, #32]
 800add8:	3301      	adds	r3, #1
 800adda:	623b      	str	r3, [r7, #32]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	899b      	ldrh	r3, [r3, #12]
 800ade0:	461a      	mov	r2, r3
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d3b9      	bcc.n	800ad5c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ade8:	e793      	b.n	800ad12 <find_bitmap+0x2e>
	}
}
 800adea:	4618      	mov	r0, r3
 800adec:	3728      	adds	r7, #40	@ 0x28
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b088      	sub	sp, #32
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	60f8      	str	r0, [r7, #12]
 800adfa:	60b9      	str	r1, [r7, #8]
 800adfc:	607a      	str	r2, [r7, #4]
 800adfe:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	3b02      	subs	r3, #2
 800ae04:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	08db      	lsrs	r3, r3, #3
 800ae0e:	68f9      	ldr	r1, [r7, #12]
 800ae10:	8989      	ldrh	r1, [r1, #12]
 800ae12:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae16:	4413      	add	r3, r2
 800ae18:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	08db      	lsrs	r3, r3, #3
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	8992      	ldrh	r2, [r2, #12]
 800ae22:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae26:	fb01 f202 	mul.w	r2, r1, r2
 800ae2a:	1a9b      	subs	r3, r3, r2
 800ae2c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	f003 0307 	and.w	r3, r3, #7
 800ae34:	2201      	movs	r2, #1
 800ae36:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	1c5a      	adds	r2, r3, #1
 800ae40:	617a      	str	r2, [r7, #20]
 800ae42:	4619      	mov	r1, r3
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7ff fc1d 	bl	800a684 <move_window>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <change_bitmap+0x62>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e03f      	b.n	800aed4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	4413      	add	r3, r2
 800ae5a:	3340      	adds	r3, #64	@ 0x40
 800ae5c:	781a      	ldrb	r2, [r3, #0]
 800ae5e:	7ffb      	ldrb	r3, [r7, #31]
 800ae60:	4013      	ands	r3, r2
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	bf14      	ite	ne
 800ae68:	2301      	movne	r3, #1
 800ae6a:	2300      	moveq	r3, #0
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	461a      	mov	r2, r3
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d101      	bne.n	800ae7a <change_bitmap+0x88>
 800ae76:	2302      	movs	r3, #2
 800ae78:	e02c      	b.n	800aed4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	4413      	add	r3, r2
 800ae80:	3340      	adds	r3, #64	@ 0x40
 800ae82:	781a      	ldrb	r2, [r3, #0]
 800ae84:	7ffb      	ldrb	r3, [r7, #31]
 800ae86:	4053      	eors	r3, r2
 800ae88:	b2d9      	uxtb	r1, r3
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	4413      	add	r3, r2
 800ae90:	3340      	adds	r3, #64	@ 0x40
 800ae92:	460a      	mov	r2, r1
 800ae94:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	607b      	str	r3, [r7, #4]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <change_bitmap+0xba>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	e013      	b.n	800aed4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800aeac:	7ffb      	ldrb	r3, [r7, #31]
 800aeae:	005b      	lsls	r3, r3, #1
 800aeb0:	77fb      	strb	r3, [r7, #31]
 800aeb2:	7ffb      	ldrb	r3, [r7, #31]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1cd      	bne.n	800ae54 <change_bitmap+0x62>
			bm = 1;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	3301      	adds	r3, #1
 800aec0:	61bb      	str	r3, [r7, #24]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	899b      	ldrh	r3, [r3, #12]
 800aec6:	461a      	mov	r2, r3
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d3c2      	bcc.n	800ae54 <change_bitmap+0x62>
		i = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800aed2:	e7b3      	b.n	800ae3c <change_bitmap+0x4a>
	}
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3720      	adds	r7, #32
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	79db      	ldrb	r3, [r3, #7]
 800aee8:	2b03      	cmp	r3, #3
 800aeea:	d121      	bne.n	800af30 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	617b      	str	r3, [r7, #20]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	613b      	str	r3, [r7, #16]
 800aef8:	e014      	b.n	800af24 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	3301      	adds	r3, #1
 800af02:	461a      	mov	r2, r3
 800af04:	6979      	ldr	r1, [r7, #20]
 800af06:	f7ff fdcf 	bl	800aaa8 <put_fat>
 800af0a:	4603      	mov	r3, r0
 800af0c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <fill_first_frag+0x3c>
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	e00c      	b.n	800af32 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	3301      	adds	r3, #1
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	3b01      	subs	r3, #1
 800af22:	613b      	str	r3, [r7, #16]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1e7      	bne.n	800aefa <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b086      	sub	sp, #24
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800af46:	e020      	b.n	800af8a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6818      	ldr	r0, [r3, #0]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	69db      	ldr	r3, [r3, #28]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	1c59      	adds	r1, r3, #1
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d905      	bls.n	800af6a <fill_last_frag+0x30>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	3302      	adds	r3, #2
 800af68:	e000      	b.n	800af6c <fill_last_frag+0x32>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	461a      	mov	r2, r3
 800af6e:	f7ff fd9b 	bl	800aaa8 <put_fat>
 800af72:	4603      	mov	r3, r0
 800af74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <fill_last_frag+0x46>
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
 800af7e:	e009      	b.n	800af94 <fill_last_frag+0x5a>
		obj->n_frag--;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	69db      	ldr	r3, [r3, #28]
 800af84:	1e5a      	subs	r2, r3, #1
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1da      	bne.n	800af48 <fill_last_frag+0xe>
	}
	return FR_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08a      	sub	sp, #40	@ 0x28
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d904      	bls.n	800afca <remove_chain+0x2e>
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d301      	bcc.n	800afce <remove_chain+0x32>
 800afca:	2302      	movs	r3, #2
 800afcc:	e096      	b.n	800b0fc <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d014      	beq.n	800affe <remove_chain+0x62>
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	2b04      	cmp	r3, #4
 800afda:	d103      	bne.n	800afe4 <remove_chain+0x48>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	79db      	ldrb	r3, [r3, #7]
 800afe0:	2b02      	cmp	r3, #2
 800afe2:	d00c      	beq.n	800affe <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800afe4:	f04f 32ff 	mov.w	r2, #4294967295
 800afe8:	6879      	ldr	r1, [r7, #4]
 800afea:	69b8      	ldr	r0, [r7, #24]
 800afec:	f7ff fd5c 	bl	800aaa8 <put_fat>
 800aff0:	4603      	mov	r3, r0
 800aff2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aff4:	7ffb      	ldrb	r3, [r7, #31]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <remove_chain+0x62>
 800affa:	7ffb      	ldrb	r3, [r7, #31]
 800affc:	e07e      	b.n	800b0fc <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff fbfd 	bl	800a800 <get_fat>
 800b006:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d055      	beq.n	800b0ba <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d101      	bne.n	800b018 <remove_chain+0x7c>
 800b014:	2302      	movs	r3, #2
 800b016:	e071      	b.n	800b0fc <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01e:	d101      	bne.n	800b024 <remove_chain+0x88>
 800b020:	2301      	movs	r3, #1
 800b022:	e06b      	b.n	800b0fc <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d00b      	beq.n	800b044 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b02c:	2200      	movs	r2, #0
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	69b8      	ldr	r0, [r7, #24]
 800b032:	f7ff fd39 	bl	800aaa8 <put_fat>
 800b036:	4603      	mov	r3, r0
 800b038:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b03a:	7ffb      	ldrb	r3, [r7, #31]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <remove_chain+0xa8>
 800b040:	7ffb      	ldrb	r3, [r7, #31]
 800b042:	e05b      	b.n	800b0fc <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	6a1a      	ldr	r2, [r3, #32]
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04c:	3b02      	subs	r3, #2
 800b04e:	429a      	cmp	r2, r3
 800b050:	d20b      	bcs.n	800b06a <remove_chain+0xce>
			fs->free_clst++;
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	6a1b      	ldr	r3, [r3, #32]
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	791b      	ldrb	r3, [r3, #4]
 800b060:	f043 0301 	orr.w	r3, r3, #1
 800b064:	b2da      	uxtb	r2, r3
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	3301      	adds	r3, #1
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	429a      	cmp	r2, r3
 800b072:	d102      	bne.n	800b07a <remove_chain+0xde>
			ecl = nxt;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	623b      	str	r3, [r7, #32]
 800b078:	e017      	b.n	800b0aa <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d10f      	bne.n	800b0a2 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b082:	6a3a      	ldr	r2, [r7, #32]
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	2300      	movs	r3, #0
 800b08c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b08e:	69b8      	ldr	r0, [r7, #24]
 800b090:	f7ff feaf 	bl	800adf2 <change_bitmap>
 800b094:	4603      	mov	r3, r0
 800b096:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b098:	7ffb      	ldrb	r3, [r7, #31]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <remove_chain+0x106>
 800b09e:	7ffb      	ldrb	r3, [r7, #31]
 800b0a0:	e02c      	b.n	800b0fc <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	623b      	str	r3, [r7, #32]
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b2:	68ba      	ldr	r2, [r7, #8]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d3a2      	bcc.n	800affe <remove_chain+0x62>
 800b0b8:	e000      	b.n	800b0bc <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b0ba:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d11a      	bne.n	800b0fa <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d103      	bne.n	800b0d2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	71da      	strb	r2, [r3, #7]
 800b0d0:	e013      	b.n	800b0fa <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	79db      	ldrb	r3, [r3, #7]
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d10f      	bne.n	800b0fa <remove_chain+0x15e>
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d30a      	bcc.n	800b0fa <remove_chain+0x15e>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	689a      	ldr	r2, [r3, #8]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d802      	bhi.n	800b0fa <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3728      	adds	r7, #40	@ 0x28
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10d      	bne.n	800b136 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <create_chain+0x2c>
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d31b      	bcc.n	800b168 <create_chain+0x64>
 800b130:	2301      	movs	r3, #1
 800b132:	61bb      	str	r3, [r7, #24]
 800b134:	e018      	b.n	800b168 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff fb61 	bl	800a800 <get_fat>
 800b13e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d801      	bhi.n	800b14a <create_chain+0x46>
 800b146:	2301      	movs	r3, #1
 800b148:	e0d9      	b.n	800b2fe <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b150:	d101      	bne.n	800b156 <create_chain+0x52>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	e0d3      	b.n	800b2fe <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d201      	bcs.n	800b164 <create_chain+0x60>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	e0cc      	b.n	800b2fe <create_chain+0x1fa>
		scl = clst;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	2b04      	cmp	r3, #4
 800b16e:	d164      	bne.n	800b23a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800b170:	2201      	movs	r2, #1
 800b172:	69b9      	ldr	r1, [r7, #24]
 800b174:	6938      	ldr	r0, [r7, #16]
 800b176:	f7ff fdb5 	bl	800ace4 <find_bitmap>
 800b17a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <create_chain+0x86>
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b188:	d101      	bne.n	800b18e <create_chain+0x8a>
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	e0b7      	b.n	800b2fe <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800b18e:	2301      	movs	r3, #1
 800b190:	2201      	movs	r2, #1
 800b192:	69f9      	ldr	r1, [r7, #28]
 800b194:	6938      	ldr	r0, [r7, #16]
 800b196:	f7ff fe2c 	bl	800adf2 <change_bitmap>
 800b19a:	4603      	mov	r3, r0
 800b19c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d101      	bne.n	800b1a8 <create_chain+0xa4>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e0aa      	b.n	800b2fe <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d102      	bne.n	800b1b4 <create_chain+0xb0>
 800b1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b2:	e0a4      	b.n	800b2fe <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d103      	bne.n	800b1c2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2202      	movs	r2, #2
 800b1be:	71da      	strb	r2, [r3, #7]
 800b1c0:	e011      	b.n	800b1e6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	79db      	ldrb	r3, [r3, #7]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d10d      	bne.n	800b1e6 <create_chain+0xe2>
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	69fa      	ldr	r2, [r7, #28]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d008      	beq.n	800b1e6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	689b      	ldr	r3, [r3, #8]
 800b1d8:	69ba      	ldr	r2, [r7, #24]
 800b1da:	1ad2      	subs	r2, r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	79db      	ldrb	r3, [r3, #7]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d064      	beq.n	800b2b8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d10b      	bne.n	800b210 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <create_chain+0x104>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	3301      	adds	r3, #1
 800b206:	e000      	b.n	800b20a <create_chain+0x106>
 800b208:	2302      	movs	r3, #2
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	61d3      	str	r3, [r2, #28]
 800b20e:	e053      	b.n	800b2b8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	69db      	ldr	r3, [r3, #28]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d102      	bne.n	800b21e <create_chain+0x11a>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b21e:	69fa      	ldr	r2, [r7, #28]
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7ff fe89 	bl	800af3a <fill_last_frag>
 800b228:	4603      	mov	r3, r0
 800b22a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d142      	bne.n	800b2b8 <create_chain+0x1b4>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	61da      	str	r2, [r3, #28]
 800b238:	e03e      	b.n	800b2b8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	3301      	adds	r3, #1
 800b242:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b248:	69fa      	ldr	r2, [r7, #28]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d307      	bcc.n	800b25e <create_chain+0x15a>
				ncl = 2;
 800b24e:	2302      	movs	r3, #2
 800b250:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	429a      	cmp	r2, r3
 800b258:	d901      	bls.n	800b25e <create_chain+0x15a>
 800b25a:	2300      	movs	r3, #0
 800b25c:	e04f      	b.n	800b2fe <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b25e:	69f9      	ldr	r1, [r7, #28]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff facd 	bl	800a800 <get_fat>
 800b266:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00e      	beq.n	800b28c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d003      	beq.n	800b27c <create_chain+0x178>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27a:	d101      	bne.n	800b280 <create_chain+0x17c>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	e03e      	b.n	800b2fe <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b280:	69fa      	ldr	r2, [r7, #28]
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	429a      	cmp	r2, r3
 800b286:	d1da      	bne.n	800b23e <create_chain+0x13a>
 800b288:	2300      	movs	r3, #0
 800b28a:	e038      	b.n	800b2fe <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b28c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b28e:	f04f 32ff 	mov.w	r2, #4294967295
 800b292:	69f9      	ldr	r1, [r7, #28]
 800b294:	6938      	ldr	r0, [r7, #16]
 800b296:	f7ff fc07 	bl	800aaa8 <put_fat>
 800b29a:	4603      	mov	r3, r0
 800b29c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d109      	bne.n	800b2b8 <create_chain+0x1b4>
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d006      	beq.n	800b2b8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b2aa:	69fa      	ldr	r2, [r7, #28]
 800b2ac:	6839      	ldr	r1, [r7, #0]
 800b2ae:	6938      	ldr	r0, [r7, #16]
 800b2b0:	f7ff fbfa 	bl	800aaa8 <put_fat>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d116      	bne.n	800b2ec <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	69fa      	ldr	r2, [r7, #28]
 800b2c2:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6a1a      	ldr	r2, [r3, #32]
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2cc:	3b02      	subs	r3, #2
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d804      	bhi.n	800b2dc <create_chain+0x1d8>
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	1e5a      	subs	r2, r3, #1
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	791b      	ldrb	r3, [r3, #4]
 800b2e0:	f043 0301 	orr.w	r3, r3, #1
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	711a      	strb	r2, [r3, #4]
 800b2ea:	e007      	b.n	800b2fc <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d102      	bne.n	800b2f8 <create_chain+0x1f4>
 800b2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f6:	e000      	b.n	800b2fa <create_chain+0x1f6>
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b2fc:	69fb      	ldr	r3, [r7, #28]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3720      	adds	r7, #32
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b306:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b30a:	b088      	sub	sp, #32
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b31e:	3304      	adds	r3, #4
 800b320:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	899b      	ldrh	r3, [r3, #12]
 800b326:	b29b      	uxth	r3, r3
 800b328:	2200      	movs	r2, #0
 800b32a:	4698      	mov	r8, r3
 800b32c:	4691      	mov	r9, r2
 800b32e:	4642      	mov	r2, r8
 800b330:	464b      	mov	r3, r9
 800b332:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b336:	f7f5 fc39 	bl	8000bac <__aeabi_uldivmod>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	4610      	mov	r0, r2
 800b340:	4619      	mov	r1, r3
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	895b      	ldrh	r3, [r3, #10]
 800b346:	b29b      	uxth	r3, r3
 800b348:	2200      	movs	r2, #0
 800b34a:	461c      	mov	r4, r3
 800b34c:	4615      	mov	r5, r2
 800b34e:	4622      	mov	r2, r4
 800b350:	462b      	mov	r3, r5
 800b352:	f7f5 fc2b 	bl	8000bac <__aeabi_uldivmod>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4613      	mov	r3, r2
 800b35c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	1d1a      	adds	r2, r3, #4
 800b362:	61ba      	str	r2, [r7, #24]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d101      	bne.n	800b372 <clmt_clust+0x6c>
 800b36e:	2300      	movs	r3, #0
 800b370:	e010      	b.n	800b394 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800b372:	69fa      	ldr	r2, [r7, #28]
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	429a      	cmp	r2, r3
 800b378:	d307      	bcc.n	800b38a <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800b37a:	69fa      	ldr	r2, [r7, #28]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	61fb      	str	r3, [r7, #28]
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	3304      	adds	r3, #4
 800b386:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b388:	e7e9      	b.n	800b35e <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800b38a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	4413      	add	r3, r2
}
 800b394:	4618      	mov	r0, r3
 800b396:	3720      	adds	r7, #32
 800b398:	46bd      	mov	sp, r7
 800b39a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b39e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b086      	sub	sp, #24
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
 800b3a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	2b04      	cmp	r3, #4
 800b3b4:	d102      	bne.n	800b3bc <dir_sdi+0x1e>
 800b3b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ba:	e001      	b.n	800b3c0 <dir_sdi+0x22>
 800b3bc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d904      	bls.n	800b3d0 <dir_sdi+0x32>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	f003 031f 	and.w	r3, r3, #31
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	e074      	b.n	800b4be <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d109      	bne.n	800b3fa <dir_sdi+0x5c>
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d905      	bls.n	800b3fa <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10c      	bne.n	800b41a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	095b      	lsrs	r3, r3, #5
 800b404:	693a      	ldr	r2, [r7, #16]
 800b406:	8912      	ldrh	r2, [r2, #8]
 800b408:	4293      	cmp	r3, r2
 800b40a:	d301      	bcc.n	800b410 <dir_sdi+0x72>
 800b40c:	2302      	movs	r3, #2
 800b40e:	e056      	b.n	800b4be <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	639a      	str	r2, [r3, #56]	@ 0x38
 800b418:	e02d      	b.n	800b476 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	895b      	ldrh	r3, [r3, #10]
 800b41e:	461a      	mov	r2, r3
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	899b      	ldrh	r3, [r3, #12]
 800b424:	fb02 f303 	mul.w	r3, r2, r3
 800b428:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b42a:	e019      	b.n	800b460 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6979      	ldr	r1, [r7, #20]
 800b430:	4618      	mov	r0, r3
 800b432:	f7ff f9e5 	bl	800a800 <get_fat>
 800b436:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43e:	d101      	bne.n	800b444 <dir_sdi+0xa6>
 800b440:	2301      	movs	r3, #1
 800b442:	e03c      	b.n	800b4be <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b01      	cmp	r3, #1
 800b448:	d904      	bls.n	800b454 <dir_sdi+0xb6>
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	429a      	cmp	r2, r3
 800b452:	d301      	bcc.n	800b458 <dir_sdi+0xba>
 800b454:	2302      	movs	r3, #2
 800b456:	e032      	b.n	800b4be <dir_sdi+0x120>
			ofs -= csz;
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	429a      	cmp	r2, r3
 800b466:	d2e1      	bcs.n	800b42c <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800b468:	6979      	ldr	r1, [r7, #20]
 800b46a:	6938      	ldr	r0, [r7, #16]
 800b46c:	f7ff f9a8 	bl	800a7c0 <clust2sect>
 800b470:	4602      	mov	r2, r0
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	697a      	ldr	r2, [r7, #20]
 800b47a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b480:	2b00      	cmp	r3, #0
 800b482:	d101      	bne.n	800b488 <dir_sdi+0xea>
 800b484:	2302      	movs	r3, #2
 800b486:	e01a      	b.n	800b4be <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	899b      	ldrh	r3, [r3, #12]
 800b490:	4619      	mov	r1, r3
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	fbb3 f3f1 	udiv	r3, r3, r1
 800b498:	441a      	add	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	899b      	ldrh	r3, [r3, #12]
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4b0:	fb00 f202 	mul.w	r2, r0, r2
 800b4b4:	1a9b      	subs	r3, r3, r2
 800b4b6:	18ca      	adds	r2, r1, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b086      	sub	sp, #24
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4da:	3320      	adds	r3, #32
 800b4dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00b      	beq.n	800b4fe <dir_next+0x38>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b04      	cmp	r3, #4
 800b4ec:	d102      	bne.n	800b4f4 <dir_next+0x2e>
 800b4ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4f2:	e001      	b.n	800b4f8 <dir_next+0x32>
 800b4f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d801      	bhi.n	800b502 <dir_next+0x3c>
 800b4fe:	2304      	movs	r3, #4
 800b500:	e0c3      	b.n	800b68a <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	899b      	ldrh	r3, [r3, #12]
 800b506:	461a      	mov	r2, r3
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b50e:	fb01 f202 	mul.w	r2, r1, r2
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	2b00      	cmp	r3, #0
 800b516:	f040 80a5 	bne.w	800b664 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10b      	bne.n	800b544 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	095b      	lsrs	r3, r3, #5
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	8912      	ldrh	r2, [r2, #8]
 800b534:	4293      	cmp	r3, r2
 800b536:	f0c0 8095 	bcc.w	800b664 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	639a      	str	r2, [r3, #56]	@ 0x38
 800b540:	2304      	movs	r3, #4
 800b542:	e0a2      	b.n	800b68a <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	899b      	ldrh	r3, [r3, #12]
 800b548:	461a      	mov	r2, r3
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	8952      	ldrh	r2, [r2, #10]
 800b554:	3a01      	subs	r2, #1
 800b556:	4013      	ands	r3, r2
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f040 8083 	bne.w	800b664 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b564:	4619      	mov	r1, r3
 800b566:	4610      	mov	r0, r2
 800b568:	f7ff f94a 	bl	800a800 <get_fat>
 800b56c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d801      	bhi.n	800b578 <dir_next+0xb2>
 800b574:	2302      	movs	r3, #2
 800b576:	e088      	b.n	800b68a <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57e:	d101      	bne.n	800b584 <dir_next+0xbe>
 800b580:	2301      	movs	r3, #1
 800b582:	e082      	b.n	800b68a <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d360      	bcc.n	800b650 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d104      	bne.n	800b59e <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	639a      	str	r2, [r3, #56]	@ 0x38
 800b59a:	2304      	movs	r3, #4
 800b59c:	e075      	b.n	800b68a <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	4610      	mov	r0, r2
 800b5a8:	f7ff fdac 	bl	800b104 <create_chain>
 800b5ac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <dir_next+0xf2>
 800b5b4:	2307      	movs	r3, #7
 800b5b6:	e068      	b.n	800b68a <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d101      	bne.n	800b5c2 <dir_next+0xfc>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	e063      	b.n	800b68a <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c8:	d101      	bne.n	800b5ce <dir_next+0x108>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e05d      	b.n	800b68a <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	79db      	ldrb	r3, [r3, #7]
 800b5d2:	f043 0304 	orr.w	r3, r3, #4
 800b5d6:	b2da      	uxtb	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f7ff f80d 	bl	800a5fc <sync_window>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d001      	beq.n	800b5ec <dir_next+0x126>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e04e      	b.n	800b68a <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	899b      	ldrh	r3, [r3, #12]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	f7fe fe05 	bl	800a208 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b5fe:	2300      	movs	r3, #0
 800b600:	613b      	str	r3, [r7, #16]
 800b602:	6979      	ldr	r1, [r7, #20]
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f7ff f8db 	bl	800a7c0 <clust2sect>
 800b60a:	4602      	mov	r2, r0
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b610:	e012      	b.n	800b638 <dir_next+0x172>
						fs->wflag = 1;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2201      	movs	r2, #1
 800b616:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f7fe ffef 	bl	800a5fc <sync_window>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d001      	beq.n	800b628 <dir_next+0x162>
 800b624:	2301      	movs	r3, #1
 800b626:	e030      	b.n	800b68a <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	3301      	adds	r3, #1
 800b62c:	613b      	str	r3, [r7, #16]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b632:	1c5a      	adds	r2, r3, #1
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	895b      	ldrh	r3, [r3, #10]
 800b63c:	461a      	mov	r2, r3
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	4293      	cmp	r3, r2
 800b642:	d3e6      	bcc.n	800b612 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	1ad2      	subs	r2, r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800b656:	6979      	ldr	r1, [r7, #20]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f7ff f8b1 	bl	800a7c0 <clust2sect>
 800b65e:	4602      	mov	r2, r0
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68ba      	ldr	r2, [r7, #8]
 800b668:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	899b      	ldrh	r3, [r3, #12]
 800b674:	461a      	mov	r2, r3
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	fbb3 f0f2 	udiv	r0, r3, r2
 800b67c:	fb00 f202 	mul.w	r2, r0, r2
 800b680:	1a9b      	subs	r3, r3, r2
 800b682:	18ca      	adds	r2, r1, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b086      	sub	sp, #24
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f7ff fe7a 	bl	800b39e <dir_sdi>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b6ae:	7dfb      	ldrb	r3, [r7, #23]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d140      	bne.n	800b736 <dir_alloc+0xa4>
		n = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6bc:	4619      	mov	r1, r3
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f7fe ffe0 	bl	800a684 <move_window>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6c8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d132      	bne.n	800b734 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	d108      	bne.n	800b6e8 <dir_alloc+0x56>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	b25b      	sxtb	r3, r3
 800b6de:	43db      	mvns	r3, r3
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	09db      	lsrs	r3, r3, #7
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	e00f      	b.n	800b708 <dir_alloc+0x76>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2be5      	cmp	r3, #229	@ 0xe5
 800b6f0:	d004      	beq.n	800b6fc <dir_alloc+0x6a>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <dir_alloc+0x6e>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e000      	b.n	800b702 <dir_alloc+0x70>
 800b700:	2300      	movs	r3, #0
 800b702:	f003 0301 	and.w	r3, r3, #1
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d007      	beq.n	800b71c <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	3301      	adds	r3, #1
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	429a      	cmp	r2, r3
 800b718:	d102      	bne.n	800b720 <dir_alloc+0x8e>
 800b71a:	e00c      	b.n	800b736 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b71c:	2300      	movs	r3, #0
 800b71e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b720:	2101      	movs	r1, #1
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff fecf 	bl	800b4c6 <dir_next>
 800b728:	4603      	mov	r3, r0
 800b72a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d0c2      	beq.n	800b6b8 <dir_alloc+0x26>
 800b732:	e000      	b.n	800b736 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b734:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	2b04      	cmp	r3, #4
 800b73a:	d101      	bne.n	800b740 <dir_alloc+0xae>
 800b73c:	2307      	movs	r3, #7
 800b73e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b740:	7dfb      	ldrb	r3, [r7, #23]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b084      	sub	sp, #16
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	331a      	adds	r3, #26
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe fb4f 	bl	8009dfc <ld_word>
 800b75e:	4603      	mov	r3, r0
 800b760:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b03      	cmp	r3, #3
 800b768:	d109      	bne.n	800b77e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	3314      	adds	r3, #20
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fb44 	bl	8009dfc <ld_word>
 800b774:	4603      	mov	r3, r0
 800b776:	041b      	lsls	r3, r3, #16
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b77e:	68fb      	ldr	r3, [r7, #12]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	331a      	adds	r3, #26
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	b292      	uxth	r2, r2
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fc42 	bl	800a028 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d109      	bne.n	800b7c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f103 0214 	add.w	r2, r3, #20
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	f7fe fc34 	bl	800a028 <st_word>
	}
}
 800b7c0:	bf00      	nop
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b7c8:	b590      	push	{r4, r7, lr}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	331a      	adds	r3, #26
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fb10 	bl	8009dfc <ld_word>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <cmp_lfn+0x1e>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e059      	b.n	800b89a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7ee:	1e5a      	subs	r2, r3, #1
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	005b      	lsls	r3, r3, #1
 800b7f4:	4413      	add	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	81fb      	strh	r3, [r7, #14]
 800b800:	2300      	movs	r3, #0
 800b802:	613b      	str	r3, [r7, #16]
 800b804:	e033      	b.n	800b86e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b806:	4a27      	ldr	r2, [pc, #156]	@ (800b8a4 <cmp_lfn+0xdc>)
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	4413      	add	r3, r2
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	4413      	add	r3, r2
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe faf1 	bl	8009dfc <ld_word>
 800b81a:	4603      	mov	r3, r0
 800b81c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b81e:	89fb      	ldrh	r3, [r7, #14]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01a      	beq.n	800b85a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2bfe      	cmp	r3, #254	@ 0xfe
 800b828:	d812      	bhi.n	800b850 <cmp_lfn+0x88>
 800b82a:	89bb      	ldrh	r3, [r7, #12]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f003 ff39 	bl	800f6a4 <ff_wtoupper>
 800b832:	4603      	mov	r3, r0
 800b834:	461c      	mov	r4, r3
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	1c5a      	adds	r2, r3, #1
 800b83a:	617a      	str	r2, [r7, #20]
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	4413      	add	r3, r2
 800b842:	881b      	ldrh	r3, [r3, #0]
 800b844:	4618      	mov	r0, r3
 800b846:	f003 ff2d 	bl	800f6a4 <ff_wtoupper>
 800b84a:	4603      	mov	r3, r0
 800b84c:	429c      	cmp	r4, r3
 800b84e:	d001      	beq.n	800b854 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b850:	2300      	movs	r3, #0
 800b852:	e022      	b.n	800b89a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b854:	89bb      	ldrh	r3, [r7, #12]
 800b856:	81fb      	strh	r3, [r7, #14]
 800b858:	e006      	b.n	800b868 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b85a:	89bb      	ldrh	r3, [r7, #12]
 800b85c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b860:	4293      	cmp	r3, r2
 800b862:	d001      	beq.n	800b868 <cmp_lfn+0xa0>
 800b864:	2300      	movs	r3, #0
 800b866:	e018      	b.n	800b89a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	3301      	adds	r3, #1
 800b86c:	613b      	str	r3, [r7, #16]
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	2b0c      	cmp	r3, #12
 800b872:	d9c8      	bls.n	800b806 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <cmp_lfn+0xd0>
 800b880:	89fb      	ldrh	r3, [r7, #14]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d008      	beq.n	800b898 <cmp_lfn+0xd0>
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	4413      	add	r3, r2
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <cmp_lfn+0xd0>
 800b894:	2300      	movs	r3, #0
 800b896:	e000      	b.n	800b89a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b898:	2301      	movs	r3, #1
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	371c      	adds	r7, #28
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd90      	pop	{r4, r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	08018c24 	.word	0x08018c24

0800b8a8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b086      	sub	sp, #24
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	331a      	adds	r3, #26
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe faa0 	bl	8009dfc <ld_word>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d001      	beq.n	800b8c6 <pick_lfn+0x1e>
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e04d      	b.n	800b962 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8ce:	1e5a      	subs	r2, r3, #1
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	005b      	lsls	r3, r3, #1
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8dc:	2301      	movs	r3, #1
 800b8de:	81fb      	strh	r3, [r7, #14]
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	613b      	str	r3, [r7, #16]
 800b8e4:	e028      	b.n	800b938 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b8e6:	4a21      	ldr	r2, [pc, #132]	@ (800b96c <pick_lfn+0xc4>)
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fe fa81 	bl	8009dfc <ld_word>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b8fe:	89fb      	ldrh	r3, [r7, #14]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00f      	beq.n	800b924 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	2bfe      	cmp	r3, #254	@ 0xfe
 800b908:	d901      	bls.n	800b90e <pick_lfn+0x66>
 800b90a:	2300      	movs	r3, #0
 800b90c:	e029      	b.n	800b962 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b90e:	89bb      	ldrh	r3, [r7, #12]
 800b910:	81fb      	strh	r3, [r7, #14]
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	617a      	str	r2, [r7, #20]
 800b918:	005b      	lsls	r3, r3, #1
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	4413      	add	r3, r2
 800b91e:	89fa      	ldrh	r2, [r7, #14]
 800b920:	801a      	strh	r2, [r3, #0]
 800b922:	e006      	b.n	800b932 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b924:	89bb      	ldrh	r3, [r7, #12]
 800b926:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d001      	beq.n	800b932 <pick_lfn+0x8a>
 800b92e:	2300      	movs	r3, #0
 800b930:	e017      	b.n	800b962 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	3301      	adds	r3, #1
 800b936:	613b      	str	r3, [r7, #16]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	2b0c      	cmp	r3, #12
 800b93c:	d9d3      	bls.n	800b8e6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00a      	beq.n	800b960 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b94e:	d901      	bls.n	800b954 <pick_lfn+0xac>
 800b950:	2300      	movs	r3, #0
 800b952:	e006      	b.n	800b962 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	4413      	add	r3, r2
 800b95c:	2200      	movs	r2, #0
 800b95e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b960:	2301      	movs	r3, #1
}
 800b962:	4618      	mov	r0, r3
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	08018c24 	.word	0x08018c24

0800b970 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b088      	sub	sp, #32
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	4611      	mov	r1, r2
 800b97c:	461a      	mov	r2, r3
 800b97e:	460b      	mov	r3, r1
 800b980:	71fb      	strb	r3, [r7, #7]
 800b982:	4613      	mov	r3, r2
 800b984:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	330d      	adds	r3, #13
 800b98a:	79ba      	ldrb	r2, [r7, #6]
 800b98c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	330b      	adds	r3, #11
 800b992:	220f      	movs	r2, #15
 800b994:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	330c      	adds	r3, #12
 800b99a:	2200      	movs	r2, #0
 800b99c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	331a      	adds	r3, #26
 800b9a2:	2100      	movs	r1, #0
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fe fb3f 	bl	800a028 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	1e5a      	subs	r2, r3, #1
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	4413      	add	r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	82fb      	strh	r3, [r7, #22]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b9c2:	8afb      	ldrh	r3, [r7, #22]
 800b9c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d007      	beq.n	800b9dc <put_lfn+0x6c>
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	61fa      	str	r2, [r7, #28]
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	68fa      	ldr	r2, [r7, #12]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	881b      	ldrh	r3, [r3, #0]
 800b9da:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b9dc:	4a17      	ldr	r2, [pc, #92]	@ (800ba3c <put_lfn+0xcc>)
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	8afa      	ldrh	r2, [r7, #22]
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe fb1a 	bl	800a028 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b9f4:	8afb      	ldrh	r3, [r7, #22]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d102      	bne.n	800ba00 <put_lfn+0x90>
 800b9fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b9fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	3301      	adds	r3, #1
 800ba04:	61bb      	str	r3, [r7, #24]
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	2b0c      	cmp	r3, #12
 800ba0a:	d9da      	bls.n	800b9c2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ba0c:	8afb      	ldrh	r3, [r7, #22]
 800ba0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d006      	beq.n	800ba24 <put_lfn+0xb4>
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	881b      	ldrh	r3, [r3, #0]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d103      	bne.n	800ba2c <put_lfn+0xbc>
 800ba24:	79fb      	ldrb	r3, [r7, #7]
 800ba26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba2a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	79fa      	ldrb	r2, [r7, #7]
 800ba30:	701a      	strb	r2, [r3, #0]
}
 800ba32:	bf00      	nop
 800ba34:	3720      	adds	r7, #32
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	08018c24 	.word	0x08018c24

0800ba40 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b08c      	sub	sp, #48	@ 0x30
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	60f8      	str	r0, [r7, #12]
 800ba48:	60b9      	str	r1, [r7, #8]
 800ba4a:	607a      	str	r2, [r7, #4]
 800ba4c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ba4e:	220b      	movs	r2, #11
 800ba50:	68b9      	ldr	r1, [r7, #8]
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7fe fbb7 	bl	800a1c6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d92b      	bls.n	800bab6 <gen_numname+0x76>
		sr = seq;
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ba62:	e022      	b.n	800baaa <gen_numname+0x6a>
			wc = *lfn++;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	1c9a      	adds	r2, r3, #2
 800ba68:	607a      	str	r2, [r7, #4]
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ba6e:	2300      	movs	r3, #0
 800ba70:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba72:	e017      	b.n	800baa4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	005a      	lsls	r2, r3, #1
 800ba78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	4413      	add	r3, r2
 800ba80:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ba82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba84:	085b      	lsrs	r3, r3, #1
 800ba86:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d005      	beq.n	800ba9e <gen_numname+0x5e>
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ba98:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ba9c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa0:	3301      	adds	r3, #1
 800baa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800baa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa6:	2b0f      	cmp	r3, #15
 800baa8:	d9e4      	bls.n	800ba74 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	881b      	ldrh	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1d8      	bne.n	800ba64 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bab6:	2307      	movs	r3, #7
 800bab8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 030f 	and.w	r3, r3, #15
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	3330      	adds	r3, #48	@ 0x30
 800bac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800baca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bace:	2b39      	cmp	r3, #57	@ 0x39
 800bad0:	d904      	bls.n	800badc <gen_numname+0x9c>
 800bad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bad6:	3307      	adds	r3, #7
 800bad8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800badc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bade:	1e5a      	subs	r2, r3, #1
 800bae0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bae2:	3330      	adds	r3, #48	@ 0x30
 800bae4:	443b      	add	r3, r7
 800bae6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800baea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	091b      	lsrs	r3, r3, #4
 800baf2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1df      	bne.n	800baba <gen_numname+0x7a>
	ns[i] = '~';
 800bafa:	f107 0214 	add.w	r2, r7, #20
 800bafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb00:	4413      	add	r3, r2
 800bb02:	227e      	movs	r2, #126	@ 0x7e
 800bb04:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bb06:	2300      	movs	r3, #0
 800bb08:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb0a:	e002      	b.n	800bb12 <gen_numname+0xd2>
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0e:	3301      	adds	r3, #1
 800bb10:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d205      	bcs.n	800bb26 <gen_numname+0xe6>
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1e:	4413      	add	r3, r2
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	2b20      	cmp	r3, #32
 800bb24:	d1f2      	bne.n	800bb0c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb28:	2b07      	cmp	r3, #7
 800bb2a:	d807      	bhi.n	800bb3c <gen_numname+0xfc>
 800bb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2e:	1c5a      	adds	r2, r3, #1
 800bb30:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bb32:	3330      	adds	r3, #48	@ 0x30
 800bb34:	443b      	add	r3, r7
 800bb36:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800bb3a:	e000      	b.n	800bb3e <gen_numname+0xfe>
 800bb3c:	2120      	movs	r1, #32
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	1c5a      	adds	r2, r3, #1
 800bb42:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	460a      	mov	r2, r1
 800bb4a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4e:	2b07      	cmp	r3, #7
 800bb50:	d9e9      	bls.n	800bb26 <gen_numname+0xe6>
}
 800bb52:	bf00      	nop
 800bb54:	bf00      	nop
 800bb56:	3730      	adds	r7, #48	@ 0x30
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bb68:	230b      	movs	r3, #11
 800bb6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bb6c:	7bfb      	ldrb	r3, [r7, #15]
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	0852      	lsrs	r2, r2, #1
 800bb72:	01db      	lsls	r3, r3, #7
 800bb74:	4313      	orrs	r3, r2
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	1c59      	adds	r1, r3, #1
 800bb7c:	6079      	str	r1, [r7, #4]
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	4413      	add	r3, r2
 800bb82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	60bb      	str	r3, [r7, #8]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1ed      	bne.n	800bb6c <sum_sfn+0x10>
	return sum;
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800bb9e:	b480      	push	{r7}
 800bba0:	b087      	sub	sp, #28
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	3301      	adds	r3, #1
 800bbae:	015b      	lsls	r3, r3, #5
 800bbb0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	827b      	strh	r3, [r7, #18]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	617b      	str	r3, [r7, #20]
 800bbba:	e017      	b.n	800bbec <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d103      	bne.n	800bbca <xdir_sum+0x2c>
			i++;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	e00d      	b.n	800bbe6 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800bbca:	8a7b      	ldrh	r3, [r7, #18]
 800bbcc:	03db      	lsls	r3, r3, #15
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	8a7b      	ldrh	r3, [r7, #18]
 800bbd2:	085b      	lsrs	r3, r3, #1
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4413      	add	r3, r2
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	6879      	ldr	r1, [r7, #4]
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	440a      	add	r2, r1
 800bbe0:	7812      	ldrb	r2, [r2, #0]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	617b      	str	r3, [r7, #20]
 800bbec:	697a      	ldr	r2, [r7, #20]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d3e3      	bcc.n	800bbbc <xdir_sum+0x1e>
		}
	}
	return sum;
 800bbf4:	8a7b      	ldrh	r3, [r7, #18]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	371c      	adds	r7, #28
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800bc0e:	e01f      	b.n	800bc50 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800bc10:	89bb      	ldrh	r3, [r7, #12]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f003 fd46 	bl	800f6a4 <ff_wtoupper>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800bc1c:	89fb      	ldrh	r3, [r7, #14]
 800bc1e:	03db      	lsls	r3, r3, #15
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	89fb      	ldrh	r3, [r7, #14]
 800bc24:	085b      	lsrs	r3, r3, #1
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	4413      	add	r3, r2
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	89bb      	ldrh	r3, [r7, #12]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	4413      	add	r3, r2
 800bc34:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800bc36:	89fb      	ldrh	r3, [r7, #14]
 800bc38:	03db      	lsls	r3, r3, #15
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	89fb      	ldrh	r3, [r7, #14]
 800bc3e:	085b      	lsrs	r3, r3, #1
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	4413      	add	r3, r2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	89bb      	ldrh	r3, [r7, #12]
 800bc48:	0a1b      	lsrs	r3, r3, #8
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	4413      	add	r3, r2
 800bc4e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	1c9a      	adds	r2, r3, #2
 800bc54:	607a      	str	r2, [r7, #4]
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	81bb      	strh	r3, [r7, #12]
 800bc5a:	89bb      	ldrh	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1d7      	bne.n	800bc10 <xname_sum+0xe>
	}
	return sum;
 800bc60:	89fb      	ldrh	r3, [r7, #14]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b086      	sub	sp, #24
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bc78:	2340      	movs	r3, #64	@ 0x40
 800bc7a:	613b      	str	r3, [r7, #16]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	e02c      	b.n	800bcdc <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	f003 031f 	and.w	r3, r3, #31
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <get_xdir_info+0x28>
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3302      	adds	r3, #2
 800bc90:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	4413      	add	r3, r2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7fe f8af 	bl	8009dfc <ld_word>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2100      	movs	r1, #0
 800bca2:	4618      	mov	r0, r3
 800bca4:	f003 fcc2 	bl	800f62c <ff_convert>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800bcac:	897b      	ldrh	r3, [r7, #10]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d002      	beq.n	800bcb8 <get_xdir_info+0x4e>
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2bfe      	cmp	r3, #254	@ 0xfe
 800bcb6:	d902      	bls.n	800bcbe <get_xdir_info+0x54>
 800bcb8:	2300      	movs	r3, #0
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	e015      	b.n	800bcea <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	617a      	str	r2, [r7, #20]
 800bcc4:	897a      	ldrh	r2, [r7, #10]
 800bcc6:	b2d1      	uxtb	r1, r2
 800bcc8:	683a      	ldr	r2, [r7, #0]
 800bcca:	4413      	add	r3, r2
 800bccc:	460a      	mov	r2, r1
 800bcce:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	3302      	adds	r3, #2
 800bcd4:	613b      	str	r3, [r7, #16]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3323      	adds	r3, #35	@ 0x23
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	461a      	mov	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d3cb      	bcc.n	800bc82 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d106      	bne.n	800bcfe <get_xdir_info+0x94>
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	1c5a      	adds	r2, r3, #1
 800bcf4:	617a      	str	r2, [r7, #20]
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	223f      	movs	r2, #63	@ 0x3f
 800bcfc:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	4413      	add	r3, r2
 800bd04:	331a      	adds	r3, #26
 800bd06:	2200      	movs	r2, #0
 800bd08:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	791a      	ldrb	r2, [r3, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	7b1b      	ldrb	r3, [r3, #12]
 800bd1c:	f003 0310 	and.w	r3, r3, #16
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d107      	bne.n	800bd34 <get_xdir_info+0xca>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3338      	adds	r3, #56	@ 0x38
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fe f8a2 	bl	8009e72 <ld_qword>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	e003      	b.n	800bd3c <get_xdir_info+0xd2>
 800bd34:	f04f 0200 	mov.w	r2, #0
 800bd38:	f04f 0300 	mov.w	r3, #0
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	330c      	adds	r3, #12
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe f858 	bl	8009dfc <ld_word>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	461a      	mov	r2, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	330e      	adds	r3, #14
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe f84f 	bl	8009dfc <ld_word>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	461a      	mov	r2, r3
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	811a      	strh	r2, [r3, #8]
}
 800bd66:	bf00      	nop
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800bd70:	b590      	push	{r4, r7, lr}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	f7fe fc7a 	bl	800a684 <move_window>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bd94:	7bfb      	ldrb	r3, [r7, #15]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <load_xdir+0x2e>
 800bd9a:	7bfb      	ldrb	r3, [r7, #15]
 800bd9c:	e09f      	b.n	800bede <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b85      	cmp	r3, #133	@ 0x85
 800bda6:	d001      	beq.n	800bdac <load_xdir+0x3c>
 800bda8:	2302      	movs	r3, #2
 800bdaa:	e098      	b.n	800bede <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	6938      	ldr	r0, [r7, #16]
 800bdb6:	f7fe fa06 	bl	800a1c6 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	015b      	lsls	r3, r3, #5
 800bdc4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	2b5f      	cmp	r3, #95	@ 0x5f
 800bdca:	d903      	bls.n	800bdd4 <load_xdir+0x64>
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bdd2:	d901      	bls.n	800bdd8 <load_xdir+0x68>
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	e082      	b.n	800bede <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800bdd8:	2100      	movs	r1, #0
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7ff fb73 	bl	800b4c6 <dir_next>
 800bde0:	4603      	mov	r3, r0
 800bde2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <load_xdir+0x7e>
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	e077      	b.n	800bede <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	f7fe fc43 	bl	800a684 <move_window>
 800bdfe:	4603      	mov	r3, r0
 800be00:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800be02:	7bfb      	ldrb	r3, [r7, #15]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <load_xdir+0x9c>
 800be08:	7bfb      	ldrb	r3, [r7, #15]
 800be0a:	e068      	b.n	800bede <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	2bc0      	cmp	r3, #192	@ 0xc0
 800be14:	d001      	beq.n	800be1a <load_xdir+0xaa>
 800be16:	2302      	movs	r3, #2
 800be18:	e061      	b.n	800bede <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	f103 0020 	add.w	r0, r3, #32
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be24:	2220      	movs	r2, #32
 800be26:	4619      	mov	r1, r3
 800be28:	f7fe f9cd 	bl	800a1c6 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	3323      	adds	r3, #35	@ 0x23
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	332c      	adds	r3, #44	@ 0x2c
 800be34:	4a2c      	ldr	r2, [pc, #176]	@ (800bee8 <load_xdir+0x178>)
 800be36:	fba2 2303 	umull	r2, r3, r2, r3
 800be3a:	08db      	lsrs	r3, r3, #3
 800be3c:	015b      	lsls	r3, r3, #5
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	429a      	cmp	r2, r3
 800be42:	d201      	bcs.n	800be48 <load_xdir+0xd8>
 800be44:	2302      	movs	r3, #2
 800be46:	e04a      	b.n	800bede <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800be48:	2340      	movs	r3, #64	@ 0x40
 800be4a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800be4c:	2100      	movs	r1, #0
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f7ff fb39 	bl	800b4c6 <dir_next>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <load_xdir+0xf2>
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	e03d      	b.n	800bede <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be6a:	4619      	mov	r1, r3
 800be6c:	4610      	mov	r0, r2
 800be6e:	f7fe fc09 	bl	800a684 <move_window>
 800be72:	4603      	mov	r3, r0
 800be74:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d001      	beq.n	800be80 <load_xdir+0x110>
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	e02e      	b.n	800bede <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	2bc1      	cmp	r3, #193	@ 0xc1
 800be88:	d001      	beq.n	800be8e <load_xdir+0x11e>
 800be8a:	2302      	movs	r3, #2
 800be8c:	e027      	b.n	800bede <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800be94:	d208      	bcs.n	800bea8 <load_xdir+0x138>
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	18d0      	adds	r0, r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bea0:	2220      	movs	r2, #32
 800bea2:	4619      	mov	r1, r3
 800bea4:	f7fe f98f 	bl	800a1c6 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	3320      	adds	r3, #32
 800beac:	617b      	str	r3, [r7, #20]
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d3ca      	bcc.n	800be4c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bebc:	d80e      	bhi.n	800bedc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800bebe:	6938      	ldr	r0, [r7, #16]
 800bec0:	f7ff fe6d 	bl	800bb9e <xdir_sum>
 800bec4:	4603      	mov	r3, r0
 800bec6:	461c      	mov	r4, r3
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	3302      	adds	r3, #2
 800becc:	4618      	mov	r0, r3
 800bece:	f7fd ff95 	bl	8009dfc <ld_word>
 800bed2:	4603      	mov	r3, r0
 800bed4:	429c      	cmp	r4, r3
 800bed6:	d001      	beq.n	800bedc <load_xdir+0x16c>
 800bed8:	2302      	movs	r3, #2
 800beda:	e000      	b.n	800bede <load_xdir+0x16e>
	}
	return FR_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	371c      	adds	r7, #28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd90      	pop	{r4, r7, pc}
 800bee6:	bf00      	nop
 800bee8:	88888889 	.word	0x88888889

0800beec <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800beec:	b5b0      	push	{r4, r5, r7, lr}
 800beee:	b084      	sub	sp, #16
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6808      	ldr	r0, [r1, #0]
 800befa:	6879      	ldr	r1, [r7, #4]
 800befc:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6a08      	ldr	r0, [r1, #32]
 800bf02:	6879      	ldr	r1, [r7, #4]
 800bf04:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bf0a:	b2c8      	uxtb	r0, r1
 800bf0c:	6879      	ldr	r1, [r7, #4]
 800bf0e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bf14:	2000      	movs	r0, #0
 800bf16:	460c      	mov	r4, r1
 800bf18:	4605      	mov	r5, r0
 800bf1a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800bf1e:	2300      	movs	r3, #0
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf32:	4619      	mov	r1, r3
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7ff fa32 	bl	800b39e <dir_sdi>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d104      	bne.n	800bf4e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7ff ff13 	bl	800bd70 <load_xdir>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bdb0      	pop	{r4, r5, r7, pc}

0800bf58 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800bf58:	b590      	push	{r4, r7, lr}
 800bf5a:	b087      	sub	sp, #28
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	695b      	ldr	r3, [r3, #20]
 800bf66:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	1c9c      	adds	r4, r3, #2
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f7ff fe16 	bl	800bb9e <xdir_sum>
 800bf72:	4603      	mov	r3, r0
 800bf74:	4619      	mov	r1, r3
 800bf76:	4620      	mov	r0, r4
 800bf78:	f7fe f856 	bl	800a028 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff fa06 	bl	800b39e <dir_sdi>
 800bf92:	4603      	mov	r3, r0
 800bf94:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bf96:	e026      	b.n	800bfe6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	f7fe fb6e 	bl	800a684 <move_window>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d11d      	bne.n	800bfee <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	68f9      	ldr	r1, [r7, #12]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fe f903 	bl	800a1c6 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	613b      	str	r3, [r7, #16]
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00e      	beq.n	800bff2 <store_xdir+0x9a>
		dirb += SZDIRE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3320      	adds	r3, #32
 800bfd8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800bfda:	2100      	movs	r1, #0
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f7ff fa72 	bl	800b4c6 <dir_next>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d0d5      	beq.n	800bf98 <store_xdir+0x40>
 800bfec:	e002      	b.n	800bff4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800bfee:	bf00      	nop
 800bff0:	e000      	b.n	800bff4 <store_xdir+0x9c>
		if (--nent == 0) break;
 800bff2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d002      	beq.n	800c000 <store_xdir+0xa8>
 800bffa:	7dfb      	ldrb	r3, [r7, #23]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d101      	bne.n	800c004 <store_xdir+0xac>
 800c000:	7dfb      	ldrb	r3, [r7, #23]
 800c002:	e000      	b.n	800c006 <store_xdir+0xae>
 800c004:	2302      	movs	r3, #2
}
 800c006:	4618      	mov	r0, r3
 800c008:	371c      	adds	r7, #28
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd90      	pop	{r4, r7, pc}

0800c00e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800c00e:	b590      	push	{r4, r7, lr}
 800c010:	b085      	sub	sp, #20
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800c018:	2240      	movs	r2, #64	@ 0x40
 800c01a:	2100      	movs	r1, #0
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7fe f8f3 	bl	800a208 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2285      	movs	r2, #133	@ 0x85
 800c026:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	3320      	adds	r3, #32
 800c02c:	22c0      	movs	r2, #192	@ 0xc0
 800c02e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c030:	2300      	movs	r3, #0
 800c032:	72bb      	strb	r3, [r7, #10]
 800c034:	2301      	movs	r3, #1
 800c036:	72fb      	strb	r3, [r7, #11]
 800c038:	2301      	movs	r3, #1
 800c03a:	813b      	strh	r3, [r7, #8]
 800c03c:	2340      	movs	r3, #64	@ 0x40
 800c03e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	1c5a      	adds	r2, r3, #1
 800c044:	60fa      	str	r2, [r7, #12]
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	4413      	add	r3, r2
 800c04a:	22c1      	movs	r2, #193	@ 0xc1
 800c04c:	701a      	strb	r2, [r3, #0]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	60fa      	str	r2, [r7, #12]
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	4413      	add	r3, r2
 800c058:	2200      	movs	r2, #0
 800c05a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c05c:	893b      	ldrh	r3, [r7, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <create_xdir+0x6c>
 800c062:	7abb      	ldrb	r3, [r7, #10]
 800c064:	005b      	lsls	r3, r3, #1
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	4413      	add	r3, r2
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	813b      	strh	r3, [r7, #8]
 800c06e:	893b      	ldrh	r3, [r7, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <create_xdir+0x6c>
 800c074:	7abb      	ldrb	r3, [r7, #10]
 800c076:	3301      	adds	r3, #1
 800c078:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	4413      	add	r3, r2
 800c080:	893a      	ldrh	r2, [r7, #8]
 800c082:	4611      	mov	r1, r2
 800c084:	4618      	mov	r0, r3
 800c086:	f7fd ffcf 	bl	800a028 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	3302      	adds	r3, #2
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f003 031f 	and.w	r3, r3, #31
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1e0      	bne.n	800c05c <create_xdir+0x4e>
		nb++;
 800c09a:	7afb      	ldrb	r3, [r7, #11]
 800c09c:	3301      	adds	r3, #1
 800c09e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c0a0:	7abb      	ldrb	r3, [r7, #10]
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1c8      	bne.n	800c040 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3323      	adds	r3, #35	@ 0x23
 800c0b2:	7aba      	ldrb	r2, [r7, #10]
 800c0b4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	7afa      	ldrb	r2, [r7, #11]
 800c0bc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800c0c4:	6838      	ldr	r0, [r7, #0]
 800c0c6:	f7ff fd9c 	bl	800bc02 <xname_sum>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f7fd ffaa 	bl	800a028 <st_word>
}
 800c0d4:	bf00      	nop
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd90      	pop	{r4, r7, pc}

0800c0dc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c0e6:	2304      	movs	r3, #4
 800c0e8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c0f0:	23ff      	movs	r3, #255	@ 0xff
 800c0f2:	757b      	strb	r3, [r7, #21]
 800c0f4:	23ff      	movs	r3, #255	@ 0xff
 800c0f6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c0f8:	e09f      	b.n	800c23a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0fe:	4619      	mov	r1, r3
 800c100:	6938      	ldr	r0, [r7, #16]
 800c102:	f7fe fabf 	bl	800a684 <move_window>
 800c106:	4603      	mov	r3, r0
 800c108:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c10a:	7dfb      	ldrb	r3, [r7, #23]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f040 809a 	bne.w	800c246 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c11a:	7dbb      	ldrb	r3, [r7, #22]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c120:	2304      	movs	r3, #4
 800c122:	75fb      	strb	r3, [r7, #23]
 800c124:	e096      	b.n	800c254 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	2b04      	cmp	r3, #4
 800c12c:	d118      	bne.n	800c160 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c12e:	7dbb      	ldrb	r3, [r7, #22]
 800c130:	2b85      	cmp	r3, #133	@ 0x85
 800c132:	d179      	bne.n	800c228 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7ff fe17 	bl	800bd70 <load_xdir>
 800c142:	4603      	mov	r3, r0
 800c144:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c146:	7dfb      	ldrb	r3, [r7, #23]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d17e      	bne.n	800c24a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	3304      	adds	r3, #4
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c158:	b2da      	uxtb	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c15e:	e074      	b.n	800c24a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c164:	330b      	adds	r3, #11
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c16c:	73fb      	strb	r3, [r7, #15]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	7bfa      	ldrb	r2, [r7, #15]
 800c172:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c174:	7dbb      	ldrb	r3, [r7, #22]
 800c176:	2be5      	cmp	r3, #229	@ 0xe5
 800c178:	d00e      	beq.n	800c198 <dir_read+0xbc>
 800c17a:	7dbb      	ldrb	r3, [r7, #22]
 800c17c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c17e:	d00b      	beq.n	800c198 <dir_read+0xbc>
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	f023 0320 	bic.w	r3, r3, #32
 800c186:	2b08      	cmp	r3, #8
 800c188:	bf0c      	ite	eq
 800c18a:	2301      	moveq	r3, #1
 800c18c:	2300      	movne	r3, #0
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	461a      	mov	r2, r3
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	4293      	cmp	r3, r2
 800c196:	d002      	beq.n	800c19e <dir_read+0xc2>
				ord = 0xFF;
 800c198:	23ff      	movs	r3, #255	@ 0xff
 800c19a:	757b      	strb	r3, [r7, #21]
 800c19c:	e044      	b.n	800c228 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
 800c1a0:	2b0f      	cmp	r3, #15
 800c1a2:	d12f      	bne.n	800c204 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c1a4:	7dbb      	ldrb	r3, [r7, #22]
 800c1a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00d      	beq.n	800c1ca <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1b2:	7b5b      	ldrb	r3, [r3, #13]
 800c1b4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c1b6:	7dbb      	ldrb	r3, [r7, #22]
 800c1b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1bc:	75bb      	strb	r3, [r7, #22]
 800c1be:	7dbb      	ldrb	r3, [r7, #22]
 800c1c0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c1ca:	7dba      	ldrb	r2, [r7, #22]
 800c1cc:	7d7b      	ldrb	r3, [r7, #21]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d115      	bne.n	800c1fe <dir_read+0x122>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1d6:	330d      	adds	r3, #13
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	7d3a      	ldrb	r2, [r7, #20]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d10e      	bne.n	800c1fe <dir_read+0x122>
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	691a      	ldr	r2, [r3, #16]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f7ff fb5c 	bl	800b8a8 <pick_lfn>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <dir_read+0x122>
 800c1f6:	7d7b      	ldrb	r3, [r7, #21]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	e000      	b.n	800c200 <dir_read+0x124>
 800c1fe:	23ff      	movs	r3, #255	@ 0xff
 800c200:	757b      	strb	r3, [r7, #21]
 800c202:	e011      	b.n	800c228 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c204:	7d7b      	ldrb	r3, [r7, #21]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d109      	bne.n	800c21e <dir_read+0x142>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff fca4 	bl	800bb5c <sum_sfn>
 800c214:	4603      	mov	r3, r0
 800c216:	461a      	mov	r2, r3
 800c218:	7d3b      	ldrb	r3, [r7, #20]
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d017      	beq.n	800c24e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f04f 32ff 	mov.w	r2, #4294967295
 800c224:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800c226:	e012      	b.n	800c24e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c228:	2100      	movs	r1, #0
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff f94b 	bl	800b4c6 <dir_next>
 800c230:	4603      	mov	r3, r0
 800c232:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10b      	bne.n	800c252 <dir_read+0x176>
	while (dp->sect) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f47f af5b 	bne.w	800c0fa <dir_read+0x1e>
 800c244:	e006      	b.n	800c254 <dir_read+0x178>
		if (res != FR_OK) break;
 800c246:	bf00      	nop
 800c248:	e004      	b.n	800c254 <dir_read+0x178>
					break;
 800c24a:	bf00      	nop
 800c24c:	e002      	b.n	800c254 <dir_read+0x178>
					break;
 800c24e:	bf00      	nop
 800c250:	e000      	b.n	800c254 <dir_read+0x178>
		if (res != FR_OK) break;
 800c252:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c254:	7dfb      	ldrb	r3, [r7, #23]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <dir_read+0x184>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2200      	movs	r2, #0
 800c25e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800c260:	7dfb      	ldrb	r3, [r7, #23]
}
 800c262:	4618      	mov	r0, r3
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c26a:	b590      	push	{r4, r7, lr}
 800c26c:	b089      	sub	sp, #36	@ 0x24
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c278:	2100      	movs	r1, #0
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff f88f 	bl	800b39e <dir_sdi>
 800c280:	4603      	mov	r3, r0
 800c282:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c284:	7ffb      	ldrb	r3, [r7, #31]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <dir_find+0x24>
 800c28a:	7ffb      	ldrb	r3, [r7, #31]
 800c28c:	e113      	b.n	800c4b6 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b04      	cmp	r3, #4
 800c294:	d165      	bne.n	800c362 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff fcb1 	bl	800bc02 <xname_sum>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c2a4:	e050      	b.n	800c348 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	695b      	ldr	r3, [r3, #20]
 800c2aa:	3324      	adds	r3, #36	@ 0x24
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fd fda5 	bl	8009dfc <ld_word>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	893b      	ldrh	r3, [r7, #8]
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d144      	bne.n	800c346 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	695b      	ldr	r3, [r3, #20]
 800c2c0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c2c4:	76fb      	strb	r3, [r7, #27]
 800c2c6:	2340      	movs	r3, #64	@ 0x40
 800c2c8:	617b      	str	r3, [r7, #20]
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	613b      	str	r3, [r7, #16]
 800c2ce:	e029      	b.n	800c324 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f003 031f 	and.w	r3, r3, #31
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d102      	bne.n	800c2e0 <dir_find+0x76>
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	3302      	adds	r3, #2
 800c2de:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	695a      	ldr	r2, [r3, #20]
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fd fd87 	bl	8009dfc <ld_word>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f003 f9d7 	bl	800f6a4 <ff_wtoupper>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	461c      	mov	r4, r3
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	691a      	ldr	r2, [r3, #16]
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	005b      	lsls	r3, r3, #1
 800c302:	4413      	add	r3, r2
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	4618      	mov	r0, r3
 800c308:	f003 f9cc 	bl	800f6a4 <ff_wtoupper>
 800c30c:	4603      	mov	r3, r0
 800c30e:	429c      	cmp	r4, r3
 800c310:	d10c      	bne.n	800c32c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c312:	7efb      	ldrb	r3, [r7, #27]
 800c314:	3b01      	subs	r3, #1
 800c316:	76fb      	strb	r3, [r7, #27]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	3302      	adds	r3, #2
 800c31c:	617b      	str	r3, [r7, #20]
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	3301      	adds	r3, #1
 800c322:	613b      	str	r3, [r7, #16]
 800c324:	7efb      	ldrb	r3, [r7, #27]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1d2      	bne.n	800c2d0 <dir_find+0x66>
 800c32a:	e000      	b.n	800c32e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c32c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c32e:	7efb      	ldrb	r3, [r7, #27]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d109      	bne.n	800c348 <dir_find+0xde>
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	691a      	ldr	r2, [r3, #16]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	005b      	lsls	r3, r3, #1
 800c33c:	4413      	add	r3, r2
 800c33e:	881b      	ldrh	r3, [r3, #0]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00b      	beq.n	800c35c <dir_find+0xf2>
 800c344:	e000      	b.n	800c348 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c346:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c348:	2100      	movs	r1, #0
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7ff fec6 	bl	800c0dc <dir_read>
 800c350:	4603      	mov	r3, r0
 800c352:	77fb      	strb	r3, [r7, #31]
 800c354:	7ffb      	ldrb	r3, [r7, #31]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d0a5      	beq.n	800c2a6 <dir_find+0x3c>
 800c35a:	e000      	b.n	800c35e <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c35c:	bf00      	nop
		}
		return res;
 800c35e:	7ffb      	ldrb	r3, [r7, #31]
 800c360:	e0a9      	b.n	800c4b6 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c362:	23ff      	movs	r3, #255	@ 0xff
 800c364:	773b      	strb	r3, [r7, #28]
 800c366:	7f3b      	ldrb	r3, [r7, #28]
 800c368:	777b      	strb	r3, [r7, #29]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f04f 32ff 	mov.w	r2, #4294967295
 800c370:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c376:	4619      	mov	r1, r3
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7fe f983 	bl	800a684 <move_window>
 800c37e:	4603      	mov	r3, r0
 800c380:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c382:	7ffb      	ldrb	r3, [r7, #31]
 800c384:	2b00      	cmp	r3, #0
 800c386:	f040 8090 	bne.w	800c4aa <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c392:	7fbb      	ldrb	r3, [r7, #30]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <dir_find+0x134>
 800c398:	2304      	movs	r3, #4
 800c39a:	77fb      	strb	r3, [r7, #31]
 800c39c:	e08a      	b.n	800c4b4 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3a2:	330b      	adds	r3, #11
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3aa:	72fb      	strb	r3, [r7, #11]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	7afa      	ldrb	r2, [r7, #11]
 800c3b0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c3b2:	7fbb      	ldrb	r3, [r7, #30]
 800c3b4:	2be5      	cmp	r3, #229	@ 0xe5
 800c3b6:	d007      	beq.n	800c3c8 <dir_find+0x15e>
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	f003 0308 	and.w	r3, r3, #8
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d009      	beq.n	800c3d6 <dir_find+0x16c>
 800c3c2:	7afb      	ldrb	r3, [r7, #11]
 800c3c4:	2b0f      	cmp	r3, #15
 800c3c6:	d006      	beq.n	800c3d6 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c3c8:	23ff      	movs	r3, #255	@ 0xff
 800c3ca:	777b      	strb	r3, [r7, #29]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c3d4:	e05e      	b.n	800c494 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c3d6:	7afb      	ldrb	r3, [r7, #11]
 800c3d8:	2b0f      	cmp	r3, #15
 800c3da:	d136      	bne.n	800c44a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c3e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d154      	bne.n	800c494 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c3ea:	7fbb      	ldrb	r3, [r7, #30]
 800c3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00d      	beq.n	800c410 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3f8:	7b5b      	ldrb	r3, [r3, #13]
 800c3fa:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c3fc:	7fbb      	ldrb	r3, [r7, #30]
 800c3fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c402:	77bb      	strb	r3, [r7, #30]
 800c404:	7fbb      	ldrb	r3, [r7, #30]
 800c406:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c410:	7fba      	ldrb	r2, [r7, #30]
 800c412:	7f7b      	ldrb	r3, [r7, #29]
 800c414:	429a      	cmp	r2, r3
 800c416:	d115      	bne.n	800c444 <dir_find+0x1da>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c41c:	330d      	adds	r3, #13
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	7f3a      	ldrb	r2, [r7, #28]
 800c422:	429a      	cmp	r2, r3
 800c424:	d10e      	bne.n	800c444 <dir_find+0x1da>
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	691a      	ldr	r2, [r3, #16]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c42e:	4619      	mov	r1, r3
 800c430:	4610      	mov	r0, r2
 800c432:	f7ff f9c9 	bl	800b7c8 <cmp_lfn>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <dir_find+0x1da>
 800c43c:	7f7b      	ldrb	r3, [r7, #29]
 800c43e:	3b01      	subs	r3, #1
 800c440:	b2db      	uxtb	r3, r3
 800c442:	e000      	b.n	800c446 <dir_find+0x1dc>
 800c444:	23ff      	movs	r3, #255	@ 0xff
 800c446:	777b      	strb	r3, [r7, #29]
 800c448:	e024      	b.n	800c494 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c44a:	7f7b      	ldrb	r3, [r7, #29]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d109      	bne.n	800c464 <dir_find+0x1fa>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fb81 	bl	800bb5c <sum_sfn>
 800c45a:	4603      	mov	r3, r0
 800c45c:	461a      	mov	r2, r3
 800c45e:	7f3b      	ldrb	r3, [r7, #28]
 800c460:	4293      	cmp	r3, r2
 800c462:	d024      	beq.n	800c4ae <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d10a      	bne.n	800c488 <dir_find+0x21e>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	3340      	adds	r3, #64	@ 0x40
 800c47a:	220b      	movs	r2, #11
 800c47c:	4619      	mov	r1, r3
 800c47e:	f7fd fede 	bl	800a23e <mem_cmp>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d014      	beq.n	800c4b2 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c488:	23ff      	movs	r3, #255	@ 0xff
 800c48a:	777b      	strb	r3, [r7, #29]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f04f 32ff 	mov.w	r2, #4294967295
 800c492:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c494:	2100      	movs	r1, #0
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7ff f815 	bl	800b4c6 <dir_next>
 800c49c:	4603      	mov	r3, r0
 800c49e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c4a0:	7ffb      	ldrb	r3, [r7, #31]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f43f af65 	beq.w	800c372 <dir_find+0x108>
 800c4a8:	e004      	b.n	800c4b4 <dir_find+0x24a>
		if (res != FR_OK) break;
 800c4aa:	bf00      	nop
 800c4ac:	e002      	b.n	800c4b4 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c4ae:	bf00      	nop
 800c4b0:	e000      	b.n	800c4b4 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c4b2:	bf00      	nop

	return res;
 800c4b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3724      	adds	r7, #36	@ 0x24
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd90      	pop	{r4, r7, pc}
	...

0800c4c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c4c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c4c4:	b0a0      	sub	sp, #128	@ 0x80
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c4d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d001      	beq.n	800c4e2 <dir_register+0x22>
 800c4de:	2306      	movs	r3, #6
 800c4e0:	e192      	b.n	800c808 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4e6:	e002      	b.n	800c4ee <dir_register+0x2e>
 800c4e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4f0:	691a      	ldr	r2, [r3, #16]
 800c4f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	4413      	add	r3, r2
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1f4      	bne.n	800c4e8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c4fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b04      	cmp	r3, #4
 800c504:	f040 80a3 	bne.w	800c64e <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c508:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c50a:	330e      	adds	r3, #14
 800c50c:	4aa4      	ldr	r2, [pc, #656]	@ (800c7a0 <dir_register+0x2e0>)
 800c50e:	fba2 2303 	umull	r2, r3, r2, r3
 800c512:	08db      	lsrs	r3, r3, #3
 800c514:	3302      	adds	r3, #2
 800c516:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c518:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff f8b9 	bl	800b692 <dir_alloc>
 800c520:	4603      	mov	r3, r0
 800c522:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800c526:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d002      	beq.n	800c534 <dir_register+0x74>
 800c52e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c532:	e169      	b.n	800c808 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c538:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c53a:	3b01      	subs	r3, #1
 800c53c:	015b      	lsls	r3, r3, #5
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d076      	beq.n	800c63a <dir_register+0x17a>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	79db      	ldrb	r3, [r3, #7]
 800c550:	f003 0304 	and.w	r3, r3, #4
 800c554:	2b00      	cmp	r3, #0
 800c556:	d070      	beq.n	800c63a <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c55e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c560:	8949      	ldrh	r1, [r1, #10]
 800c562:	4608      	mov	r0, r1
 800c564:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c566:	8989      	ldrh	r1, [r1, #12]
 800c568:	fb00 f101 	mul.w	r1, r0, r1
 800c56c:	2000      	movs	r0, #0
 800c56e:	460c      	mov	r4, r1
 800c570:	4605      	mov	r5, r0
 800c572:	eb12 0804 	adds.w	r8, r2, r4
 800c576:	eb43 0905 	adc.w	r9, r3, r5
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4618      	mov	r0, r3
 800c584:	f7fe fcaa 	bl	800aedc <fill_first_frag>
 800c588:	4603      	mov	r3, r0
 800c58a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c58e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c592:	2b00      	cmp	r3, #0
 800c594:	d002      	beq.n	800c59c <dir_register+0xdc>
 800c596:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c59a:	e135      	b.n	800c808 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	f7fe fcc7 	bl	800af3a <fill_last_frag>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c5b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d002      	beq.n	800c5c0 <dir_register+0x100>
 800c5ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5be:	e123      	b.n	800c808 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	f107 0308 	add.w	r3, r7, #8
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff fc8f 	bl	800beec <load_obj_dir>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c5d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <dir_register+0x122>
 800c5dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5e0:	e112      	b.n	800c808 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	f7fd fd60 	bl	800a0b6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c5f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c604:	4608      	mov	r0, r1
 800c606:	f7fd fd56 	bl	800a0b6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	79da      	ldrb	r2, [r3, #7]
 800c60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c610:	695b      	ldr	r3, [r3, #20]
 800c612:	3321      	adds	r3, #33	@ 0x21
 800c614:	f042 0201 	orr.w	r2, r2, #1
 800c618:	b2d2      	uxtb	r2, r2
 800c61a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c61c:	f107 0308 	add.w	r3, r7, #8
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff fc99 	bl	800bf58 <store_xdir>
 800c626:	4603      	mov	r3, r0
 800c628:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c62c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c630:	2b00      	cmp	r3, #0
 800c632:	d002      	beq.n	800c63a <dir_register+0x17a>
 800c634:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c638:	e0e6      	b.n	800c808 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c63a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c63c:	695a      	ldr	r2, [r3, #20]
 800c63e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	4619      	mov	r1, r3
 800c644:	4610      	mov	r0, r2
 800c646:	f7ff fce2 	bl	800c00e <create_xdir>
		return FR_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e0dc      	b.n	800c808 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c654:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c658:	220c      	movs	r2, #12
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fd fdb3 	bl	800a1c6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c660:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c664:	f003 0301 	and.w	r3, r3, #1
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d033      	beq.n	800c6d4 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2240      	movs	r2, #64	@ 0x40
 800c670:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800c674:	2301      	movs	r3, #1
 800c676:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c678:	e016      	b.n	800c6a8 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800c680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c682:	691a      	ldr	r2, [r3, #16]
 800c684:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800c688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c68a:	f7ff f9d9 	bl	800ba40 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7ff fdeb 	bl	800c26a <dir_find>
 800c694:	4603      	mov	r3, r0
 800c696:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800c69a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d106      	bne.n	800c6b0 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800c6a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c6a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6aa:	2b63      	cmp	r3, #99	@ 0x63
 800c6ac:	d9e5      	bls.n	800c67a <dir_register+0x1ba>
 800c6ae:	e000      	b.n	800c6b2 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800c6b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c6b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6b4:	2b64      	cmp	r3, #100	@ 0x64
 800c6b6:	d101      	bne.n	800c6bc <dir_register+0x1fc>
 800c6b8:	2307      	movs	r3, #7
 800c6ba:	e0a5      	b.n	800c808 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c6bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c6c0:	2b04      	cmp	r3, #4
 800c6c2:	d002      	beq.n	800c6ca <dir_register+0x20a>
 800c6c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c6c8:	e09e      	b.n	800c808 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c6ca:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c6d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c6d8:	f003 0302 	and.w	r3, r3, #2
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d007      	beq.n	800c6f0 <dir_register+0x230>
 800c6e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6e2:	330c      	adds	r3, #12
 800c6e4:	4a2f      	ldr	r2, [pc, #188]	@ (800c7a4 <dir_register+0x2e4>)
 800c6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ea:	089b      	lsrs	r3, r3, #2
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	e000      	b.n	800c6f2 <dir_register+0x232>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c6f4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7fe ffcb 	bl	800b692 <dir_alloc>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c702:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c706:	2b00      	cmp	r3, #0
 800c708:	d14f      	bne.n	800c7aa <dir_register+0x2ea>
 800c70a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c70c:	3b01      	subs	r3, #1
 800c70e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c710:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c712:	2b00      	cmp	r3, #0
 800c714:	d049      	beq.n	800c7aa <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c71a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c71c:	015b      	lsls	r3, r3, #5
 800c71e:	1ad3      	subs	r3, r2, r3
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7fe fe3b 	bl	800b39e <dir_sdi>
 800c728:	4603      	mov	r3, r0
 800c72a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c72e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c732:	2b00      	cmp	r3, #0
 800c734:	d139      	bne.n	800c7aa <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	3340      	adds	r3, #64	@ 0x40
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff fa0e 	bl	800bb5c <sum_sfn>
 800c740:	4603      	mov	r3, r0
 800c742:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c74a:	4619      	mov	r1, r3
 800c74c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c74e:	f7fd ff99 	bl	800a684 <move_window>
 800c752:	4603      	mov	r3, r0
 800c754:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800c758:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d123      	bne.n	800c7a8 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c762:	6918      	ldr	r0, [r3, #16]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c770:	f7ff f8fe 	bl	800b970 <put_lfn>
				fs->wflag = 1;
 800c774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c776:	2201      	movs	r2, #1
 800c778:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c77a:	2100      	movs	r1, #0
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f7fe fea2 	bl	800b4c6 <dir_next>
 800c782:	4603      	mov	r3, r0
 800c784:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800c788:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10c      	bne.n	800c7aa <dir_register+0x2ea>
 800c790:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c792:	3b01      	subs	r3, #1
 800c794:	673b      	str	r3, [r7, #112]	@ 0x70
 800c796:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1d4      	bne.n	800c746 <dir_register+0x286>
 800c79c:	e005      	b.n	800c7aa <dir_register+0x2ea>
 800c79e:	bf00      	nop
 800c7a0:	88888889 	.word	0x88888889
 800c7a4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800c7a8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c7aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d128      	bne.n	800c804 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c7ba:	f7fd ff63 	bl	800a684 <move_window>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c7c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d11b      	bne.n	800c804 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7fd fd17 	bl	800a208 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3340      	adds	r3, #64	@ 0x40
 800c7e2:	220b      	movs	r2, #11
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	f7fd fcee 	bl	800a1c6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7f4:	330c      	adds	r3, #12
 800c7f6:	f002 0218 	and.w	r2, r2, #24
 800c7fa:	b2d2      	uxtb	r2, r2
 800c7fc:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c7fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c800:	2201      	movs	r2, #1
 800c802:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c804:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3780      	adds	r7, #128	@ 0x80
 800c80c:	46bd      	mov	sp, r7
 800c80e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c812:	bf00      	nop

0800c814 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b086      	sub	sp, #24
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c826:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c830:	d007      	beq.n	800c842 <dir_remove+0x2e>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c836:	4619      	mov	r1, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f7fe fdb0 	bl	800b39e <dir_sdi>
 800c83e:	4603      	mov	r3, r0
 800c840:	e000      	b.n	800c844 <dir_remove+0x30>
 800c842:	2300      	movs	r3, #0
 800c844:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d136      	bne.n	800c8ba <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c850:	4619      	mov	r1, r3
 800c852:	6938      	ldr	r0, [r7, #16]
 800c854:	f7fd ff16 	bl	800a684 <move_window>
 800c858:	4603      	mov	r3, r0
 800c85a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d123      	bne.n	800c8aa <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	2b04      	cmp	r3, #4
 800c868:	d109      	bne.n	800c87e <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c86e:	781a      	ldrb	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c874:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c878:	b2d2      	uxtb	r2, r2
 800c87a:	701a      	strb	r2, [r3, #0]
 800c87c:	e003      	b.n	800c886 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c882:	22e5      	movs	r2, #229	@ 0xe5
 800c884:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	2201      	movs	r2, #1
 800c88a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	429a      	cmp	r2, r3
 800c894:	d90b      	bls.n	800c8ae <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 800c896:	2100      	movs	r1, #0
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f7fe fe14 	bl	800b4c6 <dir_next>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c8a2:	7dfb      	ldrb	r3, [r7, #23]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d0d1      	beq.n	800c84c <dir_remove+0x38>
 800c8a8:	e002      	b.n	800c8b0 <dir_remove+0x9c>
			if (res != FR_OK) break;
 800c8aa:	bf00      	nop
 800c8ac:	e000      	b.n	800c8b0 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c8ae:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c8b0:	7dfb      	ldrb	r3, [r7, #23]
 800c8b2:	2b04      	cmp	r3, #4
 800c8b4:	d101      	bne.n	800c8ba <dir_remove+0xa6>
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3718      	adds	r7, #24
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c8c4:	b5b0      	push	{r4, r5, r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f000 80d9 	beq.w	800ca96 <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b04      	cmp	r3, #4
 800c8ea:	d106      	bne.n	800c8fa <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	695b      	ldr	r3, [r3, #20]
 800c8f0:	6839      	ldr	r1, [r7, #0]
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff f9b9 	bl	800bc6a <get_xdir_info>
		return;
 800c8f8:	e0ce      	b.n	800ca98 <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c902:	d032      	beq.n	800c96a <get_fileinfo+0xa6>
			i = j = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	61bb      	str	r3, [r7, #24]
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c90c:	e01b      	b.n	800c946 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c90e:	89fb      	ldrh	r3, [r7, #14]
 800c910:	2100      	movs	r1, #0
 800c912:	4618      	mov	r0, r3
 800c914:	f002 fe8a 	bl	800f62c <ff_convert>
 800c918:	4603      	mov	r3, r0
 800c91a:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c91c:	89fb      	ldrh	r3, [r7, #14]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d102      	bne.n	800c928 <get_fileinfo+0x64>
 800c922:	2300      	movs	r3, #0
 800c924:	61fb      	str	r3, [r7, #28]
 800c926:	e01a      	b.n	800c95e <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c92c:	d902      	bls.n	800c934 <get_fileinfo+0x70>
 800c92e:	2300      	movs	r3, #0
 800c930:	61fb      	str	r3, [r7, #28]
 800c932:	e014      	b.n	800c95e <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	1c5a      	adds	r2, r3, #1
 800c938:	61fa      	str	r2, [r7, #28]
 800c93a:	89fa      	ldrh	r2, [r7, #14]
 800c93c:	b2d1      	uxtb	r1, r2
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	4413      	add	r3, r2
 800c942:	460a      	mov	r2, r1
 800c944:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	691a      	ldr	r2, [r3, #16]
 800c94a:	69bb      	ldr	r3, [r7, #24]
 800c94c:	1c59      	adds	r1, r3, #1
 800c94e:	61b9      	str	r1, [r7, #24]
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	81fb      	strh	r3, [r7, #14]
 800c958:	89fb      	ldrh	r3, [r7, #14]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1d7      	bne.n	800c90e <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c95e:	683a      	ldr	r2, [r7, #0]
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	4413      	add	r3, r2
 800c964:	331a      	adds	r3, #26
 800c966:	2200      	movs	r2, #0
 800c968:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	61bb      	str	r3, [r7, #24]
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c972:	683a      	ldr	r2, [r7, #0]
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	4413      	add	r3, r2
 800c978:	331a      	adds	r3, #26
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c97e:	e04d      	b.n	800ca1c <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	1c59      	adds	r1, r3, #1
 800c988:	61f9      	str	r1, [r7, #28]
 800c98a:	4413      	add	r3, r2
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c990:	7dfb      	ldrb	r3, [r7, #23]
 800c992:	2b20      	cmp	r3, #32
 800c994:	d041      	beq.n	800ca1a <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	2b05      	cmp	r3, #5
 800c99a:	d101      	bne.n	800c9a0 <get_fileinfo+0xdc>
 800c99c:	23e5      	movs	r3, #229	@ 0xe5
 800c99e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	2b09      	cmp	r3, #9
 800c9a4:	d10f      	bne.n	800c9c6 <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 800c9a6:	89bb      	ldrh	r3, [r7, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d105      	bne.n	800c9b8 <get_fileinfo+0xf4>
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	331a      	adds	r3, #26
 800c9b4:	222e      	movs	r2, #46	@ 0x2e
 800c9b6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c9b8:	69bb      	ldr	r3, [r7, #24]
 800c9ba:	1c5a      	adds	r2, r3, #1
 800c9bc:	61ba      	str	r2, [r7, #24]
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	222e      	movs	r2, #46	@ 0x2e
 800c9c4:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c9c6:	683a      	ldr	r2, [r7, #0]
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	330d      	adds	r3, #13
 800c9ce:	7dfa      	ldrb	r2, [r7, #23]
 800c9d0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c9d2:	89bb      	ldrh	r3, [r7, #12]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d11c      	bne.n	800ca12 <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c9d8:	7dfb      	ldrb	r3, [r7, #23]
 800c9da:	2b40      	cmp	r3, #64	@ 0x40
 800c9dc:	d913      	bls.n	800ca06 <get_fileinfo+0x142>
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	2b5a      	cmp	r3, #90	@ 0x5a
 800c9e2:	d810      	bhi.n	800ca06 <get_fileinfo+0x142>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9e8:	330c      	adds	r3, #12
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	2b08      	cmp	r3, #8
 800c9f2:	d901      	bls.n	800c9f8 <get_fileinfo+0x134>
 800c9f4:	2310      	movs	r3, #16
 800c9f6:	e000      	b.n	800c9fa <get_fileinfo+0x136>
 800c9f8:	2308      	movs	r3, #8
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 800ca00:	7dfb      	ldrb	r3, [r7, #23]
 800ca02:	3320      	adds	r3, #32
 800ca04:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	331a      	adds	r3, #26
 800ca0e:	7dfa      	ldrb	r2, [r7, #23]
 800ca10:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	3301      	adds	r3, #1
 800ca16:	61bb      	str	r3, [r7, #24]
 800ca18:	e000      	b.n	800ca1c <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 800ca1a:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	2b0a      	cmp	r3, #10
 800ca20:	d9ae      	bls.n	800c980 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800ca22:	89bb      	ldrh	r3, [r7, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10d      	bne.n	800ca44 <get_fileinfo+0x180>
		fno->fname[j] = 0;
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	331a      	adds	r3, #26
 800ca30:	2200      	movs	r2, #0
 800ca32:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca38:	330c      	adds	r3, #12
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <get_fileinfo+0x180>
 800ca40:	2300      	movs	r3, #0
 800ca42:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	4413      	add	r3, r2
 800ca4a:	330d      	adds	r3, #13
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca54:	7ada      	ldrb	r2, [r3, #11]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca5e:	331c      	adds	r3, #28
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fd f9e3 	bl	8009e2c <ld_dword>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2200      	movs	r2, #0
 800ca6a:	461c      	mov	r4, r3
 800ca6c:	4615      	mov	r5, r2
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca78:	3316      	adds	r3, #22
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fd f9d6 	bl	8009e2c <ld_dword>
 800ca80:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	815a      	strh	r2, [r3, #10]
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	0c1b      	lsrs	r3, r3, #16
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	811a      	strh	r2, [r3, #8]
 800ca94:	e000      	b.n	800ca98 <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ca96:	bf00      	nop
}
 800ca98:	3720      	adds	r7, #32
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800caa0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08a      	sub	sp, #40	@ 0x28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	613b      	str	r3, [r7, #16]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	60fb      	str	r3, [r7, #12]
 800cab8:	2300      	movs	r3, #0
 800caba:	617b      	str	r3, [r7, #20]
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	1c5a      	adds	r2, r3, #1
 800cac4:	61ba      	str	r2, [r7, #24]
 800cac6:	693a      	ldr	r2, [r7, #16]
 800cac8:	4413      	add	r3, r2
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cad0:	2b1f      	cmp	r3, #31
 800cad2:	d940      	bls.n	800cb56 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cad4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cad6:	2b2f      	cmp	r3, #47	@ 0x2f
 800cad8:	d006      	beq.n	800cae8 <create_name+0x48>
 800cada:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cadc:	2b5c      	cmp	r3, #92	@ 0x5c
 800cade:	d110      	bne.n	800cb02 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cae0:	e002      	b.n	800cae8 <create_name+0x48>
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	3301      	adds	r3, #1
 800cae6:	61bb      	str	r3, [r7, #24]
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	4413      	add	r3, r2
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	2b2f      	cmp	r3, #47	@ 0x2f
 800caf2:	d0f6      	beq.n	800cae2 <create_name+0x42>
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	4413      	add	r3, r2
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b5c      	cmp	r3, #92	@ 0x5c
 800cafe:	d0f0      	beq.n	800cae2 <create_name+0x42>
			break;
 800cb00:	e02a      	b.n	800cb58 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	2bfe      	cmp	r3, #254	@ 0xfe
 800cb06:	d901      	bls.n	800cb0c <create_name+0x6c>
 800cb08:	2306      	movs	r3, #6
 800cb0a:	e17d      	b.n	800ce08 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cb0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cb12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb14:	2101      	movs	r1, #1
 800cb16:	4618      	mov	r0, r3
 800cb18:	f002 fd88 	bl	800f62c <ff_convert>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cb20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <create_name+0x8a>
 800cb26:	2306      	movs	r3, #6
 800cb28:	e16e      	b.n	800ce08 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cb2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb2c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb2e:	d809      	bhi.n	800cb44 <create_name+0xa4>
 800cb30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb32:	4619      	mov	r1, r3
 800cb34:	488d      	ldr	r0, [pc, #564]	@ (800cd6c <create_name+0x2cc>)
 800cb36:	f7fd fba9 	bl	800a28c <chk_chr>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <create_name+0xa4>
 800cb40:	2306      	movs	r3, #6
 800cb42:	e161      	b.n	800ce08 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	617a      	str	r2, [r7, #20]
 800cb4a:	005b      	lsls	r3, r3, #1
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	4413      	add	r3, r2
 800cb50:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cb52:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cb54:	e7b4      	b.n	800cac0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cb56:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	441a      	add	r2, r3
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cb62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb64:	2b1f      	cmp	r3, #31
 800cb66:	d801      	bhi.n	800cb6c <create_name+0xcc>
 800cb68:	2304      	movs	r3, #4
 800cb6a:	e000      	b.n	800cb6e <create_name+0xce>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cb72:	e011      	b.n	800cb98 <create_name+0xf8>
		w = lfn[di - 1];
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	005b      	lsls	r3, r3, #1
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	4413      	add	r3, r2
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800cb86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb88:	2b20      	cmp	r3, #32
 800cb8a:	d002      	beq.n	800cb92 <create_name+0xf2>
 800cb8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb8e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb90:	d106      	bne.n	800cba0 <create_name+0x100>
		di--;
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1ea      	bne.n	800cb74 <create_name+0xd4>
 800cb9e:	e000      	b.n	800cba2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cba0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	4413      	add	r3, r2
 800cbaa:	2200      	movs	r2, #0
 800cbac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d101      	bne.n	800cbb8 <create_name+0x118>
 800cbb4:	2306      	movs	r3, #6
 800cbb6:	e127      	b.n	800ce08 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	3340      	adds	r3, #64	@ 0x40
 800cbbc:	220b      	movs	r2, #11
 800cbbe:	2120      	movs	r1, #32
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7fd fb21 	bl	800a208 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	61bb      	str	r3, [r7, #24]
 800cbca:	e002      	b.n	800cbd2 <create_name+0x132>
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	61bb      	str	r3, [r7, #24]
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	4413      	add	r3, r2
 800cbda:	881b      	ldrh	r3, [r3, #0]
 800cbdc:	2b20      	cmp	r3, #32
 800cbde:	d0f5      	beq.n	800cbcc <create_name+0x12c>
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	881b      	ldrh	r3, [r3, #0]
 800cbea:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbec:	d0ee      	beq.n	800cbcc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d009      	beq.n	800cc08 <create_name+0x168>
 800cbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbf8:	f043 0303 	orr.w	r3, r3, #3
 800cbfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800cc00:	e002      	b.n	800cc08 <create_name+0x168>
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	617b      	str	r3, [r7, #20]
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d009      	beq.n	800cc22 <create_name+0x182>
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cc14:	3b01      	subs	r3, #1
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc20:	d1ef      	bne.n	800cc02 <create_name+0x162>

	i = b = 0; ni = 8;
 800cc22:	2300      	movs	r3, #0
 800cc24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cc28:	2300      	movs	r3, #0
 800cc2a:	623b      	str	r3, [r7, #32]
 800cc2c:	2308      	movs	r3, #8
 800cc2e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cc30:	69bb      	ldr	r3, [r7, #24]
 800cc32:	1c5a      	adds	r2, r3, #1
 800cc34:	61ba      	str	r2, [r7, #24]
 800cc36:	005b      	lsls	r3, r3, #1
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cc40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	f000 8090 	beq.w	800cd68 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cc48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc4a:	2b20      	cmp	r3, #32
 800cc4c:	d006      	beq.n	800cc5c <create_name+0x1bc>
 800cc4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc50:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc52:	d10a      	bne.n	800cc6a <create_name+0x1ca>
 800cc54:	69ba      	ldr	r2, [r7, #24]
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d006      	beq.n	800cc6a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc60:	f043 0303 	orr.w	r3, r3, #3
 800cc64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc68:	e07d      	b.n	800cd66 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800cc6a:	6a3a      	ldr	r2, [r7, #32]
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d203      	bcs.n	800cc7a <create_name+0x1da>
 800cc72:	69ba      	ldr	r2, [r7, #24]
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d123      	bne.n	800ccc2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	2b0b      	cmp	r3, #11
 800cc7e:	d106      	bne.n	800cc8e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cc80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc84:	f043 0303 	orr.w	r3, r3, #3
 800cc88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc8c:	e075      	b.n	800cd7a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cc8e:	69ba      	ldr	r2, [r7, #24]
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d005      	beq.n	800cca2 <create_name+0x202>
 800cc96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc9a:	f043 0303 	orr.w	r3, r3, #3
 800cc9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d866      	bhi.n	800cd78 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	61bb      	str	r3, [r7, #24]
 800ccae:	2308      	movs	r3, #8
 800ccb0:	623b      	str	r3, [r7, #32]
 800ccb2:	230b      	movs	r3, #11
 800ccb4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ccb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ccc0:	e051      	b.n	800cd66 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ccc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccc4:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccc6:	d914      	bls.n	800ccf2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ccc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccca:	2100      	movs	r1, #0
 800cccc:	4618      	mov	r0, r3
 800ccce:	f002 fcad 	bl	800f62c <ff_convert>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ccd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d004      	beq.n	800cce6 <create_name+0x246>
 800ccdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccde:	3b80      	subs	r3, #128	@ 0x80
 800cce0:	4a23      	ldr	r2, [pc, #140]	@ (800cd70 <create_name+0x2d0>)
 800cce2:	5cd3      	ldrb	r3, [r2, r3]
 800cce4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cce6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccea:	f043 0302 	orr.w	r3, r3, #2
 800ccee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ccf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d007      	beq.n	800cd08 <create_name+0x268>
 800ccf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	481d      	ldr	r0, [pc, #116]	@ (800cd74 <create_name+0x2d4>)
 800ccfe:	f7fd fac5 	bl	800a28c <chk_chr>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d008      	beq.n	800cd1a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cd08:	235f      	movs	r3, #95	@ 0x5f
 800cd0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cd0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cd10:	f043 0303 	orr.w	r3, r3, #3
 800cd14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cd18:	e01b      	b.n	800cd52 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cd1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd1c:	2b40      	cmp	r3, #64	@ 0x40
 800cd1e:	d909      	bls.n	800cd34 <create_name+0x294>
 800cd20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd22:	2b5a      	cmp	r3, #90	@ 0x5a
 800cd24:	d806      	bhi.n	800cd34 <create_name+0x294>
					b |= 2;
 800cd26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd2a:	f043 0302 	orr.w	r3, r3, #2
 800cd2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cd32:	e00e      	b.n	800cd52 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cd34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd36:	2b60      	cmp	r3, #96	@ 0x60
 800cd38:	d90b      	bls.n	800cd52 <create_name+0x2b2>
 800cd3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd3c:	2b7a      	cmp	r3, #122	@ 0x7a
 800cd3e:	d808      	bhi.n	800cd52 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cd40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd44:	f043 0301 	orr.w	r3, r3, #1
 800cd48:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cd4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cd4e:	3b20      	subs	r3, #32
 800cd50:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	623a      	str	r2, [r7, #32]
 800cd58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cd5a:	b2d1      	uxtb	r1, r2
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	4413      	add	r3, r2
 800cd60:	460a      	mov	r2, r1
 800cd62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cd66:	e763      	b.n	800cc30 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cd68:	bf00      	nop
 800cd6a:	e006      	b.n	800cd7a <create_name+0x2da>
 800cd6c:	08015104 	.word	0x08015104
 800cd70:	08018ba4 	.word	0x08018ba4
 800cd74:	08015110 	.word	0x08015110
			if (si > di) break;			/* No extension */
 800cd78:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cd80:	2be5      	cmp	r3, #229	@ 0xe5
 800cd82:	d103      	bne.n	800cd8c <create_name+0x2ec>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2205      	movs	r2, #5
 800cd88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	2b08      	cmp	r3, #8
 800cd90:	d104      	bne.n	800cd9c <create_name+0x2fc>
 800cd92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cd9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cda0:	f003 030c 	and.w	r3, r3, #12
 800cda4:	2b0c      	cmp	r3, #12
 800cda6:	d005      	beq.n	800cdb4 <create_name+0x314>
 800cda8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cdac:	f003 0303 	and.w	r3, r3, #3
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d105      	bne.n	800cdc0 <create_name+0x320>
 800cdb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdb8:	f043 0302 	orr.w	r3, r3, #2
 800cdbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cdc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdc4:	f003 0302 	and.w	r3, r3, #2
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d117      	bne.n	800cdfc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cdcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cdd0:	f003 0303 	and.w	r3, r3, #3
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d105      	bne.n	800cde4 <create_name+0x344>
 800cdd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cddc:	f043 0310 	orr.w	r3, r3, #16
 800cde0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cde4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cde8:	f003 030c 	and.w	r3, r3, #12
 800cdec:	2b04      	cmp	r3, #4
 800cdee:	d105      	bne.n	800cdfc <create_name+0x35c>
 800cdf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdf4:	f043 0308 	orr.w	r3, r3, #8
 800cdf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ce02:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800ce06:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3728      	adds	r7, #40	@ 0x28
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ce24:	e002      	b.n	800ce2c <follow_path+0x1c>
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	603b      	str	r3, [r7, #0]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b2f      	cmp	r3, #47	@ 0x2f
 800ce32:	d0f8      	beq.n	800ce26 <follow_path+0x16>
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	2b5c      	cmp	r3, #92	@ 0x5c
 800ce3a:	d0f4      	beq.n	800ce26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	2200      	movs	r2, #0
 800ce46:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	2b1f      	cmp	r3, #31
 800ce4e:	d80a      	bhi.n	800ce66 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2280      	movs	r2, #128	@ 0x80
 800ce54:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800ce58:	2100      	movs	r1, #0
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7fe fa9f 	bl	800b39e <dir_sdi>
 800ce60:	4603      	mov	r3, r0
 800ce62:	75fb      	strb	r3, [r7, #23]
 800ce64:	e07d      	b.n	800cf62 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce66:	463b      	mov	r3, r7
 800ce68:	4619      	mov	r1, r3
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7ff fe18 	bl	800caa0 <create_name>
 800ce70:	4603      	mov	r3, r0
 800ce72:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ce74:	7dfb      	ldrb	r3, [r7, #23]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d16e      	bne.n	800cf58 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f7ff f9f5 	bl	800c26a <dir_find>
 800ce80:	4603      	mov	r3, r0
 800ce82:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800ce8a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ce8c:	7dfb      	ldrb	r3, [r7, #23]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00a      	beq.n	800cea8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ce92:	7dfb      	ldrb	r3, [r7, #23]
 800ce94:	2b04      	cmp	r3, #4
 800ce96:	d161      	bne.n	800cf5c <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ce98:	7afb      	ldrb	r3, [r7, #11]
 800ce9a:	f003 0304 	and.w	r3, r3, #4
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d15c      	bne.n	800cf5c <follow_path+0x14c>
 800cea2:	2305      	movs	r3, #5
 800cea4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cea6:	e059      	b.n	800cf5c <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cea8:	7afb      	ldrb	r3, [r7, #11]
 800ceaa:	f003 0304 	and.w	r3, r3, #4
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d156      	bne.n	800cf60 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	799b      	ldrb	r3, [r3, #6]
 800ceb6:	f003 0310 	and.w	r3, r3, #16
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d102      	bne.n	800cec4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800cebe:	2305      	movs	r3, #5
 800cec0:	75fb      	strb	r3, [r7, #23]
 800cec2:	e04e      	b.n	800cf62 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	2b04      	cmp	r3, #4
 800ceca:	d130      	bne.n	800cf2e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	689a      	ldr	r2, [r3, #8]
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ceda:	4613      	mov	r3, r2
 800cedc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	79d2      	ldrb	r2, [r2, #7]
 800cee4:	431a      	orrs	r2, r3
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	3334      	adds	r3, #52	@ 0x34
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fc ff97 	bl	8009e2c <ld_dword>
 800cefe:	4602      	mov	r2, r0
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	695b      	ldr	r3, [r3, #20]
 800cf08:	3321      	adds	r3, #33	@ 0x21
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	f003 0302 	and.w	r3, r3, #2
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	695b      	ldr	r3, [r3, #20]
 800cf1a:	3338      	adds	r3, #56	@ 0x38
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fc ffa8 	bl	8009e72 <ld_qword>
 800cf22:	4602      	mov	r2, r0
 800cf24:	460b      	mov	r3, r1
 800cf26:	6939      	ldr	r1, [r7, #16]
 800cf28:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800cf2c:	e79b      	b.n	800ce66 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	8992      	ldrh	r2, [r2, #12]
 800cf3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf40:	fb00 f202 	mul.w	r2, r0, r2
 800cf44:	1a9b      	subs	r3, r3, r2
 800cf46:	440b      	add	r3, r1
 800cf48:	4619      	mov	r1, r3
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	f7fe fbfd 	bl	800b74a <ld_clust>
 800cf50:	4602      	mov	r2, r0
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf56:	e786      	b.n	800ce66 <follow_path+0x56>
			if (res != FR_OK) break;
 800cf58:	bf00      	nop
 800cf5a:	e002      	b.n	800cf62 <follow_path+0x152>
				break;
 800cf5c:	bf00      	nop
 800cf5e:	e000      	b.n	800cf62 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cf60:	bf00      	nop
			}
		}
	}

	return res;
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3718      	adds	r7, #24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cf74:	f04f 33ff 	mov.w	r3, #4294967295
 800cf78:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d031      	beq.n	800cfe6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	617b      	str	r3, [r7, #20]
 800cf88:	e002      	b.n	800cf90 <get_ldnumber+0x24>
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	617b      	str	r3, [r7, #20]
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2b1f      	cmp	r3, #31
 800cf96:	d903      	bls.n	800cfa0 <get_ldnumber+0x34>
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	2b3a      	cmp	r3, #58	@ 0x3a
 800cf9e:	d1f4      	bne.n	800cf8a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b3a      	cmp	r3, #58	@ 0x3a
 800cfa6:	d11c      	bne.n	800cfe2 <get_ldnumber+0x76>
			tp = *path;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	1c5a      	adds	r2, r3, #1
 800cfb2:	60fa      	str	r2, [r7, #12]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	3b30      	subs	r3, #48	@ 0x30
 800cfb8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b09      	cmp	r3, #9
 800cfbe:	d80e      	bhi.n	800cfde <get_ldnumber+0x72>
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d10a      	bne.n	800cfde <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d107      	bne.n	800cfde <get_ldnumber+0x72>
					vol = (int)i;
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	617b      	str	r3, [r7, #20]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	697a      	ldr	r2, [r7, #20]
 800cfdc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	e002      	b.n	800cfe8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cfe6:	693b      	ldr	r3, [r7, #16]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	371c      	adds	r7, #28
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	70da      	strb	r2, [r3, #3]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f04f 32ff 	mov.w	r2, #4294967295
 800d00a:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7fd fb38 	bl	800a684 <move_window>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <check_fs+0x2a>
 800d01a:	2304      	movs	r3, #4
 800d01c:	e044      	b.n	800d0a8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	3340      	adds	r3, #64	@ 0x40
 800d022:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d026:	4618      	mov	r0, r3
 800d028:	f7fc fee8 	bl	8009dfc <ld_word>
 800d02c:	4603      	mov	r3, r0
 800d02e:	461a      	mov	r2, r3
 800d030:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d034:	429a      	cmp	r2, r3
 800d036:	d001      	beq.n	800d03c <check_fs+0x48>
 800d038:	2303      	movs	r3, #3
 800d03a:	e035      	b.n	800d0a8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d042:	2be9      	cmp	r3, #233	@ 0xe9
 800d044:	d009      	beq.n	800d05a <check_fs+0x66>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d04c:	2beb      	cmp	r3, #235	@ 0xeb
 800d04e:	d11e      	bne.n	800d08e <check_fs+0x9a>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d056:	2b90      	cmp	r3, #144	@ 0x90
 800d058:	d119      	bne.n	800d08e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3340      	adds	r3, #64	@ 0x40
 800d05e:	3336      	adds	r3, #54	@ 0x36
 800d060:	4618      	mov	r0, r3
 800d062:	f7fc fee3 	bl	8009e2c <ld_dword>
 800d066:	4603      	mov	r3, r0
 800d068:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d06c:	4a10      	ldr	r2, [pc, #64]	@ (800d0b0 <check_fs+0xbc>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d101      	bne.n	800d076 <check_fs+0x82>
 800d072:	2300      	movs	r3, #0
 800d074:	e018      	b.n	800d0a8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	3340      	adds	r3, #64	@ 0x40
 800d07a:	3352      	adds	r3, #82	@ 0x52
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fc fed5 	bl	8009e2c <ld_dword>
 800d082:	4603      	mov	r3, r0
 800d084:	4a0b      	ldr	r2, [pc, #44]	@ (800d0b4 <check_fs+0xc0>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d101      	bne.n	800d08e <check_fs+0x9a>
 800d08a:	2300      	movs	r3, #0
 800d08c:	e00c      	b.n	800d0a8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	3340      	adds	r3, #64	@ 0x40
 800d092:	220b      	movs	r2, #11
 800d094:	4908      	ldr	r1, [pc, #32]	@ (800d0b8 <check_fs+0xc4>)
 800d096:	4618      	mov	r0, r3
 800d098:	f7fd f8d1 	bl	800a23e <mem_cmp>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <check_fs+0xb2>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e000      	b.n	800d0a8 <check_fs+0xb4>
#endif
	return 2;
 800d0a6:	2302      	movs	r3, #2
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}
 800d0b0:	00544146 	.word	0x00544146
 800d0b4:	33544146 	.word	0x33544146
 800d0b8:	08015118 	.word	0x08015118

0800d0bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d0bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0c0:	b09c      	sub	sp, #112	@ 0x70
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	61f8      	str	r0, [r7, #28]
 800d0c6:	61b9      	str	r1, [r7, #24]
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d0d2:	69f8      	ldr	r0, [r7, #28]
 800d0d4:	f7ff ff4a 	bl	800cf6c <get_ldnumber>
 800d0d8:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	da01      	bge.n	800d0e4 <find_volume+0x28>
 800d0e0:	230b      	movs	r3, #11
 800d0e2:	e378      	b.n	800d7d6 <find_volume+0x71a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d0e4:	4aa2      	ldr	r2, [pc, #648]	@ (800d370 <find_volume+0x2b4>)
 800d0e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0ec:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d0ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <find_volume+0x3c>
 800d0f4:	230c      	movs	r3, #12
 800d0f6:	e36e      	b.n	800d7d6 <find_volume+0x71a>

	ENTER_FF(fs);						/* Lock the volume */
 800d0f8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d0fa:	f7fd f8e2 	bl	800a2c2 <lock_fs>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d101      	bne.n	800d108 <find_volume+0x4c>
 800d104:	230f      	movs	r3, #15
 800d106:	e366      	b.n	800d7d6 <find_volume+0x71a>
	*rfs = fs;							/* Return pointer to the file system object */
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d10c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
 800d110:	f023 0301 	bic.w	r3, r3, #1
 800d114:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d01a      	beq.n	800d154 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800d11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d120:	785b      	ldrb	r3, [r3, #1]
 800d122:	4618      	mov	r0, r3
 800d124:	f7fc fdca 	bl	8009cbc <disk_status>
 800d128:	4603      	mov	r3, r0
 800d12a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d12e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d132:	f003 0301 	and.w	r3, r3, #1
 800d136:	2b00      	cmp	r3, #0
 800d138:	d10c      	bne.n	800d154 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d13a:	7dfb      	ldrb	r3, [r7, #23]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d007      	beq.n	800d150 <find_volume+0x94>
 800d140:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d144:	f003 0304 	and.w	r3, r3, #4
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d001      	beq.n	800d150 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800d14c:	230a      	movs	r3, #10
 800d14e:	e342      	b.n	800d7d6 <find_volume+0x71a>
			}
			return FR_OK;				/* The file system object is valid */
 800d150:	2300      	movs	r3, #0
 800d152:	e340      	b.n	800d7d6 <find_volume+0x71a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d156:	2200      	movs	r2, #0
 800d158:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d15c:	b2da      	uxtb	r2, r3
 800d15e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d160:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d164:	785b      	ldrb	r3, [r3, #1]
 800d166:	4618      	mov	r0, r3
 800d168:	f7fc fdc2 	bl	8009cf0 <disk_initialize>
 800d16c:	4603      	mov	r3, r0
 800d16e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d172:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d17e:	2303      	movs	r3, #3
 800d180:	e329      	b.n	800d7d6 <find_volume+0x71a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d007      	beq.n	800d198 <find_volume+0xdc>
 800d188:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800d18c:	f003 0304 	and.w	r3, r3, #4
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800d194:	230a      	movs	r3, #10
 800d196:	e31e      	b.n	800d7d6 <find_volume+0x71a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d19a:	7858      	ldrb	r0, [r3, #1]
 800d19c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d19e:	330c      	adds	r3, #12
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	2102      	movs	r1, #2
 800d1a4:	f7fc fe0c 	bl	8009dc0 <disk_ioctl>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d001      	beq.n	800d1b2 <find_volume+0xf6>
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e311      	b.n	800d7d6 <find_volume+0x71a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d1b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1b4:	899b      	ldrh	r3, [r3, #12]
 800d1b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d1ba:	d80d      	bhi.n	800d1d8 <find_volume+0x11c>
 800d1bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1be:	899b      	ldrh	r3, [r3, #12]
 800d1c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1c4:	d308      	bcc.n	800d1d8 <find_volume+0x11c>
 800d1c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1c8:	899b      	ldrh	r3, [r3, #12]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1ce:	899b      	ldrh	r3, [r3, #12]
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	4013      	ands	r3, r2
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <find_volume+0x120>
 800d1d8:	2301      	movs	r3, #1
 800d1da:	e2fc      	b.n	800d7d6 <find_volume+0x71a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d1e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d1e2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d1e4:	f7ff ff06 	bl	800cff4 <check_fs>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d1ee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d14d      	bne.n	800d292 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1fa:	e020      	b.n	800d23e <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d1fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1fe:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800d202:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d204:	011b      	lsls	r3, r3, #4
 800d206:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d20a:	4413      	add	r3, r2
 800d20c:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d20e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d210:	3304      	adds	r3, #4
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d006      	beq.n	800d226 <find_volume+0x16a>
 800d218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d21a:	3308      	adds	r3, #8
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fc fe05 	bl	8009e2c <ld_dword>
 800d222:	4602      	mov	r2, r0
 800d224:	e000      	b.n	800d228 <find_volume+0x16c>
 800d226:	2200      	movs	r2, #0
 800d228:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	3360      	adds	r3, #96	@ 0x60
 800d22e:	f107 0110 	add.w	r1, r7, #16
 800d232:	440b      	add	r3, r1
 800d234:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d23a:	3301      	adds	r3, #1
 800d23c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d23e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d240:	2b03      	cmp	r3, #3
 800d242:	d9db      	bls.n	800d1fc <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d244:	2300      	movs	r3, #0
 800d246:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800d248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <find_volume+0x198>
 800d24e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d250:	3b01      	subs	r3, #1
 800d252:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d254:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	3360      	adds	r3, #96	@ 0x60
 800d25a:	f107 0210 	add.w	r2, r7, #16
 800d25e:	4413      	add	r3, r2
 800d260:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d264:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d266:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d005      	beq.n	800d278 <find_volume+0x1bc>
 800d26c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d26e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d270:	f7ff fec0 	bl	800cff4 <check_fs>
 800d274:	4603      	mov	r3, r0
 800d276:	e000      	b.n	800d27a <find_volume+0x1be>
 800d278:	2303      	movs	r3, #3
 800d27a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d27e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d282:	2b01      	cmp	r3, #1
 800d284:	d905      	bls.n	800d292 <find_volume+0x1d6>
 800d286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d288:	3301      	adds	r3, #1
 800d28a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d28c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d28e:	2b03      	cmp	r3, #3
 800d290:	d9e0      	bls.n	800d254 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d292:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d296:	2b04      	cmp	r3, #4
 800d298:	d101      	bne.n	800d29e <find_volume+0x1e2>
 800d29a:	2301      	movs	r3, #1
 800d29c:	e29b      	b.n	800d7d6 <find_volume+0x71a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d29e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d901      	bls.n	800d2aa <find_volume+0x1ee>
 800d2a6:	230d      	movs	r3, #13
 800d2a8:	e295      	b.n	800d7d6 <find_volume+0x71a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d2aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d2ae:	2b01      	cmp	r3, #1
 800d2b0:	f040 8100 	bne.w	800d4b4 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d2b4:	230b      	movs	r3, #11
 800d2b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2b8:	e002      	b.n	800d2c0 <find_volume+0x204>
 800d2ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2bc:	3301      	adds	r3, #1
 800d2be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2c2:	2b3f      	cmp	r3, #63	@ 0x3f
 800d2c4:	d806      	bhi.n	800d2d4 <find_volume+0x218>
 800d2c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d2c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2ca:	4413      	add	r3, r2
 800d2cc:	3340      	adds	r3, #64	@ 0x40
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0f2      	beq.n	800d2ba <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d2d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2d6:	2b3f      	cmp	r3, #63	@ 0x3f
 800d2d8:	d801      	bhi.n	800d2de <find_volume+0x222>
 800d2da:	230d      	movs	r3, #13
 800d2dc:	e27b      	b.n	800d7d6 <find_volume+0x71a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d2de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2e0:	3340      	adds	r3, #64	@ 0x40
 800d2e2:	3368      	adds	r3, #104	@ 0x68
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7fc fd89 	bl	8009dfc <ld_word>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2f0:	d001      	beq.n	800d2f6 <find_volume+0x23a>
 800d2f2:	230d      	movs	r3, #13
 800d2f4:	e26f      	b.n	800d7d6 <find_volume+0x71a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d2f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	2301      	movs	r3, #1
 800d300:	4093      	lsls	r3, r2
 800d302:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d304:	8992      	ldrh	r2, [r2, #12]
 800d306:	4293      	cmp	r3, r2
 800d308:	d001      	beq.n	800d30e <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 800d30a:	230d      	movs	r3, #13
 800d30c:	e263      	b.n	800d7d6 <find_volume+0x71a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d30e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d310:	3340      	adds	r3, #64	@ 0x40
 800d312:	3348      	adds	r3, #72	@ 0x48
 800d314:	4618      	mov	r0, r3
 800d316:	f7fc fdac 	bl	8009e72 <ld_qword>
 800d31a:	4602      	mov	r2, r0
 800d31c:	460b      	mov	r3, r1
 800d31e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d320:	2000      	movs	r0, #0
 800d322:	60b9      	str	r1, [r7, #8]
 800d324:	60f8      	str	r0, [r7, #12]
 800d326:	68b9      	ldr	r1, [r7, #8]
 800d328:	1851      	adds	r1, r2, r1
 800d32a:	6039      	str	r1, [r7, #0]
 800d32c:	68f9      	ldr	r1, [r7, #12]
 800d32e:	eb43 0101 	adc.w	r1, r3, r1
 800d332:	6079      	str	r1, [r7, #4]
 800d334:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d338:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d33c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d340:	2b01      	cmp	r3, #1
 800d342:	d301      	bcc.n	800d348 <find_volume+0x28c>
 800d344:	230d      	movs	r3, #13
 800d346:	e246      	b.n	800d7d6 <find_volume+0x71a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d34a:	3340      	adds	r3, #64	@ 0x40
 800d34c:	3354      	adds	r3, #84	@ 0x54
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fc fd6c 	bl	8009e2c <ld_dword>
 800d354:	4602      	mov	r2, r0
 800d356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d358:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d35a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d35c:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 800d360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d362:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d366:	789b      	ldrb	r3, [r3, #2]
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d003      	beq.n	800d374 <find_volume+0x2b8>
 800d36c:	230d      	movs	r3, #13
 800d36e:	e232      	b.n	800d7d6 <find_volume+0x71a>
 800d370:	20002f48 	.word	0x20002f48

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d376:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d37a:	461a      	mov	r2, r3
 800d37c:	2301      	movs	r3, #1
 800d37e:	4093      	lsls	r3, r2
 800d380:	b29a      	uxth	r2, r3
 800d382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d384:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d388:	895b      	ldrh	r3, [r3, #10]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <find_volume+0x2d6>
 800d38e:	230d      	movs	r3, #13
 800d390:	e221      	b.n	800d7d6 <find_volume+0x71a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d392:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d394:	3340      	adds	r3, #64	@ 0x40
 800d396:	335c      	adds	r3, #92	@ 0x5c
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fc fd47 	bl	8009e2c <ld_dword>
 800d39e:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d3a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3a2:	4a9a      	ldr	r2, [pc, #616]	@ (800d60c <find_volume+0x550>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d901      	bls.n	800d3ac <find_volume+0x2f0>
 800d3a8:	230d      	movs	r3, #13
 800d3aa:	e214      	b.n	800d7d6 <find_volume+0x71a>
		fs->n_fatent = nclst + 2;
 800d3ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3ae:	1c9a      	adds	r2, r3, #2
 800d3b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3b2:	625a      	str	r2, [r3, #36]	@ 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d3b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d3b8:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3bc:	3340      	adds	r3, #64	@ 0x40
 800d3be:	3358      	adds	r3, #88	@ 0x58
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fc fd33 	bl	8009e2c <ld_dword>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3ca:	441a      	add	r2, r3
 800d3cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ce:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d3d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3d2:	3340      	adds	r3, #64	@ 0x40
 800d3d4:	3350      	adds	r3, #80	@ 0x50
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fc fd28 	bl	8009e2c <ld_dword>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3e0:	441a      	add	r2, r3
 800d3e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e4:	631a      	str	r2, [r3, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d3e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	469a      	mov	sl, r3
 800d3ee:	4693      	mov	fp, r2
 800d3f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3f2:	895b      	ldrh	r3, [r3, #10]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3f8:	fb02 f303 	mul.w	r3, r2, r3
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	4698      	mov	r8, r3
 800d400:	4691      	mov	r9, r2
 800d402:	eb1a 0408 	adds.w	r4, sl, r8
 800d406:	eb4b 0509 	adc.w	r5, fp, r9
 800d40a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d40e:	42a2      	cmp	r2, r4
 800d410:	41ab      	sbcs	r3, r5
 800d412:	d201      	bcs.n	800d418 <find_volume+0x35c>
 800d414:	230d      	movs	r3, #13
 800d416:	e1de      	b.n	800d7d6 <find_volume+0x71a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d41a:	3340      	adds	r3, #64	@ 0x40
 800d41c:	3360      	adds	r3, #96	@ 0x60
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fc fd04 	bl	8009e2c <ld_dword>
 800d424:	4602      	mov	r2, r0
 800d426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d428:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d42a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42e:	4619      	mov	r1, r3
 800d430:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d432:	f7fd f9c5 	bl	800a7c0 <clust2sect>
 800d436:	4603      	mov	r3, r0
 800d438:	4619      	mov	r1, r3
 800d43a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d43c:	f7fd f922 	bl	800a684 <move_window>
 800d440:	4603      	mov	r3, r0
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <find_volume+0x38e>
 800d446:	2301      	movs	r3, #1
 800d448:	e1c5      	b.n	800d7d6 <find_volume+0x71a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d44a:	2300      	movs	r3, #0
 800d44c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d44e:	e015      	b.n	800d47c <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d450:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d452:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d454:	4413      	add	r3, r2
 800d456:	3340      	adds	r3, #64	@ 0x40
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	2b81      	cmp	r3, #129	@ 0x81
 800d45c:	d10b      	bne.n	800d476 <find_volume+0x3ba>
 800d45e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d460:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800d464:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d466:	3314      	adds	r3, #20
 800d468:	4413      	add	r3, r2
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fc fcde 	bl	8009e2c <ld_dword>
 800d470:	4603      	mov	r3, r0
 800d472:	2b02      	cmp	r3, #2
 800d474:	d009      	beq.n	800d48a <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d478:	3320      	adds	r3, #32
 800d47a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d47c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d47e:	899b      	ldrh	r3, [r3, #12]
 800d480:	461a      	mov	r2, r3
 800d482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d484:	4293      	cmp	r3, r2
 800d486:	d3e3      	bcc.n	800d450 <find_volume+0x394>
 800d488:	e000      	b.n	800d48c <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d48a:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d48c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d48e:	899b      	ldrh	r3, [r3, #12]
 800d490:	461a      	mov	r2, r3
 800d492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d494:	4293      	cmp	r3, r2
 800d496:	d101      	bne.n	800d49c <find_volume+0x3e0>
 800d498:	230d      	movs	r3, #13
 800d49a:	e19c      	b.n	800d7d6 <find_volume+0x71a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d49c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	621a      	str	r2, [r3, #32]
 800d4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a6:	6a1a      	ldr	r2, [r3, #32]
 800d4a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4aa:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d4ac:	2304      	movs	r3, #4
 800d4ae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800d4b2:	e17e      	b.n	800d7b2 <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d4b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4b6:	3340      	adds	r3, #64	@ 0x40
 800d4b8:	330b      	adds	r3, #11
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fc fc9e 	bl	8009dfc <ld_word>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4c6:	899b      	ldrh	r3, [r3, #12]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d001      	beq.n	800d4d0 <find_volume+0x414>
 800d4cc:	230d      	movs	r3, #13
 800d4ce:	e182      	b.n	800d7d6 <find_volume+0x71a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4d2:	3340      	adds	r3, #64	@ 0x40
 800d4d4:	3316      	adds	r3, #22
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fc fc90 	bl	8009dfc <ld_word>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d4e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d106      	bne.n	800d4f4 <find_volume+0x438>
 800d4e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e8:	3340      	adds	r3, #64	@ 0x40
 800d4ea:	3324      	adds	r3, #36	@ 0x24
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fc fc9d 	bl	8009e2c <ld_dword>
 800d4f2:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800d4f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d4f8:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d4fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4fc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800d500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d502:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d506:	789b      	ldrb	r3, [r3, #2]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d005      	beq.n	800d518 <find_volume+0x45c>
 800d50c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d50e:	789b      	ldrb	r3, [r3, #2]
 800d510:	2b02      	cmp	r3, #2
 800d512:	d001      	beq.n	800d518 <find_volume+0x45c>
 800d514:	230d      	movs	r3, #13
 800d516:	e15e      	b.n	800d7d6 <find_volume+0x71a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d51a:	789b      	ldrb	r3, [r3, #2]
 800d51c:	461a      	mov	r2, r3
 800d51e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d520:	fb02 f303 	mul.w	r3, r2, r3
 800d524:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d528:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800d52c:	461a      	mov	r2, r3
 800d52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d530:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d534:	895b      	ldrh	r3, [r3, #10]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d008      	beq.n	800d54c <find_volume+0x490>
 800d53a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d53c:	895b      	ldrh	r3, [r3, #10]
 800d53e:	461a      	mov	r2, r3
 800d540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d542:	895b      	ldrh	r3, [r3, #10]
 800d544:	3b01      	subs	r3, #1
 800d546:	4013      	ands	r3, r2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d001      	beq.n	800d550 <find_volume+0x494>
 800d54c:	230d      	movs	r3, #13
 800d54e:	e142      	b.n	800d7d6 <find_volume+0x71a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d552:	3340      	adds	r3, #64	@ 0x40
 800d554:	3311      	adds	r3, #17
 800d556:	4618      	mov	r0, r3
 800d558:	f7fc fc50 	bl	8009dfc <ld_word>
 800d55c:	4603      	mov	r3, r0
 800d55e:	461a      	mov	r2, r3
 800d560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d562:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d566:	891b      	ldrh	r3, [r3, #8]
 800d568:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d56a:	8992      	ldrh	r2, [r2, #12]
 800d56c:	0952      	lsrs	r2, r2, #5
 800d56e:	b292      	uxth	r2, r2
 800d570:	fbb3 f1f2 	udiv	r1, r3, r2
 800d574:	fb01 f202 	mul.w	r2, r1, r2
 800d578:	1a9b      	subs	r3, r3, r2
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <find_volume+0x4c8>
 800d580:	230d      	movs	r3, #13
 800d582:	e128      	b.n	800d7d6 <find_volume+0x71a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d586:	3340      	adds	r3, #64	@ 0x40
 800d588:	3313      	adds	r3, #19
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fc fc36 	bl	8009dfc <ld_word>
 800d590:	4603      	mov	r3, r0
 800d592:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d596:	2b00      	cmp	r3, #0
 800d598:	d106      	bne.n	800d5a8 <find_volume+0x4ec>
 800d59a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d59c:	3340      	adds	r3, #64	@ 0x40
 800d59e:	3320      	adds	r3, #32
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fc fc43 	bl	8009e2c <ld_dword>
 800d5a6:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d5a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5aa:	3340      	adds	r3, #64	@ 0x40
 800d5ac:	330e      	adds	r3, #14
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fc fc24 	bl	8009dfc <ld_word>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d5ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <find_volume+0x50a>
 800d5c2:	230d      	movs	r3, #13
 800d5c4:	e107      	b.n	800d7d6 <find_volume+0x71a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d5c6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d5ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5cc:	4413      	add	r3, r2
 800d5ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5d0:	8911      	ldrh	r1, [r2, #8]
 800d5d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5d4:	8992      	ldrh	r2, [r2, #12]
 800d5d6:	0952      	lsrs	r2, r2, #5
 800d5d8:	b292      	uxth	r2, r2
 800d5da:	fbb1 f2f2 	udiv	r2, r1, r2
 800d5de:	b292      	uxth	r2, r2
 800d5e0:	4413      	add	r3, r2
 800d5e2:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d5e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d5e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d201      	bcs.n	800d5f0 <find_volume+0x534>
 800d5ec:	230d      	movs	r3, #13
 800d5ee:	e0f2      	b.n	800d7d6 <find_volume+0x71a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d5f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d5f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5f4:	1ad3      	subs	r3, r2, r3
 800d5f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5f8:	8952      	ldrh	r2, [r2, #10]
 800d5fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d602:	2b00      	cmp	r3, #0
 800d604:	d104      	bne.n	800d610 <find_volume+0x554>
 800d606:	230d      	movs	r3, #13
 800d608:	e0e5      	b.n	800d7d6 <find_volume+0x71a>
 800d60a:	bf00      	nop
 800d60c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800d610:	2303      	movs	r3, #3
 800d612:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d618:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d802      	bhi.n	800d626 <find_volume+0x56a>
 800d620:	2302      	movs	r3, #2
 800d622:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d628:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d802      	bhi.n	800d636 <find_volume+0x57a>
 800d630:	2301      	movs	r3, #1
 800d632:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d638:	1c9a      	adds	r2, r3, #2
 800d63a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d63c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800d63e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d640:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d642:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d644:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d64a:	441a      	add	r2, r3
 800d64c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d64e:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800d650:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d654:	441a      	add	r2, r3
 800d656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d658:	639a      	str	r2, [r3, #56]	@ 0x38
		if (fmt == FS_FAT32) {
 800d65a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d65e:	2b03      	cmp	r3, #3
 800d660:	d11e      	bne.n	800d6a0 <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d664:	3340      	adds	r3, #64	@ 0x40
 800d666:	332a      	adds	r3, #42	@ 0x2a
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fc fbc7 	bl	8009dfc <ld_word>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <find_volume+0x5bc>
 800d674:	230d      	movs	r3, #13
 800d676:	e0ae      	b.n	800d7d6 <find_volume+0x71a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d67a:	891b      	ldrh	r3, [r3, #8]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d001      	beq.n	800d684 <find_volume+0x5c8>
 800d680:	230d      	movs	r3, #13
 800d682:	e0a8      	b.n	800d7d6 <find_volume+0x71a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d684:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d686:	3340      	adds	r3, #64	@ 0x40
 800d688:	332c      	adds	r3, #44	@ 0x2c
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fc fbce 	bl	8009e2c <ld_dword>
 800d690:	4602      	mov	r2, r0
 800d692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d694:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d69e:	e01f      	b.n	800d6e0 <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d6a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6a2:	891b      	ldrh	r3, [r3, #8]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d101      	bne.n	800d6ac <find_volume+0x5f0>
 800d6a8:	230d      	movs	r3, #13
 800d6aa:	e094      	b.n	800d7d6 <find_volume+0x71a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d6ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d6b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d6b2:	441a      	add	r2, r3
 800d6b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6b6:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d6b8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d103      	bne.n	800d6c8 <find_volume+0x60c>
 800d6c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6c4:	005b      	lsls	r3, r3, #1
 800d6c6:	e00a      	b.n	800d6de <find_volume+0x622>
 800d6c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	005b      	lsls	r3, r3, #1
 800d6d0:	4413      	add	r3, r2
 800d6d2:	085a      	lsrs	r2, r3, #1
 800d6d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6d8:	f003 0301 	and.w	r3, r3, #1
 800d6dc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d6de:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d6e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d6e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6e6:	899b      	ldrh	r3, [r3, #12]
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d6ec:	440b      	add	r3, r1
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d6f2:	8989      	ldrh	r1, [r1, #12]
 800d6f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d201      	bcs.n	800d700 <find_volume+0x644>
 800d6fc:	230d      	movs	r3, #13
 800d6fe:	e06a      	b.n	800d7d6 <find_volume+0x71a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d702:	f04f 32ff 	mov.w	r2, #4294967295
 800d706:	621a      	str	r2, [r3, #32]
 800d708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d70a:	6a1a      	ldr	r2, [r3, #32]
 800d70c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d70e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800d710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d712:	2280      	movs	r2, #128	@ 0x80
 800d714:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d716:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d149      	bne.n	800d7b2 <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d71e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d720:	3340      	adds	r3, #64	@ 0x40
 800d722:	3330      	adds	r3, #48	@ 0x30
 800d724:	4618      	mov	r0, r3
 800d726:	f7fc fb69 	bl	8009dfc <ld_word>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d140      	bne.n	800d7b2 <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d730:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d732:	3301      	adds	r3, #1
 800d734:	4619      	mov	r1, r3
 800d736:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d738:	f7fc ffa4 	bl	800a684 <move_window>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d137      	bne.n	800d7b2 <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 800d742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d744:	2200      	movs	r2, #0
 800d746:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d748:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d74a:	3340      	adds	r3, #64	@ 0x40
 800d74c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d750:	4618      	mov	r0, r3
 800d752:	f7fc fb53 	bl	8009dfc <ld_word>
 800d756:	4603      	mov	r3, r0
 800d758:	461a      	mov	r2, r3
 800d75a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d75e:	429a      	cmp	r2, r3
 800d760:	d127      	bne.n	800d7b2 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d762:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d764:	3340      	adds	r3, #64	@ 0x40
 800d766:	4618      	mov	r0, r3
 800d768:	f7fc fb60 	bl	8009e2c <ld_dword>
 800d76c:	4603      	mov	r3, r0
 800d76e:	4a1c      	ldr	r2, [pc, #112]	@ (800d7e0 <find_volume+0x724>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d11e      	bne.n	800d7b2 <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d776:	3340      	adds	r3, #64	@ 0x40
 800d778:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fc fb55 	bl	8009e2c <ld_dword>
 800d782:	4603      	mov	r3, r0
 800d784:	4a17      	ldr	r2, [pc, #92]	@ (800d7e4 <find_volume+0x728>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d113      	bne.n	800d7b2 <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d78a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d78c:	3340      	adds	r3, #64	@ 0x40
 800d78e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d792:	4618      	mov	r0, r3
 800d794:	f7fc fb4a 	bl	8009e2c <ld_dword>
 800d798:	4602      	mov	r2, r0
 800d79a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d79c:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d79e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7a0:	3340      	adds	r3, #64	@ 0x40
 800d7a2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fc fb40 	bl	8009e2c <ld_dword>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7b0:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d7b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7b4:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800d7b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d7ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e8 <find_volume+0x72c>)
 800d7bc:	881b      	ldrh	r3, [r3, #0]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	4b09      	ldr	r3, [pc, #36]	@ (800d7e8 <find_volume+0x72c>)
 800d7c4:	801a      	strh	r2, [r3, #0]
 800d7c6:	4b08      	ldr	r3, [pc, #32]	@ (800d7e8 <find_volume+0x72c>)
 800d7c8:	881a      	ldrh	r2, [r3, #0]
 800d7ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d7ce:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d7d0:	f7fc fef0 	bl	800a5b4 <clear_lock>
#endif
	return FR_OK;
 800d7d4:	2300      	movs	r3, #0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3770      	adds	r7, #112	@ 0x70
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d7e0:	41615252 	.word	0x41615252
 800d7e4:	61417272 	.word	0x61417272
 800d7e8:	20002f4c 	.word	0x20002f4c

0800d7ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d7f6:	2309      	movs	r3, #9
 800d7f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d02e      	beq.n	800d85e <validate+0x72>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d02a      	beq.n	800d85e <validate+0x72>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d025      	beq.n	800d85e <validate+0x72>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	889a      	ldrh	r2, [r3, #4]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	88db      	ldrh	r3, [r3, #6]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d11e      	bne.n	800d85e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f7fc fd4c 	bl	800a2c2 <lock_fs>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d014      	beq.n	800d85a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	785b      	ldrb	r3, [r3, #1]
 800d836:	4618      	mov	r0, r3
 800d838:	f7fc fa40 	bl	8009cbc <disk_status>
 800d83c:	4603      	mov	r3, r0
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	2b00      	cmp	r3, #0
 800d844:	d102      	bne.n	800d84c <validate+0x60>
				res = FR_OK;
 800d846:	2300      	movs	r3, #0
 800d848:	73fb      	strb	r3, [r7, #15]
 800d84a:	e008      	b.n	800d85e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2100      	movs	r1, #0
 800d852:	4618      	mov	r0, r3
 800d854:	f7fc fd4b 	bl	800a2ee <unlock_fs>
 800d858:	e001      	b.n	800d85e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d85a:	230f      	movs	r3, #15
 800d85c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d85e:	7bfb      	ldrb	r3, [r7, #15]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d102      	bne.n	800d86a <validate+0x7e>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	e000      	b.n	800d86c <validate+0x80>
 800d86a:	2300      	movs	r3, #0
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	6013      	str	r3, [r2, #0]
	return res;
 800d870:	7bfb      	ldrb	r3, [r7, #15]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
	...

0800d87c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b088      	sub	sp, #32
 800d880:	af00      	add	r7, sp, #0
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	4613      	mov	r3, r2
 800d888:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d88e:	f107 0310 	add.w	r3, r7, #16
 800d892:	4618      	mov	r0, r3
 800d894:	f7ff fb6a 	bl	800cf6c <get_ldnumber>
 800d898:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	da01      	bge.n	800d8a4 <f_mount+0x28>
 800d8a0:	230b      	movs	r3, #11
 800d8a2:	e048      	b.n	800d936 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d8a4:	4a26      	ldr	r2, [pc, #152]	@ (800d940 <f_mount+0xc4>)
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00f      	beq.n	800d8d4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d8b4:	69b8      	ldr	r0, [r7, #24]
 800d8b6:	f7fc fe7d 	bl	800a5b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f001 ff98 	bl	800f7f4 <ff_del_syncobj>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <f_mount+0x52>
 800d8ca:	2302      	movs	r3, #2
 800d8cc:	e033      	b.n	800d936 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00f      	beq.n	800d8fa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	3318      	adds	r3, #24
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f001 ff64 	bl	800f7b8 <ff_cre_syncobj>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d101      	bne.n	800d8fa <f_mount+0x7e>
 800d8f6:	2302      	movs	r3, #2
 800d8f8:	e01d      	b.n	800d936 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	4910      	ldr	r1, [pc, #64]	@ (800d940 <f_mount+0xc4>)
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d002      	beq.n	800d910 <f_mount+0x94>
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d001      	beq.n	800d914 <f_mount+0x98>
 800d910:	2300      	movs	r3, #0
 800d912:	e010      	b.n	800d936 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d914:	f107 010c 	add.w	r1, r7, #12
 800d918:	f107 0308 	add.w	r3, r7, #8
 800d91c:	2200      	movs	r2, #0
 800d91e:	4618      	mov	r0, r3
 800d920:	f7ff fbcc 	bl	800d0bc <find_volume>
 800d924:	4603      	mov	r3, r0
 800d926:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	7dfa      	ldrb	r2, [r7, #23]
 800d92c:	4611      	mov	r1, r2
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fc fcdd 	bl	800a2ee <unlock_fs>
 800d934:	7dfb      	ldrb	r3, [r7, #23]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3720      	adds	r7, #32
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	20002f48 	.word	0x20002f48

0800d944 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d948:	b0aa      	sub	sp, #168	@ 0xa8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d94e:	6239      	str	r1, [r7, #32]
 800d950:	4613      	mov	r3, r2
 800d952:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d956:	2b00      	cmp	r3, #0
 800d958:	d101      	bne.n	800d95e <f_open+0x1a>
 800d95a:	2309      	movs	r3, #9
 800d95c:	e2e2      	b.n	800df24 <f_open+0x5e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d95e:	7ffb      	ldrb	r3, [r7, #31]
 800d960:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d964:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800d966:	7ffb      	ldrb	r3, [r7, #31]
 800d968:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d96c:	f107 0020 	add.w	r0, r7, #32
 800d970:	461a      	mov	r2, r3
 800d972:	f7ff fba3 	bl	800d0bc <find_volume>
 800d976:	4603      	mov	r3, r0
 800d978:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (res == FR_OK) {
 800d97c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 82bf 	bne.w	800df04 <f_open+0x5c0>
		dj.obj.fs = fs;
 800d986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d988:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
 800d98a:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d98e:	f001 ff5d 	bl	800f84c <ff_memalloc>
 800d992:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800d996:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d106      	bne.n	800d9ac <f_open+0x68>
 800d99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a0:	2111      	movs	r1, #17
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fc fca3 	bl	800a2ee <unlock_fs>
 800d9a8:	2311      	movs	r3, #17
 800d9aa:	e2bb      	b.n	800df24 <f_open+0x5e0>
 800d9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d9b2:	611a      	str	r2, [r3, #16]
 800d9b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d9ba:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800d9be:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d9c0:	6a3b      	ldr	r3, [r7, #32]
 800d9c2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	f7ff fa21 	bl	800ce10 <follow_path>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d9d4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d118      	bne.n	800da0e <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d9dc:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800d9e0:	b25b      	sxtb	r3, r3
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	da03      	bge.n	800d9ee <f_open+0xaa>
				res = FR_INVALID_NAME;
 800d9e6:	2306      	movs	r3, #6
 800d9e8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d9ec:	e00f      	b.n	800da0e <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d9ee:	7ffb      	ldrb	r3, [r7, #31]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	bf8c      	ite	hi
 800d9f4:	2301      	movhi	r3, #1
 800d9f6:	2300      	movls	r3, #0
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800da00:	4611      	mov	r1, r2
 800da02:	4618      	mov	r0, r3
 800da04:	f7fc fc8e 	bl	800a324 <chk_lock>
 800da08:	4603      	mov	r3, r0
 800da0a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800da0e:	7ffb      	ldrb	r3, [r7, #31]
 800da10:	f003 031c 	and.w	r3, r3, #28
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 8117 	beq.w	800dc48 <f_open+0x304>
			if (res != FR_OK) {					/* No file, create new */
 800da1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d017      	beq.n	800da52 <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800da22:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da26:	2b04      	cmp	r3, #4
 800da28:	d10e      	bne.n	800da48 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800da2a:	f7fc fcd7 	bl	800a3dc <enq_lock>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d006      	beq.n	800da42 <f_open+0xfe>
 800da34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fe fd41 	bl	800c4c0 <dir_register>
 800da3e:	4603      	mov	r3, r0
 800da40:	e000      	b.n	800da44 <f_open+0x100>
 800da42:	2312      	movs	r3, #18
 800da44:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800da48:	7ffb      	ldrb	r3, [r7, #31]
 800da4a:	f043 0308 	orr.w	r3, r3, #8
 800da4e:	77fb      	strb	r3, [r7, #31]
 800da50:	e011      	b.n	800da76 <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800da52:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800da56:	f003 0311 	and.w	r3, r3, #17
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d003      	beq.n	800da66 <f_open+0x122>
					res = FR_DENIED;
 800da5e:	2307      	movs	r3, #7
 800da60:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800da64:	e007      	b.n	800da76 <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800da66:	7ffb      	ldrb	r3, [r7, #31]
 800da68:	f003 0304 	and.w	r3, r3, #4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d002      	beq.n	800da76 <f_open+0x132>
 800da70:	2308      	movs	r3, #8
 800da72:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800da76:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	f040 8100 	bne.w	800dc80 <f_open+0x33c>
 800da80:	7ffb      	ldrb	r3, [r7, #31]
 800da82:	f003 0308 	and.w	r3, r3, #8
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 80fa 	beq.w	800dc80 <f_open+0x33c>
				dw = GET_FATTIME();
 800da8c:	f7fc f8b8 	bl	8009c00 <get_fattime>
 800da90:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800da94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	2b04      	cmp	r3, #4
 800da9a:	f040 8085 	bne.w	800dba8 <f_open+0x264>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800da9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800daa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa2:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800daa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	3334      	adds	r3, #52	@ 0x34
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fc f9be 	bl	8009e2c <ld_dword>
 800dab0:	4602      	mov	r2, r0
 800dab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab4:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dab8:	695b      	ldr	r3, [r3, #20]
 800daba:	3338      	adds	r3, #56	@ 0x38
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fc f9d8 	bl	8009e72 <ld_qword>
 800dac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac4:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daca:	695b      	ldr	r3, [r3, #20]
 800dacc:	3321      	adds	r3, #33	@ 0x21
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	f003 0302 	and.w	r3, r3, #2
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dad8:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800dada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dadc:	2200      	movs	r2, #0
 800dade:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800dae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae2:	695b      	ldr	r3, [r3, #20]
 800dae4:	3308      	adds	r3, #8
 800dae6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800daea:	4618      	mov	r0, r3
 800daec:	f7fc fab7 	bl	800a05e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800daf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf2:	695b      	ldr	r3, [r3, #20]
 800daf4:	f103 0214 	add.w	r2, r3, #20
 800daf8:	2300      	movs	r3, #0
 800dafa:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800dafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafe:	695b      	ldr	r3, [r3, #20]
 800db00:	330c      	adds	r3, #12
 800db02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800db06:	4618      	mov	r0, r3
 800db08:	f7fc faa9 	bl	800a05e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800db0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0e:	695b      	ldr	r3, [r3, #20]
 800db10:	f103 0215 	add.w	r2, r3, #21
 800db14:	2300      	movs	r3, #0
 800db16:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800db18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db1a:	695b      	ldr	r3, [r3, #20]
 800db1c:	1d1a      	adds	r2, r3, #4
 800db1e:	2320      	movs	r3, #32
 800db20:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800db22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	3334      	adds	r3, #52	@ 0x34
 800db28:	2100      	movs	r1, #0
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7fc fa97 	bl	800a05e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800db30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db32:	695b      	ldr	r3, [r3, #20]
 800db34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800db38:	f04f 0200 	mov.w	r2, #0
 800db3c:	f04f 0300 	mov.w	r3, #0
 800db40:	4608      	mov	r0, r1
 800db42:	f7fc fab8 	bl	800a0b6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800db46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800db4e:	f04f 0200 	mov.w	r2, #0
 800db52:	f04f 0300 	mov.w	r3, #0
 800db56:	4608      	mov	r0, r1
 800db58:	f7fc faad 	bl	800a0b6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800db5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800db64:	2301      	movs	r3, #1
 800db66:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800db68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fe f9f3 	bl	800bf58 <store_xdir>
 800db72:	4603      	mov	r3, r0
 800db74:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800db78:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d17f      	bne.n	800dc80 <f_open+0x33c>
 800db80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db82:	689b      	ldr	r3, [r3, #8]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d07b      	beq.n	800dc80 <f_open+0x33c>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800db88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	2200      	movs	r2, #0
 800db90:	4619      	mov	r1, r3
 800db92:	f7fd fa03 	bl	800af9c <remove_chain>
 800db96:	4603      	mov	r3, r0
 800db98:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800db9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dba2:	3b01      	subs	r3, #1
 800dba4:	61d3      	str	r3, [r2, #28]
 800dba6:	e06b      	b.n	800dc80 <f_open+0x33c>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbaa:	330e      	adds	r3, #14
 800dbac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fc fa54 	bl	800a05e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dbb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbb8:	3316      	adds	r3, #22
 800dbba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fc fa4d 	bl	800a05e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dbc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbc6:	f103 020b 	add.w	r2, r3, #11
 800dbca:	2320      	movs	r3, #32
 800dbcc:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dbce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	f7fd fdb8 	bl	800b74a <ld_clust>
 800dbda:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dbde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	f7fd fdcf 	bl	800b788 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dbea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dbec:	331c      	adds	r3, #28
 800dbee:	2100      	movs	r1, #0
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fc fa34 	bl	800a05e <st_dword>
					fs->wflag = 1;
 800dbf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dbfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d03d      	beq.n	800dc80 <f_open+0x33c>
						dw = fs->winsect;
 800dc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						res = remove_chain(&dj.obj, cl, 0);
 800dc0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dc10:	2200      	movs	r2, #0
 800dc12:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7fd f9c0 	bl	800af9c <remove_chain>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						if (res == FR_OK) {
 800dc22:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d12a      	bne.n	800dc80 <f_open+0x33c>
							res = move_window(fs, dw);
 800dc2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7fc fd27 	bl	800a684 <move_window>
 800dc36:	4603      	mov	r3, r0
 800dc38:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dc3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc42:	3b01      	subs	r3, #1
 800dc44:	61d3      	str	r3, [r2, #28]
 800dc46:	e01b      	b.n	800dc80 <f_open+0x33c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dc48:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d117      	bne.n	800dc80 <f_open+0x33c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dc50:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800dc54:	f003 0310 	and.w	r3, r3, #16
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d003      	beq.n	800dc64 <f_open+0x320>
					res = FR_NO_FILE;
 800dc5c:	2304      	movs	r3, #4
 800dc5e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800dc62:	e00d      	b.n	800dc80 <f_open+0x33c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dc64:	7ffb      	ldrb	r3, [r7, #31]
 800dc66:	f003 0302 	and.w	r3, r3, #2
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d008      	beq.n	800dc80 <f_open+0x33c>
 800dc6e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800dc72:	f003 0301 	and.w	r3, r3, #1
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d002      	beq.n	800dc80 <f_open+0x33c>
						res = FR_DENIED;
 800dc7a:	2307      	movs	r3, #7
 800dc7c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 800dc80:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d126      	bne.n	800dcd6 <f_open+0x392>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dc88:	7ffb      	ldrb	r3, [r7, #31]
 800dc8a:	f003 0308 	and.w	r3, r3, #8
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <f_open+0x356>
				mode |= FA_MODIFIED;
 800dc92:	7ffb      	ldrb	r3, [r7, #31]
 800dc94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc98:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca0:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800dca2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800dca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca6:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dca8:	7ffb      	ldrb	r3, [r7, #31]
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	bf8c      	ite	hi
 800dcae:	2301      	movhi	r3, #1
 800dcb0:	2300      	movls	r3, #0
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800dcba:	4611      	mov	r1, r2
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fc fbaf 	bl	800a420 <inc_lock>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcc6:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d102      	bne.n	800dcd6 <f_open+0x392>
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dcd6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f040 810e 	bne.w	800defc <f_open+0x5b8>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800dce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	2b04      	cmp	r3, #4
 800dce6:	d12d      	bne.n	800dd44 <f_open+0x400>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800dce8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcec:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800dcee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dcf8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd00:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800dd02:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd06:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800dd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd0a:	695b      	ldr	r3, [r3, #20]
 800dd0c:	3334      	adds	r3, #52	@ 0x34
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fc f88c 	bl	8009e2c <ld_dword>
 800dd14:	4602      	mov	r2, r0
 800dd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd18:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	3338      	adds	r3, #56	@ 0x38
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7fc f8a6 	bl	8009e72 <ld_qword>
 800dd26:	4602      	mov	r2, r0
 800dd28:	460b      	mov	r3, r1
 800dd2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd32:	695b      	ldr	r3, [r3, #20]
 800dd34:	3321      	adds	r3, #33	@ 0x21
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	f003 0302 	and.w	r3, r3, #2
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd40:	71da      	strb	r2, [r3, #7]
 800dd42:	e016      	b.n	800dd72 <f_open+0x42e>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dd44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd48:	4619      	mov	r1, r3
 800dd4a:	4610      	mov	r0, r2
 800dd4c:	f7fd fcfd 	bl	800b74a <ld_clust>
 800dd50:	4602      	mov	r2, r0
 800dd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd54:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dd56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd58:	331c      	adds	r3, #28
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fc f866 	bl	8009e2c <ld_dword>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2200      	movs	r2, #0
 800dd64:	613b      	str	r3, [r7, #16]
 800dd66:	617a      	str	r2, [r7, #20]
 800dd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dd6e:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd74:	2200      	movs	r2, #0
 800dd76:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dd78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd80:	88da      	ldrh	r2, [r3, #6]
 800dd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd88:	7ffa      	ldrb	r2, [r7, #31]
 800dd8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd90:	2200      	movs	r2, #0
 800dd92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800dd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd98:	2200      	movs	r2, #0
 800dd9a:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dd9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd9e:	f04f 0200 	mov.w	r2, #0
 800dda2:	f04f 0300 	mov.w	r3, #0
 800dda6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddac:	3354      	adds	r3, #84	@ 0x54
 800ddae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fc fa27 	bl	800a208 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ddba:	7ffb      	ldrb	r3, [r7, #31]
 800ddbc:	f003 0320 	and.w	r3, r3, #32
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 809b 	beq.w	800defc <f_open+0x5b8>
 800ddc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddc8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	f000 8095 	beq.w	800defc <f_open+0x5b8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ddd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ddda:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ddde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde0:	895b      	ldrh	r3, [r3, #10]
 800dde2:	461a      	mov	r2, r3
 800dde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde6:	899b      	ldrh	r3, [r3, #12]
 800dde8:	fb02 f303 	mul.w	r3, r2, r3
 800ddec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf2:	689b      	ldr	r3, [r3, #8]
 800ddf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ddf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ddfe:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800de02:	e023      	b.n	800de4c <f_open+0x508>
					clst = get_fat(&fp->obj, clst);
 800de04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de06:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fc fcf8 	bl	800a800 <get_fat>
 800de10:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 800de14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d802      	bhi.n	800de22 <f_open+0x4de>
 800de1c:	2302      	movs	r3, #2
 800de1e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800de26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2a:	d102      	bne.n	800de32 <f_open+0x4ee>
 800de2c:	2301      	movs	r3, #1
 800de2e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de36:	2200      	movs	r2, #0
 800de38:	4698      	mov	r8, r3
 800de3a:	4691      	mov	r9, r2
 800de3c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800de40:	ebb2 0a08 	subs.w	sl, r2, r8
 800de44:	eb63 0b09 	sbc.w	fp, r3, r9
 800de48:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
 800de4c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800de50:	2b00      	cmp	r3, #0
 800de52:	d10a      	bne.n	800de6a <f_open+0x526>
 800de54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800de58:	2200      	movs	r2, #0
 800de5a:	461c      	mov	r4, r3
 800de5c:	4615      	mov	r5, r2
 800de5e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800de62:	4294      	cmp	r4, r2
 800de64:	eb75 0303 	sbcs.w	r3, r5, r3
 800de68:	d3cc      	bcc.n	800de04 <f_open+0x4c0>
				}
				fp->clust = clst;
 800de6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800de70:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de72:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800de76:	2b00      	cmp	r3, #0
 800de78:	d140      	bne.n	800defc <f_open+0x5b8>
 800de7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de7c:	899b      	ldrh	r3, [r3, #12]
 800de7e:	b29b      	uxth	r3, r3
 800de80:	2200      	movs	r2, #0
 800de82:	60bb      	str	r3, [r7, #8]
 800de84:	60fa      	str	r2, [r7, #12]
 800de86:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800de8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800de8e:	f7f2 fe8d 	bl	8000bac <__aeabi_uldivmod>
 800de92:	4313      	orrs	r3, r2
 800de94:	d032      	beq.n	800defc <f_open+0x5b8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de98:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fc fc8f 	bl	800a7c0 <clust2sect>
 800dea2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 800dea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d103      	bne.n	800deb6 <f_open+0x572>
						res = FR_INT_ERR;
 800deae:	2302      	movs	r3, #2
 800deb0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800deb4:	e022      	b.n	800defc <f_open+0x5b8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800deb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb8:	899b      	ldrh	r3, [r3, #12]
 800deba:	b29b      	uxth	r3, r3
 800debc:	2200      	movs	r2, #0
 800debe:	603b      	str	r3, [r7, #0]
 800dec0:	607a      	str	r2, [r7, #4]
 800dec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dec6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800deca:	f7f2 fe6f 	bl	8000bac <__aeabi_uldivmod>
 800dece:	4602      	mov	r2, r0
 800ded0:	460b      	mov	r3, r1
 800ded2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ded6:	441a      	add	r2, r3
 800ded8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deda:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dede:	7858      	ldrb	r0, [r3, #1]
 800dee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800dee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800deea:	2301      	movs	r3, #1
 800deec:	f7fb ff28 	bl	8009d40 <disk_read>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d002      	beq.n	800defc <f_open+0x5b8>
 800def6:	2301      	movs	r3, #1
 800def8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 800defc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800df00:	f001 fcb0 	bl	800f864 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800df04:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d002      	beq.n	800df12 <f_open+0x5ce>
 800df0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0e:	2200      	movs	r2, #0
 800df10:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800df12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df14:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800df18:	4611      	mov	r1, r2
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fc f9e7 	bl	800a2ee <unlock_fs>
 800df20:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800df24:	4618      	mov	r0, r3
 800df26:	37a8      	adds	r7, #168	@ 0xa8
 800df28:	46bd      	mov	sp, r7
 800df2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df2e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800df2e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df32:	b098      	sub	sp, #96	@ 0x60
 800df34:	af00      	add	r7, sp, #0
 800df36:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800df38:	62b9      	str	r1, [r7, #40]	@ 0x28
 800df3a:	627a      	str	r2, [r7, #36]	@ 0x24
 800df3c:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800df3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df40:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 800df42:	6a3a      	ldr	r2, [r7, #32]
 800df44:	2300      	movs	r3, #0
 800df46:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800df48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800df4e:	4619      	mov	r1, r3
 800df50:	4610      	mov	r0, r2
 800df52:	f7ff fc4b 	bl	800d7ec <validate>
 800df56:	4603      	mov	r3, r0
 800df58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800df60:	2b00      	cmp	r3, #0
 800df62:	d108      	bne.n	800df76 <f_read+0x48>
 800df64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df66:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800df6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800df6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800df72:	2b00      	cmp	r3, #0
 800df74:	d009      	beq.n	800df8a <f_read+0x5c>
 800df76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df78:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800df7c:	4611      	mov	r1, r2
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fc f9b5 	bl	800a2ee <unlock_fs>
 800df84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800df88:	e193      	b.n	800e2b2 <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800df8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b00      	cmp	r3, #0
 800df96:	d106      	bne.n	800dfa6 <f_read+0x78>
 800df98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df9a:	2107      	movs	r1, #7
 800df9c:	4618      	mov	r0, r3
 800df9e:	f7fc f9a6 	bl	800a2ee <unlock_fs>
 800dfa2:	2307      	movs	r3, #7
 800dfa4:	e185      	b.n	800e2b2 <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 800dfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800dfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dfb2:	ebb0 0802 	subs.w	r8, r0, r2
 800dfb6:	eb61 0903 	sbc.w	r9, r1, r3
 800dfba:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	461c      	mov	r4, r3
 800dfc4:	4615      	mov	r5, r2
 800dfc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800dfca:	42a2      	cmp	r2, r4
 800dfcc:	41ab      	sbcs	r3, r5
 800dfce:	f080 8166 	bcs.w	800e29e <f_read+0x370>
 800dfd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dfd4:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800dfd6:	e162      	b.n	800e29e <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800dfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfda:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dfde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfe0:	899b      	ldrh	r3, [r3, #12]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	61bb      	str	r3, [r7, #24]
 800dfe8:	61fa      	str	r2, [r7, #28]
 800dfea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dfee:	f7f2 fddd 	bl	8000bac <__aeabi_uldivmod>
 800dff2:	4313      	orrs	r3, r2
 800dff4:	f040 8107 	bne.w	800e206 <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800dff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dffa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e000:	899b      	ldrh	r3, [r3, #12]
 800e002:	b29b      	uxth	r3, r3
 800e004:	2200      	movs	r2, #0
 800e006:	613b      	str	r3, [r7, #16]
 800e008:	617a      	str	r2, [r7, #20]
 800e00a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e00e:	f7f2 fdcd 	bl	8000bac <__aeabi_uldivmod>
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e018:	895b      	ldrh	r3, [r3, #10]
 800e01a:	3b01      	subs	r3, #1
 800e01c:	4013      	ands	r3, r2
 800e01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800e020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e022:	2b00      	cmp	r3, #0
 800e024:	d13c      	bne.n	800e0a0 <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e028:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e02c:	4313      	orrs	r3, r2
 800e02e:	d103      	bne.n	800e038 <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e036:	e013      	b.n	800e060 <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d007      	beq.n	800e050 <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e042:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e046:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e048:	f7fd f95d 	bl	800b306 <clmt_clust>
 800e04c:	65b8      	str	r0, [r7, #88]	@ 0x58
 800e04e:	e007      	b.n	800e060 <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e056:	4619      	mov	r1, r3
 800e058:	4610      	mov	r0, r2
 800e05a:	f7fc fbd1 	bl	800a800 <get_fat>
 800e05e:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e062:	2b01      	cmp	r3, #1
 800e064:	d80a      	bhi.n	800e07c <f_read+0x14e>
 800e066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e068:	2202      	movs	r2, #2
 800e06a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e070:	2102      	movs	r1, #2
 800e072:	4618      	mov	r0, r3
 800e074:	f7fc f93b 	bl	800a2ee <unlock_fs>
 800e078:	2302      	movs	r3, #2
 800e07a:	e11a      	b.n	800e2b2 <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e07c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e082:	d10a      	bne.n	800e09a <f_read+0x16c>
 800e084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e08c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e08e:	2101      	movs	r1, #1
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc f92c 	bl	800a2ee <unlock_fs>
 800e096:	2301      	movs	r3, #1
 800e098:	e10b      	b.n	800e2b2 <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 800e09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e09e:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e0a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	f7fc fb89 	bl	800a7c0 <clust2sect>
 800e0ae:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10a      	bne.n	800e0cc <f_read+0x19e>
 800e0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b8:	2202      	movs	r2, #2
 800e0ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0c0:	2102      	movs	r1, #2
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fc f913 	bl	800a2ee <unlock_fs>
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	e0f2      	b.n	800e2b2 <f_read+0x384>
			sect += csect;
 800e0cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0d0:	4413      	add	r3, r2
 800e0d2:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0d6:	899b      	ldrh	r3, [r3, #12]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0e0:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e0e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d048      	beq.n	800e17a <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e0e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e0ec:	4413      	add	r3, r2
 800e0ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0f0:	8952      	ldrh	r2, [r2, #10]
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d905      	bls.n	800e102 <f_read+0x1d4>
					cc = fs->csize - csect;
 800e0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0f8:	895b      	ldrh	r3, [r3, #10]
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0fe:	1ad3      	subs	r3, r2, r3
 800e100:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e104:	7858      	ldrb	r0, [r3, #1]
 800e106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e108:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e10a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e10c:	f7fb fe18 	bl	8009d40 <disk_read>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00a      	beq.n	800e12c <f_read+0x1fe>
 800e116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e118:	2201      	movs	r2, #1
 800e11a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e120:	2101      	movs	r1, #1
 800e122:	4618      	mov	r0, r3
 800e124:	f7fc f8e3 	bl	800a2ee <unlock_fs>
 800e128:	2301      	movs	r3, #1
 800e12a:	e0c2      	b.n	800e2b2 <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e132:	b25b      	sxtb	r3, r3
 800e134:	2b00      	cmp	r3, #0
 800e136:	da18      	bge.n	800e16a <f_read+0x23c>
 800e138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13e:	1ad3      	subs	r3, r2, r3
 800e140:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e142:	429a      	cmp	r2, r3
 800e144:	d911      	bls.n	800e16a <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e150:	8992      	ldrh	r2, [r2, #12]
 800e152:	fb02 f303 	mul.w	r3, r2, r3
 800e156:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e158:	18d0      	adds	r0, r2, r3
 800e15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e15c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e162:	899b      	ldrh	r3, [r3, #12]
 800e164:	461a      	mov	r2, r3
 800e166:	f7fc f82e 	bl	800a1c6 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e16c:	899b      	ldrh	r3, [r3, #12]
 800e16e:	461a      	mov	r2, r3
 800e170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e172:	fb02 f303 	mul.w	r3, r2, r3
 800e176:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 800e178:	e071      	b.n	800e25e <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e17e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e180:	429a      	cmp	r2, r3
 800e182:	d03d      	beq.n	800e200 <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e186:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e18a:	b25b      	sxtb	r3, r3
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	da20      	bge.n	800e1d2 <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e192:	7858      	ldrb	r0, [r3, #1]
 800e194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e196:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e19e:	2301      	movs	r3, #1
 800e1a0:	f7fb fdee 	bl	8009d80 <disk_write>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00a      	beq.n	800e1c0 <f_read+0x292>
 800e1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fc f899 	bl	800a2ee <unlock_fs>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e078      	b.n	800e2b2 <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1ca:	b2da      	uxtb	r2, r3
 800e1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1d4:	7858      	ldrb	r0, [r3, #1]
 800e1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e1dc:	2301      	movs	r3, #1
 800e1de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1e0:	f7fb fdae 	bl	8009d40 <disk_read>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00a      	beq.n	800e200 <f_read+0x2d2>
 800e1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1f4:	2101      	movs	r1, #1
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fc f879 	bl	800a2ee <unlock_fs>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e058      	b.n	800e2b2 <f_read+0x384>
			}
#endif
			fp->sect = sect;
 800e200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e204:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e208:	899b      	ldrh	r3, [r3, #12]
 800e20a:	4618      	mov	r0, r3
 800e20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e214:	899b      	ldrh	r3, [r3, #12]
 800e216:	fbb2 f1f3 	udiv	r1, r2, r3
 800e21a:	fb01 f303 	mul.w	r3, r1, r3
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	1ac3      	subs	r3, r0, r3
 800e222:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e224:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e228:	429a      	cmp	r2, r3
 800e22a:	d901      	bls.n	800e230 <f_read+0x302>
 800e22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22e:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e232:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800e236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e238:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e23e:	899b      	ldrh	r3, [r3, #12]
 800e240:	b29b      	uxth	r3, r3
 800e242:	2200      	movs	r2, #0
 800e244:	60bb      	str	r3, [r7, #8]
 800e246:	60fa      	str	r2, [r7, #12]
 800e248:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e24c:	f7f2 fcae 	bl	8000bac <__aeabi_uldivmod>
 800e250:	4613      	mov	r3, r2
 800e252:	4423      	add	r3, r4
 800e254:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e256:	4619      	mov	r1, r3
 800e258:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e25a:	f7fb ffb4 	bl	800a1c6 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e25e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e262:	4413      	add	r3, r2
 800e264:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e268:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e26c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e26e:	2000      	movs	r0, #0
 800e270:	468a      	mov	sl, r1
 800e272:	4683      	mov	fp, r0
 800e274:	eb12 010a 	adds.w	r1, r2, sl
 800e278:	6039      	str	r1, [r7, #0]
 800e27a:	eb43 030b 	adc.w	r3, r3, fp
 800e27e:	607b      	str	r3, [r7, #4]
 800e280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e282:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e286:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800e28a:	6a3b      	ldr	r3, [r7, #32]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e290:	441a      	add	r2, r3
 800e292:	6a3b      	ldr	r3, [r7, #32]
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800e29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f47f ae99 	bne.w	800dfd8 <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7fc f81f 	bl	800a2ee <unlock_fs>
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3760      	adds	r7, #96	@ 0x60
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e2bc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c0:	b091      	sub	sp, #68	@ 0x44
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	61f8      	str	r0, [r7, #28]
 800e2c6:	61b9      	str	r1, [r7, #24]
 800e2c8:	617a      	str	r2, [r7, #20]
 800e2ca:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	f107 0220 	add.w	r2, r7, #32
 800e2dc:	4611      	mov	r1, r2
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff fa84 	bl	800d7ec <validate>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e2ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d108      	bne.n	800e304 <f_write+0x48>
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e2f8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e2fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e300:	2b00      	cmp	r3, #0
 800e302:	d009      	beq.n	800e318 <f_write+0x5c>
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800e30a:	4611      	mov	r1, r2
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fb ffee 	bl	800a2ee <unlock_fs>
 800e312:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e316:	e1d2      	b.n	800e6be <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e31e:	f003 0302 	and.w	r3, r3, #2
 800e322:	2b00      	cmp	r3, #0
 800e324:	d106      	bne.n	800e334 <f_write+0x78>
 800e326:	6a3b      	ldr	r3, [r7, #32]
 800e328:	2107      	movs	r1, #7
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fb ffdf 	bl	800a2ee <unlock_fs>
 800e330:	2307      	movs	r3, #7
 800e332:	e1c4      	b.n	800e6be <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	2b04      	cmp	r3, #4
 800e33a:	f000 81ab 	beq.w	800e694 <f_write+0x3d8>
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	18d1      	adds	r1, r2, r3
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e34e:	4613      	mov	r3, r2
 800e350:	4299      	cmp	r1, r3
 800e352:	f080 819f 	bcs.w	800e694 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e35c:	4613      	mov	r3, r2
 800e35e:	43db      	mvns	r3, r3
 800e360:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e362:	e197      	b.n	800e694 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	899b      	ldrh	r3, [r3, #12]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	2200      	movs	r2, #0
 800e372:	461d      	mov	r5, r3
 800e374:	4616      	mov	r6, r2
 800e376:	462a      	mov	r2, r5
 800e378:	4633      	mov	r3, r6
 800e37a:	f7f2 fc17 	bl	8000bac <__aeabi_uldivmod>
 800e37e:	4313      	orrs	r3, r2
 800e380:	f040 8128 	bne.w	800e5d4 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e384:	69fb      	ldr	r3, [r7, #28]
 800e386:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	899b      	ldrh	r3, [r3, #12]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	2200      	movs	r2, #0
 800e392:	60bb      	str	r3, [r7, #8]
 800e394:	60fa      	str	r2, [r7, #12]
 800e396:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e39a:	f7f2 fc07 	bl	8000bac <__aeabi_uldivmod>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	6a3b      	ldr	r3, [r7, #32]
 800e3a4:	895b      	ldrh	r3, [r3, #10]
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800e3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d150      	bne.n	800e454 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	d10c      	bne.n	800e3d6 <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d11a      	bne.n	800e3fe <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fc fe99 	bl	800b104 <create_chain>
 800e3d2:	63b8      	str	r0, [r7, #56]	@ 0x38
 800e3d4:	e013      	b.n	800e3fe <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d007      	beq.n	800e3ee <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e3e4:	69f8      	ldr	r0, [r7, #28]
 800e3e6:	f7fc ff8e 	bl	800b306 <clmt_clust>
 800e3ea:	63b8      	str	r0, [r7, #56]	@ 0x38
 800e3ec:	e007      	b.n	800e3fe <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e3ee:	69fa      	ldr	r2, [r7, #28]
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4610      	mov	r0, r2
 800e3f8:	f7fc fe84 	bl	800b104 <create_chain>
 800e3fc:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 814c 	beq.w	800e69e <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d10a      	bne.n	800e422 <f_write+0x166>
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	2202      	movs	r2, #2
 800e410:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	2102      	movs	r1, #2
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fb ff68 	bl	800a2ee <unlock_fs>
 800e41e:	2302      	movs	r3, #2
 800e420:	e14d      	b.n	800e6be <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e428:	d10a      	bne.n	800e440 <f_write+0x184>
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	2101      	movs	r1, #1
 800e436:	4618      	mov	r0, r3
 800e438:	f7fb ff59 	bl	800a2ee <unlock_fs>
 800e43c:	2301      	movs	r3, #1
 800e43e:	e13e      	b.n	800e6be <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e444:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	689b      	ldr	r3, [r3, #8]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d102      	bne.n	800e454 <f_write+0x198>
 800e44e:	69fb      	ldr	r3, [r7, #28]
 800e450:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e452:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e45a:	b25b      	sxtb	r3, r3
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	da20      	bge.n	800e4a2 <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e460:	6a3b      	ldr	r3, [r7, #32]
 800e462:	7858      	ldrb	r0, [r3, #1]
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e46e:	2301      	movs	r3, #1
 800e470:	f7fb fc86 	bl	8009d80 <disk_write>
 800e474:	4603      	mov	r3, r0
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00a      	beq.n	800e490 <f_write+0x1d4>
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	2201      	movs	r2, #1
 800e47e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e482:	6a3b      	ldr	r3, [r7, #32]
 800e484:	2101      	movs	r1, #1
 800e486:	4618      	mov	r0, r3
 800e488:	f7fb ff31 	bl	800a2ee <unlock_fs>
 800e48c:	2301      	movs	r3, #1
 800e48e:	e116      	b.n	800e6be <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e49a:	b2da      	uxtb	r2, r3
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e4a2:	6a3a      	ldr	r2, [r7, #32]
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	4610      	mov	r0, r2
 800e4ac:	f7fc f988 	bl	800a7c0 <clust2sect>
 800e4b0:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10a      	bne.n	800e4ce <f_write+0x212>
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	2202      	movs	r2, #2
 800e4bc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	2102      	movs	r1, #2
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fb ff12 	bl	800a2ee <unlock_fs>
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	e0f7      	b.n	800e6be <f_write+0x402>
			sect += csect;
 800e4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4d2:	4413      	add	r3, r2
 800e4d4:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e4d6:	6a3b      	ldr	r3, [r7, #32]
 800e4d8:	899b      	ldrh	r3, [r3, #12]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4e2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d04b      	beq.n	800e582 <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e4ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ee:	4413      	add	r3, r2
 800e4f0:	6a3a      	ldr	r2, [r7, #32]
 800e4f2:	8952      	ldrh	r2, [r2, #10]
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d905      	bls.n	800e504 <f_write+0x248>
					cc = fs->csize - csect;
 800e4f8:	6a3b      	ldr	r3, [r7, #32]
 800e4fa:	895b      	ldrh	r3, [r3, #10]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	7858      	ldrb	r0, [r3, #1]
 800e508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e50a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e50c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e50e:	f7fb fc37 	bl	8009d80 <disk_write>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00a      	beq.n	800e52e <f_write+0x272>
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e520:	6a3b      	ldr	r3, [r7, #32]
 800e522:	2101      	movs	r1, #1
 800e524:	4618      	mov	r0, r3
 800e526:	f7fb fee2 	bl	800a2ee <unlock_fs>
 800e52a:	2301      	movs	r3, #1
 800e52c:	e0c7      	b.n	800e6be <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e538:	429a      	cmp	r2, r3
 800e53a:	d91a      	bls.n	800e572 <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	6a3a      	ldr	r2, [r7, #32]
 800e54c:	8992      	ldrh	r2, [r2, #12]
 800e54e:	fb02 f303 	mul.w	r3, r2, r3
 800e552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e554:	18d1      	adds	r1, r2, r3
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	899b      	ldrh	r3, [r3, #12]
 800e55a:	461a      	mov	r2, r3
 800e55c:	f7fb fe33 	bl	800a1c6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e56a:	b2da      	uxtb	r2, r3
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e572:	6a3b      	ldr	r3, [r7, #32]
 800e574:	899b      	ldrh	r3, [r3, #12]
 800e576:	461a      	mov	r2, r3
 800e578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57a:	fb02 f303 	mul.w	r3, r2, r3
 800e57e:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800e580:	e05d      	b.n	800e63e <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e588:	429a      	cmp	r2, r3
 800e58a:	d020      	beq.n	800e5ce <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e598:	4290      	cmp	r0, r2
 800e59a:	eb71 0303 	sbcs.w	r3, r1, r3
 800e59e:	d216      	bcs.n	800e5ce <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e5a0:	6a3b      	ldr	r3, [r7, #32]
 800e5a2:	7858      	ldrb	r0, [r3, #1]
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5ae:	f7fb fbc7 	bl	8009d40 <disk_read>
 800e5b2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d00a      	beq.n	800e5ce <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e5c0:	6a3b      	ldr	r3, [r7, #32]
 800e5c2:	2101      	movs	r1, #1
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f7fb fe92 	bl	800a2ee <unlock_fs>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e077      	b.n	800e6be <f_write+0x402>
			}
#endif
			fp->sect = sect;
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e5d4:	6a3b      	ldr	r3, [r7, #32]
 800e5d6:	899b      	ldrh	r3, [r3, #12]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e5e0:	6a3b      	ldr	r3, [r7, #32]
 800e5e2:	899b      	ldrh	r3, [r3, #12]
 800e5e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e5e8:	fb01 f303 	mul.w	r3, r1, r3
 800e5ec:	1ad3      	subs	r3, r2, r3
 800e5ee:	1ac3      	subs	r3, r0, r3
 800e5f0:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e5f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d901      	bls.n	800e5fe <f_write+0x342>
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	899b      	ldrh	r3, [r3, #12]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	2200      	movs	r2, #0
 800e612:	603b      	str	r3, [r7, #0]
 800e614:	607a      	str	r2, [r7, #4]
 800e616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e61a:	f7f2 fac7 	bl	8000bac <__aeabi_uldivmod>
 800e61e:	4613      	mov	r3, r2
 800e620:	4423      	add	r3, r4
 800e622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e624:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e626:	4618      	mov	r0, r3
 800e628:	f7fb fdcd 	bl	800a1c6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e632:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e636:	b2da      	uxtb	r2, r3
 800e638:	69fb      	ldr	r3, [r7, #28]
 800e63a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e63e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e642:	4413      	add	r3, r2
 800e644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e64c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e64e:	2000      	movs	r0, #0
 800e650:	4688      	mov	r8, r1
 800e652:	4681      	mov	r9, r0
 800e654:	eb12 0a08 	adds.w	sl, r2, r8
 800e658:	eb43 0b09 	adc.w	fp, r3, r9
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e66e:	4290      	cmp	r0, r2
 800e670:	eb71 0403 	sbcs.w	r4, r1, r3
 800e674:	d201      	bcs.n	800e67a <f_write+0x3be>
 800e676:	4610      	mov	r0, r2
 800e678:	4619      	mov	r1, r3
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e686:	441a      	add	r2, r3
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	697a      	ldr	r2, [r7, #20]
 800e68e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	2b00      	cmp	r3, #0
 800e698:	f47f ae64 	bne.w	800e364 <f_write+0xa8>
 800e69c:	e000      	b.n	800e6a0 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e69e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e6a0:	69fb      	ldr	r3, [r7, #28]
 800e6a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	69fb      	ldr	r3, [r7, #28]
 800e6ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fb fe19 	bl	800a2ee <unlock_fs>
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3744      	adds	r7, #68	@ 0x44
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b09c      	sub	sp, #112	@ 0x70
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff f887 	bl	800d7ec <validate>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800e6e4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f040 8123 	bne.w	800e934 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e6f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f000 811b 	beq.w	800e934 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e704:	b25b      	sxtb	r3, r3
 800e706:	2b00      	cmp	r3, #0
 800e708:	da1c      	bge.n	800e744 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e70a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e70c:	7858      	ldrb	r0, [r3, #1]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e718:	2301      	movs	r3, #1
 800e71a:	f7fb fb31 	bl	8009d80 <disk_write>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d006      	beq.n	800e732 <f_sync+0x6a>
 800e724:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e726:	2101      	movs	r1, #1
 800e728:	4618      	mov	r0, r3
 800e72a:	f7fb fde0 	bl	800a2ee <unlock_fs>
 800e72e:	2301      	movs	r3, #1
 800e730:	e109      	b.n	800e946 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e738:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e744:	f7fb fa5c 	bl	8009c00 <get_fattime>
 800e748:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e74a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	2b04      	cmp	r3, #4
 800e750:	f040 80a5 	bne.w	800e89e <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	4618      	mov	r0, r3
 800e758:	f7fc fbc0 	bl	800aedc <fill_first_frag>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800e762:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10a      	bne.n	800e780 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e770:	f04f 32ff 	mov.w	r2, #4294967295
 800e774:	4619      	mov	r1, r3
 800e776:	f7fc fbe0 	bl	800af3a <fill_last_frag>
 800e77a:	4603      	mov	r3, r0
 800e77c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800e780:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e784:	2b00      	cmp	r3, #0
 800e786:	f040 80d5 	bne.w	800e934 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 800e78a:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800e78e:	f001 f85d 	bl	800f84c <ff_memalloc>
 800e792:	6638      	str	r0, [r7, #96]	@ 0x60
 800e794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e796:	2b00      	cmp	r3, #0
 800e798:	d106      	bne.n	800e7a8 <f_sync+0xe0>
 800e79a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e79c:	2111      	movs	r1, #17
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fb fda5 	bl	800a2ee <unlock_fs>
 800e7a4:	2311      	movs	r3, #17
 800e7a6:	e0ce      	b.n	800e946 <f_sync+0x27e>
 800e7a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e7ac:	611a      	str	r2, [r3, #16]
 800e7ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e7b2:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800e7b6:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	f107 0308 	add.w	r3, r7, #8
 800e7be:	4611      	mov	r1, r2
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7fd fb93 	bl	800beec <load_obj_dir>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800e7cc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d160      	bne.n	800e896 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e7d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7d6:	695b      	ldr	r3, [r3, #20]
 800e7d8:	3304      	adds	r3, #4
 800e7da:	781a      	ldrb	r2, [r3, #0]
 800e7dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7de:	695b      	ldr	r3, [r3, #20]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	f042 0220 	orr.w	r2, r2, #32
 800e7e6:	b2d2      	uxtb	r2, r2
 800e7e8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	79da      	ldrb	r2, [r3, #7]
 800e7ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	3321      	adds	r3, #33	@ 0x21
 800e7f4:	f042 0201 	orr.w	r2, r2, #1
 800e7f8:	b2d2      	uxtb	r2, r2
 800e7fa:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e7fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e7fe:	695b      	ldr	r3, [r3, #20]
 800e800:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	689b      	ldr	r3, [r3, #8]
 800e808:	4619      	mov	r1, r3
 800e80a:	4610      	mov	r0, r2
 800e80c:	f7fb fc27 	bl	800a05e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e810:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e812:	695b      	ldr	r3, [r3, #20]
 800e814:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e81e:	4608      	mov	r0, r1
 800e820:	f7fb fc49 	bl	800a0b6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e824:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e826:	695b      	ldr	r3, [r3, #20]
 800e828:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e832:	4608      	mov	r0, r1
 800e834:	f7fb fc3f 	bl	800a0b6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e83a:	695b      	ldr	r3, [r3, #20]
 800e83c:	330c      	adds	r3, #12
 800e83e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e840:	4618      	mov	r0, r3
 800e842:	f7fb fc0c 	bl	800a05e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e848:	695b      	ldr	r3, [r3, #20]
 800e84a:	3315      	adds	r3, #21
 800e84c:	2200      	movs	r2, #0
 800e84e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e852:	695b      	ldr	r3, [r3, #20]
 800e854:	3310      	adds	r3, #16
 800e856:	2100      	movs	r1, #0
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fb fc00 	bl	800a05e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e85e:	f107 0308 	add.w	r3, r7, #8
 800e862:	4618      	mov	r0, r3
 800e864:	f7fd fb78 	bl	800bf58 <store_xdir>
 800e868:	4603      	mov	r3, r0
 800e86a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800e86e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10f      	bne.n	800e896 <f_sync+0x1ce>
							res = sync_fs(fs);
 800e876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fb ff31 	bl	800a6e0 <sync_fs>
 800e87e:	4603      	mov	r3, r0
 800e880:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e88a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e88e:	b2da      	uxtb	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800e896:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e898:	f000 ffe4 	bl	800f864 <ff_memfree>
 800e89c:	e04a      	b.n	800e934 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e89e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8a4:	4619      	mov	r1, r3
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	f7fb feec 	bl	800a684 <move_window>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800e8b2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d13c      	bne.n	800e934 <f_sync+0x26c>
					dir = fp->dir_ptr;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8be:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e8c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8c2:	330b      	adds	r3, #11
 800e8c4:	781a      	ldrb	r2, [r3, #0]
 800e8c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8c8:	330b      	adds	r3, #11
 800e8ca:	f042 0220 	orr.w	r2, r2, #32
 800e8ce:	b2d2      	uxtb	r2, r2
 800e8d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6818      	ldr	r0, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	689b      	ldr	r3, [r3, #8]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e8de:	f7fc ff53 	bl	800b788 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e8e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8e4:	f103 001c 	add.w	r0, r3, #28
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	f7fb fbb4 	bl	800a05e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e8f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8f8:	3316      	adds	r3, #22
 800e8fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fb fbae 	bl	800a05e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e904:	3312      	adds	r3, #18
 800e906:	2100      	movs	r1, #0
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fb fb8d 	bl	800a028 <st_word>
					fs->wflag = 1;
 800e90e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e910:	2201      	movs	r2, #1
 800e912:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e914:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e916:	4618      	mov	r0, r3
 800e918:	f7fb fee2 	bl	800a6e0 <sync_fs>
 800e91c:	4603      	mov	r3, r0
 800e91e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e92c:	b2da      	uxtb	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e934:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e936:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800e93a:	4611      	mov	r1, r2
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7fb fcd6 	bl	800a2ee <unlock_fs>
 800e942:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800e946:	4618      	mov	r0, r3
 800e948:	3770      	adds	r7, #112	@ 0x70
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b084      	sub	sp, #16
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7ff feb6 	bl	800e6c8 <f_sync>
 800e95c:	4603      	mov	r3, r0
 800e95e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e960:	7bfb      	ldrb	r3, [r7, #15]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d11d      	bne.n	800e9a2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f107 0208 	add.w	r2, r7, #8
 800e96c:	4611      	mov	r1, r2
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fe ff3c 	bl	800d7ec <validate>
 800e974:	4603      	mov	r3, r0
 800e976:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e978:	7bfb      	ldrb	r3, [r7, #15]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d111      	bne.n	800e9a2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e982:	4618      	mov	r0, r3
 800e984:	f7fb fdda 	bl	800a53c <dec_lock>
 800e988:	4603      	mov	r3, r0
 800e98a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e98c:	7bfb      	ldrb	r3, [r7, #15]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d102      	bne.n	800e998 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	2100      	movs	r1, #0
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7fb fca6 	bl	800a2ee <unlock_fs>
#endif
		}
	}
	return res;
 800e9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e9ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9b0:	b0ba      	sub	sp, #232	@ 0xe8
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800e9b8:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e9bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e9c0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	f7fe ff10 	bl	800d7ec <validate>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e9d2:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d105      	bne.n	800e9e6 <f_lseek+0x3a>
 800e9da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e9e2:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800e9e6:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d111      	bne.n	800ea12 <f_lseek+0x66>
 800e9ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	2b04      	cmp	r3, #4
 800e9f6:	d10c      	bne.n	800ea12 <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e9f8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800e9fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea02:	f04f 32ff 	mov.w	r2, #4294967295
 800ea06:	4619      	mov	r1, r3
 800ea08:	f7fc fa97 	bl	800af3a <fill_last_frag>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ea12:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00a      	beq.n	800ea30 <f_lseek+0x84>
 800ea1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea1e:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800ea22:	4611      	mov	r1, r2
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fb fc62 	bl	800a2ee <unlock_fs>
 800ea2a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800ea2e:	e3fb      	b.n	800f228 <f_lseek+0x87c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ea30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f000 8170 	beq.w	800ed1c <f_lseek+0x370>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ea3c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ea40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea44:	bf08      	it	eq
 800ea46:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800ea4a:	f040 8093 	bne.w	800eb74 <f_lseek+0x1c8>
			tbl = fp->cltbl;
 800ea4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ea58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ea5c:	1d1a      	adds	r2, r3, #4
 800ea5e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ea68:	2302      	movs	r3, #2
 800ea6a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ea6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (cl) {
 800ea78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d064      	beq.n	800eb4a <f_lseek+0x19e>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ea80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ea84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ea88:	2300      	movs	r3, #0
 800ea8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ea8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ea92:	3302      	adds	r3, #2
 800ea94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					do {
						pcl = cl; ncl++;
 800ea98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ea9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800eaa0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						cl = get_fat(&fp->obj, cl);
 800eaaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eaae:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fb fea4 	bl	800a800 <get_fat>
 800eab8:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800eabc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d80c      	bhi.n	800eade <f_lseek+0x132>
 800eac4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eac8:	2202      	movs	r2, #2
 800eaca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eace:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ead2:	2102      	movs	r1, #2
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fb fc0a 	bl	800a2ee <unlock_fs>
 800eada:	2302      	movs	r3, #2
 800eadc:	e3a4      	b.n	800f228 <f_lseek+0x87c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800eae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae6:	d10c      	bne.n	800eb02 <f_lseek+0x156>
 800eae8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eaec:	2201      	movs	r2, #1
 800eaee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eaf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7fb fbf8 	bl	800a2ee <unlock_fs>
 800eafe:	2301      	movs	r3, #1
 800eb00:	e392      	b.n	800f228 <f_lseek+0x87c>
					} while (cl == pcl + 1);
 800eb02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb06:	3301      	adds	r3, #1
 800eb08:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d0c3      	beq.n	800ea98 <f_lseek+0xec>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800eb10:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800eb14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d80f      	bhi.n	800eb3c <f_lseek+0x190>
						*tbl++ = ncl; *tbl++ = tcl;
 800eb1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800eb20:	1d1a      	adds	r2, r3, #4
 800eb22:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800eb26:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eb2a:	601a      	str	r2, [r3, #0]
 800eb2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800eb30:	1d1a      	adds	r2, r3, #4
 800eb32:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800eb36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800eb3a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800eb3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb42:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d39a      	bcc.n	800ea80 <f_lseek+0xd4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800eb4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eb4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb50:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800eb54:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800eb56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800eb5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d804      	bhi.n	800eb6c <f_lseek+0x1c0>
				*tbl = 0;		/* Terminate table */
 800eb62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800eb66:	2200      	movs	r2, #0
 800eb68:	601a      	str	r2, [r3, #0]
 800eb6a:	e353      	b.n	800f214 <f_lseek+0x868>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800eb6c:	2311      	movs	r3, #17
 800eb6e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800eb72:	e34f      	b.n	800f214 <f_lseek+0x868>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800eb74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eb78:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800eb7c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800eb80:	4290      	cmp	r0, r2
 800eb82:	eb71 0303 	sbcs.w	r3, r1, r3
 800eb86:	d205      	bcs.n	800eb94 <f_lseek+0x1e8>
 800eb88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eb8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800eb90:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			fp->fptr = ofs;				/* Set file pointer */
 800eb94:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800eb98:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800eb9c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			if (ofs) {
 800eba0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800eba4:	4313      	orrs	r3, r2
 800eba6:	f000 8335 	beq.w	800f214 <f_lseek+0x868>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ebaa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ebae:	f112 38ff 	adds.w	r8, r2, #4294967295
 800ebb2:	f143 39ff 	adc.w	r9, r3, #4294967295
 800ebb6:	4642      	mov	r2, r8
 800ebb8:	464b      	mov	r3, r9
 800ebba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800ebbe:	f7fc fba2 	bl	800b306 <clmt_clust>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ebc8:	641a      	str	r2, [r3, #64]	@ 0x40
				dsc = clust2sect(fs, fp->clust);
 800ebca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ebce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ebd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	f7fb fdf2 	bl	800a7c0 <clust2sect>
 800ebdc:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ebe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10c      	bne.n	800ec02 <f_lseek+0x256>
 800ebe8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ebec:	2202      	movs	r2, #2
 800ebee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ebf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ebf6:	2102      	movs	r1, #2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fb fb78 	bl	800a2ee <unlock_fs>
 800ebfe:	2302      	movs	r3, #2
 800ec00:	e312      	b.n	800f228 <f_lseek+0x87c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ec02:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ec06:	1e54      	subs	r4, r2, #1
 800ec08:	f143 35ff 	adc.w	r5, r3, #4294967295
 800ec0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec10:	899b      	ldrh	r3, [r3, #12]
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	2200      	movs	r2, #0
 800ec16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ec1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ec1e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800ec22:	4620      	mov	r0, r4
 800ec24:	4629      	mov	r1, r5
 800ec26:	f7f1 ffc1 	bl	8000bac <__aeabi_uldivmod>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec32:	895b      	ldrh	r3, [r3, #10]
 800ec34:	3b01      	subs	r3, #1
 800ec36:	4013      	ands	r3, r2
 800ec38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ec3c:	4413      	add	r3, r2
 800ec3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ec42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec46:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ec4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec4e:	899b      	ldrh	r3, [r3, #12]
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	2200      	movs	r2, #0
 800ec54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ec58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ec5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800ec60:	f7f1 ffa4 	bl	8000bac <__aeabi_uldivmod>
 800ec64:	4313      	orrs	r3, r2
 800ec66:	f000 82d5 	beq.w	800f214 <f_lseek+0x868>
 800ec6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ec74:	429a      	cmp	r2, r3
 800ec76:	f000 82cd 	beq.w	800f214 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ec82:	b25b      	sxtb	r3, r3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	da27      	bge.n	800ecd8 <f_lseek+0x32c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec8c:	7858      	ldrb	r0, [r3, #1]
 800ec8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec92:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ec96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	f7fb f86f 	bl	8009d80 <disk_write>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00c      	beq.n	800ecc2 <f_lseek+0x316>
 800eca8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ecac:	2201      	movs	r2, #1
 800ecae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ecb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ecb6:	2101      	movs	r1, #1
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fb fb18 	bl	800a2ee <unlock_fs>
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	e2b2      	b.n	800f228 <f_lseek+0x87c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ecc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ecc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ecca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ecce:	b2da      	uxtb	r2, r3
 800ecd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ecd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ecd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ecdc:	7858      	ldrb	r0, [r3, #1]
 800ecde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ece2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ece6:	2301      	movs	r3, #1
 800ece8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ecec:	f7fb f828 	bl	8009d40 <disk_read>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00c      	beq.n	800ed10 <f_lseek+0x364>
 800ecf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ed00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ed04:	2101      	movs	r1, #1
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fb faf1 	bl	800a2ee <unlock_fs>
 800ed0c:	2301      	movs	r3, #1
 800ed0e:	e28b      	b.n	800f228 <f_lseek+0x87c>
#endif
					fp->sect = dsc;
 800ed10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ed18:	645a      	str	r2, [r3, #68]	@ 0x44
 800ed1a:	e27b      	b.n	800f214 <f_lseek+0x868>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800ed1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	2b04      	cmp	r3, #4
 800ed24:	d009      	beq.n	800ed3a <f_lseek+0x38e>
 800ed26:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d305      	bcc.n	800ed3a <f_lseek+0x38e>
 800ed2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed32:	f04f 0300 	mov.w	r3, #0
 800ed36:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ed3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed3e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ed42:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ed46:	4290      	cmp	r0, r2
 800ed48:	eb71 0303 	sbcs.w	r3, r1, r3
 800ed4c:	d20d      	bcs.n	800ed6a <f_lseek+0x3be>
 800ed4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed52:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed56:	f003 0302 	and.w	r3, r3, #2
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d105      	bne.n	800ed6a <f_lseek+0x3be>
			ofs = fp->obj.objsize;
 800ed5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ed66:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		}
		ifptr = fp->fptr;
 800ed6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ed72:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		fp->fptr = nsect = 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ed7c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ed80:	f04f 0200 	mov.w	r2, #0
 800ed84:	f04f 0300 	mov.w	r3, #0
 800ed88:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 800ed8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ed90:	4313      	orrs	r3, r2
 800ed92:	f000 81b8 	beq.w	800f106 <f_lseek+0x75a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ed96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ed9a:	895b      	ldrh	r3, [r3, #10]
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eda2:	899b      	ldrh	r3, [r3, #12]
 800eda4:	fb02 f303 	mul.w	r3, r2, r3
 800eda8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			if (ifptr > 0 &&
 800edac:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800edb0:	4313      	orrs	r3, r2
 800edb2:	d069      	beq.n	800ee88 <f_lseek+0x4dc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800edb4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800edb8:	1e51      	subs	r1, r2, #1
 800edba:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800edbe:	f143 33ff 	adc.w	r3, r3, #4294967295
 800edc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800edc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800edca:	2200      	movs	r2, #0
 800edcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800edce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800edd0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800edd4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800edd8:	f7f1 fee8 	bl	8000bac <__aeabi_uldivmod>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	4614      	mov	r4, r2
 800ede2:	461d      	mov	r5, r3
 800ede4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800ede8:	1e51      	subs	r1, r2, #1
 800edea:	6739      	str	r1, [r7, #112]	@ 0x70
 800edec:	f143 33ff 	adc.w	r3, r3, #4294967295
 800edf0:	677b      	str	r3, [r7, #116]	@ 0x74
 800edf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800edf6:	2200      	movs	r2, #0
 800edf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800edfa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800edfc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800ee00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800ee04:	f7f1 fed2 	bl	8000bac <__aeabi_uldivmod>
 800ee08:	4602      	mov	r2, r0
 800ee0a:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800ee0c:	4294      	cmp	r4, r2
 800ee0e:	eb75 0303 	sbcs.w	r3, r5, r3
 800ee12:	d339      	bcc.n	800ee88 <f_lseek+0x4dc>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ee14:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800ee18:	1e51      	subs	r1, r2, #1
 800ee1a:	6639      	str	r1, [r7, #96]	@ 0x60
 800ee1c:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ee20:	667b      	str	r3, [r7, #100]	@ 0x64
 800ee22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ee26:	3b01      	subs	r3, #1
 800ee28:	2200      	movs	r2, #0
 800ee2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee2c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800ee2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ee32:	460b      	mov	r3, r1
 800ee34:	ea6f 0a03 	mvn.w	sl, r3
 800ee38:	4613      	mov	r3, r2
 800ee3a:	ea6f 0b03 	mvn.w	fp, r3
 800ee3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ee42:	460b      	mov	r3, r1
 800ee44:	ea03 030a 	and.w	r3, r3, sl
 800ee48:	653b      	str	r3, [r7, #80]	@ 0x50
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	ea03 030b 	and.w	r3, r3, fp
 800ee50:	657b      	str	r3, [r7, #84]	@ 0x54
 800ee52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ee5a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800ee5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee62:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ee66:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ee6a:	1a14      	subs	r4, r2, r0
 800ee6c:	60bc      	str	r4, [r7, #8]
 800ee6e:	eb63 0301 	sbc.w	r3, r3, r1
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ee78:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
				clst = fp->clust;
 800ee7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ee86:	e03d      	b.n	800ef04 <f_lseek+0x558>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ee88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ee92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d12f      	bne.n	800eefa <f_lseek+0x54e>
					clst = create_chain(&fp->obj, 0);
 800ee9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ee9e:	2100      	movs	r1, #0
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fc f92f 	bl	800b104 <create_chain>
 800eea6:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800eeaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d10c      	bne.n	800eecc <f_lseek+0x520>
 800eeb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eeb6:	2202      	movs	r2, #2
 800eeb8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eec0:	2102      	movs	r1, #2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7fb fa13 	bl	800a2ee <unlock_fs>
 800eec8:	2302      	movs	r3, #2
 800eeca:	e1ad      	b.n	800f228 <f_lseek+0x87c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eed4:	d10c      	bne.n	800eef0 <f_lseek+0x544>
 800eed6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800eeda:	2201      	movs	r2, #1
 800eedc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800eee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eee4:	2101      	movs	r1, #1
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fb fa01 	bl	800a2ee <unlock_fs>
 800eeec:	2301      	movs	r3, #1
 800eeee:	e19b      	b.n	800f228 <f_lseek+0x87c>
					fp->obj.sclust = clst;
 800eef0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800eef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eef8:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800eefa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800eefe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef02:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800ef04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 80fc 	beq.w	800f106 <f_lseek+0x75a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ef0e:	e09c      	b.n	800f04a <f_lseek+0x69e>
					ofs -= bcs; fp->fptr += bcs;
 800ef10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ef14:	2200      	movs	r2, #0
 800ef16:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef18:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ef1a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800ef1e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800ef22:	4621      	mov	r1, r4
 800ef24:	1a51      	subs	r1, r2, r1
 800ef26:	6039      	str	r1, [r7, #0]
 800ef28:	4629      	mov	r1, r5
 800ef2a:	eb63 0301 	sbc.w	r3, r3, r1
 800ef2e:	607b      	str	r3, [r7, #4]
 800ef30:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ef34:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
 800ef38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ef40:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800ef44:	2000      	movs	r0, #0
 800ef46:	6439      	str	r1, [r7, #64]	@ 0x40
 800ef48:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef4a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800ef4e:	4621      	mov	r1, r4
 800ef50:	1851      	adds	r1, r2, r1
 800ef52:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ef54:	4629      	mov	r1, r5
 800ef56:	414b      	adcs	r3, r1
 800ef58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ef62:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ef66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef6e:	f003 0302 	and.w	r3, r3, #2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d031      	beq.n	800efda <f_lseek+0x62e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800ef76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef7a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ef7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ef86:	4282      	cmp	r2, r0
 800ef88:	418b      	sbcs	r3, r1
 800ef8a:	d212      	bcs.n	800efb2 <f_lseek+0x606>
							fp->obj.objsize = fp->fptr;
 800ef8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ef94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef98:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800ef9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800efa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800efa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efa8:	b2db      	uxtb	r3, r3
 800efaa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800efae:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800efb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800efb6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fc f8a2 	bl	800b104 <create_chain>
 800efc0:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800efc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d10f      	bne.n	800efec <f_lseek+0x640>
							ofs = 0; break;
 800efcc:	f04f 0200 	mov.w	r2, #0
 800efd0:	f04f 0300 	mov.w	r3, #0
 800efd4:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800efd8:	e047      	b.n	800f06a <f_lseek+0x6be>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800efda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800efde:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fb fc0c 	bl	800a800 <get_fat>
 800efe8:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff4:	d10c      	bne.n	800f010 <f_lseek+0x664>
 800eff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800effa:	2201      	movs	r2, #1
 800effc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f004:	2101      	movs	r1, #1
 800f006:	4618      	mov	r0, r3
 800f008:	f7fb f971 	bl	800a2ee <unlock_fs>
 800f00c:	2301      	movs	r3, #1
 800f00e:	e10b      	b.n	800f228 <f_lseek+0x87c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f014:	2b01      	cmp	r3, #1
 800f016:	d906      	bls.n	800f026 <f_lseek+0x67a>
 800f018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f01c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f022:	4293      	cmp	r3, r2
 800f024:	d30c      	bcc.n	800f040 <f_lseek+0x694>
 800f026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f02a:	2202      	movs	r2, #2
 800f02c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f034:	2102      	movs	r1, #2
 800f036:	4618      	mov	r0, r3
 800f038:	f7fb f959 	bl	800a2ee <unlock_fs>
 800f03c:	2302      	movs	r3, #2
 800f03e:	e0f3      	b.n	800f228 <f_lseek+0x87c>
					fp->clust = clst;
 800f040:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800f044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f048:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800f04a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f04e:	2200      	movs	r2, #0
 800f050:	633b      	str	r3, [r7, #48]	@ 0x30
 800f052:	637a      	str	r2, [r7, #52]	@ 0x34
 800f054:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800f058:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800f05c:	4621      	mov	r1, r4
 800f05e:	4291      	cmp	r1, r2
 800f060:	4629      	mov	r1, r5
 800f062:	eb71 0303 	sbcs.w	r3, r1, r3
 800f066:	f4ff af53 	bcc.w	800ef10 <f_lseek+0x564>
				}
				fp->fptr += ofs;
 800f06a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f06e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f072:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800f076:	1884      	adds	r4, r0, r2
 800f078:	62bc      	str	r4, [r7, #40]	@ 0x28
 800f07a:	eb41 0303 	adc.w	r3, r1, r3
 800f07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f080:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f084:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800f088:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800f08c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f090:	899b      	ldrh	r3, [r3, #12]
 800f092:	b29b      	uxth	r3, r3
 800f094:	2200      	movs	r2, #0
 800f096:	623b      	str	r3, [r7, #32]
 800f098:	627a      	str	r2, [r7, #36]	@ 0x24
 800f09a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800f09e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f0a2:	f7f1 fd83 	bl	8000bac <__aeabi_uldivmod>
 800f0a6:	4313      	orrs	r3, r2
 800f0a8:	d02d      	beq.n	800f106 <f_lseek+0x75a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f0aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f0ae:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fb fb84 	bl	800a7c0 <clust2sect>
 800f0b8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d10c      	bne.n	800f0de <f_lseek+0x732>
 800f0c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f0c8:	2202      	movs	r2, #2
 800f0ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f0ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f0d2:	2102      	movs	r1, #2
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7fb f90a 	bl	800a2ee <unlock_fs>
 800f0da:	2302      	movs	r3, #2
 800f0dc:	e0a4      	b.n	800f228 <f_lseek+0x87c>
					nsect += (DWORD)(ofs / SS(fs));
 800f0de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f0e2:	899b      	ldrh	r3, [r3, #12]
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	61bb      	str	r3, [r7, #24]
 800f0ea:	61fa      	str	r2, [r7, #28]
 800f0ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f0f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800f0f4:	f7f1 fd5a 	bl	8000bac <__aeabi_uldivmod>
 800f0f8:	4602      	mov	r2, r0
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f100:	4413      	add	r3, r2
 800f102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f10a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f10e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f112:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800f116:	4290      	cmp	r0, r2
 800f118:	eb71 0303 	sbcs.w	r3, r1, r3
 800f11c:	d212      	bcs.n	800f144 <f_lseek+0x798>
			fp->obj.objsize = fp->fptr;
 800f11e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f122:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f12a:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800f12e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f132:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f13a:	b2da      	uxtb	r2, r3
 800f13c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f140:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f144:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f148:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800f14c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f150:	899b      	ldrh	r3, [r3, #12]
 800f152:	b29b      	uxth	r3, r3
 800f154:	2200      	movs	r2, #0
 800f156:	613b      	str	r3, [r7, #16]
 800f158:	617a      	str	r2, [r7, #20]
 800f15a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f15e:	f7f1 fd25 	bl	8000bac <__aeabi_uldivmod>
 800f162:	4313      	orrs	r3, r2
 800f164:	d056      	beq.n	800f214 <f_lseek+0x868>
 800f166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f16a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f16c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f170:	429a      	cmp	r2, r3
 800f172:	d04f      	beq.n	800f214 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f174:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f178:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f17c:	b25b      	sxtb	r3, r3
 800f17e:	2b00      	cmp	r3, #0
 800f180:	da27      	bge.n	800f1d2 <f_lseek+0x826>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f186:	7858      	ldrb	r0, [r3, #1]
 800f188:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f18c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f190:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f194:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f196:	2301      	movs	r3, #1
 800f198:	f7fa fdf2 	bl	8009d80 <disk_write>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00c      	beq.n	800f1bc <f_lseek+0x810>
 800f1a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f1ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f1b0:	2101      	movs	r1, #1
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fb f89b 	bl	800a2ee <unlock_fs>
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e035      	b.n	800f228 <f_lseek+0x87c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f1bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1c8:	b2da      	uxtb	r2, r3
 800f1ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f1d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f1d6:	7858      	ldrb	r0, [r3, #1]
 800f1d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1dc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f1e6:	f7fa fdab 	bl	8009d40 <disk_read>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00c      	beq.n	800f20a <f_lseek+0x85e>
 800f1f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f1f4:	2201      	movs	r2, #1
 800f1f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800f1fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f1fe:	2101      	movs	r1, #1
 800f200:	4618      	mov	r0, r3
 800f202:	f7fb f874 	bl	800a2ee <unlock_fs>
 800f206:	2301      	movs	r3, #1
 800f208:	e00e      	b.n	800f228 <f_lseek+0x87c>
#endif
			fp->sect = nsect;
 800f20a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f20e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f212:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800f214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f218:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800f21c:	4611      	mov	r1, r2
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fb f865 	bl	800a2ee <unlock_fs>
 800f224:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800f228:	4618      	mov	r0, r3
 800f22a:	37e8      	adds	r7, #232	@ 0xe8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f232 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b098      	sub	sp, #96	@ 0x60
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
 800f23a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800f23c:	f107 0108 	add.w	r1, r7, #8
 800f240:	1d3b      	adds	r3, r7, #4
 800f242:	2200      	movs	r2, #0
 800f244:	4618      	mov	r0, r3
 800f246:	f7fd ff39 	bl	800d0bc <find_volume>
 800f24a:	4603      	mov	r3, r0
 800f24c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800f250:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f254:	2b00      	cmp	r3, #0
 800f256:	d139      	bne.n	800f2cc <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 800f258:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800f25c:	f000 faf6 	bl	800f84c <ff_memalloc>
 800f260:	65b8      	str	r0, [r7, #88]	@ 0x58
 800f262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f264:	2b00      	cmp	r3, #0
 800f266:	d106      	bne.n	800f276 <f_stat+0x44>
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2111      	movs	r1, #17
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7fb f83e 	bl	800a2ee <unlock_fs>
 800f272:	2311      	movs	r3, #17
 800f274:	e033      	b.n	800f2de <f_stat+0xac>
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f27a:	611a      	str	r2, [r3, #16]
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f280:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800f284:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	f107 0308 	add.w	r3, r7, #8
 800f28c:	4611      	mov	r1, r2
 800f28e:	4618      	mov	r0, r3
 800f290:	f7fd fdbe 	bl	800ce10 <follow_path>
 800f294:	4603      	mov	r3, r0
 800f296:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800f29a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d111      	bne.n	800f2c6 <f_stat+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800f2a2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800f2a6:	b25b      	sxtb	r3, r3
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	da03      	bge.n	800f2b4 <f_stat+0x82>
				res = FR_INVALID_NAME;
 800f2ac:	2306      	movs	r3, #6
 800f2ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f2b2:	e008      	b.n	800f2c6 <f_stat+0x94>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d005      	beq.n	800f2c6 <f_stat+0x94>
 800f2ba:	f107 0308 	add.w	r3, r7, #8
 800f2be:	6839      	ldr	r1, [r7, #0]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fd faff 	bl	800c8c4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800f2c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800f2c8:	f000 facc 	bl	800f864 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800f2d2:	4611      	mov	r1, r2
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fb f80a 	bl	800a2ee <unlock_fs>
 800f2da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3760      	adds	r7, #96	@ 0x60
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b0bc      	sub	sp, #240	@ 0xf0
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800f2f4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800f2f8:	1d3b      	adds	r3, r7, #4
 800f2fa:	2202      	movs	r2, #2
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7fd fedd 	bl	800d0bc <find_volume>
 800f302:	4603      	mov	r3, r0
 800f304:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	dj.obj.fs = fs;
 800f308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f30a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if (res == FR_OK) {
 800f30e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f312:	2b00      	cmp	r3, #0
 800f314:	f040 80e2 	bne.w	800f4dc <f_unlink+0x1f6>
		INIT_NAMBUF(fs);
 800f318:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800f31c:	f000 fa96 	bl	800f84c <ff_memalloc>
 800f320:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 800f324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d106      	bne.n	800f33a <f_unlink+0x54>
 800f32c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f32e:	2111      	movs	r1, #17
 800f330:	4618      	mov	r0, r3
 800f332:	f7fa ffdc 	bl	800a2ee <unlock_fs>
 800f336:	2311      	movs	r3, #17
 800f338:	e0d9      	b.n	800f4ee <f_unlink+0x208>
 800f33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f33c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f340:	611a      	str	r2, [r3, #16]
 800f342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f344:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f348:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800f34c:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800f354:	4611      	mov	r1, r2
 800f356:	4618      	mov	r0, r3
 800f358:	f7fd fd5a 	bl	800ce10 <follow_path>
 800f35c:	4603      	mov	r3, r0
 800f35e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800f362:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f366:	2b00      	cmp	r3, #0
 800f368:	d108      	bne.n	800f37c <f_unlink+0x96>
 800f36a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800f36e:	2102      	movs	r1, #2
 800f370:	4618      	mov	r0, r3
 800f372:	f7fa ffd7 	bl	800a324 <chk_lock>
 800f376:	4603      	mov	r3, r0
 800f378:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800f37c:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f380:	2b00      	cmp	r3, #0
 800f382:	f040 80a7 	bne.w	800f4d4 <f_unlink+0x1ee>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800f386:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800f38a:	b25b      	sxtb	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	da03      	bge.n	800f398 <f_unlink+0xb2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800f390:	2306      	movs	r3, #6
 800f392:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 800f396:	e008      	b.n	800f3aa <f_unlink+0xc4>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800f398:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800f39c:	f003 0301 	and.w	r3, r3, #1
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d002      	beq.n	800f3aa <f_unlink+0xc4>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800f3a4:	2307      	movs	r3, #7
 800f3a6:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				}
			}
			if (res == FR_OK) {
 800f3aa:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d166      	bne.n	800f480 <f_unlink+0x19a>
#if _FS_EXFAT
				obj.fs = fs;
 800f3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3b4:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 800f3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	2b04      	cmp	r3, #4
 800f3bc:	d11d      	bne.n	800f3fa <f_unlink+0x114>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800f3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3c0:	695b      	ldr	r3, [r3, #20]
 800f3c2:	3334      	adds	r3, #52	@ 0x34
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fa fd31 	bl	8009e2c <ld_dword>
 800f3ca:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 800f3ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f3d2:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f3d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3d6:	695b      	ldr	r3, [r3, #20]
 800f3d8:	3338      	adds	r3, #56	@ 0x38
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fa fd49 	bl	8009e72 <ld_qword>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3ea:	695b      	ldr	r3, [r3, #20]
 800f3ec:	3321      	adds	r3, #33	@ 0x21
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	f003 0302 	and.w	r3, r3, #2
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	73fb      	strb	r3, [r7, #15]
 800f3f8:	e008      	b.n	800f40c <f_unlink+0x126>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800f3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3fc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800f400:	4611      	mov	r1, r2
 800f402:	4618      	mov	r0, r3
 800f404:	f7fc f9a1 	bl	800b74a <ld_clust>
 800f408:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800f40c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800f410:	f003 0310 	and.w	r3, r3, #16
 800f414:	2b00      	cmp	r3, #0
 800f416:	d033      	beq.n	800f480 <f_unlink+0x19a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800f418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f41a:	643b      	str	r3, [r7, #64]	@ 0x40
						sdj.obj.sclust = dclst;
 800f41c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f420:	64bb      	str	r3, [r7, #72]	@ 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 800f422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	2b04      	cmp	r3, #4
 800f428:	d106      	bne.n	800f438 <f_unlink+0x152>
							sdj.obj.objsize = obj.objsize;
 800f42a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f42e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
							sdj.obj.stat = obj.stat;
 800f432:	7bfb      	ldrb	r3, [r7, #15]
 800f434:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 800f438:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f43c:	2100      	movs	r1, #0
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fb ffad 	bl	800b39e <dir_sdi>
 800f444:	4603      	mov	r3, r0
 800f446:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						if (res == FR_OK) {
 800f44a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d116      	bne.n	800f480 <f_unlink+0x19a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800f452:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f456:	2100      	movs	r1, #0
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fc fe3f 	bl	800c0dc <dir_read>
 800f45e:	4603      	mov	r3, r0
 800f460:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800f464:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d102      	bne.n	800f472 <f_unlink+0x18c>
 800f46c:	2307      	movs	r3, #7
 800f46e:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800f472:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f476:	2b04      	cmp	r3, #4
 800f478:	d102      	bne.n	800f480 <f_unlink+0x19a>
 800f47a:	2300      	movs	r3, #0
 800f47c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 800f480:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f484:	2b00      	cmp	r3, #0
 800f486:	d125      	bne.n	800f4d4 <f_unlink+0x1ee>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800f488:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fd f9c1 	bl	800c814 <dir_remove>
 800f492:	4603      	mov	r3, r0
 800f494:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800f498:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d10e      	bne.n	800f4be <f_unlink+0x1d8>
 800f4a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d00a      	beq.n	800f4be <f_unlink+0x1d8>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 800f4a8:	f107 0308 	add.w	r3, r7, #8
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fb fd72 	bl	800af9c <remove_chain>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800f4be:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d106      	bne.n	800f4d4 <f_unlink+0x1ee>
 800f4c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fb f909 	bl	800a6e0 <sync_fs>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			}
		}
		FREE_NAMBUF();
 800f4d4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800f4d8:	f000 f9c4 	bl	800f864 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800f4dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4de:	f897 20ef 	ldrb.w	r2, [r7, #239]	@ 0xef
 800f4e2:	4611      	mov	r1, r2
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fa ff02 	bl	800a2ee <unlock_fs>
 800f4ea:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	37f0      	adds	r7, #240	@ 0xf0
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}

0800f4f6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b088      	sub	sp, #32
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	60f8      	str	r0, [r7, #12]
 800f4fe:	60b9      	str	r1, [r7, #8]
 800f500:	607a      	str	r2, [r7, #4]
	int n = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f50a:	e01c      	b.n	800f546 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800f50c:	f107 0310 	add.w	r3, r7, #16
 800f510:	f107 0114 	add.w	r1, r7, #20
 800f514:	2201      	movs	r2, #1
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7fe fd09 	bl	800df2e <f_read>
		if (rc != 1) break;
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d117      	bne.n	800f552 <f_gets+0x5c>
		c = s[0];
 800f522:	7d3b      	ldrb	r3, [r7, #20]
 800f524:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800f526:	7dfb      	ldrb	r3, [r7, #23]
 800f528:	2b0d      	cmp	r3, #13
 800f52a:	d00b      	beq.n	800f544 <f_gets+0x4e>
		*p++ = c;
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	1c5a      	adds	r2, r3, #1
 800f530:	61ba      	str	r2, [r7, #24]
 800f532:	7dfa      	ldrb	r2, [r7, #23]
 800f534:	701a      	strb	r2, [r3, #0]
		n++;
 800f536:	69fb      	ldr	r3, [r7, #28]
 800f538:	3301      	adds	r3, #1
 800f53a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800f53c:	7dfb      	ldrb	r3, [r7, #23]
 800f53e:	2b0a      	cmp	r3, #10
 800f540:	d009      	beq.n	800f556 <f_gets+0x60>
 800f542:	e000      	b.n	800f546 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800f544:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	3b01      	subs	r3, #1
 800f54a:	69fa      	ldr	r2, [r7, #28]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	dbdd      	blt.n	800f50c <f_gets+0x16>
 800f550:	e002      	b.n	800f558 <f_gets+0x62>
		if (rc != 1) break;
 800f552:	bf00      	nop
 800f554:	e000      	b.n	800f558 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800f556:	bf00      	nop
	}
	*p = 0;
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	2200      	movs	r2, #0
 800f55c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800f55e:	69fb      	ldr	r3, [r7, #28]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d001      	beq.n	800f568 <f_gets+0x72>
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	e000      	b.n	800f56a <f_gets+0x74>
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3720      	adds	r7, #32
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f574:	b480      	push	{r7}
 800f576:	b087      	sub	sp, #28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	4613      	mov	r3, r2
 800f580:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f582:	2301      	movs	r3, #1
 800f584:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f586:	2300      	movs	r3, #0
 800f588:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f58a:	4b1f      	ldr	r3, [pc, #124]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f58c:	7a5b      	ldrb	r3, [r3, #9]
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	2b00      	cmp	r3, #0
 800f592:	d131      	bne.n	800f5f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f594:	4b1c      	ldr	r3, [pc, #112]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f596:	7a5b      	ldrb	r3, [r3, #9]
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	461a      	mov	r2, r3
 800f59c:	4b1a      	ldr	r3, [pc, #104]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f59e:	2100      	movs	r1, #0
 800f5a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f5a2:	4b19      	ldr	r3, [pc, #100]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f5a4:	7a5b      	ldrb	r3, [r3, #9]
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	4a17      	ldr	r2, [pc, #92]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	4413      	add	r3, r2
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f5b2:	4b15      	ldr	r3, [pc, #84]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f5b4:	7a5b      	ldrb	r3, [r3, #9]
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	4b13      	ldr	r3, [pc, #76]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f5bc:	4413      	add	r3, r2
 800f5be:	79fa      	ldrb	r2, [r7, #7]
 800f5c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f5c2:	4b11      	ldr	r3, [pc, #68]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f5c4:	7a5b      	ldrb	r3, [r3, #9]
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	1c5a      	adds	r2, r3, #1
 800f5ca:	b2d1      	uxtb	r1, r2
 800f5cc:	4a0e      	ldr	r2, [pc, #56]	@ (800f608 <FATFS_LinkDriverEx+0x94>)
 800f5ce:	7251      	strb	r1, [r2, #9]
 800f5d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f5d2:	7dbb      	ldrb	r3, [r7, #22]
 800f5d4:	3330      	adds	r3, #48	@ 0x30
 800f5d6:	b2da      	uxtb	r2, r3
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	223a      	movs	r2, #58	@ 0x3a
 800f5e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	3302      	adds	r3, #2
 800f5e8:	222f      	movs	r2, #47	@ 0x2f
 800f5ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	3303      	adds	r3, #3
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f5f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	371c      	adds	r7, #28
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	20002f70 	.word	0x20002f70

0800f60c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f616:	2200      	movs	r2, #0
 800f618:	6839      	ldr	r1, [r7, #0]
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f7ff ffaa 	bl	800f574 <FATFS_LinkDriverEx>
 800f620:	4603      	mov	r3, r0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
	...

0800f62c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
 800f632:	4603      	mov	r3, r0
 800f634:	6039      	str	r1, [r7, #0]
 800f636:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f638:	88fb      	ldrh	r3, [r7, #6]
 800f63a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f63c:	d802      	bhi.n	800f644 <ff_convert+0x18>
		c = chr;
 800f63e:	88fb      	ldrh	r3, [r7, #6]
 800f640:	81fb      	strh	r3, [r7, #14]
 800f642:	e025      	b.n	800f690 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00b      	beq.n	800f662 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f64a:	88fb      	ldrh	r3, [r7, #6]
 800f64c:	2bff      	cmp	r3, #255	@ 0xff
 800f64e:	d805      	bhi.n	800f65c <ff_convert+0x30>
 800f650:	88fb      	ldrh	r3, [r7, #6]
 800f652:	3b80      	subs	r3, #128	@ 0x80
 800f654:	4a12      	ldr	r2, [pc, #72]	@ (800f6a0 <ff_convert+0x74>)
 800f656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f65a:	e000      	b.n	800f65e <ff_convert+0x32>
 800f65c:	2300      	movs	r3, #0
 800f65e:	81fb      	strh	r3, [r7, #14]
 800f660:	e016      	b.n	800f690 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f662:	2300      	movs	r3, #0
 800f664:	81fb      	strh	r3, [r7, #14]
 800f666:	e009      	b.n	800f67c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f668:	89fb      	ldrh	r3, [r7, #14]
 800f66a:	4a0d      	ldr	r2, [pc, #52]	@ (800f6a0 <ff_convert+0x74>)
 800f66c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f670:	88fa      	ldrh	r2, [r7, #6]
 800f672:	429a      	cmp	r2, r3
 800f674:	d006      	beq.n	800f684 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f676:	89fb      	ldrh	r3, [r7, #14]
 800f678:	3301      	adds	r3, #1
 800f67a:	81fb      	strh	r3, [r7, #14]
 800f67c:	89fb      	ldrh	r3, [r7, #14]
 800f67e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f680:	d9f2      	bls.n	800f668 <ff_convert+0x3c>
 800f682:	e000      	b.n	800f686 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f684:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f686:	89fb      	ldrh	r3, [r7, #14]
 800f688:	3380      	adds	r3, #128	@ 0x80
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f690:	89fb      	ldrh	r3, [r7, #14]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	08018c34 	.word	0x08018c34

0800f6a4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b087      	sub	sp, #28
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f6ae:	88fb      	ldrh	r3, [r7, #6]
 800f6b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f6b4:	d201      	bcs.n	800f6ba <ff_wtoupper+0x16>
 800f6b6:	4b3e      	ldr	r3, [pc, #248]	@ (800f7b0 <ff_wtoupper+0x10c>)
 800f6b8:	e000      	b.n	800f6bc <ff_wtoupper+0x18>
 800f6ba:	4b3e      	ldr	r3, [pc, #248]	@ (800f7b4 <ff_wtoupper+0x110>)
 800f6bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	1c9a      	adds	r2, r3, #2
 800f6c2:	617a      	str	r2, [r7, #20]
 800f6c4:	881b      	ldrh	r3, [r3, #0]
 800f6c6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f6c8:	8a7b      	ldrh	r3, [r7, #18]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d068      	beq.n	800f7a0 <ff_wtoupper+0xfc>
 800f6ce:	88fa      	ldrh	r2, [r7, #6]
 800f6d0:	8a7b      	ldrh	r3, [r7, #18]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d364      	bcc.n	800f7a0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	1c9a      	adds	r2, r3, #2
 800f6da:	617a      	str	r2, [r7, #20]
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	823b      	strh	r3, [r7, #16]
 800f6e0:	8a3b      	ldrh	r3, [r7, #16]
 800f6e2:	0a1b      	lsrs	r3, r3, #8
 800f6e4:	81fb      	strh	r3, [r7, #14]
 800f6e6:	8a3b      	ldrh	r3, [r7, #16]
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f6ec:	88fa      	ldrh	r2, [r7, #6]
 800f6ee:	8a79      	ldrh	r1, [r7, #18]
 800f6f0:	8a3b      	ldrh	r3, [r7, #16]
 800f6f2:	440b      	add	r3, r1
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	da49      	bge.n	800f78c <ff_wtoupper+0xe8>
			switch (cmd) {
 800f6f8:	89fb      	ldrh	r3, [r7, #14]
 800f6fa:	2b08      	cmp	r3, #8
 800f6fc:	d84f      	bhi.n	800f79e <ff_wtoupper+0xfa>
 800f6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f704 <ff_wtoupper+0x60>)
 800f700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f704:	0800f729 	.word	0x0800f729
 800f708:	0800f73b 	.word	0x0800f73b
 800f70c:	0800f751 	.word	0x0800f751
 800f710:	0800f759 	.word	0x0800f759
 800f714:	0800f761 	.word	0x0800f761
 800f718:	0800f769 	.word	0x0800f769
 800f71c:	0800f771 	.word	0x0800f771
 800f720:	0800f779 	.word	0x0800f779
 800f724:	0800f781 	.word	0x0800f781
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f728:	88fa      	ldrh	r2, [r7, #6]
 800f72a:	8a7b      	ldrh	r3, [r7, #18]
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	005b      	lsls	r3, r3, #1
 800f730:	697a      	ldr	r2, [r7, #20]
 800f732:	4413      	add	r3, r2
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	80fb      	strh	r3, [r7, #6]
 800f738:	e027      	b.n	800f78a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f73a:	88fa      	ldrh	r2, [r7, #6]
 800f73c:	8a7b      	ldrh	r3, [r7, #18]
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	b29b      	uxth	r3, r3
 800f742:	f003 0301 	and.w	r3, r3, #1
 800f746:	b29b      	uxth	r3, r3
 800f748:	88fa      	ldrh	r2, [r7, #6]
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	80fb      	strh	r3, [r7, #6]
 800f74e:	e01c      	b.n	800f78a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f750:	88fb      	ldrh	r3, [r7, #6]
 800f752:	3b10      	subs	r3, #16
 800f754:	80fb      	strh	r3, [r7, #6]
 800f756:	e018      	b.n	800f78a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f758:	88fb      	ldrh	r3, [r7, #6]
 800f75a:	3b20      	subs	r3, #32
 800f75c:	80fb      	strh	r3, [r7, #6]
 800f75e:	e014      	b.n	800f78a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f760:	88fb      	ldrh	r3, [r7, #6]
 800f762:	3b30      	subs	r3, #48	@ 0x30
 800f764:	80fb      	strh	r3, [r7, #6]
 800f766:	e010      	b.n	800f78a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f768:	88fb      	ldrh	r3, [r7, #6]
 800f76a:	3b1a      	subs	r3, #26
 800f76c:	80fb      	strh	r3, [r7, #6]
 800f76e:	e00c      	b.n	800f78a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f770:	88fb      	ldrh	r3, [r7, #6]
 800f772:	3308      	adds	r3, #8
 800f774:	80fb      	strh	r3, [r7, #6]
 800f776:	e008      	b.n	800f78a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f778:	88fb      	ldrh	r3, [r7, #6]
 800f77a:	3b50      	subs	r3, #80	@ 0x50
 800f77c:	80fb      	strh	r3, [r7, #6]
 800f77e:	e004      	b.n	800f78a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f780:	88fb      	ldrh	r3, [r7, #6]
 800f782:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f786:	80fb      	strh	r3, [r7, #6]
 800f788:	bf00      	nop
			}
			break;
 800f78a:	e008      	b.n	800f79e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f78c:	89fb      	ldrh	r3, [r7, #14]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d195      	bne.n	800f6be <ff_wtoupper+0x1a>
 800f792:	8a3b      	ldrh	r3, [r7, #16]
 800f794:	005b      	lsls	r3, r3, #1
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	4413      	add	r3, r2
 800f79a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f79c:	e78f      	b.n	800f6be <ff_wtoupper+0x1a>
			break;
 800f79e:	bf00      	nop
	}

	return chr;
 800f7a0:	88fb      	ldrh	r3, [r7, #6]
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	371c      	adds	r7, #28
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	08018d34 	.word	0x08018d34
 800f7b4:	08018f28 	.word	0x08018f28

0800f7b8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	4603      	mov	r3, r0
 800f7c0:	6039      	str	r1, [r7, #0]
 800f7c2:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f7c8:	f107 0308 	add.w	r3, r7, #8
 800f7cc:	2101      	movs	r1, #1
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f000 f865 	bl	800f89e <osSemaphoreCreate>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	bf14      	ite	ne
 800f7e2:	2301      	movne	r3, #1
 800f7e4:	2300      	moveq	r3, #0
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	60fb      	str	r3, [r7, #12]

    return ret;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3710      	adds	r7, #16
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}

0800f7f4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f000 f8f1 	bl	800f9e4 <osSemaphoreDelete>
#endif
    return 1;
 800f802:	2301      	movs	r3, #1
}
 800f804:	4618      	mov	r0, r3
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f814:	2300      	movs	r3, #0
 800f816:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f818:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f000 f85d 	bl	800f8dc <osSemaphoreWait>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	d101      	bne.n	800f82c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f828:	2301      	movs	r3, #1
 800f82a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f82c:	68fb      	ldr	r3, [r7, #12]
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3710      	adds	r7, #16
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f836:	b580      	push	{r7, lr}
 800f838:	b082      	sub	sp, #8
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 f89a 	bl	800f978 <osSemaphoreRelease>
#endif
}
 800f844:	bf00      	nop
 800f846:	3708      	adds	r7, #8
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f002 f989 	bl	8011b6c <pvPortMalloc>
 800f85a:	4603      	mov	r3, r0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f002 fa4b 	bl	8011d08 <vPortFree>
}
 800f872:	bf00      	nop
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}

0800f87a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f87a:	b480      	push	{r7}
 800f87c:	b083      	sub	sp, #12
 800f87e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f880:	f3ef 8305 	mrs	r3, IPSR
 800f884:	607b      	str	r3, [r7, #4]
  return(result);
 800f886:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f888:	2b00      	cmp	r3, #0
 800f88a:	bf14      	ite	ne
 800f88c:	2301      	movne	r3, #1
 800f88e:	2300      	moveq	r3, #0
 800f890:	b2db      	uxtb	r3, r3
}
 800f892:	4618      	mov	r0, r3
 800f894:	370c      	adds	r7, #12
 800f896:	46bd      	mov	sp, r7
 800f898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89c:	4770      	bx	lr

0800f89e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b084      	sub	sp, #16
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
 800f8a6:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	2b01      	cmp	r3, #1
 800f8ac:	d110      	bne.n	800f8d0 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800f8ae:	2203      	movs	r2, #3
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	2001      	movs	r0, #1
 800f8b4:	f000 f9c8 	bl	800fc48 <xQueueGenericCreate>
 800f8b8:	60f8      	str	r0, [r7, #12]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d005      	beq.n	800f8cc <osSemaphoreCreate+0x2e>
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	68f8      	ldr	r0, [r7, #12]
 800f8c8:	f000 fa14 	bl	800fcf4 <xQueueGenericSend>
    return sema;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	e000      	b.n	800f8d2 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800f8d0:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3710      	adds	r7, #16
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d101      	bne.n	800f8f4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f8f0:	2380      	movs	r3, #128	@ 0x80
 800f8f2:	e03a      	b.n	800f96a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8fe:	d103      	bne.n	800f908 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f900:	f04f 33ff 	mov.w	r3, #4294967295
 800f904:	60fb      	str	r3, [r7, #12]
 800f906:	e009      	b.n	800f91c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d006      	beq.n	800f91c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d101      	bne.n	800f91c <osSemaphoreWait+0x40>
      ticks = 1;
 800f918:	2301      	movs	r3, #1
 800f91a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f91c:	f7ff ffad 	bl	800f87a <inHandlerMode>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d017      	beq.n	800f956 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f926:	f107 0308 	add.w	r3, r7, #8
 800f92a:	461a      	mov	r2, r3
 800f92c:	2100      	movs	r1, #0
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 fd64 	bl	80103fc <xQueueReceiveFromISR>
 800f934:	4603      	mov	r3, r0
 800f936:	2b01      	cmp	r3, #1
 800f938:	d001      	beq.n	800f93e <osSemaphoreWait+0x62>
      return osErrorOS;
 800f93a:	23ff      	movs	r3, #255	@ 0xff
 800f93c:	e015      	b.n	800f96a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d011      	beq.n	800f968 <osSemaphoreWait+0x8c>
 800f944:	4b0b      	ldr	r3, [pc, #44]	@ (800f974 <osSemaphoreWait+0x98>)
 800f946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f94a:	601a      	str	r2, [r3, #0]
 800f94c:	f3bf 8f4f 	dsb	sy
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	e008      	b.n	800f968 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f956:	68f9      	ldr	r1, [r7, #12]
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 fc3f 	bl	80101dc <xQueueSemaphoreTake>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b01      	cmp	r3, #1
 800f962:	d001      	beq.n	800f968 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f964:	23ff      	movs	r3, #255	@ 0xff
 800f966:	e000      	b.n	800f96a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f968:	2300      	movs	r3, #0
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	e000ed04 	.word	0xe000ed04

0800f978 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f980:	2300      	movs	r3, #0
 800f982:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f984:	2300      	movs	r3, #0
 800f986:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f988:	f7ff ff77 	bl	800f87a <inHandlerMode>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d016      	beq.n	800f9c0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f992:	f107 0308 	add.w	r3, r7, #8
 800f996:	4619      	mov	r1, r3
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f000 faad 	bl	800fef8 <xQueueGiveFromISR>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d001      	beq.n	800f9a8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f9a4:	23ff      	movs	r3, #255	@ 0xff
 800f9a6:	e017      	b.n	800f9d8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d013      	beq.n	800f9d6 <osSemaphoreRelease+0x5e>
 800f9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e0 <osSemaphoreRelease+0x68>)
 800f9b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9b4:	601a      	str	r2, [r3, #0]
 800f9b6:	f3bf 8f4f 	dsb	sy
 800f9ba:	f3bf 8f6f 	isb	sy
 800f9be:	e00a      	b.n	800f9d6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	2100      	movs	r1, #0
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f994 	bl	800fcf4 <xQueueGenericSend>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b01      	cmp	r3, #1
 800f9d0:	d001      	beq.n	800f9d6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f9d2:	23ff      	movs	r3, #255	@ 0xff
 800f9d4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	e000ed04 	.word	0xe000ed04

0800f9e4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f9ec:	f7ff ff45 	bl	800f87a <inHandlerMode>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f9f6:	2382      	movs	r3, #130	@ 0x82
 800f9f8:	e003      	b.n	800fa02 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fd80 	bl	8010500 <vQueueDelete>

  return osOK; 
 800fa00:	2300      	movs	r3, #0
}
 800fa02:	4618      	mov	r0, r3
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f103 0208 	add.w	r2, r3, #8
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa22:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f103 0208 	add.w	r2, r3, #8
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f103 0208 	add.w	r2, r3, #8
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fa3e:	bf00      	nop
 800fa40:	370c      	adds	r7, #12
 800fa42:	46bd      	mov	sp, r7
 800fa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa48:	4770      	bx	lr

0800fa4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fa4a:	b480      	push	{r7}
 800fa4c:	b083      	sub	sp, #12
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fa58:	bf00      	nop
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	689a      	ldr	r2, [r3, #8]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	689b      	ldr	r3, [r3, #8]
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	683a      	ldr	r2, [r7, #0]
 800fa8e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	1c5a      	adds	r2, r3, #1
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	601a      	str	r2, [r3, #0]
}
 800faa0:	bf00      	nop
 800faa2:	3714      	adds	r7, #20
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800faac:	b480      	push	{r7}
 800faae:	b085      	sub	sp, #20
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fac2:	d103      	bne.n	800facc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	691b      	ldr	r3, [r3, #16]
 800fac8:	60fb      	str	r3, [r7, #12]
 800faca:	e00c      	b.n	800fae6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	3308      	adds	r3, #8
 800fad0:	60fb      	str	r3, [r7, #12]
 800fad2:	e002      	b.n	800fada <vListInsert+0x2e>
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	60fb      	str	r3, [r7, #12]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d2f6      	bcs.n	800fad4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	685a      	ldr	r2, [r3, #4]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	683a      	ldr	r2, [r7, #0]
 800fb00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	1c5a      	adds	r2, r3, #1
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	601a      	str	r2, [r3, #0]
}
 800fb12:	bf00      	nop
 800fb14:	3714      	adds	r7, #20
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr

0800fb1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fb1e:	b480      	push	{r7}
 800fb20:	b085      	sub	sp, #20
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	6892      	ldr	r2, [r2, #8]
 800fb34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	689b      	ldr	r3, [r3, #8]
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	6852      	ldr	r2, [r2, #4]
 800fb3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d103      	bne.n	800fb52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	689a      	ldr	r2, [r3, #8]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	1e5a      	subs	r2, r3, #1
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3714      	adds	r7, #20
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb70:	4770      	bx	lr
	...

0800fb74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d10b      	bne.n	800fba0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb8c:	f383 8811 	msr	BASEPRI, r3
 800fb90:	f3bf 8f6f 	isb	sy
 800fb94:	f3bf 8f4f 	dsb	sy
 800fb98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fb9a:	bf00      	nop
 800fb9c:	bf00      	nop
 800fb9e:	e7fd      	b.n	800fb9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fba0:	f001 fec2 	bl	8011928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	681a      	ldr	r2, [r3, #0]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbac:	68f9      	ldr	r1, [r7, #12]
 800fbae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fbb0:	fb01 f303 	mul.w	r3, r1, r3
 800fbb4:	441a      	add	r2, r3
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	68f9      	ldr	r1, [r7, #12]
 800fbd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fbd6:	fb01 f303 	mul.w	r3, r1, r3
 800fbda:	441a      	add	r2, r3
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	22ff      	movs	r2, #255	@ 0xff
 800fbe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	22ff      	movs	r2, #255	@ 0xff
 800fbec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d114      	bne.n	800fc20 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	691b      	ldr	r3, [r3, #16]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d01a      	beq.n	800fc34 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	3310      	adds	r3, #16
 800fc02:	4618      	mov	r0, r3
 800fc04:	f001 f998 	bl	8010f38 <xTaskRemoveFromEventList>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d012      	beq.n	800fc34 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fc0e:	4b0d      	ldr	r3, [pc, #52]	@ (800fc44 <xQueueGenericReset+0xd0>)
 800fc10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc14:	601a      	str	r2, [r3, #0]
 800fc16:	f3bf 8f4f 	dsb	sy
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	e009      	b.n	800fc34 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	3310      	adds	r3, #16
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7ff fef0 	bl	800fa0a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	3324      	adds	r3, #36	@ 0x24
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7ff feeb 	bl	800fa0a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fc34:	f001 feaa 	bl	801198c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fc38:	2301      	movs	r3, #1
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	e000ed04 	.word	0xe000ed04

0800fc48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b08a      	sub	sp, #40	@ 0x28
 800fc4c:	af02      	add	r7, sp, #8
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	4613      	mov	r3, r2
 800fc54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d10b      	bne.n	800fc74 <xQueueGenericCreate+0x2c>
	__asm volatile
 800fc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc60:	f383 8811 	msr	BASEPRI, r3
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	f3bf 8f4f 	dsb	sy
 800fc6c:	613b      	str	r3, [r7, #16]
}
 800fc6e:	bf00      	nop
 800fc70:	bf00      	nop
 800fc72:	e7fd      	b.n	800fc70 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	68ba      	ldr	r2, [r7, #8]
 800fc78:	fb02 f303 	mul.w	r3, r2, r3
 800fc7c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	3348      	adds	r3, #72	@ 0x48
 800fc82:	4618      	mov	r0, r3
 800fc84:	f001 ff72 	bl	8011b6c <pvPortMalloc>
 800fc88:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d00d      	beq.n	800fcac <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	3348      	adds	r3, #72	@ 0x48
 800fc98:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fc9a:	79fa      	ldrb	r2, [r7, #7]
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	9300      	str	r3, [sp, #0]
 800fca0:	4613      	mov	r3, r2
 800fca2:	697a      	ldr	r2, [r7, #20]
 800fca4:	68b9      	ldr	r1, [r7, #8]
 800fca6:	68f8      	ldr	r0, [r7, #12]
 800fca8:	f000 f805 	bl	800fcb6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fcac:	69bb      	ldr	r3, [r7, #24]
	}
 800fcae:	4618      	mov	r0, r3
 800fcb0:	3720      	adds	r7, #32
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fcb6:	b580      	push	{r7, lr}
 800fcb8:	b084      	sub	sp, #16
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	60f8      	str	r0, [r7, #12]
 800fcbe:	60b9      	str	r1, [r7, #8]
 800fcc0:	607a      	str	r2, [r7, #4]
 800fcc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d103      	bne.n	800fcd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	69ba      	ldr	r2, [r7, #24]
 800fcce:	601a      	str	r2, [r3, #0]
 800fcd0:	e002      	b.n	800fcd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fcd2:	69bb      	ldr	r3, [r7, #24]
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fcd8:	69bb      	ldr	r3, [r7, #24]
 800fcda:	68fa      	ldr	r2, [r7, #12]
 800fcdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fcde:	69bb      	ldr	r3, [r7, #24]
 800fce0:	68ba      	ldr	r2, [r7, #8]
 800fce2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fce4:	2101      	movs	r1, #1
 800fce6:	69b8      	ldr	r0, [r7, #24]
 800fce8:	f7ff ff44 	bl	800fb74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fcec:	bf00      	nop
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b08e      	sub	sp, #56	@ 0x38
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
 800fd00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fd02:	2300      	movs	r3, #0
 800fd04:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10b      	bne.n	800fd28 <xQueueGenericSend+0x34>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
 800fd20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fd22:	bf00      	nop
 800fd24:	bf00      	nop
 800fd26:	e7fd      	b.n	800fd24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d103      	bne.n	800fd36 <xQueueGenericSend+0x42>
 800fd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <xQueueGenericSend+0x46>
 800fd36:	2301      	movs	r3, #1
 800fd38:	e000      	b.n	800fd3c <xQueueGenericSend+0x48>
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10b      	bne.n	800fd58 <xQueueGenericSend+0x64>
	__asm volatile
 800fd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd44:	f383 8811 	msr	BASEPRI, r3
 800fd48:	f3bf 8f6f 	isb	sy
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fd52:	bf00      	nop
 800fd54:	bf00      	nop
 800fd56:	e7fd      	b.n	800fd54 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	2b02      	cmp	r3, #2
 800fd5c:	d103      	bne.n	800fd66 <xQueueGenericSend+0x72>
 800fd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d101      	bne.n	800fd6a <xQueueGenericSend+0x76>
 800fd66:	2301      	movs	r3, #1
 800fd68:	e000      	b.n	800fd6c <xQueueGenericSend+0x78>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10b      	bne.n	800fd88 <xQueueGenericSend+0x94>
	__asm volatile
 800fd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	623b      	str	r3, [r7, #32]
}
 800fd82:	bf00      	nop
 800fd84:	bf00      	nop
 800fd86:	e7fd      	b.n	800fd84 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fd88:	f001 fa76 	bl	8011278 <xTaskGetSchedulerState>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d102      	bne.n	800fd98 <xQueueGenericSend+0xa4>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d101      	bne.n	800fd9c <xQueueGenericSend+0xa8>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e000      	b.n	800fd9e <xQueueGenericSend+0xaa>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d10b      	bne.n	800fdba <xQueueGenericSend+0xc6>
	__asm volatile
 800fda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	61fb      	str	r3, [r7, #28]
}
 800fdb4:	bf00      	nop
 800fdb6:	bf00      	nop
 800fdb8:	e7fd      	b.n	800fdb6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fdba:	f001 fdb5 	bl	8011928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d302      	bcc.n	800fdd0 <xQueueGenericSend+0xdc>
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d129      	bne.n	800fe24 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fdd0:	683a      	ldr	r2, [r7, #0]
 800fdd2:	68b9      	ldr	r1, [r7, #8]
 800fdd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fdd6:	f000 fbca 	bl	801056e <prvCopyDataToQueue>
 800fdda:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d010      	beq.n	800fe06 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde6:	3324      	adds	r3, #36	@ 0x24
 800fde8:	4618      	mov	r0, r3
 800fdea:	f001 f8a5 	bl	8010f38 <xTaskRemoveFromEventList>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d013      	beq.n	800fe1c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fdf4:	4b3f      	ldr	r3, [pc, #252]	@ (800fef4 <xQueueGenericSend+0x200>)
 800fdf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fdfa:	601a      	str	r2, [r3, #0]
 800fdfc:	f3bf 8f4f 	dsb	sy
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	e00a      	b.n	800fe1c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fe06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d007      	beq.n	800fe1c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fe0c:	4b39      	ldr	r3, [pc, #228]	@ (800fef4 <xQueueGenericSend+0x200>)
 800fe0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe12:	601a      	str	r2, [r3, #0]
 800fe14:	f3bf 8f4f 	dsb	sy
 800fe18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fe1c:	f001 fdb6 	bl	801198c <vPortExitCritical>
				return pdPASS;
 800fe20:	2301      	movs	r3, #1
 800fe22:	e063      	b.n	800feec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d103      	bne.n	800fe32 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fe2a:	f001 fdaf 	bl	801198c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	e05c      	b.n	800feec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d106      	bne.n	800fe46 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe38:	f107 0314 	add.w	r3, r7, #20
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f001 f8df 	bl	8011000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe42:	2301      	movs	r3, #1
 800fe44:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe46:	f001 fda1 	bl	801198c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fe4a:	f000 fe7d 	bl	8010b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fe4e:	f001 fd6b 	bl	8011928 <vPortEnterCritical>
 800fe52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fe58:	b25b      	sxtb	r3, r3
 800fe5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe5e:	d103      	bne.n	800fe68 <xQueueGenericSend+0x174>
 800fe60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe62:	2200      	movs	r2, #0
 800fe64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fe68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fe6e:	b25b      	sxtb	r3, r3
 800fe70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe74:	d103      	bne.n	800fe7e <xQueueGenericSend+0x18a>
 800fe76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe78:	2200      	movs	r2, #0
 800fe7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fe7e:	f001 fd85 	bl	801198c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fe82:	1d3a      	adds	r2, r7, #4
 800fe84:	f107 0314 	add.w	r3, r7, #20
 800fe88:	4611      	mov	r1, r2
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f001 f8ce 	bl	801102c <xTaskCheckForTimeOut>
 800fe90:	4603      	mov	r3, r0
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d124      	bne.n	800fee0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fe96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fe98:	f000 fc61 	bl	801075e <prvIsQueueFull>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d018      	beq.n	800fed4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea4:	3310      	adds	r3, #16
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	4611      	mov	r1, r2
 800feaa:	4618      	mov	r0, r3
 800feac:	f001 f81e 	bl	8010eec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800feb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800feb2:	f000 fbec 	bl	801068e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800feb6:	f000 fe55 	bl	8010b64 <xTaskResumeAll>
 800feba:	4603      	mov	r3, r0
 800febc:	2b00      	cmp	r3, #0
 800febe:	f47f af7c 	bne.w	800fdba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fec2:	4b0c      	ldr	r3, [pc, #48]	@ (800fef4 <xQueueGenericSend+0x200>)
 800fec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fec8:	601a      	str	r2, [r3, #0]
 800feca:	f3bf 8f4f 	dsb	sy
 800fece:	f3bf 8f6f 	isb	sy
 800fed2:	e772      	b.n	800fdba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fed6:	f000 fbda 	bl	801068e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800feda:	f000 fe43 	bl	8010b64 <xTaskResumeAll>
 800fede:	e76c      	b.n	800fdba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fee2:	f000 fbd4 	bl	801068e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fee6:	f000 fe3d 	bl	8010b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800feea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800feec:	4618      	mov	r0, r3
 800feee:	3738      	adds	r7, #56	@ 0x38
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	e000ed04 	.word	0xe000ed04

0800fef8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b08e      	sub	sp, #56	@ 0x38
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ff06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d10b      	bne.n	800ff24 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800ff0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff10:	f383 8811 	msr	BASEPRI, r3
 800ff14:	f3bf 8f6f 	isb	sy
 800ff18:	f3bf 8f4f 	dsb	sy
 800ff1c:	623b      	str	r3, [r7, #32]
}
 800ff1e:	bf00      	nop
 800ff20:	bf00      	nop
 800ff22:	e7fd      	b.n	800ff20 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ff24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00b      	beq.n	800ff44 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800ff2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff30:	f383 8811 	msr	BASEPRI, r3
 800ff34:	f3bf 8f6f 	isb	sy
 800ff38:	f3bf 8f4f 	dsb	sy
 800ff3c:	61fb      	str	r3, [r7, #28]
}
 800ff3e:	bf00      	nop
 800ff40:	bf00      	nop
 800ff42:	e7fd      	b.n	800ff40 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ff44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d103      	bne.n	800ff54 <xQueueGiveFromISR+0x5c>
 800ff4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d101      	bne.n	800ff58 <xQueueGiveFromISR+0x60>
 800ff54:	2301      	movs	r3, #1
 800ff56:	e000      	b.n	800ff5a <xQueueGiveFromISR+0x62>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d10b      	bne.n	800ff76 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800ff5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	61bb      	str	r3, [r7, #24]
}
 800ff70:	bf00      	nop
 800ff72:	bf00      	nop
 800ff74:	e7fd      	b.n	800ff72 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff76:	f001 fdb7 	bl	8011ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ff7a:	f3ef 8211 	mrs	r2, BASEPRI
 800ff7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff82:	f383 8811 	msr	BASEPRI, r3
 800ff86:	f3bf 8f6f 	isb	sy
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	617a      	str	r2, [r7, #20]
 800ff90:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ff92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ff9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d22b      	bcs.n	800fffe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ffa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ffac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ffb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffb2:	1c5a      	adds	r2, r3, #1
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ffb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ffbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc0:	d112      	bne.n	800ffe8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d016      	beq.n	800fff8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffcc:	3324      	adds	r3, #36	@ 0x24
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 ffb2 	bl	8010f38 <xTaskRemoveFromEventList>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00e      	beq.n	800fff8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00b      	beq.n	800fff8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	601a      	str	r2, [r3, #0]
 800ffe6:	e007      	b.n	800fff8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ffe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ffec:	3301      	adds	r3, #1
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	b25a      	sxtb	r2, r3
 800fff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fff8:	2301      	movs	r3, #1
 800fffa:	637b      	str	r3, [r7, #52]	@ 0x34
 800fffc:	e001      	b.n	8010002 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	637b      	str	r3, [r7, #52]	@ 0x34
 8010002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010004:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801000c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801000e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010010:	4618      	mov	r0, r3
 8010012:	3738      	adds	r7, #56	@ 0x38
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b08c      	sub	sp, #48	@ 0x30
 801001c:	af00      	add	r7, sp, #0
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010024:	2300      	movs	r3, #0
 8010026:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801002c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10b      	bne.n	801004a <xQueueReceive+0x32>
	__asm volatile
 8010032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010036:	f383 8811 	msr	BASEPRI, r3
 801003a:	f3bf 8f6f 	isb	sy
 801003e:	f3bf 8f4f 	dsb	sy
 8010042:	623b      	str	r3, [r7, #32]
}
 8010044:	bf00      	nop
 8010046:	bf00      	nop
 8010048:	e7fd      	b.n	8010046 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801004a:	68bb      	ldr	r3, [r7, #8]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d103      	bne.n	8010058 <xQueueReceive+0x40>
 8010050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010054:	2b00      	cmp	r3, #0
 8010056:	d101      	bne.n	801005c <xQueueReceive+0x44>
 8010058:	2301      	movs	r3, #1
 801005a:	e000      	b.n	801005e <xQueueReceive+0x46>
 801005c:	2300      	movs	r3, #0
 801005e:	2b00      	cmp	r3, #0
 8010060:	d10b      	bne.n	801007a <xQueueReceive+0x62>
	__asm volatile
 8010062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010066:	f383 8811 	msr	BASEPRI, r3
 801006a:	f3bf 8f6f 	isb	sy
 801006e:	f3bf 8f4f 	dsb	sy
 8010072:	61fb      	str	r3, [r7, #28]
}
 8010074:	bf00      	nop
 8010076:	bf00      	nop
 8010078:	e7fd      	b.n	8010076 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801007a:	f001 f8fd 	bl	8011278 <xTaskGetSchedulerState>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d102      	bne.n	801008a <xQueueReceive+0x72>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d101      	bne.n	801008e <xQueueReceive+0x76>
 801008a:	2301      	movs	r3, #1
 801008c:	e000      	b.n	8010090 <xQueueReceive+0x78>
 801008e:	2300      	movs	r3, #0
 8010090:	2b00      	cmp	r3, #0
 8010092:	d10b      	bne.n	80100ac <xQueueReceive+0x94>
	__asm volatile
 8010094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010098:	f383 8811 	msr	BASEPRI, r3
 801009c:	f3bf 8f6f 	isb	sy
 80100a0:	f3bf 8f4f 	dsb	sy
 80100a4:	61bb      	str	r3, [r7, #24]
}
 80100a6:	bf00      	nop
 80100a8:	bf00      	nop
 80100aa:	e7fd      	b.n	80100a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100ac:	f001 fc3c 	bl	8011928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d01f      	beq.n	80100fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80100bc:	68b9      	ldr	r1, [r7, #8]
 80100be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100c0:	f000 fabf 	bl	8010642 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80100c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c6:	1e5a      	subs	r2, r3, #1
 80100c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ce:	691b      	ldr	r3, [r3, #16]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d00f      	beq.n	80100f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d6:	3310      	adds	r3, #16
 80100d8:	4618      	mov	r0, r3
 80100da:	f000 ff2d 	bl	8010f38 <xTaskRemoveFromEventList>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d007      	beq.n	80100f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80100e4:	4b3c      	ldr	r3, [pc, #240]	@ (80101d8 <xQueueReceive+0x1c0>)
 80100e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80100f4:	f001 fc4a 	bl	801198c <vPortExitCritical>
				return pdPASS;
 80100f8:	2301      	movs	r3, #1
 80100fa:	e069      	b.n	80101d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d103      	bne.n	801010a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010102:	f001 fc43 	bl	801198c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010106:	2300      	movs	r3, #0
 8010108:	e062      	b.n	80101d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801010a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801010c:	2b00      	cmp	r3, #0
 801010e:	d106      	bne.n	801011e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010110:	f107 0310 	add.w	r3, r7, #16
 8010114:	4618      	mov	r0, r3
 8010116:	f000 ff73 	bl	8011000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801011a:	2301      	movs	r3, #1
 801011c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801011e:	f001 fc35 	bl	801198c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010122:	f000 fd11 	bl	8010b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010126:	f001 fbff 	bl	8011928 <vPortEnterCritical>
 801012a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801012c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010130:	b25b      	sxtb	r3, r3
 8010132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010136:	d103      	bne.n	8010140 <xQueueReceive+0x128>
 8010138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801013a:	2200      	movs	r2, #0
 801013c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010142:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010146:	b25b      	sxtb	r3, r3
 8010148:	f1b3 3fff 	cmp.w	r3, #4294967295
 801014c:	d103      	bne.n	8010156 <xQueueReceive+0x13e>
 801014e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010150:	2200      	movs	r2, #0
 8010152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010156:	f001 fc19 	bl	801198c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801015a:	1d3a      	adds	r2, r7, #4
 801015c:	f107 0310 	add.w	r3, r7, #16
 8010160:	4611      	mov	r1, r2
 8010162:	4618      	mov	r0, r3
 8010164:	f000 ff62 	bl	801102c <xTaskCheckForTimeOut>
 8010168:	4603      	mov	r3, r0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d123      	bne.n	80101b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801016e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010170:	f000 fadf 	bl	8010732 <prvIsQueueEmpty>
 8010174:	4603      	mov	r3, r0
 8010176:	2b00      	cmp	r3, #0
 8010178:	d017      	beq.n	80101aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801017a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801017c:	3324      	adds	r3, #36	@ 0x24
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	4611      	mov	r1, r2
 8010182:	4618      	mov	r0, r3
 8010184:	f000 feb2 	bl	8010eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801018a:	f000 fa80 	bl	801068e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801018e:	f000 fce9 	bl	8010b64 <xTaskResumeAll>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d189      	bne.n	80100ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010198:	4b0f      	ldr	r3, [pc, #60]	@ (80101d8 <xQueueReceive+0x1c0>)
 801019a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801019e:	601a      	str	r2, [r3, #0]
 80101a0:	f3bf 8f4f 	dsb	sy
 80101a4:	f3bf 8f6f 	isb	sy
 80101a8:	e780      	b.n	80100ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80101aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101ac:	f000 fa6f 	bl	801068e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101b0:	f000 fcd8 	bl	8010b64 <xTaskResumeAll>
 80101b4:	e77a      	b.n	80100ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80101b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101b8:	f000 fa69 	bl	801068e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101bc:	f000 fcd2 	bl	8010b64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101c2:	f000 fab6 	bl	8010732 <prvIsQueueEmpty>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f43f af6f 	beq.w	80100ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80101ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3730      	adds	r7, #48	@ 0x30
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	e000ed04 	.word	0xe000ed04

080101dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b08e      	sub	sp, #56	@ 0x38
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80101e6:	2300      	movs	r3, #0
 80101e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80101ee:	2300      	movs	r3, #0
 80101f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80101f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d10b      	bne.n	8010210 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80101f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101fc:	f383 8811 	msr	BASEPRI, r3
 8010200:	f3bf 8f6f 	isb	sy
 8010204:	f3bf 8f4f 	dsb	sy
 8010208:	623b      	str	r3, [r7, #32]
}
 801020a:	bf00      	nop
 801020c:	bf00      	nop
 801020e:	e7fd      	b.n	801020c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010214:	2b00      	cmp	r3, #0
 8010216:	d00b      	beq.n	8010230 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801021c:	f383 8811 	msr	BASEPRI, r3
 8010220:	f3bf 8f6f 	isb	sy
 8010224:	f3bf 8f4f 	dsb	sy
 8010228:	61fb      	str	r3, [r7, #28]
}
 801022a:	bf00      	nop
 801022c:	bf00      	nop
 801022e:	e7fd      	b.n	801022c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010230:	f001 f822 	bl	8011278 <xTaskGetSchedulerState>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d102      	bne.n	8010240 <xQueueSemaphoreTake+0x64>
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d101      	bne.n	8010244 <xQueueSemaphoreTake+0x68>
 8010240:	2301      	movs	r3, #1
 8010242:	e000      	b.n	8010246 <xQueueSemaphoreTake+0x6a>
 8010244:	2300      	movs	r3, #0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10b      	bne.n	8010262 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801024a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801024e:	f383 8811 	msr	BASEPRI, r3
 8010252:	f3bf 8f6f 	isb	sy
 8010256:	f3bf 8f4f 	dsb	sy
 801025a:	61bb      	str	r3, [r7, #24]
}
 801025c:	bf00      	nop
 801025e:	bf00      	nop
 8010260:	e7fd      	b.n	801025e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010262:	f001 fb61 	bl	8011928 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801026a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801026c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801026e:	2b00      	cmp	r3, #0
 8010270:	d024      	beq.n	80102bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010274:	1e5a      	subs	r2, r3, #1
 8010276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010278:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801027a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d104      	bne.n	801028c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010282:	f001 f9a5 	bl	80115d0 <pvTaskIncrementMutexHeldCount>
 8010286:	4602      	mov	r2, r0
 8010288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801028c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028e:	691b      	ldr	r3, [r3, #16]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00f      	beq.n	80102b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010296:	3310      	adds	r3, #16
 8010298:	4618      	mov	r0, r3
 801029a:	f000 fe4d 	bl	8010f38 <xTaskRemoveFromEventList>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d007      	beq.n	80102b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80102a4:	4b54      	ldr	r3, [pc, #336]	@ (80103f8 <xQueueSemaphoreTake+0x21c>)
 80102a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102aa:	601a      	str	r2, [r3, #0]
 80102ac:	f3bf 8f4f 	dsb	sy
 80102b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102b4:	f001 fb6a 	bl	801198c <vPortExitCritical>
				return pdPASS;
 80102b8:	2301      	movs	r3, #1
 80102ba:	e098      	b.n	80103ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d112      	bne.n	80102e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80102c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00b      	beq.n	80102e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80102c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102cc:	f383 8811 	msr	BASEPRI, r3
 80102d0:	f3bf 8f6f 	isb	sy
 80102d4:	f3bf 8f4f 	dsb	sy
 80102d8:	617b      	str	r3, [r7, #20]
}
 80102da:	bf00      	nop
 80102dc:	bf00      	nop
 80102de:	e7fd      	b.n	80102dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80102e0:	f001 fb54 	bl	801198c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102e4:	2300      	movs	r3, #0
 80102e6:	e082      	b.n	80103ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d106      	bne.n	80102fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102ee:	f107 030c 	add.w	r3, r7, #12
 80102f2:	4618      	mov	r0, r3
 80102f4:	f000 fe84 	bl	8011000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102f8:	2301      	movs	r3, #1
 80102fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102fc:	f001 fb46 	bl	801198c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010300:	f000 fc22 	bl	8010b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010304:	f001 fb10 	bl	8011928 <vPortEnterCritical>
 8010308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801030e:	b25b      	sxtb	r3, r3
 8010310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010314:	d103      	bne.n	801031e <xQueueSemaphoreTake+0x142>
 8010316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010318:	2200      	movs	r2, #0
 801031a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801031e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010320:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010324:	b25b      	sxtb	r3, r3
 8010326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801032a:	d103      	bne.n	8010334 <xQueueSemaphoreTake+0x158>
 801032c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801032e:	2200      	movs	r2, #0
 8010330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010334:	f001 fb2a 	bl	801198c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010338:	463a      	mov	r2, r7
 801033a:	f107 030c 	add.w	r3, r7, #12
 801033e:	4611      	mov	r1, r2
 8010340:	4618      	mov	r0, r3
 8010342:	f000 fe73 	bl	801102c <xTaskCheckForTimeOut>
 8010346:	4603      	mov	r3, r0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d132      	bne.n	80103b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801034c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801034e:	f000 f9f0 	bl	8010732 <prvIsQueueEmpty>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d026      	beq.n	80103a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d109      	bne.n	8010374 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010360:	f001 fae2 	bl	8011928 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010366:	689b      	ldr	r3, [r3, #8]
 8010368:	4618      	mov	r0, r3
 801036a:	f000 ffa3 	bl	80112b4 <xTaskPriorityInherit>
 801036e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010370:	f001 fb0c 	bl	801198c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010376:	3324      	adds	r3, #36	@ 0x24
 8010378:	683a      	ldr	r2, [r7, #0]
 801037a:	4611      	mov	r1, r2
 801037c:	4618      	mov	r0, r3
 801037e:	f000 fdb5 	bl	8010eec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010382:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010384:	f000 f983 	bl	801068e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010388:	f000 fbec 	bl	8010b64 <xTaskResumeAll>
 801038c:	4603      	mov	r3, r0
 801038e:	2b00      	cmp	r3, #0
 8010390:	f47f af67 	bne.w	8010262 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010394:	4b18      	ldr	r3, [pc, #96]	@ (80103f8 <xQueueSemaphoreTake+0x21c>)
 8010396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801039a:	601a      	str	r2, [r3, #0]
 801039c:	f3bf 8f4f 	dsb	sy
 80103a0:	f3bf 8f6f 	isb	sy
 80103a4:	e75d      	b.n	8010262 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80103a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80103a8:	f000 f971 	bl	801068e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103ac:	f000 fbda 	bl	8010b64 <xTaskResumeAll>
 80103b0:	e757      	b.n	8010262 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80103b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80103b4:	f000 f96b 	bl	801068e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103b8:	f000 fbd4 	bl	8010b64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80103be:	f000 f9b8 	bl	8010732 <prvIsQueueEmpty>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	f43f af4c 	beq.w	8010262 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80103ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d00d      	beq.n	80103ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80103d0:	f001 faaa 	bl	8011928 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80103d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80103d6:	f000 f8b2 	bl	801053e <prvGetDisinheritPriorityAfterTimeout>
 80103da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80103dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103e2:	4618      	mov	r0, r3
 80103e4:	f001 f864 	bl	80114b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80103e8:	f001 fad0 	bl	801198c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3738      	adds	r7, #56	@ 0x38
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	e000ed04 	.word	0xe000ed04

080103fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b08e      	sub	sp, #56	@ 0x38
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801040c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801040e:	2b00      	cmp	r3, #0
 8010410:	d10b      	bne.n	801042a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8010412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010416:	f383 8811 	msr	BASEPRI, r3
 801041a:	f3bf 8f6f 	isb	sy
 801041e:	f3bf 8f4f 	dsb	sy
 8010422:	623b      	str	r3, [r7, #32]
}
 8010424:	bf00      	nop
 8010426:	bf00      	nop
 8010428:	e7fd      	b.n	8010426 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d103      	bne.n	8010438 <xQueueReceiveFromISR+0x3c>
 8010430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010434:	2b00      	cmp	r3, #0
 8010436:	d101      	bne.n	801043c <xQueueReceiveFromISR+0x40>
 8010438:	2301      	movs	r3, #1
 801043a:	e000      	b.n	801043e <xQueueReceiveFromISR+0x42>
 801043c:	2300      	movs	r3, #0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d10b      	bne.n	801045a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8010442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010446:	f383 8811 	msr	BASEPRI, r3
 801044a:	f3bf 8f6f 	isb	sy
 801044e:	f3bf 8f4f 	dsb	sy
 8010452:	61fb      	str	r3, [r7, #28]
}
 8010454:	bf00      	nop
 8010456:	bf00      	nop
 8010458:	e7fd      	b.n	8010456 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801045a:	f001 fb45 	bl	8011ae8 <vPortValidateInterruptPriority>
	__asm volatile
 801045e:	f3ef 8211 	mrs	r2, BASEPRI
 8010462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	61ba      	str	r2, [r7, #24]
 8010474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010478:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801047a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801047c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801047e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010482:	2b00      	cmp	r3, #0
 8010484:	d02f      	beq.n	80104e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801048c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010490:	68b9      	ldr	r1, [r7, #8]
 8010492:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010494:	f000 f8d5 	bl	8010642 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801049a:	1e5a      	subs	r2, r3, #1
 801049c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801049e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80104a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80104a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a8:	d112      	bne.n	80104d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d016      	beq.n	80104e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104b4:	3310      	adds	r3, #16
 80104b6:	4618      	mov	r0, r3
 80104b8:	f000 fd3e 	bl	8010f38 <xTaskRemoveFromEventList>
 80104bc:	4603      	mov	r3, r0
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d00e      	beq.n	80104e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00b      	beq.n	80104e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	e007      	b.n	80104e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80104d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104d4:	3301      	adds	r3, #1
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	b25a      	sxtb	r2, r3
 80104da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80104e0:	2301      	movs	r3, #1
 80104e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80104e4:	e001      	b.n	80104ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80104e6:	2300      	movs	r3, #0
 80104e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80104ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	f383 8811 	msr	BASEPRI, r3
}
 80104f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3738      	adds	r7, #56	@ 0x38
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}

08010500 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b084      	sub	sp, #16
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d10b      	bne.n	801052a <vQueueDelete+0x2a>
	__asm volatile
 8010512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010516:	f383 8811 	msr	BASEPRI, r3
 801051a:	f3bf 8f6f 	isb	sy
 801051e:	f3bf 8f4f 	dsb	sy
 8010522:	60bb      	str	r3, [r7, #8]
}
 8010524:	bf00      	nop
 8010526:	bf00      	nop
 8010528:	e7fd      	b.n	8010526 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801052a:	68f8      	ldr	r0, [r7, #12]
 801052c:	f000 f930 	bl	8010790 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8010530:	68f8      	ldr	r0, [r7, #12]
 8010532:	f001 fbe9 	bl	8011d08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010536:	bf00      	nop
 8010538:	3710      	adds	r7, #16
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801053e:	b480      	push	{r7}
 8010540:	b085      	sub	sp, #20
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801054a:	2b00      	cmp	r3, #0
 801054c:	d006      	beq.n	801055c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f1c3 0307 	rsb	r3, r3, #7
 8010558:	60fb      	str	r3, [r7, #12]
 801055a:	e001      	b.n	8010560 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801055c:	2300      	movs	r3, #0
 801055e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010560:	68fb      	ldr	r3, [r7, #12]
	}
 8010562:	4618      	mov	r0, r3
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr

0801056e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b086      	sub	sp, #24
 8010572:	af00      	add	r7, sp, #0
 8010574:	60f8      	str	r0, [r7, #12]
 8010576:	60b9      	str	r1, [r7, #8]
 8010578:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801057a:	2300      	movs	r3, #0
 801057c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010582:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010588:	2b00      	cmp	r3, #0
 801058a:	d10d      	bne.n	80105a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d14d      	bne.n	8010630 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	689b      	ldr	r3, [r3, #8]
 8010598:	4618      	mov	r0, r3
 801059a:	f000 ff01 	bl	80113a0 <xTaskPriorityDisinherit>
 801059e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	609a      	str	r2, [r3, #8]
 80105a6:	e043      	b.n	8010630 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d119      	bne.n	80105e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	6858      	ldr	r0, [r3, #4]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105b6:	461a      	mov	r2, r3
 80105b8:	68b9      	ldr	r1, [r7, #8]
 80105ba:	f003 fc36 	bl	8013e2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	685a      	ldr	r2, [r3, #4]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105c6:	441a      	add	r2, r3
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	685a      	ldr	r2, [r3, #4]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d32b      	bcc.n	8010630 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681a      	ldr	r2, [r3, #0]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	605a      	str	r2, [r3, #4]
 80105e0:	e026      	b.n	8010630 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	68d8      	ldr	r0, [r3, #12]
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105ea:	461a      	mov	r2, r3
 80105ec:	68b9      	ldr	r1, [r7, #8]
 80105ee:	f003 fc1c 	bl	8013e2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	68da      	ldr	r2, [r3, #12]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105fa:	425b      	negs	r3, r3
 80105fc:	441a      	add	r2, r3
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	68da      	ldr	r2, [r3, #12]
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	429a      	cmp	r2, r3
 801060c:	d207      	bcs.n	801061e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	689a      	ldr	r2, [r3, #8]
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010616:	425b      	negs	r3, r3
 8010618:	441a      	add	r2, r3
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2b02      	cmp	r3, #2
 8010622:	d105      	bne.n	8010630 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d002      	beq.n	8010630 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	3b01      	subs	r3, #1
 801062e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	1c5a      	adds	r2, r3, #1
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010638:	697b      	ldr	r3, [r7, #20]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3718      	adds	r7, #24
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}

08010642 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010642:	b580      	push	{r7, lr}
 8010644:	b082      	sub	sp, #8
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
 801064a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010650:	2b00      	cmp	r3, #0
 8010652:	d018      	beq.n	8010686 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	68da      	ldr	r2, [r3, #12]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801065c:	441a      	add	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	68da      	ldr	r2, [r3, #12]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	689b      	ldr	r3, [r3, #8]
 801066a:	429a      	cmp	r2, r3
 801066c:	d303      	bcc.n	8010676 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	68d9      	ldr	r1, [r3, #12]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801067e:	461a      	mov	r2, r3
 8010680:	6838      	ldr	r0, [r7, #0]
 8010682:	f003 fbd2 	bl	8013e2a <memcpy>
	}
}
 8010686:	bf00      	nop
 8010688:	3708      	adds	r7, #8
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}

0801068e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801068e:	b580      	push	{r7, lr}
 8010690:	b084      	sub	sp, #16
 8010692:	af00      	add	r7, sp, #0
 8010694:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010696:	f001 f947 	bl	8011928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80106a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80106a2:	e011      	b.n	80106c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d012      	beq.n	80106d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	3324      	adds	r3, #36	@ 0x24
 80106b0:	4618      	mov	r0, r3
 80106b2:	f000 fc41 	bl	8010f38 <xTaskRemoveFromEventList>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d001      	beq.n	80106c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80106bc:	f000 fd1a 	bl	80110f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80106c0:	7bfb      	ldrb	r3, [r7, #15]
 80106c2:	3b01      	subs	r3, #1
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80106c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	dce9      	bgt.n	80106a4 <prvUnlockQueue+0x16>
 80106d0:	e000      	b.n	80106d4 <prvUnlockQueue+0x46>
					break;
 80106d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	22ff      	movs	r2, #255	@ 0xff
 80106d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80106dc:	f001 f956 	bl	801198c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80106e0:	f001 f922 	bl	8011928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80106ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80106ec:	e011      	b.n	8010712 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	691b      	ldr	r3, [r3, #16]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d012      	beq.n	801071c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	3310      	adds	r3, #16
 80106fa:	4618      	mov	r0, r3
 80106fc:	f000 fc1c 	bl	8010f38 <xTaskRemoveFromEventList>
 8010700:	4603      	mov	r3, r0
 8010702:	2b00      	cmp	r3, #0
 8010704:	d001      	beq.n	801070a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010706:	f000 fcf5 	bl	80110f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801070a:	7bbb      	ldrb	r3, [r7, #14]
 801070c:	3b01      	subs	r3, #1
 801070e:	b2db      	uxtb	r3, r3
 8010710:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010716:	2b00      	cmp	r3, #0
 8010718:	dce9      	bgt.n	80106ee <prvUnlockQueue+0x60>
 801071a:	e000      	b.n	801071e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801071c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	22ff      	movs	r2, #255	@ 0xff
 8010722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010726:	f001 f931 	bl	801198c <vPortExitCritical>
}
 801072a:	bf00      	nop
 801072c:	3710      	adds	r7, #16
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b084      	sub	sp, #16
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801073a:	f001 f8f5 	bl	8011928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010742:	2b00      	cmp	r3, #0
 8010744:	d102      	bne.n	801074c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010746:	2301      	movs	r3, #1
 8010748:	60fb      	str	r3, [r7, #12]
 801074a:	e001      	b.n	8010750 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801074c:	2300      	movs	r3, #0
 801074e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010750:	f001 f91c 	bl	801198c <vPortExitCritical>

	return xReturn;
 8010754:	68fb      	ldr	r3, [r7, #12]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801075e:	b580      	push	{r7, lr}
 8010760:	b084      	sub	sp, #16
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010766:	f001 f8df 	bl	8011928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010772:	429a      	cmp	r2, r3
 8010774:	d102      	bne.n	801077c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010776:	2301      	movs	r3, #1
 8010778:	60fb      	str	r3, [r7, #12]
 801077a:	e001      	b.n	8010780 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801077c:	2300      	movs	r3, #0
 801077e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010780:	f001 f904 	bl	801198c <vPortExitCritical>

	return xReturn;
 8010784:	68fb      	ldr	r3, [r7, #12]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
	...

08010790 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010790:	b480      	push	{r7}
 8010792:	b085      	sub	sp, #20
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010798:	2300      	movs	r3, #0
 801079a:	60fb      	str	r3, [r7, #12]
 801079c:	e016      	b.n	80107cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801079e:	4a10      	ldr	r2, [pc, #64]	@ (80107e0 <vQueueUnregisterQueue+0x50>)
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	4413      	add	r3, r2
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d10b      	bne.n	80107c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80107ae:	4a0c      	ldr	r2, [pc, #48]	@ (80107e0 <vQueueUnregisterQueue+0x50>)
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2100      	movs	r1, #0
 80107b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80107b8:	4a09      	ldr	r2, [pc, #36]	@ (80107e0 <vQueueUnregisterQueue+0x50>)
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	00db      	lsls	r3, r3, #3
 80107be:	4413      	add	r3, r2
 80107c0:	2200      	movs	r2, #0
 80107c2:	605a      	str	r2, [r3, #4]
				break;
 80107c4:	e006      	b.n	80107d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	3301      	adds	r3, #1
 80107ca:	60fb      	str	r3, [r7, #12]
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2b07      	cmp	r3, #7
 80107d0:	d9e5      	bls.n	801079e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80107d2:	bf00      	nop
 80107d4:	bf00      	nop
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	20002f7c 	.word	0x20002f7c

080107e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b08c      	sub	sp, #48	@ 0x30
 80107e8:	af04      	add	r7, sp, #16
 80107ea:	60f8      	str	r0, [r7, #12]
 80107ec:	60b9      	str	r1, [r7, #8]
 80107ee:	603b      	str	r3, [r7, #0]
 80107f0:	4613      	mov	r3, r2
 80107f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80107f4:	88fb      	ldrh	r3, [r7, #6]
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	4618      	mov	r0, r3
 80107fa:	f001 f9b7 	bl	8011b6c <pvPortMalloc>
 80107fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00e      	beq.n	8010824 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010806:	2054      	movs	r0, #84	@ 0x54
 8010808:	f001 f9b0 	bl	8011b6c <pvPortMalloc>
 801080c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d003      	beq.n	801081c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	697a      	ldr	r2, [r7, #20]
 8010818:	631a      	str	r2, [r3, #48]	@ 0x30
 801081a:	e005      	b.n	8010828 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801081c:	6978      	ldr	r0, [r7, #20]
 801081e:	f001 fa73 	bl	8011d08 <vPortFree>
 8010822:	e001      	b.n	8010828 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010824:	2300      	movs	r3, #0
 8010826:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d013      	beq.n	8010856 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801082e:	88fa      	ldrh	r2, [r7, #6]
 8010830:	2300      	movs	r3, #0
 8010832:	9303      	str	r3, [sp, #12]
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	9302      	str	r3, [sp, #8]
 8010838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801083a:	9301      	str	r3, [sp, #4]
 801083c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801083e:	9300      	str	r3, [sp, #0]
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	68b9      	ldr	r1, [r7, #8]
 8010844:	68f8      	ldr	r0, [r7, #12]
 8010846:	f000 f80e 	bl	8010866 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801084a:	69f8      	ldr	r0, [r7, #28]
 801084c:	f000 f894 	bl	8010978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010850:	2301      	movs	r3, #1
 8010852:	61bb      	str	r3, [r7, #24]
 8010854:	e002      	b.n	801085c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010856:	f04f 33ff 	mov.w	r3, #4294967295
 801085a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801085c:	69bb      	ldr	r3, [r7, #24]
	}
 801085e:	4618      	mov	r0, r3
 8010860:	3720      	adds	r7, #32
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010866:	b580      	push	{r7, lr}
 8010868:	b088      	sub	sp, #32
 801086a:	af00      	add	r7, sp, #0
 801086c:	60f8      	str	r0, [r7, #12]
 801086e:	60b9      	str	r1, [r7, #8]
 8010870:	607a      	str	r2, [r7, #4]
 8010872:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801087e:	3b01      	subs	r3, #1
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	4413      	add	r3, r2
 8010884:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	f023 0307 	bic.w	r3, r3, #7
 801088c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	f003 0307 	and.w	r3, r3, #7
 8010894:	2b00      	cmp	r3, #0
 8010896:	d00b      	beq.n	80108b0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8010898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801089c:	f383 8811 	msr	BASEPRI, r3
 80108a0:	f3bf 8f6f 	isb	sy
 80108a4:	f3bf 8f4f 	dsb	sy
 80108a8:	617b      	str	r3, [r7, #20]
}
 80108aa:	bf00      	nop
 80108ac:	bf00      	nop
 80108ae:	e7fd      	b.n	80108ac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d01f      	beq.n	80108f6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108b6:	2300      	movs	r3, #0
 80108b8:	61fb      	str	r3, [r7, #28]
 80108ba:	e012      	b.n	80108e2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80108bc:	68ba      	ldr	r2, [r7, #8]
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	4413      	add	r3, r2
 80108c2:	7819      	ldrb	r1, [r3, #0]
 80108c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108c6:	69fb      	ldr	r3, [r7, #28]
 80108c8:	4413      	add	r3, r2
 80108ca:	3334      	adds	r3, #52	@ 0x34
 80108cc:	460a      	mov	r2, r1
 80108ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80108d0:	68ba      	ldr	r2, [r7, #8]
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	4413      	add	r3, r2
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d006      	beq.n	80108ea <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	3301      	adds	r3, #1
 80108e0:	61fb      	str	r3, [r7, #28]
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	2b0f      	cmp	r3, #15
 80108e6:	d9e9      	bls.n	80108bc <prvInitialiseNewTask+0x56>
 80108e8:	e000      	b.n	80108ec <prvInitialiseNewTask+0x86>
			{
				break;
 80108ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80108ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ee:	2200      	movs	r2, #0
 80108f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80108f4:	e003      	b.n	80108fe <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80108f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80108fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010900:	2b06      	cmp	r3, #6
 8010902:	d901      	bls.n	8010908 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010904:	2306      	movs	r3, #6
 8010906:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801090a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801090c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801090e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010912:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010916:	2200      	movs	r2, #0
 8010918:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801091a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801091c:	3304      	adds	r3, #4
 801091e:	4618      	mov	r0, r3
 8010920:	f7ff f893 	bl	800fa4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010926:	3318      	adds	r3, #24
 8010928:	4618      	mov	r0, r3
 801092a:	f7ff f88e 	bl	800fa4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801092e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010932:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010936:	f1c3 0207 	rsb	r2, r3, #7
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801093e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010942:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010946:	2200      	movs	r2, #0
 8010948:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801094a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094c:	2200      	movs	r2, #0
 801094e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010952:	683a      	ldr	r2, [r7, #0]
 8010954:	68f9      	ldr	r1, [r7, #12]
 8010956:	69b8      	ldr	r0, [r7, #24]
 8010958:	f000 feb4 	bl	80116c4 <pxPortInitialiseStack>
 801095c:	4602      	mov	r2, r0
 801095e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010960:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801096c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801096e:	bf00      	nop
 8010970:	3720      	adds	r7, #32
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
	...

08010978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010980:	f000 ffd2 	bl	8011928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010984:	4b2a      	ldr	r3, [pc, #168]	@ (8010a30 <prvAddNewTaskToReadyList+0xb8>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	3301      	adds	r3, #1
 801098a:	4a29      	ldr	r2, [pc, #164]	@ (8010a30 <prvAddNewTaskToReadyList+0xb8>)
 801098c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801098e:	4b29      	ldr	r3, [pc, #164]	@ (8010a34 <prvAddNewTaskToReadyList+0xbc>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d109      	bne.n	80109aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010996:	4a27      	ldr	r2, [pc, #156]	@ (8010a34 <prvAddNewTaskToReadyList+0xbc>)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801099c:	4b24      	ldr	r3, [pc, #144]	@ (8010a30 <prvAddNewTaskToReadyList+0xb8>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d110      	bne.n	80109c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80109a4:	f000 fbca 	bl	801113c <prvInitialiseTaskLists>
 80109a8:	e00d      	b.n	80109c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80109aa:	4b23      	ldr	r3, [pc, #140]	@ (8010a38 <prvAddNewTaskToReadyList+0xc0>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d109      	bne.n	80109c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80109b2:	4b20      	ldr	r3, [pc, #128]	@ (8010a34 <prvAddNewTaskToReadyList+0xbc>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109bc:	429a      	cmp	r2, r3
 80109be:	d802      	bhi.n	80109c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80109c0:	4a1c      	ldr	r2, [pc, #112]	@ (8010a34 <prvAddNewTaskToReadyList+0xbc>)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80109c6:	4b1d      	ldr	r3, [pc, #116]	@ (8010a3c <prvAddNewTaskToReadyList+0xc4>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	3301      	adds	r3, #1
 80109cc:	4a1b      	ldr	r2, [pc, #108]	@ (8010a3c <prvAddNewTaskToReadyList+0xc4>)
 80109ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109d4:	2201      	movs	r2, #1
 80109d6:	409a      	lsls	r2, r3
 80109d8:	4b19      	ldr	r3, [pc, #100]	@ (8010a40 <prvAddNewTaskToReadyList+0xc8>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4313      	orrs	r3, r2
 80109de:	4a18      	ldr	r2, [pc, #96]	@ (8010a40 <prvAddNewTaskToReadyList+0xc8>)
 80109e0:	6013      	str	r3, [r2, #0]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109e6:	4613      	mov	r3, r2
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	4413      	add	r3, r2
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4a15      	ldr	r2, [pc, #84]	@ (8010a44 <prvAddNewTaskToReadyList+0xcc>)
 80109f0:	441a      	add	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	3304      	adds	r3, #4
 80109f6:	4619      	mov	r1, r3
 80109f8:	4610      	mov	r0, r2
 80109fa:	f7ff f833 	bl	800fa64 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80109fe:	f000 ffc5 	bl	801198c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010a02:	4b0d      	ldr	r3, [pc, #52]	@ (8010a38 <prvAddNewTaskToReadyList+0xc0>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00e      	beq.n	8010a28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8010a34 <prvAddNewTaskToReadyList+0xbc>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d207      	bcs.n	8010a28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010a18:	4b0b      	ldr	r3, [pc, #44]	@ (8010a48 <prvAddNewTaskToReadyList+0xd0>)
 8010a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a1e:	601a      	str	r2, [r3, #0]
 8010a20:	f3bf 8f4f 	dsb	sy
 8010a24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a28:	bf00      	nop
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}
 8010a30:	200030bc 	.word	0x200030bc
 8010a34:	20002fbc 	.word	0x20002fbc
 8010a38:	200030c8 	.word	0x200030c8
 8010a3c:	200030d8 	.word	0x200030d8
 8010a40:	200030c4 	.word	0x200030c4
 8010a44:	20002fc0 	.word	0x20002fc0
 8010a48:	e000ed04 	.word	0xe000ed04

08010a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010a54:	2300      	movs	r3, #0
 8010a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d018      	beq.n	8010a90 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010a5e:	4b14      	ldr	r3, [pc, #80]	@ (8010ab0 <vTaskDelay+0x64>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d00b      	beq.n	8010a7e <vTaskDelay+0x32>
	__asm volatile
 8010a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	60bb      	str	r3, [r7, #8]
}
 8010a78:	bf00      	nop
 8010a7a:	bf00      	nop
 8010a7c:	e7fd      	b.n	8010a7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010a7e:	f000 f863 	bl	8010b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010a82:	2100      	movs	r1, #0
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 fdb7 	bl	80115f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010a8a:	f000 f86b 	bl	8010b64 <xTaskResumeAll>
 8010a8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d107      	bne.n	8010aa6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010a96:	4b07      	ldr	r3, [pc, #28]	@ (8010ab4 <vTaskDelay+0x68>)
 8010a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a9c:	601a      	str	r2, [r3, #0]
 8010a9e:	f3bf 8f4f 	dsb	sy
 8010aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010aa6:	bf00      	nop
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	200030e4 	.word	0x200030e4
 8010ab4:	e000ed04 	.word	0xe000ed04

08010ab8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b086      	sub	sp, #24
 8010abc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8010abe:	4b1c      	ldr	r3, [pc, #112]	@ (8010b30 <vTaskStartScheduler+0x78>)
 8010ac0:	9301      	str	r3, [sp, #4]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	2280      	movs	r2, #128	@ 0x80
 8010aca:	491a      	ldr	r1, [pc, #104]	@ (8010b34 <vTaskStartScheduler+0x7c>)
 8010acc:	481a      	ldr	r0, [pc, #104]	@ (8010b38 <vTaskStartScheduler+0x80>)
 8010ace:	f7ff fe89 	bl	80107e4 <xTaskCreate>
 8010ad2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2b01      	cmp	r3, #1
 8010ad8:	d116      	bne.n	8010b08 <vTaskStartScheduler+0x50>
	__asm volatile
 8010ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	60bb      	str	r3, [r7, #8]
}
 8010aec:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010aee:	4b13      	ldr	r3, [pc, #76]	@ (8010b3c <vTaskStartScheduler+0x84>)
 8010af0:	f04f 32ff 	mov.w	r2, #4294967295
 8010af4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010af6:	4b12      	ldr	r3, [pc, #72]	@ (8010b40 <vTaskStartScheduler+0x88>)
 8010af8:	2201      	movs	r2, #1
 8010afa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010afc:	4b11      	ldr	r3, [pc, #68]	@ (8010b44 <vTaskStartScheduler+0x8c>)
 8010afe:	2200      	movs	r2, #0
 8010b00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010b02:	f000 fe6d 	bl	80117e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010b06:	e00f      	b.n	8010b28 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b0e:	d10b      	bne.n	8010b28 <vTaskStartScheduler+0x70>
	__asm volatile
 8010b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	607b      	str	r3, [r7, #4]
}
 8010b22:	bf00      	nop
 8010b24:	bf00      	nop
 8010b26:	e7fd      	b.n	8010b24 <vTaskStartScheduler+0x6c>
}
 8010b28:	bf00      	nop
 8010b2a:	3710      	adds	r7, #16
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}
 8010b30:	200030e0 	.word	0x200030e0
 8010b34:	08015158 	.word	0x08015158
 8010b38:	0801110d 	.word	0x0801110d
 8010b3c:	200030dc 	.word	0x200030dc
 8010b40:	200030c8 	.word	0x200030c8
 8010b44:	200030c0 	.word	0x200030c0

08010b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010b48:	b480      	push	{r7}
 8010b4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010b4c:	4b04      	ldr	r3, [pc, #16]	@ (8010b60 <vTaskSuspendAll+0x18>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	3301      	adds	r3, #1
 8010b52:	4a03      	ldr	r2, [pc, #12]	@ (8010b60 <vTaskSuspendAll+0x18>)
 8010b54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010b56:	bf00      	nop
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr
 8010b60:	200030e4 	.word	0x200030e4

08010b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010b72:	4b42      	ldr	r3, [pc, #264]	@ (8010c7c <xTaskResumeAll+0x118>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d10b      	bne.n	8010b92 <xTaskResumeAll+0x2e>
	__asm volatile
 8010b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b7e:	f383 8811 	msr	BASEPRI, r3
 8010b82:	f3bf 8f6f 	isb	sy
 8010b86:	f3bf 8f4f 	dsb	sy
 8010b8a:	603b      	str	r3, [r7, #0]
}
 8010b8c:	bf00      	nop
 8010b8e:	bf00      	nop
 8010b90:	e7fd      	b.n	8010b8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010b92:	f000 fec9 	bl	8011928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010b96:	4b39      	ldr	r3, [pc, #228]	@ (8010c7c <xTaskResumeAll+0x118>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	4a37      	ldr	r2, [pc, #220]	@ (8010c7c <xTaskResumeAll+0x118>)
 8010b9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ba0:	4b36      	ldr	r3, [pc, #216]	@ (8010c7c <xTaskResumeAll+0x118>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d161      	bne.n	8010c6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010ba8:	4b35      	ldr	r3, [pc, #212]	@ (8010c80 <xTaskResumeAll+0x11c>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d05d      	beq.n	8010c6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bb0:	e02e      	b.n	8010c10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bb2:	4b34      	ldr	r3, [pc, #208]	@ (8010c84 <xTaskResumeAll+0x120>)
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	3318      	adds	r3, #24
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7fe ffad 	bl	800fb1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	3304      	adds	r3, #4
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fe ffa8 	bl	800fb1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bd2:	2201      	movs	r2, #1
 8010bd4:	409a      	lsls	r2, r3
 8010bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8010c88 <xTaskResumeAll+0x124>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	4313      	orrs	r3, r2
 8010bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8010c88 <xTaskResumeAll+0x124>)
 8010bde:	6013      	str	r3, [r2, #0]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010be4:	4613      	mov	r3, r2
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	009b      	lsls	r3, r3, #2
 8010bec:	4a27      	ldr	r2, [pc, #156]	@ (8010c8c <xTaskResumeAll+0x128>)
 8010bee:	441a      	add	r2, r3
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	3304      	adds	r3, #4
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	4610      	mov	r0, r2
 8010bf8:	f7fe ff34 	bl	800fa64 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c00:	4b23      	ldr	r3, [pc, #140]	@ (8010c90 <xTaskResumeAll+0x12c>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d302      	bcc.n	8010c10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010c0a:	4b22      	ldr	r3, [pc, #136]	@ (8010c94 <xTaskResumeAll+0x130>)
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c10:	4b1c      	ldr	r3, [pc, #112]	@ (8010c84 <xTaskResumeAll+0x120>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d1cc      	bne.n	8010bb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010c1e:	f000 fb0b 	bl	8011238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010c22:	4b1d      	ldr	r3, [pc, #116]	@ (8010c98 <xTaskResumeAll+0x134>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d010      	beq.n	8010c50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010c2e:	f000 f847 	bl	8010cc0 <xTaskIncrementTick>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010c38:	4b16      	ldr	r3, [pc, #88]	@ (8010c94 <xTaskResumeAll+0x130>)
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	3b01      	subs	r3, #1
 8010c42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1f1      	bne.n	8010c2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010c4a:	4b13      	ldr	r3, [pc, #76]	@ (8010c98 <xTaskResumeAll+0x134>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010c50:	4b10      	ldr	r3, [pc, #64]	@ (8010c94 <xTaskResumeAll+0x130>)
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d009      	beq.n	8010c6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010c58:	2301      	movs	r3, #1
 8010c5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8010c9c <xTaskResumeAll+0x138>)
 8010c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c62:	601a      	str	r2, [r3, #0]
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c6c:	f000 fe8e 	bl	801198c <vPortExitCritical>

	return xAlreadyYielded;
 8010c70:	68bb      	ldr	r3, [r7, #8]
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	200030e4 	.word	0x200030e4
 8010c80:	200030bc 	.word	0x200030bc
 8010c84:	2000307c 	.word	0x2000307c
 8010c88:	200030c4 	.word	0x200030c4
 8010c8c:	20002fc0 	.word	0x20002fc0
 8010c90:	20002fbc 	.word	0x20002fbc
 8010c94:	200030d0 	.word	0x200030d0
 8010c98:	200030cc 	.word	0x200030cc
 8010c9c:	e000ed04 	.word	0xe000ed04

08010ca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	b083      	sub	sp, #12
 8010ca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010ca6:	4b05      	ldr	r3, [pc, #20]	@ (8010cbc <xTaskGetTickCount+0x1c>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010cac:	687b      	ldr	r3, [r7, #4]
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	370c      	adds	r7, #12
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	200030c0 	.word	0x200030c0

08010cc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cca:	4b4f      	ldr	r3, [pc, #316]	@ (8010e08 <xTaskIncrementTick+0x148>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	f040 808f 	bne.w	8010df2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8010e0c <xTaskIncrementTick+0x14c>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010cdc:	4a4b      	ldr	r2, [pc, #300]	@ (8010e0c <xTaskIncrementTick+0x14c>)
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d121      	bne.n	8010d2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010ce8:	4b49      	ldr	r3, [pc, #292]	@ (8010e10 <xTaskIncrementTick+0x150>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00b      	beq.n	8010d0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8010cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cf6:	f383 8811 	msr	BASEPRI, r3
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	f3bf 8f4f 	dsb	sy
 8010d02:	603b      	str	r3, [r7, #0]
}
 8010d04:	bf00      	nop
 8010d06:	bf00      	nop
 8010d08:	e7fd      	b.n	8010d06 <xTaskIncrementTick+0x46>
 8010d0a:	4b41      	ldr	r3, [pc, #260]	@ (8010e10 <xTaskIncrementTick+0x150>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	60fb      	str	r3, [r7, #12]
 8010d10:	4b40      	ldr	r3, [pc, #256]	@ (8010e14 <xTaskIncrementTick+0x154>)
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	4a3e      	ldr	r2, [pc, #248]	@ (8010e10 <xTaskIncrementTick+0x150>)
 8010d16:	6013      	str	r3, [r2, #0]
 8010d18:	4a3e      	ldr	r2, [pc, #248]	@ (8010e14 <xTaskIncrementTick+0x154>)
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6013      	str	r3, [r2, #0]
 8010d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8010e18 <xTaskIncrementTick+0x158>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	3301      	adds	r3, #1
 8010d24:	4a3c      	ldr	r2, [pc, #240]	@ (8010e18 <xTaskIncrementTick+0x158>)
 8010d26:	6013      	str	r3, [r2, #0]
 8010d28:	f000 fa86 	bl	8011238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8010e1c <xTaskIncrementTick+0x15c>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d348      	bcc.n	8010dc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d36:	4b36      	ldr	r3, [pc, #216]	@ (8010e10 <xTaskIncrementTick+0x150>)
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d104      	bne.n	8010d4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d40:	4b36      	ldr	r3, [pc, #216]	@ (8010e1c <xTaskIncrementTick+0x15c>)
 8010d42:	f04f 32ff 	mov.w	r2, #4294967295
 8010d46:	601a      	str	r2, [r3, #0]
					break;
 8010d48:	e03e      	b.n	8010dc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d4a:	4b31      	ldr	r3, [pc, #196]	@ (8010e10 <xTaskIncrementTick+0x150>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010d5a:	693a      	ldr	r2, [r7, #16]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d203      	bcs.n	8010d6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010d62:	4a2e      	ldr	r2, [pc, #184]	@ (8010e1c <xTaskIncrementTick+0x15c>)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010d68:	e02e      	b.n	8010dc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	3304      	adds	r3, #4
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fe fed5 	bl	800fb1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d004      	beq.n	8010d86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	3318      	adds	r3, #24
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7fe fecc 	bl	800fb1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d8a:	2201      	movs	r2, #1
 8010d8c:	409a      	lsls	r2, r3
 8010d8e:	4b24      	ldr	r3, [pc, #144]	@ (8010e20 <xTaskIncrementTick+0x160>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4313      	orrs	r3, r2
 8010d94:	4a22      	ldr	r2, [pc, #136]	@ (8010e20 <xTaskIncrementTick+0x160>)
 8010d96:	6013      	str	r3, [r2, #0]
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d9c:	4613      	mov	r3, r2
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	4413      	add	r3, r2
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	4a1f      	ldr	r2, [pc, #124]	@ (8010e24 <xTaskIncrementTick+0x164>)
 8010da6:	441a      	add	r2, r3
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	3304      	adds	r3, #4
 8010dac:	4619      	mov	r1, r3
 8010dae:	4610      	mov	r0, r2
 8010db0:	f7fe fe58 	bl	800fa64 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010db8:	4b1b      	ldr	r3, [pc, #108]	@ (8010e28 <xTaskIncrementTick+0x168>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d3b9      	bcc.n	8010d36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010dc6:	e7b6      	b.n	8010d36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010dc8:	4b17      	ldr	r3, [pc, #92]	@ (8010e28 <xTaskIncrementTick+0x168>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dce:	4915      	ldr	r1, [pc, #84]	@ (8010e24 <xTaskIncrementTick+0x164>)
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4413      	add	r3, r2
 8010dd6:	009b      	lsls	r3, r3, #2
 8010dd8:	440b      	add	r3, r1
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	d901      	bls.n	8010de4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010de0:	2301      	movs	r3, #1
 8010de2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010de4:	4b11      	ldr	r3, [pc, #68]	@ (8010e2c <xTaskIncrementTick+0x16c>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d007      	beq.n	8010dfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010dec:	2301      	movs	r3, #1
 8010dee:	617b      	str	r3, [r7, #20]
 8010df0:	e004      	b.n	8010dfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010df2:	4b0f      	ldr	r3, [pc, #60]	@ (8010e30 <xTaskIncrementTick+0x170>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	3301      	adds	r3, #1
 8010df8:	4a0d      	ldr	r2, [pc, #52]	@ (8010e30 <xTaskIncrementTick+0x170>)
 8010dfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010dfc:	697b      	ldr	r3, [r7, #20]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3718      	adds	r7, #24
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	200030e4 	.word	0x200030e4
 8010e0c:	200030c0 	.word	0x200030c0
 8010e10:	20003074 	.word	0x20003074
 8010e14:	20003078 	.word	0x20003078
 8010e18:	200030d4 	.word	0x200030d4
 8010e1c:	200030dc 	.word	0x200030dc
 8010e20:	200030c4 	.word	0x200030c4
 8010e24:	20002fc0 	.word	0x20002fc0
 8010e28:	20002fbc 	.word	0x20002fbc
 8010e2c:	200030d0 	.word	0x200030d0
 8010e30:	200030cc 	.word	0x200030cc

08010e34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010e34:	b480      	push	{r7}
 8010e36:	b087      	sub	sp, #28
 8010e38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010e3a:	4b27      	ldr	r3, [pc, #156]	@ (8010ed8 <vTaskSwitchContext+0xa4>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d003      	beq.n	8010e4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010e42:	4b26      	ldr	r3, [pc, #152]	@ (8010edc <vTaskSwitchContext+0xa8>)
 8010e44:	2201      	movs	r2, #1
 8010e46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010e48:	e040      	b.n	8010ecc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8010e4a:	4b24      	ldr	r3, [pc, #144]	@ (8010edc <vTaskSwitchContext+0xa8>)
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e50:	4b23      	ldr	r3, [pc, #140]	@ (8010ee0 <vTaskSwitchContext+0xac>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	fab3 f383 	clz	r3, r3
 8010e5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010e5e:	7afb      	ldrb	r3, [r7, #11]
 8010e60:	f1c3 031f 	rsb	r3, r3, #31
 8010e64:	617b      	str	r3, [r7, #20]
 8010e66:	491f      	ldr	r1, [pc, #124]	@ (8010ee4 <vTaskSwitchContext+0xb0>)
 8010e68:	697a      	ldr	r2, [r7, #20]
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	4413      	add	r3, r2
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	440b      	add	r3, r1
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d10b      	bne.n	8010e92 <vTaskSwitchContext+0x5e>
	__asm volatile
 8010e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e7e:	f383 8811 	msr	BASEPRI, r3
 8010e82:	f3bf 8f6f 	isb	sy
 8010e86:	f3bf 8f4f 	dsb	sy
 8010e8a:	607b      	str	r3, [r7, #4]
}
 8010e8c:	bf00      	nop
 8010e8e:	bf00      	nop
 8010e90:	e7fd      	b.n	8010e8e <vTaskSwitchContext+0x5a>
 8010e92:	697a      	ldr	r2, [r7, #20]
 8010e94:	4613      	mov	r3, r2
 8010e96:	009b      	lsls	r3, r3, #2
 8010e98:	4413      	add	r3, r2
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	4a11      	ldr	r2, [pc, #68]	@ (8010ee4 <vTaskSwitchContext+0xb0>)
 8010e9e:	4413      	add	r3, r2
 8010ea0:	613b      	str	r3, [r7, #16]
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	685b      	ldr	r3, [r3, #4]
 8010ea6:	685a      	ldr	r2, [r3, #4]
 8010ea8:	693b      	ldr	r3, [r7, #16]
 8010eaa:	605a      	str	r2, [r3, #4]
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	685a      	ldr	r2, [r3, #4]
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	3308      	adds	r3, #8
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d104      	bne.n	8010ec2 <vTaskSwitchContext+0x8e>
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	685a      	ldr	r2, [r3, #4]
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	605a      	str	r2, [r3, #4]
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	4a07      	ldr	r2, [pc, #28]	@ (8010ee8 <vTaskSwitchContext+0xb4>)
 8010eca:	6013      	str	r3, [r2, #0]
}
 8010ecc:	bf00      	nop
 8010ece:	371c      	adds	r7, #28
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr
 8010ed8:	200030e4 	.word	0x200030e4
 8010edc:	200030d0 	.word	0x200030d0
 8010ee0:	200030c4 	.word	0x200030c4
 8010ee4:	20002fc0 	.word	0x20002fc0
 8010ee8:	20002fbc 	.word	0x20002fbc

08010eec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d10b      	bne.n	8010f14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f00:	f383 8811 	msr	BASEPRI, r3
 8010f04:	f3bf 8f6f 	isb	sy
 8010f08:	f3bf 8f4f 	dsb	sy
 8010f0c:	60fb      	str	r3, [r7, #12]
}
 8010f0e:	bf00      	nop
 8010f10:	bf00      	nop
 8010f12:	e7fd      	b.n	8010f10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010f14:	4b07      	ldr	r3, [pc, #28]	@ (8010f34 <vTaskPlaceOnEventList+0x48>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	3318      	adds	r3, #24
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7fe fdc5 	bl	800faac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010f22:	2101      	movs	r1, #1
 8010f24:	6838      	ldr	r0, [r7, #0]
 8010f26:	f000 fb67 	bl	80115f8 <prvAddCurrentTaskToDelayedList>
}
 8010f2a:	bf00      	nop
 8010f2c:	3710      	adds	r7, #16
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	20002fbc 	.word	0x20002fbc

08010f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b086      	sub	sp, #24
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d10b      	bne.n	8010f66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f52:	f383 8811 	msr	BASEPRI, r3
 8010f56:	f3bf 8f6f 	isb	sy
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	60fb      	str	r3, [r7, #12]
}
 8010f60:	bf00      	nop
 8010f62:	bf00      	nop
 8010f64:	e7fd      	b.n	8010f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	3318      	adds	r3, #24
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7fe fdd7 	bl	800fb1e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f70:	4b1d      	ldr	r3, [pc, #116]	@ (8010fe8 <xTaskRemoveFromEventList+0xb0>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d11c      	bne.n	8010fb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	3304      	adds	r3, #4
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fe fdce 	bl	800fb1e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010f82:	693b      	ldr	r3, [r7, #16]
 8010f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f86:	2201      	movs	r2, #1
 8010f88:	409a      	lsls	r2, r3
 8010f8a:	4b18      	ldr	r3, [pc, #96]	@ (8010fec <xTaskRemoveFromEventList+0xb4>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	4313      	orrs	r3, r2
 8010f90:	4a16      	ldr	r2, [pc, #88]	@ (8010fec <xTaskRemoveFromEventList+0xb4>)
 8010f92:	6013      	str	r3, [r2, #0]
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f98:	4613      	mov	r3, r2
 8010f9a:	009b      	lsls	r3, r3, #2
 8010f9c:	4413      	add	r3, r2
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	4a13      	ldr	r2, [pc, #76]	@ (8010ff0 <xTaskRemoveFromEventList+0xb8>)
 8010fa2:	441a      	add	r2, r3
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	3304      	adds	r3, #4
 8010fa8:	4619      	mov	r1, r3
 8010faa:	4610      	mov	r0, r2
 8010fac:	f7fe fd5a 	bl	800fa64 <vListInsertEnd>
 8010fb0:	e005      	b.n	8010fbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	3318      	adds	r3, #24
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	480e      	ldr	r0, [pc, #56]	@ (8010ff4 <xTaskRemoveFromEventList+0xbc>)
 8010fba:	f7fe fd53 	bl	800fa64 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8010ff8 <xTaskRemoveFromEventList+0xc0>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d905      	bls.n	8010fd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8010ffc <xTaskRemoveFromEventList+0xc4>)
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	601a      	str	r2, [r3, #0]
 8010fd6:	e001      	b.n	8010fdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010fdc:	697b      	ldr	r3, [r7, #20]
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3718      	adds	r7, #24
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	200030e4 	.word	0x200030e4
 8010fec:	200030c4 	.word	0x200030c4
 8010ff0:	20002fc0 	.word	0x20002fc0
 8010ff4:	2000307c 	.word	0x2000307c
 8010ff8:	20002fbc 	.word	0x20002fbc
 8010ffc:	200030d0 	.word	0x200030d0

08011000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011008:	4b06      	ldr	r3, [pc, #24]	@ (8011024 <vTaskInternalSetTimeOutState+0x24>)
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011010:	4b05      	ldr	r3, [pc, #20]	@ (8011028 <vTaskInternalSetTimeOutState+0x28>)
 8011012:	681a      	ldr	r2, [r3, #0]
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	605a      	str	r2, [r3, #4]
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr
 8011024:	200030d4 	.word	0x200030d4
 8011028:	200030c0 	.word	0x200030c0

0801102c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b088      	sub	sp, #32
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d10b      	bne.n	8011054 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801103c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011040:	f383 8811 	msr	BASEPRI, r3
 8011044:	f3bf 8f6f 	isb	sy
 8011048:	f3bf 8f4f 	dsb	sy
 801104c:	613b      	str	r3, [r7, #16]
}
 801104e:	bf00      	nop
 8011050:	bf00      	nop
 8011052:	e7fd      	b.n	8011050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d10b      	bne.n	8011072 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801105a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801105e:	f383 8811 	msr	BASEPRI, r3
 8011062:	f3bf 8f6f 	isb	sy
 8011066:	f3bf 8f4f 	dsb	sy
 801106a:	60fb      	str	r3, [r7, #12]
}
 801106c:	bf00      	nop
 801106e:	bf00      	nop
 8011070:	e7fd      	b.n	801106e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011072:	f000 fc59 	bl	8011928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011076:	4b1d      	ldr	r3, [pc, #116]	@ (80110ec <xTaskCheckForTimeOut+0xc0>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	69ba      	ldr	r2, [r7, #24]
 8011082:	1ad3      	subs	r3, r2, r3
 8011084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801108e:	d102      	bne.n	8011096 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011090:	2300      	movs	r3, #0
 8011092:	61fb      	str	r3, [r7, #28]
 8011094:	e023      	b.n	80110de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681a      	ldr	r2, [r3, #0]
 801109a:	4b15      	ldr	r3, [pc, #84]	@ (80110f0 <xTaskCheckForTimeOut+0xc4>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d007      	beq.n	80110b2 <xTaskCheckForTimeOut+0x86>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	69ba      	ldr	r2, [r7, #24]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d302      	bcc.n	80110b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80110ac:	2301      	movs	r3, #1
 80110ae:	61fb      	str	r3, [r7, #28]
 80110b0:	e015      	b.n	80110de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	697a      	ldr	r2, [r7, #20]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d20b      	bcs.n	80110d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	1ad2      	subs	r2, r2, r3
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f7ff ff99 	bl	8011000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80110ce:	2300      	movs	r3, #0
 80110d0:	61fb      	str	r3, [r7, #28]
 80110d2:	e004      	b.n	80110de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	2200      	movs	r2, #0
 80110d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80110da:	2301      	movs	r3, #1
 80110dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80110de:	f000 fc55 	bl	801198c <vPortExitCritical>

	return xReturn;
 80110e2:	69fb      	ldr	r3, [r7, #28]
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3720      	adds	r7, #32
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}
 80110ec:	200030c0 	.word	0x200030c0
 80110f0:	200030d4 	.word	0x200030d4

080110f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80110f4:	b480      	push	{r7}
 80110f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80110f8:	4b03      	ldr	r3, [pc, #12]	@ (8011108 <vTaskMissedYield+0x14>)
 80110fa:	2201      	movs	r2, #1
 80110fc:	601a      	str	r2, [r3, #0]
}
 80110fe:	bf00      	nop
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	200030d0 	.word	0x200030d0

0801110c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011114:	f000 f852 	bl	80111bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011118:	4b06      	ldr	r3, [pc, #24]	@ (8011134 <prvIdleTask+0x28>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d9f9      	bls.n	8011114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011120:	4b05      	ldr	r3, [pc, #20]	@ (8011138 <prvIdleTask+0x2c>)
 8011122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011126:	601a      	str	r2, [r3, #0]
 8011128:	f3bf 8f4f 	dsb	sy
 801112c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011130:	e7f0      	b.n	8011114 <prvIdleTask+0x8>
 8011132:	bf00      	nop
 8011134:	20002fc0 	.word	0x20002fc0
 8011138:	e000ed04 	.word	0xe000ed04

0801113c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011142:	2300      	movs	r3, #0
 8011144:	607b      	str	r3, [r7, #4]
 8011146:	e00c      	b.n	8011162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	4613      	mov	r3, r2
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	4413      	add	r3, r2
 8011150:	009b      	lsls	r3, r3, #2
 8011152:	4a12      	ldr	r2, [pc, #72]	@ (801119c <prvInitialiseTaskLists+0x60>)
 8011154:	4413      	add	r3, r2
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fc57 	bl	800fa0a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	3301      	adds	r3, #1
 8011160:	607b      	str	r3, [r7, #4]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2b06      	cmp	r3, #6
 8011166:	d9ef      	bls.n	8011148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011168:	480d      	ldr	r0, [pc, #52]	@ (80111a0 <prvInitialiseTaskLists+0x64>)
 801116a:	f7fe fc4e 	bl	800fa0a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801116e:	480d      	ldr	r0, [pc, #52]	@ (80111a4 <prvInitialiseTaskLists+0x68>)
 8011170:	f7fe fc4b 	bl	800fa0a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011174:	480c      	ldr	r0, [pc, #48]	@ (80111a8 <prvInitialiseTaskLists+0x6c>)
 8011176:	f7fe fc48 	bl	800fa0a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801117a:	480c      	ldr	r0, [pc, #48]	@ (80111ac <prvInitialiseTaskLists+0x70>)
 801117c:	f7fe fc45 	bl	800fa0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011180:	480b      	ldr	r0, [pc, #44]	@ (80111b0 <prvInitialiseTaskLists+0x74>)
 8011182:	f7fe fc42 	bl	800fa0a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011186:	4b0b      	ldr	r3, [pc, #44]	@ (80111b4 <prvInitialiseTaskLists+0x78>)
 8011188:	4a05      	ldr	r2, [pc, #20]	@ (80111a0 <prvInitialiseTaskLists+0x64>)
 801118a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801118c:	4b0a      	ldr	r3, [pc, #40]	@ (80111b8 <prvInitialiseTaskLists+0x7c>)
 801118e:	4a05      	ldr	r2, [pc, #20]	@ (80111a4 <prvInitialiseTaskLists+0x68>)
 8011190:	601a      	str	r2, [r3, #0]
}
 8011192:	bf00      	nop
 8011194:	3708      	adds	r7, #8
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	20002fc0 	.word	0x20002fc0
 80111a0:	2000304c 	.word	0x2000304c
 80111a4:	20003060 	.word	0x20003060
 80111a8:	2000307c 	.word	0x2000307c
 80111ac:	20003090 	.word	0x20003090
 80111b0:	200030a8 	.word	0x200030a8
 80111b4:	20003074 	.word	0x20003074
 80111b8:	20003078 	.word	0x20003078

080111bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111c2:	e019      	b.n	80111f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80111c4:	f000 fbb0 	bl	8011928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111c8:	4b10      	ldr	r3, [pc, #64]	@ (801120c <prvCheckTasksWaitingTermination+0x50>)
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	3304      	adds	r3, #4
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7fe fca2 	bl	800fb1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80111da:	4b0d      	ldr	r3, [pc, #52]	@ (8011210 <prvCheckTasksWaitingTermination+0x54>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	3b01      	subs	r3, #1
 80111e0:	4a0b      	ldr	r2, [pc, #44]	@ (8011210 <prvCheckTasksWaitingTermination+0x54>)
 80111e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80111e4:	4b0b      	ldr	r3, [pc, #44]	@ (8011214 <prvCheckTasksWaitingTermination+0x58>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	3b01      	subs	r3, #1
 80111ea:	4a0a      	ldr	r2, [pc, #40]	@ (8011214 <prvCheckTasksWaitingTermination+0x58>)
 80111ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80111ee:	f000 fbcd 	bl	801198c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 f810 	bl	8011218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111f8:	4b06      	ldr	r3, [pc, #24]	@ (8011214 <prvCheckTasksWaitingTermination+0x58>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1e1      	bne.n	80111c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011200:	bf00      	nop
 8011202:	bf00      	nop
 8011204:	3708      	adds	r7, #8
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
 801120a:	bf00      	nop
 801120c:	20003090 	.word	0x20003090
 8011210:	200030bc 	.word	0x200030bc
 8011214:	200030a4 	.word	0x200030a4

08011218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011224:	4618      	mov	r0, r3
 8011226:	f000 fd6f 	bl	8011d08 <vPortFree>
			vPortFree( pxTCB );
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 fd6c 	bl	8011d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801123e:	4b0c      	ldr	r3, [pc, #48]	@ (8011270 <prvResetNextTaskUnblockTime+0x38>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d104      	bne.n	8011252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011248:	4b0a      	ldr	r3, [pc, #40]	@ (8011274 <prvResetNextTaskUnblockTime+0x3c>)
 801124a:	f04f 32ff 	mov.w	r2, #4294967295
 801124e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011250:	e008      	b.n	8011264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011252:	4b07      	ldr	r3, [pc, #28]	@ (8011270 <prvResetNextTaskUnblockTime+0x38>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	4a04      	ldr	r2, [pc, #16]	@ (8011274 <prvResetNextTaskUnblockTime+0x3c>)
 8011262:	6013      	str	r3, [r2, #0]
}
 8011264:	bf00      	nop
 8011266:	370c      	adds	r7, #12
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr
 8011270:	20003074 	.word	0x20003074
 8011274:	200030dc 	.word	0x200030dc

08011278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011278:	b480      	push	{r7}
 801127a:	b083      	sub	sp, #12
 801127c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801127e:	4b0b      	ldr	r3, [pc, #44]	@ (80112ac <xTaskGetSchedulerState+0x34>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d102      	bne.n	801128c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011286:	2301      	movs	r3, #1
 8011288:	607b      	str	r3, [r7, #4]
 801128a:	e008      	b.n	801129e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801128c:	4b08      	ldr	r3, [pc, #32]	@ (80112b0 <xTaskGetSchedulerState+0x38>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d102      	bne.n	801129a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011294:	2302      	movs	r3, #2
 8011296:	607b      	str	r3, [r7, #4]
 8011298:	e001      	b.n	801129e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801129a:	2300      	movs	r3, #0
 801129c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801129e:	687b      	ldr	r3, [r7, #4]
	}
 80112a0:	4618      	mov	r0, r3
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr
 80112ac:	200030c8 	.word	0x200030c8
 80112b0:	200030e4 	.word	0x200030e4

080112b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80112c0:	2300      	movs	r3, #0
 80112c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d05e      	beq.n	8011388 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112ce:	4b31      	ldr	r3, [pc, #196]	@ (8011394 <xTaskPriorityInherit+0xe0>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d24e      	bcs.n	8011376 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	699b      	ldr	r3, [r3, #24]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	db06      	blt.n	80112ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112e0:	4b2c      	ldr	r3, [pc, #176]	@ (8011394 <xTaskPriorityInherit+0xe0>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112e6:	f1c3 0207 	rsb	r2, r3, #7
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	6959      	ldr	r1, [r3, #20]
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112f6:	4613      	mov	r3, r2
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	4413      	add	r3, r2
 80112fc:	009b      	lsls	r3, r3, #2
 80112fe:	4a26      	ldr	r2, [pc, #152]	@ (8011398 <xTaskPriorityInherit+0xe4>)
 8011300:	4413      	add	r3, r2
 8011302:	4299      	cmp	r1, r3
 8011304:	d12f      	bne.n	8011366 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	3304      	adds	r3, #4
 801130a:	4618      	mov	r0, r3
 801130c:	f7fe fc07 	bl	800fb1e <uxListRemove>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d10a      	bne.n	801132c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801131a:	2201      	movs	r2, #1
 801131c:	fa02 f303 	lsl.w	r3, r2, r3
 8011320:	43da      	mvns	r2, r3
 8011322:	4b1e      	ldr	r3, [pc, #120]	@ (801139c <xTaskPriorityInherit+0xe8>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	4013      	ands	r3, r2
 8011328:	4a1c      	ldr	r2, [pc, #112]	@ (801139c <xTaskPriorityInherit+0xe8>)
 801132a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801132c:	4b19      	ldr	r3, [pc, #100]	@ (8011394 <xTaskPriorityInherit+0xe0>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801133a:	2201      	movs	r2, #1
 801133c:	409a      	lsls	r2, r3
 801133e:	4b17      	ldr	r3, [pc, #92]	@ (801139c <xTaskPriorityInherit+0xe8>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	4313      	orrs	r3, r2
 8011344:	4a15      	ldr	r2, [pc, #84]	@ (801139c <xTaskPriorityInherit+0xe8>)
 8011346:	6013      	str	r3, [r2, #0]
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801134c:	4613      	mov	r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	4413      	add	r3, r2
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	4a10      	ldr	r2, [pc, #64]	@ (8011398 <xTaskPriorityInherit+0xe4>)
 8011356:	441a      	add	r2, r3
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	3304      	adds	r3, #4
 801135c:	4619      	mov	r1, r3
 801135e:	4610      	mov	r0, r2
 8011360:	f7fe fb80 	bl	800fa64 <vListInsertEnd>
 8011364:	e004      	b.n	8011370 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011366:	4b0b      	ldr	r3, [pc, #44]	@ (8011394 <xTaskPriorityInherit+0xe0>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011370:	2301      	movs	r3, #1
 8011372:	60fb      	str	r3, [r7, #12]
 8011374:	e008      	b.n	8011388 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801137a:	4b06      	ldr	r3, [pc, #24]	@ (8011394 <xTaskPriorityInherit+0xe0>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011380:	429a      	cmp	r2, r3
 8011382:	d201      	bcs.n	8011388 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011384:	2301      	movs	r3, #1
 8011386:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011388:	68fb      	ldr	r3, [r7, #12]
	}
 801138a:	4618      	mov	r0, r3
 801138c:	3710      	adds	r7, #16
 801138e:	46bd      	mov	sp, r7
 8011390:	bd80      	pop	{r7, pc}
 8011392:	bf00      	nop
 8011394:	20002fbc 	.word	0x20002fbc
 8011398:	20002fc0 	.word	0x20002fc0
 801139c:	200030c4 	.word	0x200030c4

080113a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80113ac:	2300      	movs	r3, #0
 80113ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d070      	beq.n	8011498 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80113b6:	4b3b      	ldr	r3, [pc, #236]	@ (80114a4 <xTaskPriorityDisinherit+0x104>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	693a      	ldr	r2, [r7, #16]
 80113bc:	429a      	cmp	r2, r3
 80113be:	d00b      	beq.n	80113d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80113c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113c4:	f383 8811 	msr	BASEPRI, r3
 80113c8:	f3bf 8f6f 	isb	sy
 80113cc:	f3bf 8f4f 	dsb	sy
 80113d0:	60fb      	str	r3, [r7, #12]
}
 80113d2:	bf00      	nop
 80113d4:	bf00      	nop
 80113d6:	e7fd      	b.n	80113d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d10b      	bne.n	80113f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80113e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113e4:	f383 8811 	msr	BASEPRI, r3
 80113e8:	f3bf 8f6f 	isb	sy
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	60bb      	str	r3, [r7, #8]
}
 80113f2:	bf00      	nop
 80113f4:	bf00      	nop
 80113f6:	e7fd      	b.n	80113f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80113fc:	1e5a      	subs	r2, r3, #1
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801140a:	429a      	cmp	r2, r3
 801140c:	d044      	beq.n	8011498 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011412:	2b00      	cmp	r3, #0
 8011414:	d140      	bne.n	8011498 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	3304      	adds	r3, #4
 801141a:	4618      	mov	r0, r3
 801141c:	f7fe fb7f 	bl	800fb1e <uxListRemove>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	d115      	bne.n	8011452 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801142a:	491f      	ldr	r1, [pc, #124]	@ (80114a8 <xTaskPriorityDisinherit+0x108>)
 801142c:	4613      	mov	r3, r2
 801142e:	009b      	lsls	r3, r3, #2
 8011430:	4413      	add	r3, r2
 8011432:	009b      	lsls	r3, r3, #2
 8011434:	440b      	add	r3, r1
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d10a      	bne.n	8011452 <xTaskPriorityDisinherit+0xb2>
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011440:	2201      	movs	r2, #1
 8011442:	fa02 f303 	lsl.w	r3, r2, r3
 8011446:	43da      	mvns	r2, r3
 8011448:	4b18      	ldr	r3, [pc, #96]	@ (80114ac <xTaskPriorityDisinherit+0x10c>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4013      	ands	r3, r2
 801144e:	4a17      	ldr	r2, [pc, #92]	@ (80114ac <xTaskPriorityDisinherit+0x10c>)
 8011450:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801145e:	f1c3 0207 	rsb	r2, r3, #7
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011466:	693b      	ldr	r3, [r7, #16]
 8011468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801146a:	2201      	movs	r2, #1
 801146c:	409a      	lsls	r2, r3
 801146e:	4b0f      	ldr	r3, [pc, #60]	@ (80114ac <xTaskPriorityDisinherit+0x10c>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4313      	orrs	r3, r2
 8011474:	4a0d      	ldr	r2, [pc, #52]	@ (80114ac <xTaskPriorityDisinherit+0x10c>)
 8011476:	6013      	str	r3, [r2, #0]
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801147c:	4613      	mov	r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	4413      	add	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	4a08      	ldr	r2, [pc, #32]	@ (80114a8 <xTaskPriorityDisinherit+0x108>)
 8011486:	441a      	add	r2, r3
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	3304      	adds	r3, #4
 801148c:	4619      	mov	r1, r3
 801148e:	4610      	mov	r0, r2
 8011490:	f7fe fae8 	bl	800fa64 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011494:	2301      	movs	r3, #1
 8011496:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011498:	697b      	ldr	r3, [r7, #20]
	}
 801149a:	4618      	mov	r0, r3
 801149c:	3718      	adds	r7, #24
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	20002fbc 	.word	0x20002fbc
 80114a8:	20002fc0 	.word	0x20002fc0
 80114ac:	200030c4 	.word	0x200030c4

080114b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b088      	sub	sp, #32
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80114be:	2301      	movs	r3, #1
 80114c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d079      	beq.n	80115bc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80114c8:	69bb      	ldr	r3, [r7, #24]
 80114ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d10b      	bne.n	80114e8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80114d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d4:	f383 8811 	msr	BASEPRI, r3
 80114d8:	f3bf 8f6f 	isb	sy
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	60fb      	str	r3, [r7, #12]
}
 80114e2:	bf00      	nop
 80114e4:	bf00      	nop
 80114e6:	e7fd      	b.n	80114e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80114e8:	69bb      	ldr	r3, [r7, #24]
 80114ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114ec:	683a      	ldr	r2, [r7, #0]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d902      	bls.n	80114f8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	61fb      	str	r3, [r7, #28]
 80114f6:	e002      	b.n	80114fe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114fc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011502:	69fa      	ldr	r2, [r7, #28]
 8011504:	429a      	cmp	r2, r3
 8011506:	d059      	beq.n	80115bc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801150c:	697a      	ldr	r2, [r7, #20]
 801150e:	429a      	cmp	r2, r3
 8011510:	d154      	bne.n	80115bc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011512:	4b2c      	ldr	r3, [pc, #176]	@ (80115c4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	69ba      	ldr	r2, [r7, #24]
 8011518:	429a      	cmp	r2, r3
 801151a:	d10b      	bne.n	8011534 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801151c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011520:	f383 8811 	msr	BASEPRI, r3
 8011524:	f3bf 8f6f 	isb	sy
 8011528:	f3bf 8f4f 	dsb	sy
 801152c:	60bb      	str	r3, [r7, #8]
}
 801152e:	bf00      	nop
 8011530:	bf00      	nop
 8011532:	e7fd      	b.n	8011530 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011534:	69bb      	ldr	r3, [r7, #24]
 8011536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011538:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801153a:	69bb      	ldr	r3, [r7, #24]
 801153c:	69fa      	ldr	r2, [r7, #28]
 801153e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	699b      	ldr	r3, [r3, #24]
 8011544:	2b00      	cmp	r3, #0
 8011546:	db04      	blt.n	8011552 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	f1c3 0207 	rsb	r2, r3, #7
 801154e:	69bb      	ldr	r3, [r7, #24]
 8011550:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	6959      	ldr	r1, [r3, #20]
 8011556:	693a      	ldr	r2, [r7, #16]
 8011558:	4613      	mov	r3, r2
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	4413      	add	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	4a19      	ldr	r2, [pc, #100]	@ (80115c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011562:	4413      	add	r3, r2
 8011564:	4299      	cmp	r1, r3
 8011566:	d129      	bne.n	80115bc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	3304      	adds	r3, #4
 801156c:	4618      	mov	r0, r3
 801156e:	f7fe fad6 	bl	800fb1e <uxListRemove>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d10a      	bne.n	801158e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801157c:	2201      	movs	r2, #1
 801157e:	fa02 f303 	lsl.w	r3, r2, r3
 8011582:	43da      	mvns	r2, r3
 8011584:	4b11      	ldr	r3, [pc, #68]	@ (80115cc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4013      	ands	r3, r2
 801158a:	4a10      	ldr	r2, [pc, #64]	@ (80115cc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801158c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011592:	2201      	movs	r2, #1
 8011594:	409a      	lsls	r2, r3
 8011596:	4b0d      	ldr	r3, [pc, #52]	@ (80115cc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4313      	orrs	r3, r2
 801159c:	4a0b      	ldr	r2, [pc, #44]	@ (80115cc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801159e:	6013      	str	r3, [r2, #0]
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115a4:	4613      	mov	r3, r2
 80115a6:	009b      	lsls	r3, r3, #2
 80115a8:	4413      	add	r3, r2
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	4a06      	ldr	r2, [pc, #24]	@ (80115c8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80115ae:	441a      	add	r2, r3
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	3304      	adds	r3, #4
 80115b4:	4619      	mov	r1, r3
 80115b6:	4610      	mov	r0, r2
 80115b8:	f7fe fa54 	bl	800fa64 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80115bc:	bf00      	nop
 80115be:	3720      	adds	r7, #32
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	20002fbc 	.word	0x20002fbc
 80115c8:	20002fc0 	.word	0x20002fc0
 80115cc:	200030c4 	.word	0x200030c4

080115d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80115d0:	b480      	push	{r7}
 80115d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80115d4:	4b07      	ldr	r3, [pc, #28]	@ (80115f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d004      	beq.n	80115e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80115dc:	4b05      	ldr	r3, [pc, #20]	@ (80115f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80115e2:	3201      	adds	r2, #1
 80115e4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80115e6:	4b03      	ldr	r3, [pc, #12]	@ (80115f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80115e8:	681b      	ldr	r3, [r3, #0]
	}
 80115ea:	4618      	mov	r0, r3
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	4770      	bx	lr
 80115f4:	20002fbc 	.word	0x20002fbc

080115f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011602:	4b29      	ldr	r3, [pc, #164]	@ (80116a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011608:	4b28      	ldr	r3, [pc, #160]	@ (80116ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3304      	adds	r3, #4
 801160e:	4618      	mov	r0, r3
 8011610:	f7fe fa85 	bl	800fb1e <uxListRemove>
 8011614:	4603      	mov	r3, r0
 8011616:	2b00      	cmp	r3, #0
 8011618:	d10b      	bne.n	8011632 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801161a:	4b24      	ldr	r3, [pc, #144]	@ (80116ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011620:	2201      	movs	r2, #1
 8011622:	fa02 f303 	lsl.w	r3, r2, r3
 8011626:	43da      	mvns	r2, r3
 8011628:	4b21      	ldr	r3, [pc, #132]	@ (80116b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4013      	ands	r3, r2
 801162e:	4a20      	ldr	r2, [pc, #128]	@ (80116b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011630:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011638:	d10a      	bne.n	8011650 <prvAddCurrentTaskToDelayedList+0x58>
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d007      	beq.n	8011650 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011640:	4b1a      	ldr	r3, [pc, #104]	@ (80116ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	3304      	adds	r3, #4
 8011646:	4619      	mov	r1, r3
 8011648:	481a      	ldr	r0, [pc, #104]	@ (80116b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801164a:	f7fe fa0b 	bl	800fa64 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801164e:	e026      	b.n	801169e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	4413      	add	r3, r2
 8011656:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011658:	4b14      	ldr	r3, [pc, #80]	@ (80116ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	68ba      	ldr	r2, [r7, #8]
 801165e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011660:	68ba      	ldr	r2, [r7, #8]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	429a      	cmp	r2, r3
 8011666:	d209      	bcs.n	801167c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011668:	4b13      	ldr	r3, [pc, #76]	@ (80116b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	4b0f      	ldr	r3, [pc, #60]	@ (80116ac <prvAddCurrentTaskToDelayedList+0xb4>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	3304      	adds	r3, #4
 8011672:	4619      	mov	r1, r3
 8011674:	4610      	mov	r0, r2
 8011676:	f7fe fa19 	bl	800faac <vListInsert>
}
 801167a:	e010      	b.n	801169e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801167c:	4b0f      	ldr	r3, [pc, #60]	@ (80116bc <prvAddCurrentTaskToDelayedList+0xc4>)
 801167e:	681a      	ldr	r2, [r3, #0]
 8011680:	4b0a      	ldr	r3, [pc, #40]	@ (80116ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	3304      	adds	r3, #4
 8011686:	4619      	mov	r1, r3
 8011688:	4610      	mov	r0, r2
 801168a:	f7fe fa0f 	bl	800faac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801168e:	4b0c      	ldr	r3, [pc, #48]	@ (80116c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	68ba      	ldr	r2, [r7, #8]
 8011694:	429a      	cmp	r2, r3
 8011696:	d202      	bcs.n	801169e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011698:	4a09      	ldr	r2, [pc, #36]	@ (80116c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	6013      	str	r3, [r2, #0]
}
 801169e:	bf00      	nop
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	200030c0 	.word	0x200030c0
 80116ac:	20002fbc 	.word	0x20002fbc
 80116b0:	200030c4 	.word	0x200030c4
 80116b4:	200030a8 	.word	0x200030a8
 80116b8:	20003078 	.word	0x20003078
 80116bc:	20003074 	.word	0x20003074
 80116c0:	200030dc 	.word	0x200030dc

080116c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80116c4:	b480      	push	{r7}
 80116c6:	b085      	sub	sp, #20
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	3b04      	subs	r3, #4
 80116d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80116dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	3b04      	subs	r3, #4
 80116e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	f023 0201 	bic.w	r2, r3, #1
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	3b04      	subs	r3, #4
 80116f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80116f4:	4a0c      	ldr	r2, [pc, #48]	@ (8011728 <pxPortInitialiseStack+0x64>)
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	3b14      	subs	r3, #20
 80116fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	3b04      	subs	r3, #4
 801170a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f06f 0202 	mvn.w	r2, #2
 8011712:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	3b20      	subs	r3, #32
 8011718:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801171a:	68fb      	ldr	r3, [r7, #12]
}
 801171c:	4618      	mov	r0, r3
 801171e:	3714      	adds	r7, #20
 8011720:	46bd      	mov	sp, r7
 8011722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011726:	4770      	bx	lr
 8011728:	0801172d 	.word	0x0801172d

0801172c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801172c:	b480      	push	{r7}
 801172e:	b085      	sub	sp, #20
 8011730:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011732:	2300      	movs	r3, #0
 8011734:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011736:	4b13      	ldr	r3, [pc, #76]	@ (8011784 <prvTaskExitError+0x58>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173e:	d00b      	beq.n	8011758 <prvTaskExitError+0x2c>
	__asm volatile
 8011740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011744:	f383 8811 	msr	BASEPRI, r3
 8011748:	f3bf 8f6f 	isb	sy
 801174c:	f3bf 8f4f 	dsb	sy
 8011750:	60fb      	str	r3, [r7, #12]
}
 8011752:	bf00      	nop
 8011754:	bf00      	nop
 8011756:	e7fd      	b.n	8011754 <prvTaskExitError+0x28>
	__asm volatile
 8011758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801175c:	f383 8811 	msr	BASEPRI, r3
 8011760:	f3bf 8f6f 	isb	sy
 8011764:	f3bf 8f4f 	dsb	sy
 8011768:	60bb      	str	r3, [r7, #8]
}
 801176a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801176c:	bf00      	nop
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d0fc      	beq.n	801176e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011774:	bf00      	nop
 8011776:	bf00      	nop
 8011778:	3714      	adds	r7, #20
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop
 8011784:	20000674 	.word	0x20000674
	...

08011790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011790:	4b07      	ldr	r3, [pc, #28]	@ (80117b0 <pxCurrentTCBConst2>)
 8011792:	6819      	ldr	r1, [r3, #0]
 8011794:	6808      	ldr	r0, [r1, #0]
 8011796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801179a:	f380 8809 	msr	PSP, r0
 801179e:	f3bf 8f6f 	isb	sy
 80117a2:	f04f 0000 	mov.w	r0, #0
 80117a6:	f380 8811 	msr	BASEPRI, r0
 80117aa:	4770      	bx	lr
 80117ac:	f3af 8000 	nop.w

080117b0 <pxCurrentTCBConst2>:
 80117b0:	20002fbc 	.word	0x20002fbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80117b4:	bf00      	nop
 80117b6:	bf00      	nop

080117b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80117b8:	4808      	ldr	r0, [pc, #32]	@ (80117dc <prvPortStartFirstTask+0x24>)
 80117ba:	6800      	ldr	r0, [r0, #0]
 80117bc:	6800      	ldr	r0, [r0, #0]
 80117be:	f380 8808 	msr	MSP, r0
 80117c2:	f04f 0000 	mov.w	r0, #0
 80117c6:	f380 8814 	msr	CONTROL, r0
 80117ca:	b662      	cpsie	i
 80117cc:	b661      	cpsie	f
 80117ce:	f3bf 8f4f 	dsb	sy
 80117d2:	f3bf 8f6f 	isb	sy
 80117d6:	df00      	svc	0
 80117d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80117da:	bf00      	nop
 80117dc:	e000ed08 	.word	0xe000ed08

080117e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b086      	sub	sp, #24
 80117e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80117e6:	4b47      	ldr	r3, [pc, #284]	@ (8011904 <xPortStartScheduler+0x124>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	4a47      	ldr	r2, [pc, #284]	@ (8011908 <xPortStartScheduler+0x128>)
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d10b      	bne.n	8011808 <xPortStartScheduler+0x28>
	__asm volatile
 80117f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117f4:	f383 8811 	msr	BASEPRI, r3
 80117f8:	f3bf 8f6f 	isb	sy
 80117fc:	f3bf 8f4f 	dsb	sy
 8011800:	613b      	str	r3, [r7, #16]
}
 8011802:	bf00      	nop
 8011804:	bf00      	nop
 8011806:	e7fd      	b.n	8011804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011808:	4b3e      	ldr	r3, [pc, #248]	@ (8011904 <xPortStartScheduler+0x124>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	4a3f      	ldr	r2, [pc, #252]	@ (801190c <xPortStartScheduler+0x12c>)
 801180e:	4293      	cmp	r3, r2
 8011810:	d10b      	bne.n	801182a <xPortStartScheduler+0x4a>
	__asm volatile
 8011812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011816:	f383 8811 	msr	BASEPRI, r3
 801181a:	f3bf 8f6f 	isb	sy
 801181e:	f3bf 8f4f 	dsb	sy
 8011822:	60fb      	str	r3, [r7, #12]
}
 8011824:	bf00      	nop
 8011826:	bf00      	nop
 8011828:	e7fd      	b.n	8011826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801182a:	4b39      	ldr	r3, [pc, #228]	@ (8011910 <xPortStartScheduler+0x130>)
 801182c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	b2db      	uxtb	r3, r3
 8011834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	22ff      	movs	r2, #255	@ 0xff
 801183a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	b2db      	uxtb	r3, r3
 8011842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011844:	78fb      	ldrb	r3, [r7, #3]
 8011846:	b2db      	uxtb	r3, r3
 8011848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801184c:	b2da      	uxtb	r2, r3
 801184e:	4b31      	ldr	r3, [pc, #196]	@ (8011914 <xPortStartScheduler+0x134>)
 8011850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011852:	4b31      	ldr	r3, [pc, #196]	@ (8011918 <xPortStartScheduler+0x138>)
 8011854:	2207      	movs	r2, #7
 8011856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011858:	e009      	b.n	801186e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801185a:	4b2f      	ldr	r3, [pc, #188]	@ (8011918 <xPortStartScheduler+0x138>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	3b01      	subs	r3, #1
 8011860:	4a2d      	ldr	r2, [pc, #180]	@ (8011918 <xPortStartScheduler+0x138>)
 8011862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011864:	78fb      	ldrb	r3, [r7, #3]
 8011866:	b2db      	uxtb	r3, r3
 8011868:	005b      	lsls	r3, r3, #1
 801186a:	b2db      	uxtb	r3, r3
 801186c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801186e:	78fb      	ldrb	r3, [r7, #3]
 8011870:	b2db      	uxtb	r3, r3
 8011872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011876:	2b80      	cmp	r3, #128	@ 0x80
 8011878:	d0ef      	beq.n	801185a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801187a:	4b27      	ldr	r3, [pc, #156]	@ (8011918 <xPortStartScheduler+0x138>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f1c3 0307 	rsb	r3, r3, #7
 8011882:	2b04      	cmp	r3, #4
 8011884:	d00b      	beq.n	801189e <xPortStartScheduler+0xbe>
	__asm volatile
 8011886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801188a:	f383 8811 	msr	BASEPRI, r3
 801188e:	f3bf 8f6f 	isb	sy
 8011892:	f3bf 8f4f 	dsb	sy
 8011896:	60bb      	str	r3, [r7, #8]
}
 8011898:	bf00      	nop
 801189a:	bf00      	nop
 801189c:	e7fd      	b.n	801189a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801189e:	4b1e      	ldr	r3, [pc, #120]	@ (8011918 <xPortStartScheduler+0x138>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	021b      	lsls	r3, r3, #8
 80118a4:	4a1c      	ldr	r2, [pc, #112]	@ (8011918 <xPortStartScheduler+0x138>)
 80118a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80118a8:	4b1b      	ldr	r3, [pc, #108]	@ (8011918 <xPortStartScheduler+0x138>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80118b0:	4a19      	ldr	r2, [pc, #100]	@ (8011918 <xPortStartScheduler+0x138>)
 80118b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80118bc:	4b17      	ldr	r3, [pc, #92]	@ (801191c <xPortStartScheduler+0x13c>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	4a16      	ldr	r2, [pc, #88]	@ (801191c <xPortStartScheduler+0x13c>)
 80118c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80118c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80118c8:	4b14      	ldr	r3, [pc, #80]	@ (801191c <xPortStartScheduler+0x13c>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4a13      	ldr	r2, [pc, #76]	@ (801191c <xPortStartScheduler+0x13c>)
 80118ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80118d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80118d4:	f000 f8da 	bl	8011a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80118d8:	4b11      	ldr	r3, [pc, #68]	@ (8011920 <xPortStartScheduler+0x140>)
 80118da:	2200      	movs	r2, #0
 80118dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80118de:	f000 f8f9 	bl	8011ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80118e2:	4b10      	ldr	r3, [pc, #64]	@ (8011924 <xPortStartScheduler+0x144>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	4a0f      	ldr	r2, [pc, #60]	@ (8011924 <xPortStartScheduler+0x144>)
 80118e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80118ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80118ee:	f7ff ff63 	bl	80117b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80118f2:	f7ff fa9f 	bl	8010e34 <vTaskSwitchContext>
	prvTaskExitError();
 80118f6:	f7ff ff19 	bl	801172c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80118fa:	2300      	movs	r3, #0
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3718      	adds	r7, #24
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	e000ed00 	.word	0xe000ed00
 8011908:	410fc271 	.word	0x410fc271
 801190c:	410fc270 	.word	0x410fc270
 8011910:	e000e400 	.word	0xe000e400
 8011914:	200030e8 	.word	0x200030e8
 8011918:	200030ec 	.word	0x200030ec
 801191c:	e000ed20 	.word	0xe000ed20
 8011920:	20000674 	.word	0x20000674
 8011924:	e000ef34 	.word	0xe000ef34

08011928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
	__asm volatile
 801192e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011932:	f383 8811 	msr	BASEPRI, r3
 8011936:	f3bf 8f6f 	isb	sy
 801193a:	f3bf 8f4f 	dsb	sy
 801193e:	607b      	str	r3, [r7, #4]
}
 8011940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011942:	4b10      	ldr	r3, [pc, #64]	@ (8011984 <vPortEnterCritical+0x5c>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	3301      	adds	r3, #1
 8011948:	4a0e      	ldr	r2, [pc, #56]	@ (8011984 <vPortEnterCritical+0x5c>)
 801194a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801194c:	4b0d      	ldr	r3, [pc, #52]	@ (8011984 <vPortEnterCritical+0x5c>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2b01      	cmp	r3, #1
 8011952:	d110      	bne.n	8011976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011954:	4b0c      	ldr	r3, [pc, #48]	@ (8011988 <vPortEnterCritical+0x60>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	b2db      	uxtb	r3, r3
 801195a:	2b00      	cmp	r3, #0
 801195c:	d00b      	beq.n	8011976 <vPortEnterCritical+0x4e>
	__asm volatile
 801195e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011962:	f383 8811 	msr	BASEPRI, r3
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	f3bf 8f4f 	dsb	sy
 801196e:	603b      	str	r3, [r7, #0]
}
 8011970:	bf00      	nop
 8011972:	bf00      	nop
 8011974:	e7fd      	b.n	8011972 <vPortEnterCritical+0x4a>
	}
}
 8011976:	bf00      	nop
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	20000674 	.word	0x20000674
 8011988:	e000ed04 	.word	0xe000ed04

0801198c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801198c:	b480      	push	{r7}
 801198e:	b083      	sub	sp, #12
 8011990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011992:	4b12      	ldr	r3, [pc, #72]	@ (80119dc <vPortExitCritical+0x50>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d10b      	bne.n	80119b2 <vPortExitCritical+0x26>
	__asm volatile
 801199a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801199e:	f383 8811 	msr	BASEPRI, r3
 80119a2:	f3bf 8f6f 	isb	sy
 80119a6:	f3bf 8f4f 	dsb	sy
 80119aa:	607b      	str	r3, [r7, #4]
}
 80119ac:	bf00      	nop
 80119ae:	bf00      	nop
 80119b0:	e7fd      	b.n	80119ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80119b2:	4b0a      	ldr	r3, [pc, #40]	@ (80119dc <vPortExitCritical+0x50>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	3b01      	subs	r3, #1
 80119b8:	4a08      	ldr	r2, [pc, #32]	@ (80119dc <vPortExitCritical+0x50>)
 80119ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80119bc:	4b07      	ldr	r3, [pc, #28]	@ (80119dc <vPortExitCritical+0x50>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d105      	bne.n	80119d0 <vPortExitCritical+0x44>
 80119c4:	2300      	movs	r3, #0
 80119c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	f383 8811 	msr	BASEPRI, r3
}
 80119ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80119d0:	bf00      	nop
 80119d2:	370c      	adds	r7, #12
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr
 80119dc:	20000674 	.word	0x20000674

080119e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80119e0:	f3ef 8009 	mrs	r0, PSP
 80119e4:	f3bf 8f6f 	isb	sy
 80119e8:	4b15      	ldr	r3, [pc, #84]	@ (8011a40 <pxCurrentTCBConst>)
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	f01e 0f10 	tst.w	lr, #16
 80119f0:	bf08      	it	eq
 80119f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80119f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119fa:	6010      	str	r0, [r2, #0]
 80119fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011a04:	f380 8811 	msr	BASEPRI, r0
 8011a08:	f3bf 8f4f 	dsb	sy
 8011a0c:	f3bf 8f6f 	isb	sy
 8011a10:	f7ff fa10 	bl	8010e34 <vTaskSwitchContext>
 8011a14:	f04f 0000 	mov.w	r0, #0
 8011a18:	f380 8811 	msr	BASEPRI, r0
 8011a1c:	bc09      	pop	{r0, r3}
 8011a1e:	6819      	ldr	r1, [r3, #0]
 8011a20:	6808      	ldr	r0, [r1, #0]
 8011a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a26:	f01e 0f10 	tst.w	lr, #16
 8011a2a:	bf08      	it	eq
 8011a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011a30:	f380 8809 	msr	PSP, r0
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	4770      	bx	lr
 8011a3a:	bf00      	nop
 8011a3c:	f3af 8000 	nop.w

08011a40 <pxCurrentTCBConst>:
 8011a40:	20002fbc 	.word	0x20002fbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011a44:	bf00      	nop
 8011a46:	bf00      	nop

08011a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8011a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a52:	f383 8811 	msr	BASEPRI, r3
 8011a56:	f3bf 8f6f 	isb	sy
 8011a5a:	f3bf 8f4f 	dsb	sy
 8011a5e:	607b      	str	r3, [r7, #4]
}
 8011a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011a62:	f7ff f92d 	bl	8010cc0 <xTaskIncrementTick>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d003      	beq.n	8011a74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011a6c:	4b06      	ldr	r3, [pc, #24]	@ (8011a88 <SysTick_Handler+0x40>)
 8011a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a72:	601a      	str	r2, [r3, #0]
 8011a74:	2300      	movs	r3, #0
 8011a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	f383 8811 	msr	BASEPRI, r3
}
 8011a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011a80:	bf00      	nop
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	e000ed04 	.word	0xe000ed04

08011a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011a90:	4b0b      	ldr	r3, [pc, #44]	@ (8011ac0 <vPortSetupTimerInterrupt+0x34>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011a96:	4b0b      	ldr	r3, [pc, #44]	@ (8011ac4 <vPortSetupTimerInterrupt+0x38>)
 8011a98:	2200      	movs	r2, #0
 8011a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8011ac8 <vPortSetupTimerInterrupt+0x3c>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8011acc <vPortSetupTimerInterrupt+0x40>)
 8011aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8011aa6:	099b      	lsrs	r3, r3, #6
 8011aa8:	4a09      	ldr	r2, [pc, #36]	@ (8011ad0 <vPortSetupTimerInterrupt+0x44>)
 8011aaa:	3b01      	subs	r3, #1
 8011aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011aae:	4b04      	ldr	r3, [pc, #16]	@ (8011ac0 <vPortSetupTimerInterrupt+0x34>)
 8011ab0:	2207      	movs	r2, #7
 8011ab2:	601a      	str	r2, [r3, #0]
}
 8011ab4:	bf00      	nop
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr
 8011abe:	bf00      	nop
 8011ac0:	e000e010 	.word	0xe000e010
 8011ac4:	e000e018 	.word	0xe000e018
 8011ac8:	20000004 	.word	0x20000004
 8011acc:	10624dd3 	.word	0x10624dd3
 8011ad0:	e000e014 	.word	0xe000e014

08011ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011ae4 <vPortEnableVFP+0x10>
 8011ad8:	6801      	ldr	r1, [r0, #0]
 8011ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011ade:	6001      	str	r1, [r0, #0]
 8011ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011ae2:	bf00      	nop
 8011ae4:	e000ed88 	.word	0xe000ed88

08011ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011ae8:	b480      	push	{r7}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011aee:	f3ef 8305 	mrs	r3, IPSR
 8011af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2b0f      	cmp	r3, #15
 8011af8:	d915      	bls.n	8011b26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011afa:	4a18      	ldr	r2, [pc, #96]	@ (8011b5c <vPortValidateInterruptPriority+0x74>)
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	4413      	add	r3, r2
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011b04:	4b16      	ldr	r3, [pc, #88]	@ (8011b60 <vPortValidateInterruptPriority+0x78>)
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	7afa      	ldrb	r2, [r7, #11]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d20b      	bcs.n	8011b26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b12:	f383 8811 	msr	BASEPRI, r3
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	f3bf 8f4f 	dsb	sy
 8011b1e:	607b      	str	r3, [r7, #4]
}
 8011b20:	bf00      	nop
 8011b22:	bf00      	nop
 8011b24:	e7fd      	b.n	8011b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011b26:	4b0f      	ldr	r3, [pc, #60]	@ (8011b64 <vPortValidateInterruptPriority+0x7c>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8011b68 <vPortValidateInterruptPriority+0x80>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d90b      	bls.n	8011b4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b3a:	f383 8811 	msr	BASEPRI, r3
 8011b3e:	f3bf 8f6f 	isb	sy
 8011b42:	f3bf 8f4f 	dsb	sy
 8011b46:	603b      	str	r3, [r7, #0]
}
 8011b48:	bf00      	nop
 8011b4a:	bf00      	nop
 8011b4c:	e7fd      	b.n	8011b4a <vPortValidateInterruptPriority+0x62>
	}
 8011b4e:	bf00      	nop
 8011b50:	3714      	adds	r7, #20
 8011b52:	46bd      	mov	sp, r7
 8011b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop
 8011b5c:	e000e3f0 	.word	0xe000e3f0
 8011b60:	200030e8 	.word	0x200030e8
 8011b64:	e000ed0c 	.word	0xe000ed0c
 8011b68:	200030ec 	.word	0x200030ec

08011b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b08a      	sub	sp, #40	@ 0x28
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011b74:	2300      	movs	r3, #0
 8011b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011b78:	f7fe ffe6 	bl	8010b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8011cf0 <pvPortMalloc+0x184>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d101      	bne.n	8011b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011b84:	f000 f924 	bl	8011dd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011b88:	4b5a      	ldr	r3, [pc, #360]	@ (8011cf4 <pvPortMalloc+0x188>)
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	4013      	ands	r3, r2
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	f040 8095 	bne.w	8011cc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d01e      	beq.n	8011bda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011b9c:	2208      	movs	r2, #8
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f003 0307 	and.w	r3, r3, #7
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d015      	beq.n	8011bda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f023 0307 	bic.w	r3, r3, #7
 8011bb4:	3308      	adds	r3, #8
 8011bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f003 0307 	and.w	r3, r3, #7
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d00b      	beq.n	8011bda <pvPortMalloc+0x6e>
	__asm volatile
 8011bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bc6:	f383 8811 	msr	BASEPRI, r3
 8011bca:	f3bf 8f6f 	isb	sy
 8011bce:	f3bf 8f4f 	dsb	sy
 8011bd2:	617b      	str	r3, [r7, #20]
}
 8011bd4:	bf00      	nop
 8011bd6:	bf00      	nop
 8011bd8:	e7fd      	b.n	8011bd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d06f      	beq.n	8011cc0 <pvPortMalloc+0x154>
 8011be0:	4b45      	ldr	r3, [pc, #276]	@ (8011cf8 <pvPortMalloc+0x18c>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d86a      	bhi.n	8011cc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011bea:	4b44      	ldr	r3, [pc, #272]	@ (8011cfc <pvPortMalloc+0x190>)
 8011bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011bee:	4b43      	ldr	r3, [pc, #268]	@ (8011cfc <pvPortMalloc+0x190>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011bf4:	e004      	b.n	8011c00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	687a      	ldr	r2, [r7, #4]
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d903      	bls.n	8011c12 <pvPortMalloc+0xa6>
 8011c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1f1      	bne.n	8011bf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011c12:	4b37      	ldr	r3, [pc, #220]	@ (8011cf0 <pvPortMalloc+0x184>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d051      	beq.n	8011cc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011c1c:	6a3b      	ldr	r3, [r7, #32]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2208      	movs	r2, #8
 8011c22:	4413      	add	r3, r2
 8011c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	6a3b      	ldr	r3, [r7, #32]
 8011c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c30:	685a      	ldr	r2, [r3, #4]
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	1ad2      	subs	r2, r2, r3
 8011c36:	2308      	movs	r3, #8
 8011c38:	005b      	lsls	r3, r3, #1
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d920      	bls.n	8011c80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	4413      	add	r3, r2
 8011c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c46:	69bb      	ldr	r3, [r7, #24]
 8011c48:	f003 0307 	and.w	r3, r3, #7
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00b      	beq.n	8011c68 <pvPortMalloc+0xfc>
	__asm volatile
 8011c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c54:	f383 8811 	msr	BASEPRI, r3
 8011c58:	f3bf 8f6f 	isb	sy
 8011c5c:	f3bf 8f4f 	dsb	sy
 8011c60:	613b      	str	r3, [r7, #16]
}
 8011c62:	bf00      	nop
 8011c64:	bf00      	nop
 8011c66:	e7fd      	b.n	8011c64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c6a:	685a      	ldr	r2, [r3, #4]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	1ad2      	subs	r2, r2, r3
 8011c70:	69bb      	ldr	r3, [r7, #24]
 8011c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011c7a:	69b8      	ldr	r0, [r7, #24]
 8011c7c:	f000 f90c 	bl	8011e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011c80:	4b1d      	ldr	r3, [pc, #116]	@ (8011cf8 <pvPortMalloc+0x18c>)
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	1ad3      	subs	r3, r2, r3
 8011c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8011cf8 <pvPortMalloc+0x18c>)
 8011c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8011cf8 <pvPortMalloc+0x18c>)
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	4b1b      	ldr	r3, [pc, #108]	@ (8011d00 <pvPortMalloc+0x194>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d203      	bcs.n	8011ca2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011c9a:	4b17      	ldr	r3, [pc, #92]	@ (8011cf8 <pvPortMalloc+0x18c>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	4a18      	ldr	r2, [pc, #96]	@ (8011d00 <pvPortMalloc+0x194>)
 8011ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ca4:	685a      	ldr	r2, [r3, #4]
 8011ca6:	4b13      	ldr	r3, [pc, #76]	@ (8011cf4 <pvPortMalloc+0x188>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	431a      	orrs	r2, r3
 8011cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011cb6:	4b13      	ldr	r3, [pc, #76]	@ (8011d04 <pvPortMalloc+0x198>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	3301      	adds	r3, #1
 8011cbc:	4a11      	ldr	r2, [pc, #68]	@ (8011d04 <pvPortMalloc+0x198>)
 8011cbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011cc0:	f7fe ff50 	bl	8010b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011cc4:	69fb      	ldr	r3, [r7, #28]
 8011cc6:	f003 0307 	and.w	r3, r3, #7
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d00b      	beq.n	8011ce6 <pvPortMalloc+0x17a>
	__asm volatile
 8011cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cd2:	f383 8811 	msr	BASEPRI, r3
 8011cd6:	f3bf 8f6f 	isb	sy
 8011cda:	f3bf 8f4f 	dsb	sy
 8011cde:	60fb      	str	r3, [r7, #12]
}
 8011ce0:	bf00      	nop
 8011ce2:	bf00      	nop
 8011ce4:	e7fd      	b.n	8011ce2 <pvPortMalloc+0x176>
	return pvReturn;
 8011ce6:	69fb      	ldr	r3, [r7, #28]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3728      	adds	r7, #40	@ 0x28
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	200136b0 	.word	0x200136b0
 8011cf4:	200136c4 	.word	0x200136c4
 8011cf8:	200136b4 	.word	0x200136b4
 8011cfc:	200136a8 	.word	0x200136a8
 8011d00:	200136b8 	.word	0x200136b8
 8011d04:	200136bc 	.word	0x200136bc

08011d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d04f      	beq.n	8011dba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011d1a:	2308      	movs	r3, #8
 8011d1c:	425b      	negs	r3, r3
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	4413      	add	r3, r2
 8011d22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	685a      	ldr	r2, [r3, #4]
 8011d2c:	4b25      	ldr	r3, [pc, #148]	@ (8011dc4 <vPortFree+0xbc>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4013      	ands	r3, r2
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d10b      	bne.n	8011d4e <vPortFree+0x46>
	__asm volatile
 8011d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d3a:	f383 8811 	msr	BASEPRI, r3
 8011d3e:	f3bf 8f6f 	isb	sy
 8011d42:	f3bf 8f4f 	dsb	sy
 8011d46:	60fb      	str	r3, [r7, #12]
}
 8011d48:	bf00      	nop
 8011d4a:	bf00      	nop
 8011d4c:	e7fd      	b.n	8011d4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d00b      	beq.n	8011d6e <vPortFree+0x66>
	__asm volatile
 8011d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d5a:	f383 8811 	msr	BASEPRI, r3
 8011d5e:	f3bf 8f6f 	isb	sy
 8011d62:	f3bf 8f4f 	dsb	sy
 8011d66:	60bb      	str	r3, [r7, #8]
}
 8011d68:	bf00      	nop
 8011d6a:	bf00      	nop
 8011d6c:	e7fd      	b.n	8011d6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	685a      	ldr	r2, [r3, #4]
 8011d72:	4b14      	ldr	r3, [pc, #80]	@ (8011dc4 <vPortFree+0xbc>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	4013      	ands	r3, r2
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d01e      	beq.n	8011dba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d11a      	bne.n	8011dba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	685a      	ldr	r2, [r3, #4]
 8011d88:	4b0e      	ldr	r3, [pc, #56]	@ (8011dc4 <vPortFree+0xbc>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	43db      	mvns	r3, r3
 8011d8e:	401a      	ands	r2, r3
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011d94:	f7fe fed8 	bl	8010b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8011dc8 <vPortFree+0xc0>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4413      	add	r3, r2
 8011da2:	4a09      	ldr	r2, [pc, #36]	@ (8011dc8 <vPortFree+0xc0>)
 8011da4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011da6:	6938      	ldr	r0, [r7, #16]
 8011da8:	f000 f876 	bl	8011e98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011dac:	4b07      	ldr	r3, [pc, #28]	@ (8011dcc <vPortFree+0xc4>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	3301      	adds	r3, #1
 8011db2:	4a06      	ldr	r2, [pc, #24]	@ (8011dcc <vPortFree+0xc4>)
 8011db4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011db6:	f7fe fed5 	bl	8010b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011dba:	bf00      	nop
 8011dbc:	3718      	adds	r7, #24
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}
 8011dc2:	bf00      	nop
 8011dc4:	200136c4 	.word	0x200136c4
 8011dc8:	200136b4 	.word	0x200136b4
 8011dcc:	200136c0 	.word	0x200136c0

08011dd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	b085      	sub	sp, #20
 8011dd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011dd6:	4b29      	ldr	r3, [pc, #164]	@ (8011e7c <prvHeapInit+0xac>)
 8011dd8:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011dda:	4b29      	ldr	r3, [pc, #164]	@ (8011e80 <prvHeapInit+0xb0>)
 8011ddc:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f003 0307 	and.w	r3, r3, #7
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d00c      	beq.n	8011e02 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	3307      	adds	r3, #7
 8011dec:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	f023 0307 	bic.w	r3, r3, #7
 8011df4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011df6:	68ba      	ldr	r2, [r7, #8]
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	1ad3      	subs	r3, r2, r3
 8011dfc:	4a20      	ldr	r2, [pc, #128]	@ (8011e80 <prvHeapInit+0xb0>)
 8011dfe:	4413      	add	r3, r2
 8011e00:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011e06:	4a1f      	ldr	r2, [pc, #124]	@ (8011e84 <prvHeapInit+0xb4>)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8011e84 <prvHeapInit+0xb4>)
 8011e0e:	2200      	movs	r2, #0
 8011e10:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	68ba      	ldr	r2, [r7, #8]
 8011e16:	4413      	add	r3, r2
 8011e18:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011e1a:	2208      	movs	r2, #8
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	1a9b      	subs	r3, r3, r2
 8011e20:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f023 0307 	bic.w	r3, r3, #7
 8011e28:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	4a16      	ldr	r2, [pc, #88]	@ (8011e88 <prvHeapInit+0xb8>)
 8011e2e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011e30:	4b15      	ldr	r3, [pc, #84]	@ (8011e88 <prvHeapInit+0xb8>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2200      	movs	r2, #0
 8011e36:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011e38:	4b13      	ldr	r3, [pc, #76]	@ (8011e88 <prvHeapInit+0xb8>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	68fa      	ldr	r2, [r7, #12]
 8011e48:	1ad2      	subs	r2, r2, r3
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8011e88 <prvHeapInit+0xb8>)
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8011e8c <prvHeapInit+0xbc>)
 8011e5c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	4a0b      	ldr	r2, [pc, #44]	@ (8011e90 <prvHeapInit+0xc0>)
 8011e64:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011e66:	4b0b      	ldr	r3, [pc, #44]	@ (8011e94 <prvHeapInit+0xc4>)
 8011e68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011e6c:	601a      	str	r2, [r3, #0]
}
 8011e6e:	bf00      	nop
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e78:	4770      	bx	lr
 8011e7a:	bf00      	nop
 8011e7c:	000105b8 	.word	0x000105b8
 8011e80:	200030f0 	.word	0x200030f0
 8011e84:	200136a8 	.word	0x200136a8
 8011e88:	200136b0 	.word	0x200136b0
 8011e8c:	200136b8 	.word	0x200136b8
 8011e90:	200136b4 	.word	0x200136b4
 8011e94:	200136c4 	.word	0x200136c4

08011e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ea0:	4b28      	ldr	r3, [pc, #160]	@ (8011f44 <prvInsertBlockIntoFreeList+0xac>)
 8011ea2:	60fb      	str	r3, [r7, #12]
 8011ea4:	e002      	b.n	8011eac <prvInsertBlockIntoFreeList+0x14>
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	60fb      	str	r3, [r7, #12]
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d8f7      	bhi.n	8011ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d108      	bne.n	8011eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	685a      	ldr	r2, [r3, #4]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	441a      	add	r2, r3
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	441a      	add	r2, r3
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d118      	bne.n	8011f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	681a      	ldr	r2, [r3, #0]
 8011ef2:	4b15      	ldr	r3, [pc, #84]	@ (8011f48 <prvInsertBlockIntoFreeList+0xb0>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d00d      	beq.n	8011f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	685a      	ldr	r2, [r3, #4]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	441a      	add	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	681a      	ldr	r2, [r3, #0]
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	601a      	str	r2, [r3, #0]
 8011f14:	e008      	b.n	8011f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011f16:	4b0c      	ldr	r3, [pc, #48]	@ (8011f48 <prvInsertBlockIntoFreeList+0xb0>)
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	601a      	str	r2, [r3, #0]
 8011f1e:	e003      	b.n	8011f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	681a      	ldr	r2, [r3, #0]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011f28:	68fa      	ldr	r2, [r7, #12]
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d002      	beq.n	8011f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011f36:	bf00      	nop
 8011f38:	3714      	adds	r7, #20
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop
 8011f44:	200136a8 	.word	0x200136a8
 8011f48:	200136b0 	.word	0x200136b0

08011f4c <arm_fill_f32>:
 8011f4c:	b410      	push	{r4}
 8011f4e:	088c      	lsrs	r4, r1, #2
 8011f50:	d010      	beq.n	8011f74 <arm_fill_f32+0x28>
 8011f52:	f100 0310 	add.w	r3, r0, #16
 8011f56:	4622      	mov	r2, r4
 8011f58:	3a01      	subs	r2, #1
 8011f5a:	ed03 0a04 	vstr	s0, [r3, #-16]
 8011f5e:	ed03 0a03 	vstr	s0, [r3, #-12]
 8011f62:	ed03 0a02 	vstr	s0, [r3, #-8]
 8011f66:	ed03 0a01 	vstr	s0, [r3, #-4]
 8011f6a:	f103 0310 	add.w	r3, r3, #16
 8011f6e:	d1f3      	bne.n	8011f58 <arm_fill_f32+0xc>
 8011f70:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011f74:	f011 0103 	ands.w	r1, r1, #3
 8011f78:	d003      	beq.n	8011f82 <arm_fill_f32+0x36>
 8011f7a:	3901      	subs	r1, #1
 8011f7c:	eca0 0a01 	vstmia	r0!, {s0}
 8011f80:	d1fb      	bne.n	8011f7a <arm_fill_f32+0x2e>
 8011f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f86:	4770      	bx	lr

08011f88 <arm_min_f32>:
 8011f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8c:	1e4f      	subs	r7, r1, #1
 8011f8e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8011f92:	f100 0e04 	add.w	lr, r0, #4
 8011f96:	edd0 7a00 	vldr	s15, [r0]
 8011f9a:	d058      	beq.n	801204e <arm_min_f32+0xc6>
 8011f9c:	3014      	adds	r0, #20
 8011f9e:	46c4      	mov	ip, r8
 8011fa0:	2604      	movs	r6, #4
 8011fa2:	2400      	movs	r4, #0
 8011fa4:	ed10 6a04 	vldr	s12, [r0, #-16]
 8011fa8:	ed50 6a03 	vldr	s13, [r0, #-12]
 8011fac:	ed10 7a02 	vldr	s14, [r0, #-8]
 8011fb0:	ed50 5a01 	vldr	s11, [r0, #-4]
 8011fb4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbc:	bf48      	it	mi
 8011fbe:	eef0 7a46 	vmovmi.f32	s15, s12
 8011fc2:	f1a6 0503 	sub.w	r5, r6, #3
 8011fc6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011fca:	bf48      	it	mi
 8011fcc:	462c      	movmi	r4, r5
 8011fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd2:	bfc8      	it	gt
 8011fd4:	eef0 7a66 	vmovgt.f32	s15, s13
 8011fd8:	f1a6 0502 	sub.w	r5, r6, #2
 8011fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011fe0:	bfc8      	it	gt
 8011fe2:	462c      	movgt	r4, r5
 8011fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe8:	bfc8      	it	gt
 8011fea:	eef0 7a47 	vmovgt.f32	s15, s14
 8011fee:	f106 35ff 	add.w	r5, r6, #4294967295
 8011ff2:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011ff6:	bfc8      	it	gt
 8011ff8:	462c      	movgt	r4, r5
 8011ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ffe:	bfc8      	it	gt
 8012000:	4634      	movgt	r4, r6
 8012002:	bfc8      	it	gt
 8012004:	eef0 7a65 	vmovgt.f32	s15, s11
 8012008:	f1bc 0c01 	subs.w	ip, ip, #1
 801200c:	f106 0604 	add.w	r6, r6, #4
 8012010:	f100 0010 	add.w	r0, r0, #16
 8012014:	d1c6      	bne.n	8011fa4 <arm_min_f32+0x1c>
 8012016:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 801201a:	f017 0003 	ands.w	r0, r7, #3
 801201e:	d018      	beq.n	8012052 <arm_min_f32+0xca>
 8012020:	1a08      	subs	r0, r1, r0
 8012022:	ecbe 7a01 	vldmia	lr!, {s14}
 8012026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801202e:	bf48      	it	mi
 8012030:	4604      	movmi	r4, r0
 8012032:	f100 0001 	add.w	r0, r0, #1
 8012036:	bf58      	it	pl
 8012038:	eeb0 7a67 	vmovpl.f32	s14, s15
 801203c:	4288      	cmp	r0, r1
 801203e:	eef0 7a47 	vmov.f32	s15, s14
 8012042:	d1ee      	bne.n	8012022 <arm_min_f32+0x9a>
 8012044:	ed82 7a00 	vstr	s14, [r2]
 8012048:	601c      	str	r4, [r3, #0]
 801204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204e:	4644      	mov	r4, r8
 8012050:	e7e3      	b.n	801201a <arm_min_f32+0x92>
 8012052:	eeb0 7a67 	vmov.f32	s14, s15
 8012056:	e7f5      	b.n	8012044 <arm_min_f32+0xbc>

08012058 <arm_max_f32>:
 8012058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801205c:	1e4f      	subs	r7, r1, #1
 801205e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8012062:	f100 0e04 	add.w	lr, r0, #4
 8012066:	edd0 7a00 	vldr	s15, [r0]
 801206a:	d058      	beq.n	801211e <arm_max_f32+0xc6>
 801206c:	3014      	adds	r0, #20
 801206e:	46c4      	mov	ip, r8
 8012070:	2604      	movs	r6, #4
 8012072:	2400      	movs	r4, #0
 8012074:	ed10 6a04 	vldr	s12, [r0, #-16]
 8012078:	ed50 6a03 	vldr	s13, [r0, #-12]
 801207c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8012080:	ed50 5a01 	vldr	s11, [r0, #-4]
 8012084:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208c:	bfc8      	it	gt
 801208e:	eef0 7a46 	vmovgt.f32	s15, s12
 8012092:	f1a6 0503 	sub.w	r5, r6, #3
 8012096:	eef4 7ae6 	vcmpe.f32	s15, s13
 801209a:	bfc8      	it	gt
 801209c:	462c      	movgt	r4, r5
 801209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a2:	bf48      	it	mi
 80120a4:	eef0 7a66 	vmovmi.f32	s15, s13
 80120a8:	f1a6 0502 	sub.w	r5, r6, #2
 80120ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80120b0:	bf48      	it	mi
 80120b2:	462c      	movmi	r4, r5
 80120b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b8:	bf48      	it	mi
 80120ba:	eef0 7a47 	vmovmi.f32	s15, s14
 80120be:	f106 35ff 	add.w	r5, r6, #4294967295
 80120c2:	eef4 7ae5 	vcmpe.f32	s15, s11
 80120c6:	bf48      	it	mi
 80120c8:	462c      	movmi	r4, r5
 80120ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ce:	bf48      	it	mi
 80120d0:	4634      	movmi	r4, r6
 80120d2:	bf48      	it	mi
 80120d4:	eef0 7a65 	vmovmi.f32	s15, s11
 80120d8:	f1bc 0c01 	subs.w	ip, ip, #1
 80120dc:	f106 0604 	add.w	r6, r6, #4
 80120e0:	f100 0010 	add.w	r0, r0, #16
 80120e4:	d1c6      	bne.n	8012074 <arm_max_f32+0x1c>
 80120e6:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80120ea:	f017 0003 	ands.w	r0, r7, #3
 80120ee:	d018      	beq.n	8012122 <arm_max_f32+0xca>
 80120f0:	1a08      	subs	r0, r1, r0
 80120f2:	ecbe 7a01 	vldmia	lr!, {s14}
 80120f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80120fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120fe:	bfc8      	it	gt
 8012100:	4604      	movgt	r4, r0
 8012102:	f100 0001 	add.w	r0, r0, #1
 8012106:	bfd8      	it	le
 8012108:	eeb0 7a67 	vmovle.f32	s14, s15
 801210c:	4288      	cmp	r0, r1
 801210e:	eef0 7a47 	vmov.f32	s15, s14
 8012112:	d1ee      	bne.n	80120f2 <arm_max_f32+0x9a>
 8012114:	ed82 7a00 	vstr	s14, [r2]
 8012118:	601c      	str	r4, [r3, #0]
 801211a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801211e:	4644      	mov	r4, r8
 8012120:	e7e3      	b.n	80120ea <arm_max_f32+0x92>
 8012122:	eeb0 7a67 	vmov.f32	s14, s15
 8012126:	e7f5      	b.n	8012114 <arm_max_f32+0xbc>

08012128 <arm_rfft_fast_init_f32>:
 8012128:	084b      	lsrs	r3, r1, #1
 801212a:	2b80      	cmp	r3, #128	@ 0x80
 801212c:	b410      	push	{r4}
 801212e:	8201      	strh	r1, [r0, #16]
 8012130:	8003      	strh	r3, [r0, #0]
 8012132:	d047      	beq.n	80121c4 <arm_rfft_fast_init_f32+0x9c>
 8012134:	d917      	bls.n	8012166 <arm_rfft_fast_init_f32+0x3e>
 8012136:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801213a:	d03d      	beq.n	80121b8 <arm_rfft_fast_init_f32+0x90>
 801213c:	d929      	bls.n	8012192 <arm_rfft_fast_init_f32+0x6a>
 801213e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012142:	d020      	beq.n	8012186 <arm_rfft_fast_init_f32+0x5e>
 8012144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012148:	d113      	bne.n	8012172 <arm_rfft_fast_init_f32+0x4a>
 801214a:	4921      	ldr	r1, [pc, #132]	@ (80121d0 <arm_rfft_fast_init_f32+0xa8>)
 801214c:	4a21      	ldr	r2, [pc, #132]	@ (80121d4 <arm_rfft_fast_init_f32+0xac>)
 801214e:	4b22      	ldr	r3, [pc, #136]	@ (80121d8 <arm_rfft_fast_init_f32+0xb0>)
 8012150:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 8012154:	8184      	strh	r4, [r0, #12]
 8012156:	6081      	str	r1, [r0, #8]
 8012158:	6042      	str	r2, [r0, #4]
 801215a:	6143      	str	r3, [r0, #20]
 801215c:	2000      	movs	r0, #0
 801215e:	b240      	sxtb	r0, r0
 8012160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012164:	4770      	bx	lr
 8012166:	2b20      	cmp	r3, #32
 8012168:	d01c      	beq.n	80121a4 <arm_rfft_fast_init_f32+0x7c>
 801216a:	2b40      	cmp	r3, #64	@ 0x40
 801216c:	d006      	beq.n	801217c <arm_rfft_fast_init_f32+0x54>
 801216e:	2b10      	cmp	r3, #16
 8012170:	d01d      	beq.n	80121ae <arm_rfft_fast_init_f32+0x86>
 8012172:	20ff      	movs	r0, #255	@ 0xff
 8012174:	b240      	sxtb	r0, r0
 8012176:	f85d 4b04 	ldr.w	r4, [sp], #4
 801217a:	4770      	bx	lr
 801217c:	2438      	movs	r4, #56	@ 0x38
 801217e:	4917      	ldr	r1, [pc, #92]	@ (80121dc <arm_rfft_fast_init_f32+0xb4>)
 8012180:	4a17      	ldr	r2, [pc, #92]	@ (80121e0 <arm_rfft_fast_init_f32+0xb8>)
 8012182:	4b18      	ldr	r3, [pc, #96]	@ (80121e4 <arm_rfft_fast_init_f32+0xbc>)
 8012184:	e7e6      	b.n	8012154 <arm_rfft_fast_init_f32+0x2c>
 8012186:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 801218a:	4917      	ldr	r1, [pc, #92]	@ (80121e8 <arm_rfft_fast_init_f32+0xc0>)
 801218c:	4a17      	ldr	r2, [pc, #92]	@ (80121ec <arm_rfft_fast_init_f32+0xc4>)
 801218e:	4b18      	ldr	r3, [pc, #96]	@ (80121f0 <arm_rfft_fast_init_f32+0xc8>)
 8012190:	e7e0      	b.n	8012154 <arm_rfft_fast_init_f32+0x2c>
 8012192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012196:	d1ec      	bne.n	8012172 <arm_rfft_fast_init_f32+0x4a>
 8012198:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 801219c:	4915      	ldr	r1, [pc, #84]	@ (80121f4 <arm_rfft_fast_init_f32+0xcc>)
 801219e:	4a16      	ldr	r2, [pc, #88]	@ (80121f8 <arm_rfft_fast_init_f32+0xd0>)
 80121a0:	4b16      	ldr	r3, [pc, #88]	@ (80121fc <arm_rfft_fast_init_f32+0xd4>)
 80121a2:	e7d7      	b.n	8012154 <arm_rfft_fast_init_f32+0x2c>
 80121a4:	2430      	movs	r4, #48	@ 0x30
 80121a6:	4916      	ldr	r1, [pc, #88]	@ (8012200 <arm_rfft_fast_init_f32+0xd8>)
 80121a8:	4a16      	ldr	r2, [pc, #88]	@ (8012204 <arm_rfft_fast_init_f32+0xdc>)
 80121aa:	4b17      	ldr	r3, [pc, #92]	@ (8012208 <arm_rfft_fast_init_f32+0xe0>)
 80121ac:	e7d2      	b.n	8012154 <arm_rfft_fast_init_f32+0x2c>
 80121ae:	2414      	movs	r4, #20
 80121b0:	4916      	ldr	r1, [pc, #88]	@ (801220c <arm_rfft_fast_init_f32+0xe4>)
 80121b2:	4a17      	ldr	r2, [pc, #92]	@ (8012210 <arm_rfft_fast_init_f32+0xe8>)
 80121b4:	4b17      	ldr	r3, [pc, #92]	@ (8012214 <arm_rfft_fast_init_f32+0xec>)
 80121b6:	e7cd      	b.n	8012154 <arm_rfft_fast_init_f32+0x2c>
 80121b8:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80121bc:	4916      	ldr	r1, [pc, #88]	@ (8012218 <arm_rfft_fast_init_f32+0xf0>)
 80121be:	4a17      	ldr	r2, [pc, #92]	@ (801221c <arm_rfft_fast_init_f32+0xf4>)
 80121c0:	4b17      	ldr	r3, [pc, #92]	@ (8012220 <arm_rfft_fast_init_f32+0xf8>)
 80121c2:	e7c7      	b.n	8012154 <arm_rfft_fast_init_f32+0x2c>
 80121c4:	24d0      	movs	r4, #208	@ 0xd0
 80121c6:	4917      	ldr	r1, [pc, #92]	@ (8012224 <arm_rfft_fast_init_f32+0xfc>)
 80121c8:	4a17      	ldr	r2, [pc, #92]	@ (8012228 <arm_rfft_fast_init_f32+0x100>)
 80121ca:	4b18      	ldr	r3, [pc, #96]	@ (801222c <arm_rfft_fast_init_f32+0x104>)
 80121cc:	e7c2      	b.n	8012154 <arm_rfft_fast_init_f32+0x2c>
 80121ce:	bf00      	nop
 80121d0:	080285f0 	.word	0x080285f0
 80121d4:	08018fe4 	.word	0x08018fe4
 80121d8:	0801f154 	.word	0x0801f154
 80121dc:	0801d0e4 	.word	0x0801d0e4
 80121e0:	0802a3b0 	.word	0x0802a3b0
 80121e4:	0802c8a0 	.word	0x0802c8a0
 80121e8:	08025ad4 	.word	0x08025ad4
 80121ec:	080239d4 	.word	0x080239d4
 80121f0:	0801d154 	.word	0x0801d154
 80121f4:	0802c530 	.word	0x0802c530
 80121f8:	08023154 	.word	0x08023154
 80121fc:	0802a5b0 	.word	0x0802a5b0
 8012200:	0802698c 	.word	0x0802698c
 8012204:	080259d4 	.word	0x080259d4
 8012208:	0801cfe4 	.word	0x0801cfe4
 801220c:	080268e4 	.word	0x080268e4
 8012210:	08023954 	.word	0x08023954
 8012214:	0802690c 	.word	0x0802690c
 8012218:	0802adb0 	.word	0x0802adb0
 801221c:	080275f0 	.word	0x080275f0
 8012220:	0802b130 	.word	0x0802b130
 8012224:	0802caa0 	.word	0x0802caa0
 8012228:	080271f0 	.word	0x080271f0
 801222c:	0802c130 	.word	0x0802c130

08012230 <arm_rfft_fast_f32>:
 8012230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012234:	8a06      	ldrh	r6, [r0, #16]
 8012236:	0876      	lsrs	r6, r6, #1
 8012238:	4607      	mov	r7, r0
 801223a:	4615      	mov	r5, r2
 801223c:	8006      	strh	r6, [r0, #0]
 801223e:	460c      	mov	r4, r1
 8012240:	2b00      	cmp	r3, #0
 8012242:	d15c      	bne.n	80122fe <arm_rfft_fast_f32+0xce>
 8012244:	461a      	mov	r2, r3
 8012246:	2301      	movs	r3, #1
 8012248:	f000 fbe6 	bl	8012a18 <arm_cfft_f32>
 801224c:	edd4 7a00 	vldr	s15, [r4]
 8012250:	ed94 7a01 	vldr	s14, [r4, #4]
 8012254:	883e      	ldrh	r6, [r7, #0]
 8012256:	6978      	ldr	r0, [r7, #20]
 8012258:	ee37 7a07 	vadd.f32	s14, s14, s14
 801225c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012260:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8012264:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012268:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801226c:	3e01      	subs	r6, #1
 801226e:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8012272:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012276:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801227a:	ed85 7a00 	vstr	s14, [r5]
 801227e:	edc5 7a01 	vstr	s15, [r5, #4]
 8012282:	3010      	adds	r0, #16
 8012284:	f105 0210 	add.w	r2, r5, #16
 8012288:	3b08      	subs	r3, #8
 801228a:	f104 0110 	add.w	r1, r4, #16
 801228e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8012292:	ed93 5a02 	vldr	s10, [r3, #8]
 8012296:	ed11 7a01 	vldr	s14, [r1, #-4]
 801229a:	ed10 6a02 	vldr	s12, [r0, #-8]
 801229e:	edd3 5a03 	vldr	s11, [r3, #12]
 80122a2:	ed50 6a01 	vldr	s13, [r0, #-4]
 80122a6:	ee75 7a64 	vsub.f32	s15, s10, s9
 80122aa:	ee35 4a87 	vadd.f32	s8, s11, s14
 80122ae:	ee35 5a24 	vadd.f32	s10, s10, s9
 80122b2:	ee77 5a65 	vsub.f32	s11, s14, s11
 80122b6:	ee66 4a27 	vmul.f32	s9, s12, s15
 80122ba:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80122be:	ee34 5a85 	vadd.f32	s10, s9, s10
 80122c2:	ee26 6a04 	vmul.f32	s12, s12, s8
 80122c6:	ee66 6a84 	vmul.f32	s13, s13, s8
 80122ca:	ee77 7a25 	vadd.f32	s15, s14, s11
 80122ce:	ee76 6a85 	vadd.f32	s13, s13, s10
 80122d2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80122d6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80122da:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80122de:	3e01      	subs	r6, #1
 80122e0:	ed42 6a02 	vstr	s13, [r2, #-8]
 80122e4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80122e8:	f1a3 0308 	sub.w	r3, r3, #8
 80122ec:	f101 0108 	add.w	r1, r1, #8
 80122f0:	f100 0008 	add.w	r0, r0, #8
 80122f4:	f102 0208 	add.w	r2, r2, #8
 80122f8:	d1c9      	bne.n	801228e <arm_rfft_fast_f32+0x5e>
 80122fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122fe:	edd1 7a00 	vldr	s15, [r1]
 8012302:	edd1 6a01 	vldr	s13, [r1, #4]
 8012306:	6941      	ldr	r1, [r0, #20]
 8012308:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801230c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012310:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8012314:	ee27 7a23 	vmul.f32	s14, s14, s7
 8012318:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801231c:	3e01      	subs	r6, #1
 801231e:	ed82 7a00 	vstr	s14, [r2]
 8012322:	edc2 7a01 	vstr	s15, [r2, #4]
 8012326:	00f0      	lsls	r0, r6, #3
 8012328:	b3ee      	cbz	r6, 80123a6 <arm_rfft_fast_f32+0x176>
 801232a:	3808      	subs	r0, #8
 801232c:	f101 0e10 	add.w	lr, r1, #16
 8012330:	4420      	add	r0, r4
 8012332:	f104 0110 	add.w	r1, r4, #16
 8012336:	f102 0c10 	add.w	ip, r2, #16
 801233a:	ed90 7a02 	vldr	s14, [r0, #8]
 801233e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8012342:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8012346:	ed90 4a03 	vldr	s8, [r0, #12]
 801234a:	ed11 5a01 	vldr	s10, [r1, #-4]
 801234e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8012352:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8012356:	ee74 4a05 	vadd.f32	s9, s8, s10
 801235a:	ee26 3a27 	vmul.f32	s6, s12, s15
 801235e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8012362:	ee35 5a44 	vsub.f32	s10, s10, s8
 8012366:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801236a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801236e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8012372:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012376:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801237a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801237e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8012382:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012386:	ee27 7a23 	vmul.f32	s14, s14, s7
 801238a:	3e01      	subs	r6, #1
 801238c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8012390:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8012394:	f1a0 0008 	sub.w	r0, r0, #8
 8012398:	f101 0108 	add.w	r1, r1, #8
 801239c:	f10e 0e08 	add.w	lr, lr, #8
 80123a0:	f10c 0c08 	add.w	ip, ip, #8
 80123a4:	d1c9      	bne.n	801233a <arm_rfft_fast_f32+0x10a>
 80123a6:	4638      	mov	r0, r7
 80123a8:	4629      	mov	r1, r5
 80123aa:	461a      	mov	r2, r3
 80123ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123b0:	2301      	movs	r3, #1
 80123b2:	f000 bb31 	b.w	8012a18 <arm_cfft_f32>
 80123b6:	bf00      	nop

080123b8 <arm_cfft_radix8by2_f32>:
 80123b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123bc:	ed2d 8b08 	vpush	{d8-d11}
 80123c0:	f8b0 e000 	ldrh.w	lr, [r0]
 80123c4:	6842      	ldr	r2, [r0, #4]
 80123c6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80123ca:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80123ce:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80123d2:	4607      	mov	r7, r0
 80123d4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80123d8:	f000 80af 	beq.w	801253a <arm_cfft_radix8by2_f32+0x182>
 80123dc:	3310      	adds	r3, #16
 80123de:	18ce      	adds	r6, r1, r3
 80123e0:	3210      	adds	r2, #16
 80123e2:	4443      	add	r3, r8
 80123e4:	f101 0510 	add.w	r5, r1, #16
 80123e8:	f108 0410 	add.w	r4, r8, #16
 80123ec:	ed54 1a04 	vldr	s3, [r4, #-16]
 80123f0:	ed13 4a04 	vldr	s8, [r3, #-16]
 80123f4:	ed53 3a03 	vldr	s7, [r3, #-12]
 80123f8:	ed53 5a02 	vldr	s11, [r3, #-8]
 80123fc:	ed13 5a01 	vldr	s10, [r3, #-4]
 8012400:	ed54 6a03 	vldr	s13, [r4, #-12]
 8012404:	ed14 0a02 	vldr	s0, [r4, #-8]
 8012408:	ed16 2a04 	vldr	s4, [r6, #-16]
 801240c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8012410:	ed15 6a03 	vldr	s12, [r5, #-12]
 8012414:	ed15 7a01 	vldr	s14, [r5, #-4]
 8012418:	ed15 3a04 	vldr	s6, [r5, #-16]
 801241c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8012420:	ed56 0a02 	vldr	s1, [r6, #-8]
 8012424:	ed16 1a01 	vldr	s2, [r6, #-4]
 8012428:	ed55 4a02 	vldr	s9, [r5, #-8]
 801242c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8012430:	ee36 ba26 	vadd.f32	s22, s12, s13
 8012434:	ee37 aa27 	vadd.f32	s20, s14, s15
 8012438:	ee72 9a04 	vadd.f32	s19, s4, s8
 801243c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8012440:	ee31 8a05 	vadd.f32	s16, s2, s10
 8012444:	ee74 aa80 	vadd.f32	s21, s9, s0
 8012448:	ee70 8aa5 	vadd.f32	s17, s1, s11
 801244c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8012450:	ed05 ba03 	vstr	s22, [r5, #-12]
 8012454:	ed45 aa02 	vstr	s21, [r5, #-8]
 8012458:	ed05 aa01 	vstr	s20, [r5, #-4]
 801245c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8012460:	ed46 9a04 	vstr	s19, [r6, #-16]
 8012464:	ed06 9a03 	vstr	s18, [r6, #-12]
 8012468:	ed46 8a02 	vstr	s17, [r6, #-8]
 801246c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8012470:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8012474:	ed12 6a03 	vldr	s12, [r2, #-12]
 8012478:	ed52 2a04 	vldr	s5, [r2, #-16]
 801247c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8012480:	ee34 4a42 	vsub.f32	s8, s8, s4
 8012484:	ee26 8a86 	vmul.f32	s16, s13, s12
 8012488:	ee24 2a06 	vmul.f32	s4, s8, s12
 801248c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8012490:	ee24 4a22 	vmul.f32	s8, s8, s5
 8012494:	ee23 3a06 	vmul.f32	s6, s6, s12
 8012498:	ee66 6aa2 	vmul.f32	s13, s13, s5
 801249c:	ee23 6a86 	vmul.f32	s12, s7, s12
 80124a0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80124a4:	ee36 6a04 	vadd.f32	s12, s12, s8
 80124a8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80124ac:	ee72 3a63 	vsub.f32	s7, s4, s7
 80124b0:	ee71 2a88 	vadd.f32	s5, s3, s16
 80124b4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80124b8:	ed44 2a04 	vstr	s5, [r4, #-16]
 80124bc:	ed43 3a04 	vstr	s7, [r3, #-16]
 80124c0:	ed03 6a03 	vstr	s12, [r3, #-12]
 80124c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124c8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80124cc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80124d0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80124d4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80124d8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80124dc:	ee67 3a87 	vmul.f32	s7, s15, s14
 80124e0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80124e4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80124e8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80124ec:	ee64 4a87 	vmul.f32	s9, s9, s14
 80124f0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80124f4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80124f8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80124fc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8012500:	ee74 5a23 	vadd.f32	s11, s8, s7
 8012504:	ee35 6a46 	vsub.f32	s12, s10, s12
 8012508:	ee37 7a26 	vadd.f32	s14, s14, s13
 801250c:	f1be 0e01 	subs.w	lr, lr, #1
 8012510:	ed44 5a02 	vstr	s11, [r4, #-8]
 8012514:	f105 0510 	add.w	r5, r5, #16
 8012518:	ed44 7a01 	vstr	s15, [r4, #-4]
 801251c:	f106 0610 	add.w	r6, r6, #16
 8012520:	ed03 6a02 	vstr	s12, [r3, #-8]
 8012524:	ed03 7a01 	vstr	s14, [r3, #-4]
 8012528:	f102 0210 	add.w	r2, r2, #16
 801252c:	f104 0410 	add.w	r4, r4, #16
 8012530:	f103 0310 	add.w	r3, r3, #16
 8012534:	f47f af5a 	bne.w	80123ec <arm_cfft_radix8by2_f32+0x34>
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	fa1f f48c 	uxth.w	r4, ip
 801253e:	4608      	mov	r0, r1
 8012540:	2302      	movs	r3, #2
 8012542:	4621      	mov	r1, r4
 8012544:	f000 ff42 	bl	80133cc <arm_radix8_butterfly_f32>
 8012548:	ecbd 8b08 	vpop	{d8-d11}
 801254c:	4640      	mov	r0, r8
 801254e:	4621      	mov	r1, r4
 8012550:	687a      	ldr	r2, [r7, #4]
 8012552:	2302      	movs	r3, #2
 8012554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012558:	f000 bf38 	b.w	80133cc <arm_radix8_butterfly_f32>

0801255c <arm_cfft_radix8by4_f32>:
 801255c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012560:	ed2d 8b0a 	vpush	{d8-d12}
 8012564:	8802      	ldrh	r2, [r0, #0]
 8012566:	ed91 6a00 	vldr	s12, [r1]
 801256a:	b08f      	sub	sp, #60	@ 0x3c
 801256c:	460f      	mov	r7, r1
 801256e:	0852      	lsrs	r2, r2, #1
 8012570:	0093      	lsls	r3, r2, #2
 8012572:	900c      	str	r0, [sp, #48]	@ 0x30
 8012574:	9103      	str	r1, [sp, #12]
 8012576:	6841      	ldr	r1, [r0, #4]
 8012578:	ed97 7a01 	vldr	s14, [r7, #4]
 801257c:	4638      	mov	r0, r7
 801257e:	4418      	add	r0, r3
 8012580:	4606      	mov	r6, r0
 8012582:	9009      	str	r0, [sp, #36]	@ 0x24
 8012584:	4418      	add	r0, r3
 8012586:	edd0 6a00 	vldr	s13, [r0]
 801258a:	edd6 3a00 	vldr	s7, [r6]
 801258e:	edd6 2a01 	vldr	s5, [r6, #4]
 8012592:	edd0 7a01 	vldr	s15, [r0, #4]
 8012596:	900a      	str	r0, [sp, #40]	@ 0x28
 8012598:	ee76 5a26 	vadd.f32	s11, s12, s13
 801259c:	4604      	mov	r4, r0
 801259e:	4625      	mov	r5, r4
 80125a0:	441c      	add	r4, r3
 80125a2:	ed94 4a00 	vldr	s8, [r4]
 80125a6:	ed94 5a01 	vldr	s10, [r4, #4]
 80125aa:	9401      	str	r4, [sp, #4]
 80125ac:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80125b0:	4630      	mov	r0, r6
 80125b2:	ee74 4a24 	vadd.f32	s9, s8, s9
 80125b6:	463e      	mov	r6, r7
 80125b8:	ee14 ea90 	vmov	lr, s9
 80125bc:	ee76 6a66 	vsub.f32	s13, s12, s13
 80125c0:	f846 eb08 	str.w	lr, [r6], #8
 80125c4:	ee37 6a27 	vadd.f32	s12, s14, s15
 80125c8:	edd0 4a01 	vldr	s9, [r0, #4]
 80125cc:	9604      	str	r6, [sp, #16]
 80125ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125d2:	9e01      	ldr	r6, [sp, #4]
 80125d4:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80125d8:	ed96 2a01 	vldr	s4, [r6, #4]
 80125dc:	ee36 7a24 	vadd.f32	s14, s12, s9
 80125e0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80125e4:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80125e8:	ee36 6a62 	vsub.f32	s12, s12, s5
 80125ec:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80125f0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80125f4:	ee73 3a45 	vsub.f32	s7, s6, s10
 80125f8:	4604      	mov	r4, r0
 80125fa:	ee36 6a45 	vsub.f32	s12, s12, s10
 80125fe:	ee75 6a26 	vadd.f32	s13, s10, s13
 8012602:	46a3      	mov	fp, r4
 8012604:	ee37 7a02 	vadd.f32	s14, s14, s4
 8012608:	ee34 5a84 	vadd.f32	s10, s9, s8
 801260c:	ee13 8a90 	vmov	r8, s7
 8012610:	46a4      	mov	ip, r4
 8012612:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8012616:	ed87 7a01 	vstr	s14, [r7, #4]
 801261a:	f84b 8b08 	str.w	r8, [fp], #8
 801261e:	f1ac 0704 	sub.w	r7, ip, #4
 8012622:	ed8c 5a01 	vstr	s10, [ip, #4]
 8012626:	f101 0c08 	add.w	ip, r1, #8
 801262a:	462c      	mov	r4, r5
 801262c:	f8cd c014 	str.w	ip, [sp, #20]
 8012630:	ee15 ca90 	vmov	ip, s11
 8012634:	f844 cb08 	str.w	ip, [r4], #8
 8012638:	9407      	str	r4, [sp, #28]
 801263a:	f101 0410 	add.w	r4, r1, #16
 801263e:	ed85 6a01 	vstr	s12, [r5, #4]
 8012642:	0852      	lsrs	r2, r2, #1
 8012644:	9402      	str	r4, [sp, #8]
 8012646:	462c      	mov	r4, r5
 8012648:	f101 0518 	add.w	r5, r1, #24
 801264c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801264e:	46b2      	mov	sl, r6
 8012650:	9506      	str	r5, [sp, #24]
 8012652:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8012656:	3a02      	subs	r2, #2
 8012658:	ee16 5a90 	vmov	r5, s13
 801265c:	46b6      	mov	lr, r6
 801265e:	4630      	mov	r0, r6
 8012660:	0852      	lsrs	r2, r2, #1
 8012662:	f84a 5b08 	str.w	r5, [sl], #8
 8012666:	f1a0 0604 	sub.w	r6, r0, #4
 801266a:	edce 7a01 	vstr	s15, [lr, #4]
 801266e:	9208      	str	r2, [sp, #32]
 8012670:	f000 8130 	beq.w	80128d4 <arm_cfft_radix8by4_f32+0x378>
 8012674:	4691      	mov	r9, r2
 8012676:	9a03      	ldr	r2, [sp, #12]
 8012678:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801267c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8012680:	3b08      	subs	r3, #8
 8012682:	f102 0510 	add.w	r5, r2, #16
 8012686:	f101 0c20 	add.w	ip, r1, #32
 801268a:	f1a4 020c 	sub.w	r2, r4, #12
 801268e:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8012692:	4433      	add	r3, r6
 8012694:	3410      	adds	r4, #16
 8012696:	4650      	mov	r0, sl
 8012698:	4659      	mov	r1, fp
 801269a:	ed55 3a02 	vldr	s7, [r5, #-8]
 801269e:	ed14 5a02 	vldr	s10, [r4, #-8]
 80126a2:	ed91 7a00 	vldr	s14, [r1]
 80126a6:	edd0 7a00 	vldr	s15, [r0]
 80126aa:	ed15 4a01 	vldr	s8, [r5, #-4]
 80126ae:	ed54 5a01 	vldr	s11, [r4, #-4]
 80126b2:	edd0 6a01 	vldr	s13, [r0, #4]
 80126b6:	ed91 6a01 	vldr	s12, [r1, #4]
 80126ba:	ee33 8a85 	vadd.f32	s16, s7, s10
 80126be:	ee34 0a25 	vadd.f32	s0, s8, s11
 80126c2:	ee78 4a07 	vadd.f32	s9, s16, s14
 80126c6:	ee74 5a65 	vsub.f32	s11, s8, s11
 80126ca:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80126ce:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80126d2:	ed45 4a02 	vstr	s9, [r5, #-8]
 80126d6:	edd1 4a01 	vldr	s9, [r1, #4]
 80126da:	ed90 4a01 	vldr	s8, [r0, #4]
 80126de:	ee70 4a24 	vadd.f32	s9, s0, s9
 80126e2:	ee76 aa05 	vadd.f32	s21, s12, s10
 80126e6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80126ea:	ee35 aac7 	vsub.f32	s20, s11, s14
 80126ee:	ed45 4a01 	vstr	s9, [r5, #-4]
 80126f2:	edd6 1a00 	vldr	s3, [r6]
 80126f6:	edd7 0a00 	vldr	s1, [r7]
 80126fa:	ed92 4a02 	vldr	s8, [r2, #8]
 80126fe:	edd3 3a02 	vldr	s7, [r3, #8]
 8012702:	ed93 2a01 	vldr	s4, [r3, #4]
 8012706:	ed16 1a01 	vldr	s2, [r6, #-4]
 801270a:	edd2 2a01 	vldr	s5, [r2, #4]
 801270e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8012712:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8012716:	ee39 3a81 	vadd.f32	s6, s19, s2
 801271a:	ee74 8a84 	vadd.f32	s17, s9, s8
 801271e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8012722:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8012726:	ee7a aae6 	vsub.f32	s21, s21, s13
 801272a:	ee18 aa90 	vmov	sl, s17
 801272e:	f847 a908 	str.w	sl, [r7], #-8
 8012732:	edd2 8a01 	vldr	s17, [r2, #4]
 8012736:	ed93 9a01 	vldr	s18, [r3, #4]
 801273a:	ee73 8a28 	vadd.f32	s17, s6, s17
 801273e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8012742:	ee78 8a89 	vadd.f32	s17, s17, s18
 8012746:	ee74 0a63 	vsub.f32	s1, s8, s7
 801274a:	edc7 8a01 	vstr	s17, [r7, #4]
 801274e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8012752:	ed58 8a01 	vldr	s17, [r8, #-4]
 8012756:	ee39 1ac1 	vsub.f32	s2, s19, s2
 801275a:	ee6a ba28 	vmul.f32	s23, s20, s17
 801275e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8012762:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8012766:	ee30 9a81 	vadd.f32	s18, s1, s2
 801276a:	ee79 9a82 	vadd.f32	s19, s19, s4
 801276e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8012772:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8012776:	ee69 baa8 	vmul.f32	s23, s19, s17
 801277a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 801277e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8012782:	ee69 8a28 	vmul.f32	s17, s18, s17
 8012786:	ee29 ba0b 	vmul.f32	s22, s18, s22
 801278a:	ee1c aa10 	vmov	sl, s24
 801278e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8012792:	f841 ab08 	str.w	sl, [r1], #8
 8012796:	ee3a aa6a 	vsub.f32	s20, s20, s21
 801279a:	ee3b bacb 	vsub.f32	s22, s23, s22
 801279e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80127a2:	ee33 3a62 	vsub.f32	s6, s6, s5
 80127a6:	ed01 aa01 	vstr	s20, [r1, #-4]
 80127aa:	edc2 8a01 	vstr	s17, [r2, #4]
 80127ae:	ed82 ba02 	vstr	s22, [r2, #8]
 80127b2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80127b6:	ee74 3a63 	vsub.f32	s7, s8, s7
 80127ba:	ee38 8a47 	vsub.f32	s16, s16, s14
 80127be:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80127c2:	ee30 0a46 	vsub.f32	s0, s0, s12
 80127c6:	ee33 3a42 	vsub.f32	s6, s6, s4
 80127ca:	ee38 8a67 	vsub.f32	s16, s16, s15
 80127ce:	ee30 0a66 	vsub.f32	s0, s0, s13
 80127d2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80127d6:	ee63 8a04 	vmul.f32	s17, s6, s8
 80127da:	ee28 aa24 	vmul.f32	s20, s16, s9
 80127de:	ee60 9a04 	vmul.f32	s19, s0, s8
 80127e2:	ee28 8a04 	vmul.f32	s16, s16, s8
 80127e6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80127ea:	ee63 3a84 	vmul.f32	s7, s7, s8
 80127ee:	ee39 4a68 	vsub.f32	s8, s18, s17
 80127f2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80127f6:	ee14 aa10 	vmov	sl, s8
 80127fa:	ee30 0a48 	vsub.f32	s0, s0, s16
 80127fe:	ee63 4a24 	vmul.f32	s9, s6, s9
 8012802:	ed44 9a02 	vstr	s19, [r4, #-8]
 8012806:	ee73 3ae4 	vsub.f32	s7, s7, s9
 801280a:	ed04 0a01 	vstr	s0, [r4, #-4]
 801280e:	f846 a908 	str.w	sl, [r6], #-8
 8012812:	ee35 6a46 	vsub.f32	s12, s10, s12
 8012816:	ee35 7a87 	vadd.f32	s14, s11, s14
 801281a:	edc6 3a01 	vstr	s7, [r6, #4]
 801281e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012826:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 801282a:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 801282e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8012832:	ee26 5a87 	vmul.f32	s10, s13, s14
 8012836:	ee72 2a62 	vsub.f32	s5, s4, s5
 801283a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 801283e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8012842:	ee75 5a25 	vadd.f32	s11, s10, s11
 8012846:	ee62 0a86 	vmul.f32	s1, s5, s12
 801284a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801284e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012852:	ee21 6a06 	vmul.f32	s12, s2, s12
 8012856:	ee62 2a87 	vmul.f32	s5, s5, s14
 801285a:	ee21 1a07 	vmul.f32	s2, s2, s14
 801285e:	ee15 aa90 	vmov	sl, s11
 8012862:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012866:	f840 ab08 	str.w	sl, [r0], #8
 801286a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 801286e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8012872:	f1b9 0901 	subs.w	r9, r9, #1
 8012876:	ed40 7a01 	vstr	s15, [r0, #-4]
 801287a:	f105 0508 	add.w	r5, r5, #8
 801287e:	ed83 1a02 	vstr	s2, [r3, #8]
 8012882:	edc3 2a01 	vstr	s5, [r3, #4]
 8012886:	f108 0808 	add.w	r8, r8, #8
 801288a:	f1a2 0208 	sub.w	r2, r2, #8
 801288e:	f10c 0c10 	add.w	ip, ip, #16
 8012892:	f104 0408 	add.w	r4, r4, #8
 8012896:	f10e 0e18 	add.w	lr, lr, #24
 801289a:	f1a3 0308 	sub.w	r3, r3, #8
 801289e:	f47f aefc 	bne.w	801269a <arm_cfft_radix8by4_f32+0x13e>
 80128a2:	9908      	ldr	r1, [sp, #32]
 80128a4:	9802      	ldr	r0, [sp, #8]
 80128a6:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80128aa:	00cb      	lsls	r3, r1, #3
 80128ac:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80128b0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80128b4:	9102      	str	r1, [sp, #8]
 80128b6:	9904      	ldr	r1, [sp, #16]
 80128b8:	4419      	add	r1, r3
 80128ba:	9104      	str	r1, [sp, #16]
 80128bc:	9905      	ldr	r1, [sp, #20]
 80128be:	4419      	add	r1, r3
 80128c0:	9105      	str	r1, [sp, #20]
 80128c2:	9907      	ldr	r1, [sp, #28]
 80128c4:	449b      	add	fp, r3
 80128c6:	4419      	add	r1, r3
 80128c8:	449a      	add	sl, r3
 80128ca:	9b06      	ldr	r3, [sp, #24]
 80128cc:	9107      	str	r1, [sp, #28]
 80128ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128d2:	9306      	str	r3, [sp, #24]
 80128d4:	9a04      	ldr	r2, [sp, #16]
 80128d6:	9807      	ldr	r0, [sp, #28]
 80128d8:	edd2 3a00 	vldr	s7, [r2]
 80128dc:	ed90 4a00 	vldr	s8, [r0]
 80128e0:	eddb 7a00 	vldr	s15, [fp]
 80128e4:	ed9a 3a00 	vldr	s6, [sl]
 80128e8:	edd2 4a01 	vldr	s9, [r2, #4]
 80128ec:	ed90 7a01 	vldr	s14, [r0, #4]
 80128f0:	ed9b 2a01 	vldr	s4, [fp, #4]
 80128f4:	edda 5a01 	vldr	s11, [sl, #4]
 80128f8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80128fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80128fe:	ee73 6a84 	vadd.f32	s13, s7, s8
 8012902:	ee34 6a87 	vadd.f32	s12, s9, s14
 8012906:	ee36 5aa7 	vadd.f32	s10, s13, s15
 801290a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801290e:	ee33 5a05 	vadd.f32	s10, s6, s10
 8012912:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8012916:	ed82 5a00 	vstr	s10, [r2]
 801291a:	ed9b 5a01 	vldr	s10, [fp, #4]
 801291e:	edda 4a01 	vldr	s9, [sl, #4]
 8012922:	ee36 5a05 	vadd.f32	s10, s12, s10
 8012926:	ee72 3a04 	vadd.f32	s7, s4, s8
 801292a:	ee35 5a24 	vadd.f32	s10, s10, s9
 801292e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8012932:	ed82 5a01 	vstr	s10, [r2, #4]
 8012936:	9a05      	ldr	r2, [sp, #20]
 8012938:	ee34 5a83 	vadd.f32	s10, s9, s6
 801293c:	edd2 1a00 	vldr	s3, [r2]
 8012940:	edd2 2a01 	vldr	s5, [r2, #4]
 8012944:	9a02      	ldr	r2, [sp, #8]
 8012946:	ee73 3ae5 	vsub.f32	s7, s7, s11
 801294a:	ee36 6a42 	vsub.f32	s12, s12, s4
 801294e:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8012952:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8012956:	ee65 2a22 	vmul.f32	s5, s10, s5
 801295a:	ee25 5a21 	vmul.f32	s10, s10, s3
 801295e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8012962:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012966:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801296a:	edcb 2a00 	vstr	s5, [fp]
 801296e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8012972:	edd2 3a01 	vldr	s7, [r2, #4]
 8012976:	ed92 5a00 	vldr	s10, [r2]
 801297a:	9a06      	ldr	r2, [sp, #24]
 801297c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8012980:	ee36 6a65 	vsub.f32	s12, s12, s11
 8012984:	ee66 4a85 	vmul.f32	s9, s13, s10
 8012988:	ee26 5a05 	vmul.f32	s10, s12, s10
 801298c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8012990:	ee26 6a23 	vmul.f32	s12, s12, s7
 8012994:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012998:	ee34 6a86 	vadd.f32	s12, s9, s12
 801299c:	ee34 4a42 	vsub.f32	s8, s8, s4
 80129a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80129a4:	edc0 6a01 	vstr	s13, [r0, #4]
 80129a8:	ed80 6a00 	vstr	s12, [r0]
 80129ac:	ed92 6a01 	vldr	s12, [r2, #4]
 80129b0:	9803      	ldr	r0, [sp, #12]
 80129b2:	ee77 7a43 	vsub.f32	s15, s14, s6
 80129b6:	ee75 5a84 	vadd.f32	s11, s11, s8
 80129ba:	ed92 7a00 	vldr	s14, [r2]
 80129be:	ee65 6a87 	vmul.f32	s13, s11, s14
 80129c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80129c6:	ee65 5a86 	vmul.f32	s11, s11, s12
 80129ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80129ce:	ee77 5a65 	vsub.f32	s11, s14, s11
 80129d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129d6:	edca 5a01 	vstr	s11, [sl, #4]
 80129da:	edca 7a00 	vstr	s15, [sl]
 80129de:	6872      	ldr	r2, [r6, #4]
 80129e0:	4621      	mov	r1, r4
 80129e2:	2304      	movs	r3, #4
 80129e4:	f000 fcf2 	bl	80133cc <arm_radix8_butterfly_f32>
 80129e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80129ea:	6872      	ldr	r2, [r6, #4]
 80129ec:	4621      	mov	r1, r4
 80129ee:	2304      	movs	r3, #4
 80129f0:	f000 fcec 	bl	80133cc <arm_radix8_butterfly_f32>
 80129f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80129f6:	6872      	ldr	r2, [r6, #4]
 80129f8:	4621      	mov	r1, r4
 80129fa:	2304      	movs	r3, #4
 80129fc:	f000 fce6 	bl	80133cc <arm_radix8_butterfly_f32>
 8012a00:	9801      	ldr	r0, [sp, #4]
 8012a02:	6872      	ldr	r2, [r6, #4]
 8012a04:	4621      	mov	r1, r4
 8012a06:	2304      	movs	r3, #4
 8012a08:	b00f      	add	sp, #60	@ 0x3c
 8012a0a:	ecbd 8b0a 	vpop	{d8-d12}
 8012a0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a12:	f000 bcdb 	b.w	80133cc <arm_radix8_butterfly_f32>
 8012a16:	bf00      	nop

08012a18 <arm_cfft_f32>:
 8012a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1c:	2a01      	cmp	r2, #1
 8012a1e:	4606      	mov	r6, r0
 8012a20:	4617      	mov	r7, r2
 8012a22:	460c      	mov	r4, r1
 8012a24:	4698      	mov	r8, r3
 8012a26:	8805      	ldrh	r5, [r0, #0]
 8012a28:	d054      	beq.n	8012ad4 <arm_cfft_f32+0xbc>
 8012a2a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8012a2e:	d04c      	beq.n	8012aca <arm_cfft_f32+0xb2>
 8012a30:	d916      	bls.n	8012a60 <arm_cfft_f32+0x48>
 8012a32:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8012a36:	d01a      	beq.n	8012a6e <arm_cfft_f32+0x56>
 8012a38:	d95c      	bls.n	8012af4 <arm_cfft_f32+0xdc>
 8012a3a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8012a3e:	d044      	beq.n	8012aca <arm_cfft_f32+0xb2>
 8012a40:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8012a44:	d105      	bne.n	8012a52 <arm_cfft_f32+0x3a>
 8012a46:	4620      	mov	r0, r4
 8012a48:	4629      	mov	r1, r5
 8012a4a:	6872      	ldr	r2, [r6, #4]
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	f000 fcbd 	bl	80133cc <arm_radix8_butterfly_f32>
 8012a52:	f1b8 0f00 	cmp.w	r8, #0
 8012a56:	d111      	bne.n	8012a7c <arm_cfft_f32+0x64>
 8012a58:	2f01      	cmp	r7, #1
 8012a5a:	d016      	beq.n	8012a8a <arm_cfft_f32+0x72>
 8012a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a60:	2d20      	cmp	r5, #32
 8012a62:	d032      	beq.n	8012aca <arm_cfft_f32+0xb2>
 8012a64:	d94a      	bls.n	8012afc <arm_cfft_f32+0xe4>
 8012a66:	2d40      	cmp	r5, #64	@ 0x40
 8012a68:	d0ed      	beq.n	8012a46 <arm_cfft_f32+0x2e>
 8012a6a:	2d80      	cmp	r5, #128	@ 0x80
 8012a6c:	d1f1      	bne.n	8012a52 <arm_cfft_f32+0x3a>
 8012a6e:	4630      	mov	r0, r6
 8012a70:	4621      	mov	r1, r4
 8012a72:	f7ff fca1 	bl	80123b8 <arm_cfft_radix8by2_f32>
 8012a76:	f1b8 0f00 	cmp.w	r8, #0
 8012a7a:	d0ed      	beq.n	8012a58 <arm_cfft_f32+0x40>
 8012a7c:	4620      	mov	r0, r4
 8012a7e:	89b1      	ldrh	r1, [r6, #12]
 8012a80:	68b2      	ldr	r2, [r6, #8]
 8012a82:	f7ed fbad 	bl	80001e0 <arm_bitreversal_32>
 8012a86:	2f01      	cmp	r7, #1
 8012a88:	d1e8      	bne.n	8012a5c <arm_cfft_f32+0x44>
 8012a8a:	ee07 5a90 	vmov	s15, r5
 8012a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a92:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012a96:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8012a9a:	2d00      	cmp	r5, #0
 8012a9c:	d0de      	beq.n	8012a5c <arm_cfft_f32+0x44>
 8012a9e:	f104 0108 	add.w	r1, r4, #8
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	3301      	adds	r3, #1
 8012aa6:	429d      	cmp	r5, r3
 8012aa8:	f101 0108 	add.w	r1, r1, #8
 8012aac:	ed11 7a04 	vldr	s14, [r1, #-16]
 8012ab0:	ed51 7a03 	vldr	s15, [r1, #-12]
 8012ab4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012ab8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012abc:	ed01 7a04 	vstr	s14, [r1, #-16]
 8012ac0:	ed41 7a03 	vstr	s15, [r1, #-12]
 8012ac4:	d1ee      	bne.n	8012aa4 <arm_cfft_f32+0x8c>
 8012ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aca:	4630      	mov	r0, r6
 8012acc:	4621      	mov	r1, r4
 8012ace:	f7ff fd45 	bl	801255c <arm_cfft_radix8by4_f32>
 8012ad2:	e7be      	b.n	8012a52 <arm_cfft_f32+0x3a>
 8012ad4:	b1ad      	cbz	r5, 8012b02 <arm_cfft_f32+0xea>
 8012ad6:	f101 030c 	add.w	r3, r1, #12
 8012ada:	2200      	movs	r2, #0
 8012adc:	ed53 7a02 	vldr	s15, [r3, #-8]
 8012ae0:	3201      	adds	r2, #1
 8012ae2:	eef1 7a67 	vneg.f32	s15, s15
 8012ae6:	4295      	cmp	r5, r2
 8012ae8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8012aec:	f103 0308 	add.w	r3, r3, #8
 8012af0:	d1f4      	bne.n	8012adc <arm_cfft_f32+0xc4>
 8012af2:	e79a      	b.n	8012a2a <arm_cfft_f32+0x12>
 8012af4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8012af8:	d0a5      	beq.n	8012a46 <arm_cfft_f32+0x2e>
 8012afa:	e7aa      	b.n	8012a52 <arm_cfft_f32+0x3a>
 8012afc:	2d10      	cmp	r5, #16
 8012afe:	d0b6      	beq.n	8012a6e <arm_cfft_f32+0x56>
 8012b00:	e7a7      	b.n	8012a52 <arm_cfft_f32+0x3a>
 8012b02:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8012b06:	d894      	bhi.n	8012a32 <arm_cfft_f32+0x1a>
 8012b08:	e7aa      	b.n	8012a60 <arm_cfft_f32+0x48>
 8012b0a:	bf00      	nop

08012b0c <arm_fir_init_f32>:
 8012b0c:	b570      	push	{r4, r5, r6, lr}
 8012b0e:	9c04      	ldr	r4, [sp, #16]
 8012b10:	6082      	str	r2, [r0, #8]
 8012b12:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8012b16:	3c01      	subs	r4, #1
 8012b18:	4605      	mov	r5, r0
 8012b1a:	440c      	add	r4, r1
 8012b1c:	8001      	strh	r1, [r0, #0]
 8012b1e:	461e      	mov	r6, r3
 8012b20:	00a2      	lsls	r2, r4, #2
 8012b22:	4618      	mov	r0, r3
 8012b24:	2100      	movs	r1, #0
 8012b26:	f001 f886 	bl	8013c36 <memset>
 8012b2a:	606e      	str	r6, [r5, #4]
 8012b2c:	bd70      	pop	{r4, r5, r6, pc}
 8012b2e:	bf00      	nop

08012b30 <arm_fir_f32>:
 8012b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b34:	ed2d 8b10 	vpush	{d8-d15}
 8012b38:	b089      	sub	sp, #36	@ 0x24
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	9003      	str	r0, [sp, #12]
 8012b3e:	8800      	ldrh	r0, [r0, #0]
 8012b40:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012b44:	9304      	str	r3, [sp, #16]
 8012b46:	461e      	mov	r6, r3
 8012b48:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8012b4c:	3b01      	subs	r3, #1
 8012b4e:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8012b52:	08f3      	lsrs	r3, r6, #3
 8012b54:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8012b58:	9001      	str	r0, [sp, #4]
 8012b5a:	4625      	mov	r5, r4
 8012b5c:	9400      	str	r4, [sp, #0]
 8012b5e:	9302      	str	r3, [sp, #8]
 8012b60:	f000 81ee 	beq.w	8012f40 <arm_fir_f32+0x410>
 8012b64:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8012b68:	469e      	mov	lr, r3
 8012b6a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8012b6e:	1f1e      	subs	r6, r3, #4
 8012b70:	4604      	mov	r4, r0
 8012b72:	9605      	str	r6, [sp, #20]
 8012b74:	eb08 0003 	add.w	r0, r8, r3
 8012b78:	f004 0a07 	and.w	sl, r4, #7
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	f10c 0420 	add.w	r4, ip, #32
 8012b82:	f8cd c018 	str.w	ip, [sp, #24]
 8012b86:	4684      	mov	ip, r0
 8012b88:	4648      	mov	r0, r9
 8012b8a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8012b8e:	9107      	str	r1, [sp, #28]
 8012b90:	f105 0720 	add.w	r7, r5, #32
 8012b94:	f101 0620 	add.w	r6, r1, #32
 8012b98:	f102 0520 	add.w	r5, r2, #32
 8012b9c:	4652      	mov	r2, sl
 8012b9e:	469a      	mov	sl, r3
 8012ba0:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8012ba4:	f847 3c20 	str.w	r3, [r7, #-32]
 8012ba8:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8012bac:	f847 3c1c 	str.w	r3, [r7, #-28]
 8012bb0:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8012bb4:	f847 3c18 	str.w	r3, [r7, #-24]
 8012bb8:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8012bbc:	f847 3c14 	str.w	r3, [r7, #-20]
 8012bc0:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8012bc4:	f847 3c10 	str.w	r3, [r7, #-16]
 8012bc8:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8012bcc:	f847 3c0c 	str.w	r3, [r7, #-12]
 8012bd0:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8012bd4:	f847 3c08 	str.w	r3, [r7, #-8]
 8012bd8:	eddf 3af1 	vldr	s7, [pc, #964]	@ 8012fa0 <arm_fir_f32+0x470>
 8012bdc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012be0:	f847 3c04 	str.w	r3, [r7, #-4]
 8012be4:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 8012be8:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 8012bec:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 8012bf0:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 8012bf4:	ed14 1a04 	vldr	s2, [r4, #-16]
 8012bf8:	ed54 0a03 	vldr	s1, [r4, #-12]
 8012bfc:	ed14 0a02 	vldr	s0, [r4, #-8]
 8012c00:	1f21      	subs	r1, r4, #4
 8012c02:	eef0 8a63 	vmov.f32	s17, s7
 8012c06:	eef0 9a63 	vmov.f32	s19, s7
 8012c0a:	eef0 aa63 	vmov.f32	s21, s7
 8012c0e:	eef0 ba63 	vmov.f32	s23, s7
 8012c12:	eeb0 ca63 	vmov.f32	s24, s7
 8012c16:	eef0 ca63 	vmov.f32	s25, s7
 8012c1a:	eeb0 da63 	vmov.f32	s26, s7
 8012c1e:	2800      	cmp	r0, #0
 8012c20:	f000 81e8 	beq.w	8012ff4 <arm_fir_f32+0x4c4>
 8012c24:	f108 0120 	add.w	r1, r8, #32
 8012c28:	f104 031c 	add.w	r3, r4, #28
 8012c2c:	4683      	mov	fp, r0
 8012c2e:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 8012c32:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 8012c36:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 8012c3a:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 8012c3e:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 8012c42:	ed11 6a04 	vldr	s12, [r1, #-16]
 8012c46:	ed51 6a03 	vldr	s13, [r1, #-12]
 8012c4a:	ed11 7a02 	vldr	s14, [r1, #-8]
 8012c4e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8012c52:	ee23 fa04 	vmul.f32	s30, s6, s8
 8012c56:	ee62 ea84 	vmul.f32	s29, s5, s8
 8012c5a:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 8012c5e:	ee22 ea04 	vmul.f32	s28, s4, s8
 8012c62:	ee61 da84 	vmul.f32	s27, s3, s8
 8012c66:	ee21 ba04 	vmul.f32	s22, s2, s8
 8012c6a:	ee20 aa84 	vmul.f32	s20, s1, s8
 8012c6e:	ee20 9a04 	vmul.f32	s18, s0, s8
 8012c72:	ee28 4a04 	vmul.f32	s8, s16, s8
 8012c76:	ee62 fa24 	vmul.f32	s31, s4, s9
 8012c7a:	ee3c ca0e 	vadd.f32	s24, s24, s28
 8012c7e:	ee7b baad 	vadd.f32	s23, s23, s27
 8012c82:	ee21 eaa4 	vmul.f32	s28, s3, s9
 8012c86:	ee61 da24 	vmul.f32	s27, s2, s9
 8012c8a:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8012c8e:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8012c92:	ee20 baa4 	vmul.f32	s22, s1, s9
 8012c96:	ee20 aa24 	vmul.f32	s20, s0, s9
 8012c9a:	ee3d da0f 	vadd.f32	s26, s26, s30
 8012c9e:	ee7c caae 	vadd.f32	s25, s25, s29
 8012ca2:	ee22 faa4 	vmul.f32	s30, s5, s9
 8012ca6:	ee78 8a89 	vadd.f32	s17, s17, s18
 8012caa:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 8012cae:	ee28 9a24 	vmul.f32	s18, s16, s9
 8012cb2:	ee73 3a84 	vadd.f32	s7, s7, s8
 8012cb6:	ee63 4a24 	vmul.f32	s9, s6, s9
 8012cba:	ee22 4a05 	vmul.f32	s8, s4, s10
 8012cbe:	ee61 ea05 	vmul.f32	s29, s2, s10
 8012cc2:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 8012cc6:	ee3d da0f 	vadd.f32	s26, s26, s30
 8012cca:	ee7c caaf 	vadd.f32	s25, s25, s31
 8012cce:	ee20 fa85 	vmul.f32	s30, s1, s10
 8012cd2:	ee61 fa85 	vmul.f32	s31, s3, s10
 8012cd6:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8012cda:	ee7b daad 	vadd.f32	s27, s23, s27
 8012cde:	ee3a ba8b 	vadd.f32	s22, s21, s22
 8012ce2:	ee60 ba05 	vmul.f32	s23, s0, s10
 8012ce6:	ee68 aa05 	vmul.f32	s21, s16, s10
 8012cea:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8012cee:	ee78 8a89 	vadd.f32	s17, s17, s18
 8012cf2:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8012cf6:	ee63 4a05 	vmul.f32	s9, s6, s10
 8012cfa:	ee22 5a85 	vmul.f32	s10, s5, s10
 8012cfe:	ee21 9a25 	vmul.f32	s18, s2, s11
 8012d02:	ee20 ca25 	vmul.f32	s24, s0, s11
 8012d06:	ee3d da04 	vadd.f32	s26, s26, s8
 8012d0a:	ee7c caaf 	vadd.f32	s25, s25, s31
 8012d0e:	ee21 4aa5 	vmul.f32	s8, s3, s11
 8012d12:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8012d16:	ed53 1a04 	vldr	s3, [r3, #-16]
 8012d1a:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8012d1e:	ee7d da8f 	vadd.f32	s27, s27, s30
 8012d22:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8012d26:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8012d2a:	ee68 ba25 	vmul.f32	s23, s16, s11
 8012d2e:	ee63 aa25 	vmul.f32	s21, s6, s11
 8012d32:	ee78 8aa4 	vadd.f32	s17, s17, s9
 8012d36:	ee73 3a85 	vadd.f32	s7, s7, s10
 8012d3a:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8012d3e:	ee62 5a25 	vmul.f32	s11, s4, s11
 8012d42:	ee61 4a06 	vmul.f32	s9, s2, s12
 8012d46:	ee60 9a86 	vmul.f32	s19, s1, s12
 8012d4a:	ee60 fa06 	vmul.f32	s31, s0, s12
 8012d4e:	ed13 1a03 	vldr	s2, [r3, #-12]
 8012d52:	ee23 fa06 	vmul.f32	s30, s6, s12
 8012d56:	ee3d da04 	vadd.f32	s26, s26, s8
 8012d5a:	ee7c ca89 	vadd.f32	s25, s25, s18
 8012d5e:	ee3e ea2e 	vadd.f32	s28, s28, s29
 8012d62:	ee28 9a06 	vmul.f32	s18, s16, s12
 8012d66:	ee7d da8c 	vadd.f32	s27, s27, s24
 8012d6a:	ee3b ba2b 	vadd.f32	s22, s22, s23
 8012d6e:	ee22 ca86 	vmul.f32	s24, s5, s12
 8012d72:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8012d76:	ee78 8a85 	vadd.f32	s17, s17, s10
 8012d7a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8012d7e:	ee62 5a06 	vmul.f32	s11, s4, s12
 8012d82:	ee21 6a86 	vmul.f32	s12, s3, s12
 8012d86:	ee20 4a26 	vmul.f32	s8, s0, s13
 8012d8a:	ee63 ea26 	vmul.f32	s29, s6, s13
 8012d8e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8012d92:	ee22 5a26 	vmul.f32	s10, s4, s13
 8012d96:	ee3d da24 	vadd.f32	s26, s26, s9
 8012d9a:	ee7c caa9 	vadd.f32	s25, s25, s19
 8012d9e:	ee60 4aa6 	vmul.f32	s9, s1, s13
 8012da2:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8012da6:	ed53 0a02 	vldr	s1, [r3, #-8]
 8012daa:	ee68 fa26 	vmul.f32	s31, s16, s13
 8012dae:	ee7d da89 	vadd.f32	s27, s27, s18
 8012db2:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8012db6:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8012dba:	ee22 faa6 	vmul.f32	s30, s5, s13
 8012dbe:	ee73 3a86 	vadd.f32	s7, s7, s12
 8012dc2:	ee21 6aa6 	vmul.f32	s12, s3, s13
 8012dc6:	ee61 6a26 	vmul.f32	s13, s2, s13
 8012dca:	ee60 aa07 	vmul.f32	s21, s0, s14
 8012dce:	ee28 ca07 	vmul.f32	s24, s16, s14
 8012dd2:	ee63 ba07 	vmul.f32	s23, s6, s14
 8012dd6:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8012dda:	ee78 8a86 	vadd.f32	s17, s17, s12
 8012dde:	ee3d da24 	vadd.f32	s26, s26, s9
 8012de2:	ee7c ca84 	vadd.f32	s25, s25, s8
 8012de6:	ee7d daae 	vadd.f32	s27, s27, s29
 8012dea:	ee22 9a07 	vmul.f32	s18, s4, s14
 8012dee:	ee62 ea87 	vmul.f32	s29, s5, s14
 8012df2:	ee61 5a87 	vmul.f32	s11, s3, s14
 8012df6:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8012dfa:	ed13 0a01 	vldr	s0, [r3, #-4]
 8012dfe:	ee61 6a07 	vmul.f32	s13, s2, s14
 8012e02:	ee3e ea2f 	vadd.f32	s28, s28, s31
 8012e06:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8012e0a:	ee20 7a87 	vmul.f32	s14, s1, s14
 8012e0e:	ee68 4a27 	vmul.f32	s9, s16, s15
 8012e12:	ee3d da2a 	vadd.f32	s26, s26, s21
 8012e16:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8012e1a:	ee23 8a27 	vmul.f32	s16, s6, s15
 8012e1e:	ee3e ea2b 	vadd.f32	s28, s28, s23
 8012e22:	ee22 4aa7 	vmul.f32	s8, s5, s15
 8012e26:	ee22 aa27 	vmul.f32	s20, s4, s15
 8012e2a:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8012e2e:	ee21 6a27 	vmul.f32	s12, s2, s15
 8012e32:	ee78 6aa6 	vadd.f32	s13, s17, s13
 8012e36:	ee7d daae 	vadd.f32	s27, s27, s29
 8012e3a:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8012e3e:	ee3b ba09 	vadd.f32	s22, s22, s18
 8012e42:	ee79 9aa5 	vadd.f32	s19, s19, s11
 8012e46:	ee73 3a87 	vadd.f32	s7, s7, s14
 8012e4a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012e4e:	f1bb 0b01 	subs.w	fp, fp, #1
 8012e52:	f101 0120 	add.w	r1, r1, #32
 8012e56:	ee3d da24 	vadd.f32	s26, s26, s9
 8012e5a:	ee7c ca88 	vadd.f32	s25, s25, s16
 8012e5e:	ee3e ca04 	vadd.f32	s24, s28, s8
 8012e62:	ee7d ba8a 	vadd.f32	s23, s27, s20
 8012e66:	ee7b aa05 	vadd.f32	s21, s22, s10
 8012e6a:	ee79 9a86 	vadd.f32	s19, s19, s12
 8012e6e:	ee76 8aa8 	vadd.f32	s17, s13, s17
 8012e72:	ee73 3aa7 	vadd.f32	s7, s7, s15
 8012e76:	f103 0320 	add.w	r3, r3, #32
 8012e7a:	f47f aed8 	bne.w	8012c2e <arm_fir_f32+0xfe>
 8012e7e:	eb09 0104 	add.w	r1, r9, r4
 8012e82:	46e3      	mov	fp, ip
 8012e84:	b3a2      	cbz	r2, 8012ef0 <arm_fir_f32+0x3c0>
 8012e86:	4613      	mov	r3, r2
 8012e88:	ecbb 6a01 	vldmia	fp!, {s12}
 8012e8c:	ecf1 7a01 	vldmia	r1!, {s15}
 8012e90:	ee23 3a06 	vmul.f32	s6, s6, s12
 8012e94:	ee22 4a86 	vmul.f32	s8, s5, s12
 8012e98:	ee62 4a06 	vmul.f32	s9, s4, s12
 8012e9c:	ee21 5a86 	vmul.f32	s10, s3, s12
 8012ea0:	ee61 5a06 	vmul.f32	s11, s2, s12
 8012ea4:	ee60 6a86 	vmul.f32	s13, s1, s12
 8012ea8:	ee20 7a06 	vmul.f32	s14, s0, s12
 8012eac:	ee27 6a86 	vmul.f32	s12, s15, s12
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	ee3d da03 	vadd.f32	s26, s26, s6
 8012eb6:	ee7c ca84 	vadd.f32	s25, s25, s8
 8012eba:	eeb0 3a62 	vmov.f32	s6, s5
 8012ebe:	ee3c ca24 	vadd.f32	s24, s24, s9
 8012ec2:	eef0 2a42 	vmov.f32	s5, s4
 8012ec6:	ee7b ba85 	vadd.f32	s23, s23, s10
 8012eca:	eeb0 2a61 	vmov.f32	s4, s3
 8012ece:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8012ed2:	eef0 1a41 	vmov.f32	s3, s2
 8012ed6:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8012eda:	eeb0 1a60 	vmov.f32	s2, s1
 8012ede:	ee78 8a87 	vadd.f32	s17, s17, s14
 8012ee2:	eef0 0a40 	vmov.f32	s1, s0
 8012ee6:	ee73 3a86 	vadd.f32	s7, s7, s12
 8012eea:	eeb0 0a67 	vmov.f32	s0, s15
 8012eee:	d1cb      	bne.n	8012e88 <arm_fir_f32+0x358>
 8012ef0:	f1be 0e01 	subs.w	lr, lr, #1
 8012ef4:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 8012ef8:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 8012efc:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 8012f00:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 8012f04:	ed45 aa04 	vstr	s21, [r5, #-16]
 8012f08:	ed45 9a03 	vstr	s19, [r5, #-12]
 8012f0c:	ed45 8a02 	vstr	s17, [r5, #-8]
 8012f10:	ed45 3a01 	vstr	s7, [r5, #-4]
 8012f14:	f107 0720 	add.w	r7, r7, #32
 8012f18:	f106 0620 	add.w	r6, r6, #32
 8012f1c:	f104 0420 	add.w	r4, r4, #32
 8012f20:	f105 0520 	add.w	r5, r5, #32
 8012f24:	f47f ae3c 	bne.w	8012ba0 <arm_fir_f32+0x70>
 8012f28:	9b02      	ldr	r3, [sp, #8]
 8012f2a:	9800      	ldr	r0, [sp, #0]
 8012f2c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8012f30:	9907      	ldr	r1, [sp, #28]
 8012f32:	015b      	lsls	r3, r3, #5
 8012f34:	4652      	mov	r2, sl
 8012f36:	4418      	add	r0, r3
 8012f38:	9000      	str	r0, [sp, #0]
 8012f3a:	4419      	add	r1, r3
 8012f3c:	449c      	add	ip, r3
 8012f3e:	441a      	add	r2, r3
 8012f40:	9b04      	ldr	r3, [sp, #16]
 8012f42:	f013 0e07 	ands.w	lr, r3, #7
 8012f46:	d01f      	beq.n	8012f88 <arm_fir_f32+0x458>
 8012f48:	9f00      	ldr	r7, [sp, #0]
 8012f4a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012f4e:	4676      	mov	r6, lr
 8012f50:	4665      	mov	r5, ip
 8012f52:	f851 3b04 	ldr.w	r3, [r1], #4
 8012f56:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8012fa0 <arm_fir_f32+0x470>
 8012f5a:	f847 3b04 	str.w	r3, [r7], #4
 8012f5e:	4644      	mov	r4, r8
 8012f60:	464b      	mov	r3, r9
 8012f62:	4628      	mov	r0, r5
 8012f64:	ecb0 7a01 	vldmia	r0!, {s14}
 8012f68:	ecf4 7a01 	vldmia	r4!, {s15}
 8012f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f70:	3b01      	subs	r3, #1
 8012f72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012f76:	d1f5      	bne.n	8012f64 <arm_fir_f32+0x434>
 8012f78:	3e01      	subs	r6, #1
 8012f7a:	ece2 6a01 	vstmia	r2!, {s13}
 8012f7e:	f105 0504 	add.w	r5, r5, #4
 8012f82:	d1e6      	bne.n	8012f52 <arm_fir_f32+0x422>
 8012f84:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8012f88:	9b01      	ldr	r3, [sp, #4]
 8012f8a:	1e59      	subs	r1, r3, #1
 8012f8c:	9b03      	ldr	r3, [sp, #12]
 8012f8e:	088e      	lsrs	r6, r1, #2
 8012f90:	685c      	ldr	r4, [r3, #4]
 8012f92:	d020      	beq.n	8012fd6 <arm_fir_f32+0x4a6>
 8012f94:	f104 0210 	add.w	r2, r4, #16
 8012f98:	f10c 0310 	add.w	r3, ip, #16
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	e001      	b.n	8012fa4 <arm_fir_f32+0x474>
 8012fa0:	00000000 	.word	0x00000000
 8012fa4:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8012fa8:	f842 5c10 	str.w	r5, [r2, #-16]
 8012fac:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8012fb0:	f842 5c0c 	str.w	r5, [r2, #-12]
 8012fb4:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8012fb8:	f842 5c08 	str.w	r5, [r2, #-8]
 8012fbc:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8012fc0:	f842 5c04 	str.w	r5, [r2, #-4]
 8012fc4:	3801      	subs	r0, #1
 8012fc6:	f103 0310 	add.w	r3, r3, #16
 8012fca:	f102 0210 	add.w	r2, r2, #16
 8012fce:	d1e9      	bne.n	8012fa4 <arm_fir_f32+0x474>
 8012fd0:	0133      	lsls	r3, r6, #4
 8012fd2:	441c      	add	r4, r3
 8012fd4:	449c      	add	ip, r3
 8012fd6:	f011 0303 	ands.w	r3, r1, #3
 8012fda:	d006      	beq.n	8012fea <arm_fir_f32+0x4ba>
 8012fdc:	4622      	mov	r2, r4
 8012fde:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012fe2:	f842 1b04 	str.w	r1, [r2], #4
 8012fe6:	3b01      	subs	r3, #1
 8012fe8:	d1f9      	bne.n	8012fde <arm_fir_f32+0x4ae>
 8012fea:	b009      	add	sp, #36	@ 0x24
 8012fec:	ecbd 8b10 	vpop	{d8-d15}
 8012ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff4:	46c3      	mov	fp, r8
 8012ff6:	e745      	b.n	8012e84 <arm_fir_f32+0x354>

08012ff8 <arm_cmplx_mag_f32>:
 8012ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ffc:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8013000:	b084      	sub	sp, #16
 8013002:	d07f      	beq.n	8013104 <arm_cmplx_mag_f32+0x10c>
 8013004:	2700      	movs	r7, #0
 8013006:	f100 0420 	add.w	r4, r0, #32
 801300a:	f101 0510 	add.w	r5, r1, #16
 801300e:	4646      	mov	r6, r8
 8013010:	e05a      	b.n	80130c8 <arm_cmplx_mag_f32+0xd0>
 8013012:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8013016:	eeb4 0a40 	vcmp.f32	s0, s0
 801301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301e:	f040 80a4 	bne.w	801316a <arm_cmplx_mag_f32+0x172>
 8013022:	ed05 0a04 	vstr	s0, [r5, #-16]
 8013026:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 801302a:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 801302e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013032:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013036:	ee77 7a80 	vadd.f32	s15, s15, s0
 801303a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013042:	f2c0 808f 	blt.w	8013164 <arm_cmplx_mag_f32+0x16c>
 8013046:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801304a:	eeb4 0a40 	vcmp.f32	s0, s0
 801304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013052:	f040 80af 	bne.w	80131b4 <arm_cmplx_mag_f32+0x1bc>
 8013056:	ed05 0a03 	vstr	s0, [r5, #-12]
 801305a:	ed54 7a04 	vldr	s15, [r4, #-16]
 801305e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8013062:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013066:	ee20 0a00 	vmul.f32	s0, s0, s0
 801306a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801306e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013076:	db72      	blt.n	801315e <arm_cmplx_mag_f32+0x166>
 8013078:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801307c:	eeb4 0a40 	vcmp.f32	s0, s0
 8013080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013084:	f040 808c 	bne.w	80131a0 <arm_cmplx_mag_f32+0x1a8>
 8013088:	ed05 0a02 	vstr	s0, [r5, #-8]
 801308c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8013090:	ed14 0a01 	vldr	s0, [r4, #-4]
 8013094:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013098:	ee20 0a00 	vmul.f32	s0, s0, s0
 801309c:	ee77 7a80 	vadd.f32	s15, s15, s0
 80130a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130a8:	db20      	blt.n	80130ec <arm_cmplx_mag_f32+0xf4>
 80130aa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80130ae:	eeb4 0a40 	vcmp.f32	s0, s0
 80130b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130b6:	d169      	bne.n	801318c <arm_cmplx_mag_f32+0x194>
 80130b8:	3e01      	subs	r6, #1
 80130ba:	ed05 0a01 	vstr	s0, [r5, #-4]
 80130be:	f104 0420 	add.w	r4, r4, #32
 80130c2:	f105 0510 	add.w	r5, r5, #16
 80130c6:	d019      	beq.n	80130fc <arm_cmplx_mag_f32+0x104>
 80130c8:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 80130cc:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 80130d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80130d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80130d8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80130dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80130e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e4:	da95      	bge.n	8013012 <arm_cmplx_mag_f32+0x1a>
 80130e6:	f845 7c10 	str.w	r7, [r5, #-16]
 80130ea:	e79c      	b.n	8013026 <arm_cmplx_mag_f32+0x2e>
 80130ec:	3e01      	subs	r6, #1
 80130ee:	f845 7c04 	str.w	r7, [r5, #-4]
 80130f2:	f104 0420 	add.w	r4, r4, #32
 80130f6:	f105 0510 	add.w	r5, r5, #16
 80130fa:	d1e5      	bne.n	80130c8 <arm_cmplx_mag_f32+0xd0>
 80130fc:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8013100:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8013104:	f012 0503 	ands.w	r5, r2, #3
 8013108:	d026      	beq.n	8013158 <arm_cmplx_mag_f32+0x160>
 801310a:	2600      	movs	r6, #0
 801310c:	f100 0408 	add.w	r4, r0, #8
 8013110:	e00c      	b.n	801312c <arm_cmplx_mag_f32+0x134>
 8013112:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8013116:	eeb4 0a40 	vcmp.f32	s0, s0
 801311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801311e:	d12e      	bne.n	801317e <arm_cmplx_mag_f32+0x186>
 8013120:	3d01      	subs	r5, #1
 8013122:	ed01 0a01 	vstr	s0, [r1, #-4]
 8013126:	f104 0408 	add.w	r4, r4, #8
 801312a:	d015      	beq.n	8013158 <arm_cmplx_mag_f32+0x160>
 801312c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8013130:	ed14 0a01 	vldr	s0, [r4, #-4]
 8013134:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013138:	ee20 0a00 	vmul.f32	s0, s0, s0
 801313c:	3104      	adds	r1, #4
 801313e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801314a:	dae2      	bge.n	8013112 <arm_cmplx_mag_f32+0x11a>
 801314c:	3d01      	subs	r5, #1
 801314e:	f841 6c04 	str.w	r6, [r1, #-4]
 8013152:	f104 0408 	add.w	r4, r4, #8
 8013156:	d1e9      	bne.n	801312c <arm_cmplx_mag_f32+0x134>
 8013158:	b004      	add	sp, #16
 801315a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801315e:	f845 7c08 	str.w	r7, [r5, #-8]
 8013162:	e793      	b.n	801308c <arm_cmplx_mag_f32+0x94>
 8013164:	f845 7c0c 	str.w	r7, [r5, #-12]
 8013168:	e777      	b.n	801305a <arm_cmplx_mag_f32+0x62>
 801316a:	eeb0 0a67 	vmov.f32	s0, s15
 801316e:	9203      	str	r2, [sp, #12]
 8013170:	9102      	str	r1, [sp, #8]
 8013172:	9001      	str	r0, [sp, #4]
 8013174:	f001 fe14 	bl	8014da0 <sqrtf>
 8013178:	a801      	add	r0, sp, #4
 801317a:	c807      	ldmia	r0, {r0, r1, r2}
 801317c:	e751      	b.n	8013022 <arm_cmplx_mag_f32+0x2a>
 801317e:	eeb0 0a67 	vmov.f32	s0, s15
 8013182:	9101      	str	r1, [sp, #4]
 8013184:	f001 fe0c 	bl	8014da0 <sqrtf>
 8013188:	9901      	ldr	r1, [sp, #4]
 801318a:	e7c9      	b.n	8013120 <arm_cmplx_mag_f32+0x128>
 801318c:	eeb0 0a67 	vmov.f32	s0, s15
 8013190:	9203      	str	r2, [sp, #12]
 8013192:	9102      	str	r1, [sp, #8]
 8013194:	9001      	str	r0, [sp, #4]
 8013196:	f001 fe03 	bl	8014da0 <sqrtf>
 801319a:	a801      	add	r0, sp, #4
 801319c:	c807      	ldmia	r0, {r0, r1, r2}
 801319e:	e78b      	b.n	80130b8 <arm_cmplx_mag_f32+0xc0>
 80131a0:	eeb0 0a67 	vmov.f32	s0, s15
 80131a4:	9203      	str	r2, [sp, #12]
 80131a6:	9102      	str	r1, [sp, #8]
 80131a8:	9001      	str	r0, [sp, #4]
 80131aa:	f001 fdf9 	bl	8014da0 <sqrtf>
 80131ae:	a801      	add	r0, sp, #4
 80131b0:	c807      	ldmia	r0, {r0, r1, r2}
 80131b2:	e769      	b.n	8013088 <arm_cmplx_mag_f32+0x90>
 80131b4:	eeb0 0a67 	vmov.f32	s0, s15
 80131b8:	9203      	str	r2, [sp, #12]
 80131ba:	9102      	str	r1, [sp, #8]
 80131bc:	9001      	str	r0, [sp, #4]
 80131be:	f001 fdef 	bl	8014da0 <sqrtf>
 80131c2:	a801      	add	r0, sp, #4
 80131c4:	c807      	ldmia	r0, {r0, r1, r2}
 80131c6:	e746      	b.n	8013056 <arm_cmplx_mag_f32+0x5e>

080131c8 <arm_cos_f32>:
 80131c8:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 801323c <arm_cos_f32+0x74>
 80131cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80131d0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80131d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80131d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80131dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80131e4:	d504      	bpl.n	80131f0 <arm_cos_f32+0x28>
 80131e6:	ee17 3a90 	vmov	r3, s15
 80131ea:	3b01      	subs	r3, #1
 80131ec:	ee07 3a90 	vmov	s15, r3
 80131f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131f4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8013240 <arm_cos_f32+0x78>
 80131f8:	4a12      	ldr	r2, [pc, #72]	@ (8013244 <arm_cos_f32+0x7c>)
 80131fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80131fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013202:	ee20 0a26 	vmul.f32	s0, s0, s13
 8013206:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801320a:	ee17 3a90 	vmov	r3, s15
 801320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013212:	ee07 3a90 	vmov	s15, r3
 8013216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801321a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801321e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013222:	edd1 6a01 	vldr	s13, [r1, #4]
 8013226:	ed91 0a00 	vldr	s0, [r1]
 801322a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801322e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013232:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013236:	ee30 0a27 	vadd.f32	s0, s0, s15
 801323a:	4770      	bx	lr
 801323c:	3e22f983 	.word	0x3e22f983
 8013240:	44000000 	.word	0x44000000
 8013244:	080269ec 	.word	0x080269ec

08013248 <arm_sub_f32>:
 8013248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801324a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 801324e:	d033      	beq.n	80132b8 <arm_sub_f32+0x70>
 8013250:	f100 0610 	add.w	r6, r0, #16
 8013254:	f101 0510 	add.w	r5, r1, #16
 8013258:	f102 0410 	add.w	r4, r2, #16
 801325c:	4677      	mov	r7, lr
 801325e:	ed16 6a03 	vldr	s12, [r6, #-12]
 8013262:	ed15 4a03 	vldr	s8, [r5, #-12]
 8013266:	ed56 6a02 	vldr	s13, [r6, #-8]
 801326a:	ed55 4a02 	vldr	s9, [r5, #-8]
 801326e:	ed16 7a01 	vldr	s14, [r6, #-4]
 8013272:	ed15 5a01 	vldr	s10, [r5, #-4]
 8013276:	ed56 7a04 	vldr	s15, [r6, #-16]
 801327a:	ed55 5a04 	vldr	s11, [r5, #-16]
 801327e:	ee36 6a44 	vsub.f32	s12, s12, s8
 8013282:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8013286:	ee37 7a45 	vsub.f32	s14, s14, s10
 801328a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801328e:	3f01      	subs	r7, #1
 8013290:	ed04 6a03 	vstr	s12, [r4, #-12]
 8013294:	ed44 6a02 	vstr	s13, [r4, #-8]
 8013298:	ed04 7a01 	vstr	s14, [r4, #-4]
 801329c:	ed44 7a04 	vstr	s15, [r4, #-16]
 80132a0:	f106 0610 	add.w	r6, r6, #16
 80132a4:	f105 0510 	add.w	r5, r5, #16
 80132a8:	f104 0410 	add.w	r4, r4, #16
 80132ac:	d1d7      	bne.n	801325e <arm_sub_f32+0x16>
 80132ae:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80132b2:	4420      	add	r0, r4
 80132b4:	4421      	add	r1, r4
 80132b6:	4422      	add	r2, r4
 80132b8:	f013 0303 	ands.w	r3, r3, #3
 80132bc:	d009      	beq.n	80132d2 <arm_sub_f32+0x8a>
 80132be:	ecf0 7a01 	vldmia	r0!, {s15}
 80132c2:	ecb1 7a01 	vldmia	r1!, {s14}
 80132c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132ca:	3b01      	subs	r3, #1
 80132cc:	ece2 7a01 	vstmia	r2!, {s15}
 80132d0:	d1f5      	bne.n	80132be <arm_sub_f32+0x76>
 80132d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080132d4 <arm_scale_f32>:
 80132d4:	b470      	push	{r4, r5, r6}
 80132d6:	0896      	lsrs	r6, r2, #2
 80132d8:	d025      	beq.n	8013326 <arm_scale_f32+0x52>
 80132da:	f100 0410 	add.w	r4, r0, #16
 80132de:	f101 0310 	add.w	r3, r1, #16
 80132e2:	4635      	mov	r5, r6
 80132e4:	ed14 6a04 	vldr	s12, [r4, #-16]
 80132e8:	ed54 6a03 	vldr	s13, [r4, #-12]
 80132ec:	ed14 7a02 	vldr	s14, [r4, #-8]
 80132f0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80132f4:	ee26 6a00 	vmul.f32	s12, s12, s0
 80132f8:	ee66 6a80 	vmul.f32	s13, s13, s0
 80132fc:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013300:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013304:	3d01      	subs	r5, #1
 8013306:	ed03 6a04 	vstr	s12, [r3, #-16]
 801330a:	ed43 6a03 	vstr	s13, [r3, #-12]
 801330e:	ed03 7a02 	vstr	s14, [r3, #-8]
 8013312:	ed43 7a01 	vstr	s15, [r3, #-4]
 8013316:	f104 0410 	add.w	r4, r4, #16
 801331a:	f103 0310 	add.w	r3, r3, #16
 801331e:	d1e1      	bne.n	80132e4 <arm_scale_f32+0x10>
 8013320:	0136      	lsls	r6, r6, #4
 8013322:	4430      	add	r0, r6
 8013324:	4431      	add	r1, r6
 8013326:	f012 0203 	ands.w	r2, r2, #3
 801332a:	d007      	beq.n	801333c <arm_scale_f32+0x68>
 801332c:	ecf0 7a01 	vldmia	r0!, {s15}
 8013330:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013334:	3a01      	subs	r2, #1
 8013336:	ece1 7a01 	vstmia	r1!, {s15}
 801333a:	d1f7      	bne.n	801332c <arm_scale_f32+0x58>
 801333c:	bc70      	pop	{r4, r5, r6}
 801333e:	4770      	bx	lr

08013340 <arm_dot_prod_f32>:
 8013340:	b4f0      	push	{r4, r5, r6, r7}
 8013342:	0897      	lsrs	r7, r2, #2
 8013344:	eddf 5a20 	vldr	s11, [pc, #128]	@ 80133c8 <arm_dot_prod_f32+0x88>
 8013348:	d02d      	beq.n	80133a6 <arm_dot_prod_f32+0x66>
 801334a:	f100 0510 	add.w	r5, r0, #16
 801334e:	f101 0410 	add.w	r4, r1, #16
 8013352:	463e      	mov	r6, r7
 8013354:	ed54 7a04 	vldr	s15, [r4, #-16]
 8013358:	ed15 6a04 	vldr	s12, [r5, #-16]
 801335c:	ed55 6a03 	vldr	s13, [r5, #-12]
 8013360:	ed54 3a03 	vldr	s7, [r4, #-12]
 8013364:	ed15 7a02 	vldr	s14, [r5, #-8]
 8013368:	ed14 4a02 	vldr	s8, [r4, #-8]
 801336c:	ed15 5a01 	vldr	s10, [r5, #-4]
 8013370:	ed54 4a01 	vldr	s9, [r4, #-4]
 8013374:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013378:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801337c:	ee76 7a25 	vadd.f32	s15, s12, s11
 8013380:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013384:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013388:	ee65 5a24 	vmul.f32	s11, s10, s9
 801338c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013390:	3e01      	subs	r6, #1
 8013392:	f105 0510 	add.w	r5, r5, #16
 8013396:	ee75 5aa7 	vadd.f32	s11, s11, s15
 801339a:	f104 0410 	add.w	r4, r4, #16
 801339e:	d1d9      	bne.n	8013354 <arm_dot_prod_f32+0x14>
 80133a0:	013f      	lsls	r7, r7, #4
 80133a2:	4438      	add	r0, r7
 80133a4:	4439      	add	r1, r7
 80133a6:	f012 0203 	ands.w	r2, r2, #3
 80133aa:	d009      	beq.n	80133c0 <arm_dot_prod_f32+0x80>
 80133ac:	ecf0 7a01 	vldmia	r0!, {s15}
 80133b0:	ecb1 7a01 	vldmia	r1!, {s14}
 80133b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80133b8:	3a01      	subs	r2, #1
 80133ba:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80133be:	d1f5      	bne.n	80133ac <arm_dot_prod_f32+0x6c>
 80133c0:	edc3 5a00 	vstr	s11, [r3]
 80133c4:	bcf0      	pop	{r4, r5, r6, r7}
 80133c6:	4770      	bx	lr
 80133c8:	00000000 	.word	0x00000000

080133cc <arm_radix8_butterfly_f32>:
 80133cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d0:	ed2d 8b10 	vpush	{d8-d15}
 80133d4:	b09d      	sub	sp, #116	@ 0x74
 80133d6:	461c      	mov	r4, r3
 80133d8:	ed9f bac8 	vldr	s22, [pc, #800]	@ 80136fc <arm_radix8_butterfly_f32+0x330>
 80133dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80133de:	1d03      	adds	r3, r0, #4
 80133e0:	4682      	mov	sl, r0
 80133e2:	4689      	mov	r9, r1
 80133e4:	468b      	mov	fp, r1
 80133e6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80133e8:	9400      	str	r4, [sp, #0]
 80133ea:	469e      	mov	lr, r3
 80133ec:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80133f0:	005a      	lsls	r2, r3, #1
 80133f2:	18d6      	adds	r6, r2, r3
 80133f4:	18f5      	adds	r5, r6, r3
 80133f6:	9203      	str	r2, [sp, #12]
 80133f8:	195a      	adds	r2, r3, r5
 80133fa:	18d0      	adds	r0, r2, r3
 80133fc:	00df      	lsls	r7, r3, #3
 80133fe:	1819      	adds	r1, r3, r0
 8013400:	463c      	mov	r4, r7
 8013402:	9701      	str	r7, [sp, #4]
 8013404:	4457      	add	r7, sl
 8013406:	930c      	str	r3, [sp, #48]	@ 0x30
 8013408:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801340c:	011b      	lsls	r3, r3, #4
 801340e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8013412:	eb07 0c04 	add.w	ip, r7, r4
 8013416:	9c00      	ldr	r4, [sp, #0]
 8013418:	9302      	str	r3, [sp, #8]
 801341a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 801341e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8013422:	3204      	adds	r2, #4
 8013424:	3104      	adds	r1, #4
 8013426:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 801342a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801342e:	f04f 0800 	mov.w	r8, #0
 8013432:	eddc 7a00 	vldr	s15, [ip]
 8013436:	edd7 6a00 	vldr	s13, [r7]
 801343a:	edd6 3a00 	vldr	s7, [r6]
 801343e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8013442:	edd5 4a00 	vldr	s9, [r5]
 8013446:	ed90 2a00 	vldr	s4, [r0]
 801344a:	ed12 7a01 	vldr	s14, [r2, #-4]
 801344e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8013452:	ee77 8a82 	vadd.f32	s17, s15, s4
 8013456:	ee33 4aa0 	vadd.f32	s8, s7, s1
 801345a:	ee76 1a87 	vadd.f32	s3, s13, s14
 801345e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8013462:	ee31 6a84 	vadd.f32	s12, s3, s8
 8013466:	ee33 5a28 	vadd.f32	s10, s6, s17
 801346a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801346e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8013472:	ee35 5a46 	vsub.f32	s10, s10, s12
 8013476:	ed4e 6a01 	vstr	s13, [lr, #-4]
 801347a:	ed85 5a00 	vstr	s10, [r5]
 801347e:	ed96 1a01 	vldr	s2, [r6, #4]
 8013482:	edd7 5a01 	vldr	s11, [r7, #4]
 8013486:	ed92 aa00 	vldr	s20, [r2]
 801348a:	ed91 6a00 	vldr	s12, [r1]
 801348e:	ed9e 9a00 	vldr	s18, [lr]
 8013492:	ed95 5a01 	vldr	s10, [r5, #4]
 8013496:	eddc 6a01 	vldr	s13, [ip, #4]
 801349a:	edd0 9a01 	vldr	s19, [r0, #4]
 801349e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80134a2:	ee71 2a46 	vsub.f32	s5, s2, s12
 80134a6:	ee75 3aca 	vsub.f32	s7, s11, s20
 80134aa:	ee37 0a60 	vsub.f32	s0, s14, s1
 80134ae:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80134b2:	ee37 7a20 	vadd.f32	s14, s14, s1
 80134b6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80134ba:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80134be:	ee79 3a05 	vadd.f32	s7, s18, s10
 80134c2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80134c6:	ee39 5a45 	vsub.f32	s10, s18, s10
 80134ca:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80134ce:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80134d2:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80134d6:	ee31 6a06 	vadd.f32	s12, s2, s12
 80134da:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80134de:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80134e2:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80134e6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80134ea:	ee33 3a68 	vsub.f32	s6, s6, s17
 80134ee:	ee36 0a88 	vadd.f32	s0, s13, s16
 80134f2:	ee75 8a86 	vadd.f32	s17, s11, s12
 80134f6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80134fa:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80134fe:	ee75 6a62 	vsub.f32	s13, s10, s5
 8013502:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8013506:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801350a:	ee33 1a89 	vadd.f32	s2, s7, s18
 801350e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8013512:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8013516:	ee75 4a22 	vadd.f32	s9, s10, s5
 801351a:	ee32 5a27 	vadd.f32	s10, s4, s15
 801351e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8013522:	ee33 8a06 	vadd.f32	s16, s6, s12
 8013526:	ee75 2a87 	vadd.f32	s5, s11, s14
 801352a:	ee31 9a28 	vadd.f32	s18, s2, s17
 801352e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8013532:	ee74 0a61 	vsub.f32	s1, s8, s3
 8013536:	ee33 2a80 	vadd.f32	s4, s7, s0
 801353a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 801353e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8013542:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013546:	ee31 1a68 	vsub.f32	s2, s2, s17
 801354a:	ee34 4a21 	vadd.f32	s8, s8, s3
 801354e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8013552:	ee74 4a85 	vadd.f32	s9, s9, s10
 8013556:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801355a:	44d8      	add	r8, fp
 801355c:	45c1      	cmp	r9, r8
 801355e:	ed8e 9a00 	vstr	s18, [lr]
 8013562:	ed85 1a01 	vstr	s2, [r5, #4]
 8013566:	449e      	add	lr, r3
 8013568:	ed8c 8a00 	vstr	s16, [ip]
 801356c:	441d      	add	r5, r3
 801356e:	ed80 6a00 	vstr	s12, [r0]
 8013572:	edcc 0a01 	vstr	s1, [ip, #4]
 8013576:	ed80 4a01 	vstr	s8, [r0, #4]
 801357a:	449c      	add	ip, r3
 801357c:	ed87 2a00 	vstr	s4, [r7]
 8013580:	4418      	add	r0, r3
 8013582:	ed41 3a01 	vstr	s7, [r1, #-4]
 8013586:	ed42 2a01 	vstr	s5, [r2, #-4]
 801358a:	ed86 7a00 	vstr	s14, [r6]
 801358e:	ed87 3a01 	vstr	s6, [r7, #4]
 8013592:	edc1 4a00 	vstr	s9, [r1]
 8013596:	441f      	add	r7, r3
 8013598:	edc2 5a00 	vstr	s11, [r2]
 801359c:	4419      	add	r1, r3
 801359e:	edc6 6a01 	vstr	s13, [r6, #4]
 80135a2:	441a      	add	r2, r3
 80135a4:	441e      	add	r6, r3
 80135a6:	f63f af44 	bhi.w	8013432 <arm_radix8_butterfly_f32+0x66>
 80135aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80135ac:	2907      	cmp	r1, #7
 80135ae:	4620      	mov	r0, r4
 80135b0:	f240 81e9 	bls.w	8013986 <arm_radix8_butterfly_f32+0x5ba>
 80135b4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80135b8:	193e      	adds	r6, r7, r4
 80135ba:	1935      	adds	r5, r6, r4
 80135bc:	9c03      	ldr	r4, [sp, #12]
 80135be:	9000      	str	r0, [sp, #0]
 80135c0:	4622      	mov	r2, r4
 80135c2:	3201      	adds	r2, #1
 80135c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80135c8:	9900      	ldr	r1, [sp, #0]
 80135ca:	1828      	adds	r0, r5, r0
 80135cc:	eb00 0e01 	add.w	lr, r0, r1
 80135d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80135d2:	440a      	add	r2, r1
 80135d4:	eb04 0c01 	add.w	ip, r4, r1
 80135d8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80135dc:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80135e0:	9a00      	ldr	r2, [sp, #0]
 80135e2:	940f      	str	r4, [sp, #60]	@ 0x3c
 80135e4:	00ed      	lsls	r5, r5, #3
 80135e6:	9511      	str	r5, [sp, #68]	@ 0x44
 80135e8:	00d5      	lsls	r5, r2, #3
 80135ea:	950d      	str	r5, [sp, #52]	@ 0x34
 80135ec:	9d01      	ldr	r5, [sp, #4]
 80135ee:	3508      	adds	r5, #8
 80135f0:	9516      	str	r5, [sp, #88]	@ 0x58
 80135f2:	9d02      	ldr	r5, [sp, #8]
 80135f4:	3508      	adds	r5, #8
 80135f6:	0114      	lsls	r4, r2, #4
 80135f8:	9517      	str	r5, [sp, #92]	@ 0x5c
 80135fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80135fc:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80135fe:	940e      	str	r4, [sp, #56]	@ 0x38
 8013600:	00c0      	lsls	r0, r0, #3
 8013602:	9010      	str	r0, [sp, #64]	@ 0x40
 8013604:	18aa      	adds	r2, r5, r2
 8013606:	9207      	str	r2, [sp, #28]
 8013608:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801360a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801360c:	18aa      	adds	r2, r5, r2
 801360e:	9208      	str	r2, [sp, #32]
 8013610:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013612:	18aa      	adds	r2, r5, r2
 8013614:	9209      	str	r2, [sp, #36]	@ 0x24
 8013616:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801361a:	f10e 0204 	add.w	r2, lr, #4
 801361e:	920a      	str	r2, [sp, #40]	@ 0x28
 8013620:	00c9      	lsls	r1, r1, #3
 8013622:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013624:	310c      	adds	r1, #12
 8013626:	00f6      	lsls	r6, r6, #3
 8013628:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 801362c:	9114      	str	r1, [sp, #80]	@ 0x50
 801362e:	18a9      	adds	r1, r5, r2
 8013630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013632:	9612      	str	r6, [sp, #72]	@ 0x48
 8013634:	00ff      	lsls	r7, r7, #3
 8013636:	19ae      	adds	r6, r5, r6
 8013638:	3008      	adds	r0, #8
 801363a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801363e:	9606      	str	r6, [sp, #24]
 8013640:	9019      	str	r0, [sp, #100]	@ 0x64
 8013642:	18aa      	adds	r2, r5, r2
 8013644:	0164      	lsls	r4, r4, #5
 8013646:	19ee      	adds	r6, r5, r7
 8013648:	f10c 000c 	add.w	r0, ip, #12
 801364c:	9713      	str	r7, [sp, #76]	@ 0x4c
 801364e:	9604      	str	r6, [sp, #16]
 8013650:	9015      	str	r0, [sp, #84]	@ 0x54
 8013652:	9103      	str	r1, [sp, #12]
 8013654:	9205      	str	r2, [sp, #20]
 8013656:	f104 0208 	add.w	r2, r4, #8
 801365a:	9218      	str	r2, [sp, #96]	@ 0x60
 801365c:	f04f 0801 	mov.w	r8, #1
 8013660:	2200      	movs	r2, #0
 8013662:	f102 0108 	add.w	r1, r2, #8
 8013666:	460f      	mov	r7, r1
 8013668:	910b      	str	r1, [sp, #44]	@ 0x2c
 801366a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801366c:	188e      	adds	r6, r1, r2
 801366e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8013670:	188d      	adds	r5, r1, r2
 8013672:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013674:	188c      	adds	r4, r1, r2
 8013676:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8013678:	1888      	adds	r0, r1, r2
 801367a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801367c:	eb01 0c02 	add.w	ip, r1, r2
 8013680:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8013682:	440a      	add	r2, r1
 8013684:	9903      	ldr	r1, [sp, #12]
 8013686:	edd1 fa00 	vldr	s31, [r1]
 801368a:	9905      	ldr	r1, [sp, #20]
 801368c:	ed91 fa00 	vldr	s30, [r1]
 8013690:	9904      	ldr	r1, [sp, #16]
 8013692:	edd1 ea00 	vldr	s29, [r1]
 8013696:	9906      	ldr	r1, [sp, #24]
 8013698:	ed91 ea00 	vldr	s28, [r1]
 801369c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801369e:	edd1 da00 	vldr	s27, [r1]
 80136a2:	9908      	ldr	r1, [sp, #32]
 80136a4:	ed91 da00 	vldr	s26, [r1]
 80136a8:	9907      	ldr	r1, [sp, #28]
 80136aa:	edd1 ca00 	vldr	s25, [r1]
 80136ae:	9903      	ldr	r1, [sp, #12]
 80136b0:	ed91 ca01 	vldr	s24, [r1, #4]
 80136b4:	9905      	ldr	r1, [sp, #20]
 80136b6:	edd1 ba01 	vldr	s23, [r1, #4]
 80136ba:	9904      	ldr	r1, [sp, #16]
 80136bc:	edd1 aa01 	vldr	s21, [r1, #4]
 80136c0:	9906      	ldr	r1, [sp, #24]
 80136c2:	ed91 aa01 	vldr	s20, [r1, #4]
 80136c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80136c8:	edd1 7a01 	vldr	s15, [r1, #4]
 80136cc:	9908      	ldr	r1, [sp, #32]
 80136ce:	edcd 7a00 	vstr	s15, [sp]
 80136d2:	edd1 7a01 	vldr	s15, [r1, #4]
 80136d6:	9907      	ldr	r1, [sp, #28]
 80136d8:	edcd 7a01 	vstr	s15, [sp, #4]
 80136dc:	edd1 7a01 	vldr	s15, [r1, #4]
 80136e0:	eb0a 0e07 	add.w	lr, sl, r7
 80136e4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80136e6:	edcd 7a02 	vstr	s15, [sp, #8]
 80136ea:	eb0c 010a 	add.w	r1, ip, sl
 80136ee:	4456      	add	r6, sl
 80136f0:	4455      	add	r5, sl
 80136f2:	4454      	add	r4, sl
 80136f4:	4450      	add	r0, sl
 80136f6:	4452      	add	r2, sl
 80136f8:	46c4      	mov	ip, r8
 80136fa:	e001      	b.n	8013700 <arm_radix8_butterfly_f32+0x334>
 80136fc:	3f3504f3 	.word	0x3f3504f3
 8013700:	ed96 5a00 	vldr	s10, [r6]
 8013704:	ed52 9a01 	vldr	s19, [r2, #-4]
 8013708:	ed11 6a01 	vldr	s12, [r1, #-4]
 801370c:	edd0 7a00 	vldr	s15, [r0]
 8013710:	ed17 7a01 	vldr	s14, [r7, #-4]
 8013714:	edde 3a00 	vldr	s7, [lr]
 8013718:	ed94 3a00 	vldr	s6, [r4]
 801371c:	ed95 2a00 	vldr	s4, [r5]
 8013720:	ed9e 0a01 	vldr	s0, [lr, #4]
 8013724:	ee33 8a85 	vadd.f32	s16, s7, s10
 8013728:	ee32 1a06 	vadd.f32	s2, s4, s12
 801372c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8013730:	ee77 4a87 	vadd.f32	s9, s15, s14
 8013734:	ee78 1a04 	vadd.f32	s3, s16, s8
 8013738:	ee71 6a24 	vadd.f32	s13, s2, s9
 801373c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8013740:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8013744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013748:	ed8e 6a00 	vstr	s12, [lr]
 801374c:	edd0 8a01 	vldr	s17, [r0, #4]
 8013750:	ed95 9a01 	vldr	s18, [r5, #4]
 8013754:	edd1 2a00 	vldr	s5, [r1]
 8013758:	ed97 7a00 	vldr	s14, [r7]
 801375c:	edd4 0a01 	vldr	s1, [r4, #4]
 8013760:	ed96 6a01 	vldr	s12, [r6, #4]
 8013764:	edd2 5a00 	vldr	s11, [r2]
 8013768:	ee73 3ac5 	vsub.f32	s7, s7, s10
 801376c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8013770:	ee39 5a62 	vsub.f32	s10, s18, s5
 8013774:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8013778:	ee38 4a44 	vsub.f32	s8, s16, s8
 801377c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8013780:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8013784:	ee79 2a22 	vadd.f32	s5, s18, s5
 8013788:	ee75 8a69 	vsub.f32	s17, s10, s19
 801378c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8013790:	ee35 5a29 	vadd.f32	s10, s10, s19
 8013794:	ee72 7a67 	vsub.f32	s15, s4, s15
 8013798:	ee30 2a06 	vadd.f32	s4, s0, s12
 801379c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80137a0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80137a4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80137a8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80137ac:	ee32 2a48 	vsub.f32	s4, s4, s16
 80137b0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80137b4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80137b8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80137bc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80137c0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80137c4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80137c8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80137cc:	ee36 0a28 	vadd.f32	s0, s12, s17
 80137d0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80137d4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80137d8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80137dc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80137e0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80137e4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80137e8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80137ec:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80137f0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80137f4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80137f8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80137fc:	ee76 5a43 	vsub.f32	s11, s12, s6
 8013800:	ee74 2a62 	vsub.f32	s5, s8, s5
 8013804:	ee72 4a24 	vadd.f32	s9, s4, s9
 8013808:	ee30 4a60 	vsub.f32	s8, s0, s1
 801380c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8013810:	ee30 0a20 	vadd.f32	s0, s0, s1
 8013814:	ee77 9a85 	vadd.f32	s19, s15, s10
 8013818:	ee36 6a03 	vadd.f32	s12, s12, s6
 801381c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8013820:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8013824:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8013828:	ee6f 0a23 	vmul.f32	s1, s30, s7
 801382c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8013830:	ee39 1a01 	vadd.f32	s2, s18, s2
 8013834:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8013838:	ee2b 9a87 	vmul.f32	s18, s23, s14
 801383c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8013840:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8013844:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8013848:	ee35 3a03 	vadd.f32	s6, s10, s6
 801384c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8013850:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8013854:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8013858:	ed9d 4a02 	vldr	s8, [sp, #8]
 801385c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8013860:	ee77 3a63 	vsub.f32	s7, s14, s7
 8013864:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8013868:	ed9d 7a01 	vldr	s14, [sp, #4]
 801386c:	ed86 3a00 	vstr	s6, [r6]
 8013870:	ee30 9a89 	vadd.f32	s18, s1, s18
 8013874:	ee32 2a05 	vadd.f32	s4, s4, s10
 8013878:	ee6d 0a22 	vmul.f32	s1, s26, s5
 801387c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8013880:	ee67 2a22 	vmul.f32	s5, s14, s5
 8013884:	ee64 1a00 	vmul.f32	s3, s8, s0
 8013888:	ee27 7a24 	vmul.f32	s14, s14, s9
 801388c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8013890:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8013894:	ee64 8a28 	vmul.f32	s17, s8, s17
 8013898:	ed9d 4a00 	vldr	s8, [sp]
 801389c:	edc6 6a01 	vstr	s13, [r6, #4]
 80138a0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80138a4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80138a8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80138ac:	ee24 4a25 	vmul.f32	s8, s8, s11
 80138b0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80138b4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80138b8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80138bc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80138c0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80138c4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80138c8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80138cc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80138d0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80138d4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80138d8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80138dc:	ee70 0a84 	vadd.f32	s1, s1, s8
 80138e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80138e4:	44dc      	add	ip, fp
 80138e6:	45e1      	cmp	r9, ip
 80138e8:	ed84 9a00 	vstr	s18, [r4]
 80138ec:	edc4 3a01 	vstr	s7, [r4, #4]
 80138f0:	449e      	add	lr, r3
 80138f2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80138f6:	edc2 2a00 	vstr	s5, [r2]
 80138fa:	441e      	add	r6, r3
 80138fc:	ed85 2a00 	vstr	s4, [r5]
 8013900:	ed85 8a01 	vstr	s16, [r5, #4]
 8013904:	441c      	add	r4, r3
 8013906:	ed47 1a01 	vstr	s3, [r7, #-4]
 801390a:	ed87 0a00 	vstr	s0, [r7]
 801390e:	441a      	add	r2, r3
 8013910:	ed41 4a01 	vstr	s9, [r1, #-4]
 8013914:	edc1 9a00 	vstr	s19, [r1]
 8013918:	441d      	add	r5, r3
 801391a:	edc0 0a00 	vstr	s1, [r0]
 801391e:	441f      	add	r7, r3
 8013920:	ed80 6a01 	vstr	s12, [r0, #4]
 8013924:	4419      	add	r1, r3
 8013926:	4418      	add	r0, r3
 8013928:	f63f aeea 	bhi.w	8013700 <arm_radix8_butterfly_f32+0x334>
 801392c:	9a03      	ldr	r2, [sp, #12]
 801392e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013930:	440a      	add	r2, r1
 8013932:	9203      	str	r2, [sp, #12]
 8013934:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013936:	9a05      	ldr	r2, [sp, #20]
 8013938:	440a      	add	r2, r1
 801393a:	9205      	str	r2, [sp, #20]
 801393c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801393e:	9a04      	ldr	r2, [sp, #16]
 8013940:	440a      	add	r2, r1
 8013942:	9204      	str	r2, [sp, #16]
 8013944:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8013946:	9a06      	ldr	r2, [sp, #24]
 8013948:	440a      	add	r2, r1
 801394a:	9206      	str	r2, [sp, #24]
 801394c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801394e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013950:	440a      	add	r2, r1
 8013952:	9209      	str	r2, [sp, #36]	@ 0x24
 8013954:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8013956:	9a08      	ldr	r2, [sp, #32]
 8013958:	440a      	add	r2, r1
 801395a:	9208      	str	r2, [sp, #32]
 801395c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801395e:	9a07      	ldr	r2, [sp, #28]
 8013960:	440a      	add	r2, r1
 8013962:	9207      	str	r2, [sp, #28]
 8013964:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013968:	f108 0801 	add.w	r8, r8, #1
 801396c:	3208      	adds	r2, #8
 801396e:	4588      	cmp	r8, r1
 8013970:	920a      	str	r2, [sp, #40]	@ 0x28
 8013972:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013974:	f47f ae75 	bne.w	8013662 <arm_radix8_butterfly_f32+0x296>
 8013978:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 801397c:	9300      	str	r3, [sp, #0]
 801397e:	46c3      	mov	fp, r8
 8013980:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8013984:	e532      	b.n	80133ec <arm_radix8_butterfly_f32+0x20>
 8013986:	b01d      	add	sp, #116	@ 0x74
 8013988:	ecbd 8b10 	vpop	{d8-d15}
 801398c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013990 <std>:
 8013990:	2300      	movs	r3, #0
 8013992:	b510      	push	{r4, lr}
 8013994:	4604      	mov	r4, r0
 8013996:	e9c0 3300 	strd	r3, r3, [r0]
 801399a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801399e:	6083      	str	r3, [r0, #8]
 80139a0:	8181      	strh	r1, [r0, #12]
 80139a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80139a4:	81c2      	strh	r2, [r0, #14]
 80139a6:	6183      	str	r3, [r0, #24]
 80139a8:	4619      	mov	r1, r3
 80139aa:	2208      	movs	r2, #8
 80139ac:	305c      	adds	r0, #92	@ 0x5c
 80139ae:	f000 f942 	bl	8013c36 <memset>
 80139b2:	4b0d      	ldr	r3, [pc, #52]	@ (80139e8 <std+0x58>)
 80139b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80139b6:	4b0d      	ldr	r3, [pc, #52]	@ (80139ec <std+0x5c>)
 80139b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80139ba:	4b0d      	ldr	r3, [pc, #52]	@ (80139f0 <std+0x60>)
 80139bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80139be:	4b0d      	ldr	r3, [pc, #52]	@ (80139f4 <std+0x64>)
 80139c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80139c2:	4b0d      	ldr	r3, [pc, #52]	@ (80139f8 <std+0x68>)
 80139c4:	6224      	str	r4, [r4, #32]
 80139c6:	429c      	cmp	r4, r3
 80139c8:	d006      	beq.n	80139d8 <std+0x48>
 80139ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80139ce:	4294      	cmp	r4, r2
 80139d0:	d002      	beq.n	80139d8 <std+0x48>
 80139d2:	33d0      	adds	r3, #208	@ 0xd0
 80139d4:	429c      	cmp	r4, r3
 80139d6:	d105      	bne.n	80139e4 <std+0x54>
 80139d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80139dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139e0:	f000 ba20 	b.w	8013e24 <__retarget_lock_init_recursive>
 80139e4:	bd10      	pop	{r4, pc}
 80139e6:	bf00      	nop
 80139e8:	08013b7d 	.word	0x08013b7d
 80139ec:	08013b9f 	.word	0x08013b9f
 80139f0:	08013bd7 	.word	0x08013bd7
 80139f4:	08013bfb 	.word	0x08013bfb
 80139f8:	200136c8 	.word	0x200136c8

080139fc <stdio_exit_handler>:
 80139fc:	4a02      	ldr	r2, [pc, #8]	@ (8013a08 <stdio_exit_handler+0xc>)
 80139fe:	4903      	ldr	r1, [pc, #12]	@ (8013a0c <stdio_exit_handler+0x10>)
 8013a00:	4803      	ldr	r0, [pc, #12]	@ (8013a10 <stdio_exit_handler+0x14>)
 8013a02:	f000 b869 	b.w	8013ad8 <_fwalk_sglue>
 8013a06:	bf00      	nop
 8013a08:	20000678 	.word	0x20000678
 8013a0c:	08014759 	.word	0x08014759
 8013a10:	20000688 	.word	0x20000688

08013a14 <cleanup_stdio>:
 8013a14:	6841      	ldr	r1, [r0, #4]
 8013a16:	4b0c      	ldr	r3, [pc, #48]	@ (8013a48 <cleanup_stdio+0x34>)
 8013a18:	4299      	cmp	r1, r3
 8013a1a:	b510      	push	{r4, lr}
 8013a1c:	4604      	mov	r4, r0
 8013a1e:	d001      	beq.n	8013a24 <cleanup_stdio+0x10>
 8013a20:	f000 fe9a 	bl	8014758 <_fflush_r>
 8013a24:	68a1      	ldr	r1, [r4, #8]
 8013a26:	4b09      	ldr	r3, [pc, #36]	@ (8013a4c <cleanup_stdio+0x38>)
 8013a28:	4299      	cmp	r1, r3
 8013a2a:	d002      	beq.n	8013a32 <cleanup_stdio+0x1e>
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	f000 fe93 	bl	8014758 <_fflush_r>
 8013a32:	68e1      	ldr	r1, [r4, #12]
 8013a34:	4b06      	ldr	r3, [pc, #24]	@ (8013a50 <cleanup_stdio+0x3c>)
 8013a36:	4299      	cmp	r1, r3
 8013a38:	d004      	beq.n	8013a44 <cleanup_stdio+0x30>
 8013a3a:	4620      	mov	r0, r4
 8013a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a40:	f000 be8a 	b.w	8014758 <_fflush_r>
 8013a44:	bd10      	pop	{r4, pc}
 8013a46:	bf00      	nop
 8013a48:	200136c8 	.word	0x200136c8
 8013a4c:	20013730 	.word	0x20013730
 8013a50:	20013798 	.word	0x20013798

08013a54 <global_stdio_init.part.0>:
 8013a54:	b510      	push	{r4, lr}
 8013a56:	4b0b      	ldr	r3, [pc, #44]	@ (8013a84 <global_stdio_init.part.0+0x30>)
 8013a58:	4c0b      	ldr	r4, [pc, #44]	@ (8013a88 <global_stdio_init.part.0+0x34>)
 8013a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8013a8c <global_stdio_init.part.0+0x38>)
 8013a5c:	601a      	str	r2, [r3, #0]
 8013a5e:	4620      	mov	r0, r4
 8013a60:	2200      	movs	r2, #0
 8013a62:	2104      	movs	r1, #4
 8013a64:	f7ff ff94 	bl	8013990 <std>
 8013a68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013a6c:	2201      	movs	r2, #1
 8013a6e:	2109      	movs	r1, #9
 8013a70:	f7ff ff8e 	bl	8013990 <std>
 8013a74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013a78:	2202      	movs	r2, #2
 8013a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a7e:	2112      	movs	r1, #18
 8013a80:	f7ff bf86 	b.w	8013990 <std>
 8013a84:	20013800 	.word	0x20013800
 8013a88:	200136c8 	.word	0x200136c8
 8013a8c:	080139fd 	.word	0x080139fd

08013a90 <__sfp_lock_acquire>:
 8013a90:	4801      	ldr	r0, [pc, #4]	@ (8013a98 <__sfp_lock_acquire+0x8>)
 8013a92:	f000 b9c8 	b.w	8013e26 <__retarget_lock_acquire_recursive>
 8013a96:	bf00      	nop
 8013a98:	20013809 	.word	0x20013809

08013a9c <__sfp_lock_release>:
 8013a9c:	4801      	ldr	r0, [pc, #4]	@ (8013aa4 <__sfp_lock_release+0x8>)
 8013a9e:	f000 b9c3 	b.w	8013e28 <__retarget_lock_release_recursive>
 8013aa2:	bf00      	nop
 8013aa4:	20013809 	.word	0x20013809

08013aa8 <__sinit>:
 8013aa8:	b510      	push	{r4, lr}
 8013aaa:	4604      	mov	r4, r0
 8013aac:	f7ff fff0 	bl	8013a90 <__sfp_lock_acquire>
 8013ab0:	6a23      	ldr	r3, [r4, #32]
 8013ab2:	b11b      	cbz	r3, 8013abc <__sinit+0x14>
 8013ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ab8:	f7ff bff0 	b.w	8013a9c <__sfp_lock_release>
 8013abc:	4b04      	ldr	r3, [pc, #16]	@ (8013ad0 <__sinit+0x28>)
 8013abe:	6223      	str	r3, [r4, #32]
 8013ac0:	4b04      	ldr	r3, [pc, #16]	@ (8013ad4 <__sinit+0x2c>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d1f5      	bne.n	8013ab4 <__sinit+0xc>
 8013ac8:	f7ff ffc4 	bl	8013a54 <global_stdio_init.part.0>
 8013acc:	e7f2      	b.n	8013ab4 <__sinit+0xc>
 8013ace:	bf00      	nop
 8013ad0:	08013a15 	.word	0x08013a15
 8013ad4:	20013800 	.word	0x20013800

08013ad8 <_fwalk_sglue>:
 8013ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013adc:	4607      	mov	r7, r0
 8013ade:	4688      	mov	r8, r1
 8013ae0:	4614      	mov	r4, r2
 8013ae2:	2600      	movs	r6, #0
 8013ae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ae8:	f1b9 0901 	subs.w	r9, r9, #1
 8013aec:	d505      	bpl.n	8013afa <_fwalk_sglue+0x22>
 8013aee:	6824      	ldr	r4, [r4, #0]
 8013af0:	2c00      	cmp	r4, #0
 8013af2:	d1f7      	bne.n	8013ae4 <_fwalk_sglue+0xc>
 8013af4:	4630      	mov	r0, r6
 8013af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013afa:	89ab      	ldrh	r3, [r5, #12]
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	d907      	bls.n	8013b10 <_fwalk_sglue+0x38>
 8013b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b04:	3301      	adds	r3, #1
 8013b06:	d003      	beq.n	8013b10 <_fwalk_sglue+0x38>
 8013b08:	4629      	mov	r1, r5
 8013b0a:	4638      	mov	r0, r7
 8013b0c:	47c0      	blx	r8
 8013b0e:	4306      	orrs	r6, r0
 8013b10:	3568      	adds	r5, #104	@ 0x68
 8013b12:	e7e9      	b.n	8013ae8 <_fwalk_sglue+0x10>

08013b14 <sniprintf>:
 8013b14:	b40c      	push	{r2, r3}
 8013b16:	b530      	push	{r4, r5, lr}
 8013b18:	4b17      	ldr	r3, [pc, #92]	@ (8013b78 <sniprintf+0x64>)
 8013b1a:	1e0c      	subs	r4, r1, #0
 8013b1c:	681d      	ldr	r5, [r3, #0]
 8013b1e:	b09d      	sub	sp, #116	@ 0x74
 8013b20:	da08      	bge.n	8013b34 <sniprintf+0x20>
 8013b22:	238b      	movs	r3, #139	@ 0x8b
 8013b24:	602b      	str	r3, [r5, #0]
 8013b26:	f04f 30ff 	mov.w	r0, #4294967295
 8013b2a:	b01d      	add	sp, #116	@ 0x74
 8013b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b30:	b002      	add	sp, #8
 8013b32:	4770      	bx	lr
 8013b34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013b38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013b3c:	bf14      	ite	ne
 8013b3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013b42:	4623      	moveq	r3, r4
 8013b44:	9304      	str	r3, [sp, #16]
 8013b46:	9307      	str	r3, [sp, #28]
 8013b48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013b4c:	9002      	str	r0, [sp, #8]
 8013b4e:	9006      	str	r0, [sp, #24]
 8013b50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013b56:	ab21      	add	r3, sp, #132	@ 0x84
 8013b58:	a902      	add	r1, sp, #8
 8013b5a:	4628      	mov	r0, r5
 8013b5c:	9301      	str	r3, [sp, #4]
 8013b5e:	f000 faed 	bl	801413c <_svfiprintf_r>
 8013b62:	1c43      	adds	r3, r0, #1
 8013b64:	bfbc      	itt	lt
 8013b66:	238b      	movlt	r3, #139	@ 0x8b
 8013b68:	602b      	strlt	r3, [r5, #0]
 8013b6a:	2c00      	cmp	r4, #0
 8013b6c:	d0dd      	beq.n	8013b2a <sniprintf+0x16>
 8013b6e:	9b02      	ldr	r3, [sp, #8]
 8013b70:	2200      	movs	r2, #0
 8013b72:	701a      	strb	r2, [r3, #0]
 8013b74:	e7d9      	b.n	8013b2a <sniprintf+0x16>
 8013b76:	bf00      	nop
 8013b78:	20000684 	.word	0x20000684

08013b7c <__sread>:
 8013b7c:	b510      	push	{r4, lr}
 8013b7e:	460c      	mov	r4, r1
 8013b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b84:	f000 f900 	bl	8013d88 <_read_r>
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	bfab      	itete	ge
 8013b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8013b90:	181b      	addge	r3, r3, r0
 8013b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013b96:	bfac      	ite	ge
 8013b98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013b9a:	81a3      	strhlt	r3, [r4, #12]
 8013b9c:	bd10      	pop	{r4, pc}

08013b9e <__swrite>:
 8013b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba2:	461f      	mov	r7, r3
 8013ba4:	898b      	ldrh	r3, [r1, #12]
 8013ba6:	05db      	lsls	r3, r3, #23
 8013ba8:	4605      	mov	r5, r0
 8013baa:	460c      	mov	r4, r1
 8013bac:	4616      	mov	r6, r2
 8013bae:	d505      	bpl.n	8013bbc <__swrite+0x1e>
 8013bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bb4:	2302      	movs	r3, #2
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	f000 f8d4 	bl	8013d64 <_lseek_r>
 8013bbc:	89a3      	ldrh	r3, [r4, #12]
 8013bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013bc6:	81a3      	strh	r3, [r4, #12]
 8013bc8:	4632      	mov	r2, r6
 8013bca:	463b      	mov	r3, r7
 8013bcc:	4628      	mov	r0, r5
 8013bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bd2:	f000 b8eb 	b.w	8013dac <_write_r>

08013bd6 <__sseek>:
 8013bd6:	b510      	push	{r4, lr}
 8013bd8:	460c      	mov	r4, r1
 8013bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bde:	f000 f8c1 	bl	8013d64 <_lseek_r>
 8013be2:	1c43      	adds	r3, r0, #1
 8013be4:	89a3      	ldrh	r3, [r4, #12]
 8013be6:	bf15      	itete	ne
 8013be8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013bf2:	81a3      	strheq	r3, [r4, #12]
 8013bf4:	bf18      	it	ne
 8013bf6:	81a3      	strhne	r3, [r4, #12]
 8013bf8:	bd10      	pop	{r4, pc}

08013bfa <__sclose>:
 8013bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bfe:	f000 b8a1 	b.w	8013d44 <_close_r>

08013c02 <memmove>:
 8013c02:	4288      	cmp	r0, r1
 8013c04:	b510      	push	{r4, lr}
 8013c06:	eb01 0402 	add.w	r4, r1, r2
 8013c0a:	d902      	bls.n	8013c12 <memmove+0x10>
 8013c0c:	4284      	cmp	r4, r0
 8013c0e:	4623      	mov	r3, r4
 8013c10:	d807      	bhi.n	8013c22 <memmove+0x20>
 8013c12:	1e43      	subs	r3, r0, #1
 8013c14:	42a1      	cmp	r1, r4
 8013c16:	d008      	beq.n	8013c2a <memmove+0x28>
 8013c18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013c20:	e7f8      	b.n	8013c14 <memmove+0x12>
 8013c22:	4402      	add	r2, r0
 8013c24:	4601      	mov	r1, r0
 8013c26:	428a      	cmp	r2, r1
 8013c28:	d100      	bne.n	8013c2c <memmove+0x2a>
 8013c2a:	bd10      	pop	{r4, pc}
 8013c2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013c30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013c34:	e7f7      	b.n	8013c26 <memmove+0x24>

08013c36 <memset>:
 8013c36:	4402      	add	r2, r0
 8013c38:	4603      	mov	r3, r0
 8013c3a:	4293      	cmp	r3, r2
 8013c3c:	d100      	bne.n	8013c40 <memset+0xa>
 8013c3e:	4770      	bx	lr
 8013c40:	f803 1b01 	strb.w	r1, [r3], #1
 8013c44:	e7f9      	b.n	8013c3a <memset+0x4>

08013c46 <strcat>:
 8013c46:	b510      	push	{r4, lr}
 8013c48:	4602      	mov	r2, r0
 8013c4a:	7814      	ldrb	r4, [r2, #0]
 8013c4c:	4613      	mov	r3, r2
 8013c4e:	3201      	adds	r2, #1
 8013c50:	2c00      	cmp	r4, #0
 8013c52:	d1fa      	bne.n	8013c4a <strcat+0x4>
 8013c54:	3b01      	subs	r3, #1
 8013c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013c5e:	2a00      	cmp	r2, #0
 8013c60:	d1f9      	bne.n	8013c56 <strcat+0x10>
 8013c62:	bd10      	pop	{r4, pc}

08013c64 <strncpy>:
 8013c64:	b510      	push	{r4, lr}
 8013c66:	3901      	subs	r1, #1
 8013c68:	4603      	mov	r3, r0
 8013c6a:	b132      	cbz	r2, 8013c7a <strncpy+0x16>
 8013c6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013c70:	f803 4b01 	strb.w	r4, [r3], #1
 8013c74:	3a01      	subs	r2, #1
 8013c76:	2c00      	cmp	r4, #0
 8013c78:	d1f7      	bne.n	8013c6a <strncpy+0x6>
 8013c7a:	441a      	add	r2, r3
 8013c7c:	2100      	movs	r1, #0
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	d100      	bne.n	8013c84 <strncpy+0x20>
 8013c82:	bd10      	pop	{r4, pc}
 8013c84:	f803 1b01 	strb.w	r1, [r3], #1
 8013c88:	e7f9      	b.n	8013c7e <strncpy+0x1a>
	...

08013c8c <strtok>:
 8013c8c:	4b16      	ldr	r3, [pc, #88]	@ (8013ce8 <strtok+0x5c>)
 8013c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c92:	681f      	ldr	r7, [r3, #0]
 8013c94:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8013c96:	4605      	mov	r5, r0
 8013c98:	460e      	mov	r6, r1
 8013c9a:	b9ec      	cbnz	r4, 8013cd8 <strtok+0x4c>
 8013c9c:	2050      	movs	r0, #80	@ 0x50
 8013c9e:	f000 f93b 	bl	8013f18 <malloc>
 8013ca2:	4602      	mov	r2, r0
 8013ca4:	6478      	str	r0, [r7, #68]	@ 0x44
 8013ca6:	b920      	cbnz	r0, 8013cb2 <strtok+0x26>
 8013ca8:	4b10      	ldr	r3, [pc, #64]	@ (8013cec <strtok+0x60>)
 8013caa:	4811      	ldr	r0, [pc, #68]	@ (8013cf0 <strtok+0x64>)
 8013cac:	215b      	movs	r1, #91	@ 0x5b
 8013cae:	f000 f8cb 	bl	8013e48 <__assert_func>
 8013cb2:	e9c0 4400 	strd	r4, r4, [r0]
 8013cb6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8013cba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013cbe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8013cc2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8013cc6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8013cca:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8013cce:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8013cd2:	6184      	str	r4, [r0, #24]
 8013cd4:	7704      	strb	r4, [r0, #28]
 8013cd6:	6244      	str	r4, [r0, #36]	@ 0x24
 8013cd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013cda:	4631      	mov	r1, r6
 8013cdc:	4628      	mov	r0, r5
 8013cde:	2301      	movs	r3, #1
 8013ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ce4:	f000 b806 	b.w	8013cf4 <__strtok_r>
 8013ce8:	20000684 	.word	0x20000684
 8013cec:	0802cc40 	.word	0x0802cc40
 8013cf0:	0802cc57 	.word	0x0802cc57

08013cf4 <__strtok_r>:
 8013cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	b908      	cbnz	r0, 8013cfe <__strtok_r+0xa>
 8013cfa:	6814      	ldr	r4, [r2, #0]
 8013cfc:	b144      	cbz	r4, 8013d10 <__strtok_r+0x1c>
 8013cfe:	4620      	mov	r0, r4
 8013d00:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013d04:	460f      	mov	r7, r1
 8013d06:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013d0a:	b91e      	cbnz	r6, 8013d14 <__strtok_r+0x20>
 8013d0c:	b965      	cbnz	r5, 8013d28 <__strtok_r+0x34>
 8013d0e:	6015      	str	r5, [r2, #0]
 8013d10:	2000      	movs	r0, #0
 8013d12:	e005      	b.n	8013d20 <__strtok_r+0x2c>
 8013d14:	42b5      	cmp	r5, r6
 8013d16:	d1f6      	bne.n	8013d06 <__strtok_r+0x12>
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d1f0      	bne.n	8013cfe <__strtok_r+0xa>
 8013d1c:	6014      	str	r4, [r2, #0]
 8013d1e:	7003      	strb	r3, [r0, #0]
 8013d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d22:	461c      	mov	r4, r3
 8013d24:	e00c      	b.n	8013d40 <__strtok_r+0x4c>
 8013d26:	b915      	cbnz	r5, 8013d2e <__strtok_r+0x3a>
 8013d28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013d2c:	460e      	mov	r6, r1
 8013d2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013d32:	42ab      	cmp	r3, r5
 8013d34:	d1f7      	bne.n	8013d26 <__strtok_r+0x32>
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d0f3      	beq.n	8013d22 <__strtok_r+0x2e>
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8013d40:	6014      	str	r4, [r2, #0]
 8013d42:	e7ed      	b.n	8013d20 <__strtok_r+0x2c>

08013d44 <_close_r>:
 8013d44:	b538      	push	{r3, r4, r5, lr}
 8013d46:	4d06      	ldr	r5, [pc, #24]	@ (8013d60 <_close_r+0x1c>)
 8013d48:	2300      	movs	r3, #0
 8013d4a:	4604      	mov	r4, r0
 8013d4c:	4608      	mov	r0, r1
 8013d4e:	602b      	str	r3, [r5, #0]
 8013d50:	f7ee fc28 	bl	80025a4 <_close>
 8013d54:	1c43      	adds	r3, r0, #1
 8013d56:	d102      	bne.n	8013d5e <_close_r+0x1a>
 8013d58:	682b      	ldr	r3, [r5, #0]
 8013d5a:	b103      	cbz	r3, 8013d5e <_close_r+0x1a>
 8013d5c:	6023      	str	r3, [r4, #0]
 8013d5e:	bd38      	pop	{r3, r4, r5, pc}
 8013d60:	20013804 	.word	0x20013804

08013d64 <_lseek_r>:
 8013d64:	b538      	push	{r3, r4, r5, lr}
 8013d66:	4d07      	ldr	r5, [pc, #28]	@ (8013d84 <_lseek_r+0x20>)
 8013d68:	4604      	mov	r4, r0
 8013d6a:	4608      	mov	r0, r1
 8013d6c:	4611      	mov	r1, r2
 8013d6e:	2200      	movs	r2, #0
 8013d70:	602a      	str	r2, [r5, #0]
 8013d72:	461a      	mov	r2, r3
 8013d74:	f7ee fc3d 	bl	80025f2 <_lseek>
 8013d78:	1c43      	adds	r3, r0, #1
 8013d7a:	d102      	bne.n	8013d82 <_lseek_r+0x1e>
 8013d7c:	682b      	ldr	r3, [r5, #0]
 8013d7e:	b103      	cbz	r3, 8013d82 <_lseek_r+0x1e>
 8013d80:	6023      	str	r3, [r4, #0]
 8013d82:	bd38      	pop	{r3, r4, r5, pc}
 8013d84:	20013804 	.word	0x20013804

08013d88 <_read_r>:
 8013d88:	b538      	push	{r3, r4, r5, lr}
 8013d8a:	4d07      	ldr	r5, [pc, #28]	@ (8013da8 <_read_r+0x20>)
 8013d8c:	4604      	mov	r4, r0
 8013d8e:	4608      	mov	r0, r1
 8013d90:	4611      	mov	r1, r2
 8013d92:	2200      	movs	r2, #0
 8013d94:	602a      	str	r2, [r5, #0]
 8013d96:	461a      	mov	r2, r3
 8013d98:	f7ee fbcb 	bl	8002532 <_read>
 8013d9c:	1c43      	adds	r3, r0, #1
 8013d9e:	d102      	bne.n	8013da6 <_read_r+0x1e>
 8013da0:	682b      	ldr	r3, [r5, #0]
 8013da2:	b103      	cbz	r3, 8013da6 <_read_r+0x1e>
 8013da4:	6023      	str	r3, [r4, #0]
 8013da6:	bd38      	pop	{r3, r4, r5, pc}
 8013da8:	20013804 	.word	0x20013804

08013dac <_write_r>:
 8013dac:	b538      	push	{r3, r4, r5, lr}
 8013dae:	4d07      	ldr	r5, [pc, #28]	@ (8013dcc <_write_r+0x20>)
 8013db0:	4604      	mov	r4, r0
 8013db2:	4608      	mov	r0, r1
 8013db4:	4611      	mov	r1, r2
 8013db6:	2200      	movs	r2, #0
 8013db8:	602a      	str	r2, [r5, #0]
 8013dba:	461a      	mov	r2, r3
 8013dbc:	f7ee fbd6 	bl	800256c <_write>
 8013dc0:	1c43      	adds	r3, r0, #1
 8013dc2:	d102      	bne.n	8013dca <_write_r+0x1e>
 8013dc4:	682b      	ldr	r3, [r5, #0]
 8013dc6:	b103      	cbz	r3, 8013dca <_write_r+0x1e>
 8013dc8:	6023      	str	r3, [r4, #0]
 8013dca:	bd38      	pop	{r3, r4, r5, pc}
 8013dcc:	20013804 	.word	0x20013804

08013dd0 <__errno>:
 8013dd0:	4b01      	ldr	r3, [pc, #4]	@ (8013dd8 <__errno+0x8>)
 8013dd2:	6818      	ldr	r0, [r3, #0]
 8013dd4:	4770      	bx	lr
 8013dd6:	bf00      	nop
 8013dd8:	20000684 	.word	0x20000684

08013ddc <__libc_init_array>:
 8013ddc:	b570      	push	{r4, r5, r6, lr}
 8013dde:	4d0d      	ldr	r5, [pc, #52]	@ (8013e14 <__libc_init_array+0x38>)
 8013de0:	4c0d      	ldr	r4, [pc, #52]	@ (8013e18 <__libc_init_array+0x3c>)
 8013de2:	1b64      	subs	r4, r4, r5
 8013de4:	10a4      	asrs	r4, r4, #2
 8013de6:	2600      	movs	r6, #0
 8013de8:	42a6      	cmp	r6, r4
 8013dea:	d109      	bne.n	8013e00 <__libc_init_array+0x24>
 8013dec:	4d0b      	ldr	r5, [pc, #44]	@ (8013e1c <__libc_init_array+0x40>)
 8013dee:	4c0c      	ldr	r4, [pc, #48]	@ (8013e20 <__libc_init_array+0x44>)
 8013df0:	f000 fff8 	bl	8014de4 <_init>
 8013df4:	1b64      	subs	r4, r4, r5
 8013df6:	10a4      	asrs	r4, r4, #2
 8013df8:	2600      	movs	r6, #0
 8013dfa:	42a6      	cmp	r6, r4
 8013dfc:	d105      	bne.n	8013e0a <__libc_init_array+0x2e>
 8013dfe:	bd70      	pop	{r4, r5, r6, pc}
 8013e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e04:	4798      	blx	r3
 8013e06:	3601      	adds	r6, #1
 8013e08:	e7ee      	b.n	8013de8 <__libc_init_array+0xc>
 8013e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e0e:	4798      	blx	r3
 8013e10:	3601      	adds	r6, #1
 8013e12:	e7f2      	b.n	8013dfa <__libc_init_array+0x1e>
 8013e14:	0802cd28 	.word	0x0802cd28
 8013e18:	0802cd28 	.word	0x0802cd28
 8013e1c:	0802cd28 	.word	0x0802cd28
 8013e20:	0802cd2c 	.word	0x0802cd2c

08013e24 <__retarget_lock_init_recursive>:
 8013e24:	4770      	bx	lr

08013e26 <__retarget_lock_acquire_recursive>:
 8013e26:	4770      	bx	lr

08013e28 <__retarget_lock_release_recursive>:
 8013e28:	4770      	bx	lr

08013e2a <memcpy>:
 8013e2a:	440a      	add	r2, r1
 8013e2c:	4291      	cmp	r1, r2
 8013e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013e32:	d100      	bne.n	8013e36 <memcpy+0xc>
 8013e34:	4770      	bx	lr
 8013e36:	b510      	push	{r4, lr}
 8013e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e40:	4291      	cmp	r1, r2
 8013e42:	d1f9      	bne.n	8013e38 <memcpy+0xe>
 8013e44:	bd10      	pop	{r4, pc}
	...

08013e48 <__assert_func>:
 8013e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e4a:	4614      	mov	r4, r2
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	4b09      	ldr	r3, [pc, #36]	@ (8013e74 <__assert_func+0x2c>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	4605      	mov	r5, r0
 8013e54:	68d8      	ldr	r0, [r3, #12]
 8013e56:	b954      	cbnz	r4, 8013e6e <__assert_func+0x26>
 8013e58:	4b07      	ldr	r3, [pc, #28]	@ (8013e78 <__assert_func+0x30>)
 8013e5a:	461c      	mov	r4, r3
 8013e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e60:	9100      	str	r1, [sp, #0]
 8013e62:	462b      	mov	r3, r5
 8013e64:	4905      	ldr	r1, [pc, #20]	@ (8013e7c <__assert_func+0x34>)
 8013e66:	f000 fc9f 	bl	80147a8 <fiprintf>
 8013e6a:	f000 fcbf 	bl	80147ec <abort>
 8013e6e:	4b04      	ldr	r3, [pc, #16]	@ (8013e80 <__assert_func+0x38>)
 8013e70:	e7f4      	b.n	8013e5c <__assert_func+0x14>
 8013e72:	bf00      	nop
 8013e74:	20000684 	.word	0x20000684
 8013e78:	0802ccec 	.word	0x0802ccec
 8013e7c:	0802ccbe 	.word	0x0802ccbe
 8013e80:	0802ccb1 	.word	0x0802ccb1

08013e84 <_free_r>:
 8013e84:	b538      	push	{r3, r4, r5, lr}
 8013e86:	4605      	mov	r5, r0
 8013e88:	2900      	cmp	r1, #0
 8013e8a:	d041      	beq.n	8013f10 <_free_r+0x8c>
 8013e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e90:	1f0c      	subs	r4, r1, #4
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	bfb8      	it	lt
 8013e96:	18e4      	addlt	r4, r4, r3
 8013e98:	f000 f8e8 	bl	801406c <__malloc_lock>
 8013e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8013f14 <_free_r+0x90>)
 8013e9e:	6813      	ldr	r3, [r2, #0]
 8013ea0:	b933      	cbnz	r3, 8013eb0 <_free_r+0x2c>
 8013ea2:	6063      	str	r3, [r4, #4]
 8013ea4:	6014      	str	r4, [r2, #0]
 8013ea6:	4628      	mov	r0, r5
 8013ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013eac:	f000 b8e4 	b.w	8014078 <__malloc_unlock>
 8013eb0:	42a3      	cmp	r3, r4
 8013eb2:	d908      	bls.n	8013ec6 <_free_r+0x42>
 8013eb4:	6820      	ldr	r0, [r4, #0]
 8013eb6:	1821      	adds	r1, r4, r0
 8013eb8:	428b      	cmp	r3, r1
 8013eba:	bf01      	itttt	eq
 8013ebc:	6819      	ldreq	r1, [r3, #0]
 8013ebe:	685b      	ldreq	r3, [r3, #4]
 8013ec0:	1809      	addeq	r1, r1, r0
 8013ec2:	6021      	streq	r1, [r4, #0]
 8013ec4:	e7ed      	b.n	8013ea2 <_free_r+0x1e>
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	b10b      	cbz	r3, 8013ed0 <_free_r+0x4c>
 8013ecc:	42a3      	cmp	r3, r4
 8013ece:	d9fa      	bls.n	8013ec6 <_free_r+0x42>
 8013ed0:	6811      	ldr	r1, [r2, #0]
 8013ed2:	1850      	adds	r0, r2, r1
 8013ed4:	42a0      	cmp	r0, r4
 8013ed6:	d10b      	bne.n	8013ef0 <_free_r+0x6c>
 8013ed8:	6820      	ldr	r0, [r4, #0]
 8013eda:	4401      	add	r1, r0
 8013edc:	1850      	adds	r0, r2, r1
 8013ede:	4283      	cmp	r3, r0
 8013ee0:	6011      	str	r1, [r2, #0]
 8013ee2:	d1e0      	bne.n	8013ea6 <_free_r+0x22>
 8013ee4:	6818      	ldr	r0, [r3, #0]
 8013ee6:	685b      	ldr	r3, [r3, #4]
 8013ee8:	6053      	str	r3, [r2, #4]
 8013eea:	4408      	add	r0, r1
 8013eec:	6010      	str	r0, [r2, #0]
 8013eee:	e7da      	b.n	8013ea6 <_free_r+0x22>
 8013ef0:	d902      	bls.n	8013ef8 <_free_r+0x74>
 8013ef2:	230c      	movs	r3, #12
 8013ef4:	602b      	str	r3, [r5, #0]
 8013ef6:	e7d6      	b.n	8013ea6 <_free_r+0x22>
 8013ef8:	6820      	ldr	r0, [r4, #0]
 8013efa:	1821      	adds	r1, r4, r0
 8013efc:	428b      	cmp	r3, r1
 8013efe:	bf04      	itt	eq
 8013f00:	6819      	ldreq	r1, [r3, #0]
 8013f02:	685b      	ldreq	r3, [r3, #4]
 8013f04:	6063      	str	r3, [r4, #4]
 8013f06:	bf04      	itt	eq
 8013f08:	1809      	addeq	r1, r1, r0
 8013f0a:	6021      	streq	r1, [r4, #0]
 8013f0c:	6054      	str	r4, [r2, #4]
 8013f0e:	e7ca      	b.n	8013ea6 <_free_r+0x22>
 8013f10:	bd38      	pop	{r3, r4, r5, pc}
 8013f12:	bf00      	nop
 8013f14:	20013810 	.word	0x20013810

08013f18 <malloc>:
 8013f18:	4b02      	ldr	r3, [pc, #8]	@ (8013f24 <malloc+0xc>)
 8013f1a:	4601      	mov	r1, r0
 8013f1c:	6818      	ldr	r0, [r3, #0]
 8013f1e:	f000 b825 	b.w	8013f6c <_malloc_r>
 8013f22:	bf00      	nop
 8013f24:	20000684 	.word	0x20000684

08013f28 <sbrk_aligned>:
 8013f28:	b570      	push	{r4, r5, r6, lr}
 8013f2a:	4e0f      	ldr	r6, [pc, #60]	@ (8013f68 <sbrk_aligned+0x40>)
 8013f2c:	460c      	mov	r4, r1
 8013f2e:	6831      	ldr	r1, [r6, #0]
 8013f30:	4605      	mov	r5, r0
 8013f32:	b911      	cbnz	r1, 8013f3a <sbrk_aligned+0x12>
 8013f34:	f000 fc4a 	bl	80147cc <_sbrk_r>
 8013f38:	6030      	str	r0, [r6, #0]
 8013f3a:	4621      	mov	r1, r4
 8013f3c:	4628      	mov	r0, r5
 8013f3e:	f000 fc45 	bl	80147cc <_sbrk_r>
 8013f42:	1c43      	adds	r3, r0, #1
 8013f44:	d103      	bne.n	8013f4e <sbrk_aligned+0x26>
 8013f46:	f04f 34ff 	mov.w	r4, #4294967295
 8013f4a:	4620      	mov	r0, r4
 8013f4c:	bd70      	pop	{r4, r5, r6, pc}
 8013f4e:	1cc4      	adds	r4, r0, #3
 8013f50:	f024 0403 	bic.w	r4, r4, #3
 8013f54:	42a0      	cmp	r0, r4
 8013f56:	d0f8      	beq.n	8013f4a <sbrk_aligned+0x22>
 8013f58:	1a21      	subs	r1, r4, r0
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	f000 fc36 	bl	80147cc <_sbrk_r>
 8013f60:	3001      	adds	r0, #1
 8013f62:	d1f2      	bne.n	8013f4a <sbrk_aligned+0x22>
 8013f64:	e7ef      	b.n	8013f46 <sbrk_aligned+0x1e>
 8013f66:	bf00      	nop
 8013f68:	2001380c 	.word	0x2001380c

08013f6c <_malloc_r>:
 8013f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f70:	1ccd      	adds	r5, r1, #3
 8013f72:	f025 0503 	bic.w	r5, r5, #3
 8013f76:	3508      	adds	r5, #8
 8013f78:	2d0c      	cmp	r5, #12
 8013f7a:	bf38      	it	cc
 8013f7c:	250c      	movcc	r5, #12
 8013f7e:	2d00      	cmp	r5, #0
 8013f80:	4606      	mov	r6, r0
 8013f82:	db01      	blt.n	8013f88 <_malloc_r+0x1c>
 8013f84:	42a9      	cmp	r1, r5
 8013f86:	d904      	bls.n	8013f92 <_malloc_r+0x26>
 8013f88:	230c      	movs	r3, #12
 8013f8a:	6033      	str	r3, [r6, #0]
 8013f8c:	2000      	movs	r0, #0
 8013f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014068 <_malloc_r+0xfc>
 8013f96:	f000 f869 	bl	801406c <__malloc_lock>
 8013f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8013f9e:	461c      	mov	r4, r3
 8013fa0:	bb44      	cbnz	r4, 8013ff4 <_malloc_r+0x88>
 8013fa2:	4629      	mov	r1, r5
 8013fa4:	4630      	mov	r0, r6
 8013fa6:	f7ff ffbf 	bl	8013f28 <sbrk_aligned>
 8013faa:	1c43      	adds	r3, r0, #1
 8013fac:	4604      	mov	r4, r0
 8013fae:	d158      	bne.n	8014062 <_malloc_r+0xf6>
 8013fb0:	f8d8 4000 	ldr.w	r4, [r8]
 8013fb4:	4627      	mov	r7, r4
 8013fb6:	2f00      	cmp	r7, #0
 8013fb8:	d143      	bne.n	8014042 <_malloc_r+0xd6>
 8013fba:	2c00      	cmp	r4, #0
 8013fbc:	d04b      	beq.n	8014056 <_malloc_r+0xea>
 8013fbe:	6823      	ldr	r3, [r4, #0]
 8013fc0:	4639      	mov	r1, r7
 8013fc2:	4630      	mov	r0, r6
 8013fc4:	eb04 0903 	add.w	r9, r4, r3
 8013fc8:	f000 fc00 	bl	80147cc <_sbrk_r>
 8013fcc:	4581      	cmp	r9, r0
 8013fce:	d142      	bne.n	8014056 <_malloc_r+0xea>
 8013fd0:	6821      	ldr	r1, [r4, #0]
 8013fd2:	1a6d      	subs	r5, r5, r1
 8013fd4:	4629      	mov	r1, r5
 8013fd6:	4630      	mov	r0, r6
 8013fd8:	f7ff ffa6 	bl	8013f28 <sbrk_aligned>
 8013fdc:	3001      	adds	r0, #1
 8013fde:	d03a      	beq.n	8014056 <_malloc_r+0xea>
 8013fe0:	6823      	ldr	r3, [r4, #0]
 8013fe2:	442b      	add	r3, r5
 8013fe4:	6023      	str	r3, [r4, #0]
 8013fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8013fea:	685a      	ldr	r2, [r3, #4]
 8013fec:	bb62      	cbnz	r2, 8014048 <_malloc_r+0xdc>
 8013fee:	f8c8 7000 	str.w	r7, [r8]
 8013ff2:	e00f      	b.n	8014014 <_malloc_r+0xa8>
 8013ff4:	6822      	ldr	r2, [r4, #0]
 8013ff6:	1b52      	subs	r2, r2, r5
 8013ff8:	d420      	bmi.n	801403c <_malloc_r+0xd0>
 8013ffa:	2a0b      	cmp	r2, #11
 8013ffc:	d917      	bls.n	801402e <_malloc_r+0xc2>
 8013ffe:	1961      	adds	r1, r4, r5
 8014000:	42a3      	cmp	r3, r4
 8014002:	6025      	str	r5, [r4, #0]
 8014004:	bf18      	it	ne
 8014006:	6059      	strne	r1, [r3, #4]
 8014008:	6863      	ldr	r3, [r4, #4]
 801400a:	bf08      	it	eq
 801400c:	f8c8 1000 	streq.w	r1, [r8]
 8014010:	5162      	str	r2, [r4, r5]
 8014012:	604b      	str	r3, [r1, #4]
 8014014:	4630      	mov	r0, r6
 8014016:	f000 f82f 	bl	8014078 <__malloc_unlock>
 801401a:	f104 000b 	add.w	r0, r4, #11
 801401e:	1d23      	adds	r3, r4, #4
 8014020:	f020 0007 	bic.w	r0, r0, #7
 8014024:	1ac2      	subs	r2, r0, r3
 8014026:	bf1c      	itt	ne
 8014028:	1a1b      	subne	r3, r3, r0
 801402a:	50a3      	strne	r3, [r4, r2]
 801402c:	e7af      	b.n	8013f8e <_malloc_r+0x22>
 801402e:	6862      	ldr	r2, [r4, #4]
 8014030:	42a3      	cmp	r3, r4
 8014032:	bf0c      	ite	eq
 8014034:	f8c8 2000 	streq.w	r2, [r8]
 8014038:	605a      	strne	r2, [r3, #4]
 801403a:	e7eb      	b.n	8014014 <_malloc_r+0xa8>
 801403c:	4623      	mov	r3, r4
 801403e:	6864      	ldr	r4, [r4, #4]
 8014040:	e7ae      	b.n	8013fa0 <_malloc_r+0x34>
 8014042:	463c      	mov	r4, r7
 8014044:	687f      	ldr	r7, [r7, #4]
 8014046:	e7b6      	b.n	8013fb6 <_malloc_r+0x4a>
 8014048:	461a      	mov	r2, r3
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	42a3      	cmp	r3, r4
 801404e:	d1fb      	bne.n	8014048 <_malloc_r+0xdc>
 8014050:	2300      	movs	r3, #0
 8014052:	6053      	str	r3, [r2, #4]
 8014054:	e7de      	b.n	8014014 <_malloc_r+0xa8>
 8014056:	230c      	movs	r3, #12
 8014058:	6033      	str	r3, [r6, #0]
 801405a:	4630      	mov	r0, r6
 801405c:	f000 f80c 	bl	8014078 <__malloc_unlock>
 8014060:	e794      	b.n	8013f8c <_malloc_r+0x20>
 8014062:	6005      	str	r5, [r0, #0]
 8014064:	e7d6      	b.n	8014014 <_malloc_r+0xa8>
 8014066:	bf00      	nop
 8014068:	20013810 	.word	0x20013810

0801406c <__malloc_lock>:
 801406c:	4801      	ldr	r0, [pc, #4]	@ (8014074 <__malloc_lock+0x8>)
 801406e:	f7ff beda 	b.w	8013e26 <__retarget_lock_acquire_recursive>
 8014072:	bf00      	nop
 8014074:	20013808 	.word	0x20013808

08014078 <__malloc_unlock>:
 8014078:	4801      	ldr	r0, [pc, #4]	@ (8014080 <__malloc_unlock+0x8>)
 801407a:	f7ff bed5 	b.w	8013e28 <__retarget_lock_release_recursive>
 801407e:	bf00      	nop
 8014080:	20013808 	.word	0x20013808

08014084 <__ssputs_r>:
 8014084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014088:	688e      	ldr	r6, [r1, #8]
 801408a:	461f      	mov	r7, r3
 801408c:	42be      	cmp	r6, r7
 801408e:	680b      	ldr	r3, [r1, #0]
 8014090:	4682      	mov	sl, r0
 8014092:	460c      	mov	r4, r1
 8014094:	4690      	mov	r8, r2
 8014096:	d82d      	bhi.n	80140f4 <__ssputs_r+0x70>
 8014098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801409c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80140a0:	d026      	beq.n	80140f0 <__ssputs_r+0x6c>
 80140a2:	6965      	ldr	r5, [r4, #20]
 80140a4:	6909      	ldr	r1, [r1, #16]
 80140a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80140aa:	eba3 0901 	sub.w	r9, r3, r1
 80140ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80140b2:	1c7b      	adds	r3, r7, #1
 80140b4:	444b      	add	r3, r9
 80140b6:	106d      	asrs	r5, r5, #1
 80140b8:	429d      	cmp	r5, r3
 80140ba:	bf38      	it	cc
 80140bc:	461d      	movcc	r5, r3
 80140be:	0553      	lsls	r3, r2, #21
 80140c0:	d527      	bpl.n	8014112 <__ssputs_r+0x8e>
 80140c2:	4629      	mov	r1, r5
 80140c4:	f7ff ff52 	bl	8013f6c <_malloc_r>
 80140c8:	4606      	mov	r6, r0
 80140ca:	b360      	cbz	r0, 8014126 <__ssputs_r+0xa2>
 80140cc:	6921      	ldr	r1, [r4, #16]
 80140ce:	464a      	mov	r2, r9
 80140d0:	f7ff feab 	bl	8013e2a <memcpy>
 80140d4:	89a3      	ldrh	r3, [r4, #12]
 80140d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80140da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80140de:	81a3      	strh	r3, [r4, #12]
 80140e0:	6126      	str	r6, [r4, #16]
 80140e2:	6165      	str	r5, [r4, #20]
 80140e4:	444e      	add	r6, r9
 80140e6:	eba5 0509 	sub.w	r5, r5, r9
 80140ea:	6026      	str	r6, [r4, #0]
 80140ec:	60a5      	str	r5, [r4, #8]
 80140ee:	463e      	mov	r6, r7
 80140f0:	42be      	cmp	r6, r7
 80140f2:	d900      	bls.n	80140f6 <__ssputs_r+0x72>
 80140f4:	463e      	mov	r6, r7
 80140f6:	6820      	ldr	r0, [r4, #0]
 80140f8:	4632      	mov	r2, r6
 80140fa:	4641      	mov	r1, r8
 80140fc:	f7ff fd81 	bl	8013c02 <memmove>
 8014100:	68a3      	ldr	r3, [r4, #8]
 8014102:	1b9b      	subs	r3, r3, r6
 8014104:	60a3      	str	r3, [r4, #8]
 8014106:	6823      	ldr	r3, [r4, #0]
 8014108:	4433      	add	r3, r6
 801410a:	6023      	str	r3, [r4, #0]
 801410c:	2000      	movs	r0, #0
 801410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014112:	462a      	mov	r2, r5
 8014114:	f000 fb71 	bl	80147fa <_realloc_r>
 8014118:	4606      	mov	r6, r0
 801411a:	2800      	cmp	r0, #0
 801411c:	d1e0      	bne.n	80140e0 <__ssputs_r+0x5c>
 801411e:	6921      	ldr	r1, [r4, #16]
 8014120:	4650      	mov	r0, sl
 8014122:	f7ff feaf 	bl	8013e84 <_free_r>
 8014126:	230c      	movs	r3, #12
 8014128:	f8ca 3000 	str.w	r3, [sl]
 801412c:	89a3      	ldrh	r3, [r4, #12]
 801412e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014132:	81a3      	strh	r3, [r4, #12]
 8014134:	f04f 30ff 	mov.w	r0, #4294967295
 8014138:	e7e9      	b.n	801410e <__ssputs_r+0x8a>
	...

0801413c <_svfiprintf_r>:
 801413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014140:	4698      	mov	r8, r3
 8014142:	898b      	ldrh	r3, [r1, #12]
 8014144:	061b      	lsls	r3, r3, #24
 8014146:	b09d      	sub	sp, #116	@ 0x74
 8014148:	4607      	mov	r7, r0
 801414a:	460d      	mov	r5, r1
 801414c:	4614      	mov	r4, r2
 801414e:	d510      	bpl.n	8014172 <_svfiprintf_r+0x36>
 8014150:	690b      	ldr	r3, [r1, #16]
 8014152:	b973      	cbnz	r3, 8014172 <_svfiprintf_r+0x36>
 8014154:	2140      	movs	r1, #64	@ 0x40
 8014156:	f7ff ff09 	bl	8013f6c <_malloc_r>
 801415a:	6028      	str	r0, [r5, #0]
 801415c:	6128      	str	r0, [r5, #16]
 801415e:	b930      	cbnz	r0, 801416e <_svfiprintf_r+0x32>
 8014160:	230c      	movs	r3, #12
 8014162:	603b      	str	r3, [r7, #0]
 8014164:	f04f 30ff 	mov.w	r0, #4294967295
 8014168:	b01d      	add	sp, #116	@ 0x74
 801416a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801416e:	2340      	movs	r3, #64	@ 0x40
 8014170:	616b      	str	r3, [r5, #20]
 8014172:	2300      	movs	r3, #0
 8014174:	9309      	str	r3, [sp, #36]	@ 0x24
 8014176:	2320      	movs	r3, #32
 8014178:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801417c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014180:	2330      	movs	r3, #48	@ 0x30
 8014182:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014320 <_svfiprintf_r+0x1e4>
 8014186:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801418a:	f04f 0901 	mov.w	r9, #1
 801418e:	4623      	mov	r3, r4
 8014190:	469a      	mov	sl, r3
 8014192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014196:	b10a      	cbz	r2, 801419c <_svfiprintf_r+0x60>
 8014198:	2a25      	cmp	r2, #37	@ 0x25
 801419a:	d1f9      	bne.n	8014190 <_svfiprintf_r+0x54>
 801419c:	ebba 0b04 	subs.w	fp, sl, r4
 80141a0:	d00b      	beq.n	80141ba <_svfiprintf_r+0x7e>
 80141a2:	465b      	mov	r3, fp
 80141a4:	4622      	mov	r2, r4
 80141a6:	4629      	mov	r1, r5
 80141a8:	4638      	mov	r0, r7
 80141aa:	f7ff ff6b 	bl	8014084 <__ssputs_r>
 80141ae:	3001      	adds	r0, #1
 80141b0:	f000 80a7 	beq.w	8014302 <_svfiprintf_r+0x1c6>
 80141b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80141b6:	445a      	add	r2, fp
 80141b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80141ba:	f89a 3000 	ldrb.w	r3, [sl]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	f000 809f 	beq.w	8014302 <_svfiprintf_r+0x1c6>
 80141c4:	2300      	movs	r3, #0
 80141c6:	f04f 32ff 	mov.w	r2, #4294967295
 80141ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141ce:	f10a 0a01 	add.w	sl, sl, #1
 80141d2:	9304      	str	r3, [sp, #16]
 80141d4:	9307      	str	r3, [sp, #28]
 80141d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80141da:	931a      	str	r3, [sp, #104]	@ 0x68
 80141dc:	4654      	mov	r4, sl
 80141de:	2205      	movs	r2, #5
 80141e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80141e4:	484e      	ldr	r0, [pc, #312]	@ (8014320 <_svfiprintf_r+0x1e4>)
 80141e6:	f7ec f873 	bl	80002d0 <memchr>
 80141ea:	9a04      	ldr	r2, [sp, #16]
 80141ec:	b9d8      	cbnz	r0, 8014226 <_svfiprintf_r+0xea>
 80141ee:	06d0      	lsls	r0, r2, #27
 80141f0:	bf44      	itt	mi
 80141f2:	2320      	movmi	r3, #32
 80141f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80141f8:	0711      	lsls	r1, r2, #28
 80141fa:	bf44      	itt	mi
 80141fc:	232b      	movmi	r3, #43	@ 0x2b
 80141fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014202:	f89a 3000 	ldrb.w	r3, [sl]
 8014206:	2b2a      	cmp	r3, #42	@ 0x2a
 8014208:	d015      	beq.n	8014236 <_svfiprintf_r+0xfa>
 801420a:	9a07      	ldr	r2, [sp, #28]
 801420c:	4654      	mov	r4, sl
 801420e:	2000      	movs	r0, #0
 8014210:	f04f 0c0a 	mov.w	ip, #10
 8014214:	4621      	mov	r1, r4
 8014216:	f811 3b01 	ldrb.w	r3, [r1], #1
 801421a:	3b30      	subs	r3, #48	@ 0x30
 801421c:	2b09      	cmp	r3, #9
 801421e:	d94b      	bls.n	80142b8 <_svfiprintf_r+0x17c>
 8014220:	b1b0      	cbz	r0, 8014250 <_svfiprintf_r+0x114>
 8014222:	9207      	str	r2, [sp, #28]
 8014224:	e014      	b.n	8014250 <_svfiprintf_r+0x114>
 8014226:	eba0 0308 	sub.w	r3, r0, r8
 801422a:	fa09 f303 	lsl.w	r3, r9, r3
 801422e:	4313      	orrs	r3, r2
 8014230:	9304      	str	r3, [sp, #16]
 8014232:	46a2      	mov	sl, r4
 8014234:	e7d2      	b.n	80141dc <_svfiprintf_r+0xa0>
 8014236:	9b03      	ldr	r3, [sp, #12]
 8014238:	1d19      	adds	r1, r3, #4
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	9103      	str	r1, [sp, #12]
 801423e:	2b00      	cmp	r3, #0
 8014240:	bfbb      	ittet	lt
 8014242:	425b      	neglt	r3, r3
 8014244:	f042 0202 	orrlt.w	r2, r2, #2
 8014248:	9307      	strge	r3, [sp, #28]
 801424a:	9307      	strlt	r3, [sp, #28]
 801424c:	bfb8      	it	lt
 801424e:	9204      	strlt	r2, [sp, #16]
 8014250:	7823      	ldrb	r3, [r4, #0]
 8014252:	2b2e      	cmp	r3, #46	@ 0x2e
 8014254:	d10a      	bne.n	801426c <_svfiprintf_r+0x130>
 8014256:	7863      	ldrb	r3, [r4, #1]
 8014258:	2b2a      	cmp	r3, #42	@ 0x2a
 801425a:	d132      	bne.n	80142c2 <_svfiprintf_r+0x186>
 801425c:	9b03      	ldr	r3, [sp, #12]
 801425e:	1d1a      	adds	r2, r3, #4
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	9203      	str	r2, [sp, #12]
 8014264:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014268:	3402      	adds	r4, #2
 801426a:	9305      	str	r3, [sp, #20]
 801426c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014330 <_svfiprintf_r+0x1f4>
 8014270:	7821      	ldrb	r1, [r4, #0]
 8014272:	2203      	movs	r2, #3
 8014274:	4650      	mov	r0, sl
 8014276:	f7ec f82b 	bl	80002d0 <memchr>
 801427a:	b138      	cbz	r0, 801428c <_svfiprintf_r+0x150>
 801427c:	9b04      	ldr	r3, [sp, #16]
 801427e:	eba0 000a 	sub.w	r0, r0, sl
 8014282:	2240      	movs	r2, #64	@ 0x40
 8014284:	4082      	lsls	r2, r0
 8014286:	4313      	orrs	r3, r2
 8014288:	3401      	adds	r4, #1
 801428a:	9304      	str	r3, [sp, #16]
 801428c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014290:	4824      	ldr	r0, [pc, #144]	@ (8014324 <_svfiprintf_r+0x1e8>)
 8014292:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014296:	2206      	movs	r2, #6
 8014298:	f7ec f81a 	bl	80002d0 <memchr>
 801429c:	2800      	cmp	r0, #0
 801429e:	d036      	beq.n	801430e <_svfiprintf_r+0x1d2>
 80142a0:	4b21      	ldr	r3, [pc, #132]	@ (8014328 <_svfiprintf_r+0x1ec>)
 80142a2:	bb1b      	cbnz	r3, 80142ec <_svfiprintf_r+0x1b0>
 80142a4:	9b03      	ldr	r3, [sp, #12]
 80142a6:	3307      	adds	r3, #7
 80142a8:	f023 0307 	bic.w	r3, r3, #7
 80142ac:	3308      	adds	r3, #8
 80142ae:	9303      	str	r3, [sp, #12]
 80142b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142b2:	4433      	add	r3, r6
 80142b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80142b6:	e76a      	b.n	801418e <_svfiprintf_r+0x52>
 80142b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80142bc:	460c      	mov	r4, r1
 80142be:	2001      	movs	r0, #1
 80142c0:	e7a8      	b.n	8014214 <_svfiprintf_r+0xd8>
 80142c2:	2300      	movs	r3, #0
 80142c4:	3401      	adds	r4, #1
 80142c6:	9305      	str	r3, [sp, #20]
 80142c8:	4619      	mov	r1, r3
 80142ca:	f04f 0c0a 	mov.w	ip, #10
 80142ce:	4620      	mov	r0, r4
 80142d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142d4:	3a30      	subs	r2, #48	@ 0x30
 80142d6:	2a09      	cmp	r2, #9
 80142d8:	d903      	bls.n	80142e2 <_svfiprintf_r+0x1a6>
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d0c6      	beq.n	801426c <_svfiprintf_r+0x130>
 80142de:	9105      	str	r1, [sp, #20]
 80142e0:	e7c4      	b.n	801426c <_svfiprintf_r+0x130>
 80142e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80142e6:	4604      	mov	r4, r0
 80142e8:	2301      	movs	r3, #1
 80142ea:	e7f0      	b.n	80142ce <_svfiprintf_r+0x192>
 80142ec:	ab03      	add	r3, sp, #12
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	462a      	mov	r2, r5
 80142f2:	4b0e      	ldr	r3, [pc, #56]	@ (801432c <_svfiprintf_r+0x1f0>)
 80142f4:	a904      	add	r1, sp, #16
 80142f6:	4638      	mov	r0, r7
 80142f8:	f3af 8000 	nop.w
 80142fc:	1c42      	adds	r2, r0, #1
 80142fe:	4606      	mov	r6, r0
 8014300:	d1d6      	bne.n	80142b0 <_svfiprintf_r+0x174>
 8014302:	89ab      	ldrh	r3, [r5, #12]
 8014304:	065b      	lsls	r3, r3, #25
 8014306:	f53f af2d 	bmi.w	8014164 <_svfiprintf_r+0x28>
 801430a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801430c:	e72c      	b.n	8014168 <_svfiprintf_r+0x2c>
 801430e:	ab03      	add	r3, sp, #12
 8014310:	9300      	str	r3, [sp, #0]
 8014312:	462a      	mov	r2, r5
 8014314:	4b05      	ldr	r3, [pc, #20]	@ (801432c <_svfiprintf_r+0x1f0>)
 8014316:	a904      	add	r1, sp, #16
 8014318:	4638      	mov	r0, r7
 801431a:	f000 f879 	bl	8014410 <_printf_i>
 801431e:	e7ed      	b.n	80142fc <_svfiprintf_r+0x1c0>
 8014320:	0802cced 	.word	0x0802cced
 8014324:	0802ccf7 	.word	0x0802ccf7
 8014328:	00000000 	.word	0x00000000
 801432c:	08014085 	.word	0x08014085
 8014330:	0802ccf3 	.word	0x0802ccf3

08014334 <_printf_common>:
 8014334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014338:	4616      	mov	r6, r2
 801433a:	4698      	mov	r8, r3
 801433c:	688a      	ldr	r2, [r1, #8]
 801433e:	690b      	ldr	r3, [r1, #16]
 8014340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014344:	4293      	cmp	r3, r2
 8014346:	bfb8      	it	lt
 8014348:	4613      	movlt	r3, r2
 801434a:	6033      	str	r3, [r6, #0]
 801434c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014350:	4607      	mov	r7, r0
 8014352:	460c      	mov	r4, r1
 8014354:	b10a      	cbz	r2, 801435a <_printf_common+0x26>
 8014356:	3301      	adds	r3, #1
 8014358:	6033      	str	r3, [r6, #0]
 801435a:	6823      	ldr	r3, [r4, #0]
 801435c:	0699      	lsls	r1, r3, #26
 801435e:	bf42      	ittt	mi
 8014360:	6833      	ldrmi	r3, [r6, #0]
 8014362:	3302      	addmi	r3, #2
 8014364:	6033      	strmi	r3, [r6, #0]
 8014366:	6825      	ldr	r5, [r4, #0]
 8014368:	f015 0506 	ands.w	r5, r5, #6
 801436c:	d106      	bne.n	801437c <_printf_common+0x48>
 801436e:	f104 0a19 	add.w	sl, r4, #25
 8014372:	68e3      	ldr	r3, [r4, #12]
 8014374:	6832      	ldr	r2, [r6, #0]
 8014376:	1a9b      	subs	r3, r3, r2
 8014378:	42ab      	cmp	r3, r5
 801437a:	dc26      	bgt.n	80143ca <_printf_common+0x96>
 801437c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014380:	6822      	ldr	r2, [r4, #0]
 8014382:	3b00      	subs	r3, #0
 8014384:	bf18      	it	ne
 8014386:	2301      	movne	r3, #1
 8014388:	0692      	lsls	r2, r2, #26
 801438a:	d42b      	bmi.n	80143e4 <_printf_common+0xb0>
 801438c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014390:	4641      	mov	r1, r8
 8014392:	4638      	mov	r0, r7
 8014394:	47c8      	blx	r9
 8014396:	3001      	adds	r0, #1
 8014398:	d01e      	beq.n	80143d8 <_printf_common+0xa4>
 801439a:	6823      	ldr	r3, [r4, #0]
 801439c:	6922      	ldr	r2, [r4, #16]
 801439e:	f003 0306 	and.w	r3, r3, #6
 80143a2:	2b04      	cmp	r3, #4
 80143a4:	bf02      	ittt	eq
 80143a6:	68e5      	ldreq	r5, [r4, #12]
 80143a8:	6833      	ldreq	r3, [r6, #0]
 80143aa:	1aed      	subeq	r5, r5, r3
 80143ac:	68a3      	ldr	r3, [r4, #8]
 80143ae:	bf0c      	ite	eq
 80143b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80143b4:	2500      	movne	r5, #0
 80143b6:	4293      	cmp	r3, r2
 80143b8:	bfc4      	itt	gt
 80143ba:	1a9b      	subgt	r3, r3, r2
 80143bc:	18ed      	addgt	r5, r5, r3
 80143be:	2600      	movs	r6, #0
 80143c0:	341a      	adds	r4, #26
 80143c2:	42b5      	cmp	r5, r6
 80143c4:	d11a      	bne.n	80143fc <_printf_common+0xc8>
 80143c6:	2000      	movs	r0, #0
 80143c8:	e008      	b.n	80143dc <_printf_common+0xa8>
 80143ca:	2301      	movs	r3, #1
 80143cc:	4652      	mov	r2, sl
 80143ce:	4641      	mov	r1, r8
 80143d0:	4638      	mov	r0, r7
 80143d2:	47c8      	blx	r9
 80143d4:	3001      	adds	r0, #1
 80143d6:	d103      	bne.n	80143e0 <_printf_common+0xac>
 80143d8:	f04f 30ff 	mov.w	r0, #4294967295
 80143dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143e0:	3501      	adds	r5, #1
 80143e2:	e7c6      	b.n	8014372 <_printf_common+0x3e>
 80143e4:	18e1      	adds	r1, r4, r3
 80143e6:	1c5a      	adds	r2, r3, #1
 80143e8:	2030      	movs	r0, #48	@ 0x30
 80143ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80143ee:	4422      	add	r2, r4
 80143f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80143f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80143f8:	3302      	adds	r3, #2
 80143fa:	e7c7      	b.n	801438c <_printf_common+0x58>
 80143fc:	2301      	movs	r3, #1
 80143fe:	4622      	mov	r2, r4
 8014400:	4641      	mov	r1, r8
 8014402:	4638      	mov	r0, r7
 8014404:	47c8      	blx	r9
 8014406:	3001      	adds	r0, #1
 8014408:	d0e6      	beq.n	80143d8 <_printf_common+0xa4>
 801440a:	3601      	adds	r6, #1
 801440c:	e7d9      	b.n	80143c2 <_printf_common+0x8e>
	...

08014410 <_printf_i>:
 8014410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014414:	7e0f      	ldrb	r7, [r1, #24]
 8014416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014418:	2f78      	cmp	r7, #120	@ 0x78
 801441a:	4691      	mov	r9, r2
 801441c:	4680      	mov	r8, r0
 801441e:	460c      	mov	r4, r1
 8014420:	469a      	mov	sl, r3
 8014422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014426:	d807      	bhi.n	8014438 <_printf_i+0x28>
 8014428:	2f62      	cmp	r7, #98	@ 0x62
 801442a:	d80a      	bhi.n	8014442 <_printf_i+0x32>
 801442c:	2f00      	cmp	r7, #0
 801442e:	f000 80d2 	beq.w	80145d6 <_printf_i+0x1c6>
 8014432:	2f58      	cmp	r7, #88	@ 0x58
 8014434:	f000 80b9 	beq.w	80145aa <_printf_i+0x19a>
 8014438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801443c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014440:	e03a      	b.n	80144b8 <_printf_i+0xa8>
 8014442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014446:	2b15      	cmp	r3, #21
 8014448:	d8f6      	bhi.n	8014438 <_printf_i+0x28>
 801444a:	a101      	add	r1, pc, #4	@ (adr r1, 8014450 <_printf_i+0x40>)
 801444c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014450:	080144a9 	.word	0x080144a9
 8014454:	080144bd 	.word	0x080144bd
 8014458:	08014439 	.word	0x08014439
 801445c:	08014439 	.word	0x08014439
 8014460:	08014439 	.word	0x08014439
 8014464:	08014439 	.word	0x08014439
 8014468:	080144bd 	.word	0x080144bd
 801446c:	08014439 	.word	0x08014439
 8014470:	08014439 	.word	0x08014439
 8014474:	08014439 	.word	0x08014439
 8014478:	08014439 	.word	0x08014439
 801447c:	080145bd 	.word	0x080145bd
 8014480:	080144e7 	.word	0x080144e7
 8014484:	08014577 	.word	0x08014577
 8014488:	08014439 	.word	0x08014439
 801448c:	08014439 	.word	0x08014439
 8014490:	080145df 	.word	0x080145df
 8014494:	08014439 	.word	0x08014439
 8014498:	080144e7 	.word	0x080144e7
 801449c:	08014439 	.word	0x08014439
 80144a0:	08014439 	.word	0x08014439
 80144a4:	0801457f 	.word	0x0801457f
 80144a8:	6833      	ldr	r3, [r6, #0]
 80144aa:	1d1a      	adds	r2, r3, #4
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	6032      	str	r2, [r6, #0]
 80144b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80144b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80144b8:	2301      	movs	r3, #1
 80144ba:	e09d      	b.n	80145f8 <_printf_i+0x1e8>
 80144bc:	6833      	ldr	r3, [r6, #0]
 80144be:	6820      	ldr	r0, [r4, #0]
 80144c0:	1d19      	adds	r1, r3, #4
 80144c2:	6031      	str	r1, [r6, #0]
 80144c4:	0606      	lsls	r6, r0, #24
 80144c6:	d501      	bpl.n	80144cc <_printf_i+0xbc>
 80144c8:	681d      	ldr	r5, [r3, #0]
 80144ca:	e003      	b.n	80144d4 <_printf_i+0xc4>
 80144cc:	0645      	lsls	r5, r0, #25
 80144ce:	d5fb      	bpl.n	80144c8 <_printf_i+0xb8>
 80144d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80144d4:	2d00      	cmp	r5, #0
 80144d6:	da03      	bge.n	80144e0 <_printf_i+0xd0>
 80144d8:	232d      	movs	r3, #45	@ 0x2d
 80144da:	426d      	negs	r5, r5
 80144dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80144e0:	4859      	ldr	r0, [pc, #356]	@ (8014648 <_printf_i+0x238>)
 80144e2:	230a      	movs	r3, #10
 80144e4:	e011      	b.n	801450a <_printf_i+0xfa>
 80144e6:	6821      	ldr	r1, [r4, #0]
 80144e8:	6833      	ldr	r3, [r6, #0]
 80144ea:	0608      	lsls	r0, r1, #24
 80144ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80144f0:	d402      	bmi.n	80144f8 <_printf_i+0xe8>
 80144f2:	0649      	lsls	r1, r1, #25
 80144f4:	bf48      	it	mi
 80144f6:	b2ad      	uxthmi	r5, r5
 80144f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80144fa:	4853      	ldr	r0, [pc, #332]	@ (8014648 <_printf_i+0x238>)
 80144fc:	6033      	str	r3, [r6, #0]
 80144fe:	bf14      	ite	ne
 8014500:	230a      	movne	r3, #10
 8014502:	2308      	moveq	r3, #8
 8014504:	2100      	movs	r1, #0
 8014506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801450a:	6866      	ldr	r6, [r4, #4]
 801450c:	60a6      	str	r6, [r4, #8]
 801450e:	2e00      	cmp	r6, #0
 8014510:	bfa2      	ittt	ge
 8014512:	6821      	ldrge	r1, [r4, #0]
 8014514:	f021 0104 	bicge.w	r1, r1, #4
 8014518:	6021      	strge	r1, [r4, #0]
 801451a:	b90d      	cbnz	r5, 8014520 <_printf_i+0x110>
 801451c:	2e00      	cmp	r6, #0
 801451e:	d04b      	beq.n	80145b8 <_printf_i+0x1a8>
 8014520:	4616      	mov	r6, r2
 8014522:	fbb5 f1f3 	udiv	r1, r5, r3
 8014526:	fb03 5711 	mls	r7, r3, r1, r5
 801452a:	5dc7      	ldrb	r7, [r0, r7]
 801452c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014530:	462f      	mov	r7, r5
 8014532:	42bb      	cmp	r3, r7
 8014534:	460d      	mov	r5, r1
 8014536:	d9f4      	bls.n	8014522 <_printf_i+0x112>
 8014538:	2b08      	cmp	r3, #8
 801453a:	d10b      	bne.n	8014554 <_printf_i+0x144>
 801453c:	6823      	ldr	r3, [r4, #0]
 801453e:	07df      	lsls	r7, r3, #31
 8014540:	d508      	bpl.n	8014554 <_printf_i+0x144>
 8014542:	6923      	ldr	r3, [r4, #16]
 8014544:	6861      	ldr	r1, [r4, #4]
 8014546:	4299      	cmp	r1, r3
 8014548:	bfde      	ittt	le
 801454a:	2330      	movle	r3, #48	@ 0x30
 801454c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014550:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014554:	1b92      	subs	r2, r2, r6
 8014556:	6122      	str	r2, [r4, #16]
 8014558:	f8cd a000 	str.w	sl, [sp]
 801455c:	464b      	mov	r3, r9
 801455e:	aa03      	add	r2, sp, #12
 8014560:	4621      	mov	r1, r4
 8014562:	4640      	mov	r0, r8
 8014564:	f7ff fee6 	bl	8014334 <_printf_common>
 8014568:	3001      	adds	r0, #1
 801456a:	d14a      	bne.n	8014602 <_printf_i+0x1f2>
 801456c:	f04f 30ff 	mov.w	r0, #4294967295
 8014570:	b004      	add	sp, #16
 8014572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014576:	6823      	ldr	r3, [r4, #0]
 8014578:	f043 0320 	orr.w	r3, r3, #32
 801457c:	6023      	str	r3, [r4, #0]
 801457e:	4833      	ldr	r0, [pc, #204]	@ (801464c <_printf_i+0x23c>)
 8014580:	2778      	movs	r7, #120	@ 0x78
 8014582:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014586:	6823      	ldr	r3, [r4, #0]
 8014588:	6831      	ldr	r1, [r6, #0]
 801458a:	061f      	lsls	r7, r3, #24
 801458c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014590:	d402      	bmi.n	8014598 <_printf_i+0x188>
 8014592:	065f      	lsls	r7, r3, #25
 8014594:	bf48      	it	mi
 8014596:	b2ad      	uxthmi	r5, r5
 8014598:	6031      	str	r1, [r6, #0]
 801459a:	07d9      	lsls	r1, r3, #31
 801459c:	bf44      	itt	mi
 801459e:	f043 0320 	orrmi.w	r3, r3, #32
 80145a2:	6023      	strmi	r3, [r4, #0]
 80145a4:	b11d      	cbz	r5, 80145ae <_printf_i+0x19e>
 80145a6:	2310      	movs	r3, #16
 80145a8:	e7ac      	b.n	8014504 <_printf_i+0xf4>
 80145aa:	4827      	ldr	r0, [pc, #156]	@ (8014648 <_printf_i+0x238>)
 80145ac:	e7e9      	b.n	8014582 <_printf_i+0x172>
 80145ae:	6823      	ldr	r3, [r4, #0]
 80145b0:	f023 0320 	bic.w	r3, r3, #32
 80145b4:	6023      	str	r3, [r4, #0]
 80145b6:	e7f6      	b.n	80145a6 <_printf_i+0x196>
 80145b8:	4616      	mov	r6, r2
 80145ba:	e7bd      	b.n	8014538 <_printf_i+0x128>
 80145bc:	6833      	ldr	r3, [r6, #0]
 80145be:	6825      	ldr	r5, [r4, #0]
 80145c0:	6961      	ldr	r1, [r4, #20]
 80145c2:	1d18      	adds	r0, r3, #4
 80145c4:	6030      	str	r0, [r6, #0]
 80145c6:	062e      	lsls	r6, r5, #24
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	d501      	bpl.n	80145d0 <_printf_i+0x1c0>
 80145cc:	6019      	str	r1, [r3, #0]
 80145ce:	e002      	b.n	80145d6 <_printf_i+0x1c6>
 80145d0:	0668      	lsls	r0, r5, #25
 80145d2:	d5fb      	bpl.n	80145cc <_printf_i+0x1bc>
 80145d4:	8019      	strh	r1, [r3, #0]
 80145d6:	2300      	movs	r3, #0
 80145d8:	6123      	str	r3, [r4, #16]
 80145da:	4616      	mov	r6, r2
 80145dc:	e7bc      	b.n	8014558 <_printf_i+0x148>
 80145de:	6833      	ldr	r3, [r6, #0]
 80145e0:	1d1a      	adds	r2, r3, #4
 80145e2:	6032      	str	r2, [r6, #0]
 80145e4:	681e      	ldr	r6, [r3, #0]
 80145e6:	6862      	ldr	r2, [r4, #4]
 80145e8:	2100      	movs	r1, #0
 80145ea:	4630      	mov	r0, r6
 80145ec:	f7eb fe70 	bl	80002d0 <memchr>
 80145f0:	b108      	cbz	r0, 80145f6 <_printf_i+0x1e6>
 80145f2:	1b80      	subs	r0, r0, r6
 80145f4:	6060      	str	r0, [r4, #4]
 80145f6:	6863      	ldr	r3, [r4, #4]
 80145f8:	6123      	str	r3, [r4, #16]
 80145fa:	2300      	movs	r3, #0
 80145fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014600:	e7aa      	b.n	8014558 <_printf_i+0x148>
 8014602:	6923      	ldr	r3, [r4, #16]
 8014604:	4632      	mov	r2, r6
 8014606:	4649      	mov	r1, r9
 8014608:	4640      	mov	r0, r8
 801460a:	47d0      	blx	sl
 801460c:	3001      	adds	r0, #1
 801460e:	d0ad      	beq.n	801456c <_printf_i+0x15c>
 8014610:	6823      	ldr	r3, [r4, #0]
 8014612:	079b      	lsls	r3, r3, #30
 8014614:	d413      	bmi.n	801463e <_printf_i+0x22e>
 8014616:	68e0      	ldr	r0, [r4, #12]
 8014618:	9b03      	ldr	r3, [sp, #12]
 801461a:	4298      	cmp	r0, r3
 801461c:	bfb8      	it	lt
 801461e:	4618      	movlt	r0, r3
 8014620:	e7a6      	b.n	8014570 <_printf_i+0x160>
 8014622:	2301      	movs	r3, #1
 8014624:	4632      	mov	r2, r6
 8014626:	4649      	mov	r1, r9
 8014628:	4640      	mov	r0, r8
 801462a:	47d0      	blx	sl
 801462c:	3001      	adds	r0, #1
 801462e:	d09d      	beq.n	801456c <_printf_i+0x15c>
 8014630:	3501      	adds	r5, #1
 8014632:	68e3      	ldr	r3, [r4, #12]
 8014634:	9903      	ldr	r1, [sp, #12]
 8014636:	1a5b      	subs	r3, r3, r1
 8014638:	42ab      	cmp	r3, r5
 801463a:	dcf2      	bgt.n	8014622 <_printf_i+0x212>
 801463c:	e7eb      	b.n	8014616 <_printf_i+0x206>
 801463e:	2500      	movs	r5, #0
 8014640:	f104 0619 	add.w	r6, r4, #25
 8014644:	e7f5      	b.n	8014632 <_printf_i+0x222>
 8014646:	bf00      	nop
 8014648:	0802ccfe 	.word	0x0802ccfe
 801464c:	0802cd0f 	.word	0x0802cd0f

08014650 <__sflush_r>:
 8014650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014658:	0716      	lsls	r6, r2, #28
 801465a:	4605      	mov	r5, r0
 801465c:	460c      	mov	r4, r1
 801465e:	d454      	bmi.n	801470a <__sflush_r+0xba>
 8014660:	684b      	ldr	r3, [r1, #4]
 8014662:	2b00      	cmp	r3, #0
 8014664:	dc02      	bgt.n	801466c <__sflush_r+0x1c>
 8014666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014668:	2b00      	cmp	r3, #0
 801466a:	dd48      	ble.n	80146fe <__sflush_r+0xae>
 801466c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801466e:	2e00      	cmp	r6, #0
 8014670:	d045      	beq.n	80146fe <__sflush_r+0xae>
 8014672:	2300      	movs	r3, #0
 8014674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014678:	682f      	ldr	r7, [r5, #0]
 801467a:	6a21      	ldr	r1, [r4, #32]
 801467c:	602b      	str	r3, [r5, #0]
 801467e:	d030      	beq.n	80146e2 <__sflush_r+0x92>
 8014680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014682:	89a3      	ldrh	r3, [r4, #12]
 8014684:	0759      	lsls	r1, r3, #29
 8014686:	d505      	bpl.n	8014694 <__sflush_r+0x44>
 8014688:	6863      	ldr	r3, [r4, #4]
 801468a:	1ad2      	subs	r2, r2, r3
 801468c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801468e:	b10b      	cbz	r3, 8014694 <__sflush_r+0x44>
 8014690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014692:	1ad2      	subs	r2, r2, r3
 8014694:	2300      	movs	r3, #0
 8014696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014698:	6a21      	ldr	r1, [r4, #32]
 801469a:	4628      	mov	r0, r5
 801469c:	47b0      	blx	r6
 801469e:	1c43      	adds	r3, r0, #1
 80146a0:	89a3      	ldrh	r3, [r4, #12]
 80146a2:	d106      	bne.n	80146b2 <__sflush_r+0x62>
 80146a4:	6829      	ldr	r1, [r5, #0]
 80146a6:	291d      	cmp	r1, #29
 80146a8:	d82b      	bhi.n	8014702 <__sflush_r+0xb2>
 80146aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014754 <__sflush_r+0x104>)
 80146ac:	410a      	asrs	r2, r1
 80146ae:	07d6      	lsls	r6, r2, #31
 80146b0:	d427      	bmi.n	8014702 <__sflush_r+0xb2>
 80146b2:	2200      	movs	r2, #0
 80146b4:	6062      	str	r2, [r4, #4]
 80146b6:	04d9      	lsls	r1, r3, #19
 80146b8:	6922      	ldr	r2, [r4, #16]
 80146ba:	6022      	str	r2, [r4, #0]
 80146bc:	d504      	bpl.n	80146c8 <__sflush_r+0x78>
 80146be:	1c42      	adds	r2, r0, #1
 80146c0:	d101      	bne.n	80146c6 <__sflush_r+0x76>
 80146c2:	682b      	ldr	r3, [r5, #0]
 80146c4:	b903      	cbnz	r3, 80146c8 <__sflush_r+0x78>
 80146c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80146c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80146ca:	602f      	str	r7, [r5, #0]
 80146cc:	b1b9      	cbz	r1, 80146fe <__sflush_r+0xae>
 80146ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146d2:	4299      	cmp	r1, r3
 80146d4:	d002      	beq.n	80146dc <__sflush_r+0x8c>
 80146d6:	4628      	mov	r0, r5
 80146d8:	f7ff fbd4 	bl	8013e84 <_free_r>
 80146dc:	2300      	movs	r3, #0
 80146de:	6363      	str	r3, [r4, #52]	@ 0x34
 80146e0:	e00d      	b.n	80146fe <__sflush_r+0xae>
 80146e2:	2301      	movs	r3, #1
 80146e4:	4628      	mov	r0, r5
 80146e6:	47b0      	blx	r6
 80146e8:	4602      	mov	r2, r0
 80146ea:	1c50      	adds	r0, r2, #1
 80146ec:	d1c9      	bne.n	8014682 <__sflush_r+0x32>
 80146ee:	682b      	ldr	r3, [r5, #0]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d0c6      	beq.n	8014682 <__sflush_r+0x32>
 80146f4:	2b1d      	cmp	r3, #29
 80146f6:	d001      	beq.n	80146fc <__sflush_r+0xac>
 80146f8:	2b16      	cmp	r3, #22
 80146fa:	d11e      	bne.n	801473a <__sflush_r+0xea>
 80146fc:	602f      	str	r7, [r5, #0]
 80146fe:	2000      	movs	r0, #0
 8014700:	e022      	b.n	8014748 <__sflush_r+0xf8>
 8014702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014706:	b21b      	sxth	r3, r3
 8014708:	e01b      	b.n	8014742 <__sflush_r+0xf2>
 801470a:	690f      	ldr	r7, [r1, #16]
 801470c:	2f00      	cmp	r7, #0
 801470e:	d0f6      	beq.n	80146fe <__sflush_r+0xae>
 8014710:	0793      	lsls	r3, r2, #30
 8014712:	680e      	ldr	r6, [r1, #0]
 8014714:	bf08      	it	eq
 8014716:	694b      	ldreq	r3, [r1, #20]
 8014718:	600f      	str	r7, [r1, #0]
 801471a:	bf18      	it	ne
 801471c:	2300      	movne	r3, #0
 801471e:	eba6 0807 	sub.w	r8, r6, r7
 8014722:	608b      	str	r3, [r1, #8]
 8014724:	f1b8 0f00 	cmp.w	r8, #0
 8014728:	dde9      	ble.n	80146fe <__sflush_r+0xae>
 801472a:	6a21      	ldr	r1, [r4, #32]
 801472c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801472e:	4643      	mov	r3, r8
 8014730:	463a      	mov	r2, r7
 8014732:	4628      	mov	r0, r5
 8014734:	47b0      	blx	r6
 8014736:	2800      	cmp	r0, #0
 8014738:	dc08      	bgt.n	801474c <__sflush_r+0xfc>
 801473a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801473e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014742:	81a3      	strh	r3, [r4, #12]
 8014744:	f04f 30ff 	mov.w	r0, #4294967295
 8014748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801474c:	4407      	add	r7, r0
 801474e:	eba8 0800 	sub.w	r8, r8, r0
 8014752:	e7e7      	b.n	8014724 <__sflush_r+0xd4>
 8014754:	dfbffffe 	.word	0xdfbffffe

08014758 <_fflush_r>:
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	690b      	ldr	r3, [r1, #16]
 801475c:	4605      	mov	r5, r0
 801475e:	460c      	mov	r4, r1
 8014760:	b913      	cbnz	r3, 8014768 <_fflush_r+0x10>
 8014762:	2500      	movs	r5, #0
 8014764:	4628      	mov	r0, r5
 8014766:	bd38      	pop	{r3, r4, r5, pc}
 8014768:	b118      	cbz	r0, 8014772 <_fflush_r+0x1a>
 801476a:	6a03      	ldr	r3, [r0, #32]
 801476c:	b90b      	cbnz	r3, 8014772 <_fflush_r+0x1a>
 801476e:	f7ff f99b 	bl	8013aa8 <__sinit>
 8014772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014776:	2b00      	cmp	r3, #0
 8014778:	d0f3      	beq.n	8014762 <_fflush_r+0xa>
 801477a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801477c:	07d0      	lsls	r0, r2, #31
 801477e:	d404      	bmi.n	801478a <_fflush_r+0x32>
 8014780:	0599      	lsls	r1, r3, #22
 8014782:	d402      	bmi.n	801478a <_fflush_r+0x32>
 8014784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014786:	f7ff fb4e 	bl	8013e26 <__retarget_lock_acquire_recursive>
 801478a:	4628      	mov	r0, r5
 801478c:	4621      	mov	r1, r4
 801478e:	f7ff ff5f 	bl	8014650 <__sflush_r>
 8014792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014794:	07da      	lsls	r2, r3, #31
 8014796:	4605      	mov	r5, r0
 8014798:	d4e4      	bmi.n	8014764 <_fflush_r+0xc>
 801479a:	89a3      	ldrh	r3, [r4, #12]
 801479c:	059b      	lsls	r3, r3, #22
 801479e:	d4e1      	bmi.n	8014764 <_fflush_r+0xc>
 80147a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147a2:	f7ff fb41 	bl	8013e28 <__retarget_lock_release_recursive>
 80147a6:	e7dd      	b.n	8014764 <_fflush_r+0xc>

080147a8 <fiprintf>:
 80147a8:	b40e      	push	{r1, r2, r3}
 80147aa:	b503      	push	{r0, r1, lr}
 80147ac:	4601      	mov	r1, r0
 80147ae:	ab03      	add	r3, sp, #12
 80147b0:	4805      	ldr	r0, [pc, #20]	@ (80147c8 <fiprintf+0x20>)
 80147b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80147b6:	6800      	ldr	r0, [r0, #0]
 80147b8:	9301      	str	r3, [sp, #4]
 80147ba:	f000 f875 	bl	80148a8 <_vfiprintf_r>
 80147be:	b002      	add	sp, #8
 80147c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80147c4:	b003      	add	sp, #12
 80147c6:	4770      	bx	lr
 80147c8:	20000684 	.word	0x20000684

080147cc <_sbrk_r>:
 80147cc:	b538      	push	{r3, r4, r5, lr}
 80147ce:	4d06      	ldr	r5, [pc, #24]	@ (80147e8 <_sbrk_r+0x1c>)
 80147d0:	2300      	movs	r3, #0
 80147d2:	4604      	mov	r4, r0
 80147d4:	4608      	mov	r0, r1
 80147d6:	602b      	str	r3, [r5, #0]
 80147d8:	f7ed ff18 	bl	800260c <_sbrk>
 80147dc:	1c43      	adds	r3, r0, #1
 80147de:	d102      	bne.n	80147e6 <_sbrk_r+0x1a>
 80147e0:	682b      	ldr	r3, [r5, #0]
 80147e2:	b103      	cbz	r3, 80147e6 <_sbrk_r+0x1a>
 80147e4:	6023      	str	r3, [r4, #0]
 80147e6:	bd38      	pop	{r3, r4, r5, pc}
 80147e8:	20013804 	.word	0x20013804

080147ec <abort>:
 80147ec:	b508      	push	{r3, lr}
 80147ee:	2006      	movs	r0, #6
 80147f0:	f000 fa2e 	bl	8014c50 <raise>
 80147f4:	2001      	movs	r0, #1
 80147f6:	f7ed fe91 	bl	800251c <_exit>

080147fa <_realloc_r>:
 80147fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147fe:	4680      	mov	r8, r0
 8014800:	4615      	mov	r5, r2
 8014802:	460c      	mov	r4, r1
 8014804:	b921      	cbnz	r1, 8014810 <_realloc_r+0x16>
 8014806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801480a:	4611      	mov	r1, r2
 801480c:	f7ff bbae 	b.w	8013f6c <_malloc_r>
 8014810:	b92a      	cbnz	r2, 801481e <_realloc_r+0x24>
 8014812:	f7ff fb37 	bl	8013e84 <_free_r>
 8014816:	2400      	movs	r4, #0
 8014818:	4620      	mov	r0, r4
 801481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801481e:	f000 fa33 	bl	8014c88 <_malloc_usable_size_r>
 8014822:	4285      	cmp	r5, r0
 8014824:	4606      	mov	r6, r0
 8014826:	d802      	bhi.n	801482e <_realloc_r+0x34>
 8014828:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801482c:	d8f4      	bhi.n	8014818 <_realloc_r+0x1e>
 801482e:	4629      	mov	r1, r5
 8014830:	4640      	mov	r0, r8
 8014832:	f7ff fb9b 	bl	8013f6c <_malloc_r>
 8014836:	4607      	mov	r7, r0
 8014838:	2800      	cmp	r0, #0
 801483a:	d0ec      	beq.n	8014816 <_realloc_r+0x1c>
 801483c:	42b5      	cmp	r5, r6
 801483e:	462a      	mov	r2, r5
 8014840:	4621      	mov	r1, r4
 8014842:	bf28      	it	cs
 8014844:	4632      	movcs	r2, r6
 8014846:	f7ff faf0 	bl	8013e2a <memcpy>
 801484a:	4621      	mov	r1, r4
 801484c:	4640      	mov	r0, r8
 801484e:	f7ff fb19 	bl	8013e84 <_free_r>
 8014852:	463c      	mov	r4, r7
 8014854:	e7e0      	b.n	8014818 <_realloc_r+0x1e>

08014856 <__sfputc_r>:
 8014856:	6893      	ldr	r3, [r2, #8]
 8014858:	3b01      	subs	r3, #1
 801485a:	2b00      	cmp	r3, #0
 801485c:	b410      	push	{r4}
 801485e:	6093      	str	r3, [r2, #8]
 8014860:	da08      	bge.n	8014874 <__sfputc_r+0x1e>
 8014862:	6994      	ldr	r4, [r2, #24]
 8014864:	42a3      	cmp	r3, r4
 8014866:	db01      	blt.n	801486c <__sfputc_r+0x16>
 8014868:	290a      	cmp	r1, #10
 801486a:	d103      	bne.n	8014874 <__sfputc_r+0x1e>
 801486c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014870:	f000 b932 	b.w	8014ad8 <__swbuf_r>
 8014874:	6813      	ldr	r3, [r2, #0]
 8014876:	1c58      	adds	r0, r3, #1
 8014878:	6010      	str	r0, [r2, #0]
 801487a:	7019      	strb	r1, [r3, #0]
 801487c:	4608      	mov	r0, r1
 801487e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014882:	4770      	bx	lr

08014884 <__sfputs_r>:
 8014884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014886:	4606      	mov	r6, r0
 8014888:	460f      	mov	r7, r1
 801488a:	4614      	mov	r4, r2
 801488c:	18d5      	adds	r5, r2, r3
 801488e:	42ac      	cmp	r4, r5
 8014890:	d101      	bne.n	8014896 <__sfputs_r+0x12>
 8014892:	2000      	movs	r0, #0
 8014894:	e007      	b.n	80148a6 <__sfputs_r+0x22>
 8014896:	f814 1b01 	ldrb.w	r1, [r4], #1
 801489a:	463a      	mov	r2, r7
 801489c:	4630      	mov	r0, r6
 801489e:	f7ff ffda 	bl	8014856 <__sfputc_r>
 80148a2:	1c43      	adds	r3, r0, #1
 80148a4:	d1f3      	bne.n	801488e <__sfputs_r+0xa>
 80148a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080148a8 <_vfiprintf_r>:
 80148a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ac:	460d      	mov	r5, r1
 80148ae:	b09d      	sub	sp, #116	@ 0x74
 80148b0:	4614      	mov	r4, r2
 80148b2:	4698      	mov	r8, r3
 80148b4:	4606      	mov	r6, r0
 80148b6:	b118      	cbz	r0, 80148c0 <_vfiprintf_r+0x18>
 80148b8:	6a03      	ldr	r3, [r0, #32]
 80148ba:	b90b      	cbnz	r3, 80148c0 <_vfiprintf_r+0x18>
 80148bc:	f7ff f8f4 	bl	8013aa8 <__sinit>
 80148c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148c2:	07d9      	lsls	r1, r3, #31
 80148c4:	d405      	bmi.n	80148d2 <_vfiprintf_r+0x2a>
 80148c6:	89ab      	ldrh	r3, [r5, #12]
 80148c8:	059a      	lsls	r2, r3, #22
 80148ca:	d402      	bmi.n	80148d2 <_vfiprintf_r+0x2a>
 80148cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148ce:	f7ff faaa 	bl	8013e26 <__retarget_lock_acquire_recursive>
 80148d2:	89ab      	ldrh	r3, [r5, #12]
 80148d4:	071b      	lsls	r3, r3, #28
 80148d6:	d501      	bpl.n	80148dc <_vfiprintf_r+0x34>
 80148d8:	692b      	ldr	r3, [r5, #16]
 80148da:	b99b      	cbnz	r3, 8014904 <_vfiprintf_r+0x5c>
 80148dc:	4629      	mov	r1, r5
 80148de:	4630      	mov	r0, r6
 80148e0:	f000 f938 	bl	8014b54 <__swsetup_r>
 80148e4:	b170      	cbz	r0, 8014904 <_vfiprintf_r+0x5c>
 80148e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148e8:	07dc      	lsls	r4, r3, #31
 80148ea:	d504      	bpl.n	80148f6 <_vfiprintf_r+0x4e>
 80148ec:	f04f 30ff 	mov.w	r0, #4294967295
 80148f0:	b01d      	add	sp, #116	@ 0x74
 80148f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f6:	89ab      	ldrh	r3, [r5, #12]
 80148f8:	0598      	lsls	r0, r3, #22
 80148fa:	d4f7      	bmi.n	80148ec <_vfiprintf_r+0x44>
 80148fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148fe:	f7ff fa93 	bl	8013e28 <__retarget_lock_release_recursive>
 8014902:	e7f3      	b.n	80148ec <_vfiprintf_r+0x44>
 8014904:	2300      	movs	r3, #0
 8014906:	9309      	str	r3, [sp, #36]	@ 0x24
 8014908:	2320      	movs	r3, #32
 801490a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801490e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014912:	2330      	movs	r3, #48	@ 0x30
 8014914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ac4 <_vfiprintf_r+0x21c>
 8014918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801491c:	f04f 0901 	mov.w	r9, #1
 8014920:	4623      	mov	r3, r4
 8014922:	469a      	mov	sl, r3
 8014924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014928:	b10a      	cbz	r2, 801492e <_vfiprintf_r+0x86>
 801492a:	2a25      	cmp	r2, #37	@ 0x25
 801492c:	d1f9      	bne.n	8014922 <_vfiprintf_r+0x7a>
 801492e:	ebba 0b04 	subs.w	fp, sl, r4
 8014932:	d00b      	beq.n	801494c <_vfiprintf_r+0xa4>
 8014934:	465b      	mov	r3, fp
 8014936:	4622      	mov	r2, r4
 8014938:	4629      	mov	r1, r5
 801493a:	4630      	mov	r0, r6
 801493c:	f7ff ffa2 	bl	8014884 <__sfputs_r>
 8014940:	3001      	adds	r0, #1
 8014942:	f000 80a7 	beq.w	8014a94 <_vfiprintf_r+0x1ec>
 8014946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014948:	445a      	add	r2, fp
 801494a:	9209      	str	r2, [sp, #36]	@ 0x24
 801494c:	f89a 3000 	ldrb.w	r3, [sl]
 8014950:	2b00      	cmp	r3, #0
 8014952:	f000 809f 	beq.w	8014a94 <_vfiprintf_r+0x1ec>
 8014956:	2300      	movs	r3, #0
 8014958:	f04f 32ff 	mov.w	r2, #4294967295
 801495c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014960:	f10a 0a01 	add.w	sl, sl, #1
 8014964:	9304      	str	r3, [sp, #16]
 8014966:	9307      	str	r3, [sp, #28]
 8014968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801496c:	931a      	str	r3, [sp, #104]	@ 0x68
 801496e:	4654      	mov	r4, sl
 8014970:	2205      	movs	r2, #5
 8014972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014976:	4853      	ldr	r0, [pc, #332]	@ (8014ac4 <_vfiprintf_r+0x21c>)
 8014978:	f7eb fcaa 	bl	80002d0 <memchr>
 801497c:	9a04      	ldr	r2, [sp, #16]
 801497e:	b9d8      	cbnz	r0, 80149b8 <_vfiprintf_r+0x110>
 8014980:	06d1      	lsls	r1, r2, #27
 8014982:	bf44      	itt	mi
 8014984:	2320      	movmi	r3, #32
 8014986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801498a:	0713      	lsls	r3, r2, #28
 801498c:	bf44      	itt	mi
 801498e:	232b      	movmi	r3, #43	@ 0x2b
 8014990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014994:	f89a 3000 	ldrb.w	r3, [sl]
 8014998:	2b2a      	cmp	r3, #42	@ 0x2a
 801499a:	d015      	beq.n	80149c8 <_vfiprintf_r+0x120>
 801499c:	9a07      	ldr	r2, [sp, #28]
 801499e:	4654      	mov	r4, sl
 80149a0:	2000      	movs	r0, #0
 80149a2:	f04f 0c0a 	mov.w	ip, #10
 80149a6:	4621      	mov	r1, r4
 80149a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149ac:	3b30      	subs	r3, #48	@ 0x30
 80149ae:	2b09      	cmp	r3, #9
 80149b0:	d94b      	bls.n	8014a4a <_vfiprintf_r+0x1a2>
 80149b2:	b1b0      	cbz	r0, 80149e2 <_vfiprintf_r+0x13a>
 80149b4:	9207      	str	r2, [sp, #28]
 80149b6:	e014      	b.n	80149e2 <_vfiprintf_r+0x13a>
 80149b8:	eba0 0308 	sub.w	r3, r0, r8
 80149bc:	fa09 f303 	lsl.w	r3, r9, r3
 80149c0:	4313      	orrs	r3, r2
 80149c2:	9304      	str	r3, [sp, #16]
 80149c4:	46a2      	mov	sl, r4
 80149c6:	e7d2      	b.n	801496e <_vfiprintf_r+0xc6>
 80149c8:	9b03      	ldr	r3, [sp, #12]
 80149ca:	1d19      	adds	r1, r3, #4
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	9103      	str	r1, [sp, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	bfbb      	ittet	lt
 80149d4:	425b      	neglt	r3, r3
 80149d6:	f042 0202 	orrlt.w	r2, r2, #2
 80149da:	9307      	strge	r3, [sp, #28]
 80149dc:	9307      	strlt	r3, [sp, #28]
 80149de:	bfb8      	it	lt
 80149e0:	9204      	strlt	r2, [sp, #16]
 80149e2:	7823      	ldrb	r3, [r4, #0]
 80149e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80149e6:	d10a      	bne.n	80149fe <_vfiprintf_r+0x156>
 80149e8:	7863      	ldrb	r3, [r4, #1]
 80149ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80149ec:	d132      	bne.n	8014a54 <_vfiprintf_r+0x1ac>
 80149ee:	9b03      	ldr	r3, [sp, #12]
 80149f0:	1d1a      	adds	r2, r3, #4
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	9203      	str	r2, [sp, #12]
 80149f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80149fa:	3402      	adds	r4, #2
 80149fc:	9305      	str	r3, [sp, #20]
 80149fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014ad4 <_vfiprintf_r+0x22c>
 8014a02:	7821      	ldrb	r1, [r4, #0]
 8014a04:	2203      	movs	r2, #3
 8014a06:	4650      	mov	r0, sl
 8014a08:	f7eb fc62 	bl	80002d0 <memchr>
 8014a0c:	b138      	cbz	r0, 8014a1e <_vfiprintf_r+0x176>
 8014a0e:	9b04      	ldr	r3, [sp, #16]
 8014a10:	eba0 000a 	sub.w	r0, r0, sl
 8014a14:	2240      	movs	r2, #64	@ 0x40
 8014a16:	4082      	lsls	r2, r0
 8014a18:	4313      	orrs	r3, r2
 8014a1a:	3401      	adds	r4, #1
 8014a1c:	9304      	str	r3, [sp, #16]
 8014a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a22:	4829      	ldr	r0, [pc, #164]	@ (8014ac8 <_vfiprintf_r+0x220>)
 8014a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a28:	2206      	movs	r2, #6
 8014a2a:	f7eb fc51 	bl	80002d0 <memchr>
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	d03f      	beq.n	8014ab2 <_vfiprintf_r+0x20a>
 8014a32:	4b26      	ldr	r3, [pc, #152]	@ (8014acc <_vfiprintf_r+0x224>)
 8014a34:	bb1b      	cbnz	r3, 8014a7e <_vfiprintf_r+0x1d6>
 8014a36:	9b03      	ldr	r3, [sp, #12]
 8014a38:	3307      	adds	r3, #7
 8014a3a:	f023 0307 	bic.w	r3, r3, #7
 8014a3e:	3308      	adds	r3, #8
 8014a40:	9303      	str	r3, [sp, #12]
 8014a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a44:	443b      	add	r3, r7
 8014a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a48:	e76a      	b.n	8014920 <_vfiprintf_r+0x78>
 8014a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a4e:	460c      	mov	r4, r1
 8014a50:	2001      	movs	r0, #1
 8014a52:	e7a8      	b.n	80149a6 <_vfiprintf_r+0xfe>
 8014a54:	2300      	movs	r3, #0
 8014a56:	3401      	adds	r4, #1
 8014a58:	9305      	str	r3, [sp, #20]
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	f04f 0c0a 	mov.w	ip, #10
 8014a60:	4620      	mov	r0, r4
 8014a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a66:	3a30      	subs	r2, #48	@ 0x30
 8014a68:	2a09      	cmp	r2, #9
 8014a6a:	d903      	bls.n	8014a74 <_vfiprintf_r+0x1cc>
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d0c6      	beq.n	80149fe <_vfiprintf_r+0x156>
 8014a70:	9105      	str	r1, [sp, #20]
 8014a72:	e7c4      	b.n	80149fe <_vfiprintf_r+0x156>
 8014a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a78:	4604      	mov	r4, r0
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	e7f0      	b.n	8014a60 <_vfiprintf_r+0x1b8>
 8014a7e:	ab03      	add	r3, sp, #12
 8014a80:	9300      	str	r3, [sp, #0]
 8014a82:	462a      	mov	r2, r5
 8014a84:	4b12      	ldr	r3, [pc, #72]	@ (8014ad0 <_vfiprintf_r+0x228>)
 8014a86:	a904      	add	r1, sp, #16
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f3af 8000 	nop.w
 8014a8e:	4607      	mov	r7, r0
 8014a90:	1c78      	adds	r0, r7, #1
 8014a92:	d1d6      	bne.n	8014a42 <_vfiprintf_r+0x19a>
 8014a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a96:	07d9      	lsls	r1, r3, #31
 8014a98:	d405      	bmi.n	8014aa6 <_vfiprintf_r+0x1fe>
 8014a9a:	89ab      	ldrh	r3, [r5, #12]
 8014a9c:	059a      	lsls	r2, r3, #22
 8014a9e:	d402      	bmi.n	8014aa6 <_vfiprintf_r+0x1fe>
 8014aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014aa2:	f7ff f9c1 	bl	8013e28 <__retarget_lock_release_recursive>
 8014aa6:	89ab      	ldrh	r3, [r5, #12]
 8014aa8:	065b      	lsls	r3, r3, #25
 8014aaa:	f53f af1f 	bmi.w	80148ec <_vfiprintf_r+0x44>
 8014aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ab0:	e71e      	b.n	80148f0 <_vfiprintf_r+0x48>
 8014ab2:	ab03      	add	r3, sp, #12
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	462a      	mov	r2, r5
 8014ab8:	4b05      	ldr	r3, [pc, #20]	@ (8014ad0 <_vfiprintf_r+0x228>)
 8014aba:	a904      	add	r1, sp, #16
 8014abc:	4630      	mov	r0, r6
 8014abe:	f7ff fca7 	bl	8014410 <_printf_i>
 8014ac2:	e7e4      	b.n	8014a8e <_vfiprintf_r+0x1e6>
 8014ac4:	0802cced 	.word	0x0802cced
 8014ac8:	0802ccf7 	.word	0x0802ccf7
 8014acc:	00000000 	.word	0x00000000
 8014ad0:	08014885 	.word	0x08014885
 8014ad4:	0802ccf3 	.word	0x0802ccf3

08014ad8 <__swbuf_r>:
 8014ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ada:	460e      	mov	r6, r1
 8014adc:	4614      	mov	r4, r2
 8014ade:	4605      	mov	r5, r0
 8014ae0:	b118      	cbz	r0, 8014aea <__swbuf_r+0x12>
 8014ae2:	6a03      	ldr	r3, [r0, #32]
 8014ae4:	b90b      	cbnz	r3, 8014aea <__swbuf_r+0x12>
 8014ae6:	f7fe ffdf 	bl	8013aa8 <__sinit>
 8014aea:	69a3      	ldr	r3, [r4, #24]
 8014aec:	60a3      	str	r3, [r4, #8]
 8014aee:	89a3      	ldrh	r3, [r4, #12]
 8014af0:	071a      	lsls	r2, r3, #28
 8014af2:	d501      	bpl.n	8014af8 <__swbuf_r+0x20>
 8014af4:	6923      	ldr	r3, [r4, #16]
 8014af6:	b943      	cbnz	r3, 8014b0a <__swbuf_r+0x32>
 8014af8:	4621      	mov	r1, r4
 8014afa:	4628      	mov	r0, r5
 8014afc:	f000 f82a 	bl	8014b54 <__swsetup_r>
 8014b00:	b118      	cbz	r0, 8014b0a <__swbuf_r+0x32>
 8014b02:	f04f 37ff 	mov.w	r7, #4294967295
 8014b06:	4638      	mov	r0, r7
 8014b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b0a:	6823      	ldr	r3, [r4, #0]
 8014b0c:	6922      	ldr	r2, [r4, #16]
 8014b0e:	1a98      	subs	r0, r3, r2
 8014b10:	6963      	ldr	r3, [r4, #20]
 8014b12:	b2f6      	uxtb	r6, r6
 8014b14:	4283      	cmp	r3, r0
 8014b16:	4637      	mov	r7, r6
 8014b18:	dc05      	bgt.n	8014b26 <__swbuf_r+0x4e>
 8014b1a:	4621      	mov	r1, r4
 8014b1c:	4628      	mov	r0, r5
 8014b1e:	f7ff fe1b 	bl	8014758 <_fflush_r>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	d1ed      	bne.n	8014b02 <__swbuf_r+0x2a>
 8014b26:	68a3      	ldr	r3, [r4, #8]
 8014b28:	3b01      	subs	r3, #1
 8014b2a:	60a3      	str	r3, [r4, #8]
 8014b2c:	6823      	ldr	r3, [r4, #0]
 8014b2e:	1c5a      	adds	r2, r3, #1
 8014b30:	6022      	str	r2, [r4, #0]
 8014b32:	701e      	strb	r6, [r3, #0]
 8014b34:	6962      	ldr	r2, [r4, #20]
 8014b36:	1c43      	adds	r3, r0, #1
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d004      	beq.n	8014b46 <__swbuf_r+0x6e>
 8014b3c:	89a3      	ldrh	r3, [r4, #12]
 8014b3e:	07db      	lsls	r3, r3, #31
 8014b40:	d5e1      	bpl.n	8014b06 <__swbuf_r+0x2e>
 8014b42:	2e0a      	cmp	r6, #10
 8014b44:	d1df      	bne.n	8014b06 <__swbuf_r+0x2e>
 8014b46:	4621      	mov	r1, r4
 8014b48:	4628      	mov	r0, r5
 8014b4a:	f7ff fe05 	bl	8014758 <_fflush_r>
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d0d9      	beq.n	8014b06 <__swbuf_r+0x2e>
 8014b52:	e7d6      	b.n	8014b02 <__swbuf_r+0x2a>

08014b54 <__swsetup_r>:
 8014b54:	b538      	push	{r3, r4, r5, lr}
 8014b56:	4b29      	ldr	r3, [pc, #164]	@ (8014bfc <__swsetup_r+0xa8>)
 8014b58:	4605      	mov	r5, r0
 8014b5a:	6818      	ldr	r0, [r3, #0]
 8014b5c:	460c      	mov	r4, r1
 8014b5e:	b118      	cbz	r0, 8014b68 <__swsetup_r+0x14>
 8014b60:	6a03      	ldr	r3, [r0, #32]
 8014b62:	b90b      	cbnz	r3, 8014b68 <__swsetup_r+0x14>
 8014b64:	f7fe ffa0 	bl	8013aa8 <__sinit>
 8014b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b6c:	0719      	lsls	r1, r3, #28
 8014b6e:	d422      	bmi.n	8014bb6 <__swsetup_r+0x62>
 8014b70:	06da      	lsls	r2, r3, #27
 8014b72:	d407      	bmi.n	8014b84 <__swsetup_r+0x30>
 8014b74:	2209      	movs	r2, #9
 8014b76:	602a      	str	r2, [r5, #0]
 8014b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b7c:	81a3      	strh	r3, [r4, #12]
 8014b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b82:	e033      	b.n	8014bec <__swsetup_r+0x98>
 8014b84:	0758      	lsls	r0, r3, #29
 8014b86:	d512      	bpl.n	8014bae <__swsetup_r+0x5a>
 8014b88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b8a:	b141      	cbz	r1, 8014b9e <__swsetup_r+0x4a>
 8014b8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b90:	4299      	cmp	r1, r3
 8014b92:	d002      	beq.n	8014b9a <__swsetup_r+0x46>
 8014b94:	4628      	mov	r0, r5
 8014b96:	f7ff f975 	bl	8013e84 <_free_r>
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b9e:	89a3      	ldrh	r3, [r4, #12]
 8014ba0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014ba4:	81a3      	strh	r3, [r4, #12]
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	6063      	str	r3, [r4, #4]
 8014baa:	6923      	ldr	r3, [r4, #16]
 8014bac:	6023      	str	r3, [r4, #0]
 8014bae:	89a3      	ldrh	r3, [r4, #12]
 8014bb0:	f043 0308 	orr.w	r3, r3, #8
 8014bb4:	81a3      	strh	r3, [r4, #12]
 8014bb6:	6923      	ldr	r3, [r4, #16]
 8014bb8:	b94b      	cbnz	r3, 8014bce <__swsetup_r+0x7a>
 8014bba:	89a3      	ldrh	r3, [r4, #12]
 8014bbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bc4:	d003      	beq.n	8014bce <__swsetup_r+0x7a>
 8014bc6:	4621      	mov	r1, r4
 8014bc8:	4628      	mov	r0, r5
 8014bca:	f000 f88b 	bl	8014ce4 <__smakebuf_r>
 8014bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bd2:	f013 0201 	ands.w	r2, r3, #1
 8014bd6:	d00a      	beq.n	8014bee <__swsetup_r+0x9a>
 8014bd8:	2200      	movs	r2, #0
 8014bda:	60a2      	str	r2, [r4, #8]
 8014bdc:	6962      	ldr	r2, [r4, #20]
 8014bde:	4252      	negs	r2, r2
 8014be0:	61a2      	str	r2, [r4, #24]
 8014be2:	6922      	ldr	r2, [r4, #16]
 8014be4:	b942      	cbnz	r2, 8014bf8 <__swsetup_r+0xa4>
 8014be6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014bea:	d1c5      	bne.n	8014b78 <__swsetup_r+0x24>
 8014bec:	bd38      	pop	{r3, r4, r5, pc}
 8014bee:	0799      	lsls	r1, r3, #30
 8014bf0:	bf58      	it	pl
 8014bf2:	6962      	ldrpl	r2, [r4, #20]
 8014bf4:	60a2      	str	r2, [r4, #8]
 8014bf6:	e7f4      	b.n	8014be2 <__swsetup_r+0x8e>
 8014bf8:	2000      	movs	r0, #0
 8014bfa:	e7f7      	b.n	8014bec <__swsetup_r+0x98>
 8014bfc:	20000684 	.word	0x20000684

08014c00 <_raise_r>:
 8014c00:	291f      	cmp	r1, #31
 8014c02:	b538      	push	{r3, r4, r5, lr}
 8014c04:	4605      	mov	r5, r0
 8014c06:	460c      	mov	r4, r1
 8014c08:	d904      	bls.n	8014c14 <_raise_r+0x14>
 8014c0a:	2316      	movs	r3, #22
 8014c0c:	6003      	str	r3, [r0, #0]
 8014c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8014c12:	bd38      	pop	{r3, r4, r5, pc}
 8014c14:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014c16:	b112      	cbz	r2, 8014c1e <_raise_r+0x1e>
 8014c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014c1c:	b94b      	cbnz	r3, 8014c32 <_raise_r+0x32>
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f000 f830 	bl	8014c84 <_getpid_r>
 8014c24:	4622      	mov	r2, r4
 8014c26:	4601      	mov	r1, r0
 8014c28:	4628      	mov	r0, r5
 8014c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c2e:	f000 b817 	b.w	8014c60 <_kill_r>
 8014c32:	2b01      	cmp	r3, #1
 8014c34:	d00a      	beq.n	8014c4c <_raise_r+0x4c>
 8014c36:	1c59      	adds	r1, r3, #1
 8014c38:	d103      	bne.n	8014c42 <_raise_r+0x42>
 8014c3a:	2316      	movs	r3, #22
 8014c3c:	6003      	str	r3, [r0, #0]
 8014c3e:	2001      	movs	r0, #1
 8014c40:	e7e7      	b.n	8014c12 <_raise_r+0x12>
 8014c42:	2100      	movs	r1, #0
 8014c44:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014c48:	4620      	mov	r0, r4
 8014c4a:	4798      	blx	r3
 8014c4c:	2000      	movs	r0, #0
 8014c4e:	e7e0      	b.n	8014c12 <_raise_r+0x12>

08014c50 <raise>:
 8014c50:	4b02      	ldr	r3, [pc, #8]	@ (8014c5c <raise+0xc>)
 8014c52:	4601      	mov	r1, r0
 8014c54:	6818      	ldr	r0, [r3, #0]
 8014c56:	f7ff bfd3 	b.w	8014c00 <_raise_r>
 8014c5a:	bf00      	nop
 8014c5c:	20000684 	.word	0x20000684

08014c60 <_kill_r>:
 8014c60:	b538      	push	{r3, r4, r5, lr}
 8014c62:	4d07      	ldr	r5, [pc, #28]	@ (8014c80 <_kill_r+0x20>)
 8014c64:	2300      	movs	r3, #0
 8014c66:	4604      	mov	r4, r0
 8014c68:	4608      	mov	r0, r1
 8014c6a:	4611      	mov	r1, r2
 8014c6c:	602b      	str	r3, [r5, #0]
 8014c6e:	f7ed fc45 	bl	80024fc <_kill>
 8014c72:	1c43      	adds	r3, r0, #1
 8014c74:	d102      	bne.n	8014c7c <_kill_r+0x1c>
 8014c76:	682b      	ldr	r3, [r5, #0]
 8014c78:	b103      	cbz	r3, 8014c7c <_kill_r+0x1c>
 8014c7a:	6023      	str	r3, [r4, #0]
 8014c7c:	bd38      	pop	{r3, r4, r5, pc}
 8014c7e:	bf00      	nop
 8014c80:	20013804 	.word	0x20013804

08014c84 <_getpid_r>:
 8014c84:	f7ed bc32 	b.w	80024ec <_getpid>

08014c88 <_malloc_usable_size_r>:
 8014c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c8c:	1f18      	subs	r0, r3, #4
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	bfbc      	itt	lt
 8014c92:	580b      	ldrlt	r3, [r1, r0]
 8014c94:	18c0      	addlt	r0, r0, r3
 8014c96:	4770      	bx	lr

08014c98 <__swhatbuf_r>:
 8014c98:	b570      	push	{r4, r5, r6, lr}
 8014c9a:	460c      	mov	r4, r1
 8014c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ca0:	2900      	cmp	r1, #0
 8014ca2:	b096      	sub	sp, #88	@ 0x58
 8014ca4:	4615      	mov	r5, r2
 8014ca6:	461e      	mov	r6, r3
 8014ca8:	da0d      	bge.n	8014cc6 <__swhatbuf_r+0x2e>
 8014caa:	89a3      	ldrh	r3, [r4, #12]
 8014cac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014cb0:	f04f 0100 	mov.w	r1, #0
 8014cb4:	bf14      	ite	ne
 8014cb6:	2340      	movne	r3, #64	@ 0x40
 8014cb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014cbc:	2000      	movs	r0, #0
 8014cbe:	6031      	str	r1, [r6, #0]
 8014cc0:	602b      	str	r3, [r5, #0]
 8014cc2:	b016      	add	sp, #88	@ 0x58
 8014cc4:	bd70      	pop	{r4, r5, r6, pc}
 8014cc6:	466a      	mov	r2, sp
 8014cc8:	f000 f848 	bl	8014d5c <_fstat_r>
 8014ccc:	2800      	cmp	r0, #0
 8014cce:	dbec      	blt.n	8014caa <__swhatbuf_r+0x12>
 8014cd0:	9901      	ldr	r1, [sp, #4]
 8014cd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014cd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014cda:	4259      	negs	r1, r3
 8014cdc:	4159      	adcs	r1, r3
 8014cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ce2:	e7eb      	b.n	8014cbc <__swhatbuf_r+0x24>

08014ce4 <__smakebuf_r>:
 8014ce4:	898b      	ldrh	r3, [r1, #12]
 8014ce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ce8:	079d      	lsls	r5, r3, #30
 8014cea:	4606      	mov	r6, r0
 8014cec:	460c      	mov	r4, r1
 8014cee:	d507      	bpl.n	8014d00 <__smakebuf_r+0x1c>
 8014cf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014cf4:	6023      	str	r3, [r4, #0]
 8014cf6:	6123      	str	r3, [r4, #16]
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	6163      	str	r3, [r4, #20]
 8014cfc:	b003      	add	sp, #12
 8014cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d00:	ab01      	add	r3, sp, #4
 8014d02:	466a      	mov	r2, sp
 8014d04:	f7ff ffc8 	bl	8014c98 <__swhatbuf_r>
 8014d08:	9f00      	ldr	r7, [sp, #0]
 8014d0a:	4605      	mov	r5, r0
 8014d0c:	4639      	mov	r1, r7
 8014d0e:	4630      	mov	r0, r6
 8014d10:	f7ff f92c 	bl	8013f6c <_malloc_r>
 8014d14:	b948      	cbnz	r0, 8014d2a <__smakebuf_r+0x46>
 8014d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d1a:	059a      	lsls	r2, r3, #22
 8014d1c:	d4ee      	bmi.n	8014cfc <__smakebuf_r+0x18>
 8014d1e:	f023 0303 	bic.w	r3, r3, #3
 8014d22:	f043 0302 	orr.w	r3, r3, #2
 8014d26:	81a3      	strh	r3, [r4, #12]
 8014d28:	e7e2      	b.n	8014cf0 <__smakebuf_r+0xc>
 8014d2a:	89a3      	ldrh	r3, [r4, #12]
 8014d2c:	6020      	str	r0, [r4, #0]
 8014d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014d32:	81a3      	strh	r3, [r4, #12]
 8014d34:	9b01      	ldr	r3, [sp, #4]
 8014d36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014d3a:	b15b      	cbz	r3, 8014d54 <__smakebuf_r+0x70>
 8014d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d40:	4630      	mov	r0, r6
 8014d42:	f000 f81d 	bl	8014d80 <_isatty_r>
 8014d46:	b128      	cbz	r0, 8014d54 <__smakebuf_r+0x70>
 8014d48:	89a3      	ldrh	r3, [r4, #12]
 8014d4a:	f023 0303 	bic.w	r3, r3, #3
 8014d4e:	f043 0301 	orr.w	r3, r3, #1
 8014d52:	81a3      	strh	r3, [r4, #12]
 8014d54:	89a3      	ldrh	r3, [r4, #12]
 8014d56:	431d      	orrs	r5, r3
 8014d58:	81a5      	strh	r5, [r4, #12]
 8014d5a:	e7cf      	b.n	8014cfc <__smakebuf_r+0x18>

08014d5c <_fstat_r>:
 8014d5c:	b538      	push	{r3, r4, r5, lr}
 8014d5e:	4d07      	ldr	r5, [pc, #28]	@ (8014d7c <_fstat_r+0x20>)
 8014d60:	2300      	movs	r3, #0
 8014d62:	4604      	mov	r4, r0
 8014d64:	4608      	mov	r0, r1
 8014d66:	4611      	mov	r1, r2
 8014d68:	602b      	str	r3, [r5, #0]
 8014d6a:	f7ed fc27 	bl	80025bc <_fstat>
 8014d6e:	1c43      	adds	r3, r0, #1
 8014d70:	d102      	bne.n	8014d78 <_fstat_r+0x1c>
 8014d72:	682b      	ldr	r3, [r5, #0]
 8014d74:	b103      	cbz	r3, 8014d78 <_fstat_r+0x1c>
 8014d76:	6023      	str	r3, [r4, #0]
 8014d78:	bd38      	pop	{r3, r4, r5, pc}
 8014d7a:	bf00      	nop
 8014d7c:	20013804 	.word	0x20013804

08014d80 <_isatty_r>:
 8014d80:	b538      	push	{r3, r4, r5, lr}
 8014d82:	4d06      	ldr	r5, [pc, #24]	@ (8014d9c <_isatty_r+0x1c>)
 8014d84:	2300      	movs	r3, #0
 8014d86:	4604      	mov	r4, r0
 8014d88:	4608      	mov	r0, r1
 8014d8a:	602b      	str	r3, [r5, #0]
 8014d8c:	f7ed fc26 	bl	80025dc <_isatty>
 8014d90:	1c43      	adds	r3, r0, #1
 8014d92:	d102      	bne.n	8014d9a <_isatty_r+0x1a>
 8014d94:	682b      	ldr	r3, [r5, #0]
 8014d96:	b103      	cbz	r3, 8014d9a <_isatty_r+0x1a>
 8014d98:	6023      	str	r3, [r4, #0]
 8014d9a:	bd38      	pop	{r3, r4, r5, pc}
 8014d9c:	20013804 	.word	0x20013804

08014da0 <sqrtf>:
 8014da0:	b508      	push	{r3, lr}
 8014da2:	ed2d 8b02 	vpush	{d8}
 8014da6:	eeb0 8a40 	vmov.f32	s16, s0
 8014daa:	f000 f817 	bl	8014ddc <__ieee754_sqrtf>
 8014dae:	eeb4 8a48 	vcmp.f32	s16, s16
 8014db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014db6:	d60c      	bvs.n	8014dd2 <sqrtf+0x32>
 8014db8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014dd8 <sqrtf+0x38>
 8014dbc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc4:	d505      	bpl.n	8014dd2 <sqrtf+0x32>
 8014dc6:	f7ff f803 	bl	8013dd0 <__errno>
 8014dca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014dce:	2321      	movs	r3, #33	@ 0x21
 8014dd0:	6003      	str	r3, [r0, #0]
 8014dd2:	ecbd 8b02 	vpop	{d8}
 8014dd6:	bd08      	pop	{r3, pc}
 8014dd8:	00000000 	.word	0x00000000

08014ddc <__ieee754_sqrtf>:
 8014ddc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014de0:	4770      	bx	lr
	...

08014de4 <_init>:
 8014de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014de6:	bf00      	nop
 8014de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014dea:	bc08      	pop	{r3}
 8014dec:	469e      	mov	lr, r3
 8014dee:	4770      	bx	lr

08014df0 <_fini>:
 8014df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014df2:	bf00      	nop
 8014df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014df6:	bc08      	pop	{r3}
 8014df8:	469e      	mov	lr, r3
 8014dfa:	4770      	bx	lr
