
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dc4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006f64  08006f64  00007f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa4  08006fa4  00008028  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa4  08006fa4  00007fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fac  08006fac  00008028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fac  08006fac  00007fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fb0  08006fb0  00007fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08006fb4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dd14  20000028  08006fdc  00008028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dd3c  08006fdc  00008d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b727  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004175  00000000  00000000  0002377f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001950  00000000  00000000  000278f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ce  00000000  00000000  00029248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5fc  00000000  00000000  0002a616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021bc4  00000000  00000000  00046c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adb64  00000000  00000000  000687d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011633a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069f0  00000000  00000000  00116380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0011cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f4c 	.word	0x08006f4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	08006f4c 	.word	0x08006f4c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	@ (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000044 	.word	0x20000044
 8000500:	20000098 	.word	0x20000098

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f001 fb13 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f847 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fa59 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000516:	f000 fa37 	bl	8000988 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800051a:	f000 fa0b 	bl	8000934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800051e:	f000 f8fd 	bl	800071c <MX_I2C1_Init>
  MX_SPI3_Init();
 8000522:	f000 f983 	bl	800082c <MX_SPI3_Init>
  MX_FATFS_Init();
 8000526:	f005 f9f1 	bl	800590c <MX_FATFS_Init>
  MX_RTC_Init();
 800052a:	f000 f925 	bl	8000778 <MX_RTC_Init>
  MX_ADC1_Init();
 800052e:	f000 f8a3 	bl	8000678 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000532:	f000 f9b1 	bl	8000898 <MX_TIM3_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_state_t));
 8000536:	2200      	movs	r2, #0
 8000538:	2101      	movs	r1, #1
 800053a:	2001      	movs	r0, #1
 800053c:	f005 fb8e 	bl	8005c5c <xQueueGenericCreate>
 8000540:	4603      	mov	r3, r0
 8000542:	4a11      	ldr	r2, [pc, #68]	@ (8000588 <main+0x84>)
 8000544:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(uint32_t));
 8000546:	2200      	movs	r2, #0
 8000548:	2104      	movs	r1, #4
 800054a:	2001      	movs	r0, #1
 800054c:	f005 fb86 	bl	8005c5c <xQueueGenericCreate>
 8000550:	4603      	mov	r3, r0
 8000552:	4a0e      	ldr	r2, [pc, #56]	@ (800058c <main+0x88>)
 8000554:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8000556:	2300      	movs	r3, #0
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2304      	movs	r3, #4
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2280      	movs	r2, #128	@ 0x80
 8000562:	490b      	ldr	r1, [pc, #44]	@ (8000590 <main+0x8c>)
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <main+0x90>)
 8000566:	f005 fc33 	bl	8005dd0 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  //xTaskCreate(user_check_task, "Tarea 02", 3 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  //xTaskCreate(input_sequence_scan, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 800056a:	2300      	movs	r3, #0
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2300      	movs	r3, #0
 8000570:	9300      	str	r3, [sp, #0]
 8000572:	2300      	movs	r3, #0
 8000574:	2280      	movs	r2, #128	@ 0x80
 8000576:	4908      	ldr	r1, [pc, #32]	@ (8000598 <main+0x94>)
 8000578:	4808      	ldr	r0, [pc, #32]	@ (800059c <main+0x98>)
 800057a:	f005 fc29 	bl	8005dd0 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 800057e:	f005 fd5f 	bl	8006040 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000582:	bf00      	nop
 8000584:	e7fd      	b.n	8000582 <main+0x7e>
 8000586:	bf00      	nop
 8000588:	200004a0 	.word	0x200004a0
 800058c:	2000049c 	.word	0x2000049c
 8000590:	08006f64 	.word	0x08006f64
 8000594:	08001b29 	.word	0x08001b29
 8000598:	08006f70 	.word	0x08006f70
 800059c:	08000b11 	.word	0x08000b11

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	@ 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	@ 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f006 fca0 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <SystemClock_Config+0xd0>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	4a28      	ldr	r2, [pc, #160]	@ (8000670 <SystemClock_Config+0xd0>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005ec:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <SystemClock_Config+0xd4>)
 80005ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SystemClock_Config+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000600:	2309      	movs	r3, #9
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000604:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800060a:	2301      	movs	r3, #1
 800060c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800061c:	2340      	movs	r3, #64	@ 0x40
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000624:	2307      	movs	r3, #7
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fdef 	bl	8003210 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000638:	f000 fa97 	bl	8000b6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f003 f851 	bl	8003700 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000664:	f000 fa81 	bl	8000b6a <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	@ 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068a:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <MX_ADC1_Init+0x9c>)
 800068c:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <MX_ADC1_Init+0xa0>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000690:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_ADC1_Init+0x9c>)
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000696:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <MX_ADC1_Init+0x9c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800069c:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <MX_ADC1_Init+0x9c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006b0:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80006b8:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80006be:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c6:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006da:	480e      	ldr	r0, [pc, #56]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006dc:	f001 fa90 	bl	8001c00 <HAL_ADC_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80006e6:	f000 fa40 	bl	8000b6a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80006f2:	2302      	movs	r3, #2
 80006f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	@ (8000714 <MX_ADC1_Init+0x9c>)
 80006fc:	f001 fc42 	bl	8001f84 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000706:	f000 fa30 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000298 	.word	0x20000298
 8000718:	40012000 	.word	0x40012000

0800071c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_I2C1_Init+0x50>)
 8000722:	4a13      	ldr	r2, [pc, #76]	@ (8000770 <MX_I2C1_Init+0x54>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_I2C1_Init+0x50>)
 8000728:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <MX_I2C1_Init+0x58>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_I2C1_Init+0x50>)
 800073a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <MX_I2C1_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_I2C1_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_I2C1_Init+0x50>)
 800075a:	f002 fc15 	bl	8002f88 <HAL_I2C_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000764:	f000 fa01 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000340 	.word	0x20000340
 8000770:	40005400 	.word	0x40005400
 8000774:	00061a80 	.word	0x00061a80

08000778 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <MX_RTC_Init+0xac>)
 8000792:	4a25      	ldr	r2, [pc, #148]	@ (8000828 <MX_RTC_Init+0xb0>)
 8000794:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <MX_RTC_Init+0xac>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800079c:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <MX_RTC_Init+0xac>)
 800079e:	227f      	movs	r2, #127	@ 0x7f
 80007a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_RTC_Init+0xac>)
 80007a4:	22ff      	movs	r2, #255	@ 0xff
 80007a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_RTC_Init+0xac>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_RTC_Init+0xac>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_RTC_Init+0xac>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007ba:	481a      	ldr	r0, [pc, #104]	@ (8000824 <MX_RTC_Init+0xac>)
 80007bc:	f003 fae0 	bl	8003d80 <HAL_RTC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f9d0 	bl	8000b6a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80007ca:	230f      	movs	r3, #15
 80007cc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	480f      	ldr	r0, [pc, #60]	@ (8000824 <MX_RTC_Init+0xac>)
 80007e6:	f003 fb4e 	bl	8003e86 <HAL_RTC_SetTime>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80007f0:	f000 f9bb 	bl	8000b6a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80007f4:	2306      	movs	r3, #6
 80007f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80007f8:	2307      	movs	r3, #7
 80007fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 80007fc:	2306      	movs	r3, #6
 80007fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8000800:	2318      	movs	r3, #24
 8000802:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_RTC_Init+0xac>)
 800080c:	f003 fbd5 	bl	8003fba <HAL_RTC_SetDate>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000816:	f000 f9a8 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000394 	.word	0x20000394
 8000828:	40002800 	.word	0x40002800

0800082c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000832:	4a18      	ldr	r2, [pc, #96]	@ (8000894 <MX_SPI3_Init+0x68>)
 8000834:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800083c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_SPI3_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800085c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000860:	2210      	movs	r2, #16
 8000862:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000864:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_SPI3_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_SPI3_Init+0x64>)
 8000878:	220a      	movs	r2, #10
 800087a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_SPI3_Init+0x64>)
 800087e:	f003 fcc1 	bl	8004204 <HAL_SPI_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000888:	f000 f96f 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200003b4 	.word	0x200003b4
 8000894:	40003c00 	.word	0x40003c00

08000898 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_TIM3_Init+0x94>)
 80008b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000930 <MX_TIM3_Init+0x98>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_TIM3_Init+0x94>)
 80008bc:	2200      	movs	r2, #0
 80008be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_TIM3_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000 - 1;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_TIM3_Init+0x94>)
 80008c8:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80008cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_TIM3_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_TIM3_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008da:	4814      	ldr	r0, [pc, #80]	@ (800092c <MX_TIM3_Init+0x94>)
 80008dc:	f004 f8ea 	bl	8004ab4 <HAL_TIM_Base_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 f940 	bl	8000b6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_TIM3_Init+0x94>)
 80008f8:	f004 faad 	bl	8004e56 <HAL_TIM_ConfigClockSource>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 f932 	bl	8000b6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000906:	2320      	movs	r3, #32
 8000908:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	@ (800092c <MX_TIM3_Init+0x94>)
 8000914:	f004 fcb4 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800091e:	f000 f924 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000040c 	.word	0x2000040c
 8000930:	40000400 	.word	0x40000400

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f004 fd0a 	bl	8005384 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f8f8 	bl	8000b6a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000454 	.word	0x20000454
 8000984:	40004400 	.word	0x40004400

08000988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_DMA_Init+0x3c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <MX_DMA_Init+0x3c>)
 8000998:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_DMA_Init+0x3c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2105      	movs	r1, #5
 80009ae:	2038      	movs	r0, #56	@ 0x38
 80009b0:	f001 fdc8 	bl	8002544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009b4:	2038      	movs	r0, #56	@ 0x38
 80009b6:	f001 fde1 	bl	800257c <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	4b47      	ldr	r3, [pc, #284]	@ (8000b00 <MX_GPIO_Init+0x138>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a46      	ldr	r2, [pc, #280]	@ (8000b00 <MX_GPIO_Init+0x138>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b44      	ldr	r3, [pc, #272]	@ (8000b00 <MX_GPIO_Init+0x138>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b40      	ldr	r3, [pc, #256]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a3f      	ldr	r2, [pc, #252]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b39      	ldr	r3, [pc, #228]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a38      	ldr	r2, [pc, #224]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b36      	ldr	r3, [pc, #216]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b32      	ldr	r3, [pc, #200]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a31      	ldr	r2, [pc, #196]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b2f      	ldr	r3, [pc, #188]	@ (8000b00 <MX_GPIO_Init+0x138>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2120      	movs	r1, #32
 8000a52:	482c      	ldr	r0, [pc, #176]	@ (8000b04 <MX_GPIO_Init+0x13c>)
 8000a54:	f002 fa7e 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000a5e:	482a      	ldr	r0, [pc, #168]	@ (8000b08 <MX_GPIO_Init+0x140>)
 8000a60:	f002 fa78 	bl	8002f54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2110      	movs	r1, #16
 8000a68:	4828      	ldr	r0, [pc, #160]	@ (8000b0c <MX_GPIO_Init+0x144>)
 8000a6a:	f002 fa73 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a74:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4820      	ldr	r0, [pc, #128]	@ (8000b08 <MX_GPIO_Init+0x140>)
 8000a86:	f002 f8e1 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	481a      	ldr	r0, [pc, #104]	@ (8000b08 <MX_GPIO_Init+0x140>)
 8000a9e:	f002 f8d5 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa2:	2320      	movs	r3, #32
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4812      	ldr	r0, [pc, #72]	@ (8000b04 <MX_GPIO_Init+0x13c>)
 8000aba:	f002 f8c7 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000abe:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000ac2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <MX_GPIO_Init+0x140>)
 8000ad8:	f002 f8b8 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : cs_Pin */
  GPIO_InitStruct.Pin = cs_Pin;
 8000adc:	2310      	movs	r3, #16
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(cs_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4806      	ldr	r0, [pc, #24]	@ (8000b0c <MX_GPIO_Init+0x144>)
 8000af4:	f002 f8aa 	bl	8002c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	@ 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020000 	.word	0x40020000
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	while(1);
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <idle_task+0x8>

08000b1c <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8000b24:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <HAL_ADC_ConvCpltCallback+0x24>)
 8000b26:	f004 f877 	bl	8004c18 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8000b2a:	4806      	ldr	r0, [pc, #24]	@ (8000b44 <HAL_ADC_ConvCpltCallback+0x28>)
 8000b2c:	f001 f9bb 	bl	8001ea6 <HAL_ADC_Stop_DMA>
	conv_cplt_flag = 1;
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000040c 	.word	0x2000040c
 8000b44:	20000298 	.word	0x20000298
 8000b48:	200004a4 	.word	0x200004a4

08000b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b5c:	d101      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5e:	f001 f80b 	bl	8001b78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6e:	b672      	cpsid	i
}
 8000b70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b72:	bf00      	nop
 8000b74:	e7fd      	b.n	8000b72 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_MspInit+0x54>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_MspInit+0x54>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_MspInit+0x54>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_MspInit+0x54>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_MspInit+0x54>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_MspInit+0x54>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	210f      	movs	r1, #15
 8000bba:	f06f 0001 	mvn.w	r0, #1
 8000bbe:	f001 fcc1 	bl	8002544 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a32      	ldr	r2, [pc, #200]	@ (8000cb8 <HAL_ADC_MspInit+0xe8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d15e      	bne.n	8000cb0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b31      	ldr	r3, [pc, #196]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a30      	ldr	r2, [pc, #192]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b2e      	ldr	r3, [pc, #184]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a29      	ldr	r2, [pc, #164]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <HAL_ADC_MspInit+0xec>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4820      	ldr	r0, [pc, #128]	@ (8000cc0 <HAL_ADC_MspInit+0xf0>)
 8000c3e:	f002 f805 	bl	8002c4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c42:	4b20      	ldr	r3, [pc, #128]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c44:	4a20      	ldr	r2, [pc, #128]	@ (8000cc8 <HAL_ADC_MspInit+0xf8>)
 8000c46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c6a:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c84:	480f      	ldr	r0, [pc, #60]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c86:	f001 fc87 	bl	8002598 <HAL_DMA_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000c90:	f7ff ff6b 	bl	8000b6a <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c98:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_ADC_MspInit+0xf4>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	2012      	movs	r0, #18
 8000ca6:	f001 fc4d 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000caa:	2012      	movs	r0, #18
 8000cac:	f001 fc66 	bl	800257c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3728      	adds	r7, #40	@ 0x28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40012000 	.word	0x40012000
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	200002e0 	.word	0x200002e0
 8000cc8:	40026410 	.word	0x40026410

08000ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	@ (8000d50 <HAL_I2C_MspInit+0x84>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d12b      	bne.n	8000d46 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0a:	23c0      	movs	r3, #192	@ 0xc0
 8000d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0e:	2312      	movs	r3, #18
 8000d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <HAL_I2C_MspInit+0x8c>)
 8000d26:	f001 ff91 	bl	8002c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_I2C_MspInit+0x88>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	@ 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40005400 	.word	0x40005400
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020400 	.word	0x40020400

08000d5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <HAL_RTC_MspInit+0x50>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d111      	bne.n	8000da2 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d86:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 ff09 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d98:	f7ff fee7 	bl	8000b6a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <HAL_RTC_MspInit+0x54>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40002800 	.word	0x40002800
 8000db0:	42470e3c 	.word	0x42470e3c

08000db4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	@ (8000e38 <HAL_SPI_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12c      	bne.n	8000e30 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <HAL_SPI_MspInit+0x88>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a17      	ldr	r2, [pc, #92]	@ (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <HAL_SPI_MspInit+0x88>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <HAL_SPI_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <HAL_SPI_MspInit+0x88>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_SPI_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e0e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e20:	2306      	movs	r3, #6
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <HAL_SPI_MspInit+0x8c>)
 8000e2c:	f001 ff0e 	bl	8002c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	@ 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40003c00 	.word	0x40003c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020800 	.word	0x40020800

08000e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0e      	ldr	r2, [pc, #56]	@ (8000e8c <HAL_TIM_Base_MspInit+0x48>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d115      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_TIM_Base_MspInit+0x4c>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000e90 <HAL_TIM_Base_MspInit+0x4c>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e66:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_TIM_Base_MspInit+0x4c>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2105      	movs	r1, #5
 8000e76:	201d      	movs	r0, #29
 8000e78:	f001 fb64 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e7c:	201d      	movs	r0, #29
 8000e7e:	f001 fb7d 	bl	800257c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	@ (8000f18 <HAL_UART_MspInit+0x84>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12b      	bne.n	8000f0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_UART_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efe:	2307      	movs	r3, #7
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <HAL_UART_MspInit+0x8c>)
 8000f0a:	f001 fe9f 	bl	8002c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000

08000f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	@ 0x38
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	4b34      	ldr	r3, [pc, #208]	@ (800100c <HAL_InitTick+0xe8>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	4a33      	ldr	r2, [pc, #204]	@ (800100c <HAL_InitTick+0xe8>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f44:	4b31      	ldr	r3, [pc, #196]	@ (800100c <HAL_InitTick+0xe8>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f50:	f107 0210 	add.w	r2, r7, #16
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fdf0 	bl	8003b40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d103      	bne.n	8000f72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f6a:	f002 fdc1 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8000f6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f70:	e004      	b.n	8000f7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f72:	f002 fdbd 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8000f76:	4603      	mov	r3, r0
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f7e:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <HAL_InitTick+0xec>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	0c9b      	lsrs	r3, r3, #18
 8000f86:	3b01      	subs	r3, #1
 8000f88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f8a:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <HAL_InitTick+0xf0>)
 8000f8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <HAL_InitTick+0xf0>)
 8000f94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f98:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001014 <HAL_InitTick+0xf0>)
 8000f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f9e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <HAL_InitTick+0xf0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8001014 <HAL_InitTick+0xf0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_InitTick+0xf0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000fb2:	4818      	ldr	r0, [pc, #96]	@ (8001014 <HAL_InitTick+0xf0>)
 8000fb4:	f003 fd7e 	bl	8004ab4 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d11b      	bne.n	8000ffe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000fc6:	4813      	ldr	r0, [pc, #76]	@ (8001014 <HAL_InitTick+0xf0>)
 8000fc8:	f003 fdc4 	bl	8004b54 <HAL_TIM_Base_Start_IT>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d111      	bne.n	8000ffe <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fda:	201c      	movs	r0, #28
 8000fdc:	f001 face 	bl	800257c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	d808      	bhi.n	8000ff8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	201c      	movs	r0, #28
 8000fec:	f001 faaa 	bl	8002544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff0:	4a09      	ldr	r2, [pc, #36]	@ (8001018 <HAL_InitTick+0xf4>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e002      	b.n	8000ffe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001002:	4618      	mov	r0, r3
 8001004:	3738      	adds	r7, #56	@ 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	431bde83 	.word	0x431bde83
 8001014:	200004a8 	.word	0x200004a8
 8001018:	20000008 	.word	0x20000008

0800101c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <SDTimer_Handler+0x40>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d006      	beq.n	8001038 <SDTimer_Handler+0x1c>
    Timer1--;
 800102a:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <SDTimer_Handler+0x40>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	3b01      	subs	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b09      	ldr	r3, [pc, #36]	@ (800105c <SDTimer_Handler+0x40>)
 8001036:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001038:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <SDTimer_Handler+0x44>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <SDTimer_Handler+0x34>
    Timer2--;
 8001042:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <SDTimer_Handler+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	3b01      	subs	r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <SDTimer_Handler+0x44>)
 800104e:	701a      	strb	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200004f1 	.word	0x200004f1
 8001060:	200004f2 	.word	0x200004f2

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010a0:	4802      	ldr	r0, [pc, #8]	@ (80010ac <ADC_IRQHandler+0x10>)
 80010a2:	f000 fdf0 	bl	8001c86 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000298 	.word	0x20000298

080010b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 80010b4:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <TIM2_IRQHandler+0x30>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <TIM2_IRQHandler+0x30>)
 80010c0:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <TIM2_IRQHandler+0x30>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b09      	cmp	r3, #9
 80010ca:	d904      	bls.n	80010d6 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <TIM2_IRQHandler+0x30>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 80010d2:	f7ff ffa3 	bl	800101c <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010d6:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <TIM2_IRQHandler+0x34>)
 80010d8:	f003 fdcd 	bl	8004c76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200004f0 	.word	0x200004f0
 80010e4:	200004a8 	.word	0x200004a8

080010e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <TIM3_IRQHandler+0x10>)
 80010ee:	f003 fdc2 	bl	8004c76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000040c 	.word	0x2000040c

080010fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <DMA2_Stream0_IRQHandler+0x10>)
 8001102:	f001 fb67 	bl	80027d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200002e0 	.word	0x200002e0

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001138:	f7ff ffea 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	@ (8001180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001162:	f005 fecf 	bl	8006f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff f9cd 	bl	8000504 <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800116c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001178:	08006fb4 	.word	0x08006fb4
  ldr r2, =_sbss
 800117c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001180:	2000dd3c 	.word	0x2000dd3c

08001184 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <DMA1_Stream0_IRQHandler>
	...

08001188 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2110      	movs	r1, #16
 8001190:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <SELECT+0x18>)
 8001192:	f001 fedf 	bl	8002f54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001196:	2001      	movs	r0, #1
 8001198:	f000 fd0e 	bl	8001bb8 <HAL_Delay>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020400 	.word	0x40020400

080011a4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2110      	movs	r1, #16
 80011ac:	4803      	ldr	r0, [pc, #12]	@ (80011bc <DESELECT+0x18>)
 80011ae:	f001 fed1 	bl	8002f54 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 fd00 	bl	8001bb8 <HAL_Delay>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020400 	.word	0x40020400

080011c0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80011ca:	bf00      	nop
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <SPI_TxByte+0x30>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d1f8      	bne.n	80011cc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80011da:	1df9      	adds	r1, r7, #7
 80011dc:	2364      	movs	r3, #100	@ 0x64
 80011de:	2201      	movs	r2, #1
 80011e0:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <SPI_TxByte+0x30>)
 80011e2:	f003 f898 	bl	8004316 <HAL_SPI_Transmit>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200003b4 	.word	0x200003b4

080011f4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001200:	bf00      	nop
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <SPI_TxBuffer+0x30>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b02      	cmp	r3, #2
 800120e:	d1f8      	bne.n	8001202 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001210:	887a      	ldrh	r2, [r7, #2]
 8001212:	2364      	movs	r3, #100	@ 0x64
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <SPI_TxBuffer+0x30>)
 8001218:	f003 f87d 	bl	8004316 <HAL_SPI_Transmit>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200003b4 	.word	0x200003b4

08001228 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800122e:	23ff      	movs	r3, #255	@ 0xff
 8001230:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001232:	bf00      	nop
 8001234:	4b09      	ldr	r3, [pc, #36]	@ (800125c <SPI_RxByte+0x34>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b02      	cmp	r3, #2
 8001240:	d1f8      	bne.n	8001234 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001242:	1dba      	adds	r2, r7, #6
 8001244:	1df9      	adds	r1, r7, #7
 8001246:	2364      	movs	r3, #100	@ 0x64
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2301      	movs	r3, #1
 800124c:	4803      	ldr	r0, [pc, #12]	@ (800125c <SPI_RxByte+0x34>)
 800124e:	f003 f9a5 	bl	800459c <HAL_SPI_TransmitReceive>

	return data;
 8001252:	79bb      	ldrb	r3, [r7, #6]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200003b4 	.word	0x200003b4

08001260 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001268:	f7ff ffde 	bl	8001228 <SPI_RxByte>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	701a      	strb	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001282:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <SD_ReadyWait+0x30>)
 8001284:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001288:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800128a:	f7ff ffcd 	bl	8001228 <SPI_RxByte>
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2bff      	cmp	r3, #255	@ 0xff
 8001296:	d004      	beq.n	80012a2 <SD_ReadyWait+0x26>
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SD_ReadyWait+0x30>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f3      	bne.n	800128a <SD_ReadyWait+0xe>

	return res;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200004f2 	.word	0x200004f2

080012b0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80012b6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80012ba:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80012bc:	f7ff ff72 	bl	80011a4 <DESELECT>
	for(int i = 0; i < 10; i++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	e005      	b.n	80012d2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80012c6:	20ff      	movs	r0, #255	@ 0xff
 80012c8:	f7ff ff7a 	bl	80011c0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	ddf6      	ble.n	80012c6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80012d8:	f7ff ff56 	bl	8001188 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80012dc:	2340      	movs	r3, #64	@ 0x40
 80012de:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80012f0:	2395      	movs	r3, #149	@ 0x95
 80012f2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80012f4:	463b      	mov	r3, r7
 80012f6:	2106      	movs	r1, #6
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff7b 	bl	80011f4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80012fe:	e002      	b.n	8001306 <SD_PowerOn+0x56>
	{
		cnt--;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3b01      	subs	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001306:	f7ff ff8f 	bl	8001228 <SPI_RxByte>
 800130a:	4603      	mov	r3, r0
 800130c:	2b01      	cmp	r3, #1
 800130e:	d002      	beq.n	8001316 <SD_PowerOn+0x66>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f4      	bne.n	8001300 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001316:	f7ff ff45 	bl	80011a4 <DESELECT>
	SPI_TxByte(0XFF);
 800131a:	20ff      	movs	r0, #255	@ 0xff
 800131c:	f7ff ff50 	bl	80011c0 <SPI_TxByte>

	PowerFlag = 1;
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <SD_PowerOn+0x80>)
 8001322:	2201      	movs	r2, #1
 8001324:	701a      	strb	r2, [r3, #0]
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200004f4 	.word	0x200004f4

08001334 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001338:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <SD_PowerOff+0x14>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	200004f4 	.word	0x200004f4

0800134c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <SD_CheckPower+0x14>)
 8001352:	781b      	ldrb	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	200004f4 	.word	0x200004f4

08001364 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <SD_RxDataBlock+0x5c>)
 8001370:	22c8      	movs	r2, #200	@ 0xc8
 8001372:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001374:	f7ff ff58 	bl	8001228 <SPI_RxByte>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2bff      	cmp	r3, #255	@ 0xff
 8001380:	d104      	bne.n	800138c <SD_RxDataBlock+0x28>
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <SD_RxDataBlock+0x5c>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f3      	bne.n	8001374 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001390:	d001      	beq.n	8001396 <SD_RxDataBlock+0x32>
 8001392:	2300      	movs	r3, #0
 8001394:	e00f      	b.n	80013b6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff5f 	bl	8001260 <SPI_RxBytePtr>
	} while(len--);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	603a      	str	r2, [r7, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f4      	bne.n	8001396 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80013ac:	f7ff ff3c 	bl	8001228 <SPI_RxByte>
	SPI_RxByte();
 80013b0:	f7ff ff3a 	bl	8001228 <SPI_RxByte>

	return TRUE;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200004f1 	.word	0x200004f1

080013c4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80013d4:	f7ff ff52 	bl	800127c <SD_ReadyWait>
 80013d8:	4603      	mov	r3, r0
 80013da:	2bff      	cmp	r3, #255	@ 0xff
 80013dc:	d001      	beq.n	80013e2 <SD_TxDataBlock+0x1e>
 80013de:	2300      	movs	r3, #0
 80013e0:	e02f      	b.n	8001442 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff feeb 	bl	80011c0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80013ee:	d020      	beq.n	8001432 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80013f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fefd 	bl	80011f4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80013fa:	f7ff ff15 	bl	8001228 <SPI_RxByte>
		SPI_RxByte();
 80013fe:	f7ff ff13 	bl	8001228 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001402:	e00b      	b.n	800141c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001404:	f7ff ff10 	bl	8001228 <SPI_RxByte>
 8001408:	4603      	mov	r3, r0
 800140a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	2b05      	cmp	r3, #5
 8001414:	d006      	beq.n	8001424 <SD_TxDataBlock+0x60>
			i++;
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	3301      	adds	r3, #1
 800141a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	2b40      	cmp	r3, #64	@ 0x40
 8001420:	d9f0      	bls.n	8001404 <SD_TxDataBlock+0x40>
 8001422:	e000      	b.n	8001426 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001424:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001426:	bf00      	nop
 8001428:	f7ff fefe 	bl	8001228 <SPI_RxByte>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0fa      	beq.n	8001428 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	2b05      	cmp	r3, #5
 800143a:	d101      	bne.n	8001440 <SD_TxDataBlock+0x7c>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	6039      	str	r1, [r7, #0]
 8001454:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001456:	f7ff ff11 	bl	800127c <SD_ReadyWait>
 800145a:	4603      	mov	r3, r0
 800145c:	2bff      	cmp	r3, #255	@ 0xff
 800145e:	d001      	beq.n	8001464 <SD_SendCmd+0x1a>
 8001460:	23ff      	movs	r3, #255	@ 0xff
 8001462:	e042      	b.n	80014ea <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff feaa 	bl	80011c0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	0e1b      	lsrs	r3, r3, #24
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fea4 	bl	80011c0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	0c1b      	lsrs	r3, r3, #16
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe9e 	bl	80011c0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	b2db      	uxtb	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fe98 	bl	80011c0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2db      	uxtb	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fe93 	bl	80011c0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b40      	cmp	r3, #64	@ 0x40
 800149e:	d102      	bne.n	80014a6 <SD_SendCmd+0x5c>
 80014a0:	2395      	movs	r3, #149	@ 0x95
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e007      	b.n	80014b6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b48      	cmp	r3, #72	@ 0x48
 80014aa:	d102      	bne.n	80014b2 <SD_SendCmd+0x68>
 80014ac:	2387      	movs	r3, #135	@ 0x87
 80014ae:	73fb      	strb	r3, [r7, #15]
 80014b0:	e001      	b.n	80014b6 <SD_SendCmd+0x6c>
	else crc = 1;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe81 	bl	80011c0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b4c      	cmp	r3, #76	@ 0x4c
 80014c2:	d101      	bne.n	80014c8 <SD_SendCmd+0x7e>
 80014c4:	f7ff feb0 	bl	8001228 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80014c8:	230a      	movs	r3, #10
 80014ca:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80014cc:	f7ff feac 	bl	8001228 <SPI_RxByte>
 80014d0:	4603      	mov	r3, r0
 80014d2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80014d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	da05      	bge.n	80014e8 <SD_SendCmd+0x9e>
 80014dc:	7bbb      	ldrb	r3, [r7, #14]
 80014de:	3b01      	subs	r3, #1
 80014e0:	73bb      	strb	r3, [r7, #14]
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f1      	bne.n	80014cc <SD_SendCmd+0x82>

	return res;
 80014e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SD_disk_initialize+0x14>
 8001504:	2301      	movs	r3, #1
 8001506:	e0d6      	b.n	80016b6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001508:	4b6d      	ldr	r3, [pc, #436]	@ (80016c0 <SD_disk_initialize+0x1cc>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <SD_disk_initialize+0x2a>
 8001516:	4b6a      	ldr	r3, [pc, #424]	@ (80016c0 <SD_disk_initialize+0x1cc>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	e0cb      	b.n	80016b6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800151e:	f7ff fec7 	bl	80012b0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001522:	f7ff fe31 	bl	8001188 <SELECT>

	/* check disk type */
	type = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800152a:	2100      	movs	r1, #0
 800152c:	2040      	movs	r0, #64	@ 0x40
 800152e:	f7ff ff8c 	bl	800144a <SD_SendCmd>
 8001532:	4603      	mov	r3, r0
 8001534:	2b01      	cmp	r3, #1
 8001536:	f040 80a6 	bne.w	8001686 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800153a:	4b62      	ldr	r3, [pc, #392]	@ (80016c4 <SD_disk_initialize+0x1d0>)
 800153c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001540:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001542:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001546:	2048      	movs	r0, #72	@ 0x48
 8001548:	f7ff ff7f 	bl	800144a <SD_SendCmd>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d158      	bne.n	8001604 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e00c      	b.n	8001572 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001558:	7bfc      	ldrb	r4, [r7, #15]
 800155a:	f7ff fe65 	bl	8001228 <SPI_RxByte>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	f104 0310 	add.w	r3, r4, #16
 8001566:	443b      	add	r3, r7
 8001568:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	3301      	adds	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d9ef      	bls.n	8001558 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001578:	7abb      	ldrb	r3, [r7, #10]
 800157a:	2b01      	cmp	r3, #1
 800157c:	f040 8083 	bne.w	8001686 <SD_disk_initialize+0x192>
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	2baa      	cmp	r3, #170	@ 0xaa
 8001584:	d17f      	bne.n	8001686 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001586:	2100      	movs	r1, #0
 8001588:	2077      	movs	r0, #119	@ 0x77
 800158a:	f7ff ff5e 	bl	800144a <SD_SendCmd>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	d807      	bhi.n	80015a4 <SD_disk_initialize+0xb0>
 8001594:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001598:	2069      	movs	r0, #105	@ 0x69
 800159a:	f7ff ff56 	bl	800144a <SD_SendCmd>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80015a4:	4b47      	ldr	r3, [pc, #284]	@ (80016c4 <SD_disk_initialize+0x1d0>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1eb      	bne.n	8001586 <SD_disk_initialize+0x92>
 80015ae:	e000      	b.n	80015b2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80015b0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80015b2:	4b44      	ldr	r3, [pc, #272]	@ (80016c4 <SD_disk_initialize+0x1d0>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d064      	beq.n	8001686 <SD_disk_initialize+0x192>
 80015bc:	2100      	movs	r1, #0
 80015be:	207a      	movs	r0, #122	@ 0x7a
 80015c0:	f7ff ff43 	bl	800144a <SD_SendCmd>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d15d      	bne.n	8001686 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]
 80015ce:	e00c      	b.n	80015ea <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 80015d0:	7bfc      	ldrb	r4, [r7, #15]
 80015d2:	f7ff fe29 	bl	8001228 <SPI_RxByte>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	f104 0310 	add.w	r3, r4, #16
 80015de:	443b      	add	r3, r7
 80015e0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	3301      	adds	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	d9ef      	bls.n	80015d0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80015f0:	7a3b      	ldrb	r3, [r7, #8]
 80015f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SD_disk_initialize+0x10a>
 80015fa:	230c      	movs	r3, #12
 80015fc:	e000      	b.n	8001600 <SD_disk_initialize+0x10c>
 80015fe:	2304      	movs	r3, #4
 8001600:	73bb      	strb	r3, [r7, #14]
 8001602:	e040      	b.n	8001686 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001604:	2100      	movs	r1, #0
 8001606:	2077      	movs	r0, #119	@ 0x77
 8001608:	f7ff ff1f 	bl	800144a <SD_SendCmd>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	d808      	bhi.n	8001624 <SD_disk_initialize+0x130>
 8001612:	2100      	movs	r1, #0
 8001614:	2069      	movs	r0, #105	@ 0x69
 8001616:	f7ff ff18 	bl	800144a <SD_SendCmd>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d801      	bhi.n	8001624 <SD_disk_initialize+0x130>
 8001620:	2302      	movs	r3, #2
 8001622:	e000      	b.n	8001626 <SD_disk_initialize+0x132>
 8001624:	2301      	movs	r3, #1
 8001626:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d10e      	bne.n	800164c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800162e:	2100      	movs	r1, #0
 8001630:	2077      	movs	r0, #119	@ 0x77
 8001632:	f7ff ff0a 	bl	800144a <SD_SendCmd>
 8001636:	4603      	mov	r3, r0
 8001638:	2b01      	cmp	r3, #1
 800163a:	d80e      	bhi.n	800165a <SD_disk_initialize+0x166>
 800163c:	2100      	movs	r1, #0
 800163e:	2069      	movs	r0, #105	@ 0x69
 8001640:	f7ff ff03 	bl	800144a <SD_SendCmd>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <SD_disk_initialize+0x166>
 800164a:	e00d      	b.n	8001668 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800164c:	2100      	movs	r1, #0
 800164e:	2041      	movs	r0, #65	@ 0x41
 8001650:	f7ff fefb 	bl	800144a <SD_SendCmd>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800165a:	4b1a      	ldr	r3, [pc, #104]	@ (80016c4 <SD_disk_initialize+0x1d0>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e1      	bne.n	8001628 <SD_disk_initialize+0x134>
 8001664:	e000      	b.n	8001668 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001666:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001668:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <SD_disk_initialize+0x1d0>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b29b      	uxth	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <SD_disk_initialize+0x18e>
 8001672:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001676:	2050      	movs	r0, #80	@ 0x50
 8001678:	f7ff fee7 	bl	800144a <SD_SendCmd>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SD_disk_initialize+0x192>
 8001682:	2300      	movs	r3, #0
 8001684:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001686:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <SD_disk_initialize+0x1d4>)
 8001688:	7bbb      	ldrb	r3, [r7, #14]
 800168a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800168c:	f7ff fd8a 	bl	80011a4 <DESELECT>
	SPI_RxByte();
 8001690:	f7ff fdca 	bl	8001228 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001694:	7bbb      	ldrb	r3, [r7, #14]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <SD_disk_initialize+0x1cc>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <SD_disk_initialize+0x1cc>)
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e001      	b.n	80016b0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80016ac:	f7ff fe42 	bl	8001334 <SD_PowerOff>
	}

	return Stat;
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <SD_disk_initialize+0x1cc>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b2db      	uxtb	r3, r3
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd90      	pop	{r4, r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000004 	.word	0x20000004
 80016c4:	200004f1 	.word	0x200004f1
 80016c8:	200004f3 	.word	0x200004f3

080016cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SD_disk_status+0x14>
 80016dc:	2301      	movs	r3, #1
 80016de:	e002      	b.n	80016e6 <SD_disk_status+0x1a>
	return Stat;
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <SD_disk_status+0x28>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2db      	uxtb	r3, r3
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000004 	.word	0x20000004

080016f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <SD_disk_read+0x1c>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <SD_disk_read+0x20>
 8001714:	2304      	movs	r3, #4
 8001716:	e051      	b.n	80017bc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <SD_disk_read+0xcc>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SD_disk_read+0x32>
 8001726:	2303      	movs	r3, #3
 8001728:	e048      	b.n	80017bc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800172a:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <SD_disk_read+0xd0>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <SD_disk_read+0x44>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	025b      	lsls	r3, r3, #9
 800173a:	607b      	str	r3, [r7, #4]

	SELECT();
 800173c:	f7ff fd24 	bl	8001188 <SELECT>

	if (count == 1)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d111      	bne.n	800176a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	2051      	movs	r0, #81	@ 0x51
 800174a:	f7ff fe7e 	bl	800144a <SD_SendCmd>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d129      	bne.n	80017a8 <SD_disk_read+0xb0>
 8001754:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001758:	68b8      	ldr	r0, [r7, #8]
 800175a:	f7ff fe03 	bl	8001364 <SD_RxDataBlock>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d021      	beq.n	80017a8 <SD_disk_read+0xb0>
 8001764:	2300      	movs	r3, #0
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	e01e      	b.n	80017a8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	2052      	movs	r0, #82	@ 0x52
 800176e:	f7ff fe6c 	bl	800144a <SD_SendCmd>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d117      	bne.n	80017a8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001778:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800177c:	68b8      	ldr	r0, [r7, #8]
 800177e:	f7ff fdf1 	bl	8001364 <SD_RxDataBlock>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00a      	beq.n	800179e <SD_disk_read+0xa6>
				buff += 512;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800178e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ed      	bne.n	8001778 <SD_disk_read+0x80>
 800179c:	e000      	b.n	80017a0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800179e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	204c      	movs	r0, #76	@ 0x4c
 80017a4:	f7ff fe51 	bl	800144a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80017a8:	f7ff fcfc 	bl	80011a4 <DESELECT>
	SPI_RxByte();
 80017ac:	f7ff fd3c 	bl	8001228 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	bf14      	ite	ne
 80017b6:	2301      	movne	r3, #1
 80017b8:	2300      	moveq	r3, #0
 80017ba:	b2db      	uxtb	r3, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000004 	.word	0x20000004
 80017c8:	200004f3 	.word	0x200004f3

080017cc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	4603      	mov	r3, r0
 80017da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <SD_disk_write+0x1c>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <SD_disk_write+0x20>
 80017e8:	2304      	movs	r3, #4
 80017ea:	e06b      	b.n	80018c4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017ec:	4b37      	ldr	r3, [pc, #220]	@ (80018cc <SD_disk_write+0x100>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SD_disk_write+0x32>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e062      	b.n	80018c4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80017fe:	4b33      	ldr	r3, [pc, #204]	@ (80018cc <SD_disk_write+0x100>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SD_disk_write+0x44>
 800180c:	2302      	movs	r3, #2
 800180e:	e059      	b.n	80018c4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001810:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <SD_disk_write+0x104>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <SD_disk_write+0x56>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	025b      	lsls	r3, r3, #9
 8001820:	607b      	str	r3, [r7, #4]

	SELECT();
 8001822:	f7ff fcb1 	bl	8001188 <SELECT>

	if (count == 1)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d110      	bne.n	800184e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	2058      	movs	r0, #88	@ 0x58
 8001830:	f7ff fe0b 	bl	800144a <SD_SendCmd>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d13a      	bne.n	80018b0 <SD_disk_write+0xe4>
 800183a:	21fe      	movs	r1, #254	@ 0xfe
 800183c:	68b8      	ldr	r0, [r7, #8]
 800183e:	f7ff fdc1 	bl	80013c4 <SD_TxDataBlock>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d033      	beq.n	80018b0 <SD_disk_write+0xe4>
			count = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	e030      	b.n	80018b0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <SD_disk_write+0x104>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d007      	beq.n	800186a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800185a:	2100      	movs	r1, #0
 800185c:	2077      	movs	r0, #119	@ 0x77
 800185e:	f7ff fdf4 	bl	800144a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	2057      	movs	r0, #87	@ 0x57
 8001866:	f7ff fdf0 	bl	800144a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	2059      	movs	r0, #89	@ 0x59
 800186e:	f7ff fdec 	bl	800144a <SD_SendCmd>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11b      	bne.n	80018b0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001878:	21fc      	movs	r1, #252	@ 0xfc
 800187a:	68b8      	ldr	r0, [r7, #8]
 800187c:	f7ff fda2 	bl	80013c4 <SD_TxDataBlock>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <SD_disk_write+0xd0>
				buff += 512;
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800188c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	3b01      	subs	r3, #1
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ee      	bne.n	8001878 <SD_disk_write+0xac>
 800189a:	e000      	b.n	800189e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800189c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800189e:	21fd      	movs	r1, #253	@ 0xfd
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fd8f 	bl	80013c4 <SD_TxDataBlock>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d101      	bne.n	80018b0 <SD_disk_write+0xe4>
			{
				count = 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80018b0:	f7ff fc78 	bl	80011a4 <DESELECT>
	SPI_RxByte();
 80018b4:	f7ff fcb8 	bl	8001228 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf14      	ite	ne
 80018be:	2301      	movne	r3, #1
 80018c0:	2300      	moveq	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000004 	.word	0x20000004
 80018d0:	200004f3 	.word	0x200004f3

080018d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80018d4:	b590      	push	{r4, r7, lr}
 80018d6:	b08b      	sub	sp, #44	@ 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	603a      	str	r2, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	460b      	mov	r3, r1
 80018e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SD_disk_ioctl+0x1e>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e113      	b.n	8001b1a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80018f8:	79bb      	ldrb	r3, [r7, #6]
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d124      	bne.n	8001948 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d012      	beq.n	800192c <SD_disk_ioctl+0x58>
 8001906:	2b02      	cmp	r3, #2
 8001908:	dc1a      	bgt.n	8001940 <SD_disk_ioctl+0x6c>
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <SD_disk_ioctl+0x40>
 800190e:	2b01      	cmp	r3, #1
 8001910:	d006      	beq.n	8001920 <SD_disk_ioctl+0x4c>
 8001912:	e015      	b.n	8001940 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001914:	f7ff fd0e 	bl	8001334 <SD_PowerOff>
			res = RES_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800191e:	e0fa      	b.n	8001b16 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001920:	f7ff fcc6 	bl	80012b0 <SD_PowerOn>
			res = RES_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800192a:	e0f4      	b.n	8001b16 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	1c5c      	adds	r4, r3, #1
 8001930:	f7ff fd0c 	bl	800134c <SD_CheckPower>
 8001934:	4603      	mov	r3, r0
 8001936:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001938:	2300      	movs	r3, #0
 800193a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800193e:	e0ea      	b.n	8001b16 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001940:	2304      	movs	r3, #4
 8001942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001946:	e0e6      	b.n	8001b16 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001948:	4b76      	ldr	r3, [pc, #472]	@ (8001b24 <SD_disk_ioctl+0x250>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SD_disk_ioctl+0x86>
 8001956:	2303      	movs	r3, #3
 8001958:	e0df      	b.n	8001b1a <SD_disk_ioctl+0x246>

		SELECT();
 800195a:	f7ff fc15 	bl	8001188 <SELECT>

		switch (ctrl)
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	2b0d      	cmp	r3, #13
 8001962:	f200 80c9 	bhi.w	8001af8 <SD_disk_ioctl+0x224>
 8001966:	a201      	add	r2, pc, #4	@ (adr r2, 800196c <SD_disk_ioctl+0x98>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	08001a63 	.word	0x08001a63
 8001970:	080019a5 	.word	0x080019a5
 8001974:	08001a53 	.word	0x08001a53
 8001978:	08001af9 	.word	0x08001af9
 800197c:	08001af9 	.word	0x08001af9
 8001980:	08001af9 	.word	0x08001af9
 8001984:	08001af9 	.word	0x08001af9
 8001988:	08001af9 	.word	0x08001af9
 800198c:	08001af9 	.word	0x08001af9
 8001990:	08001af9 	.word	0x08001af9
 8001994:	08001af9 	.word	0x08001af9
 8001998:	08001a75 	.word	0x08001a75
 800199c:	08001a99 	.word	0x08001a99
 80019a0:	08001abd 	.word	0x08001abd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80019a4:	2100      	movs	r1, #0
 80019a6:	2049      	movs	r0, #73	@ 0x49
 80019a8:	f7ff fd4f 	bl	800144a <SD_SendCmd>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 80a6 	bne.w	8001b00 <SD_disk_ioctl+0x22c>
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2110      	movs	r1, #16
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fcd2 	bl	8001364 <SD_RxDataBlock>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 809c 	beq.w	8001b00 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80019c8:	7b3b      	ldrb	r3, [r7, #12]
 80019ca:	099b      	lsrs	r3, r3, #6
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d10d      	bne.n	80019ee <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80019d2:	7d7b      	ldrb	r3, [r7, #21]
 80019d4:	461a      	mov	r2, r3
 80019d6:	7d3b      	ldrb	r3, [r7, #20]
 80019d8:	021b      	lsls	r3, r3, #8
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3301      	adds	r3, #1
 80019e2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80019e4:	8bfb      	ldrh	r3, [r7, #30]
 80019e6:	029a      	lsls	r2, r3, #10
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e02d      	b.n	8001a4a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80019ee:	7c7b      	ldrb	r3, [r7, #17]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	7dbb      	ldrb	r3, [r7, #22]
 80019f8:	09db      	lsrs	r3, r3, #7
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	7d7b      	ldrb	r3, [r7, #21]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f003 0306 	and.w	r3, r3, #6
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3302      	adds	r3, #2
 8001a12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a16:	7d3b      	ldrb	r3, [r7, #20]
 8001a18:	099b      	lsrs	r3, r3, #6
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	7cfb      	ldrb	r3, [r7, #19]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	7cbb      	ldrb	r3, [r7, #18]
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a3c:	8bfa      	ldrh	r2, [r7, #30]
 8001a3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a42:	3b09      	subs	r3, #9
 8001a44:	409a      	lsls	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001a50:	e056      	b.n	8001b00 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a58:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a60:	e055      	b.n	8001b0e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001a62:	f7ff fc0b 	bl	800127c <SD_ReadyWait>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2bff      	cmp	r3, #255	@ 0xff
 8001a6a:	d14b      	bne.n	8001b04 <SD_disk_ioctl+0x230>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a72:	e047      	b.n	8001b04 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a74:	2100      	movs	r1, #0
 8001a76:	2049      	movs	r0, #73	@ 0x49
 8001a78:	f7ff fce7 	bl	800144a <SD_SendCmd>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d142      	bne.n	8001b08 <SD_disk_ioctl+0x234>
 8001a82:	2110      	movs	r1, #16
 8001a84:	6a38      	ldr	r0, [r7, #32]
 8001a86:	f7ff fc6d 	bl	8001364 <SD_RxDataBlock>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d03b      	beq.n	8001b08 <SD_disk_ioctl+0x234>
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001a96:	e037      	b.n	8001b08 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001a98:	2100      	movs	r1, #0
 8001a9a:	204a      	movs	r0, #74	@ 0x4a
 8001a9c:	f7ff fcd5 	bl	800144a <SD_SendCmd>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d132      	bne.n	8001b0c <SD_disk_ioctl+0x238>
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	6a38      	ldr	r0, [r7, #32]
 8001aaa:	f7ff fc5b 	bl	8001364 <SD_RxDataBlock>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d02b      	beq.n	8001b0c <SD_disk_ioctl+0x238>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001aba:	e027      	b.n	8001b0c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001abc:	2100      	movs	r1, #0
 8001abe:	207a      	movs	r0, #122	@ 0x7a
 8001ac0:	f7ff fcc3 	bl	800144a <SD_SendCmd>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001ad0:	e00b      	b.n	8001aea <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001ad2:	6a3c      	ldr	r4, [r7, #32]
 8001ad4:	1c63      	adds	r3, r4, #1
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	f7ff fba6 	bl	8001228 <SPI_RxByte>
 8001adc:	4603      	mov	r3, r0
 8001ade:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001aea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d9ef      	bls.n	8001ad2 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001af8:	2304      	movs	r3, #4
 8001afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001afe:	e006      	b.n	8001b0e <SD_disk_ioctl+0x23a>
			break;
 8001b00:	bf00      	nop
 8001b02:	e004      	b.n	8001b0e <SD_disk_ioctl+0x23a>
			break;
 8001b04:	bf00      	nop
 8001b06:	e002      	b.n	8001b0e <SD_disk_ioctl+0x23a>
			break;
 8001b08:	bf00      	nop
 8001b0a:	e000      	b.n	8001b0e <SD_disk_ioctl+0x23a>
			break;
 8001b0c:	bf00      	nop
		}

		DESELECT();
 8001b0e:	f7ff fb49 	bl	80011a4 <DESELECT>
		SPI_RxByte();
 8001b12:	f7ff fb89 	bl	8001228 <SPI_RxByte>
	}

	return res;
 8001b16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	372c      	adds	r7, #44	@ 0x2c
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000004 	.word	0x20000004

08001b28 <display_task>:
		vTaskDelay(2000/portTICK_RATE_MS);
	}
}

#elif DISPLAY_FUNCTION == 1
void display_task(void *pvParameters){
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	while(1){
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <display_task+0x8>

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 fce6 	bl	800252e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	200f      	movs	r0, #15
 8001b64:	f7ff f9de 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff f806 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	200004f8 	.word	0x200004f8

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	200004f8 	.word	0x200004f8

08001bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff ffee 	bl	8001ba0 <HAL_GetTick>
 8001bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d005      	beq.n	8001bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <HAL_Delay+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bde:	bf00      	nop
 8001be0:	f7ff ffde 	bl	8001ba0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8f7      	bhi.n	8001be0 <HAL_Delay+0x28>
  {
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000000c 	.word	0x2000000c

08001c00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e033      	b.n	8001c7e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d109      	bne.n	8001c32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe ffd6 	bl	8000bd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d118      	bne.n	8001c70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c46:	f023 0302 	bic.w	r3, r3, #2
 8001c4a:	f043 0202 	orr.w	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fab8 	bl	80021c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f023 0303 	bic.w	r3, r3, #3
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c6e:	e001      	b.n	8001c74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d049      	beq.n	8001d50 <HAL_ADC_IRQHandler+0xca>
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d046      	beq.n	8001d50 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d12b      	bne.n	8001d40 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d127      	bne.n	8001d40 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d006      	beq.n	8001d0c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d119      	bne.n	8001d40 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0220 	bic.w	r2, r2, #32
 8001d1a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7fe feeb 	bl	8000b1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f06f 0212 	mvn.w	r2, #18
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d5e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d057      	beq.n	8001e16 <HAL_ADC_IRQHandler+0x190>
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d054      	beq.n	8001e16 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d139      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d98:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d12b      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d124      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d11d      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d119      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fada 	bl	80023c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 020c 	mvn.w	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e24:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d017      	beq.n	8001e5c <HAL_ADC_IRQHandler+0x1d6>
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d014      	beq.n	8001e5c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10d      	bne.n	8001e5c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f884 	bl	8001f5a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f06f 0201 	mvn.w	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e6a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d015      	beq.n	8001e9e <HAL_ADC_IRQHandler+0x218>
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d012      	beq.n	8001e9e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0220 	mvn.w	r2, #32
 8001e8c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f86d 	bl	8001f6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0220 	mvn.w	r2, #32
 8001e9c:	601a      	str	r2, [r3, #0]
  }
}
 8001e9e:	bf00      	nop
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_Stop_DMA+0x1a>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e048      	b.n	8001f52 <HAL_ADC_Stop_DMA+0xac>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d130      	bne.n	8001f48 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ef4:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001efa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d10f      	bne.n	8001f24 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fbf3 	bl	80026f4 <HAL_DMA_Abort>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001f32:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1c>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e105      	b.n	80021ac <HAL_ADC_ConfigChannel+0x228>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b09      	cmp	r3, #9
 8001fae:	d925      	bls.n	8001ffc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68d9      	ldr	r1, [r3, #12]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3b1e      	subs	r3, #30
 8001fc6:	2207      	movs	r2, #7
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	400a      	ands	r2, r1
 8001fd4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68d9      	ldr	r1, [r3, #12]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	4603      	mov	r3, r0
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4403      	add	r3, r0
 8001fee:	3b1e      	subs	r3, #30
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	e022      	b.n	8002042 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6919      	ldr	r1, [r3, #16]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	2207      	movs	r2, #7
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	400a      	ands	r2, r1
 800201e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6919      	ldr	r1, [r3, #16]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	4603      	mov	r3, r0
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4403      	add	r3, r0
 8002038:	409a      	lsls	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b06      	cmp	r3, #6
 8002048:	d824      	bhi.n	8002094 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	3b05      	subs	r3, #5
 800205c:	221f      	movs	r2, #31
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43da      	mvns	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	400a      	ands	r2, r1
 800206a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b05      	subs	r3, #5
 8002086:	fa00 f203 	lsl.w	r2, r0, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	635a      	str	r2, [r3, #52]	@ 0x34
 8002092:	e04c      	b.n	800212e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	d824      	bhi.n	80020e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	3b23      	subs	r3, #35	@ 0x23
 80020ae:	221f      	movs	r2, #31
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43da      	mvns	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	400a      	ands	r2, r1
 80020bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	3b23      	subs	r3, #35	@ 0x23
 80020d8:	fa00 f203 	lsl.w	r2, r0, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e4:	e023      	b.n	800212e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3b41      	subs	r3, #65	@ 0x41
 80020f8:	221f      	movs	r2, #31
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	400a      	ands	r2, r1
 8002106:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4618      	mov	r0, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	3b41      	subs	r3, #65	@ 0x41
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800212e:	4b22      	ldr	r3, [pc, #136]	@ (80021b8 <HAL_ADC_ConfigChannel+0x234>)
 8002130:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <HAL_ADC_ConfigChannel+0x238>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d109      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1cc>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b12      	cmp	r3, #18
 8002142:	d105      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	@ (80021bc <HAL_ADC_ConfigChannel+0x238>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d123      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x21e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b10      	cmp	r3, #16
 8002160:	d003      	beq.n	800216a <HAL_ADC_ConfigChannel+0x1e6>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b11      	cmp	r3, #17
 8002168:	d11b      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b10      	cmp	r3, #16
 800217c:	d111      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <HAL_ADC_ConfigChannel+0x23c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a10      	ldr	r2, [pc, #64]	@ (80021c4 <HAL_ADC_ConfigChannel+0x240>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	0c9a      	lsrs	r2, r3, #18
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002194:	e002      	b.n	800219c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3b01      	subs	r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f9      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	40012000 	.word	0x40012000
 80021c0:	20000000 	.word	0x20000000
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d0:	4b79      	ldr	r3, [pc, #484]	@ (80023b8 <ADC_Init+0x1f0>)
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	021a      	lsls	r2, r3, #8
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002220:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002242:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6899      	ldr	r1, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	4a58      	ldr	r2, [pc, #352]	@ (80023bc <ADC_Init+0x1f4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d022      	beq.n	80022a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800226e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6899      	ldr	r1, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6899      	ldr	r1, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	e00f      	b.n	80022c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0202 	bic.w	r2, r2, #2
 80022d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7e1b      	ldrb	r3, [r3, #24]
 80022e0:	005a      	lsls	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01b      	beq.n	800232c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002302:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002312:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	3b01      	subs	r3, #1
 8002320:	035a      	lsls	r2, r3, #13
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	e007      	b.n	800233c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800233a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	3b01      	subs	r3, #1
 8002358:	051a      	lsls	r2, r3, #20
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002370:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800237e:	025a      	lsls	r2, r3, #9
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	029a      	lsls	r2, r3, #10
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	609a      	str	r2, [r3, #8]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40012300 	.word	0x40012300
 80023bc:	0f000001 	.word	0x0f000001

080023c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	@ (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	@ (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	@ (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff ff4c 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002556:	f7ff ff61 	bl	800241c <__NVIC_GetPriorityGrouping>
 800255a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	6978      	ldr	r0, [r7, #20]
 8002562:	f7ff ffb1 	bl	80024c8 <NVIC_EncodePriority>
 8002566:	4602      	mov	r2, r0
 8002568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff80 	bl	8002474 <__NVIC_SetPriority>
}
 8002574:	bf00      	nop
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ff54 	bl	8002438 <__NVIC_EnableIRQ>
}
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff fafc 	bl	8001ba0 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e099      	b.n	80026e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0201 	bic.w	r2, r2, #1
 80025d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d4:	e00f      	b.n	80025f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d6:	f7ff fae3 	bl	8001ba0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b05      	cmp	r3, #5
 80025e2:	d908      	bls.n	80025f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2203      	movs	r2, #3
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e078      	b.n	80026e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e8      	bne.n	80025d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4b38      	ldr	r3, [pc, #224]	@ (80026f0 <HAL_DMA_Init+0x158>)
 8002610:	4013      	ands	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800262e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	2b04      	cmp	r3, #4
 800264e:	d107      	bne.n	8002660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002658:	4313      	orrs	r3, r2
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f023 0307 	bic.w	r3, r3, #7
 8002676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	2b04      	cmp	r3, #4
 8002688:	d117      	bne.n	80026ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00e      	beq.n	80026ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fa59 	bl	8002b54 <DMA_CheckFifoParam>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2240      	movs	r2, #64	@ 0x40
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80026b6:	2301      	movs	r3, #1
 80026b8:	e016      	b.n	80026e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fa10 	bl	8002ae8 <DMA_CalcBaseAndBitshift>
 80026c8:	4603      	mov	r3, r0
 80026ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	223f      	movs	r2, #63	@ 0x3f
 80026d2:	409a      	lsls	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	f010803f 	.word	0xf010803f

080026f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002702:	f7ff fa4d 	bl	8001ba0 <HAL_GetTick>
 8002706:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d008      	beq.n	8002726 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e052      	b.n	80027cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0216 	bic.w	r2, r2, #22
 8002734:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002744:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d103      	bne.n	8002756 <HAL_DMA_Abort+0x62>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0208 	bic.w	r2, r2, #8
 8002764:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002776:	e013      	b.n	80027a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002778:	f7ff fa12 	bl	8001ba0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b05      	cmp	r3, #5
 8002784:	d90c      	bls.n	80027a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e015      	b.n	80027cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e4      	bne.n	8002778 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	223f      	movs	r2, #63	@ 0x3f
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e0:	4b8e      	ldr	r3, [pc, #568]	@ (8002a1c <HAL_DMA_IRQHandler+0x248>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a8e      	ldr	r2, [pc, #568]	@ (8002a20 <HAL_DMA_IRQHandler+0x24c>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0a9b      	lsrs	r3, r3, #10
 80027ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fe:	2208      	movs	r2, #8
 8002800:	409a      	lsls	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01a      	beq.n	8002840 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0204 	bic.w	r2, r2, #4
 8002826:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	2208      	movs	r2, #8
 800282e:	409a      	lsls	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002844:	2201      	movs	r2, #1
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d012      	beq.n	8002876 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002862:	2201      	movs	r2, #1
 8002864:	409a      	lsls	r2, r3
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287a:	2204      	movs	r2, #4
 800287c:	409a      	lsls	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4013      	ands	r3, r2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d012      	beq.n	80028ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	2204      	movs	r2, #4
 800289a:	409a      	lsls	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b0:	2210      	movs	r2, #16
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d043      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d03c      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	2210      	movs	r2, #16
 80028d0:	409a      	lsls	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d108      	bne.n	8002904 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d024      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
 8002902:	e01f      	b.n	8002944 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e016      	b.n	8002944 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0208 	bic.w	r2, r2, #8
 8002932:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002948:	2220      	movs	r2, #32
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 808f 	beq.w	8002a74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 8087 	beq.w	8002a74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296a:	2220      	movs	r2, #32
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b05      	cmp	r3, #5
 800297c:	d136      	bne.n	80029ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0216 	bic.w	r2, r2, #22
 800298c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800299c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d103      	bne.n	80029ae <HAL_DMA_IRQHandler+0x1da>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0208 	bic.w	r2, r2, #8
 80029bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c2:	223f      	movs	r2, #63	@ 0x3f
 80029c4:	409a      	lsls	r2, r3
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d07e      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4798      	blx	r3
        }
        return;
 80029ea:	e079      	b.n	8002ae0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01d      	beq.n	8002a36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10d      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d031      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
 8002a18:	e02c      	b.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
 8002a1a:	bf00      	nop
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d023      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
 8002a34:	e01e      	b.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10f      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0210 	bic.w	r2, r2, #16
 8002a52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d032      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d022      	beq.n	8002ace <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2205      	movs	r2, #5
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d307      	bcc.n	8002abc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f2      	bne.n	8002aa0 <HAL_DMA_IRQHandler+0x2cc>
 8002aba:	e000      	b.n	8002abe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002abc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	4798      	blx	r3
 8002ade:	e000      	b.n	8002ae2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ae0:	bf00      	nop
    }
  }
}
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3b10      	subs	r3, #16
 8002af8:	4a14      	ldr	r2, [pc, #80]	@ (8002b4c <DMA_CalcBaseAndBitshift+0x64>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b02:	4a13      	ldr	r2, [pc, #76]	@ (8002b50 <DMA_CalcBaseAndBitshift+0x68>)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d909      	bls.n	8002b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	1d1a      	adds	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b28:	e007      	b.n	8002b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	aaaaaaab 	.word	0xaaaaaaab
 8002b50:	08006f9c 	.word	0x08006f9c

08002b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11f      	bne.n	8002bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d856      	bhi.n	8002c22 <DMA_CheckFifoParam+0xce>
 8002b74:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <DMA_CheckFifoParam+0x28>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b9f 	.word	0x08002b9f
 8002b84:	08002b8d 	.word	0x08002b8d
 8002b88:	08002c23 	.word	0x08002c23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d046      	beq.n	8002c26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e043      	b.n	8002c26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ba6:	d140      	bne.n	8002c2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bac:	e03d      	b.n	8002c2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bb6:	d121      	bne.n	8002bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d837      	bhi.n	8002c2e <DMA_CheckFifoParam+0xda>
 8002bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc4 <DMA_CheckFifoParam+0x70>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002bdb 	.word	0x08002bdb
 8002bcc:	08002bd5 	.word	0x08002bd5
 8002bd0:	08002bed 	.word	0x08002bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e030      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d025      	beq.n	8002c32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bea:	e022      	b.n	8002c32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bf4:	d11f      	bne.n	8002c36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bfa:	e01c      	b.n	8002c36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d903      	bls.n	8002c0a <DMA_CheckFifoParam+0xb6>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d003      	beq.n	8002c10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c08:	e018      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0e:	e015      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c20:	e00b      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;
 8002c22:	bf00      	nop
 8002c24:	e00a      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c26:	bf00      	nop
 8002c28:	e008      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e006      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e004      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e002      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e159      	b.n	8002f1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	f040 8148 	bne.w	8002f16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d005      	beq.n	8002c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d130      	bne.n	8002d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 0201 	and.w	r2, r3, #1
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d017      	beq.n	8002d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2203      	movs	r2, #3
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d123      	bne.n	8002d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	220f      	movs	r2, #15
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	08da      	lsrs	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3208      	adds	r2, #8
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0203 	and.w	r2, r3, #3
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a2 	beq.w	8002f16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b57      	ldr	r3, [pc, #348]	@ (8002f34 <HAL_GPIO_Init+0x2e8>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	4a56      	ldr	r2, [pc, #344]	@ (8002f34 <HAL_GPIO_Init+0x2e8>)
 8002ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de2:	4b54      	ldr	r3, [pc, #336]	@ (8002f34 <HAL_GPIO_Init+0x2e8>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dee:	4a52      	ldr	r2, [pc, #328]	@ (8002f38 <HAL_GPIO_Init+0x2ec>)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	089b      	lsrs	r3, r3, #2
 8002df4:	3302      	adds	r3, #2
 8002df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	220f      	movs	r2, #15
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a49      	ldr	r2, [pc, #292]	@ (8002f3c <HAL_GPIO_Init+0x2f0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d019      	beq.n	8002e4e <HAL_GPIO_Init+0x202>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a48      	ldr	r2, [pc, #288]	@ (8002f40 <HAL_GPIO_Init+0x2f4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <HAL_GPIO_Init+0x1fe>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a47      	ldr	r2, [pc, #284]	@ (8002f44 <HAL_GPIO_Init+0x2f8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00d      	beq.n	8002e46 <HAL_GPIO_Init+0x1fa>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a46      	ldr	r2, [pc, #280]	@ (8002f48 <HAL_GPIO_Init+0x2fc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d007      	beq.n	8002e42 <HAL_GPIO_Init+0x1f6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a45      	ldr	r2, [pc, #276]	@ (8002f4c <HAL_GPIO_Init+0x300>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d101      	bne.n	8002e3e <HAL_GPIO_Init+0x1f2>
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	e008      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e3e:	2307      	movs	r3, #7
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e42:	2303      	movs	r3, #3
 8002e44:	e004      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e002      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_GPIO_Init+0x204>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f002 0203 	and.w	r2, r2, #3
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	4093      	lsls	r3, r2
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e60:	4935      	ldr	r1, [pc, #212]	@ (8002f38 <HAL_GPIO_Init+0x2ec>)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3302      	adds	r3, #2
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6e:	4b38      	ldr	r3, [pc, #224]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e92:	4a2f      	ldr	r2, [pc, #188]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e98:	4b2d      	ldr	r3, [pc, #180]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ebc:	4a24      	ldr	r2, [pc, #144]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ec2:	4b23      	ldr	r3, [pc, #140]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eec:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f10:	4a0f      	ldr	r2, [pc, #60]	@ (8002f50 <HAL_GPIO_Init+0x304>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	f67f aea2 	bls.w	8002c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3724      	adds	r7, #36	@ 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40013800 	.word	0x40013800
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	40020400 	.word	0x40020400
 8002f44:	40020800 	.word	0x40020800
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40013c00 	.word	0x40013c00

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f70:	e003      	b.n	8002f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	041a      	lsls	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	619a      	str	r2, [r3, #24]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e12b      	b.n	80031f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd fe8c 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	@ 0x24
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fec:	f000 fd80 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8002ff0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a81      	ldr	r2, [pc, #516]	@ (80031fc <HAL_I2C_Init+0x274>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d807      	bhi.n	800300c <HAL_I2C_Init+0x84>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a80      	ldr	r2, [pc, #512]	@ (8003200 <HAL_I2C_Init+0x278>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	e006      	b.n	800301a <HAL_I2C_Init+0x92>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a7d      	ldr	r2, [pc, #500]	@ (8003204 <HAL_I2C_Init+0x27c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	bf94      	ite	ls
 8003014:	2301      	movls	r3, #1
 8003016:	2300      	movhi	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0e7      	b.n	80031f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a78      	ldr	r2, [pc, #480]	@ (8003208 <HAL_I2C_Init+0x280>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0c9b      	lsrs	r3, r3, #18
 800302c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a6a      	ldr	r2, [pc, #424]	@ (80031fc <HAL_I2C_Init+0x274>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d802      	bhi.n	800305c <HAL_I2C_Init+0xd4>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3301      	adds	r3, #1
 800305a:	e009      	b.n	8003070 <HAL_I2C_Init+0xe8>
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	4a69      	ldr	r2, [pc, #420]	@ (800320c <HAL_I2C_Init+0x284>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	3301      	adds	r3, #1
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	430b      	orrs	r3, r1
 8003076:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003082:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	495c      	ldr	r1, [pc, #368]	@ (80031fc <HAL_I2C_Init+0x274>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d819      	bhi.n	80030c4 <HAL_I2C_Init+0x13c>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1e59      	subs	r1, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fbb1 f3f3 	udiv	r3, r1, r3
 800309e:	1c59      	adds	r1, r3, #1
 80030a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030a4:	400b      	ands	r3, r1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_I2C_Init+0x138>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e59      	subs	r1, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030b8:	3301      	adds	r3, #1
 80030ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030be:	e051      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 80030c0:	2304      	movs	r3, #4
 80030c2:	e04f      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d111      	bne.n	80030f0 <HAL_I2C_Init+0x168>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e012      	b.n	8003116 <HAL_I2C_Init+0x18e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e58      	subs	r0, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	0099      	lsls	r1, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_I2C_Init+0x196>
 800311a:	2301      	movs	r3, #1
 800311c:	e022      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10e      	bne.n	8003144 <HAL_I2C_Init+0x1bc>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1e58      	subs	r0, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	440b      	add	r3, r1
 8003134:	fbb0 f3f3 	udiv	r3, r0, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003142:	e00f      	b.n	8003164 <HAL_I2C_Init+0x1dc>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	6809      	ldr	r1, [r1, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003192:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6911      	ldr	r1, [r2, #16]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	68d2      	ldr	r2, [r2, #12]
 800319e:	4311      	orrs	r1, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2220      	movs	r2, #32
 80031de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	000186a0 	.word	0x000186a0
 8003200:	001e847f 	.word	0x001e847f
 8003204:	003d08ff 	.word	0x003d08ff
 8003208:	431bde83 	.word	0x431bde83
 800320c:	10624dd3 	.word	0x10624dd3

08003210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e267      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d075      	beq.n	800331a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800322e:	4b88      	ldr	r3, [pc, #544]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b04      	cmp	r3, #4
 8003238:	d00c      	beq.n	8003254 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b85      	ldr	r3, [pc, #532]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003242:	2b08      	cmp	r3, #8
 8003244:	d112      	bne.n	800326c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003246:	4b82      	ldr	r3, [pc, #520]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003252:	d10b      	bne.n	800326c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003254:	4b7e      	ldr	r3, [pc, #504]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d05b      	beq.n	8003318 <HAL_RCC_OscConfig+0x108>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d157      	bne.n	8003318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e242      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003274:	d106      	bne.n	8003284 <HAL_RCC_OscConfig+0x74>
 8003276:	4b76      	ldr	r3, [pc, #472]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a75      	ldr	r2, [pc, #468]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e01d      	b.n	80032c0 <HAL_RCC_OscConfig+0xb0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b70      	ldr	r3, [pc, #448]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6f      	ldr	r2, [pc, #444]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b6d      	ldr	r3, [pc, #436]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6c      	ldr	r2, [pc, #432]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e00b      	b.n	80032c0 <HAL_RCC_OscConfig+0xb0>
 80032a8:	4b69      	ldr	r3, [pc, #420]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a68      	ldr	r2, [pc, #416]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b66      	ldr	r3, [pc, #408]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a65      	ldr	r2, [pc, #404]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80032ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7fe fc6a 	bl	8001ba0 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fe fc66 	bl	8001ba0 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	@ 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e207      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0xc0>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fc56 	bl	8001ba0 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fe fc52 	bl	8001ba0 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	@ 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1f3      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330a:	4b51      	ldr	r3, [pc, #324]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0xe8>
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d063      	beq.n	80033ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003326:	4b4a      	ldr	r3, [pc, #296]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d11c      	bne.n	8003378 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333e:	4b44      	ldr	r3, [pc, #272]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d116      	bne.n	8003378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800334a:	4b41      	ldr	r3, [pc, #260]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_RCC_OscConfig+0x152>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e1c7      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003362:	4b3b      	ldr	r3, [pc, #236]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4937      	ldr	r1, [pc, #220]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003376:	e03a      	b.n	80033ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d020      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003380:	4b34      	ldr	r3, [pc, #208]	@ (8003454 <HAL_RCC_OscConfig+0x244>)
 8003382:	2201      	movs	r2, #1
 8003384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003386:	f7fe fc0b 	bl	8001ba0 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338e:	f7fe fc07 	bl	8001ba0 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1a8      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b28      	ldr	r3, [pc, #160]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4925      	ldr	r1, [pc, #148]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]
 80033c0:	e015      	b.n	80033ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c2:	4b24      	ldr	r3, [pc, #144]	@ (8003454 <HAL_RCC_OscConfig+0x244>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe fbea 	bl	8001ba0 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fe fbe6 	bl	8001ba0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e187      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d036      	beq.n	8003468 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d016      	beq.n	8003430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <HAL_RCC_OscConfig+0x248>)
 8003404:	2201      	movs	r2, #1
 8003406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fbca 	bl	8001ba0 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003410:	f7fe fbc6 	bl	8001ba0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e167      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003422:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_OscConfig+0x240>)
 8003424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0f0      	beq.n	8003410 <HAL_RCC_OscConfig+0x200>
 800342e:	e01b      	b.n	8003468 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003430:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <HAL_RCC_OscConfig+0x248>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003436:	f7fe fbb3 	bl	8001ba0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	e00e      	b.n	800345c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800343e:	f7fe fbaf 	bl	8001ba0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d907      	bls.n	800345c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e150      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
 8003450:	40023800 	.word	0x40023800
 8003454:	42470000 	.word	0x42470000
 8003458:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345c:	4b88      	ldr	r3, [pc, #544]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800345e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ea      	bne.n	800343e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8097 	beq.w	80035a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800347a:	4b81      	ldr	r3, [pc, #516]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	4b7d      	ldr	r3, [pc, #500]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	4a7c      	ldr	r2, [pc, #496]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003494:	6413      	str	r3, [r2, #64]	@ 0x40
 8003496:	4b7a      	ldr	r3, [pc, #488]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a2:	2301      	movs	r3, #1
 80034a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a6:	4b77      	ldr	r3, [pc, #476]	@ (8003684 <HAL_RCC_OscConfig+0x474>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d118      	bne.n	80034e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b2:	4b74      	ldr	r3, [pc, #464]	@ (8003684 <HAL_RCC_OscConfig+0x474>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a73      	ldr	r2, [pc, #460]	@ (8003684 <HAL_RCC_OscConfig+0x474>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034be:	f7fe fb6f 	bl	8001ba0 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fe fb6b 	bl	8001ba0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e10c      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003684 <HAL_RCC_OscConfig+0x474>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x2ea>
 80034ec:	4b64      	ldr	r3, [pc, #400]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	4a63      	ldr	r2, [pc, #396]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f8:	e01c      	b.n	8003534 <HAL_RCC_OscConfig+0x324>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x30c>
 8003502:	4b5f      	ldr	r3, [pc, #380]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	4a5e      	ldr	r2, [pc, #376]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003508:	f043 0304 	orr.w	r3, r3, #4
 800350c:	6713      	str	r3, [r2, #112]	@ 0x70
 800350e:	4b5c      	ldr	r3, [pc, #368]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003512:	4a5b      	ldr	r2, [pc, #364]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6713      	str	r3, [r2, #112]	@ 0x70
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0x324>
 800351c:	4b58      	ldr	r3, [pc, #352]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	4a57      	ldr	r2, [pc, #348]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	6713      	str	r3, [r2, #112]	@ 0x70
 8003528:	4b55      	ldr	r3, [pc, #340]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352c:	4a54      	ldr	r2, [pc, #336]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800352e:	f023 0304 	bic.w	r3, r3, #4
 8003532:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fb30 	bl	8001ba0 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003542:	e00a      	b.n	800355a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fe fb2c 	bl	8001ba0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0cb      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	4b49      	ldr	r3, [pc, #292]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0ee      	beq.n	8003544 <HAL_RCC_OscConfig+0x334>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003568:	f7fe fb1a 	bl	8001ba0 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356e:	e00a      	b.n	8003586 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fe fb16 	bl	8001ba0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e0b5      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003586:	4b3e      	ldr	r3, [pc, #248]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1ee      	bne.n	8003570 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003598:	4b39      	ldr	r3, [pc, #228]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	4a38      	ldr	r2, [pc, #224]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800359e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80a1 	beq.w	80036f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ae:	4b34      	ldr	r3, [pc, #208]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d05c      	beq.n	8003674 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d141      	bne.n	8003646 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b31      	ldr	r3, [pc, #196]	@ (8003688 <HAL_RCC_OscConfig+0x478>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe faea 	bl	8001ba0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe fae6 	bl	8001ba0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e087      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	491b      	ldr	r1, [pc, #108]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_RCC_OscConfig+0x478>)
 800361a:	2201      	movs	r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361e:	f7fe fabf 	bl	8001ba0 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe fabb 	bl	8001ba0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e05c      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003638:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x416>
 8003644:	e054      	b.n	80036f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <HAL_RCC_OscConfig+0x478>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe faa8 	bl	8001ba0 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe faa4 	bl	8001ba0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e045      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <HAL_RCC_OscConfig+0x470>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
 8003672:	e03d      	b.n	80036f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e038      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
 8003680:	40023800 	.word	0x40023800
 8003684:	40007000 	.word	0x40007000
 8003688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800368c:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <HAL_RCC_OscConfig+0x4ec>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d028      	beq.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d121      	bne.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d11a      	bne.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d111      	bne.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	3b01      	subs	r3, #1
 80036d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d107      	bne.n	80036ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800

08003700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0cc      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003714:	4b68      	ldr	r3, [pc, #416]	@ (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d90c      	bls.n	800373c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b65      	ldr	r3, [pc, #404]	@ (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b63      	ldr	r3, [pc, #396]	@ (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0b8      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003754:	4b59      	ldr	r3, [pc, #356]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	4a58      	ldr	r2, [pc, #352]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800375e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800376c:	4b53      	ldr	r3, [pc, #332]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a52      	ldr	r2, [pc, #328]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b50      	ldr	r3, [pc, #320]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	494d      	ldr	r1, [pc, #308]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d044      	beq.n	8003820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d107      	bne.n	80037ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	4b47      	ldr	r3, [pc, #284]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d119      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e07f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d003      	beq.n	80037be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037be:	4b3f      	ldr	r3, [pc, #252]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e06f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ce:	4b3b      	ldr	r3, [pc, #236]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e067      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037de:	4b37      	ldr	r3, [pc, #220]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f023 0203 	bic.w	r2, r3, #3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4934      	ldr	r1, [pc, #208]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f0:	f7fe f9d6 	bl	8001ba0 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	e00a      	b.n	800380e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f8:	f7fe f9d2 	bl	8001ba0 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e04f      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	4b2b      	ldr	r3, [pc, #172]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 020c 	and.w	r2, r3, #12
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	429a      	cmp	r2, r3
 800381e:	d1eb      	bne.n	80037f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003820:	4b25      	ldr	r3, [pc, #148]	@ (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d20c      	bcs.n	8003848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b22      	ldr	r3, [pc, #136]	@ (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b20      	ldr	r3, [pc, #128]	@ (80038b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e032      	b.n	80038ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003854:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4916      	ldr	r1, [pc, #88]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003872:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	490e      	ldr	r1, [pc, #56]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003886:	f000 f821 	bl	80038cc <HAL_RCC_GetSysClockFreq>
 800388a:	4602      	mov	r2, r0
 800388c:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	490a      	ldr	r1, [pc, #40]	@ (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	5ccb      	ldrb	r3, [r1, r3]
 800389a:	fa22 f303 	lsr.w	r3, r2, r3
 800389e:	4a09      	ldr	r2, [pc, #36]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038a2:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fb3c 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023c00 	.word	0x40023c00
 80038bc:	40023800 	.word	0x40023800
 80038c0:	08006f84 	.word	0x08006f84
 80038c4:	20000000 	.word	0x20000000
 80038c8:	20000008 	.word	0x20000008

080038cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d0:	b094      	sub	sp, #80	@ 0x50
 80038d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80038d8:	2300      	movs	r3, #0
 80038da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038dc:	2300      	movs	r3, #0
 80038de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e4:	4b79      	ldr	r3, [pc, #484]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d00d      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x40>
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	f200 80e1 	bhi.w	8003ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_RCC_GetSysClockFreq+0x34>
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_GetSysClockFreq+0x3a>
 80038fe:	e0db      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b73      	ldr	r3, [pc, #460]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003902:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003904:	e0db      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003906:	4b73      	ldr	r3, [pc, #460]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003908:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800390a:	e0d8      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800390c:	4b6f      	ldr	r3, [pc, #444]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003914:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003916:	4b6d      	ldr	r3, [pc, #436]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003922:	4b6a      	ldr	r3, [pc, #424]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	2200      	movs	r2, #0
 800392a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800392c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800392e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003934:	633b      	str	r3, [r7, #48]	@ 0x30
 8003936:	2300      	movs	r3, #0
 8003938:	637b      	str	r3, [r7, #52]	@ 0x34
 800393a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	f04f 0000 	mov.w	r0, #0
 8003946:	f04f 0100 	mov.w	r1, #0
 800394a:	0159      	lsls	r1, r3, #5
 800394c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003950:	0150      	lsls	r0, r2, #5
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4621      	mov	r1, r4
 8003958:	1a51      	subs	r1, r2, r1
 800395a:	6139      	str	r1, [r7, #16]
 800395c:	4629      	mov	r1, r5
 800395e:	eb63 0301 	sbc.w	r3, r3, r1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003970:	4659      	mov	r1, fp
 8003972:	018b      	lsls	r3, r1, #6
 8003974:	4651      	mov	r1, sl
 8003976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800397a:	4651      	mov	r1, sl
 800397c:	018a      	lsls	r2, r1, #6
 800397e:	4651      	mov	r1, sl
 8003980:	ebb2 0801 	subs.w	r8, r2, r1
 8003984:	4659      	mov	r1, fp
 8003986:	eb63 0901 	sbc.w	r9, r3, r1
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800399a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800399e:	4690      	mov	r8, r2
 80039a0:	4699      	mov	r9, r3
 80039a2:	4623      	mov	r3, r4
 80039a4:	eb18 0303 	adds.w	r3, r8, r3
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	462b      	mov	r3, r5
 80039ac:	eb49 0303 	adc.w	r3, r9, r3
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039be:	4629      	mov	r1, r5
 80039c0:	024b      	lsls	r3, r1, #9
 80039c2:	4621      	mov	r1, r4
 80039c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039c8:	4621      	mov	r1, r4
 80039ca:	024a      	lsls	r2, r1, #9
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039d2:	2200      	movs	r2, #0
 80039d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039dc:	f7fc fc00 	bl	80001e0 <__aeabi_uldivmod>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4613      	mov	r3, r2
 80039e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039e8:	e058      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ea:	4b38      	ldr	r3, [pc, #224]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	2200      	movs	r2, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	4611      	mov	r1, r2
 80039f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	2300      	movs	r3, #0
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a04:	4642      	mov	r2, r8
 8003a06:	464b      	mov	r3, r9
 8003a08:	f04f 0000 	mov.w	r0, #0
 8003a0c:	f04f 0100 	mov.w	r1, #0
 8003a10:	0159      	lsls	r1, r3, #5
 8003a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a16:	0150      	lsls	r0, r2, #5
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a22:	4649      	mov	r1, r9
 8003a24:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a3c:	ebb2 040a 	subs.w	r4, r2, sl
 8003a40:	eb63 050b 	sbc.w	r5, r3, fp
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	00eb      	lsls	r3, r5, #3
 8003a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a52:	00e2      	lsls	r2, r4, #3
 8003a54:	4614      	mov	r4, r2
 8003a56:	461d      	mov	r5, r3
 8003a58:	4643      	mov	r3, r8
 8003a5a:	18e3      	adds	r3, r4, r3
 8003a5c:	603b      	str	r3, [r7, #0]
 8003a5e:	464b      	mov	r3, r9
 8003a60:	eb45 0303 	adc.w	r3, r5, r3
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a72:	4629      	mov	r1, r5
 8003a74:	028b      	lsls	r3, r1, #10
 8003a76:	4621      	mov	r1, r4
 8003a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	028a      	lsls	r2, r1, #10
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a86:	2200      	movs	r2, #0
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	61fa      	str	r2, [r7, #28]
 8003a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a90:	f7fc fba6 	bl	80001e0 <__aeabi_uldivmod>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4613      	mov	r3, r2
 8003a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x200>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003aac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ab6:	e002      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab8:	4b05      	ldr	r3, [pc, #20]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3750      	adds	r7, #80	@ 0x50
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	00f42400 	.word	0x00f42400
 8003ad4:	007a1200 	.word	0x007a1200

08003ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003adc:	4b03      	ldr	r3, [pc, #12]	@ (8003aec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000000 	.word	0x20000000

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af4:	f7ff fff0 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0a9b      	lsrs	r3, r3, #10
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4903      	ldr	r1, [pc, #12]	@ (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40023800 	.word	0x40023800
 8003b14:	08006f94 	.word	0x08006f94

08003b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b1c:	f7ff ffdc 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	0b5b      	lsrs	r3, r3, #13
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4903      	ldr	r1, [pc, #12]	@ (8003b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	08006f94 	.word	0x08006f94

08003b40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b50:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <HAL_RCC_GetClockConfig+0x5c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0203 	and.w	r2, r3, #3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <HAL_RCC_GetClockConfig+0x5c>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b68:	4b0c      	ldr	r3, [pc, #48]	@ (8003b9c <HAL_RCC_GetClockConfig+0x5c>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <HAL_RCC_GetClockConfig+0x5c>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b82:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <HAL_RCC_GetClockConfig+0x60>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0207 	and.w	r2, r3, #7
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	601a      	str	r2, [r3, #0]
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40023c00 	.word	0x40023c00

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d035      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bcc:	4b67      	ldr	r3, [pc, #412]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd2:	f7fd ffe5 	bl	8001ba0 <HAL_GetTick>
 8003bd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bda:	f7fd ffe1 	bl	8001ba0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e0ba      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bec:	4b60      	ldr	r3, [pc, #384]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	019a      	lsls	r2, r3, #6
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	071b      	lsls	r3, r3, #28
 8003c04:	495a      	ldr	r1, [pc, #360]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c0c:	4b57      	ldr	r3, [pc, #348]	@ (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c12:	f7fd ffc5 	bl	8001ba0 <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c1a:	f7fd ffc1 	bl	8001ba0 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e09a      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c2c:	4b50      	ldr	r3, [pc, #320]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8083 	beq.w	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	4b49      	ldr	r3, [pc, #292]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	4a48      	ldr	r2, [pc, #288]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c56:	4b46      	ldr	r3, [pc, #280]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c62:	4b44      	ldr	r3, [pc, #272]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a43      	ldr	r2, [pc, #268]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6e:	f7fd ff97 	bl	8001ba0 <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c76:	f7fd ff93 	bl	8001ba0 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e06c      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c88:	4b3a      	ldr	r3, [pc, #232]	@ (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c94:	4b36      	ldr	r3, [pc, #216]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c9c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02f      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d028      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cc8:	4a29      	ldr	r2, [pc, #164]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cce:	4b28      	ldr	r3, [pc, #160]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d114      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cda:	f7fd ff61 	bl	8001ba0 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fd ff5d 	bl	8001ba0 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e034      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ee      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d10:	d10d      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d12:	4b17      	ldr	r3, [pc, #92]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d26:	4912      	ldr	r1, [pc, #72]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	608b      	str	r3, [r1, #8]
 8003d2c:	e005      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003d2e:	4b10      	ldr	r3, [pc, #64]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	4a0f      	ldr	r2, [pc, #60]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d34:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d38:	6093      	str	r3, [r2, #8]
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d46:	490a      	ldr	r1, [pc, #40]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7c1a      	ldrb	r2, [r3, #16]
 8003d5c:	4b07      	ldr	r3, [pc, #28]	@ (8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d5e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	42470068 	.word	0x42470068
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40007000 	.word	0x40007000
 8003d78:	42470e40 	.word	0x42470e40
 8003d7c:	424711e0 	.word	0x424711e0

08003d80 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e073      	b.n	8003e7e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7f5b      	ldrb	r3, [r3, #29]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fc ffd8 	bl	8000d5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d055      	beq.n	8003e6c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	22ca      	movs	r2, #202	@ 0xca
 8003dc6:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2253      	movs	r2, #83	@ 0x53
 8003dce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f99d 	bl	8004110 <RTC_EnterInitMode>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d12c      	bne.n	8003e3a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6899      	ldr	r1, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68d2      	ldr	r2, [r2, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6919      	ldr	r1, [r3, #16]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	041a      	lsls	r2, r3, #16
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f9a4 	bl	800417e <RTC_ExitInitMode>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d110      	bne.n	8003e62 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e4e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	22ff      	movs	r2, #255	@ 0xff
 8003e68:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e6a:	e001      	b.n	8003e70 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e86:	b590      	push	{r4, r7, lr}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	7f1b      	ldrb	r3, [r3, #28]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_RTC_SetTime+0x1c>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e087      	b.n	8003fb2 <HAL_RTC_SetTime+0x12c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d126      	bne.n	8003f02 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 f97b 	bl	80041c8 <RTC_ByteToBcd2>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	785b      	ldrb	r3, [r3, #1]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f974 	bl	80041c8 <RTC_ByteToBcd2>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003ee4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	789b      	ldrb	r3, [r3, #2]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f96c 	bl	80041c8 <RTC_ByteToBcd2>
 8003ef0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ef2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	78db      	ldrb	r3, [r3, #3]
 8003efa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e018      	b.n	8003f34 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2200      	movs	r2, #0
 8003f14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f22:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003f28:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	78db      	ldrb	r3, [r3, #3]
 8003f2e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	22ca      	movs	r2, #202	@ 0xca
 8003f3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2253      	movs	r2, #83	@ 0x53
 8003f42:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f8e3 	bl	8004110 <RTC_EnterInitMode>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003f4e:	7cfb      	ldrb	r3, [r7, #19]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d120      	bne.n	8003f96 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003f5e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003f62:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f72:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f8f6 	bl	800417e <RTC_ExitInitMode>
 8003f92:	4603      	mov	r3, r0
 8003f94:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	22ff      	movs	r2, #255	@ 0xff
 8003fa8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]

  return status;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd90      	pop	{r4, r7, pc}

08003fba <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003fba:	b590      	push	{r4, r7, lr}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	7f1b      	ldrb	r3, [r3, #28]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RTC_SetDate+0x1c>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e071      	b.n	80040ba <HAL_RTC_SetDate+0x100>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10e      	bne.n	8004006 <HAL_RTC_SetDate+0x4c>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	785b      	ldrb	r3, [r3, #1]
 8003ff8:	f023 0310 	bic.w	r3, r3, #16
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	330a      	adds	r3, #10
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11c      	bne.n	8004046 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	78db      	ldrb	r3, [r3, #3]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f8d9 	bl	80041c8 <RTC_ByteToBcd2>
 8004016:	4603      	mov	r3, r0
 8004018:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f8d2 	bl	80041c8 <RTC_ByteToBcd2>
 8004024:	4603      	mov	r3, r0
 8004026:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004028:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f8ca 	bl	80041c8 <RTC_ByteToBcd2>
 8004034:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004036:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e00e      	b.n	8004064 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	78db      	ldrb	r3, [r3, #3]
 800404a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004052:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004058:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	22ca      	movs	r2, #202	@ 0xca
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2253      	movs	r2, #83	@ 0x53
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f84b 	bl	8004110 <RTC_EnterInitMode>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10c      	bne.n	800409e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800408e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004092:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f872 	bl	800417e <RTC_ExitInitMode>
 800409a:	4603      	mov	r3, r0
 800409c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800409e:	7cfb      	ldrb	r3, [r7, #19]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	22ff      	movs	r2, #255	@ 0xff
 80040b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]

  return status;
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}
	...

080040c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0d      	ldr	r2, [pc, #52]	@ (800410c <HAL_RTC_WaitForSynchro+0x48>)
 80040d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d8:	f7fd fd62 	bl	8001ba0 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040de:	e009      	b.n	80040f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040e0:	f7fd fd5e 	bl	8001ba0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040ee:	d901      	bls.n	80040f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e007      	b.n	8004104 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0ee      	beq.n	80040e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	00013f5f 	.word	0x00013f5f

08004110 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d122      	bne.n	8004174 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800413c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800413e:	f7fd fd2f 	bl	8001ba0 <HAL_GetTick>
 8004142:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004144:	e00c      	b.n	8004160 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004146:	f7fd fd2b 	bl	8001ba0 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004154:	d904      	bls.n	8004160 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d102      	bne.n	8004174 <RTC_EnterInitMode+0x64>
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d1e8      	bne.n	8004146 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004198:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff8b 	bl	80040c4 <HAL_RTC_WaitForSynchro>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2204      	movs	r2, #4
 80041b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80041d6:	e005      	b.n	80041e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	3b0a      	subs	r3, #10
 80041e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	2b09      	cmp	r3, #9
 80041e8:	d8f6      	bhi.n	80041d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	b2db      	uxtb	r3, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e07b      	b.n	800430e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004226:	d009      	beq.n	800423c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	61da      	str	r2, [r3, #28]
 800422e:	e005      	b.n	800423c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fdac 	bl	8000db4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c0:	ea42 0103 	orr.w	r1, r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 0104 	and.w	r1, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	f003 0210 	and.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b088      	sub	sp, #32
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_SPI_Transmit+0x22>
 8004334:	2302      	movs	r3, #2
 8004336:	e12d      	b.n	8004594 <HAL_SPI_Transmit+0x27e>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004340:	f7fd fc2e 	bl	8001ba0 <HAL_GetTick>
 8004344:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004346:	88fb      	ldrh	r3, [r7, #6]
 8004348:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d002      	beq.n	800435c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004356:	2302      	movs	r3, #2
 8004358:	77fb      	strb	r3, [r7, #31]
    goto error;
 800435a:	e116      	b.n	800458a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Transmit+0x52>
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d102      	bne.n	800436e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800436c:	e10d      	b.n	800458a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2203      	movs	r2, #3
 8004372:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	88fa      	ldrh	r2, [r7, #6]
 8004386:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b4:	d10f      	bne.n	80043d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d007      	beq.n	80043f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043fc:	d14f      	bne.n	800449e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_SPI_Transmit+0xf6>
 8004406:	8afb      	ldrh	r3, [r7, #22]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d142      	bne.n	8004492 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004410:	881a      	ldrh	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441c:	1c9a      	adds	r2, r3, #2
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004430:	e02f      	b.n	8004492 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b02      	cmp	r3, #2
 800443e:	d112      	bne.n	8004466 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004464:	e015      	b.n	8004492 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004466:	f7fd fb9b 	bl	8001ba0 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d803      	bhi.n	800447e <HAL_SPI_Transmit+0x168>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d102      	bne.n	8004484 <HAL_SPI_Transmit+0x16e>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004490:	e07b      	b.n	800458a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1ca      	bne.n	8004432 <HAL_SPI_Transmit+0x11c>
 800449c:	e050      	b.n	8004540 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d002      	beq.n	80044ac <HAL_SPI_Transmit+0x196>
 80044a6:	8afb      	ldrh	r3, [r7, #22]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d144      	bne.n	8004536 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	7812      	ldrb	r2, [r2, #0]
 80044b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044d2:	e030      	b.n	8004536 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d113      	bne.n	800450a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004508:	e015      	b.n	8004536 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800450a:	f7fd fb49 	bl	8001ba0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d803      	bhi.n	8004522 <HAL_SPI_Transmit+0x20c>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d102      	bne.n	8004528 <HAL_SPI_Transmit+0x212>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004534:	e029      	b.n	800458a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1c9      	bne.n	80044d4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	6839      	ldr	r1, [r7, #0]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fa61 	bl	8004a0c <SPI_EndRxTxTransaction>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e003      	b.n	800458a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004592:	7ffb      	ldrb	r3, [r7, #31]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3720      	adds	r7, #32
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	@ 0x30
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045aa:	2301      	movs	r3, #1
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x26>
 80045be:	2302      	movs	r3, #2
 80045c0:	e198      	b.n	80048f4 <HAL_SPI_TransmitReceive+0x358>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ca:	f7fd fae9 	bl	8001ba0 <HAL_GetTick>
 80045ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045e0:	887b      	ldrh	r3, [r7, #2]
 80045e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d00f      	beq.n	800460c <HAL_SPI_TransmitReceive+0x70>
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045f2:	d107      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <HAL_SPI_TransmitReceive+0x68>
 80045fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004600:	2b04      	cmp	r3, #4
 8004602:	d003      	beq.n	800460c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004604:	2302      	movs	r3, #2
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800460a:	e16d      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_SPI_TransmitReceive+0x82>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_SPI_TransmitReceive+0x82>
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004624:	e160      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b04      	cmp	r3, #4
 8004630:	d003      	beq.n	800463a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2205      	movs	r2, #5
 8004636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	887a      	ldrh	r2, [r7, #2]
 800464a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	887a      	ldrh	r2, [r7, #2]
 800465c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	887a      	ldrh	r2, [r7, #2]
 8004662:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800467a:	2b40      	cmp	r3, #64	@ 0x40
 800467c:	d007      	beq.n	800468e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800468c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004696:	d17c      	bne.n	8004792 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <HAL_SPI_TransmitReceive+0x10a>
 80046a0:	8b7b      	ldrh	r3, [r7, #26]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d16a      	bne.n	800477c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	881a      	ldrh	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ca:	e057      	b.n	800477c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d11b      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x176>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d016      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x176>
 80046e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d113      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ee:	881a      	ldrh	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d119      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x1b8>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d014      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	b292      	uxth	r2, r2
 8004736:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004750:	2301      	movs	r3, #1
 8004752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004754:	f7fd fa24 	bl	8001ba0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004760:	429a      	cmp	r2, r3
 8004762:	d80b      	bhi.n	800477c <HAL_SPI_TransmitReceive+0x1e0>
 8004764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d007      	beq.n	800477c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800477a:	e0b5      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1a2      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x130>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d19d      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x130>
 8004790:	e080      	b.n	8004894 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_SPI_TransmitReceive+0x204>
 800479a:	8b7b      	ldrh	r3, [r7, #26]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d16f      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	330c      	adds	r3, #12
 80047aa:	7812      	ldrb	r2, [r2, #0]
 80047ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b2:	1c5a      	adds	r2, r3, #1
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c6:	e05b      	b.n	8004880 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d11c      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x274>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x274>
 80047e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d114      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	330c      	adds	r3, #12
 80047f0:	7812      	ldrb	r2, [r2, #0]
 80047f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d119      	bne.n	8004852 <HAL_SPI_TransmitReceive+0x2b6>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d014      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800484e:	2301      	movs	r3, #1
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004852:	f7fd f9a5 	bl	8001ba0 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800485e:	429a      	cmp	r2, r3
 8004860:	d803      	bhi.n	800486a <HAL_SPI_TransmitReceive+0x2ce>
 8004862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d102      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x2d4>
 800486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800487e:	e033      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d19e      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x22c>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d199      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004896:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f8b7 	bl	8004a0c <SPI_EndRxTxTransaction>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d006      	beq.n	80048b2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80048b0:	e01a      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048de:	e003      	b.n	80048e8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80048f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3730      	adds	r7, #48	@ 0x30
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800490c:	f7fd f948 	bl	8001ba0 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	4413      	add	r3, r2
 800491a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800491c:	f7fd f940 	bl	8001ba0 <HAL_GetTick>
 8004920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004922:	4b39      	ldr	r3, [pc, #228]	@ (8004a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	015b      	lsls	r3, r3, #5
 8004928:	0d1b      	lsrs	r3, r3, #20
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004932:	e054      	b.n	80049de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d050      	beq.n	80049de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800493c:	f7fd f930 	bl	8001ba0 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	429a      	cmp	r2, r3
 800494a:	d902      	bls.n	8004952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d13d      	bne.n	80049ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800496a:	d111      	bne.n	8004990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004974:	d004      	beq.n	8004980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497e:	d107      	bne.n	8004990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800498e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004998:	d10f      	bne.n	80049ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e017      	b.n	80049fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	3b01      	subs	r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4013      	ands	r3, r2
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	bf0c      	ite	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	2300      	movne	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d19b      	bne.n	8004934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000000 	.word	0x20000000

08004a0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	2102      	movs	r1, #2
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f7ff ff6a 	bl	80048fc <SPI_WaitFlagStateUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	f043 0220 	orr.w	r2, r3, #32
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e032      	b.n	8004aa4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004aac <SPI_EndRxTxTransaction+0xa0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab0 <SPI_EndRxTxTransaction+0xa4>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	0d5b      	lsrs	r3, r3, #21
 8004a4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a5c:	d112      	bne.n	8004a84 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2200      	movs	r2, #0
 8004a66:	2180      	movs	r1, #128	@ 0x80
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff ff47 	bl	80048fc <SPI_WaitFlagStateUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d016      	beq.n	8004aa2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e00f      	b.n	8004aa4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9a:	2b80      	cmp	r3, #128	@ 0x80
 8004a9c:	d0f2      	beq.n	8004a84 <SPI_EndRxTxTransaction+0x78>
 8004a9e:	e000      	b.n	8004aa2 <SPI_EndRxTxTransaction+0x96>
        break;
 8004aa0:	bf00      	nop
  }

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000000 	.word	0x20000000
 8004ab0:	165e9f81 	.word	0x165e9f81

08004ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e041      	b.n	8004b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fc f9b2 	bl	8000e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f000 fa9e 	bl	8005034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d001      	beq.n	8004b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e044      	b.n	8004bf6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1e      	ldr	r2, [pc, #120]	@ (8004c04 <HAL_TIM_Base_Start_IT+0xb0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b96:	d013      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004c08 <HAL_TIM_Base_Start_IT+0xb4>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a19      	ldr	r2, [pc, #100]	@ (8004c0c <HAL_TIM_Base_Start_IT+0xb8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a17      	ldr	r2, [pc, #92]	@ (8004c10 <HAL_TIM_Base_Start_IT+0xbc>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a16      	ldr	r2, [pc, #88]	@ (8004c14 <HAL_TIM_Base_Start_IT+0xc0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d111      	bne.n	8004be4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b06      	cmp	r3, #6
 8004bd0:	d010      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	e007      	b.n	8004bf4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40014000 	.word	0x40014000

08004c18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a1a      	ldr	r2, [r3, #32]
 8004c36:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10f      	bne.n	8004c60 <HAL_TIM_Base_Stop_IT+0x48>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	f240 4344 	movw	r3, #1092	@ 0x444
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d107      	bne.n	8004c60 <HAL_TIM_Base_Stop_IT+0x48>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d020      	beq.n	8004cda <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01b      	beq.n	8004cda <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f06f 0202 	mvn.w	r2, #2
 8004caa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f999 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004cc6:	e005      	b.n	8004cd4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f98b 	bl	8004fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f99c 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d020      	beq.n	8004d26 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01b      	beq.n	8004d26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f06f 0204 	mvn.w	r2, #4
 8004cf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f973 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004d12:	e005      	b.n	8004d20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 f965 	bl	8004fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f976 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f003 0308 	and.w	r3, r3, #8
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d020      	beq.n	8004d72 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01b      	beq.n	8004d72 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f06f 0208 	mvn.w	r2, #8
 8004d42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2204      	movs	r2, #4
 8004d48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f94d 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004d5e:	e005      	b.n	8004d6c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f93f 	bl	8004fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f950 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01b      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f06f 0210 	mvn.w	r2, #16
 8004d8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2208      	movs	r2, #8
 8004d94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f927 	bl	8004ff8 <HAL_TIM_IC_CaptureCallback>
 8004daa:	e005      	b.n	8004db8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f919 	bl	8004fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f92a 	bl	800500c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00c      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f06f 0201 	mvn.w	r2, #1
 8004dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fb feb5 	bl	8000b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fab5 	bl	8005370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f8fb 	bl	8005020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00c      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f06f 0220 	mvn.w	r2, #32
 8004e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa87 	bl	800535c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_TIM_ConfigClockSource+0x1c>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e0b4      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x186>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e98:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eaa:	d03e      	beq.n	8004f2a <HAL_TIM_ConfigClockSource+0xd4>
 8004eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eb0:	f200 8087 	bhi.w	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb8:	f000 8086 	beq.w	8004fc8 <HAL_TIM_ConfigClockSource+0x172>
 8004ebc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ec0:	d87f      	bhi.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec2:	2b70      	cmp	r3, #112	@ 0x70
 8004ec4:	d01a      	beq.n	8004efc <HAL_TIM_ConfigClockSource+0xa6>
 8004ec6:	2b70      	cmp	r3, #112	@ 0x70
 8004ec8:	d87b      	bhi.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
 8004eca:	2b60      	cmp	r3, #96	@ 0x60
 8004ecc:	d050      	beq.n	8004f70 <HAL_TIM_ConfigClockSource+0x11a>
 8004ece:	2b60      	cmp	r3, #96	@ 0x60
 8004ed0:	d877      	bhi.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed2:	2b50      	cmp	r3, #80	@ 0x50
 8004ed4:	d03c      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0xfa>
 8004ed6:	2b50      	cmp	r3, #80	@ 0x50
 8004ed8:	d873      	bhi.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
 8004eda:	2b40      	cmp	r3, #64	@ 0x40
 8004edc:	d058      	beq.n	8004f90 <HAL_TIM_ConfigClockSource+0x13a>
 8004ede:	2b40      	cmp	r3, #64	@ 0x40
 8004ee0:	d86f      	bhi.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee2:	2b30      	cmp	r3, #48	@ 0x30
 8004ee4:	d064      	beq.n	8004fb0 <HAL_TIM_ConfigClockSource+0x15a>
 8004ee6:	2b30      	cmp	r3, #48	@ 0x30
 8004ee8:	d86b      	bhi.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d060      	beq.n	8004fb0 <HAL_TIM_ConfigClockSource+0x15a>
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d867      	bhi.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d05c      	beq.n	8004fb0 <HAL_TIM_ConfigClockSource+0x15a>
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d05a      	beq.n	8004fb0 <HAL_TIM_ConfigClockSource+0x15a>
 8004efa:	e062      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f0c:	f000 f998 	bl	8005240 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	609a      	str	r2, [r3, #8]
      break;
 8004f28:	e04f      	b.n	8004fca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f3a:	f000 f981 	bl	8005240 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f4c:	609a      	str	r2, [r3, #8]
      break;
 8004f4e:	e03c      	b.n	8004fca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f000 f8f5 	bl	800514c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2150      	movs	r1, #80	@ 0x50
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f94e 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004f6e:	e02c      	b.n	8004fca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f000 f914 	bl	80051aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2160      	movs	r1, #96	@ 0x60
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f93e 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004f8e:	e01c      	b.n	8004fca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f000 f8d5 	bl	800514c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2140      	movs	r1, #64	@ 0x40
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 f92e 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004fae:	e00c      	b.n	8004fca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 f925 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004fc0:	e003      	b.n	8004fca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc6:	e000      	b.n	8004fca <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a3a      	ldr	r2, [pc, #232]	@ (8005130 <TIM_Base_SetConfig+0xfc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005052:	d00b      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a37      	ldr	r2, [pc, #220]	@ (8005134 <TIM_Base_SetConfig+0x100>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a36      	ldr	r2, [pc, #216]	@ (8005138 <TIM_Base_SetConfig+0x104>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a35      	ldr	r2, [pc, #212]	@ (800513c <TIM_Base_SetConfig+0x108>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d108      	bne.n	800507e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2b      	ldr	r2, [pc, #172]	@ (8005130 <TIM_Base_SetConfig+0xfc>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01b      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800508c:	d017      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a28      	ldr	r2, [pc, #160]	@ (8005134 <TIM_Base_SetConfig+0x100>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a27      	ldr	r2, [pc, #156]	@ (8005138 <TIM_Base_SetConfig+0x104>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a26      	ldr	r2, [pc, #152]	@ (800513c <TIM_Base_SetConfig+0x108>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a25      	ldr	r2, [pc, #148]	@ (8005140 <TIM_Base_SetConfig+0x10c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a24      	ldr	r2, [pc, #144]	@ (8005144 <TIM_Base_SetConfig+0x110>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a23      	ldr	r2, [pc, #140]	@ (8005148 <TIM_Base_SetConfig+0x114>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005130 <TIM_Base_SetConfig+0xfc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d103      	bne.n	8005104 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d105      	bne.n	8005122 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f023 0201 	bic.w	r2, r3, #1
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]
  }
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40010000 	.word	0x40010000
 8005134:	40000400 	.word	0x40000400
 8005138:	40000800 	.word	0x40000800
 800513c:	40000c00 	.word	0x40000c00
 8005140:	40014000 	.word	0x40014000
 8005144:	40014400 	.word	0x40014400
 8005148:	40014800 	.word	0x40014800

0800514c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 030a 	bic.w	r3, r3, #10
 8005188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f023 0210 	bic.w	r2, r3, #16
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	031b      	lsls	r3, r3, #12
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	f043 0307 	orr.w	r3, r3, #7
 800522c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800525a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	021a      	lsls	r2, r3, #8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	431a      	orrs	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4313      	orrs	r3, r2
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e050      	b.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052e4:	d013      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a18      	ldr	r2, [pc, #96]	@ (800534c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a16      	ldr	r2, [pc, #88]	@ (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a15      	ldr	r2, [pc, #84]	@ (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a13      	ldr	r2, [pc, #76]	@ (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d10c      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005314:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	4313      	orrs	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40010000 	.word	0x40010000
 800534c:	40000400 	.word	0x40000400
 8005350:	40000800 	.word	0x40000800
 8005354:	40000c00 	.word	0x40000c00
 8005358:	40014000 	.word	0x40014000

0800535c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e042      	b.n	800541c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fb fd72 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2224      	movs	r2, #36	@ 0x24
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f82b 	bl	8005424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005428:	b0c0      	sub	sp, #256	@ 0x100
 800542a:	af00      	add	r7, sp, #0
 800542c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005440:	68d9      	ldr	r1, [r3, #12]
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	ea40 0301 	orr.w	r3, r0, r1
 800544c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	431a      	orrs	r2, r3
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	431a      	orrs	r2, r3
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800547c:	f021 010c 	bic.w	r1, r1, #12
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800548a:	430b      	orrs	r3, r1
 800548c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800548e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800549a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549e:	6999      	ldr	r1, [r3, #24]
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	ea40 0301 	orr.w	r3, r0, r1
 80054aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4b8f      	ldr	r3, [pc, #572]	@ (80056f0 <UART_SetConfig+0x2cc>)
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d005      	beq.n	80054c4 <UART_SetConfig+0xa0>
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4b8d      	ldr	r3, [pc, #564]	@ (80056f4 <UART_SetConfig+0x2d0>)
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d104      	bne.n	80054ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054c4:	f7fe fb28 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 80054c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054cc:	e003      	b.n	80054d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ce:	f7fe fb0f 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 80054d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e0:	f040 810c 	bne.w	80056fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054f6:	4622      	mov	r2, r4
 80054f8:	462b      	mov	r3, r5
 80054fa:	1891      	adds	r1, r2, r2
 80054fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054fe:	415b      	adcs	r3, r3
 8005500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005502:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005506:	4621      	mov	r1, r4
 8005508:	eb12 0801 	adds.w	r8, r2, r1
 800550c:	4629      	mov	r1, r5
 800550e:	eb43 0901 	adc.w	r9, r3, r1
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800551e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005526:	4690      	mov	r8, r2
 8005528:	4699      	mov	r9, r3
 800552a:	4623      	mov	r3, r4
 800552c:	eb18 0303 	adds.w	r3, r8, r3
 8005530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005534:	462b      	mov	r3, r5
 8005536:	eb49 0303 	adc.w	r3, r9, r3
 800553a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800554a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800554e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005552:	460b      	mov	r3, r1
 8005554:	18db      	adds	r3, r3, r3
 8005556:	653b      	str	r3, [r7, #80]	@ 0x50
 8005558:	4613      	mov	r3, r2
 800555a:	eb42 0303 	adc.w	r3, r2, r3
 800555e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005564:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005568:	f7fa fe3a 	bl	80001e0 <__aeabi_uldivmod>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4b61      	ldr	r3, [pc, #388]	@ (80056f8 <UART_SetConfig+0x2d4>)
 8005572:	fba3 2302 	umull	r2, r3, r3, r2
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	011c      	lsls	r4, r3, #4
 800557a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800557e:	2200      	movs	r2, #0
 8005580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005584:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005588:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800558c:	4642      	mov	r2, r8
 800558e:	464b      	mov	r3, r9
 8005590:	1891      	adds	r1, r2, r2
 8005592:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005594:	415b      	adcs	r3, r3
 8005596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005598:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800559c:	4641      	mov	r1, r8
 800559e:	eb12 0a01 	adds.w	sl, r2, r1
 80055a2:	4649      	mov	r1, r9
 80055a4:	eb43 0b01 	adc.w	fp, r3, r1
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055bc:	4692      	mov	sl, r2
 80055be:	469b      	mov	fp, r3
 80055c0:	4643      	mov	r3, r8
 80055c2:	eb1a 0303 	adds.w	r3, sl, r3
 80055c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055ca:	464b      	mov	r3, r9
 80055cc:	eb4b 0303 	adc.w	r3, fp, r3
 80055d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055e8:	460b      	mov	r3, r1
 80055ea:	18db      	adds	r3, r3, r3
 80055ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ee:	4613      	mov	r3, r2
 80055f0:	eb42 0303 	adc.w	r3, r2, r3
 80055f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055fe:	f7fa fdef 	bl	80001e0 <__aeabi_uldivmod>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4611      	mov	r1, r2
 8005608:	4b3b      	ldr	r3, [pc, #236]	@ (80056f8 <UART_SetConfig+0x2d4>)
 800560a:	fba3 2301 	umull	r2, r3, r3, r1
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	2264      	movs	r2, #100	@ 0x64
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	1acb      	subs	r3, r1, r3
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800561e:	4b36      	ldr	r3, [pc, #216]	@ (80056f8 <UART_SetConfig+0x2d4>)
 8005620:	fba3 2302 	umull	r2, r3, r3, r2
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800562c:	441c      	add	r4, r3
 800562e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005632:	2200      	movs	r2, #0
 8005634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005638:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800563c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005640:	4642      	mov	r2, r8
 8005642:	464b      	mov	r3, r9
 8005644:	1891      	adds	r1, r2, r2
 8005646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005648:	415b      	adcs	r3, r3
 800564a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800564c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005650:	4641      	mov	r1, r8
 8005652:	1851      	adds	r1, r2, r1
 8005654:	6339      	str	r1, [r7, #48]	@ 0x30
 8005656:	4649      	mov	r1, r9
 8005658:	414b      	adcs	r3, r1
 800565a:	637b      	str	r3, [r7, #52]	@ 0x34
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005668:	4659      	mov	r1, fp
 800566a:	00cb      	lsls	r3, r1, #3
 800566c:	4651      	mov	r1, sl
 800566e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005672:	4651      	mov	r1, sl
 8005674:	00ca      	lsls	r2, r1, #3
 8005676:	4610      	mov	r0, r2
 8005678:	4619      	mov	r1, r3
 800567a:	4603      	mov	r3, r0
 800567c:	4642      	mov	r2, r8
 800567e:	189b      	adds	r3, r3, r2
 8005680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005684:	464b      	mov	r3, r9
 8005686:	460a      	mov	r2, r1
 8005688:	eb42 0303 	adc.w	r3, r2, r3
 800568c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800569c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056a4:	460b      	mov	r3, r1
 80056a6:	18db      	adds	r3, r3, r3
 80056a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056aa:	4613      	mov	r3, r2
 80056ac:	eb42 0303 	adc.w	r3, r2, r3
 80056b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056ba:	f7fa fd91 	bl	80001e0 <__aeabi_uldivmod>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4b0d      	ldr	r3, [pc, #52]	@ (80056f8 <UART_SetConfig+0x2d4>)
 80056c4:	fba3 1302 	umull	r1, r3, r3, r2
 80056c8:	095b      	lsrs	r3, r3, #5
 80056ca:	2164      	movs	r1, #100	@ 0x64
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	3332      	adds	r3, #50	@ 0x32
 80056d6:	4a08      	ldr	r2, [pc, #32]	@ (80056f8 <UART_SetConfig+0x2d4>)
 80056d8:	fba2 2303 	umull	r2, r3, r2, r3
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	f003 0207 	and.w	r2, r3, #7
 80056e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4422      	add	r2, r4
 80056ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056ec:	e106      	b.n	80058fc <UART_SetConfig+0x4d8>
 80056ee:	bf00      	nop
 80056f0:	40011000 	.word	0x40011000
 80056f4:	40011400 	.word	0x40011400
 80056f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005700:	2200      	movs	r2, #0
 8005702:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005706:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800570a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800570e:	4642      	mov	r2, r8
 8005710:	464b      	mov	r3, r9
 8005712:	1891      	adds	r1, r2, r2
 8005714:	6239      	str	r1, [r7, #32]
 8005716:	415b      	adcs	r3, r3
 8005718:	627b      	str	r3, [r7, #36]	@ 0x24
 800571a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800571e:	4641      	mov	r1, r8
 8005720:	1854      	adds	r4, r2, r1
 8005722:	4649      	mov	r1, r9
 8005724:	eb43 0501 	adc.w	r5, r3, r1
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	00eb      	lsls	r3, r5, #3
 8005732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005736:	00e2      	lsls	r2, r4, #3
 8005738:	4614      	mov	r4, r2
 800573a:	461d      	mov	r5, r3
 800573c:	4643      	mov	r3, r8
 800573e:	18e3      	adds	r3, r4, r3
 8005740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005744:	464b      	mov	r3, r9
 8005746:	eb45 0303 	adc.w	r3, r5, r3
 800574a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800575a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800576a:	4629      	mov	r1, r5
 800576c:	008b      	lsls	r3, r1, #2
 800576e:	4621      	mov	r1, r4
 8005770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005774:	4621      	mov	r1, r4
 8005776:	008a      	lsls	r2, r1, #2
 8005778:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800577c:	f7fa fd30 	bl	80001e0 <__aeabi_uldivmod>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4b60      	ldr	r3, [pc, #384]	@ (8005908 <UART_SetConfig+0x4e4>)
 8005786:	fba3 2302 	umull	r2, r3, r3, r2
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	011c      	lsls	r4, r3, #4
 800578e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005798:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800579c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	61b9      	str	r1, [r7, #24]
 80057a8:	415b      	adcs	r3, r3
 80057aa:	61fb      	str	r3, [r7, #28]
 80057ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b0:	4641      	mov	r1, r8
 80057b2:	1851      	adds	r1, r2, r1
 80057b4:	6139      	str	r1, [r7, #16]
 80057b6:	4649      	mov	r1, r9
 80057b8:	414b      	adcs	r3, r1
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057c8:	4659      	mov	r1, fp
 80057ca:	00cb      	lsls	r3, r1, #3
 80057cc:	4651      	mov	r1, sl
 80057ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d2:	4651      	mov	r1, sl
 80057d4:	00ca      	lsls	r2, r1, #3
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	4603      	mov	r3, r0
 80057dc:	4642      	mov	r2, r8
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057e4:	464b      	mov	r3, r9
 80057e6:	460a      	mov	r2, r1
 80057e8:	eb42 0303 	adc.w	r3, r2, r3
 80057ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005808:	4649      	mov	r1, r9
 800580a:	008b      	lsls	r3, r1, #2
 800580c:	4641      	mov	r1, r8
 800580e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005812:	4641      	mov	r1, r8
 8005814:	008a      	lsls	r2, r1, #2
 8005816:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800581a:	f7fa fce1 	bl	80001e0 <__aeabi_uldivmod>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4611      	mov	r1, r2
 8005824:	4b38      	ldr	r3, [pc, #224]	@ (8005908 <UART_SetConfig+0x4e4>)
 8005826:	fba3 2301 	umull	r2, r3, r3, r1
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	2264      	movs	r2, #100	@ 0x64
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	1acb      	subs	r3, r1, r3
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	3332      	adds	r3, #50	@ 0x32
 8005838:	4a33      	ldr	r2, [pc, #204]	@ (8005908 <UART_SetConfig+0x4e4>)
 800583a:	fba2 2303 	umull	r2, r3, r2, r3
 800583e:	095b      	lsrs	r3, r3, #5
 8005840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005844:	441c      	add	r4, r3
 8005846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584a:	2200      	movs	r2, #0
 800584c:	673b      	str	r3, [r7, #112]	@ 0x70
 800584e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005850:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005854:	4642      	mov	r2, r8
 8005856:	464b      	mov	r3, r9
 8005858:	1891      	adds	r1, r2, r2
 800585a:	60b9      	str	r1, [r7, #8]
 800585c:	415b      	adcs	r3, r3
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005864:	4641      	mov	r1, r8
 8005866:	1851      	adds	r1, r2, r1
 8005868:	6039      	str	r1, [r7, #0]
 800586a:	4649      	mov	r1, r9
 800586c:	414b      	adcs	r3, r1
 800586e:	607b      	str	r3, [r7, #4]
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800587c:	4659      	mov	r1, fp
 800587e:	00cb      	lsls	r3, r1, #3
 8005880:	4651      	mov	r1, sl
 8005882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005886:	4651      	mov	r1, sl
 8005888:	00ca      	lsls	r2, r1, #3
 800588a:	4610      	mov	r0, r2
 800588c:	4619      	mov	r1, r3
 800588e:	4603      	mov	r3, r0
 8005890:	4642      	mov	r2, r8
 8005892:	189b      	adds	r3, r3, r2
 8005894:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005896:	464b      	mov	r3, r9
 8005898:	460a      	mov	r2, r1
 800589a:	eb42 0303 	adc.w	r3, r2, r3
 800589e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058b8:	4649      	mov	r1, r9
 80058ba:	008b      	lsls	r3, r1, #2
 80058bc:	4641      	mov	r1, r8
 80058be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c2:	4641      	mov	r1, r8
 80058c4:	008a      	lsls	r2, r1, #2
 80058c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058ca:	f7fa fc89 	bl	80001e0 <__aeabi_uldivmod>
 80058ce:	4602      	mov	r2, r0
 80058d0:	460b      	mov	r3, r1
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <UART_SetConfig+0x4e4>)
 80058d4:	fba3 1302 	umull	r1, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	2164      	movs	r1, #100	@ 0x64
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	011b      	lsls	r3, r3, #4
 80058e4:	3332      	adds	r3, #50	@ 0x32
 80058e6:	4a08      	ldr	r2, [pc, #32]	@ (8005908 <UART_SetConfig+0x4e4>)
 80058e8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ec:	095b      	lsrs	r3, r3, #5
 80058ee:	f003 020f 	and.w	r2, r3, #15
 80058f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4422      	add	r2, r4
 80058fa:	609a      	str	r2, [r3, #8]
}
 80058fc:	bf00      	nop
 80058fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005902:	46bd      	mov	sp, r7
 8005904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005908:	51eb851f 	.word	0x51eb851f

0800590c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005910:	4904      	ldr	r1, [pc, #16]	@ (8005924 <MX_FATFS_Init+0x18>)
 8005912:	4805      	ldr	r0, [pc, #20]	@ (8005928 <MX_FATFS_Init+0x1c>)
 8005914:	f000 f8ae 	bl	8005a74 <FATFS_LinkDriver>
 8005918:	4603      	mov	r3, r0
 800591a:	461a      	mov	r2, r3
 800591c:	4b03      	ldr	r3, [pc, #12]	@ (800592c <MX_FATFS_Init+0x20>)
 800591e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005920:	bf00      	nop
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000500 	.word	0x20000500
 8005928:	20000010 	.word	0x20000010
 800592c:	200004fc 	.word	0x200004fc

08005930 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	4618      	mov	r0, r3
 800593e:	f7fb fdd9 	bl	80014f4 <SD_disk_initialize>
 8005942:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	4618      	mov	r0, r3
 800595a:	f7fb feb7 	bl	80016cc <SD_disk_status>
 800595e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005978:	7bf8      	ldrb	r0, [r7, #15]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	f7fb feba 	bl	80016f8 <SD_disk_read>
 8005984:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005986:	4618      	mov	r0, r3
 8005988:	3710      	adds	r7, #16
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
 800599a:	4603      	mov	r3, r0
 800599c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800599e:	7bf8      	ldrb	r0, [r7, #15]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	f7fb ff11 	bl	80017cc <SD_disk_write>
 80059aa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	603a      	str	r2, [r7, #0]
 80059be:	71fb      	strb	r3, [r7, #7]
 80059c0:	460b      	mov	r3, r1
 80059c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 80059c4:	79b9      	ldrb	r1, [r7, #6]
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fb ff82 	bl	80018d4 <SD_disk_ioctl>
 80059d0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80059f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 80059f4:	7a5b      	ldrb	r3, [r3, #9]
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d131      	bne.n	8005a60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80059fc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 80059fe:	7a5b      	ldrb	r3, [r3, #9]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	4b1a      	ldr	r3, [pc, #104]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 8005a06:	2100      	movs	r1, #0
 8005a08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005a0a:	4b19      	ldr	r3, [pc, #100]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 8005a0c:	7a5b      	ldrb	r3, [r3, #9]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	4a17      	ldr	r2, [pc, #92]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005a1a:	4b15      	ldr	r3, [pc, #84]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 8005a1c:	7a5b      	ldrb	r3, [r3, #9]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 8005a24:	4413      	add	r3, r2
 8005a26:	79fa      	ldrb	r2, [r7, #7]
 8005a28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005a2a:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 8005a2c:	7a5b      	ldrb	r3, [r3, #9]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	b2d1      	uxtb	r1, r2
 8005a34:	4a0e      	ldr	r2, [pc, #56]	@ (8005a70 <FATFS_LinkDriverEx+0x94>)
 8005a36:	7251      	strb	r1, [r2, #9]
 8005a38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005a3a:	7dbb      	ldrb	r3, [r7, #22]
 8005a3c:	3330      	adds	r3, #48	@ 0x30
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	3301      	adds	r3, #1
 8005a48:	223a      	movs	r2, #58	@ 0x3a
 8005a4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	3302      	adds	r3, #2
 8005a50:	222f      	movs	r2, #47	@ 0x2f
 8005a52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	3303      	adds	r3, #3
 8005a58:	2200      	movs	r2, #0
 8005a5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000504 	.word	0x20000504

08005a74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005a7e:	2200      	movs	r2, #0
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7ff ffaa 	bl	80059dc <FATFS_LinkDriverEx>
 8005a88:	4603      	mov	r3, r0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a92:	b480      	push	{r7}
 8005a94:	b083      	sub	sp, #12
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f103 0208 	add.w	r2, r3, #8
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aaa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f103 0208 	add.w	r2, r3, #8
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f103 0208 	add.w	r2, r3, #8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	601a      	str	r2, [r3, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6892      	ldr	r2, [r2, #8]
 8005b4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	6852      	ldr	r2, [r2, #4]
 8005b54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d103      	bne.n	8005b68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	1e5a      	subs	r2, r3, #1
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10b      	bne.n	8005bb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bae:	bf00      	nop
 8005bb0:	bf00      	nop
 8005bb2:	e7fd      	b.n	8005bb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bb4:	f000 fed0 	bl	8006958 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005bc4:	fb01 f303 	mul.w	r3, r1, r3
 8005bc8:	441a      	add	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be4:	3b01      	subs	r3, #1
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005bea:	fb01 f303 	mul.w	r3, r1, r3
 8005bee:	441a      	add	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	22ff      	movs	r2, #255	@ 0xff
 8005bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	22ff      	movs	r2, #255	@ 0xff
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d114      	bne.n	8005c34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01a      	beq.n	8005c48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3310      	adds	r3, #16
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fc36 	bl	8006488 <xTaskRemoveFromEventList>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d012      	beq.n	8005c48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c22:	4b0d      	ldr	r3, [pc, #52]	@ (8005c58 <xQueueGenericReset+0xd0>)
 8005c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	e009      	b.n	8005c48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3310      	adds	r3, #16
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff ff2a 	bl	8005a92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3324      	adds	r3, #36	@ 0x24
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff ff25 	bl	8005a92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c48:	f000 feb8 	bl	80069bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c4c:	2301      	movs	r3, #1
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	e000ed04 	.word	0xe000ed04

08005c5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	@ 0x28
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10b      	bne.n	8005c88 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
}
 8005c82:	bf00      	nop
 8005c84:	bf00      	nop
 8005c86:	e7fd      	b.n	8005c84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3348      	adds	r3, #72	@ 0x48
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 ff3e 	bl	8006b18 <pvPortMalloc>
 8005c9c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d011      	beq.n	8005cc8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	3348      	adds	r3, #72	@ 0x48
 8005cac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005cb6:	79fa      	ldrb	r2, [r7, #7]
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f805 	bl	8005cd2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
	}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
 8005cde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e002      	b.n	8005cf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d00:	2101      	movs	r1, #1
 8005d02:	69b8      	ldr	r0, [r7, #24]
 8005d04:	f7ff ff40 	bl	8005b88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d08:	bf00      	nop
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08e      	sub	sp, #56	@ 0x38
 8005d14:	af04      	add	r7, sp, #16
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10b      	bne.n	8005d3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	623b      	str	r3, [r7, #32]
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	e7fd      	b.n	8005d38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	61fb      	str	r3, [r7, #28]
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d5a:	2354      	movs	r3, #84	@ 0x54
 8005d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b54      	cmp	r3, #84	@ 0x54
 8005d62:	d00b      	beq.n	8005d7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	61bb      	str	r3, [r7, #24]
}
 8005d76:	bf00      	nop
 8005d78:	bf00      	nop
 8005d7a:	e7fd      	b.n	8005d78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01e      	beq.n	8005dc2 <xTaskCreateStatic+0xb2>
 8005d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01b      	beq.n	8005dc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9303      	str	r3, [sp, #12]
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	9302      	str	r3, [sp, #8]
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f850 	bl	8005e5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dbc:	f000 f8d6 	bl	8005f6c <prvAddNewTaskToReadyList>
 8005dc0:	e001      	b.n	8005dc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dc6:	697b      	ldr	r3, [r7, #20]
	}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	@ 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08c      	sub	sp, #48	@ 0x30
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fe97 	bl	8006b18 <pvPortMalloc>
 8005dea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00e      	beq.n	8005e10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005df2:	2054      	movs	r0, #84	@ 0x54
 8005df4:	f000 fe90 	bl	8006b18 <pvPortMalloc>
 8005df8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e06:	e005      	b.n	8005e14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e08:	6978      	ldr	r0, [r7, #20]
 8005e0a:	f000 ff53 	bl	8006cb4 <vPortFree>
 8005e0e:	e001      	b.n	8005e14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d017      	beq.n	8005e4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	2300      	movs	r3, #0
 8005e26:	9303      	str	r3, [sp, #12]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	9302      	str	r3, [sp, #8]
 8005e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f80e 	bl	8005e5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e3e:	69f8      	ldr	r0, [r7, #28]
 8005e40:	f000 f894 	bl	8005f6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e44:	2301      	movs	r3, #1
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	e002      	b.n	8005e50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e50:	69bb      	ldr	r3, [r7, #24]
	}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b088      	sub	sp, #32
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
 8005e66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e72:	3b01      	subs	r3, #1
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	f023 0307 	bic.w	r3, r3, #7
 8005e80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	617b      	str	r3, [r7, #20]
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	e7fd      	b.n	8005ea0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01f      	beq.n	8005eea <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e012      	b.n	8005ed6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	7819      	ldrb	r1, [r3, #0]
 8005eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3334      	adds	r3, #52	@ 0x34
 8005ec0:	460a      	mov	r2, r1
 8005ec2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d006      	beq.n	8005ede <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	2b0f      	cmp	r3, #15
 8005eda:	d9e9      	bls.n	8005eb0 <prvInitialiseNewTask+0x56>
 8005edc:	e000      	b.n	8005ee0 <prvInitialiseNewTask+0x86>
			{
				break;
 8005ede:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ee8:	e003      	b.n	8005ef2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef4:	2b06      	cmp	r3, #6
 8005ef6:	d901      	bls.n	8005efc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ef8:	2306      	movs	r3, #6
 8005efa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f00:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f06:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	3304      	adds	r3, #4
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fddd 	bl	8005ad2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1a:	3318      	adds	r3, #24
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fdd8 	bl	8005ad2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	f1c3 0207 	rsb	r2, r3, #7
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f36:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	68f9      	ldr	r1, [r7, #12]
 8005f4a:	69b8      	ldr	r0, [r7, #24]
 8005f4c:	f000 fbd6 	bl	80066fc <pxPortInitialiseStack>
 8005f50:	4602      	mov	r2, r0
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f62:	bf00      	nop
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f74:	f000 fcf0 	bl	8006958 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f78:	4b2a      	ldr	r3, [pc, #168]	@ (8006024 <prvAddNewTaskToReadyList+0xb8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	4a29      	ldr	r2, [pc, #164]	@ (8006024 <prvAddNewTaskToReadyList+0xb8>)
 8005f80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f82:	4b29      	ldr	r3, [pc, #164]	@ (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f8a:	4a27      	ldr	r2, [pc, #156]	@ (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f90:	4b24      	ldr	r3, [pc, #144]	@ (8006024 <prvAddNewTaskToReadyList+0xb8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d110      	bne.n	8005fba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f98:	f000 faf2 	bl	8006580 <prvInitialiseTaskLists>
 8005f9c:	e00d      	b.n	8005fba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f9e:	4b23      	ldr	r3, [pc, #140]	@ (800602c <prvAddNewTaskToReadyList+0xc0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fa6:	4b20      	ldr	r3, [pc, #128]	@ (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d802      	bhi.n	8005fba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fba:	4b1d      	ldr	r3, [pc, #116]	@ (8006030 <prvAddNewTaskToReadyList+0xc4>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006030 <prvAddNewTaskToReadyList+0xc4>)
 8005fc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	2201      	movs	r2, #1
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	4b19      	ldr	r3, [pc, #100]	@ (8006034 <prvAddNewTaskToReadyList+0xc8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	4a18      	ldr	r2, [pc, #96]	@ (8006034 <prvAddNewTaskToReadyList+0xc8>)
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4a15      	ldr	r2, [pc, #84]	@ (8006038 <prvAddNewTaskToReadyList+0xcc>)
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f7ff fd7d 	bl	8005aec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ff2:	f000 fce3 	bl	80069bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <prvAddNewTaskToReadyList+0xc0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00e      	beq.n	800601c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <prvAddNewTaskToReadyList+0xbc>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	429a      	cmp	r2, r3
 800600a:	d207      	bcs.n	800601c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800600c:	4b0b      	ldr	r3, [pc, #44]	@ (800603c <prvAddNewTaskToReadyList+0xd0>)
 800600e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800601c:	bf00      	nop
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000610 	.word	0x20000610
 8006028:	20000510 	.word	0x20000510
 800602c:	2000061c 	.word	0x2000061c
 8006030:	2000062c 	.word	0x2000062c
 8006034:	20000618 	.word	0x20000618
 8006038:	20000514 	.word	0x20000514
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08a      	sub	sp, #40	@ 0x28
 8006044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800604e:	463a      	mov	r2, r7
 8006050:	1d39      	adds	r1, r7, #4
 8006052:	f107 0308 	add.w	r3, r7, #8
 8006056:	4618      	mov	r0, r3
 8006058:	f7fa fa3a 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	9202      	str	r2, [sp, #8]
 8006064:	9301      	str	r3, [sp, #4]
 8006066:	2300      	movs	r3, #0
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	2300      	movs	r3, #0
 800606c:	460a      	mov	r2, r1
 800606e:	491f      	ldr	r1, [pc, #124]	@ (80060ec <vTaskStartScheduler+0xac>)
 8006070:	481f      	ldr	r0, [pc, #124]	@ (80060f0 <vTaskStartScheduler+0xb0>)
 8006072:	f7ff fe4d 	bl	8005d10 <xTaskCreateStatic>
 8006076:	4603      	mov	r3, r0
 8006078:	4a1e      	ldr	r2, [pc, #120]	@ (80060f4 <vTaskStartScheduler+0xb4>)
 800607a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800607c:	4b1d      	ldr	r3, [pc, #116]	@ (80060f4 <vTaskStartScheduler+0xb4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006084:	2301      	movs	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e001      	b.n	800608e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d116      	bne.n	80060c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	613b      	str	r3, [r7, #16]
}
 80060a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060a8:	4b13      	ldr	r3, [pc, #76]	@ (80060f8 <vTaskStartScheduler+0xb8>)
 80060aa:	f04f 32ff 	mov.w	r2, #4294967295
 80060ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060b0:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <vTaskStartScheduler+0xbc>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060b6:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <vTaskStartScheduler+0xc0>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060bc:	f000 fba8 	bl	8006810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060c0:	e00f      	b.n	80060e2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c8:	d10b      	bne.n	80060e2 <vTaskStartScheduler+0xa2>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	60fb      	str	r3, [r7, #12]
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	e7fd      	b.n	80060de <vTaskStartScheduler+0x9e>
}
 80060e2:	bf00      	nop
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	08006f7c 	.word	0x08006f7c
 80060f0:	08006551 	.word	0x08006551
 80060f4:	20000634 	.word	0x20000634
 80060f8:	20000630 	.word	0x20000630
 80060fc:	2000061c 	.word	0x2000061c
 8006100:	20000614 	.word	0x20000614

08006104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006108:	4b04      	ldr	r3, [pc, #16]	@ (800611c <vTaskSuspendAll+0x18>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	3301      	adds	r3, #1
 800610e:	4a03      	ldr	r2, [pc, #12]	@ (800611c <vTaskSuspendAll+0x18>)
 8006110:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	20000638 	.word	0x20000638

08006120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800612e:	4b42      	ldr	r3, [pc, #264]	@ (8006238 <xTaskResumeAll+0x118>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <xTaskResumeAll+0x2e>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	603b      	str	r3, [r7, #0]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800614e:	f000 fc03 	bl	8006958 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006152:	4b39      	ldr	r3, [pc, #228]	@ (8006238 <xTaskResumeAll+0x118>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	4a37      	ldr	r2, [pc, #220]	@ (8006238 <xTaskResumeAll+0x118>)
 800615a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615c:	4b36      	ldr	r3, [pc, #216]	@ (8006238 <xTaskResumeAll+0x118>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d161      	bne.n	8006228 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006164:	4b35      	ldr	r3, [pc, #212]	@ (800623c <xTaskResumeAll+0x11c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d05d      	beq.n	8006228 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800616c:	e02e      	b.n	80061cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800616e:	4b34      	ldr	r3, [pc, #208]	@ (8006240 <xTaskResumeAll+0x120>)
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3318      	adds	r3, #24
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fcda 	bl	8005b34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fcd5 	bl	8005b34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	2201      	movs	r2, #1
 8006190:	409a      	lsls	r2, r3
 8006192:	4b2c      	ldr	r3, [pc, #176]	@ (8006244 <xTaskResumeAll+0x124>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4313      	orrs	r3, r2
 8006198:	4a2a      	ldr	r2, [pc, #168]	@ (8006244 <xTaskResumeAll+0x124>)
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a0:	4613      	mov	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4a27      	ldr	r2, [pc, #156]	@ (8006248 <xTaskResumeAll+0x128>)
 80061aa:	441a      	add	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7ff fc9a 	bl	8005aec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061bc:	4b23      	ldr	r3, [pc, #140]	@ (800624c <xTaskResumeAll+0x12c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d302      	bcc.n	80061cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80061c6:	4b22      	ldr	r3, [pc, #136]	@ (8006250 <xTaskResumeAll+0x130>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061cc:	4b1c      	ldr	r3, [pc, #112]	@ (8006240 <xTaskResumeAll+0x120>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1cc      	bne.n	800616e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061da:	f000 fa6f 	bl	80066bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061de:	4b1d      	ldr	r3, [pc, #116]	@ (8006254 <xTaskResumeAll+0x134>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d010      	beq.n	800620c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061ea:	f000 f837 	bl	800625c <xTaskIncrementTick>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061f4:	4b16      	ldr	r3, [pc, #88]	@ (8006250 <xTaskResumeAll+0x130>)
 80061f6:	2201      	movs	r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f1      	bne.n	80061ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006206:	4b13      	ldr	r3, [pc, #76]	@ (8006254 <xTaskResumeAll+0x134>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800620c:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <xTaskResumeAll+0x130>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006218:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <xTaskResumeAll+0x138>)
 800621a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006228:	f000 fbc8 	bl	80069bc <vPortExitCritical>

	return xAlreadyYielded;
 800622c:	68bb      	ldr	r3, [r7, #8]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000638 	.word	0x20000638
 800623c:	20000610 	.word	0x20000610
 8006240:	200005d0 	.word	0x200005d0
 8006244:	20000618 	.word	0x20000618
 8006248:	20000514 	.word	0x20000514
 800624c:	20000510 	.word	0x20000510
 8006250:	20000624 	.word	0x20000624
 8006254:	20000620 	.word	0x20000620
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006262:	2300      	movs	r3, #0
 8006264:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006266:	4b4f      	ldr	r3, [pc, #316]	@ (80063a4 <xTaskIncrementTick+0x148>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	f040 808f 	bne.w	800638e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006270:	4b4d      	ldr	r3, [pc, #308]	@ (80063a8 <xTaskIncrementTick+0x14c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006278:	4a4b      	ldr	r2, [pc, #300]	@ (80063a8 <xTaskIncrementTick+0x14c>)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d121      	bne.n	80062c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006284:	4b49      	ldr	r3, [pc, #292]	@ (80063ac <xTaskIncrementTick+0x150>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00b      	beq.n	80062a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	603b      	str	r3, [r7, #0]
}
 80062a0:	bf00      	nop
 80062a2:	bf00      	nop
 80062a4:	e7fd      	b.n	80062a2 <xTaskIncrementTick+0x46>
 80062a6:	4b41      	ldr	r3, [pc, #260]	@ (80063ac <xTaskIncrementTick+0x150>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	4b40      	ldr	r3, [pc, #256]	@ (80063b0 <xTaskIncrementTick+0x154>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a3e      	ldr	r2, [pc, #248]	@ (80063ac <xTaskIncrementTick+0x150>)
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	4a3e      	ldr	r2, [pc, #248]	@ (80063b0 <xTaskIncrementTick+0x154>)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	4b3e      	ldr	r3, [pc, #248]	@ (80063b4 <xTaskIncrementTick+0x158>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3301      	adds	r3, #1
 80062c0:	4a3c      	ldr	r2, [pc, #240]	@ (80063b4 <xTaskIncrementTick+0x158>)
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	f000 f9fa 	bl	80066bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062c8:	4b3b      	ldr	r3, [pc, #236]	@ (80063b8 <xTaskIncrementTick+0x15c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d348      	bcc.n	8006364 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d2:	4b36      	ldr	r3, [pc, #216]	@ (80063ac <xTaskIncrementTick+0x150>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062dc:	4b36      	ldr	r3, [pc, #216]	@ (80063b8 <xTaskIncrementTick+0x15c>)
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	601a      	str	r2, [r3, #0]
					break;
 80062e4:	e03e      	b.n	8006364 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e6:	4b31      	ldr	r3, [pc, #196]	@ (80063ac <xTaskIncrementTick+0x150>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d203      	bcs.n	8006306 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062fe:	4a2e      	ldr	r2, [pc, #184]	@ (80063b8 <xTaskIncrementTick+0x15c>)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006304:	e02e      	b.n	8006364 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3304      	adds	r3, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fc12 	bl	8005b34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	3318      	adds	r3, #24
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fc09 	bl	8005b34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	2201      	movs	r2, #1
 8006328:	409a      	lsls	r2, r3
 800632a:	4b24      	ldr	r3, [pc, #144]	@ (80063bc <xTaskIncrementTick+0x160>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4313      	orrs	r3, r2
 8006330:	4a22      	ldr	r2, [pc, #136]	@ (80063bc <xTaskIncrementTick+0x160>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4a1f      	ldr	r2, [pc, #124]	@ (80063c0 <xTaskIncrementTick+0x164>)
 8006342:	441a      	add	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	3304      	adds	r3, #4
 8006348:	4619      	mov	r1, r3
 800634a:	4610      	mov	r0, r2
 800634c:	f7ff fbce 	bl	8005aec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006354:	4b1b      	ldr	r3, [pc, #108]	@ (80063c4 <xTaskIncrementTick+0x168>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	429a      	cmp	r2, r3
 800635c:	d3b9      	bcc.n	80062d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800635e:	2301      	movs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006362:	e7b6      	b.n	80062d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006364:	4b17      	ldr	r3, [pc, #92]	@ (80063c4 <xTaskIncrementTick+0x168>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800636a:	4915      	ldr	r1, [pc, #84]	@ (80063c0 <xTaskIncrementTick+0x164>)
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d901      	bls.n	8006380 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800637c:	2301      	movs	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006380:	4b11      	ldr	r3, [pc, #68]	@ (80063c8 <xTaskIncrementTick+0x16c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006388:	2301      	movs	r3, #1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	e004      	b.n	8006398 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800638e:	4b0f      	ldr	r3, [pc, #60]	@ (80063cc <xTaskIncrementTick+0x170>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3301      	adds	r3, #1
 8006394:	4a0d      	ldr	r2, [pc, #52]	@ (80063cc <xTaskIncrementTick+0x170>)
 8006396:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006398:	697b      	ldr	r3, [r7, #20]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000638 	.word	0x20000638
 80063a8:	20000614 	.word	0x20000614
 80063ac:	200005c8 	.word	0x200005c8
 80063b0:	200005cc 	.word	0x200005cc
 80063b4:	20000628 	.word	0x20000628
 80063b8:	20000630 	.word	0x20000630
 80063bc:	20000618 	.word	0x20000618
 80063c0:	20000514 	.word	0x20000514
 80063c4:	20000510 	.word	0x20000510
 80063c8:	20000624 	.word	0x20000624
 80063cc:	20000620 	.word	0x20000620

080063d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063d6:	4b27      	ldr	r3, [pc, #156]	@ (8006474 <vTaskSwitchContext+0xa4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063de:	4b26      	ldr	r3, [pc, #152]	@ (8006478 <vTaskSwitchContext+0xa8>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063e4:	e040      	b.n	8006468 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80063e6:	4b24      	ldr	r3, [pc, #144]	@ (8006478 <vTaskSwitchContext+0xa8>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ec:	4b23      	ldr	r3, [pc, #140]	@ (800647c <vTaskSwitchContext+0xac>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	fab3 f383 	clz	r3, r3
 80063f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80063fa:	7afb      	ldrb	r3, [r7, #11]
 80063fc:	f1c3 031f 	rsb	r3, r3, #31
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	491f      	ldr	r1, [pc, #124]	@ (8006480 <vTaskSwitchContext+0xb0>)
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	440b      	add	r3, r1
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10b      	bne.n	800642e <vTaskSwitchContext+0x5e>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	607b      	str	r3, [r7, #4]
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	e7fd      	b.n	800642a <vTaskSwitchContext+0x5a>
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4a11      	ldr	r2, [pc, #68]	@ (8006480 <vTaskSwitchContext+0xb0>)
 800643a:	4413      	add	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	605a      	str	r2, [r3, #4]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	3308      	adds	r3, #8
 8006450:	429a      	cmp	r2, r3
 8006452:	d104      	bne.n	800645e <vTaskSwitchContext+0x8e>
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	605a      	str	r2, [r3, #4]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4a07      	ldr	r2, [pc, #28]	@ (8006484 <vTaskSwitchContext+0xb4>)
 8006466:	6013      	str	r3, [r2, #0]
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20000638 	.word	0x20000638
 8006478:	20000624 	.word	0x20000624
 800647c:	20000618 	.word	0x20000618
 8006480:	20000514 	.word	0x20000514
 8006484:	20000510 	.word	0x20000510

08006488 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	3318      	adds	r3, #24
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fb3a 	bl	8005b34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006538 <xTaskRemoveFromEventList+0xb0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11c      	bne.n	8006502 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff fb31 	bl	8005b34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d6:	2201      	movs	r2, #1
 80064d8:	409a      	lsls	r2, r3
 80064da:	4b18      	ldr	r3, [pc, #96]	@ (800653c <xTaskRemoveFromEventList+0xb4>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4313      	orrs	r3, r2
 80064e0:	4a16      	ldr	r2, [pc, #88]	@ (800653c <xTaskRemoveFromEventList+0xb4>)
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4a13      	ldr	r2, [pc, #76]	@ (8006540 <xTaskRemoveFromEventList+0xb8>)
 80064f2:	441a      	add	r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	3304      	adds	r3, #4
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f7ff faf6 	bl	8005aec <vListInsertEnd>
 8006500:	e005      	b.n	800650e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	3318      	adds	r3, #24
 8006506:	4619      	mov	r1, r3
 8006508:	480e      	ldr	r0, [pc, #56]	@ (8006544 <xTaskRemoveFromEventList+0xbc>)
 800650a:	f7ff faef 	bl	8005aec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006512:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <xTaskRemoveFromEventList+0xc0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006518:	429a      	cmp	r2, r3
 800651a:	d905      	bls.n	8006528 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800651c:	2301      	movs	r3, #1
 800651e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006520:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <xTaskRemoveFromEventList+0xc4>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e001      	b.n	800652c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800652c:	697b      	ldr	r3, [r7, #20]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000638 	.word	0x20000638
 800653c:	20000618 	.word	0x20000618
 8006540:	20000514 	.word	0x20000514
 8006544:	200005d0 	.word	0x200005d0
 8006548:	20000510 	.word	0x20000510
 800654c:	20000624 	.word	0x20000624

08006550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006558:	f000 f852 	bl	8006600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800655c:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <prvIdleTask+0x28>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d9f9      	bls.n	8006558 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <prvIdleTask+0x2c>)
 8006566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006574:	e7f0      	b.n	8006558 <prvIdleTask+0x8>
 8006576:	bf00      	nop
 8006578:	20000514 	.word	0x20000514
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006586:	2300      	movs	r3, #0
 8006588:	607b      	str	r3, [r7, #4]
 800658a:	e00c      	b.n	80065a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4a12      	ldr	r2, [pc, #72]	@ (80065e0 <prvInitialiseTaskLists+0x60>)
 8006598:	4413      	add	r3, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fa79 	bl	8005a92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3301      	adds	r3, #1
 80065a4:	607b      	str	r3, [r7, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b06      	cmp	r3, #6
 80065aa:	d9ef      	bls.n	800658c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065ac:	480d      	ldr	r0, [pc, #52]	@ (80065e4 <prvInitialiseTaskLists+0x64>)
 80065ae:	f7ff fa70 	bl	8005a92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065b2:	480d      	ldr	r0, [pc, #52]	@ (80065e8 <prvInitialiseTaskLists+0x68>)
 80065b4:	f7ff fa6d 	bl	8005a92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065b8:	480c      	ldr	r0, [pc, #48]	@ (80065ec <prvInitialiseTaskLists+0x6c>)
 80065ba:	f7ff fa6a 	bl	8005a92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065be:	480c      	ldr	r0, [pc, #48]	@ (80065f0 <prvInitialiseTaskLists+0x70>)
 80065c0:	f7ff fa67 	bl	8005a92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065c4:	480b      	ldr	r0, [pc, #44]	@ (80065f4 <prvInitialiseTaskLists+0x74>)
 80065c6:	f7ff fa64 	bl	8005a92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065ca:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <prvInitialiseTaskLists+0x78>)
 80065cc:	4a05      	ldr	r2, [pc, #20]	@ (80065e4 <prvInitialiseTaskLists+0x64>)
 80065ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065d0:	4b0a      	ldr	r3, [pc, #40]	@ (80065fc <prvInitialiseTaskLists+0x7c>)
 80065d2:	4a05      	ldr	r2, [pc, #20]	@ (80065e8 <prvInitialiseTaskLists+0x68>)
 80065d4:	601a      	str	r2, [r3, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000514 	.word	0x20000514
 80065e4:	200005a0 	.word	0x200005a0
 80065e8:	200005b4 	.word	0x200005b4
 80065ec:	200005d0 	.word	0x200005d0
 80065f0:	200005e4 	.word	0x200005e4
 80065f4:	200005fc 	.word	0x200005fc
 80065f8:	200005c8 	.word	0x200005c8
 80065fc:	200005cc 	.word	0x200005cc

08006600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006606:	e019      	b.n	800663c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006608:	f000 f9a6 	bl	8006958 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660c:	4b10      	ldr	r3, [pc, #64]	@ (8006650 <prvCheckTasksWaitingTermination+0x50>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3304      	adds	r3, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff fa8b 	bl	8005b34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <prvCheckTasksWaitingTermination+0x54>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3b01      	subs	r3, #1
 8006624:	4a0b      	ldr	r2, [pc, #44]	@ (8006654 <prvCheckTasksWaitingTermination+0x54>)
 8006626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006628:	4b0b      	ldr	r3, [pc, #44]	@ (8006658 <prvCheckTasksWaitingTermination+0x58>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3b01      	subs	r3, #1
 800662e:	4a0a      	ldr	r2, [pc, #40]	@ (8006658 <prvCheckTasksWaitingTermination+0x58>)
 8006630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006632:	f000 f9c3 	bl	80069bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f810 	bl	800665c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800663c:	4b06      	ldr	r3, [pc, #24]	@ (8006658 <prvCheckTasksWaitingTermination+0x58>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e1      	bne.n	8006608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006644:	bf00      	nop
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	200005e4 	.word	0x200005e4
 8006654:	20000610 	.word	0x20000610
 8006658:	200005f8 	.word	0x200005f8

0800665c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800666a:	2b00      	cmp	r3, #0
 800666c:	d108      	bne.n	8006680 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fb1e 	bl	8006cb4 <vPortFree>
				vPortFree( pxTCB );
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fb1b 	bl	8006cb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800667e:	e019      	b.n	80066b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006686:	2b01      	cmp	r3, #1
 8006688:	d103      	bne.n	8006692 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fb12 	bl	8006cb4 <vPortFree>
	}
 8006690:	e010      	b.n	80066b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006698:	2b02      	cmp	r3, #2
 800669a:	d00b      	beq.n	80066b4 <prvDeleteTCB+0x58>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	60fb      	str	r3, [r7, #12]
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	e7fd      	b.n	80066b0 <prvDeleteTCB+0x54>
	}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066c2:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <prvResetNextTaskUnblockTime+0x38>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066cc:	4b0a      	ldr	r3, [pc, #40]	@ (80066f8 <prvResetNextTaskUnblockTime+0x3c>)
 80066ce:	f04f 32ff 	mov.w	r2, #4294967295
 80066d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066d4:	e008      	b.n	80066e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d6:	4b07      	ldr	r3, [pc, #28]	@ (80066f4 <prvResetNextTaskUnblockTime+0x38>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	4a04      	ldr	r2, [pc, #16]	@ (80066f8 <prvResetNextTaskUnblockTime+0x3c>)
 80066e6:	6013      	str	r3, [r2, #0]
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	200005c8 	.word	0x200005c8
 80066f8:	20000630 	.word	0x20000630

080066fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	3b04      	subs	r3, #4
 800670c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006714:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3b04      	subs	r3, #4
 800671a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f023 0201 	bic.w	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	3b04      	subs	r3, #4
 800672a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800672c:	4a0c      	ldr	r2, [pc, #48]	@ (8006760 <pxPortInitialiseStack+0x64>)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b14      	subs	r3, #20
 8006736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3b04      	subs	r3, #4
 8006742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f06f 0202 	mvn.w	r2, #2
 800674a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3b20      	subs	r3, #32
 8006750:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	08006765 	.word	0x08006765

08006764 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800676e:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <prvTaskExitError+0x58>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d00b      	beq.n	8006790 <prvTaskExitError+0x2c>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	60fb      	str	r3, [r7, #12]
}
 800678a:	bf00      	nop
 800678c:	bf00      	nop
 800678e:	e7fd      	b.n	800678c <prvTaskExitError+0x28>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	60bb      	str	r3, [r7, #8]
}
 80067a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067a4:	bf00      	nop
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0fc      	beq.n	80067a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000024 	.word	0x20000024

080067c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067c0:	4b07      	ldr	r3, [pc, #28]	@ (80067e0 <pxCurrentTCBConst2>)
 80067c2:	6819      	ldr	r1, [r3, #0]
 80067c4:	6808      	ldr	r0, [r1, #0]
 80067c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	f380 8809 	msr	PSP, r0
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f04f 0000 	mov.w	r0, #0
 80067d6:	f380 8811 	msr	BASEPRI, r0
 80067da:	4770      	bx	lr
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst2>:
 80067e0:	20000510 	.word	0x20000510
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067e8:	4808      	ldr	r0, [pc, #32]	@ (800680c <prvPortStartFirstTask+0x24>)
 80067ea:	6800      	ldr	r0, [r0, #0]
 80067ec:	6800      	ldr	r0, [r0, #0]
 80067ee:	f380 8808 	msr	MSP, r0
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f380 8814 	msr	CONTROL, r0
 80067fa:	b662      	cpsie	i
 80067fc:	b661      	cpsie	f
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	df00      	svc	0
 8006808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800680a:	bf00      	nop
 800680c:	e000ed08 	.word	0xe000ed08

08006810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006816:	4b47      	ldr	r3, [pc, #284]	@ (8006934 <xPortStartScheduler+0x124>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a47      	ldr	r2, [pc, #284]	@ (8006938 <xPortStartScheduler+0x128>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10b      	bne.n	8006838 <xPortStartScheduler+0x28>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	613b      	str	r3, [r7, #16]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006838:	4b3e      	ldr	r3, [pc, #248]	@ (8006934 <xPortStartScheduler+0x124>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a3f      	ldr	r2, [pc, #252]	@ (800693c <xPortStartScheduler+0x12c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d10b      	bne.n	800685a <xPortStartScheduler+0x4a>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60fb      	str	r3, [r7, #12]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800685a:	4b39      	ldr	r3, [pc, #228]	@ (8006940 <xPortStartScheduler+0x130>)
 800685c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	22ff      	movs	r2, #255	@ 0xff
 800686a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800687c:	b2da      	uxtb	r2, r3
 800687e:	4b31      	ldr	r3, [pc, #196]	@ (8006944 <xPortStartScheduler+0x134>)
 8006880:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006882:	4b31      	ldr	r3, [pc, #196]	@ (8006948 <xPortStartScheduler+0x138>)
 8006884:	2207      	movs	r2, #7
 8006886:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006888:	e009      	b.n	800689e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800688a:	4b2f      	ldr	r3, [pc, #188]	@ (8006948 <xPortStartScheduler+0x138>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3b01      	subs	r3, #1
 8006890:	4a2d      	ldr	r2, [pc, #180]	@ (8006948 <xPortStartScheduler+0x138>)
 8006892:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	b2db      	uxtb	r3, r3
 800689c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068a6:	2b80      	cmp	r3, #128	@ 0x80
 80068a8:	d0ef      	beq.n	800688a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068aa:	4b27      	ldr	r3, [pc, #156]	@ (8006948 <xPortStartScheduler+0x138>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f1c3 0307 	rsb	r3, r3, #7
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d00b      	beq.n	80068ce <xPortStartScheduler+0xbe>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60bb      	str	r3, [r7, #8]
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	e7fd      	b.n	80068ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006948 <xPortStartScheduler+0x138>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	021b      	lsls	r3, r3, #8
 80068d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006948 <xPortStartScheduler+0x138>)
 80068d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <xPortStartScheduler+0x138>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068e0:	4a19      	ldr	r2, [pc, #100]	@ (8006948 <xPortStartScheduler+0x138>)
 80068e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068ec:	4b17      	ldr	r3, [pc, #92]	@ (800694c <xPortStartScheduler+0x13c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a16      	ldr	r2, [pc, #88]	@ (800694c <xPortStartScheduler+0x13c>)
 80068f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80068f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068f8:	4b14      	ldr	r3, [pc, #80]	@ (800694c <xPortStartScheduler+0x13c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a13      	ldr	r2, [pc, #76]	@ (800694c <xPortStartScheduler+0x13c>)
 80068fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006902:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006904:	f000 f8da 	bl	8006abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006908:	4b11      	ldr	r3, [pc, #68]	@ (8006950 <xPortStartScheduler+0x140>)
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800690e:	f000 f8f9 	bl	8006b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006912:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <xPortStartScheduler+0x144>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a0f      	ldr	r2, [pc, #60]	@ (8006954 <xPortStartScheduler+0x144>)
 8006918:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800691c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800691e:	f7ff ff63 	bl	80067e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006922:	f7ff fd55 	bl	80063d0 <vTaskSwitchContext>
	prvTaskExitError();
 8006926:	f7ff ff1d 	bl	8006764 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	e000ed00 	.word	0xe000ed00
 8006938:	410fc271 	.word	0x410fc271
 800693c:	410fc270 	.word	0x410fc270
 8006940:	e000e400 	.word	0xe000e400
 8006944:	2000063c 	.word	0x2000063c
 8006948:	20000640 	.word	0x20000640
 800694c:	e000ed20 	.word	0xe000ed20
 8006950:	20000024 	.word	0x20000024
 8006954:	e000ef34 	.word	0xe000ef34

08006958 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
	__asm volatile
 800695e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	607b      	str	r3, [r7, #4]
}
 8006970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006972:	4b10      	ldr	r3, [pc, #64]	@ (80069b4 <vPortEnterCritical+0x5c>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	4a0e      	ldr	r2, [pc, #56]	@ (80069b4 <vPortEnterCritical+0x5c>)
 800697a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800697c:	4b0d      	ldr	r3, [pc, #52]	@ (80069b4 <vPortEnterCritical+0x5c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d110      	bne.n	80069a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006984:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <vPortEnterCritical+0x60>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	603b      	str	r3, [r7, #0]
}
 80069a0:	bf00      	nop
 80069a2:	bf00      	nop
 80069a4:	e7fd      	b.n	80069a2 <vPortEnterCritical+0x4a>
	}
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000024 	.word	0x20000024
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069c2:	4b12      	ldr	r3, [pc, #72]	@ (8006a0c <vPortExitCritical+0x50>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10b      	bne.n	80069e2 <vPortExitCritical+0x26>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	607b      	str	r3, [r7, #4]
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	e7fd      	b.n	80069de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069e2:	4b0a      	ldr	r3, [pc, #40]	@ (8006a0c <vPortExitCritical+0x50>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	4a08      	ldr	r2, [pc, #32]	@ (8006a0c <vPortExitCritical+0x50>)
 80069ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069ec:	4b07      	ldr	r3, [pc, #28]	@ (8006a0c <vPortExitCritical+0x50>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <vPortExitCritical+0x44>
 80069f4:	2300      	movs	r3, #0
 80069f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	20000024 	.word	0x20000024

08006a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a10:	f3ef 8009 	mrs	r0, PSP
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4b15      	ldr	r3, [pc, #84]	@ (8006a70 <pxCurrentTCBConst>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	f01e 0f10 	tst.w	lr, #16
 8006a20:	bf08      	it	eq
 8006a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2a:	6010      	str	r0, [r2, #0]
 8006a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a34:	f380 8811 	msr	BASEPRI, r0
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f7ff fcc6 	bl	80063d0 <vTaskSwitchContext>
 8006a44:	f04f 0000 	mov.w	r0, #0
 8006a48:	f380 8811 	msr	BASEPRI, r0
 8006a4c:	bc09      	pop	{r0, r3}
 8006a4e:	6819      	ldr	r1, [r3, #0]
 8006a50:	6808      	ldr	r0, [r1, #0]
 8006a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a56:	f01e 0f10 	tst.w	lr, #16
 8006a5a:	bf08      	it	eq
 8006a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a60:	f380 8809 	msr	PSP, r0
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst>:
 8006a70:	20000510 	.word	0x20000510
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a82:	f383 8811 	msr	BASEPRI, r3
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	f3bf 8f4f 	dsb	sy
 8006a8e:	607b      	str	r3, [r7, #4]
}
 8006a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a92:	f7ff fbe3 	bl	800625c <xTaskIncrementTick>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a9c:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <SysTick_Handler+0x40>)
 8006a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
}
 8006aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8006af4 <vPortSetupTimerInterrupt+0x38>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <vPortSetupTimerInterrupt+0x3c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8006afc <vPortSetupTimerInterrupt+0x40>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	099b      	lsrs	r3, r3, #6
 8006ad8:	4a09      	ldr	r2, [pc, #36]	@ (8006b00 <vPortSetupTimerInterrupt+0x44>)
 8006ada:	3b01      	subs	r3, #1
 8006adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ade:	4b04      	ldr	r3, [pc, #16]	@ (8006af0 <vPortSetupTimerInterrupt+0x34>)
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	601a      	str	r2, [r3, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000e010 	.word	0xe000e010
 8006af4:	e000e018 	.word	0xe000e018
 8006af8:	20000000 	.word	0x20000000
 8006afc:	10624dd3 	.word	0x10624dd3
 8006b00:	e000e014 	.word	0xe000e014

08006b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b14 <vPortEnableVFP+0x10>
 8006b08:	6801      	ldr	r1, [r0, #0]
 8006b0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b0e:	6001      	str	r1, [r0, #0]
 8006b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b12:	bf00      	nop
 8006b14:	e000ed88 	.word	0xe000ed88

08006b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	@ 0x28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b24:	f7ff faee 	bl	8006104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b28:	4b5c      	ldr	r3, [pc, #368]	@ (8006c9c <pvPortMalloc+0x184>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b30:	f000 f924 	bl	8006d7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b34:	4b5a      	ldr	r3, [pc, #360]	@ (8006ca0 <pvPortMalloc+0x188>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 8095 	bne.w	8006c6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01e      	beq.n	8006b86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006b48:	2208      	movs	r2, #8
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d015      	beq.n	8006b86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f023 0307 	bic.w	r3, r3, #7
 8006b60:	3308      	adds	r3, #8
 8006b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <pvPortMalloc+0x6e>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	617b      	str	r3, [r7, #20]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d06f      	beq.n	8006c6c <pvPortMalloc+0x154>
 8006b8c:	4b45      	ldr	r3, [pc, #276]	@ (8006ca4 <pvPortMalloc+0x18c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d86a      	bhi.n	8006c6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b96:	4b44      	ldr	r3, [pc, #272]	@ (8006ca8 <pvPortMalloc+0x190>)
 8006b98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b9a:	4b43      	ldr	r3, [pc, #268]	@ (8006ca8 <pvPortMalloc+0x190>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ba0:	e004      	b.n	8006bac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d903      	bls.n	8006bbe <pvPortMalloc+0xa6>
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f1      	bne.n	8006ba2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bbe:	4b37      	ldr	r3, [pc, #220]	@ (8006c9c <pvPortMalloc+0x184>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d051      	beq.n	8006c6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2208      	movs	r2, #8
 8006bce:	4413      	add	r3, r2
 8006bd0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	1ad2      	subs	r2, r2, r3
 8006be2:	2308      	movs	r3, #8
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d920      	bls.n	8006c2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4413      	add	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	f003 0307 	and.w	r3, r3, #7
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <pvPortMalloc+0xfc>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	613b      	str	r3, [r7, #16]
}
 8006c0e:	bf00      	nop
 8006c10:	bf00      	nop
 8006c12:	e7fd      	b.n	8006c10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c26:	69b8      	ldr	r0, [r7, #24]
 8006c28:	f000 f90a 	bl	8006e40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca4 <pvPortMalloc+0x18c>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca4 <pvPortMalloc+0x18c>)
 8006c38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ca4 <pvPortMalloc+0x18c>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <pvPortMalloc+0x194>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d203      	bcs.n	8006c4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c46:	4b17      	ldr	r3, [pc, #92]	@ (8006ca4 <pvPortMalloc+0x18c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a18      	ldr	r2, [pc, #96]	@ (8006cac <pvPortMalloc+0x194>)
 8006c4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	4b13      	ldr	r3, [pc, #76]	@ (8006ca0 <pvPortMalloc+0x188>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c62:	4b13      	ldr	r3, [pc, #76]	@ (8006cb0 <pvPortMalloc+0x198>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3301      	adds	r3, #1
 8006c68:	4a11      	ldr	r2, [pc, #68]	@ (8006cb0 <pvPortMalloc+0x198>)
 8006c6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c6c:	f7ff fa58 	bl	8006120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00b      	beq.n	8006c92 <pvPortMalloc+0x17a>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	60fb      	str	r3, [r7, #12]
}
 8006c8c:	bf00      	nop
 8006c8e:	bf00      	nop
 8006c90:	e7fd      	b.n	8006c8e <pvPortMalloc+0x176>
	return pvReturn;
 8006c92:	69fb      	ldr	r3, [r7, #28]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3728      	adds	r7, #40	@ 0x28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	2000dd24 	.word	0x2000dd24
 8006ca0:	2000dd38 	.word	0x2000dd38
 8006ca4:	2000dd28 	.word	0x2000dd28
 8006ca8:	2000dd1c 	.word	0x2000dd1c
 8006cac:	2000dd2c 	.word	0x2000dd2c
 8006cb0:	2000dd30 	.word	0x2000dd30

08006cb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d04f      	beq.n	8006d66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	425b      	negs	r3, r3
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4413      	add	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	4b25      	ldr	r3, [pc, #148]	@ (8006d70 <vPortFree+0xbc>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <vPortFree+0x46>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	60fb      	str	r3, [r7, #12]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00b      	beq.n	8006d1a <vPortFree+0x66>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	60bb      	str	r3, [r7, #8]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	4b14      	ldr	r3, [pc, #80]	@ (8006d70 <vPortFree+0xbc>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01e      	beq.n	8006d66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11a      	bne.n	8006d66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	4b0e      	ldr	r3, [pc, #56]	@ (8006d70 <vPortFree+0xbc>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	401a      	ands	r2, r3
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d40:	f7ff f9e0 	bl	8006104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	4b0a      	ldr	r3, [pc, #40]	@ (8006d74 <vPortFree+0xc0>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	4a09      	ldr	r2, [pc, #36]	@ (8006d74 <vPortFree+0xc0>)
 8006d50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d52:	6938      	ldr	r0, [r7, #16]
 8006d54:	f000 f874 	bl	8006e40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d58:	4b07      	ldr	r3, [pc, #28]	@ (8006d78 <vPortFree+0xc4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	4a06      	ldr	r2, [pc, #24]	@ (8006d78 <vPortFree+0xc4>)
 8006d60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d62:	f7ff f9dd 	bl	8006120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d66:	bf00      	nop
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	2000dd38 	.word	0x2000dd38
 8006d74:	2000dd28 	.word	0x2000dd28
 8006d78:	2000dd34 	.word	0x2000dd34

08006d7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d82:	f24d 63d8 	movw	r3, #55000	@ 0xd6d8
 8006d86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d88:	4b27      	ldr	r3, [pc, #156]	@ (8006e28 <prvHeapInit+0xac>)
 8006d8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00c      	beq.n	8006db0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3307      	adds	r3, #7
 8006d9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0307 	bic.w	r3, r3, #7
 8006da2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	4a1f      	ldr	r2, [pc, #124]	@ (8006e28 <prvHeapInit+0xac>)
 8006dac:	4413      	add	r3, r2
 8006dae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006db4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e2c <prvHeapInit+0xb0>)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006dba:	4b1c      	ldr	r3, [pc, #112]	@ (8006e2c <prvHeapInit+0xb0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006dc8:	2208      	movs	r2, #8
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f023 0307 	bic.w	r3, r3, #7
 8006dd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4a15      	ldr	r2, [pc, #84]	@ (8006e30 <prvHeapInit+0xb4>)
 8006ddc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006dde:	4b14      	ldr	r3, [pc, #80]	@ (8006e30 <prvHeapInit+0xb4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2200      	movs	r2, #0
 8006de4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006de6:	4b12      	ldr	r3, [pc, #72]	@ (8006e30 <prvHeapInit+0xb4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e30 <prvHeapInit+0xb4>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	4a0a      	ldr	r2, [pc, #40]	@ (8006e34 <prvHeapInit+0xb8>)
 8006e0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	4a09      	ldr	r2, [pc, #36]	@ (8006e38 <prvHeapInit+0xbc>)
 8006e12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e14:	4b09      	ldr	r3, [pc, #36]	@ (8006e3c <prvHeapInit+0xc0>)
 8006e16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006e1a:	601a      	str	r2, [r3, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	20000644 	.word	0x20000644
 8006e2c:	2000dd1c 	.word	0x2000dd1c
 8006e30:	2000dd24 	.word	0x2000dd24
 8006e34:	2000dd2c 	.word	0x2000dd2c
 8006e38:	2000dd28 	.word	0x2000dd28
 8006e3c:	2000dd38 	.word	0x2000dd38

08006e40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e48:	4b28      	ldr	r3, [pc, #160]	@ (8006eec <prvInsertBlockIntoFreeList+0xac>)
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e002      	b.n	8006e54 <prvInsertBlockIntoFreeList+0x14>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	60fb      	str	r3, [r7, #12]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d8f7      	bhi.n	8006e4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	4413      	add	r3, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d108      	bne.n	8006e82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d118      	bne.n	8006ec8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b15      	ldr	r3, [pc, #84]	@ (8006ef0 <prvInsertBlockIntoFreeList+0xb0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d00d      	beq.n	8006ebe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	441a      	add	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	e008      	b.n	8006ed0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef0 <prvInsertBlockIntoFreeList+0xb0>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	e003      	b.n	8006ed0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d002      	beq.n	8006ede <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	2000dd1c 	.word	0x2000dd1c
 8006ef0:	2000dd24 	.word	0x2000dd24

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4d0d      	ldr	r5, [pc, #52]	@ (8006f3c <__libc_init_array+0x38>)
 8006f08:	4c0d      	ldr	r4, [pc, #52]	@ (8006f40 <__libc_init_array+0x3c>)
 8006f0a:	1b64      	subs	r4, r4, r5
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	2600      	movs	r6, #0
 8006f10:	42a6      	cmp	r6, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	4d0b      	ldr	r5, [pc, #44]	@ (8006f44 <__libc_init_array+0x40>)
 8006f16:	4c0c      	ldr	r4, [pc, #48]	@ (8006f48 <__libc_init_array+0x44>)
 8006f18:	f000 f818 	bl	8006f4c <_init>
 8006f1c:	1b64      	subs	r4, r4, r5
 8006f1e:	10a4      	asrs	r4, r4, #2
 8006f20:	2600      	movs	r6, #0
 8006f22:	42a6      	cmp	r6, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2c:	4798      	blx	r3
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f36:	4798      	blx	r3
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	08006fac 	.word	0x08006fac
 8006f40:	08006fac 	.word	0x08006fac
 8006f44:	08006fac 	.word	0x08006fac
 8006f48:	08006fb0 	.word	0x08006fb0

08006f4c <_init>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	bf00      	nop
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr

08006f58 <_fini>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	bf00      	nop
 8006f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5e:	bc08      	pop	{r3}
 8006f60:	469e      	mov	lr, r3
 8006f62:	4770      	bx	lr
