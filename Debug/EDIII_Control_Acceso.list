
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014510  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018000  080146b0  080146b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c6b0  0802c6b0  0002e090  2**0
                  CONTENTS
  4 .ARM          00000008  0802c6b0  0802c6b0  0002d6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c6b8  0802c6b8  0002e090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c6b8  0802c6b8  0002d6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802c6bc  0802c6bc  0002d6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0802c6c0  0002e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016424  20000090  0802c750  0002e090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200164b4  0802c750  0002e4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002e090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029330  00000000  00000000  0002e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e8c  00000000  00000000  000573f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002510  00000000  00000000  0005e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b0c  00000000  00000000  00060790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a4f  00000000  00000000  0006229c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036b95  00000000  00000000  00083ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2ede  00000000  00000000  000ba880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0016d75e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a178  00000000  00000000  0016d814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017798c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000504b  00000000  00000000  001779ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001d0  00000000  00000000  0017ca39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08014698 	.word	0x08014698

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08014698 	.word	0x08014698

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	@ 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b96a 	b.w	8000e98 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	460c      	mov	r4, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14e      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000be8:	4694      	mov	ip, r2
 8000bea:	458c      	cmp	ip, r1
 8000bec:	4686      	mov	lr, r0
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	d962      	bls.n	8000cba <__udivmoddi4+0xde>
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0320 	rsb	r3, r2, #32
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	4319      	orrs	r1, r3
 8000c06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0e:	fa1f f68c 	uxth.w	r6, ip
 8000c12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb04 f106 	mul.w	r1, r4, r6
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c32:	f080 8112 	bcs.w	8000e5a <__udivmoddi4+0x27e>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 810f 	bls.w	8000e5a <__udivmoddi4+0x27e>
 8000c3c:	3c02      	subs	r4, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a59      	subs	r1, r3, r1
 8000c42:	fa1f f38e 	uxth.w	r3, lr
 8000c46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c52:	fb00 f606 	mul.w	r6, r0, r6
 8000c56:	429e      	cmp	r6, r3
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c62:	f080 80fc 	bcs.w	8000e5e <__udivmoddi4+0x282>
 8000c66:	429e      	cmp	r6, r3
 8000c68:	f240 80f9 	bls.w	8000e5e <__udivmoddi4+0x282>
 8000c6c:	4463      	add	r3, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	1b9b      	subs	r3, r3, r6
 8000c72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa6>
 8000c7a:	40d3      	lsrs	r3, r2
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xba>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb4>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d146      	bne.n	8000d2c <__udivmoddi4+0x150>
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xcc>
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	f0c0 80f0 	bcc.w	8000e88 <__udivmoddi4+0x2ac>
 8000ca8:	1a86      	subs	r6, r0, r2
 8000caa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d0e6      	beq.n	8000c82 <__udivmoddi4+0xa6>
 8000cb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb8:	e7e3      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	f040 8090 	bne.w	8000de0 <__udivmoddi4+0x204>
 8000cc0:	eba1 040c 	sub.w	r4, r1, ip
 8000cc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc8:	fa1f f78c 	uxth.w	r7, ip
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cde:	fb07 f006 	mul.w	r0, r7, r6
 8000ce2:	4298      	cmp	r0, r3
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x11c>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x11a>
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	f200 80cd 	bhi.w	8000e90 <__udivmoddi4+0x2b4>
 8000cf6:	4626      	mov	r6, r4
 8000cf8:	1a1c      	subs	r4, r3, r0
 8000cfa:	fa1f f38e 	uxth.w	r3, lr
 8000cfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d02:	fb08 4410 	mls	r4, r8, r0, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb00 f707 	mul.w	r7, r0, r7
 8000d0e:	429f      	cmp	r7, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x148>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x146>
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	f200 80b0 	bhi.w	8000e82 <__udivmoddi4+0x2a6>
 8000d22:	4620      	mov	r0, r4
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0x9c>
 8000d2c:	f1c1 0620 	rsb	r6, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 f706 	lsr.w	r7, r2, r6
 8000d36:	431f      	orrs	r7, r3
 8000d38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d40:	ea43 030c 	orr.w	r3, r3, ip
 8000d44:	40f4      	lsrs	r4, r6
 8000d46:	fa00 f801 	lsl.w	r8, r0, r1
 8000d4a:	0c38      	lsrs	r0, r7, #16
 8000d4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d50:	fbb4 fef0 	udiv	lr, r4, r0
 8000d54:	fa1f fc87 	uxth.w	ip, r7
 8000d58:	fb00 441e 	mls	r4, r0, lr, r4
 8000d5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d60:	fb0e f90c 	mul.w	r9, lr, ip
 8000d64:	45a1      	cmp	r9, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	d90a      	bls.n	8000d82 <__udivmoddi4+0x1a6>
 8000d6c:	193c      	adds	r4, r7, r4
 8000d6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d72:	f080 8084 	bcs.w	8000e7e <__udivmoddi4+0x2a2>
 8000d76:	45a1      	cmp	r9, r4
 8000d78:	f240 8081 	bls.w	8000e7e <__udivmoddi4+0x2a2>
 8000d7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d80:	443c      	add	r4, r7
 8000d82:	eba4 0409 	sub.w	r4, r4, r9
 8000d86:	fa1f f983 	uxth.w	r9, r3
 8000d8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x1d2>
 8000d9e:	193c      	adds	r4, r7, r4
 8000da0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da4:	d267      	bcs.n	8000e76 <__udivmoddi4+0x29a>
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d965      	bls.n	8000e76 <__udivmoddi4+0x29a>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000db2:	fba0 9302 	umull	r9, r3, r0, r2
 8000db6:	eba4 040c 	sub.w	r4, r4, ip
 8000dba:	429c      	cmp	r4, r3
 8000dbc:	46ce      	mov	lr, r9
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	d351      	bcc.n	8000e66 <__udivmoddi4+0x28a>
 8000dc2:	d04e      	beq.n	8000e62 <__udivmoddi4+0x286>
 8000dc4:	b155      	cbz	r5, 8000ddc <__udivmoddi4+0x200>
 8000dc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dca:	eb64 040c 	sbc.w	r4, r4, ip
 8000dce:	fa04 f606 	lsl.w	r6, r4, r6
 8000dd2:	40cb      	lsrs	r3, r1
 8000dd4:	431e      	orrs	r6, r3
 8000dd6:	40cc      	lsrs	r4, r1
 8000dd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	e750      	b.n	8000c82 <__udivmoddi4+0xa6>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f103 	lsr.w	r1, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa24 f303 	lsr.w	r3, r4, r3
 8000df0:	4094      	lsls	r4, r2
 8000df2:	430c      	orrs	r4, r1
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dfc:	fa1f f78c 	uxth.w	r7, ip
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3110 	mls	r1, r8, r0, r3
 8000e08:	0c23      	lsrs	r3, r4, #16
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb00 f107 	mul.w	r1, r0, r7
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x24c>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1e:	d22c      	bcs.n	8000e7a <__udivmoddi4+0x29e>
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d92a      	bls.n	8000e7a <__udivmoddi4+0x29e>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e30:	fb08 3311 	mls	r3, r8, r1, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb01 f307 	mul.w	r3, r1, r7
 8000e3c:	42a3      	cmp	r3, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x276>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e48:	d213      	bcs.n	8000e72 <__udivmoddi4+0x296>
 8000e4a:	42a3      	cmp	r3, r4
 8000e4c:	d911      	bls.n	8000e72 <__udivmoddi4+0x296>
 8000e4e:	3902      	subs	r1, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	1ae4      	subs	r4, r4, r3
 8000e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e58:	e739      	b.n	8000cce <__udivmoddi4+0xf2>
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	e6f0      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e706      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e62:	45c8      	cmp	r8, r9
 8000e64:	d2ae      	bcs.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6e:	3801      	subs	r0, #1
 8000e70:	e7a8      	b.n	8000dc4 <__udivmoddi4+0x1e8>
 8000e72:	4631      	mov	r1, r6
 8000e74:	e7ed      	b.n	8000e52 <__udivmoddi4+0x276>
 8000e76:	4603      	mov	r3, r0
 8000e78:	e799      	b.n	8000dae <__udivmoddi4+0x1d2>
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	e7d4      	b.n	8000e28 <__udivmoddi4+0x24c>
 8000e7e:	46d6      	mov	lr, sl
 8000e80:	e77f      	b.n	8000d82 <__udivmoddi4+0x1a6>
 8000e82:	4463      	add	r3, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	e74d      	b.n	8000d24 <__udivmoddi4+0x148>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	4623      	mov	r3, r4
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e70f      	b.n	8000cb0 <__udivmoddi4+0xd4>
 8000e90:	3e02      	subs	r6, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	e730      	b.n	8000cf8 <__udivmoddi4+0x11c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ea6:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <SELECT+0x14>)
 8000ea8:	f005 f84e 	bl	8005f48 <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ebe:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <DESELECT+0x14>)
 8000ec0:	f005 f842 	bl	8005f48 <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40020000 	.word	0x40020000

08000ecc <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY);
 8000ed6:	bf00      	nop
 8000ed8:	4808      	ldr	r0, [pc, #32]	@ (8000efc <SPI_TxByte+0x30>)
 8000eda:	f007 f937 	bl	800814c <HAL_SPI_GetState>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d1f9      	bne.n	8000ed8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi3, &data, 1, SPI_TIMEOUT);
 8000ee4:	1df9      	adds	r1, r7, #7
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	@ (8000efc <SPI_TxByte+0x30>)
 8000eee:	f006 fe40 	bl	8007b72 <HAL_SPI_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001cc 	.word	0x200001cc

08000f00 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000f06:	23ff      	movs	r3, #255	@ 0xff
 8000f08:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi3) != HAL_SPI_STATE_READY));
 8000f0e:	bf00      	nop
 8000f10:	4809      	ldr	r0, [pc, #36]	@ (8000f38 <SPI_RxByte+0x38>)
 8000f12:	f007 f91b 	bl	800814c <HAL_SPI_GetState>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d1f9      	bne.n	8000f10 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi3, &dummy, &data, 1, SPI_TIMEOUT);
 8000f1c:	1dba      	adds	r2, r7, #6
 8000f1e:	1df9      	adds	r1, r7, #7
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <SPI_RxByte+0x38>)
 8000f2a:	f006 ff66 	bl	8007dfa <HAL_SPI_TransmitReceive>
  
  return data;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200001cc 	.word	0x200001cc

08000f3c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f44:	f7ff ffdc 	bl	8000f00 <SPI_RxByte>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <SD_ReadyWait+0x34>)
 8000f60:	2232      	movs	r2, #50	@ 0x32
 8000f62:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000f64:	f7ff ffcc 	bl	8000f00 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000f68:	f7ff ffca 	bl	8000f00 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2bff      	cmp	r3, #255	@ 0xff
 8000f74:	d004      	beq.n	8000f80 <SD_ReadyWait+0x28>
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <SD_ReadyWait+0x34>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f3      	bne.n	8000f68 <SD_ReadyWait+0x10>
  
  return res;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000312 	.word	0x20000312

08000f90 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000f96:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000f9a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000f9c:	f7ff ff8a 	bl	8000eb4 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	e005      	b.n	8000fb2 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000fa6:	20ff      	movs	r0, #255	@ 0xff
 8000fa8:	f7ff ff90 	bl	8000ecc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2b09      	cmp	r3, #9
 8000fb6:	ddf6      	ble.n	8000fa6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000fb8:	f7ff ff70 	bl	8000e9c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000fbc:	2340      	movs	r3, #64	@ 0x40
 8000fbe:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000fd0:	2395      	movs	r3, #149	@ 0x95
 8000fd2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	e009      	b.n	8000fee <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000fda:	1d3a      	adds	r2, r7, #4
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff72 	bl	8000ecc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	ddf2      	ble.n	8000fda <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000ff4:	e002      	b.n	8000ffc <SD_PowerOn+0x6c>
  {
    Count--;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000ffc:	f7ff ff80 	bl	8000f00 <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d002      	beq.n	800100c <SD_PowerOn+0x7c>
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f4      	bne.n	8000ff6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800100c:	f7ff ff52 	bl	8000eb4 <DESELECT>
  SPI_TxByte(0XFF);
 8001010:	20ff      	movs	r0, #255	@ 0xff
 8001012:	f7ff ff5b 	bl	8000ecc <SPI_TxByte>
  
  PowerFlag = 1;
 8001016:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <SD_PowerOn+0x94>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000ad 	.word	0x200000ad

08001028 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <SD_PowerOff+0x14>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	200000ad 	.word	0x200000ad

08001040 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <SD_CheckPower+0x14>)
 8001046:	781b      	ldrb	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200000ad 	.word	0x200000ad

08001058 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <SD_RxDataBlock+0x68>)
 8001064:	220a      	movs	r2, #10
 8001066:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001068:	f7ff ff4a 	bl	8000f00 <SPI_RxByte>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2bff      	cmp	r3, #255	@ 0xff
 8001074:	d104      	bne.n	8001080 <SD_RxDataBlock+0x28>
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <SD_RxDataBlock+0x68>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f3      	bne.n	8001068 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2bfe      	cmp	r3, #254	@ 0xfe
 8001084:	d001      	beq.n	800108a <SD_RxDataBlock+0x32>
    return FALSE;
 8001086:	2300      	movs	r3, #0
 8001088:	e016      	b.n	80010b8 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff53 	bl	8000f3c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff4d 	bl	8000f3c <SPI_RxBytePtr>
  } while(btr -= 2);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3b02      	subs	r3, #2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1ed      	bne.n	800108a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80010ae:	f7ff ff27 	bl	8000f00 <SPI_RxByte>
  SPI_RxByte();
 80010b2:	f7ff ff25 	bl	8000f00 <SPI_RxByte>
  
  return TRUE;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000311 	.word	0x20000311

080010c4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010d4:	f7ff ff40 	bl	8000f58 <SD_ReadyWait>
 80010d8:	4603      	mov	r3, r0
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d001      	beq.n	80010e2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80010de:	2300      	movs	r3, #0
 80010e0:	e040      	b.n	8001164 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80010e2:	78fb      	ldrb	r3, [r7, #3]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fef1 	bl	8000ecc <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2bfd      	cmp	r3, #253	@ 0xfd
 80010ee:	d031      	beq.n	8001154 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fee5 	bl	8000ecc <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fede 	bl	8000ecc <SPI_TxByte>
    } while (--wc);
 8001110:	7bbb      	ldrb	r3, [r7, #14]
 8001112:	3b01      	subs	r3, #1
 8001114:	73bb      	strb	r3, [r7, #14]
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1eb      	bne.n	80010f4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800111c:	f7ff fef0 	bl	8000f00 <SPI_RxByte>
    SPI_RxByte();
 8001120:	f7ff feee 	bl	8000f00 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001124:	e00b      	b.n	800113e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001126:	f7ff feeb 	bl	8000f00 <SPI_RxByte>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	2b05      	cmp	r3, #5
 8001136:	d006      	beq.n	8001146 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	3301      	adds	r3, #1
 800113c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800113e:	7b7b      	ldrb	r3, [r7, #13]
 8001140:	2b40      	cmp	r3, #64	@ 0x40
 8001142:	d9f0      	bls.n	8001126 <SD_TxDataBlock+0x62>
 8001144:	e000      	b.n	8001148 <SD_TxDataBlock+0x84>
        break;
 8001146:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001148:	bf00      	nop
 800114a:	f7ff fed9 	bl	8000f00 <SPI_RxByte>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0fa      	beq.n	800114a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2b05      	cmp	r3, #5
 800115c:	d101      	bne.n	8001162 <SD_TxDataBlock+0x9e>
    return TRUE;
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001178:	f7ff feee 	bl	8000f58 <SD_ReadyWait>
 800117c:	4603      	mov	r3, r0
 800117e:	2bff      	cmp	r3, #255	@ 0xff
 8001180:	d001      	beq.n	8001186 <SD_SendCmd+0x1a>
    return 0xFF;
 8001182:	23ff      	movs	r3, #255	@ 0xff
 8001184:	e040      	b.n	8001208 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe9f 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	0e1b      	lsrs	r3, r3, #24
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe99 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	0c1b      	lsrs	r3, r3, #16
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe93 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fe8d 	bl	8000ecc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fe88 	bl	8000ecc <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	2b40      	cmp	r3, #64	@ 0x40
 80011c4:	d101      	bne.n	80011ca <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80011c6:	2395      	movs	r3, #149	@ 0x95
 80011c8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b48      	cmp	r3, #72	@ 0x48
 80011ce:	d101      	bne.n	80011d4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80011d0:	2387      	movs	r3, #135	@ 0x87
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fe78 	bl	8000ecc <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b4c      	cmp	r3, #76	@ 0x4c
 80011e0:	d101      	bne.n	80011e6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80011e2:	f7ff fe8d 	bl	8000f00 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80011e6:	230a      	movs	r3, #10
 80011e8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80011ea:	f7ff fe89 	bl	8000f00 <SPI_RxByte>
 80011ee:	4603      	mov	r3, r0
 80011f0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80011f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	da05      	bge.n	8001206 <SD_SendCmd+0x9a>
 80011fa:	7bbb      	ldrb	r3, [r7, #14]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	73bb      	strb	r3, [r7, #14]
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f1      	bne.n	80011ea <SD_SendCmd+0x7e>
  
  return res;
 8001206:	7b7b      	ldrb	r3, [r7, #13]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001220:	2301      	movs	r3, #1
 8001222:	e0d5      	b.n	80013d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001224:	4b6c      	ldr	r3, [pc, #432]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <SD_disk_initialize+0x2a>
    return Stat;        
 8001232:	4b69      	ldr	r3, [pc, #420]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	e0ca      	b.n	80013d0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800123a:	f7ff fea9 	bl	8000f90 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800123e:	f7ff fe2d 	bl	8000e9c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001246:	2100      	movs	r1, #0
 8001248:	2040      	movs	r0, #64	@ 0x40
 800124a:	f7ff ff8f 	bl	800116c <SD_SendCmd>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	f040 80a5 	bne.w	80013a0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001256:	4b61      	ldr	r3, [pc, #388]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001258:	2264      	movs	r2, #100	@ 0x64
 800125a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800125c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001260:	2048      	movs	r0, #72	@ 0x48
 8001262:	f7ff ff83 	bl	800116c <SD_SendCmd>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d158      	bne.n	800131e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	e00c      	b.n	800128c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001272:	7bfc      	ldrb	r4, [r7, #15]
 8001274:	f7ff fe44 	bl	8000f00 <SPI_RxByte>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	f104 0310 	add.w	r3, r4, #16
 8001280:	443b      	add	r3, r7
 8001282:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	3301      	adds	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d9ef      	bls.n	8001272 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001292:	7abb      	ldrb	r3, [r7, #10]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8083 	bne.w	80013a0 <SD_disk_initialize+0x190>
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	2baa      	cmp	r3, #170	@ 0xaa
 800129e:	d17f      	bne.n	80013a0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80012a0:	2100      	movs	r1, #0
 80012a2:	2077      	movs	r0, #119	@ 0x77
 80012a4:	f7ff ff62 	bl	800116c <SD_SendCmd>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d807      	bhi.n	80012be <SD_disk_initialize+0xae>
 80012ae:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012b2:	2069      	movs	r0, #105	@ 0x69
 80012b4:	f7ff ff5a 	bl	800116c <SD_SendCmd>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80012be:	4b47      	ldr	r3, [pc, #284]	@ (80013dc <SD_disk_initialize+0x1cc>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1eb      	bne.n	80012a0 <SD_disk_initialize+0x90>
 80012c8:	e000      	b.n	80012cc <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80012ca:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <SD_disk_initialize+0x1cc>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d064      	beq.n	80013a0 <SD_disk_initialize+0x190>
 80012d6:	2100      	movs	r1, #0
 80012d8:	207a      	movs	r0, #122	@ 0x7a
 80012da:	f7ff ff47 	bl	800116c <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d15d      	bne.n	80013a0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e00c      	b.n	8001304 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80012ea:	7bfc      	ldrb	r4, [r7, #15]
 80012ec:	f7ff fe08 	bl	8000f00 <SPI_RxByte>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	f104 0310 	add.w	r3, r4, #16
 80012f8:	443b      	add	r3, r7
 80012fa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9ef      	bls.n	80012ea <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800130a:	7a3b      	ldrb	r3, [r7, #8]
 800130c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SD_disk_initialize+0x108>
 8001314:	2306      	movs	r3, #6
 8001316:	e000      	b.n	800131a <SD_disk_initialize+0x10a>
 8001318:	2302      	movs	r3, #2
 800131a:	73bb      	strb	r3, [r7, #14]
 800131c:	e040      	b.n	80013a0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800131e:	2100      	movs	r1, #0
 8001320:	2077      	movs	r0, #119	@ 0x77
 8001322:	f7ff ff23 	bl	800116c <SD_SendCmd>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d808      	bhi.n	800133e <SD_disk_initialize+0x12e>
 800132c:	2100      	movs	r1, #0
 800132e:	2069      	movs	r0, #105	@ 0x69
 8001330:	f7ff ff1c 	bl	800116c <SD_SendCmd>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d801      	bhi.n	800133e <SD_disk_initialize+0x12e>
 800133a:	2302      	movs	r3, #2
 800133c:	e000      	b.n	8001340 <SD_disk_initialize+0x130>
 800133e:	2301      	movs	r3, #1
 8001340:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001342:	7bbb      	ldrb	r3, [r7, #14]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d10e      	bne.n	8001366 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001348:	2100      	movs	r1, #0
 800134a:	2077      	movs	r0, #119	@ 0x77
 800134c:	f7ff ff0e 	bl	800116c <SD_SendCmd>
 8001350:	4603      	mov	r3, r0
 8001352:	2b01      	cmp	r3, #1
 8001354:	d80e      	bhi.n	8001374 <SD_disk_initialize+0x164>
 8001356:	2100      	movs	r1, #0
 8001358:	2069      	movs	r0, #105	@ 0x69
 800135a:	f7ff ff07 	bl	800116c <SD_SendCmd>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d107      	bne.n	8001374 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001364:	e00d      	b.n	8001382 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001366:	2100      	movs	r1, #0
 8001368:	2041      	movs	r0, #65	@ 0x41
 800136a:	f7ff feff 	bl	800116c <SD_SendCmd>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001374:	4b19      	ldr	r3, [pc, #100]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e1      	bne.n	8001342 <SD_disk_initialize+0x132>
 800137e:	e000      	b.n	8001382 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001380:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001382:	4b16      	ldr	r3, [pc, #88]	@ (80013dc <SD_disk_initialize+0x1cc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <SD_disk_initialize+0x18c>
 800138c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001390:	2050      	movs	r0, #80	@ 0x50
 8001392:	f7ff feeb 	bl	800116c <SD_SendCmd>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80013a0:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <SD_disk_initialize+0x1d0>)
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80013a6:	f7ff fd85 	bl	8000eb4 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80013aa:	f7ff fda9 	bl	8000f00 <SPI_RxByte>
  
  if (type) 
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80013b4:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f023 0301 	bic.w	r3, r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e001      	b.n	80013ca <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80013c6:	f7ff fe2f 	bl	8001028 <SD_PowerOff>
  }
  
  return Stat;
 80013ca:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <SD_disk_initialize+0x1c8>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000311 	.word	0x20000311
 80013e0:	200000ac 	.word	0x200000ac

080013e4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80013f4:	2301      	movs	r3, #1
 80013f6:	e002      	b.n	80013fe <SD_disk_status+0x1a>
  
  return Stat;
 80013f8:	4b04      	ldr	r3, [pc, #16]	@ (800140c <SD_disk_status+0x28>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000000 	.word	0x20000000

08001410 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d102      	bne.n	800142c <SD_disk_read+0x1c>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <SD_disk_read+0x20>
    return RES_PARERR;
 800142c:	2304      	movs	r3, #4
 800142e:	e051      	b.n	80014d4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001430:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <SD_disk_read+0xcc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800143e:	2303      	movs	r3, #3
 8001440:	e048      	b.n	80014d4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001442:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <SD_disk_read+0xd0>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d102      	bne.n	8001454 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	025b      	lsls	r3, r3, #9
 8001452:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001454:	f7ff fd22 	bl	8000e9c <SELECT>
  
  if (count == 1) 
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d111      	bne.n	8001482 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	2051      	movs	r0, #81	@ 0x51
 8001462:	f7ff fe83 	bl	800116c <SD_SendCmd>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d129      	bne.n	80014c0 <SD_disk_read+0xb0>
 800146c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f7ff fdf1 	bl	8001058 <SD_RxDataBlock>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d021      	beq.n	80014c0 <SD_disk_read+0xb0>
      count = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	e01e      	b.n	80014c0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	2052      	movs	r0, #82	@ 0x52
 8001486:	f7ff fe71 	bl	800116c <SD_SendCmd>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d117      	bne.n	80014c0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001494:	68b8      	ldr	r0, [r7, #8]
 8001496:	f7ff fddf 	bl	8001058 <SD_RxDataBlock>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00a      	beq.n	80014b6 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80014a6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ed      	bne.n	8001490 <SD_disk_read+0x80>
 80014b4:	e000      	b.n	80014b8 <SD_disk_read+0xa8>
          break;
 80014b6:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80014b8:	2100      	movs	r1, #0
 80014ba:	204c      	movs	r0, #76	@ 0x4c
 80014bc:	f7ff fe56 	bl	800116c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80014c0:	f7ff fcf8 	bl	8000eb4 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80014c4:	f7ff fd1c 	bl	8000f00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bf14      	ite	ne
 80014ce:	2301      	movne	r3, #1
 80014d0:	2300      	moveq	r3, #0
 80014d2:	b2db      	uxtb	r3, r3
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000
 80014e0:	200000ac 	.word	0x200000ac

080014e4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <SD_disk_write+0x1c>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <SD_disk_write+0x20>
    return RES_PARERR;
 8001500:	2304      	movs	r3, #4
 8001502:	e06b      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001504:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <SD_disk_write+0x100>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001512:	2303      	movs	r3, #3
 8001514:	e062      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001516:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <SD_disk_write+0x100>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001524:	2302      	movs	r3, #2
 8001526:	e059      	b.n	80015dc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001528:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <SD_disk_write+0x104>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800153a:	f7ff fcaf 	bl	8000e9c <SELECT>
  
  if (count == 1) 
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d110      	bne.n	8001566 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	2058      	movs	r0, #88	@ 0x58
 8001548:	f7ff fe10 	bl	800116c <SD_SendCmd>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d13a      	bne.n	80015c8 <SD_disk_write+0xe4>
 8001552:	21fe      	movs	r1, #254	@ 0xfe
 8001554:	68b8      	ldr	r0, [r7, #8]
 8001556:	f7ff fdb5 	bl	80010c4 <SD_TxDataBlock>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d033      	beq.n	80015c8 <SD_disk_write+0xe4>
      count = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	e030      	b.n	80015c8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <SD_disk_write+0x104>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001572:	2100      	movs	r1, #0
 8001574:	2077      	movs	r0, #119	@ 0x77
 8001576:	f7ff fdf9 	bl	800116c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	2057      	movs	r0, #87	@ 0x57
 800157e:	f7ff fdf5 	bl	800116c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	2059      	movs	r0, #89	@ 0x59
 8001586:	f7ff fdf1 	bl	800116c <SD_SendCmd>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11b      	bne.n	80015c8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001590:	21fc      	movs	r1, #252	@ 0xfc
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7ff fd96 	bl	80010c4 <SD_TxDataBlock>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015a4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1ee      	bne.n	8001590 <SD_disk_write+0xac>
 80015b2:	e000      	b.n	80015b6 <SD_disk_write+0xd2>
          break;
 80015b4:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80015b6:	21fd      	movs	r1, #253	@ 0xfd
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fd83 	bl	80010c4 <SD_TxDataBlock>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80015c8:	f7ff fc74 	bl	8000eb4 <DESELECT>
  SPI_RxByte();
 80015cc:	f7ff fc98 	bl	8000f00 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	200000ac 	.word	0x200000ac

080015ec <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b08b      	sub	sp, #44	@ 0x2c
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	603a      	str	r2, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	460b      	mov	r3, r1
 80015fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001606:	2304      	movs	r3, #4
 8001608:	e119      	b.n	800183e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	2b05      	cmp	r3, #5
 8001614:	d129      	bne.n	800166a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d017      	beq.n	800164e <SD_disk_ioctl+0x62>
 800161e:	2b02      	cmp	r3, #2
 8001620:	dc1f      	bgt.n	8001662 <SD_disk_ioctl+0x76>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <SD_disk_ioctl+0x40>
 8001626:	2b01      	cmp	r3, #1
 8001628:	d00b      	beq.n	8001642 <SD_disk_ioctl+0x56>
 800162a:	e01a      	b.n	8001662 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800162c:	f7ff fd08 	bl	8001040 <SD_CheckPower>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001636:	f7ff fcf7 	bl	8001028 <SD_PowerOff>
      res = RES_OK;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001640:	e0fb      	b.n	800183a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001642:	f7ff fca5 	bl	8000f90 <SD_PowerOn>
      res = RES_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800164c:	e0f5      	b.n	800183a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	1c5c      	adds	r4, r3, #1
 8001652:	f7ff fcf5 	bl	8001040 <SD_CheckPower>
 8001656:	4603      	mov	r3, r0
 8001658:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001660:	e0eb      	b.n	800183a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001662:	2304      	movs	r3, #4
 8001664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001668:	e0e7      	b.n	800183a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800166a:	4b77      	ldr	r3, [pc, #476]	@ (8001848 <SD_disk_ioctl+0x25c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001678:	2303      	movs	r3, #3
 800167a:	e0e0      	b.n	800183e <SD_disk_ioctl+0x252>
    
    SELECT();
 800167c:	f7ff fc0e 	bl	8000e9c <SELECT>
    
    switch (ctrl) 
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b0d      	cmp	r3, #13
 8001684:	f200 80ca 	bhi.w	800181c <SD_disk_ioctl+0x230>
 8001688:	a201      	add	r2, pc, #4	@ (adr r2, 8001690 <SD_disk_ioctl+0xa4>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	08001787 	.word	0x08001787
 8001694:	080016c9 	.word	0x080016c9
 8001698:	08001777 	.word	0x08001777
 800169c:	0800181d 	.word	0x0800181d
 80016a0:	0800181d 	.word	0x0800181d
 80016a4:	0800181d 	.word	0x0800181d
 80016a8:	0800181d 	.word	0x0800181d
 80016ac:	0800181d 	.word	0x0800181d
 80016b0:	0800181d 	.word	0x0800181d
 80016b4:	0800181d 	.word	0x0800181d
 80016b8:	0800181d 	.word	0x0800181d
 80016bc:	08001799 	.word	0x08001799
 80016c0:	080017bd 	.word	0x080017bd
 80016c4:	080017e1 	.word	0x080017e1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80016c8:	2100      	movs	r1, #0
 80016ca:	2049      	movs	r0, #73	@ 0x49
 80016cc:	f7ff fd4e 	bl	800116c <SD_SendCmd>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80a6 	bne.w	8001824 <SD_disk_ioctl+0x238>
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2110      	movs	r1, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fcba 	bl	8001058 <SD_RxDataBlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 809c 	beq.w	8001824 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80016ec:	7b3b      	ldrb	r3, [r7, #12]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10d      	bne.n	8001712 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016f6:	7d7b      	ldrb	r3, [r7, #21]
 80016f8:	461a      	mov	r2, r3
 80016fa:	7d3b      	ldrb	r3, [r7, #20]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001708:	8bfb      	ldrh	r3, [r7, #30]
 800170a:	029a      	lsls	r2, r3, #10
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e02d      	b.n	800176e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001712:	7c7b      	ldrb	r3, [r7, #17]
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	b2da      	uxtb	r2, r3
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	09db      	lsrs	r3, r3, #7
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4413      	add	r3, r2
 8001722:	b2da      	uxtb	r2, r3
 8001724:	7d7b      	ldrb	r3, [r7, #21]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0306 	and.w	r3, r3, #6
 800172e:	b2db      	uxtb	r3, r3
 8001730:	4413      	add	r3, r2
 8001732:	b2db      	uxtb	r3, r3
 8001734:	3302      	adds	r3, #2
 8001736:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800173a:	7d3b      	ldrb	r3, [r7, #20]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	7cfb      	ldrb	r3, [r7, #19]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	b29b      	uxth	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b29a      	uxth	r2, r3
 800174c:	7cbb      	ldrb	r3, [r7, #18]
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	b29b      	uxth	r3, r3
 8001752:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001756:	b29b      	uxth	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	b29b      	uxth	r3, r3
 800175c:	3301      	adds	r3, #1
 800175e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001760:	8bfa      	ldrh	r2, [r7, #30]
 8001762:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001766:	3b09      	subs	r3, #9
 8001768:	409a      	lsls	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001774:	e056      	b.n	8001824 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800177c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001784:	e055      	b.n	8001832 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001786:	f7ff fbe7 	bl	8000f58 <SD_ReadyWait>
 800178a:	4603      	mov	r3, r0
 800178c:	2bff      	cmp	r3, #255	@ 0xff
 800178e:	d14b      	bne.n	8001828 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001796:	e047      	b.n	8001828 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001798:	2100      	movs	r1, #0
 800179a:	2049      	movs	r0, #73	@ 0x49
 800179c:	f7ff fce6 	bl	800116c <SD_SendCmd>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d142      	bne.n	800182c <SD_disk_ioctl+0x240>
 80017a6:	2110      	movs	r1, #16
 80017a8:	6a38      	ldr	r0, [r7, #32]
 80017aa:	f7ff fc55 	bl	8001058 <SD_RxDataBlock>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d03b      	beq.n	800182c <SD_disk_ioctl+0x240>
        res = RES_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017ba:	e037      	b.n	800182c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80017bc:	2100      	movs	r1, #0
 80017be:	204a      	movs	r0, #74	@ 0x4a
 80017c0:	f7ff fcd4 	bl	800116c <SD_SendCmd>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d132      	bne.n	8001830 <SD_disk_ioctl+0x244>
 80017ca:	2110      	movs	r1, #16
 80017cc:	6a38      	ldr	r0, [r7, #32]
 80017ce:	f7ff fc43 	bl	8001058 <SD_RxDataBlock>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02b      	beq.n	8001830 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017de:	e027      	b.n	8001830 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80017e0:	2100      	movs	r1, #0
 80017e2:	207a      	movs	r0, #122	@ 0x7a
 80017e4:	f7ff fcc2 	bl	800116c <SD_SendCmd>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017f4:	e00b      	b.n	800180e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80017f6:	6a3c      	ldr	r4, [r7, #32]
 80017f8:	1c63      	adds	r3, r4, #1
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	f7ff fb80 	bl	8000f00 <SPI_RxByte>
 8001800:	4603      	mov	r3, r0
 8001802:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001804:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001808:	3301      	adds	r3, #1
 800180a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800180e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001812:	2b03      	cmp	r3, #3
 8001814:	d9ef      	bls.n	80017f6 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 800181c:	2304      	movs	r3, #4
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001822:	e006      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001824:	bf00      	nop
 8001826:	e004      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001828:	bf00      	nop
 800182a:	e002      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 800182c:	bf00      	nop
 800182e:	e000      	b.n	8001832 <SD_disk_ioctl+0x246>
      break;
 8001830:	bf00      	nop
    }
    
    DESELECT();
 8001832:	f7ff fb3f 	bl	8000eb4 <DESELECT>
    SPI_RxByte();
 8001836:	f7ff fb63 	bl	8000f00 <SPI_RxByte>
  }
  
  return res;
 800183a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800183e:	4618      	mov	r0, r3
 8001840:	372c      	adds	r7, #44	@ 0x2c
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000

0800184c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001852:	f002 ff73 	bl	800473c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001856:	f000 f877 	bl	8001948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185a:	f000 fa89 	bl	8001d70 <MX_GPIO_Init>
  MX_DMA_Init();
 800185e:	f000 fa67 	bl	8001d30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001862:	f000 fa3b 	bl	8001cdc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001866:	f000 f92d 	bl	8001ac4 <MX_I2C1_Init>
  MX_SPI3_Init();
 800186a:	f000 f9b3 	bl	8001bd4 <MX_SPI3_Init>
  MX_RTC_Init();
 800186e:	f000 f957 	bl	8001b20 <MX_RTC_Init>
  MX_ADC1_Init();
 8001872:	f000 f8d5 	bl	8001a20 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001876:	f000 f9e3 	bl	8001c40 <MX_TIM3_Init>
  MX_FATFS_Init();
 800187a:	f007 fdc5 	bl	8009408 <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  keypad_sd_sync = xSemaphoreCreateBinary();
 800187e:	2203      	movs	r2, #3
 8001880:	2100      	movs	r1, #0
 8001882:	2001      	movs	r0, #1
 8001884:	f00d fdf6 	bl	800f474 <xQueueGenericCreate>
 8001888:	4603      	mov	r3, r0
 800188a:	4a23      	ldr	r2, [pc, #140]	@ (8001918 <main+0xcc>)
 800188c:	6013      	str	r3, [r2, #0]
  sd_display_sync = xSemaphoreCreateBinary();
 800188e:	2203      	movs	r2, #3
 8001890:	2100      	movs	r1, #0
 8001892:	2001      	movs	r0, #1
 8001894:	f00d fdee 	bl	800f474 <xQueueGenericCreate>
 8001898:	4603      	mov	r3, r0
 800189a:	4a20      	ldr	r2, [pc, #128]	@ (800191c <main+0xd0>)
 800189c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_message_t));
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	2001      	movs	r0, #1
 80018a4:	f00d fde6 	bl	800f474 <xQueueGenericCreate>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001920 <main+0xd4>)
 80018ac:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(1, sizeof(char));
 80018ae:	2200      	movs	r2, #0
 80018b0:	2101      	movs	r1, #1
 80018b2:	2001      	movs	r0, #1
 80018b4:	f00d fdde 	bl	800f474 <xQueueGenericCreate>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001924 <main+0xd8>)
 80018bc:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_task, "Tarea display", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 80018be:	2300      	movs	r3, #0
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2304      	movs	r3, #4
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	4917      	ldr	r1, [pc, #92]	@ (8001928 <main+0xdc>)
 80018cc:	4817      	ldr	r0, [pc, #92]	@ (800192c <main+0xe0>)
 80018ce:	f00e fb9f 	bl	8010010 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sd_task, "Tarea SD", 12 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 80018d2:	2300      	movs	r3, #0
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2302      	movs	r3, #2
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80018e0:	4913      	ldr	r1, [pc, #76]	@ (8001930 <main+0xe4>)
 80018e2:	4814      	ldr	r0, [pc, #80]	@ (8001934 <main+0xe8>)
 80018e4:	f00e fb94 	bl	8010010 <xTaskCreate>
  xTaskCreate(keypad_task, "Tarea keypad", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2301      	movs	r3, #1
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	2280      	movs	r2, #128	@ 0x80
 80018f4:	4910      	ldr	r1, [pc, #64]	@ (8001938 <main+0xec>)
 80018f6:	4811      	ldr	r0, [pc, #68]	@ (800193c <main+0xf0>)
 80018f8:	f00e fb8a 	bl	8010010 <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 80018fc:	2300      	movs	r3, #0
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2300      	movs	r3, #0
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	490d      	ldr	r1, [pc, #52]	@ (8001940 <main+0xf4>)
 800190a:	480e      	ldr	r0, [pc, #56]	@ (8001944 <main+0xf8>)
 800190c:	f00e fb80 	bl	8010010 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001910:	f00e fce8 	bl	80102e4 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <main+0xc8>
 8001918:	200002bc 	.word	0x200002bc
 800191c:	200002c0 	.word	0x200002c0
 8001920:	200002b8 	.word	0x200002b8
 8001924:	200002b4 	.word	0x200002b4
 8001928:	080146b0 	.word	0x080146b0
 800192c:	08004225 	.word	0x08004225
 8001930:	080146c0 	.word	0x080146c0
 8001934:	08004479 	.word	0x08004479
 8001938:	080146cc 	.word	0x080146cc
 800193c:	080043d9 	.word	0x080043d9
 8001940:	080146dc 	.word	0x080146dc
 8001944:	08001ebd 	.word	0x08001ebd

08001948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	@ 0x50
 800194c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	2230      	movs	r2, #48	@ 0x30
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f011 fdc7 	bl	80134ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <SystemClock_Config+0xd0>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	4a28      	ldr	r2, [pc, #160]	@ (8001a18 <SystemClock_Config+0xd0>)
 8001976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197a:	6413      	str	r3, [r2, #64]	@ 0x40
 800197c:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <SystemClock_Config+0xd0>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	4b23      	ldr	r3, [pc, #140]	@ (8001a1c <SystemClock_Config+0xd4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001994:	4a21      	ldr	r2, [pc, #132]	@ (8001a1c <SystemClock_Config+0xd4>)
 8001996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a1c <SystemClock_Config+0xd4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019a8:	2309      	movs	r3, #9
 80019aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019b2:	2301      	movs	r3, #1
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b6:	2302      	movs	r3, #2
 80019b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019c0:	2304      	movs	r3, #4
 80019c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80019c4:	2340      	movs	r3, #64	@ 0x40
 80019c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019cc:	2307      	movs	r3, #7
 80019ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d0:	f107 0320 	add.w	r3, r7, #32
 80019d4:	4618      	mov	r0, r3
 80019d6:	f004 ff7f 	bl	80068d8 <HAL_RCC_OscConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019e0:	f000 fa99 	bl	8001f16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e4:	230f      	movs	r3, #15
 80019e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019e8:	2302      	movs	r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	2102      	movs	r1, #2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f005 f9e1 	bl	8006dc8 <HAL_RCC_ClockConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a0c:	f000 fa83 	bl	8001f16 <Error_Handler>
  }
}
 8001a10:	bf00      	nop
 8001a12:	3750      	adds	r7, #80	@ 0x50
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000

08001a20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a26:	463b      	mov	r3, r7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a34:	4a22      	ldr	r2, [pc, #136]	@ (8001ac0 <MX_ADC1_Init+0xa0>)
 8001a36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a38:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a58:	4b18      	ldr	r3, [pc, #96]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a82:	480e      	ldr	r0, [pc, #56]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001a84:	f002 fe9c 	bl	80047c0 <HAL_ADC_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001a8e:	f000 fa42 	bl	8001f16 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4806      	ldr	r0, [pc, #24]	@ (8001abc <MX_ADC1_Init+0x9c>)
 8001aa4:	f003 f948 	bl	8004d38 <HAL_ADC_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001aae:	f000 fa32 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200000b0 	.word	0x200000b0
 8001ac0:	40012000 	.word	0x40012000

08001ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001aca:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <MX_I2C1_Init+0x54>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ad0:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <MX_I2C1_Init+0x58>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <MX_I2C1_Init+0x50>)
 8001b02:	f004 fa3b 	bl	8005f7c <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b0c:	f000 fa03 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000158 	.word	0x20000158
 8001b18:	40005400 	.word	0x40005400
 8001b1c:	00061a80 	.word	0x00061a80

08001b20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b3a:	4a25      	ldr	r2, [pc, #148]	@ (8001bd0 <MX_RTC_Init+0xb0>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b3e:	4b23      	ldr	r3, [pc, #140]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b44:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b46:	227f      	movs	r2, #127	@ 0x7f
 8001b48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b4c:	22ff      	movs	r2, #255	@ 0xff
 8001b4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b62:	481a      	ldr	r0, [pc, #104]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b64:	f005 fc70 	bl	8007448 <HAL_RTC_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001b6e:	f000 f9d2 	bl	8001f16 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 8001b72:	230f      	movs	r3, #15
 8001b74:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480f      	ldr	r0, [pc, #60]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001b8e:	f005 fcde 	bl	800754e <HAL_RTC_SetTime>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001b98:	f000 f9bd 	bl	8001f16 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001ba0:	2307      	movs	r3, #7
 8001ba2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001ba8:	2318      	movs	r3, #24
 8001baa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <MX_RTC_Init+0xac>)
 8001bb4:	f005 fdc3 	bl	800773e <HAL_RTC_SetDate>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001bbe:	f000 f9aa 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200001ac 	.word	0x200001ac
 8001bd0:	40002800 	.word	0x40002800

08001bd4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001bda:	4a18      	ldr	r2, [pc, #96]	@ (8001c3c <MX_SPI3_Init+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001be0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001be4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c08:	2210      	movs	r2, #16
 8001c0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c20:	220a      	movs	r2, #10
 8001c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MX_SPI3_Init+0x64>)
 8001c26:	f005 ff1b 	bl	8007a60 <HAL_SPI_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c30:	f000 f971 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200001cc 	.word	0x200001cc
 8001c3c:	40003c00 	.word	0x40003c00

08001c40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <MX_TIM3_Init+0x98>)
 8001c60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5334 - 1;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c70:	f241 42d5 	movw	r2, #5333	@ 0x14d5
 8001c74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c82:	4814      	ldr	r0, [pc, #80]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001c84:	f006 fb4c 	bl	8008320 <HAL_TIM_Base_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c8e:	f000 f942 	bl	8001f16 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c98:	f107 0308 	add.w	r3, r7, #8
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001ca0:	f006 fd0f 	bl	80086c2 <HAL_TIM_ConfigClockSource>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f000 f934 	bl	8001f16 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	@ (8001cd4 <MX_TIM3_Init+0x94>)
 8001cbc:	f006 ff16 	bl	8008aec <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cc6:	f000 f926 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000224 	.word	0x20000224
 8001cd8:	40000400 	.word	0x40000400

08001cdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <MX_USART2_UART_Init+0x50>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_USART2_UART_Init+0x4c>)
 8001d14:	f006 ff6c 	bl	8008bf0 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d1e:	f000 f8fa 	bl	8001f16 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000026c 	.word	0x2000026c
 8001d2c:	40004400 	.word	0x40004400

08001d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <MX_DMA_Init+0x3c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2105      	movs	r1, #5
 8001d56:	2038      	movs	r0, #56	@ 0x38
 8001d58:	f003 fb50 	bl	80053fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d5c:	2038      	movs	r0, #56	@ 0x38
 8001d5e:	f003 fb69 	bl	8005434 <HAL_NVIC_EnableIRQ>

}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	@ 0x28
 8001d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a47      	ldr	r2, [pc, #284]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b45      	ldr	r3, [pc, #276]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b41      	ldr	r3, [pc, #260]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a40      	ldr	r2, [pc, #256]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a39      	ldr	r2, [pc, #228]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b37      	ldr	r3, [pc, #220]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b33      	ldr	r3, [pc, #204]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a32      	ldr	r2, [pc, #200]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b30      	ldr	r3, [pc, #192]	@ (8001eac <MX_GPIO_Init+0x13c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CS_SD_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f248 0120 	movw	r1, #32800	@ 0x8020
 8001dfc:	482c      	ldr	r0, [pc, #176]	@ (8001eb0 <MX_GPIO_Init+0x140>)
 8001dfe:	f004 f8a3 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8001e08:	482a      	ldr	r0, [pc, #168]	@ (8001eb4 <MX_GPIO_Init+0x144>)
 8001e0a:	f004 f89d 	bl	8005f48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SDB4_GPIO_Port, CS_SDB4_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2110      	movs	r1, #16
 8001e12:	4829      	ldr	r0, [pc, #164]	@ (8001eb8 <MX_GPIO_Init+0x148>)
 8001e14:	f004 f898 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e1e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4821      	ldr	r0, [pc, #132]	@ (8001eb4 <MX_GPIO_Init+0x144>)
 8001e30:	f003 feee 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001e34:	230f      	movs	r3, #15
 8001e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	481b      	ldr	r0, [pc, #108]	@ (8001eb4 <MX_GPIO_Init+0x144>)
 8001e48:	f003 fee2 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CS_SD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CS_SD_Pin;
 8001e4c:	f248 0320 	movw	r3, #32800	@ 0x8020
 8001e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4812      	ldr	r0, [pc, #72]	@ (8001eb0 <MX_GPIO_Init+0x140>)
 8001e66:	f003 fed3 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001e6a:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001e6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	4619      	mov	r1, r3
 8001e82:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <MX_GPIO_Init+0x144>)
 8001e84:	f003 fec4 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SDB4_Pin */
  GPIO_InitStruct.Pin = CS_SDB4_Pin;
 8001e88:	2310      	movs	r3, #16
 8001e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SDB4_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	@ (8001eb8 <MX_GPIO_Init+0x148>)
 8001ea0:	f003 feb6 	bl	8005c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	@ 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020400 	.word	0x40020400

08001ebc <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	while(1);
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <idle_task+0x8>

08001ec8 <HAL_ADC_ConvCpltCallback>:
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim3);
 8001ed0:	4806      	ldr	r0, [pc, #24]	@ (8001eec <HAL_ADC_ConvCpltCallback+0x24>)
 8001ed2:	f006 fad7 	bl	8008484 <HAL_TIM_Base_Stop_IT>
	HAL_ADC_Stop_DMA(&hadc1);
 8001ed6:	4806      	ldr	r0, [pc, #24]	@ (8001ef0 <HAL_ADC_ConvCpltCallback+0x28>)
 8001ed8:	f002 feb6 	bl	8004c48 <HAL_ADC_Stop_DMA>
	conv_cplt_flag = true;
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	701a      	strb	r2, [r3, #0]
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000224 	.word	0x20000224
 8001ef0:	200000b0 	.word	0x200000b0
 8001ef4:	200002c4 	.word	0x200002c4

08001ef8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f0a:	f002 fc39 	bl	8004780 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f1a:	b672      	cpsid	i
}
 8001f1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f1e:	bf00      	nop
 8001f20:	e7fd      	b.n	8001f1e <Error_Handler+0x8>
	...

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a11      	ldr	r2, [pc, #68]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	210f      	movs	r1, #15
 8001f66:	f06f 0001 	mvn.w	r0, #1
 8001f6a:	f003 fa47 	bl	80053fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a32      	ldr	r2, [pc, #200]	@ (8002064 <HAL_ADC_MspInit+0xe8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d15e      	bne.n	800205c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	4a30      	ldr	r2, [pc, #192]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fae:	4b2e      	ldr	r3, [pc, #184]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a29      	ldr	r2, [pc, #164]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <HAL_ADC_MspInit+0xec>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4820      	ldr	r0, [pc, #128]	@ (800206c <HAL_ADC_MspInit+0xf0>)
 8001fea:	f003 fe11 	bl	8005c10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001fee:	4b20      	ldr	r3, [pc, #128]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8001ff0:	4a20      	ldr	r2, [pc, #128]	@ (8002074 <HAL_ADC_MspInit+0xf8>)
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800200c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200e:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002010:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002016:	4b16      	ldr	r3, [pc, #88]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800201c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800201e:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002020:	2200      	movs	r2, #0
 8002022:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002024:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002026:	2200      	movs	r2, #0
 8002028:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800202a:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002030:	480f      	ldr	r0, [pc, #60]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002032:	f003 fa0d 	bl	8005450 <HAL_DMA_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800203c:	f7ff ff6b 	bl	8001f16 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002044:	639a      	str	r2, [r3, #56]	@ 0x38
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_ADC_MspInit+0xf4>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2105      	movs	r1, #5
 8002050:	2012      	movs	r0, #18
 8002052:	f003 f9d3 	bl	80053fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002056:	2012      	movs	r0, #18
 8002058:	f003 f9ec 	bl	8005434 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	@ 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40012000 	.word	0x40012000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	200000f8 	.word	0x200000f8
 8002074:	40026410 	.word	0x40026410

08002078 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_I2C_MspInit+0x84>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12b      	bne.n	80020f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b18      	ldr	r3, [pc, #96]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a17      	ldr	r2, [pc, #92]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020b6:	23c0      	movs	r3, #192	@ 0xc0
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ba:	2312      	movs	r3, #18
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c2:	2303      	movs	r3, #3
 80020c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020c6:	2304      	movs	r3, #4
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <HAL_I2C_MspInit+0x8c>)
 80020d2:	f003 fd9d 	bl	8005c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4a08      	ldr	r2, [pc, #32]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e6:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_I2C_MspInit+0x88>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	@ 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40005400 	.word	0x40005400
 8002100:	40023800 	.word	0x40023800
 8002104:	40020400 	.word	0x40020400

08002108 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002110:	f107 030c 	add.w	r3, r7, #12
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <HAL_RTC_MspInit+0x50>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d111      	bne.n	800214e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800212a:	2302      	movs	r3, #2
 800212c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800212e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002132:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	4618      	mov	r0, r3
 800213a:	f005 f897 	bl	800726c <HAL_RCCEx_PeriphCLKConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002144:	f7ff fee7 	bl	8001f16 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <HAL_RTC_MspInit+0x54>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800214e:	bf00      	nop
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40002800 	.word	0x40002800
 800215c:	42470e3c 	.word	0x42470e3c

08002160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a22      	ldr	r2, [pc, #136]	@ (8002208 <HAL_SPI_MspInit+0xa8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d13d      	bne.n	80021fe <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_SPI_MspInit+0xac>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	4a20      	ldr	r2, [pc, #128]	@ (800220c <HAL_SPI_MspInit+0xac>)
 800218c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002190:	6413      	str	r3, [r2, #64]	@ 0x40
 8002192:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <HAL_SPI_MspInit+0xac>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_SPI_MspInit+0xac>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a19      	ldr	r2, [pc, #100]	@ (800220c <HAL_SPI_MspInit+0xac>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b17      	ldr	r3, [pc, #92]	@ (800220c <HAL_SPI_MspInit+0xac>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021cc:	2306      	movs	r3, #6
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	480e      	ldr	r0, [pc, #56]	@ (8002210 <HAL_SPI_MspInit+0xb0>)
 80021d8:	f003 fd1a 	bl	8005c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80021dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021ee:	2306      	movs	r3, #6
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <HAL_SPI_MspInit+0xb0>)
 80021fa:	f003 fd09 	bl	8005c10 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	@ 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40003c00 	.word	0x40003c00
 800220c:	40023800 	.word	0x40023800
 8002210:	40020800 	.word	0x40020800

08002214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0e      	ldr	r2, [pc, #56]	@ (800225c <HAL_TIM_Base_MspInit+0x48>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d115      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <HAL_TIM_Base_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	4a0c      	ldr	r2, [pc, #48]	@ (8002260 <HAL_TIM_Base_MspInit+0x4c>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_TIM_Base_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2105      	movs	r1, #5
 8002246:	201d      	movs	r0, #29
 8002248:	f003 f8d8 	bl	80053fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800224c:	201d      	movs	r0, #29
 800224e:	f003 f8f1 	bl	8005434 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40000400 	.word	0x40000400
 8002260:	40023800 	.word	0x40023800

08002264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	@ (80022e8 <HAL_UART_MspInit+0x84>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d12b      	bne.n	80022de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <HAL_UART_MspInit+0x88>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_UART_MspInit+0x88>)
 8002290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002294:	6413      	str	r3, [r2, #64]	@ 0x40
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_UART_MspInit+0x88>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <HAL_UART_MspInit+0x88>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a10      	ldr	r2, [pc, #64]	@ (80022ec <HAL_UART_MspInit+0x88>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_UART_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022be:	230c      	movs	r3, #12
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022ce:	2307      	movs	r3, #7
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <HAL_UART_MspInit+0x8c>)
 80022da:	f003 fc99 	bl	8005c10 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	@ 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40004400 	.word	0x40004400
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000

080022f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08e      	sub	sp, #56	@ 0x38
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_InitTick+0xe8>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	4a33      	ldr	r2, [pc, #204]	@ (80023dc <HAL_InitTick+0xe8>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6413      	str	r3, [r2, #64]	@ 0x40
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_InitTick+0xe8>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002320:	f107 0210 	add.w	r2, r7, #16
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f004 ff6c 	bl	8007208 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002336:	2b00      	cmp	r3, #0
 8002338:	d103      	bne.n	8002342 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800233a:	f004 ff3d 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 800233e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002340:	e004      	b.n	800234c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002342:	f004 ff39 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 8002346:	4603      	mov	r3, r0
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800234c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234e:	4a24      	ldr	r2, [pc, #144]	@ (80023e0 <HAL_InitTick+0xec>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	0c9b      	lsrs	r3, r3, #18
 8002356:	3b01      	subs	r3, #1
 8002358:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800235a:	4b22      	ldr	r3, [pc, #136]	@ (80023e4 <HAL_InitTick+0xf0>)
 800235c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002360:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002362:	4b20      	ldr	r3, [pc, #128]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002364:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002368:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800236a:	4a1e      	ldr	r2, [pc, #120]	@ (80023e4 <HAL_InitTick+0xf0>)
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002370:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_InitTick+0xf0>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002382:	4818      	ldr	r0, [pc, #96]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002384:	f005 ffcc 	bl	8008320 <HAL_TIM_Base_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800238e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11b      	bne.n	80023ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002396:	4813      	ldr	r0, [pc, #76]	@ (80023e4 <HAL_InitTick+0xf0>)
 8002398:	f006 f812 	bl	80083c0 <HAL_TIM_Base_Start_IT>
 800239c:	4603      	mov	r3, r0
 800239e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d111      	bne.n	80023ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023aa:	201c      	movs	r0, #28
 80023ac:	f003 f842 	bl	8005434 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	d808      	bhi.n	80023c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80023b6:	2200      	movs	r2, #0
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	201c      	movs	r0, #28
 80023bc:	f003 f81e 	bl	80053fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023c0:	4a09      	ldr	r2, [pc, #36]	@ (80023e8 <HAL_InitTick+0xf4>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e002      	b.n	80023ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80023ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3738      	adds	r7, #56	@ 0x38
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	431bde83 	.word	0x431bde83
 80023e4:	200002c8 	.word	0x200002c8
 80023e8:	20000014 	.word	0x20000014

080023ec <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <SDTimer_Handler+0x40>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <SDTimer_Handler+0x1c>
    Timer1--;
 80023fa:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <SDTimer_Handler+0x40>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <SDTimer_Handler+0x40>)
 8002406:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <SDTimer_Handler+0x44>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <SDTimer_Handler+0x34>
    Timer2--;
 8002412:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <SDTimer_Handler+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <SDTimer_Handler+0x44>)
 800241e:	701a      	strb	r2, [r3, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000311 	.word	0x20000311
 8002430:	20000312 	.word	0x20000312

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <NMI_Handler+0x4>

0800243c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <MemManage_Handler+0x4>

0800244c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <UsageFault_Handler+0x4>

0800245c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <ADC_IRQHandler+0x10>)
 8002472:	f002 f9e8 	bl	8004846 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200000b0 	.word	0x200000b0

08002480 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <TIM2_IRQHandler+0x30>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	3301      	adds	r3, #1
 800248c:	b2da      	uxtb	r2, r3
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <TIM2_IRQHandler+0x30>)
 8002490:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <TIM2_IRQHandler+0x30>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b09      	cmp	r3, #9
 800249a:	d904      	bls.n	80024a6 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <TIM2_IRQHandler+0x30>)
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 80024a2:	f7ff ffa3 	bl	80023ec <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024a6:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <TIM2_IRQHandler+0x34>)
 80024a8:	f006 f81b 	bl	80084e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000310 	.word	0x20000310
 80024b4:	200002c8 	.word	0x200002c8

080024b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024bc:	4802      	ldr	r0, [pc, #8]	@ (80024c8 <TIM3_IRQHandler+0x10>)
 80024be:	f006 f810 	bl	80084e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000224 	.word	0x20000224

080024cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024d0:	4802      	ldr	r0, [pc, #8]	@ (80024dc <DMA2_Stream0_IRQHandler+0x10>)
 80024d2:	f003 f933 	bl	800573c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	200000f8 	.word	0x200000f8

080024e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return 1;
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_kill>:

int _kill(int pid, int sig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024fa:	f011 f8c3 	bl	8013684 <__errno>
 80024fe:	4603      	mov	r3, r0
 8002500:	2216      	movs	r2, #22
 8002502:	601a      	str	r2, [r3, #0]
  return -1;
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_exit>:

void _exit (int status)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ffe7 	bl	80024f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <_exit+0x12>

08002526 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e00a      	b.n	800254e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002538:	f3af 8000 	nop.w
 800253c:	4601      	mov	r1, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	60ba      	str	r2, [r7, #8]
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	dbf0      	blt.n	8002538 <_read+0x12>
  }

  return len;
 8002556:	687b      	ldr	r3, [r7, #4]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e009      	b.n	8002586 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	dbf1      	blt.n	8002572 <_write+0x12>
  }
  return len;
 800258e:	687b      	ldr	r3, [r7, #4]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_close>:

int _close(int file)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025c0:	605a      	str	r2, [r3, #4]
  return 0;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_isatty>:

int _isatty(int file)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	@ (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	@ (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f011 f828 	bl	8013684 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	@ (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	@ (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	@ (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20018000 	.word	0x20018000
 8002660:	00000400 	.word	0x00000400
 8002664:	20000314 	.word	0x20000314
 8002668:	200164b8 	.word	0x200164b8

0800266c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 8002690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002694:	f7ff ffea 	bl	800266c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002698:	480c      	ldr	r0, [pc, #48]	@ (80026cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800269a:	490d      	ldr	r1, [pc, #52]	@ (80026d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ae:	4a0a      	ldr	r2, [pc, #40]	@ (80026d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026b0:	4c0a      	ldr	r4, [pc, #40]	@ (80026dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80026be:	f010 ffe7 	bl	8013690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c2:	f7ff f8c3 	bl	800184c <main>
  bx  lr    
 80026c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80026d4:	0802c6c0 	.word	0x0802c6c0
  ldr r2, =_sbss
 80026d8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80026dc:	200164b4 	.word	0x200164b4

080026e0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e0:	e7fe      	b.n	80026e0 <DMA1_Stream0_IRQHandler>

080026e2 <display_init>:

#define LINE_HEIGHT 18  // Altura de la fuente (ajustar según la fuente usada)
#define DISPLAY_WIDTH 128
#define DISPLAY_HEIGHT 64
/*================[Public functions]=====================*/
void display_init(void){
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80026e6:	f000 fa21 	bl	8002b2c <ssd1306_Init>
	return;
 80026ea:	bf00      	nop
}
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <display_text>:

void display_text(const char *text,  uint8_t font_size) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
    uint8_t x = 0;  			// Posición inicial en X
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]
    uint8_t y = 0;  			// Posición inicial en Y
 8002700:	2300      	movs	r3, #0
 8002702:	73bb      	strb	r3, [r7, #14]
    uint8_t char_width = 0;   	// Ancho del carácter actual
 8002704:	2300      	movs	r3, #0
 8002706:	737b      	strb	r3, [r7, #13]
    uint8_t line_height = 0;  	// Altura de la línea actual
 8002708:	2300      	movs	r3, #0
 800270a:	733b      	strb	r3, [r7, #12]
    // Configurar la fuente según el tamaño
    switch (font_size) {
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d010      	beq.n	8002734 <display_text+0x44>
 8002712:	2b03      	cmp	r3, #3
 8002714:	dc13      	bgt.n	800273e <display_text+0x4e>
 8002716:	2b01      	cmp	r3, #1
 8002718:	d002      	beq.n	8002720 <display_text+0x30>
 800271a:	2b02      	cmp	r3, #2
 800271c:	d005      	beq.n	800272a <display_text+0x3a>
 800271e:	e00e      	b.n	800273e <display_text+0x4e>
        case 1: 									// Tamaño pequeño
            char_width = 7;
 8002720:	2307      	movs	r3, #7
 8002722:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8002724:	230a      	movs	r3, #10
 8002726:	733b      	strb	r3, [r7, #12]
            break;
 8002728:	e00e      	b.n	8002748 <display_text+0x58>
        case 2: 									// Tamaño mediano
            char_width = 11;
 800272a:	230b      	movs	r3, #11
 800272c:	737b      	strb	r3, [r7, #13]
            line_height = 18;
 800272e:	2312      	movs	r3, #18
 8002730:	733b      	strb	r3, [r7, #12]
            break;
 8002732:	e009      	b.n	8002748 <display_text+0x58>
        case 3: 									// Tamaño grande
            char_width = 16;
 8002734:	2310      	movs	r3, #16
 8002736:	737b      	strb	r3, [r7, #13]
            line_height = 24;
 8002738:	2318      	movs	r3, #24
 800273a:	733b      	strb	r3, [r7, #12]
            break;
 800273c:	e004      	b.n	8002748 <display_text+0x58>
        default: 									// Tamaño por defecto
            char_width = 7;
 800273e:	2307      	movs	r3, #7
 8002740:	737b      	strb	r3, [r7, #13]
            line_height = 10;
 8002742:	230a      	movs	r3, #10
 8002744:	733b      	strb	r3, [r7, #12]
            break;
 8002746:	bf00      	nop
    }

    ssd1306_Fill(Black);  // Limpiar la pantalla
 8002748:	2000      	movs	r0, #0
 800274a:	f000 fa59 	bl	8002c00 <ssd1306_Fill>

    while (*text) {
 800274e:	e053      	b.n	80027f8 <display_text+0x108>
        // Verificar si es un salto de línea manual
        if (*text == '\n') {
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b0a      	cmp	r3, #10
 8002756:	d106      	bne.n	8002766 <display_text+0x76>
            y += line_height;  											// Avanzo a la siguiente linea
 8002758:	7bba      	ldrb	r2, [r7, #14]
 800275a:	7b3b      	ldrb	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	73bb      	strb	r3, [r7, #14]
            x = 0;             											// Reinicio x
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e040      	b.n	80027e8 <display_text+0xf8>
        } else {
            // Escribir el carácter actual
            ssd1306_SetCursor(x, y);
 8002766:	7bba      	ldrb	r2, [r7, #14]
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f000 fb91 	bl	8002e94 <ssd1306_SetCursor>
            if(font_size == 1){
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d108      	bne.n	800278a <display_text+0x9a>
            	ssd1306_WriteChar(*text, Font_7x10, White);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7818      	ldrb	r0, [r3, #0]
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <display_text+0x120>)
 800277e:	2201      	movs	r2, #1
 8002780:	9200      	str	r2, [sp, #0]
 8002782:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002784:	f000 fad0 	bl	8002d28 <ssd1306_WriteChar>
 8002788:	e01f      	b.n	80027ca <display_text+0xda>
            }
            else if(font_size == 2){
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d108      	bne.n	80027a2 <display_text+0xb2>
            	ssd1306_WriteChar(*text, Font_11x18, White);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7818      	ldrb	r0, [r3, #0]
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <display_text+0x124>)
 8002796:	2201      	movs	r2, #1
 8002798:	9200      	str	r2, [sp, #0]
 800279a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800279c:	f000 fac4 	bl	8002d28 <ssd1306_WriteChar>
 80027a0:	e013      	b.n	80027ca <display_text+0xda>
            }
            else if(font_size == 3){
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d108      	bne.n	80027ba <display_text+0xca>
            	ssd1306_WriteChar(*text, Font_16x24, White);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7818      	ldrb	r0, [r3, #0]
 80027ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <display_text+0x128>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b4:	f000 fab8 	bl	8002d28 <ssd1306_WriteChar>
 80027b8:	e007      	b.n	80027ca <display_text+0xda>
            }
            else{
            	ssd1306_WriteChar(*text, Font_7x10, White);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7818      	ldrb	r0, [r3, #0]
 80027be:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <display_text+0x120>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	9200      	str	r2, [sp, #0]
 80027c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c6:	f000 faaf 	bl	8002d28 <ssd1306_WriteChar>
            }

            // Avanzar la posición X
            x += char_width;  // Avanzar por el ancho de la fuente
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	7b7b      	ldrb	r3, [r7, #13]
 80027ce:	4413      	add	r3, r2
 80027d0:	73fb      	strb	r3, [r7, #15]
            if (x + char_width > DISPLAY_WIDTH) {  							// Si se pasa del ancho de pantalla
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	7b7b      	ldrb	r3, [r7, #13]
 80027d6:	4413      	add	r3, r2
 80027d8:	2b80      	cmp	r3, #128	@ 0x80
 80027da:	dd05      	ble.n	80027e8 <display_text+0xf8>
                x = 0;                      								// Reinicio x
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
                y += line_height;           								// Avanzo a la siguiente linea
 80027e0:	7bba      	ldrb	r2, [r7, #14]
 80027e2:	7b3b      	ldrb	r3, [r7, #12]
 80027e4:	4413      	add	r3, r2
 80027e6:	73bb      	strb	r3, [r7, #14]
            }
        }

        // Avanzar al siguiente carácter
        text++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3301      	adds	r3, #1
 80027ec:	607b      	str	r3, [r7, #4]

        // Verificar si alcanzamos el final de la pantalla
        if (y + line_height > DISPLAY_HEIGHT) {
 80027ee:	7bba      	ldrb	r2, [r7, #14]
 80027f0:	7b3b      	ldrb	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	2b40      	cmp	r3, #64	@ 0x40
 80027f6:	dc04      	bgt.n	8002802 <display_text+0x112>
    while (*text) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1a7      	bne.n	8002750 <display_text+0x60>
 8002800:	e000      	b.n	8002804 <display_text+0x114>
            break;  // No hay más espacio para mostrar texto
 8002802:	bf00      	nop
        }
    }

    ssd1306_UpdateScreen();  // Actualizar pantalla
 8002804:	f000 fa14 	bl	8002c30 <ssd1306_UpdateScreen>
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	08018424 	.word	0x08018424
 8002814:	08018430 	.word	0x08018430
 8002818:	08018448 	.word	0x08018448

0800281c <display_start_msg>:

void display_start_msg(void){
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af02      	add	r7, sp, #8
	/*Muestra mensaje de insertar clave*/
	uint8_t x = 5;
 8002822:	2305      	movs	r3, #5
 8002824:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800282a:	2000      	movs	r0, #0
 800282c:	f000 f9e8 	bl	8002c00 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002830:	79ba      	ldrb	r2, [r7, #6]
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fb2c 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 800283c:	4b0f      	ldr	r3, [pc, #60]	@ (800287c <display_start_msg+0x60>)
 800283e:	2201      	movs	r2, #1
 8002840:	9200      	str	r2, [sp, #0]
 8002842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002844:	480e      	ldr	r0, [pc, #56]	@ (8002880 <display_start_msg+0x64>)
 8002846:	f000 faff 	bl	8002e48 <ssd1306_WriteString>
	x += 15;
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	330f      	adds	r3, #15
 800284e:	71fb      	strb	r3, [r7, #7]
	y += 28;
 8002850:	79bb      	ldrb	r3, [r7, #6]
 8002852:	331c      	adds	r3, #28
 8002854:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002856:	79ba      	ldrb	r2, [r7, #6]
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fb19 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <display_start_msg+0x60>)
 8002864:	2201      	movs	r2, #1
 8002866:	9200      	str	r2, [sp, #0]
 8002868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286a:	4806      	ldr	r0, [pc, #24]	@ (8002884 <display_start_msg+0x68>)
 800286c:	f000 faec 	bl	8002e48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002870:	f000 f9de 	bl	8002c30 <ssd1306_UpdateScreen>
	return;
 8002874:	bf00      	nop
}
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	0801843c 	.word	0x0801843c
 8002880:	080146e8 	.word	0x080146e8
 8002884:	080146f0 	.word	0x080146f0

08002888 <display_sequence_entry_msg>:

void display_sequence_entry_msg(uint8_t input_cont){
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
	/*Maneja el ingreso de digitos en el display*/
	char message[SEQUENCE_LENGTH + 1] = {0};
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	f107 0310 	add.w	r3, r7, #16
 800289a:	2100      	movs	r1, #0
 800289c:	460a      	mov	r2, r1
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	460a      	mov	r2, r1
 80028a2:	709a      	strb	r2, [r3, #2]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 80028a4:	230a      	movs	r3, #10
 80028a6:	75bb      	strb	r3, [r7, #22]
	uint8_t y = 26;
 80028a8:	231a      	movs	r3, #26
 80028aa:	757b      	strb	r3, [r7, #21]
	//Chequeo que counter no supere el numero maximo de digitos
	if(input_cont <= SEQUENCE_LENGTH){
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d823      	bhi.n	80028fa <display_sequence_entry_msg+0x72>
		//Armo el string a mostrar en el display
		for(uint8_t i = 0; i < input_cont; i++){
 80028b2:	2300      	movs	r3, #0
 80028b4:	75fb      	strb	r3, [r7, #23]
 80028b6:	e008      	b.n	80028ca <display_sequence_entry_msg+0x42>
			message[i] = '*';
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	3318      	adds	r3, #24
 80028bc:	443b      	add	r3, r7
 80028be:	222a      	movs	r2, #42	@ 0x2a
 80028c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t i = 0; i < input_cont; i++){
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	3301      	adds	r3, #1
 80028c8:	75fb      	strb	r3, [r7, #23]
 80028ca:	7dfa      	ldrb	r2, [r7, #23]
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d3f2      	bcc.n	80028b8 <display_sequence_entry_msg+0x30>
		}
		//Muestro el string
		ssd1306_Fill(Black);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f000 f994 	bl	8002c00 <ssd1306_Fill>
		ssd1306_SetCursor(x, y);
 80028d8:	7d7a      	ldrb	r2, [r7, #21]
 80028da:	7dbb      	ldrb	r3, [r7, #22]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fad8 	bl	8002e94 <ssd1306_SetCursor>
		ssd1306_WriteString(message, Font_16x26, White);
 80028e4:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <display_sequence_entry_msg+0x7c>)
 80028e6:	f107 000c 	add.w	r0, r7, #12
 80028ea:	2201      	movs	r2, #1
 80028ec:	9200      	str	r2, [sp, #0]
 80028ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f0:	f000 faaa 	bl	8002e48 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80028f4:	f000 f99c 	bl	8002c30 <ssd1306_UpdateScreen>
	}
	return;
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
}
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	0801843c 	.word	0x0801843c

08002908 <display_timeout_msg>:


void display_timeout_msg(void){
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	display_text("\n Timeout!!!", 2);
 800290c:	2102      	movs	r1, #2
 800290e:	4802      	ldr	r0, [pc, #8]	@ (8002918 <display_timeout_msg+0x10>)
 8002910:	f7ff feee 	bl	80026f0 <display_text>
	return;
 8002914:	bf00      	nop
}
 8002916:	bd80      	pop	{r7, pc}
 8002918:	080146f8 	.word	0x080146f8

0800291c <display_incomplete_entry_msg>:

void display_incomplete_entry_msg(void){
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	display_text("  Ingrese\n secuencia\n  valida", 2);
 8002920:	2102      	movs	r1, #2
 8002922:	4802      	ldr	r0, [pc, #8]	@ (800292c <display_incomplete_entry_msg+0x10>)
 8002924:	f7ff fee4 	bl	80026f0 <display_text>
	return;
 8002928:	bf00      	nop
}
 800292a:	bd80      	pop	{r7, pc}
 800292c:	08014708 	.word	0x08014708

08002930 <display_access_granted_msg>:

void display_access_granted_msg(void){
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	display_text("  Acceso\n concedido", 2);
 8002934:	2102      	movs	r1, #2
 8002936:	4802      	ldr	r0, [pc, #8]	@ (8002940 <display_access_granted_msg+0x10>)
 8002938:	f7ff feda 	bl	80026f0 <display_text>
	return;
 800293c:	bf00      	nop
}
 800293e:	bd80      	pop	{r7, pc}
 8002940:	08014728 	.word	0x08014728

08002944 <display_user_found_msg>:

void display_user_found_msg(void){
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	display_text("  Usuario\n  hallado", 2);
 8002948:	2102      	movs	r1, #2
 800294a:	4802      	ldr	r0, [pc, #8]	@ (8002954 <display_user_found_msg+0x10>)
 800294c:	f7ff fed0 	bl	80026f0 <display_text>
	return;
 8002950:	bf00      	nop
}
 8002952:	bd80      	pop	{r7, pc}
 8002954:	0801473c 	.word	0x0801473c

08002958 <display_user_not_found_msg>:

void display_user_not_found_msg(void){
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	display_text("  Usuario\n    no\n  existe", 2);
 800295c:	2102      	movs	r1, #2
 800295e:	4802      	ldr	r0, [pc, #8]	@ (8002968 <display_user_not_found_msg+0x10>)
 8002960:	f7ff fec6 	bl	80026f0 <display_text>
	return;
 8002964:	bf00      	nop
}
 8002966:	bd80      	pop	{r7, pc}
 8002968:	08014750 	.word	0x08014750

0800296c <display_start_voice_recognition_msg>:

void display_start_voice_recognition_msg(void){
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	display_text("  Comienza\n  captura\n  de voz", 2);
 8002970:	2102      	movs	r1, #2
 8002972:	4802      	ldr	r0, [pc, #8]	@ (800297c <display_start_voice_recognition_msg+0x10>)
 8002974:	f7ff febc 	bl	80026f0 <display_text>
	return;
 8002978:	bf00      	nop
}
 800297a:	bd80      	pop	{r7, pc}
 800297c:	0801476c 	.word	0x0801476c

08002980 <countdown_msg>:

void countdown_msg(void){
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af02      	add	r7, sp, #8
	/*Muestra mensaje de cuenta regresiva en pantalla*/
	uint8_t x = 50;
 8002986:	2332      	movs	r3, #50	@ 0x32
 8002988:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 26;
 800298a:	231a      	movs	r3, #26
 800298c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800298e:	2000      	movs	r0, #0
 8002990:	f000 f936 	bl	8002c00 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002994:	79ba      	ldrb	r2, [r7, #6]
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fa7a 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("3", Font_16x26, White);
 80029a0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a1c <countdown_msg+0x9c>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	9200      	str	r2, [sp, #0]
 80029a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029a8:	481d      	ldr	r0, [pc, #116]	@ (8002a20 <countdown_msg+0xa0>)
 80029aa:	f000 fa4d 	bl	8002e48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80029ae:	f000 f93f 	bl	8002c30 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80029b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029b6:	f00d fc5f 	bl	8010278 <vTaskDelay>
	ssd1306_Fill(Black);
 80029ba:	2000      	movs	r0, #0
 80029bc:	f000 f920 	bl	8002c00 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80029c0:	79ba      	ldrb	r2, [r7, #6]
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa64 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("2", Font_16x26, White);
 80029cc:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <countdown_msg+0x9c>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	9200      	str	r2, [sp, #0]
 80029d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d4:	4813      	ldr	r0, [pc, #76]	@ (8002a24 <countdown_msg+0xa4>)
 80029d6:	f000 fa37 	bl	8002e48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80029da:	f000 f929 	bl	8002c30 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 80029de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80029e2:	f00d fc49 	bl	8010278 <vTaskDelay>
	ssd1306_Fill(Black);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f000 f90a 	bl	8002c00 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80029ec:	79ba      	ldrb	r2, [r7, #6]
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fa4e 	bl	8002e94 <ssd1306_SetCursor>
	ssd1306_WriteString("1", Font_16x26, White);
 80029f8:	4b08      	ldr	r3, [pc, #32]	@ (8002a1c <countdown_msg+0x9c>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	9200      	str	r2, [sp, #0]
 80029fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a00:	4809      	ldr	r0, [pc, #36]	@ (8002a28 <countdown_msg+0xa8>)
 8002a02:	f000 fa21 	bl	8002e48 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002a06:	f000 f913 	bl	8002c30 <ssd1306_UpdateScreen>
	vTaskDelay(1000/portTICK_RATE_MS);
 8002a0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a0e:	f00d fc33 	bl	8010278 <vTaskDelay>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	0801843c 	.word	0x0801843c
 8002a20:	0801478c 	.word	0x0801478c
 8002a24:	08014790 	.word	0x08014790
 8002a28:	08014794 	.word	0x08014794

08002a2c <display_capturing_voice_msg>:

void display_capturing_voice_msg(void){
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	display_text("  Captura\n    ...", 2);
 8002a30:	2102      	movs	r1, #2
 8002a32:	4802      	ldr	r0, [pc, #8]	@ (8002a3c <display_capturing_voice_msg+0x10>)
 8002a34:	f7ff fe5c 	bl	80026f0 <display_text>
	return;
 8002a38:	bf00      	nop
}
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	08014798 	.word	0x08014798

08002a40 <display_recognized_voice_msg>:

void display_recognized_voice_msg(void){
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	display_text("    Voz\n reconocida", 2);
 8002a44:	2102      	movs	r1, #2
 8002a46:	4802      	ldr	r0, [pc, #8]	@ (8002a50 <display_recognized_voice_msg+0x10>)
 8002a48:	f7ff fe52 	bl	80026f0 <display_text>
	return;
 8002a4c:	bf00      	nop
}
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	080147ac 	.word	0x080147ac

08002a54 <display_not_recognized_voice_msg>:


void display_not_recognized_voice_msg(void){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	display_text("   Voz no\n reconocida", 2);
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4802      	ldr	r0, [pc, #8]	@ (8002a64 <display_not_recognized_voice_msg+0x10>)
 8002a5c:	f7ff fe48 	bl	80026f0 <display_text>
	return;
 8002a60:	bf00      	nop
}
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	080147c0 	.word	0x080147c0

08002a68 <display_processing_data_msg>:

void display_processing_data_msg(void){
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	display_text("  Aguarde\n    ...", 2);
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4802      	ldr	r0, [pc, #8]	@ (8002a78 <display_processing_data_msg+0x10>)
 8002a70:	f7ff fe3e 	bl	80026f0 <display_text>
	return;
 8002a74:	bf00      	nop
}
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	080147d8 	.word	0x080147d8

08002a7c <display_missing_database_msg>:

void display_missing_database_msg(void){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	display_text("  Database\n  faltante", 2);
 8002a80:	2102      	movs	r1, #2
 8002a82:	4802      	ldr	r0, [pc, #8]	@ (8002a8c <display_missing_database_msg+0x10>)
 8002a84:	f7ff fe34 	bl	80026f0 <display_text>
	return;
 8002a88:	bf00      	nop
}
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	080147ec 	.word	0x080147ec

08002a90 <display_missing_template_msg>:

void display_missing_template_msg(void){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	display_text("  Template\n  faltante", 2);
 8002a94:	2102      	movs	r1, #2
 8002a96:	4802      	ldr	r0, [pc, #8]	@ (8002aa0 <display_missing_template_msg+0x10>)
 8002a98:	f7ff fe2a 	bl	80026f0 <display_text>
	return;
 8002a9c:	bf00      	nop
}
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	08014804 	.word	0x08014804

08002aa4 <display_template_saved_msg>:

void display_template_saved_msg(void){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
	display_text("  Template\n  guardado", 2);
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4802      	ldr	r0, [pc, #8]	@ (8002ab4 <display_template_saved_msg+0x10>)
 8002aac:	f7ff fe20 	bl	80026f0 <display_text>
	return;
 8002ab0:	bf00      	nop
}
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	0801481c 	.word	0x0801481c

08002ab8 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af04      	add	r7, sp, #16
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2178      	movs	r1, #120	@ 0x78
 8002ae6:	4803      	ldr	r0, [pc, #12]	@ (8002af4 <ssd1306_WriteCommand+0x2c>)
 8002ae8:	f003 fb8c 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000158 	.word	0x20000158

08002af8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af04      	add	r7, sp, #16
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0a:	9202      	str	r2, [sp, #8]
 8002b0c:	9301      	str	r3, [sp, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2301      	movs	r3, #1
 8002b14:	2240      	movs	r2, #64	@ 0x40
 8002b16:	2178      	movs	r1, #120	@ 0x78
 8002b18:	4803      	ldr	r0, [pc, #12]	@ (8002b28 <ssd1306_WriteData+0x30>)
 8002b1a:	f003 fb73 	bl	8006204 <HAL_I2C_Mem_Write>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000158 	.word	0x20000158

08002b2c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002b30:	f7ff ffc2 	bl	8002ab8 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8002b34:	2064      	movs	r0, #100	@ 0x64
 8002b36:	f00d fb9f 	bl	8010278 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f000 f9d6 	bl	8002eec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002b40:	2020      	movs	r0, #32
 8002b42:	f7ff ffc1 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7ff ffbe 	bl	8002ac8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002b4c:	20b0      	movs	r0, #176	@ 0xb0
 8002b4e:	f7ff ffbb 	bl	8002ac8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002b52:	20c8      	movs	r0, #200	@ 0xc8
 8002b54:	f7ff ffb8 	bl	8002ac8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7ff ffb5 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002b5e:	2010      	movs	r0, #16
 8002b60:	f7ff ffb2 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002b64:	2040      	movs	r0, #64	@ 0x40
 8002b66:	f7ff ffaf 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002b6a:	20ff      	movs	r0, #255	@ 0xff
 8002b6c:	f000 f9aa 	bl	8002ec4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002b70:	20a1      	movs	r0, #161	@ 0xa1
 8002b72:	f7ff ffa9 	bl	8002ac8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002b76:	20a6      	movs	r0, #166	@ 0xa6
 8002b78:	f7ff ffa6 	bl	8002ac8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002b7c:	20a8      	movs	r0, #168	@ 0xa8
 8002b7e:	f7ff ffa3 	bl	8002ac8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002b82:	203f      	movs	r0, #63	@ 0x3f
 8002b84:	f7ff ffa0 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002b88:	20a4      	movs	r0, #164	@ 0xa4
 8002b8a:	f7ff ff9d 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002b8e:	20d3      	movs	r0, #211	@ 0xd3
 8002b90:	f7ff ff9a 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7ff ff97 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b9a:	20d5      	movs	r0, #213	@ 0xd5
 8002b9c:	f7ff ff94 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002ba0:	20f0      	movs	r0, #240	@ 0xf0
 8002ba2:	f7ff ff91 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002ba6:	20d9      	movs	r0, #217	@ 0xd9
 8002ba8:	f7ff ff8e 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002bac:	2022      	movs	r0, #34	@ 0x22
 8002bae:	f7ff ff8b 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002bb2:	20da      	movs	r0, #218	@ 0xda
 8002bb4:	f7ff ff88 	bl	8002ac8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002bb8:	2012      	movs	r0, #18
 8002bba:	f7ff ff85 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002bbe:	20db      	movs	r0, #219	@ 0xdb
 8002bc0:	f7ff ff82 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002bc4:	2020      	movs	r0, #32
 8002bc6:	f7ff ff7f 	bl	8002ac8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002bca:	208d      	movs	r0, #141	@ 0x8d
 8002bcc:	f7ff ff7c 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002bd0:	2014      	movs	r0, #20
 8002bd2:	f7ff ff79 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 f988 	bl	8002eec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f000 f80f 	bl	8002c00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002be2:	f000 f825 	bl	8002c30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002be6:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <ssd1306_Init+0xd0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002bec:	4b03      	ldr	r3, [pc, #12]	@ (8002bfc <ssd1306_Init+0xd0>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002bf2:	4b02      	ldr	r3, [pc, #8]	@ (8002bfc <ssd1306_Init+0xd0>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	711a      	strb	r2, [r3, #4]
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000718 	.word	0x20000718

08002c00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <ssd1306_Fill+0x14>
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <ssd1306_Fill+0x16>
 8002c14:	23ff      	movs	r3, #255	@ 0xff
 8002c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4803      	ldr	r0, [pc, #12]	@ (8002c2c <ssd1306_Fill+0x2c>)
 8002c1e:	f010 fc64 	bl	80134ea <memset>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000318 	.word	0x20000318

08002c30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c36:	2300      	movs	r3, #0
 8002c38:	71fb      	strb	r3, [r7, #7]
 8002c3a:	e016      	b.n	8002c6a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	3b50      	subs	r3, #80	@ 0x50
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff40 	bl	8002ac8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff ff3d 	bl	8002ac8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002c4e:	2010      	movs	r0, #16
 8002c50:	f7ff ff3a 	bl	8002ac8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	01db      	lsls	r3, r3, #7
 8002c58:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <ssd1306_UpdateScreen+0x4c>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	2180      	movs	r1, #128	@ 0x80
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff4a 	bl	8002af8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	3301      	adds	r3, #1
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b07      	cmp	r3, #7
 8002c6e:	d9e5      	bls.n	8002c3c <ssd1306_UpdateScreen+0xc>
    }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000318 	.word	0x20000318

08002c80 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	71bb      	strb	r3, [r7, #6]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db3d      	blt.n	8002d16 <ssd1306_DrawPixel+0x96>
 8002c9a:	79bb      	ldrb	r3, [r7, #6]
 8002c9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c9e:	d83a      	bhi.n	8002d16 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002ca0:	797b      	ldrb	r3, [r7, #5]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d11a      	bne.n	8002cdc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ca6:	79fa      	ldrb	r2, [r7, #7]
 8002ca8:	79bb      	ldrb	r3, [r7, #6]
 8002caa:	08db      	lsrs	r3, r3, #3
 8002cac:	b2d8      	uxtb	r0, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	01db      	lsls	r3, r3, #7
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <ssd1306_DrawPixel+0xa4>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	b25a      	sxtb	r2, r3
 8002cba:	79bb      	ldrb	r3, [r7, #6]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b259      	sxtb	r1, r3
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	4603      	mov	r3, r0
 8002cd0:	01db      	lsls	r3, r3, #7
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b2c9      	uxtb	r1, r1
 8002cd6:	4a13      	ldr	r2, [pc, #76]	@ (8002d24 <ssd1306_DrawPixel+0xa4>)
 8002cd8:	54d1      	strb	r1, [r2, r3]
 8002cda:	e01d      	b.n	8002d18 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002cdc:	79fa      	ldrb	r2, [r7, #7]
 8002cde:	79bb      	ldrb	r3, [r7, #6]
 8002ce0:	08db      	lsrs	r3, r3, #3
 8002ce2:	b2d8      	uxtb	r0, r3
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	01db      	lsls	r3, r3, #7
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a0e      	ldr	r2, [pc, #56]	@ (8002d24 <ssd1306_DrawPixel+0xa4>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	b25a      	sxtb	r2, r3
 8002cf0:	79bb      	ldrb	r3, [r7, #6]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	4013      	ands	r3, r2
 8002d04:	b259      	sxtb	r1, r3
 8002d06:	79fa      	ldrb	r2, [r7, #7]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	01db      	lsls	r3, r3, #7
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b2c9      	uxtb	r1, r1
 8002d10:	4a04      	ldr	r2, [pc, #16]	@ (8002d24 <ssd1306_DrawPixel+0xa4>)
 8002d12:	54d1      	strb	r1, [r2, r3]
 8002d14:	e000      	b.n	8002d18 <ssd1306_DrawPixel+0x98>
        return;
 8002d16:	bf00      	nop
    }
}
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000318 	.word	0x20000318

08002d28 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4638      	mov	r0, r7
 8002d32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002d36:	4623      	mov	r3, r4
 8002d38:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b1f      	cmp	r3, #31
 8002d3e:	d902      	bls.n	8002d46 <ssd1306_WriteChar+0x1e>
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b7e      	cmp	r3, #126	@ 0x7e
 8002d44:	d901      	bls.n	8002d4a <ssd1306_WriteChar+0x22>
        return 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e077      	b.n	8002e3a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	783b      	ldrb	r3, [r7, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	2b80      	cmp	r3, #128	@ 0x80
 8002d56:	dc06      	bgt.n	8002d66 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002d58:	4b3a      	ldr	r3, [pc, #232]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002d5a:	885b      	ldrh	r3, [r3, #2]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	787b      	ldrb	r3, [r7, #1]
 8002d60:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002d62:	2b40      	cmp	r3, #64	@ 0x40
 8002d64:	dd01      	ble.n	8002d6a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e067      	b.n	8002e3a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e04e      	b.n	8002e0e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	3b20      	subs	r3, #32
 8002d76:	7879      	ldrb	r1, [r7, #1]
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	440b      	add	r3, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	e036      	b.n	8002dfe <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d013      	beq.n	8002dc8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002da0:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	b2d8      	uxtb	r0, r3
 8002dae:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002db0:	885b      	ldrh	r3, [r3, #2]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7ff ff5d 	bl	8002c80 <ssd1306_DrawPixel>
 8002dc6:	e017      	b.n	8002df8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b2d8      	uxtb	r0, r3
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002dd8:	885b      	ldrh	r3, [r3, #2]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	b2d9      	uxtb	r1, r3
 8002de4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7ff ff44 	bl	8002c80 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	783b      	ldrb	r3, [r7, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d3c3      	bcc.n	8002d90 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	787b      	ldrb	r3, [r7, #1]
 8002e10:	461a      	mov	r2, r3
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d3ab      	bcc.n	8002d70 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002e18:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	d005      	beq.n	8002e2e <ssd1306_WriteChar+0x106>
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	3a20      	subs	r2, #32
 8002e28:	440a      	add	r2, r1
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	e000      	b.n	8002e30 <ssd1306_WriteChar+0x108>
 8002e2e:	783a      	ldrb	r2, [r7, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <ssd1306_WriteChar+0x11c>)
 8002e36:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3724      	adds	r7, #36	@ 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000718 	.word	0x20000718

08002e48 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	4638      	mov	r0, r7
 8002e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002e56:	e013      	b.n	8002e80 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	7818      	ldrb	r0, [r3, #0]
 8002e5c:	7e3b      	ldrb	r3, [r7, #24]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	463b      	mov	r3, r7
 8002e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e64:	f7ff ff60 	bl	8002d28 <ssd1306_WriteChar>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d002      	beq.n	8002e7a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	e008      	b.n	8002e8c <ssd1306_WriteString+0x44>
        }
        str++;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e7      	bne.n	8002e58 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	71fb      	strb	r3, [r7, #7]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <ssd1306_SetCursor+0x2c>)
 8002eaa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002eac:	79bb      	ldrb	r3, [r7, #6]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <ssd1306_SetCursor+0x2c>)
 8002eb2:	805a      	strh	r2, [r3, #2]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	20000718 	.word	0x20000718

08002ec4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002ece:	2381      	movs	r3, #129	@ 0x81
 8002ed0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff fdf7 	bl	8002ac8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fdf3 	bl	8002ac8 <ssd1306_WriteCommand>
}
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002efc:	23af      	movs	r3, #175	@ 0xaf
 8002efe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <ssd1306_SetDisplayOn+0x38>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	715a      	strb	r2, [r3, #5]
 8002f06:	e004      	b.n	8002f12 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002f08:	23ae      	movs	r3, #174	@ 0xae
 8002f0a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <ssd1306_SetDisplayOn+0x38>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fdd7 	bl	8002ac8 <ssd1306_WriteCommand>
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000718 	.word	0x20000718

08002f28 <handle_keypad_input>:
	uint8_t current_index;
	TickType_t start_time;
}keypad_context_t;

/*================[Public functions]=========================*/
display_message_t handle_keypad_input(char input, char *buffer, bool *send_flag){
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	73fb      	strb	r3, [r7, #15]
	static keypad_context_t context = { .current_state = WAITING_FOR_DIGIT_1,
										.current_index = 0,
										.start_time = 0,					};
	display_message_t current_message = DISPLAY_IDLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
	switch(context.current_state){
 8002f3a:	4b62      	ldr	r3, [pc, #392]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b07      	cmp	r3, #7
 8002f40:	f000 80a1 	beq.w	8003086 <handle_keypad_input+0x15e>
 8002f44:	2b07      	cmp	r3, #7
 8002f46:	f300 80aa 	bgt.w	800309e <handle_keypad_input+0x176>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d007      	beq.n	8002f5e <handle_keypad_input+0x36>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f2c0 80a5 	blt.w	800309e <handle_keypad_input+0x176>
 8002f54:	3b01      	subs	r3, #1
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	f200 80a1 	bhi.w	800309e <handle_keypad_input+0x176>
 8002f5c:	e01c      	b.n	8002f98 <handle_keypad_input+0x70>
	case WAITING_FOR_DIGIT_1:
		if(input != 0 && input != BORRAR_DIGITO && input != ENTER){
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d016      	beq.n	8002f92 <handle_keypad_input+0x6a>
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b23      	cmp	r3, #35	@ 0x23
 8002f68:	d013      	beq.n	8002f92 <handle_keypad_input+0x6a>
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f6e:	d010      	beq.n	8002f92 <handle_keypad_input+0x6a>
			buffer[0] = input;													//Guardo digito en el buffer
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	701a      	strb	r2, [r3, #0]
			context.current_index = 1;
 8002f76:	4b53      	ldr	r3, [pc, #332]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	705a      	strb	r2, [r3, #1]
			context.start_time = xTaskGetTickCount();							//Reinicio el timeout
 8002f7c:	f00d faa6 	bl	80104cc <xTaskGetTickCount>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4a50      	ldr	r2, [pc, #320]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002f84:	6053      	str	r3, [r2, #4]
			context.current_state = WAITING_FOR_DIGIT_2;						//Avanzo al siguiente estado
 8002f86:	4b4f      	ldr	r3, [pc, #316]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_ENTER_DIGIT;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	75fb      	strb	r3, [r7, #23]
		}
		else{
			current_message = DISPLAY_IDLE;
		}
		break;
 8002f90:	e093      	b.n	80030ba <handle_keypad_input+0x192>
			current_message = DISPLAY_IDLE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
		break;
 8002f96:	e090      	b.n	80030ba <handle_keypad_input+0x192>
	case WAITING_FOR_DIGIT_3:
	case WAITING_FOR_DIGIT_4:
	case WAITING_FOR_DIGIT_5:
	case WAITING_FOR_DIGIT_6:
	case WAITING_FOR_CONFIRMATION:
		if((xTaskGetTickCount() - context.start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8002f98:	f00d fa98 	bl	80104cc <xTaskGetTickCount>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b49      	ldr	r3, [pc, #292]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d866      	bhi.n	800307a <handle_keypad_input+0x152>
			if(input != 0){
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d060      	beq.n	8003074 <handle_keypad_input+0x14c>
				if(input == BORRAR_DIGITO){
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b23      	cmp	r3, #35	@ 0x23
 8002fb6:	d124      	bne.n	8003002 <handle_keypad_input+0xda>
					if(context.current_index > 0){
 8002fb8:	4b42      	ldr	r3, [pc, #264]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d07b      	beq.n	80030b8 <handle_keypad_input+0x190>
						context.current_index--;
 8002fc0:	4b40      	ldr	r3, [pc, #256]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fca:	705a      	strb	r2, [r3, #1]
						buffer[context.current_index] = '\0';					//Borro el contenido previo
 8002fcc:	4b3d      	ldr	r3, [pc, #244]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fce:	785b      	ldrb	r3, [r3, #1]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8002fda:	f00d fa77 	bl	80104cc <xTaskGetTickCount>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	4a38      	ldr	r2, [pc, #224]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fe2:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ERASE_DIGIT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	75fb      	strb	r3, [r7, #23]
						context.current_state = (context.current_state > WAITING_FOR_DIGIT_1) ? context.current_state - 1 : WAITING_FOR_DIGIT_1;
 8002fe8:	4b36      	ldr	r3, [pc, #216]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <handle_keypad_input+0xd2>
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e000      	b.n	8002ffc <handle_keypad_input+0xd4>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	4a31      	ldr	r2, [pc, #196]	@ (80030c4 <handle_keypad_input+0x19c>)
 8002ffe:	7013      	strb	r3, [r2, #0]
		}
		else{
			context.current_state = TIMEOUT;
			current_message = DISPLAY_TIMEOUT_EVENT;
		}
		break;
 8003000:	e05a      	b.n	80030b8 <handle_keypad_input+0x190>
				else if(input == ENTER){
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b2a      	cmp	r3, #42	@ 0x2a
 8003006:	d10d      	bne.n	8003024 <handle_keypad_input+0xfc>
					if(context.current_state == WAITING_FOR_CONFIRMATION){
 8003008:	4b2e      	ldr	r3, [pc, #184]	@ (80030c4 <handle_keypad_input+0x19c>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b06      	cmp	r3, #6
 800300e:	d103      	bne.n	8003018 <handle_keypad_input+0xf0>
						context.current_state = SEND_SEQUENCE_TO_SD;
 8003010:	4b2c      	ldr	r3, [pc, #176]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003012:	2207      	movs	r2, #7
 8003014:	701a      	strb	r2, [r3, #0]
		break;
 8003016:	e04f      	b.n	80030b8 <handle_keypad_input+0x190>
						context.current_state = INCOMPLETE_SEQUENCE;
 8003018:	4b2a      	ldr	r3, [pc, #168]	@ (80030c4 <handle_keypad_input+0x19c>)
 800301a:	2208      	movs	r2, #8
 800301c:	701a      	strb	r2, [r3, #0]
						current_message = DISPLAY_INCOMPLETE_SEQUENCE_EVENT;
 800301e:	230b      	movs	r3, #11
 8003020:	75fb      	strb	r3, [r7, #23]
		break;
 8003022:	e049      	b.n	80030b8 <handle_keypad_input+0x190>
					if(context.current_index < SEQUENCE_LENGTH){
 8003024:	4b27      	ldr	r3, [pc, #156]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003026:	785b      	ldrb	r3, [r3, #1]
 8003028:	2b05      	cmp	r3, #5
 800302a:	d845      	bhi.n	80030b8 <handle_keypad_input+0x190>
						buffer[context.current_index++] = input;				//Agrego el digito al buffer
 800302c:	4b25      	ldr	r3, [pc, #148]	@ (80030c4 <handle_keypad_input+0x19c>)
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	b2d1      	uxtb	r1, r2
 8003034:	4a23      	ldr	r2, [pc, #140]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003036:	7051      	strb	r1, [r2, #1]
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	701a      	strb	r2, [r3, #0]
						buffer[context.current_index] = '\0';					//Aseguro que el buffer siempre termine en caracter nulo
 8003042:	4b20      	ldr	r3, [pc, #128]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	461a      	mov	r2, r3
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4413      	add	r3, r2
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
						context.start_time = xTaskGetTickCount();				//Reinicio el timeout
 8003050:	f00d fa3c 	bl	80104cc <xTaskGetTickCount>
 8003054:	4603      	mov	r3, r0
 8003056:	4a1b      	ldr	r2, [pc, #108]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003058:	6053      	str	r3, [r2, #4]
						current_message = DISPLAY_ENTER_DIGIT;
 800305a:	2302      	movs	r3, #2
 800305c:	75fb      	strb	r3, [r7, #23]
						if(context.current_state != WAITING_FOR_CONFIRMATION){
 800305e:	4b19      	ldr	r3, [pc, #100]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b06      	cmp	r3, #6
 8003064:	d028      	beq.n	80030b8 <handle_keypad_input+0x190>
							context.current_state++;
 8003066:	4b17      	ldr	r3, [pc, #92]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	3301      	adds	r3, #1
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003070:	701a      	strb	r2, [r3, #0]
		break;
 8003072:	e021      	b.n	80030b8 <handle_keypad_input+0x190>
				current_message = DISPLAY_IDLE;
 8003074:	2300      	movs	r3, #0
 8003076:	75fb      	strb	r3, [r7, #23]
		break;
 8003078:	e01e      	b.n	80030b8 <handle_keypad_input+0x190>
			context.current_state = TIMEOUT;
 800307a:	4b12      	ldr	r3, [pc, #72]	@ (80030c4 <handle_keypad_input+0x19c>)
 800307c:	2209      	movs	r2, #9
 800307e:	701a      	strb	r2, [r3, #0]
			current_message = DISPLAY_TIMEOUT_EVENT;
 8003080:	230a      	movs	r3, #10
 8003082:	75fb      	strb	r3, [r7, #23]
		break;
 8003084:	e018      	b.n	80030b8 <handle_keypad_input+0x190>
	case SEND_SEQUENCE_TO_SD:
		*send_flag = 1;															//Habilito flag para enviar el string
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
		context.current_state = WAITING_FOR_DIGIT_1;
 800308c:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <handle_keypad_input+0x19c>)
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 8003092:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <handle_keypad_input+0x19c>)
 8003094:	2200      	movs	r2, #0
 8003096:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;								//Luego del procesamiento se vuelve al estado inicial
 8003098:	2301      	movs	r3, #1
 800309a:	75fb      	strb	r3, [r7, #23]
		break;
 800309c:	e00d      	b.n	80030ba <handle_keypad_input+0x192>
	case INCOMPLETE_SEQUENCE:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH + 1);
 800309e:	2107      	movs	r1, #7
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f001 fb0d 	bl	80046c0 <clear_buffer>
		context.current_state = WAITING_FOR_DIGIT_1;							//Vuelvo al estado inicial
 80030a6:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <handle_keypad_input+0x19c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
		context.current_index = 0;
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <handle_keypad_input+0x19c>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	705a      	strb	r2, [r3, #1]
		current_message = DISPLAY_SCREEN_WELCOME;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
		break;
 80030b6:	e000      	b.n	80030ba <handle_keypad_input+0x192>
		break;
 80030b8:	bf00      	nop
	}
	return current_message;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000720 	.word	0x20000720

080030c8 <set_row>:
	      	  	  	  	  		  	  	  	  	  {'4', '5', '6', 'B'},
												  {'7', '8', '9', 'C'},
												  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4619      	mov	r1, r3
 80030d8:	4803      	ldr	r0, [pc, #12]	@ (80030e8 <set_row+0x20>)
 80030da:	f002 ff35 	bl	8005f48 <HAL_GPIO_WritePin>
	return;
 80030de:	bf00      	nop
}
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40020800 	.word	0x40020800

080030ec <reset_row>:

static void reset_row(row_t row){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	2200      	movs	r2, #0
 80030fa:	4619      	mov	r1, r3
 80030fc:	4803      	ldr	r0, [pc, #12]	@ (800310c <reset_row+0x20>)
 80030fe:	f002 ff23 	bl	8005f48 <HAL_GPIO_WritePin>
	return;
 8003102:	bf00      	nop
}
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40020800 	.word	0x40020800

08003110 <read_col>:

static GPIO_PinState read_col(col_t col){
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(GPIO_COL, col);
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	b29b      	uxth	r3, r3
 800311e:	4619      	mov	r1, r3
 8003120:	4803      	ldr	r0, [pc, #12]	@ (8003130 <read_col+0x20>)
 8003122:	f002 fef9 	bl	8005f18 <HAL_GPIO_ReadPin>
 8003126:	4603      	mov	r3, r0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40020800 	.word	0x40020800

08003134 <read_keypad>:

/*================[Public functions]=====================*/
char read_keypad(void){
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
	/* La funcion barre las filas del keypad, activando una por una individualmente y leyendo la columna asociada,
	 * para así poder triangular la tecla presionada. Se realiza doble confirmacion de tecla presionada.
	 */
	char key_pressed;
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 800313a:	2300      	movs	r3, #0
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	e04c      	b.n	80031da <read_keypad+0xa6>
		set_row(keypad_rows[i]);
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <read_keypad+0xb8>)
 8003144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ffbd 	bl	80030c8 <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 800314e:	2300      	movs	r3, #0
 8003150:	71bb      	strb	r3, [r7, #6]
 8003152:	e035      	b.n	80031c0 <read_keypad+0x8c>
			if(read_col(keypad_cols[j]) == GPIO_PIN_SET){					//Verifico si alguna columna esta en alto (tecla presionada)
 8003154:	79bb      	ldrb	r3, [r7, #6]
 8003156:	4a26      	ldr	r2, [pc, #152]	@ (80031f0 <read_keypad+0xbc>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff ffd8 	bl	8003110 <read_col>
 8003160:	4603      	mov	r3, r0
 8003162:	2b01      	cmp	r3, #1
 8003164:	d129      	bne.n	80031ba <read_keypad+0x86>
				vTaskDelay(20 / portTICK_RATE_MS);							//Si una de las columnas dio alto, espero 20ms y verifico que siga en alto para confirmar
 8003166:	2014      	movs	r0, #20
 8003168:	f00d f886 	bl	8010278 <vTaskDelay>
				if(read_col(keypad_cols[j]) == GPIO_PIN_SET){
 800316c:	79bb      	ldrb	r3, [r7, #6]
 800316e:	4a20      	ldr	r2, [pc, #128]	@ (80031f0 <read_keypad+0xbc>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ffcc 	bl	8003110 <read_col>
 8003178:	4603      	mov	r3, r0
 800317a:	2b01      	cmp	r3, #1
 800317c:	d11d      	bne.n	80031ba <read_keypad+0x86>
					key_pressed = keypad_chars[i][j];						//Guardo la tecla presionada
 800317e:	79fa      	ldrb	r2, [r7, #7]
 8003180:	79bb      	ldrb	r3, [r7, #6]
 8003182:	491c      	ldr	r1, [pc, #112]	@ (80031f4 <read_keypad+0xc0>)
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	440a      	add	r2, r1
 8003188:	4413      	add	r3, r2
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	717b      	strb	r3, [r7, #5]
					while(read_col(keypad_cols[j]) == GPIO_PIN_SET);		//Espero a que se deje de apretar la tecla
 800318e:	bf00      	nop
 8003190:	79bb      	ldrb	r3, [r7, #6]
 8003192:	4a17      	ldr	r2, [pc, #92]	@ (80031f0 <read_keypad+0xbc>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ffba 	bl	8003110 <read_col>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d0f6      	beq.n	8003190 <read_keypad+0x5c>
					reset_row(keypad_rows[i]);								//Reseteo la fila en alto antes de salir de la funcion
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4a11      	ldr	r2, [pc, #68]	@ (80031ec <read_keypad+0xb8>)
 80031a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff ff9e 	bl	80030ec <reset_row>
					vTaskDelay(10/portTICK_RATE_MS);						//Pequeño delay para asegurar que el boton fue liberado completamente
 80031b0:	200a      	movs	r0, #10
 80031b2:	f00d f861 	bl	8010278 <vTaskDelay>
					return key_pressed;
 80031b6:	797b      	ldrb	r3, [r7, #5]
 80031b8:	e013      	b.n	80031e2 <read_keypad+0xae>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 80031ba:	79bb      	ldrb	r3, [r7, #6]
 80031bc:	3301      	adds	r3, #1
 80031be:	71bb      	strb	r3, [r7, #6]
 80031c0:	79bb      	ldrb	r3, [r7, #6]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d9c6      	bls.n	8003154 <read_keypad+0x20>
				}
			}
		}
		reset_row(keypad_rows[i]);
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <read_keypad+0xb8>)
 80031ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff8c 	bl	80030ec <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	3301      	adds	r3, #1
 80031d8:	71fb      	strb	r3, [r7, #7]
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d9af      	bls.n	8003140 <read_keypad+0xc>
	}
	return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000008 	.word	0x20000008
 80031f0:	20000010 	.word	0x20000010
 80031f4:	08018454 	.word	0x08018454

080031f8 <capture_voice>:
extern ADC_HandleTypeDef hadc1;
extern TIM_HandleTypeDef htim3;
extern volatile bool conv_cplt_flag;

/*================[Public functions]=====================*/
void capture_voice(uint16_t *buffer, uint32_t size){
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8003202:	480c      	ldr	r0, [pc, #48]	@ (8003234 <capture_voice+0x3c>)
 8003204:	f005 f8dc 	bl	80083c0 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, size);					//Inicio captura de datos con ADC
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	480a      	ldr	r0, [pc, #40]	@ (8003238 <capture_voice+0x40>)
 800320e:	f001 fc2b 	bl	8004a68 <HAL_ADC_Start_DMA>
	while(!conv_cplt_flag);												//Espero a que termine la captura
 8003212:	bf00      	nop
 8003214:	4b09      	ldr	r3, [pc, #36]	@ (800323c <capture_voice+0x44>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f083 0301 	eor.w	r3, r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1f7      	bne.n	8003214 <capture_voice+0x1c>
	conv_cplt_flag = false;
 8003224:	4b05      	ldr	r3, [pc, #20]	@ (800323c <capture_voice+0x44>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
	return;
 800322a:	bf00      	nop
}
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000224 	.word	0x20000224
 8003238:	200000b0 	.word	0x200000b0
 800323c:	200002c4 	.word	0x200002c4

08003240 <get_voltage>:

void get_voltage(uint16_t *in_buffer, float *out_buffer, uint32_t size){
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < size; i++){
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e029      	b.n	80032a6 <get_voltage+0x66>
		out_buffer[i] = VOLTAGE_REFERENCE * ((float)in_buffer[i]) / ADC_RESOLUTION;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	ee07 3a90 	vmov	s15, r3
 8003260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003264:	ee17 0a90 	vmov	r0, s15
 8003268:	f7fd f9e6 	bl	8000638 <__aeabi_f2d>
 800326c:	a313      	add	r3, pc, #76	@ (adr r3, 80032bc <get_voltage+0x7c>)
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f7fd fa39 	bl	80006e8 <__aeabi_dmul>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4610      	mov	r0, r2
 800327c:	4619      	mov	r1, r3
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <get_voltage+0x78>)
 8003284:	f7fd fb5a 	bl	800093c <__aeabi_ddiv>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	18d4      	adds	r4, r2, r3
 8003298:	f7fd fc38 	bl	8000b0c <__aeabi_d2f>
 800329c:	4603      	mov	r3, r0
 800329e:	6023      	str	r3, [r4, #0]
	for(uint32_t i = 0; i < size; i++){
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	3301      	adds	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d3d1      	bcc.n	8003252 <get_voltage+0x12>
	}
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd90      	pop	{r4, r7, pc}
 80032b8:	40b00000 	.word	0x40b00000
 80032bc:	66666666 	.word	0x66666666
 80032c0:	400a6666 	.word	0x400a6666

080032c4 <store_voice>:

void store_voice(uint16_t *voice_buffer, uint32_t buf_size, uint32_t frame_size, char *filename){
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
	display_message_t message;
	float *current_frame;
	//Verifico que size sea multiplo de frame_size
	if((buf_size % frame_size) != 0){
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	fb01 f202 	mul.w	r2, r1, r2
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d139      	bne.n	800335a <store_voice+0x96>
		//Manejar error
		return;
	}

	//Reservo memoria para el bloque de procesamiento
	uint32_t num_of_frames = buf_size / frame_size;
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	61bb      	str	r3, [r7, #24]
	current_frame = pvPortMalloc(FLOAT_SIZE_BYTES(frame_size));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f00e f851 	bl	801139c <pvPortMalloc>
 80032fa:	6178      	str	r0, [r7, #20]
	if(current_frame == NULL){
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <store_voice+0x58>
		//Manejar este caso, enviar un print
		message = DISPLAY_ERROR_MEMORY;
 8003302:	2312      	movs	r3, #18
 8003304:	74fb      	strb	r3, [r7, #19]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <store_voice+0xa0>)
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	f107 0113 	add.w	r1, r7, #19
 800330e:	2300      	movs	r3, #0
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	f00c f904 	bl	800f520 <xQueueGenericSend>
		while(1);
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <store_voice+0x54>
		return;
	}

	for(uint8_t i = 0; i < num_of_frames; i++){
 800331c:	2300      	movs	r3, #0
 800331e:	77fb      	strb	r3, [r7, #31]
 8003320:	e013      	b.n	800334a <store_voice+0x86>
		//Convierto los valores obtenidos a tension
		get_voltage(&voice_buffer[i * frame_size], current_frame, frame_size);
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6979      	ldr	r1, [r7, #20]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff83 	bl	8003240 <get_voltage>

		//Guardo en la SD
		save_buffer_on_sd(filename, current_frame, frame_size);
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6979      	ldr	r1, [r7, #20]
 800333e:	6838      	ldr	r0, [r7, #0]
 8003340:	f000 fb66 	bl	8003a10 <save_buffer_on_sd>
	for(uint8_t i = 0; i < num_of_frames; i++){
 8003344:	7ffb      	ldrb	r3, [r7, #31]
 8003346:	3301      	adds	r3, #1
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	7ffb      	ldrb	r3, [r7, #31]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	429a      	cmp	r2, r3
 8003350:	d8e7      	bhi.n	8003322 <store_voice+0x5e>
	}

	//Libero memoria utilizada
	vPortFree(current_frame);
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f00e f8f0 	bl	8011538 <vPortFree>
	return;
 8003358:	e000      	b.n	800335c <store_voice+0x98>
		return;
 800335a:	bf00      	nop
}
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200002b8 	.word	0x200002b8

08003368 <extract_and_save_features>:

void extract_and_save_features(char *voice_name, char *feature_name){
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
	display_message_t message;
	float *current_frame = pvPortMalloc(FLOAT_SIZE_BYTES(FRAME_SIZE));
 8003372:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003376:	f00e f811 	bl	801139c <pvPortMalloc>
 800337a:	6138      	str	r0, [r7, #16]
	float *feature_frame = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 800337c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003380:	f00e f80c 	bl	801139c <pvPortMalloc>
 8003384:	60f8      	str	r0, [r7, #12]
	if(current_frame == NULL || feature_frame == NULL){
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <extract_and_save_features+0x2a>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10c      	bne.n	80033ac <extract_and_save_features+0x44>
		message = DISPLAY_ERROR_MEMORY;
 8003392:	2312      	movs	r3, #18
 8003394:	72fb      	strb	r3, [r7, #11]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8003396:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <extract_and_save_features+0x98>)
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	f107 010b 	add.w	r1, r7, #11
 800339e:	2300      	movs	r3, #0
 80033a0:	f04f 32ff 	mov.w	r2, #4294967295
 80033a4:	f00c f8bc 	bl	800f520 <xQueueGenericSend>
		while(1);
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <extract_and_save_features+0x40>
	}
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
 80033b0:	e016      	b.n	80033e0 <extract_and_save_features+0x78>
		read_buffer_from_sd(voice_name, current_frame, FRAME_SIZE, i * FRAME_SIZE);
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	02db      	lsls	r3, r3, #11
 80033b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033ba:	6939      	ldr	r1, [r7, #16]
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fb95 	bl	8003aec <read_buffer_from_sd>
		process_frame(current_frame, feature_frame, FRAME_SIZE);
 80033c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	6938      	ldr	r0, [r7, #16]
 80033ca:	f000 f963 	bl	8003694 <process_frame>
		save_buffer_on_sd(feature_name, feature_frame, FEATURE_SIZE);
 80033ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	6838      	ldr	r0, [r7, #0]
 80033d6:	f000 fb1b 	bl	8003a10 <save_buffer_on_sd>
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80033da:	7dfb      	ldrb	r3, [r7, #23]
 80033dc:	3301      	adds	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d9e5      	bls.n	80033b2 <extract_and_save_features+0x4a>
	}

	//Elimino el archivo de voz para quedarme solo con los features
	f_unlink(voice_name);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f00b fb93 	bl	800eb12 <f_unlink>

	//Libero memoria utilizada
	vPortFree(current_frame);
 80033ec:	6938      	ldr	r0, [r7, #16]
 80033ee:	f00e f8a3 	bl	8011538 <vPortFree>
	vPortFree(feature_frame);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f00e f8a0 	bl	8011538 <vPortFree>
	return;
 80033f8:	bf00      	nop
}
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	200002b8 	.word	0x200002b8

08003404 <check_voice>:

bool check_voice(char *template_path, char *feature_path){
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
	display_message_t message;
	float32_t *template = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 800340e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003412:	f00d ffc3 	bl	801139c <pvPortMalloc>
 8003416:	6138      	str	r0, [r7, #16]
	float32_t *extracted_feature = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 8003418:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800341c:	f00d ffbe 	bl	801139c <pvPortMalloc>
 8003420:	60f8      	str	r0, [r7, #12]
	if(template == NULL || extracted_feature == NULL){
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <check_voice+0x2a>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <check_voice+0x44>
		message = DISPLAY_ERROR_MEMORY;
 800342e:	2312      	movs	r3, #18
 8003430:	727b      	strb	r3, [r7, #9]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8003432:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <check_voice+0xc0>)
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	f107 0109 	add.w	r1, r7, #9
 800343a:	2300      	movs	r3, #0
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	f00c f86e 	bl	800f520 <xQueueGenericSend>
		while(1);
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <check_voice+0x40>
	}
	bool compare_res = false;
 8003448:	2300      	movs	r3, #0
 800344a:	72fb      	strb	r3, [r7, #11]
	bool is_recognized = false;
 800344c:	2300      	movs	r3, #0
 800344e:	72bb      	strb	r3, [r7, #10]
	uint8_t frame_counter = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 8003454:	2300      	movs	r3, #0
 8003456:	75bb      	strb	r3, [r7, #22]
 8003458:	e023      	b.n	80034a2 <check_voice+0x9e>
		//Leo cada bloque del archivo, y comparo bin a bin
		read_buffer_from_sd(template_path, template, FEATURE_SIZE, i * FEATURE_SIZE);
 800345a:	7dbb      	ldrb	r3, [r7, #22]
 800345c:	029b      	lsls	r3, r3, #10
 800345e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003462:	6939      	ldr	r1, [r7, #16]
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb41 	bl	8003aec <read_buffer_from_sd>
		read_buffer_from_sd(feature_path, extracted_feature, FEATURE_SIZE, i * FEATURE_SIZE);
 800346a:	7dbb      	ldrb	r3, [r7, #22]
 800346c:	029b      	lsls	r3, r3, #10
 800346e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	6838      	ldr	r0, [r7, #0]
 8003476:	f000 fb39 	bl	8003aec <read_buffer_from_sd>
		compare_res = compare_features(template, extracted_feature, FEATURE_SIZE);
 800347a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800347e:	68f9      	ldr	r1, [r7, #12]
 8003480:	6938      	ldr	r0, [r7, #16]
 8003482:	f000 f941 	bl	8003708 <compare_features>
 8003486:	4603      	mov	r3, r0
 8003488:	72fb      	strb	r3, [r7, #11]
		if(compare_res == false){
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <check_voice+0xa6>
			break;
		}
		frame_counter++;																	//Aumento el conteo de bloques correctos
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	3301      	adds	r3, #1
 800349a:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	3301      	adds	r3, #1
 80034a0:	75bb      	strb	r3, [r7, #22]
 80034a2:	7dbb      	ldrb	r3, [r7, #22]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d9d8      	bls.n	800345a <check_voice+0x56>
 80034a8:	e000      	b.n	80034ac <check_voice+0xa8>
			break;
 80034aa:	bf00      	nop
	}

	//Compruebo si hay NUM_OF_BLOCKS bloques correctos
	is_recognized = (frame_counter < NUM_OF_FRAMES) ? false : true;
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	bf8c      	ite	hi
 80034b2:	2301      	movhi	r3, #1
 80034b4:	2300      	movls	r3, #0
 80034b6:	72bb      	strb	r3, [r7, #10]
	return is_recognized;																	//Devuelvo estado del reconocimiento
 80034b8:	7abb      	ldrb	r3, [r7, #10]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	200002b8 	.word	0x200002b8

080034c8 <fir_filter>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño de ambos vectores.
 */
static void fir_filter(float32_t *psrc, float32_t *pdst, uint32_t size){
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
	size_t free_heap = xPortGetFreeHeapSize();
 80034d4:	f00e f894 	bl	8011600 <xPortGetFreeHeapSize>
 80034d8:	6178      	str	r0, [r7, #20]
	//Reservo memoria para el vector de estado que necesita la instancia del filtro FIR
	float32_t *fir_state = pvPortMalloc(FLOAT_SIZE_BYTES(STATE_SIZE));
 80034da:	f242 00c4 	movw	r0, #8388	@ 0x20c4
 80034de:	f00d ff5d 	bl	801139c <pvPortMalloc>
 80034e2:	6138      	str	r0, [r7, #16]
	if(fir_state == NULL){
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d013      	beq.n	8003512 <fir_filter+0x4a>
		//Manejar error
		return;
	}

	//Inicializo instancia de filtro fir predeterminada
	arm_fir_init_f32(&fir_instance, NUM_TAPS, (float32_t *)filter_taps, fir_state, size);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <fir_filter+0x54>)
 80034f2:	2132      	movs	r1, #50	@ 0x32
 80034f4:	480a      	ldr	r0, [pc, #40]	@ (8003520 <fir_filter+0x58>)
 80034f6:	f00e ff2d 	bl	8012354 <arm_fir_init_f32>

	//Filtro la señal
	arm_fir_f32(&fir_instance, psrc, pdst, size);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	4807      	ldr	r0, [pc, #28]	@ (8003520 <fir_filter+0x58>)
 8003502:	f00e ff39 	bl	8012378 <arm_fir_f32>

	//Libero memoria utilizada
	vPortFree(fir_state);
 8003506:	6938      	ldr	r0, [r7, #16]
 8003508:	f00e f816 	bl	8011538 <vPortFree>
	fir_state = NULL;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
	return;
 8003510:	e000      	b.n	8003514 <fir_filter+0x4c>
		return;
 8003512:	bf00      	nop
}
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	08018464 	.word	0x08018464
 8003520:	20000728 	.word	0x20000728

08003524 <hamming_window>:
 *
 * @param psrc Puntero al vector float32_t
 * @param size Tamaño del vector.
 */

static void hamming_window(float32_t *psrc, uint32_t size){
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]

	// Constantes para la ventana de hamming
	const float32_t alpha = 0.54f;
 800352e:	4b21      	ldr	r3, [pc, #132]	@ (80035b4 <hamming_window+0x90>)
 8003530:	613b      	str	r3, [r7, #16]
	const float32_t beta = 0.46f;
 8003532:	4b21      	ldr	r3, [pc, #132]	@ (80035b8 <hamming_window+0x94>)
 8003534:	60fb      	str	r3, [r7, #12]
	float32_t hamming_coeff;

	for(uint32_t i = 0; i < size; i++){
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	e033      	b.n	80035a4 <hamming_window+0x80>
		// Calculo el coeficiente de hamming para la muestra actual
		hamming_coeff = alpha - beta * arm_cos_f32((2.0f * PI * i) / (size - 1));
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003546:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80035bc <hamming_window+0x98>
 800354a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	3b01      	subs	r3, #1
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800355e:	eeb0 0a66 	vmov.f32	s0, s13
 8003562:	f00f fa55 	bl	8012a10 <arm_cos_f32>
 8003566:	eeb0 7a40 	vmov.f32	s14, s0
 800356a:	edd7 7a03 	vldr	s15, [r7, #12]
 800356e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003572:	ed97 7a04 	vldr	s14, [r7, #16]
 8003576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Aplico coeficiente de hamming a la muestra de la señal
		psrc[i] *= hamming_coeff;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	ed93 7a00 	vldr	s14, [r3]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	edd7 7a02 	vldr	s15, [r7, #8]
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < size; i++){
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d3c7      	bcc.n	800353c <hamming_window+0x18>
	}
	return;
 80035ac:	bf00      	nop
}
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	3f0a3d71 	.word	0x3f0a3d71
 80035b8:	3eeb851f 	.word	0x3eeb851f
 80035bc:	40c90fdb 	.word	0x40c90fdb

080035c0 <calculate_fft>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño de ambos vectores.
 */
static void calculate_fft(float32_t *psrc, float32_t *pdst, uint32_t size){
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	//Inicializo instancia de fft
	arm_rfft_fast_init_f32(&fft_instance, size);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	4806      	ldr	r0, [pc, #24]	@ (80035ec <calculate_fft+0x2c>)
 80035d4:	f00e f9cc 	bl	8011970 <arm_rfft_fast_init_f32>

	/*Calculo la fft*/
	arm_rfft_fast_f32(&fft_instance, psrc, pdst, 0);					//El cero indica que se hace transformada, no antitransformada
 80035d8:	2300      	movs	r3, #0
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	4803      	ldr	r0, [pc, #12]	@ (80035ec <calculate_fft+0x2c>)
 80035e0:	f00e fa4a 	bl	8011a78 <arm_rfft_fast_f32>
	return;
 80035e4:	bf00      	nop
}
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000734 	.word	0x20000734

080035f0 <normalize_array>:
 *
 * @param psrc Puntero al vector float32_t.
 * @param size Tamaño del vector.
 */

static void normalize_array(float32_t *psrc, uint32_t size){
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
	float32_t min_val, max_val;
	uint32_t min_index, max_index;
	float32_t range;
	/*Encuentro el maximo y el minimo del array*/
	arm_min_f32(psrc, size, &min_val, &min_index);
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	f107 0214 	add.w	r2, r7, #20
 8003602:	6839      	ldr	r1, [r7, #0]
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f00e f8e3 	bl	80117d0 <arm_min_f32>
	arm_max_f32(psrc, size, &max_val, &max_index);
 800360a:	f107 0308 	add.w	r3, r7, #8
 800360e:	f107 0210 	add.w	r2, r7, #16
 8003612:	6839      	ldr	r1, [r7, #0]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f00e f943 	bl	80118a0 <arm_max_f32>
	/*Calculo el rango*/
	range = max_val - min_val;
 800361a:	ed97 7a04 	vldr	s14, [r7, #16]
 800361e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003626:	edc7 7a06 	vstr	s15, [r7, #24]
	/*Normalizo el array*/
	for(size_t i = 0; i < size; i++){
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	e016      	b.n	800365e <normalize_array+0x6e>
		psrc[i] = (psrc[i] - min_val) / range;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4413      	add	r3, r2
 8003638:	ed93 7a00 	vldr	s14, [r3]
 800363c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003640:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	4413      	add	r3, r2
 800364c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003654:	edc3 7a00 	vstr	s15, [r3]
	for(size_t i = 0; i < size; i++){
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	3301      	adds	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	69fa      	ldr	r2, [r7, #28]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d3e4      	bcc.n	8003630 <normalize_array+0x40>
	}
	return;
 8003666:	bf00      	nop
}
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <get_fft_norm_mag>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño del vector pdst.
 */
static void get_fft_norm_mag(float32_t *psrc, float32_t *pdst, uint32_t size){
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	607a      	str	r2, [r7, #4]
	/*Se tienen en cuenta la cantidad de numeros complejos, no de elementos en p_src*/
	/*Calculo la magnitud de la fft*/
	arm_cmplx_mag_f32(psrc, pdst, size);
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f00f f8de 	bl	8012840 <arm_cmplx_mag_f32>

	/*Normalizo*/
	normalize_array(pdst, size);
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	68b8      	ldr	r0, [r7, #8]
 8003688:	f7ff ffb2 	bl	80035f0 <normalize_array>
	return;
 800368c:	bf00      	nop
}
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <process_frame>:
 *
 * @param psrc Puntero al vector float32_t de origen.
 * @param pdst Puntero al vector float32_t de destino.
 * @param size Tamaño del vector psrc.
 */
void process_frame(float32_t *psrc, float32_t *pdst, uint32_t size){
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	//Reservo memoria para salida filtrada
	float32_t *filtered = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f00d fe79 	bl	801139c <pvPortMalloc>
 80036aa:	6178      	str	r0, [r7, #20]
	if(filtered == NULL){
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d025      	beq.n	80036fe <process_frame+0x6a>
		//Manejar error
		return;
	}

	//Filtro la señal
	fir_filter(psrc, filtered, size);
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6979      	ldr	r1, [r7, #20]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff ff06 	bl	80034c8 <fir_filter>

	//Aplico ventana de hamming al vector
	hamming_window(filtered, size);
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	6978      	ldr	r0, [r7, #20]
 80036c0:	f7ff ff30 	bl	8003524 <hamming_window>

	/*Reservo memoria para la salida de FFT y calculo la fft. Libero memoria de salida filtrada*/
	float32_t *fft_output = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f00d fe67 	bl	801139c <pvPortMalloc>
 80036ce:	6138      	str	r0, [r7, #16]
	calculate_fft(filtered, fft_output, size);
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6939      	ldr	r1, [r7, #16]
 80036d4:	6978      	ldr	r0, [r7, #20]
 80036d6:	f7ff ff73 	bl	80035c0 <calculate_fft>
	vPortFree(filtered);
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f00d ff2c 	bl	8011538 <vPortFree>
	filtered = NULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]

	/*Calculo la magnitud de la fft y libero la memoria ocupada por la fft.*/
	get_fft_norm_mag(fft_output, pdst, size / 2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	461a      	mov	r2, r3
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	6938      	ldr	r0, [r7, #16]
 80036ee:	f7ff ffbe 	bl	800366e <get_fft_norm_mag>
	vPortFree(fft_output);
 80036f2:	6938      	ldr	r0, [r7, #16]
 80036f4:	f00d ff20 	bl	8011538 <vPortFree>
	fft_output = NULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
	return;
 80036fc:	e000      	b.n	8003700 <process_frame+0x6c>
		return;
 80036fe:	bf00      	nop
}
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <compare_features>:
 * @param template Puntero al template con los features guardados de antemano.
 * @param target Puntero al vector con los features obtenidos de la voz actual.
 * @param size Tamaño de los vectores template y target.
 * @return comp_state Estado de la comparacion de features.
 */
bool compare_features(float32_t *template, float32_t *target, uint32_t size){
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
	uint32_t accepted_bins = 0;										//Bins dentro del threshold
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
	float32_t accepted_bins_ratio;									//Proporcion de bins aceptados con respecto al total
	float32_t *diff = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4618      	mov	r0, r3
 800371e:	f00d fe3d 	bl	801139c <pvPortMalloc>
 8003722:	61f8      	str	r0, [r7, #28]
	float32_t *abs_diff = pvPortMalloc(FLOAT_SIZE_BYTES(size));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4618      	mov	r0, r3
 800372a:	f00d fe37 	bl	801139c <pvPortMalloc>
 800372e:	61b8      	str	r0, [r7, #24]
	bool comp_state;												//Estado de comparacion de los features

	//Resto bin a bin los features y calculo el valor absoluto
	arm_sub_f32(template, target, diff, size);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f00f f9aa 	bl	8012a90 <arm_sub_f32>
	arm_abs_f32(diff, abs_diff, size);
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	69b9      	ldr	r1, [r7, #24]
 8003740:	69f8      	ldr	r0, [r7, #28]
 8003742:	f00f fa67 	bl	8012c14 <arm_abs_f32>

	//Cuento cuantos bins estan por debajo del threshold
	for(uint32_t i = 0; i < size; i++){
 8003746:	2300      	movs	r3, #0
 8003748:	623b      	str	r3, [r7, #32]
 800374a:	e012      	b.n	8003772 <compare_features+0x6a>
		if(abs_diff[i] < DIF_THRESHOLD){
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80037c4 <compare_features+0xbc>
 800375c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003764:	d502      	bpl.n	800376c <compare_features+0x64>
			accepted_bins++;
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	3301      	adds	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
	for(uint32_t i = 0; i < size; i++){
 800376c:	6a3b      	ldr	r3, [r7, #32]
 800376e:	3301      	adds	r3, #1
 8003770:	623b      	str	r3, [r7, #32]
 8003772:	6a3a      	ldr	r2, [r7, #32]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3e8      	bcc.n	800374c <compare_features+0x44>
		}
	}

	/*Libero la memoria utilizada*/
	vPortFree(diff);
 800377a:	69f8      	ldr	r0, [r7, #28]
 800377c:	f00d fedc 	bl	8011538 <vPortFree>
	vPortFree(abs_diff);
 8003780:	69b8      	ldr	r0, [r7, #24]
 8003782:	f00d fed9 	bl	8011538 <vPortFree>

	//Calculo el ratio de bins aceptados
	accepted_bins_ratio = ((float32_t) accepted_bins) / size;
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800379a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800379e:	edc7 7a05 	vstr	s15, [r7, #20]

	//Verifico si el ratio de bins aceptados es mayor al threshold BIN_RATIO_THRESHOLD
	comp_state = (accepted_bins_ratio >= BIN_RATIO_THRESHOLD) ? true : false;
 80037a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037a6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80037c8 <compare_features+0xc0>
 80037aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b2:	bfac      	ite	ge
 80037b4:	2301      	movge	r3, #1
 80037b6:	2300      	movlt	r3, #0
 80037b8:	74fb      	strb	r3, [r7, #19]
	return comp_state;
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3728      	adds	r7, #40	@ 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	3e0f5c29 	.word	0x3e0f5c29
 80037c8:	3f7851ec 	.word	0x3f7851ec

080037cc <send_uart>:

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC


void send_uart(char *string){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7fc fd6d 	bl	80002b4 <strlen>
 80037da:	4603      	mov	r3, r0
 80037dc:	b29a      	uxth	r2, r3
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4803      	ldr	r0, [pc, #12]	@ (80037f4 <send_uart+0x28>)
 80037e6:	f005 fa53 	bl	8008c90 <HAL_UART_Transmit>
	return;
 80037ea:	bf00      	nop
}
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	2000026c 	.word	0x2000026c

080037f8 <mount_sd>:
		send_uart(str);
	}
	return;
}

FRESULT mount_sd(char* path){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8003800:	2201      	movs	r2, #1
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	480a      	ldr	r0, [pc, #40]	@ (8003830 <mount_sd+0x38>)
 8003806:	f009 fc4f 	bl	800d0a8 <f_mount>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <mount_sd+0x3c>)
 8003810:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003812:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <mount_sd+0x3c>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d004      	beq.n	8003824 <mount_sd+0x2c>
		send_uart("Error al montar la tarjeta SD!!!\n");
 800381a:	4807      	ldr	r0, [pc, #28]	@ (8003838 <mount_sd+0x40>)
 800381c:	f7ff ffd6 	bl	80037cc <send_uart>
		while(1);
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <mount_sd+0x28>
	}
	return fresult;
 8003824:	4b03      	ldr	r3, [pc, #12]	@ (8003834 <mount_sd+0x3c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	2000074c 	.word	0x2000074c
 8003834:	20002908 	.word	0x20002908
 8003838:	08014838 	.word	0x08014838

0800383c <unmount_sd>:

FRESULT unmount_sd(char* path){
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8003844:	2201      	movs	r2, #1
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	2000      	movs	r0, #0
 800384a:	f009 fc2d 	bl	800d0a8 <f_mount>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <unmount_sd+0x38>)
 8003854:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003856:	4b07      	ldr	r3, [pc, #28]	@ (8003874 <unmount_sd+0x38>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <unmount_sd+0x2c>
		send_uart("Error al desmontar la tarjeta SD!!!\n");
 800385e:	4806      	ldr	r0, [pc, #24]	@ (8003878 <unmount_sd+0x3c>)
 8003860:	f7ff ffb4 	bl	80037cc <send_uart>
		while(1);
 8003864:	bf00      	nop
 8003866:	e7fd      	b.n	8003864 <unmount_sd+0x28>
	}
	return fresult;
 8003868:	4b02      	ldr	r3, [pc, #8]	@ (8003874 <unmount_sd+0x38>)
 800386a:	781b      	ldrb	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20002908 	.word	0x20002908
 8003878:	0801485c 	.word	0x0801485c

0800387c <check_if_file_exists>:


FRESULT check_if_file_exists(char *filename){
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	fresult = f_stat(filename, &fno);
 8003884:	4909      	ldr	r1, [pc, #36]	@ (80038ac <check_if_file_exists+0x30>)
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f00b f8e9 	bl	800ea5e <f_stat>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	4b07      	ldr	r3, [pc, #28]	@ (80038b0 <check_if_file_exists+0x34>)
 8003892:	701a      	strb	r2, [r3, #0]
	return (fresult != FR_OK) ? FR_NO_FILE : fresult;
 8003894:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <check_if_file_exists+0x34>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <check_if_file_exists+0x24>
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <check_if_file_exists+0x26>
 80038a0:	2304      	movs	r3, #4
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200027e8 	.word	0x200027e8
 80038b0:	20002908 	.word	0x20002908

080038b4 <create_file>:


FRESULT create_file(char *filename, char *header){
 80038b4:	b580      	push	{r7, lr}
 80038b6:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038c0:	f843 0c5c 	str.w	r0, [r3, #-92]
 80038c4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038c8:	f843 1c60 	str.w	r1, [r3, #-96]
	FIL fil;
	/*Creo el archivo*/
	fresult = f_open(&fil, filename, FA_CREATE_ALWAYS | FA_WRITE);
 80038cc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038d0:	4619      	mov	r1, r3
 80038d2:	f107 0320 	add.w	r3, r7, #32
 80038d6:	3b18      	subs	r3, #24
 80038d8:	220a      	movs	r2, #10
 80038da:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 80038de:	4618      	mov	r0, r3
 80038e0:	f009 fc46 	bl	800d170 <f_open>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <create_file+0xd0>)
 80038ea:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80038ec:	4b25      	ldr	r3, [pc, #148]	@ (8003984 <create_file+0xd0>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <create_file+0x46>
		return fresult;
 80038f4:	4b23      	ldr	r3, [pc, #140]	@ (8003984 <create_file+0xd0>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	e03f      	b.n	800397a <create_file+0xc6>
	}
	/*Escribo el header*/
	fresult = f_write(&fil, header, strlen(header), &bw);
 80038fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80038fe:	f853 0c60 	ldr.w	r0, [r3, #-96]
 8003902:	f7fc fcd7 	bl	80002b4 <strlen>
 8003906:	4602      	mov	r2, r0
 8003908:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800390c:	4619      	mov	r1, r3
 800390e:	f107 0020 	add.w	r0, r7, #32
 8003912:	3818      	subs	r0, #24
 8003914:	4b1c      	ldr	r3, [pc, #112]	@ (8003988 <create_file+0xd4>)
 8003916:	f851 1c60 	ldr.w	r1, [r1, #-96]
 800391a:	f00a f8e5 	bl	800dae8 <f_write>
 800391e:	4603      	mov	r3, r0
 8003920:	461a      	mov	r2, r3
 8003922:	4b18      	ldr	r3, [pc, #96]	@ (8003984 <create_file+0xd0>)
 8003924:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < strlen(header)){
 8003926:	4b17      	ldr	r3, [pc, #92]	@ (8003984 <create_file+0xd0>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <create_file+0x90>
 800392e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003932:	f853 0c60 	ldr.w	r0, [r3, #-96]
 8003936:	f7fc fcbd 	bl	80002b4 <strlen>
 800393a:	4602      	mov	r2, r0
 800393c:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <create_file+0xd4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d90e      	bls.n	8003962 <create_file+0xae>
		f_close(&fil);
 8003944:	f107 0320 	add.w	r3, r7, #32
 8003948:	3b18      	subs	r3, #24
 800394a:	4618      	mov	r0, r3
 800394c:	f00a fc15 	bl	800e17a <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;
 8003950:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <create_file+0xd0>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <create_file+0xaa>
 8003958:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <create_file+0xd0>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	e00d      	b.n	800397a <create_file+0xc6>
 800395e:	2301      	movs	r3, #1
 8003960:	e00b      	b.n	800397a <create_file+0xc6>
	}
	/*Cierro el archivo*/
	fresult = f_close(&fil);
 8003962:	f107 0320 	add.w	r3, r7, #32
 8003966:	3b18      	subs	r3, #24
 8003968:	4618      	mov	r0, r3
 800396a:	f00a fc06 	bl	800e17a <f_close>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	4b04      	ldr	r3, [pc, #16]	@ (8003984 <create_file+0xd0>)
 8003974:	701a      	strb	r2, [r3, #0]
	return fresult;
 8003976:	4b03      	ldr	r3, [pc, #12]	@ (8003984 <create_file+0xd0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
}
 800397a:	4618      	mov	r0, r3
 800397c:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20002908 	.word	0x20002908
 8003988:	20002910 	.word	0x20002910

0800398c <get_time_from_rtc>:

void get_time_from_rtc(char *rtc_lecture){
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	@ 0x30
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
	/***Esta funcion devuelve en formato string la fecha y hora actual usando el RTC***/
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;
	char *time = pvPortMalloc(15 * sizeof(char));
 8003994:	200f      	movs	r0, #15
 8003996:	f00d fd01 	bl	801139c <pvPortMalloc>
 800399a:	6278      	str	r0, [r7, #36]	@ 0x24
	/*Obtengo el tiempo actual*/
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800399c:	f107 0310 	add.w	r3, r7, #16
 80039a0:	2200      	movs	r2, #0
 80039a2:	4619      	mov	r1, r3
 80039a4:	4817      	ldr	r0, [pc, #92]	@ (8003a04 <get_time_from_rtc+0x78>)
 80039a6:	f003 fe6c 	bl	8007682 <HAL_RTC_GetTime>
	/*Obtengo la fecha actual*/
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80039aa:	f107 030c 	add.w	r3, r7, #12
 80039ae:	2200      	movs	r2, #0
 80039b0:	4619      	mov	r1, r3
 80039b2:	4814      	ldr	r0, [pc, #80]	@ (8003a04 <get_time_from_rtc+0x78>)
 80039b4:	f003 ff47 	bl	8007846 <HAL_RTC_GetDate>
	/*Guardo fecha y hora en los buffers correspondientes*/
	snprintf(time, 15, "%02d:%02d:%02d ", currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 80039b8:	7c3b      	ldrb	r3, [r7, #16]
 80039ba:	4619      	mov	r1, r3
 80039bc:	7c7b      	ldrb	r3, [r7, #17]
 80039be:	7cba      	ldrb	r2, [r7, #18]
 80039c0:	9201      	str	r2, [sp, #4]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	460b      	mov	r3, r1
 80039c6:	4a10      	ldr	r2, [pc, #64]	@ (8003a08 <get_time_from_rtc+0x7c>)
 80039c8:	210f      	movs	r1, #15
 80039ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039cc:	f00f fcfc 	bl	80133c8 <sniprintf>
	snprintf(rtc_lecture, 15, "%02d-%02d-%2d ", currentDate.Date, currentDate.Month, 2000 + currentDate.Year);
 80039d0:	7bbb      	ldrb	r3, [r7, #14]
 80039d2:	4619      	mov	r1, r3
 80039d4:	7b7b      	ldrb	r3, [r7, #13]
 80039d6:	461a      	mov	r2, r3
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	9200      	str	r2, [sp, #0]
 80039e2:	460b      	mov	r3, r1
 80039e4:	4a09      	ldr	r2, [pc, #36]	@ (8003a0c <get_time_from_rtc+0x80>)
 80039e6:	210f      	movs	r1, #15
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f00f fced 	bl	80133c8 <sniprintf>
	strcat(rtc_lecture, time);
 80039ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f00f fd82 	bl	80134fa <strcat>
	vPortFree(time);
 80039f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039f8:	f00d fd9e 	bl	8011538 <vPortFree>
	return;
 80039fc:	bf00      	nop
}
 80039fe:	3728      	adds	r7, #40	@ 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	200001ac 	.word	0x200001ac
 8003a08:	08014884 	.word	0x08014884
 8003a0c:	08014894 	.word	0x08014894

08003a10 <save_buffer_on_sd>:
	//Cierro el archivo
	fresult = f_close(&fil);
	return FR_OK;
}

FRESULT save_buffer_on_sd(char *filename, float *buffer, size_t size){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a1e:	f843 0c5c 	str.w	r0, [r3, #-92]
 8003a22:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a26:	f843 1c60 	str.w	r1, [r3, #-96]
 8003a2a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a2e:	f843 2c64 	str.w	r2, [r3, #-100]
	 * Es importante que el archivo sea .bin, ya que es más conveniente guardar
	 * los datos en este formato (ocupa menos espacio y es más directa la escritura).
	 */
	//Abro el archivo
	FIL fil;
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);						//Se abre con append por si es necesario seguir escribiendo desde el final
 8003a32:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a36:	4619      	mov	r1, r3
 8003a38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a3c:	3b18      	subs	r3, #24
 8003a3e:	2232      	movs	r2, #50	@ 0x32
 8003a40:	f851 1c5c 	ldr.w	r1, [r1, #-92]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f009 fb93 	bl	800d170 <f_open>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <save_buffer_on_sd+0xd4>)
 8003a50:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003a52:	4b24      	ldr	r3, [pc, #144]	@ (8003ae4 <save_buffer_on_sd+0xd4>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <save_buffer_on_sd+0x50>
		return fresult;
 8003a5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ae4 <save_buffer_on_sd+0xd4>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	e03a      	b.n	8003ad6 <save_buffer_on_sd+0xc6>
	}
	//Escribo los datos del buffer en el archivo
	fresult = f_write(&fil, buffer, FLOAT_SIZE_BYTES(size), &bw);
 8003a60:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a64:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8003a68:	009a      	lsls	r2, r3, #2
 8003a6a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003a74:	3818      	subs	r0, #24
 8003a76:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae8 <save_buffer_on_sd+0xd8>)
 8003a78:	f851 1c60 	ldr.w	r1, [r1, #-96]
 8003a7c:	f00a f834 	bl	800dae8 <f_write>
 8003a80:	4603      	mov	r3, r0
 8003a82:	461a      	mov	r2, r3
 8003a84:	4b17      	ldr	r3, [pc, #92]	@ (8003ae4 <save_buffer_on_sd+0xd4>)
 8003a86:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK || bw < FLOAT_SIZE_BYTES(size)){
 8003a88:	4b16      	ldr	r3, [pc, #88]	@ (8003ae4 <save_buffer_on_sd+0xd4>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d108      	bne.n	8003aa2 <save_buffer_on_sd+0x92>
 8003a90:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003a94:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8003a98:	009a      	lsls	r2, r3, #2
 8003a9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <save_buffer_on_sd+0xd8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d90e      	bls.n	8003ac0 <save_buffer_on_sd+0xb0>
		f_close(&fil);																	//Frente a un error cierro el archivo y salgo de la funcion
 8003aa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003aa6:	3b18      	subs	r3, #24
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f00a fb66 	bl	800e17a <f_close>
		return (fresult != FR_OK) ? fresult : FR_DISK_ERR;								//Si se escribieron bytes de menos, devuelve FR_DISK_ERR
 8003aae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae4 <save_buffer_on_sd+0xd4>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <save_buffer_on_sd+0xac>
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <save_buffer_on_sd+0xd4>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	e00c      	b.n	8003ad6 <save_buffer_on_sd+0xc6>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e00a      	b.n	8003ad6 <save_buffer_on_sd+0xc6>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8003ac0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ac4:	3b18      	subs	r3, #24
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f00a fb57 	bl	800e17a <f_close>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	4b04      	ldr	r3, [pc, #16]	@ (8003ae4 <save_buffer_on_sd+0xd4>)
 8003ad2:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20002908 	.word	0x20002908
 8003ae8:	20002910 	.word	0x20002910

08003aec <read_buffer_from_sd>:

FRESULT read_buffer_from_sd(char *filename, float *buffer, size_t size, uint32_t current_pos){
 8003aec:	b5b0      	push	{r4, r5, r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
	 * La funcion esta pensada para leer de a bloques iguales, no guarda la ultima
	 * posicion del puntero de lectura, se debe llevar cuenta externamente.
	 */

	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 8003afa:	2201      	movs	r2, #1
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	4823      	ldr	r0, [pc, #140]	@ (8003b8c <read_buffer_from_sd+0xa0>)
 8003b00:	f009 fb36 	bl	800d170 <f_open>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b21      	ldr	r3, [pc, #132]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b0a:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003b0c:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <read_buffer_from_sd+0x2e>
		return fresult;
 8003b14:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	e033      	b.n	8003b82 <read_buffer_from_sd+0x96>
	}

	//Posiciono el puntero de lectura en el archivo
	fresult = f_lseek(&fil, current_pos);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	461c      	mov	r4, r3
 8003b20:	4615      	mov	r5, r2
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	4819      	ldr	r0, [pc, #100]	@ (8003b8c <read_buffer_from_sd+0xa0>)
 8003b28:	f00a fb56 	bl	800e1d8 <f_lseek>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b32:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003b34:	4b16      	ldr	r3, [pc, #88]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <read_buffer_from_sd+0x5c>
		f_close(&fil);
 8003b3c:	4813      	ldr	r0, [pc, #76]	@ (8003b8c <read_buffer_from_sd+0xa0>)
 8003b3e:	f00a fb1c 	bl	800e17a <f_close>
		return fresult;
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	e01c      	b.n	8003b82 <read_buffer_from_sd+0x96>
	}

	//Leo el bloque de tamaño size desde el archivo
	fresult = f_read(&fil, buffer, FLOAT_SIZE_BYTES(size), &br);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <read_buffer_from_sd+0xa8>)
 8003b4e:	68b9      	ldr	r1, [r7, #8]
 8003b50:	480e      	ldr	r0, [pc, #56]	@ (8003b8c <read_buffer_from_sd+0xa0>)
 8003b52:	f009 fe02 	bl	800d75a <f_read>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b5c:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <read_buffer_from_sd+0x86>
		f_close(&fil);
 8003b66:	4809      	ldr	r0, [pc, #36]	@ (8003b8c <read_buffer_from_sd+0xa0>)
 8003b68:	f00a fb07 	bl	800e17a <f_close>
		return fresult;
 8003b6c:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	e007      	b.n	8003b82 <read_buffer_from_sd+0x96>
	}

	//Cierro el archivo
	fresult = f_close(&fil);
 8003b72:	4806      	ldr	r0, [pc, #24]	@ (8003b8c <read_buffer_from_sd+0xa0>)
 8003b74:	f00a fb01 	bl	800e17a <f_close>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <read_buffer_from_sd+0xa4>)
 8003b7e:	701a      	strb	r2, [r3, #0]
	return FR_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20001790 	.word	0x20001790
 8003b90:	20002908 	.word	0x20002908
 8003b94:	2000290c 	.word	0x2000290c

08003b98 <write_entry>:



FRESULT write_entry(char *filename, char *entry){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003ba6:	f843 0c64 	str.w	r0, [r3, #-100]
 8003baa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003bae:	f843 1c68 	str.w	r1, [r3, #-104]
	FIL fil;
	/*Abro el archivo en modo append*/
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 8003bb2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f107 0308 	add.w	r3, r7, #8
 8003bbc:	2232      	movs	r2, #50	@ 0x32
 8003bbe:	f851 1c64 	ldr.w	r1, [r1, #-100]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f009 fad4 	bl	800d170 <f_open>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c84 <write_entry+0xec>)
 8003bce:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK){
 8003bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c84 <write_entry+0xec>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d14c      	bne.n	8003c72 <write_entry+0xda>
		char *buffer = pvPortMalloc(70 * sizeof(char));
 8003bd8:	2046      	movs	r0, #70	@ 0x46
 8003bda:	f00d fbdf 	bl	801139c <pvPortMalloc>
 8003bde:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003be2:	f103 0304 	add.w	r3, r3, #4
 8003be6:	6018      	str	r0, [r3, #0]
		snprintf(buffer, 70, "%s\n", entry);
 8003be8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003bec:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8003bf0:	4a25      	ldr	r2, [pc, #148]	@ (8003c88 <write_entry+0xf0>)
 8003bf2:	2146      	movs	r1, #70	@ 0x46
 8003bf4:	f507 5083 	add.w	r0, r7, #4192	@ 0x1060
 8003bf8:	f100 0004 	add.w	r0, r0, #4
 8003bfc:	6800      	ldr	r0, [r0, #0]
 8003bfe:	f00f fbe3 	bl	80133c8 <sniprintf>
		/*Escribo la entrada en el archivo*/
		fresult = f_write(&fil, buffer, strlen(buffer), &bw);
 8003c02:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c06:	f103 0304 	add.w	r3, r3, #4
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	f7fc fb52 	bl	80002b4 <strlen>
 8003c10:	4602      	mov	r2, r0
 8003c12:	f107 0008 	add.w	r0, r7, #8
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <write_entry+0xf4>)
 8003c18:	f507 5183 	add.w	r1, r7, #4192	@ 0x1060
 8003c1c:	f101 0104 	add.w	r1, r1, #4
 8003c20:	6809      	ldr	r1, [r1, #0]
 8003c22:	f009 ff61 	bl	800dae8 <f_write>
 8003c26:	4603      	mov	r3, r0
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4b16      	ldr	r3, [pc, #88]	@ (8003c84 <write_entry+0xec>)
 8003c2c:	701a      	strb	r2, [r3, #0]
		if(fresult != FR_OK || bw < strlen(buffer)){
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <write_entry+0xec>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <write_entry+0xb6>
 8003c36:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c3a:	f103 0304 	add.w	r3, r3, #4
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	f7fc fb38 	bl	80002b4 <strlen>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b11      	ldr	r3, [pc, #68]	@ (8003c8c <write_entry+0xf4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d901      	bls.n	8003c52 <write_entry+0xba>
			return FR_DISK_ERR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e011      	b.n	8003c76 <write_entry+0xde>
		}
		vPortFree(buffer);
 8003c52:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8003c56:	f103 0304 	add.w	r3, r3, #4
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f00d fc6c 	bl	8011538 <vPortFree>
		fresult = f_close(&fil);
 8003c60:	f107 0308 	add.w	r3, r7, #8
 8003c64:	4618      	mov	r0, r3
 8003c66:	f00a fa88 	bl	800e17a <f_close>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <write_entry+0xec>)
 8003c70:	701a      	strb	r2, [r3, #0]
	}
	return fresult;
 8003c72:	4b04      	ldr	r3, [pc, #16]	@ (8003c84 <write_entry+0xec>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20002908 	.word	0x20002908
 8003c88:	080148a4 	.word	0x080148a4
 8003c8c:	20002910 	.word	0x20002910

08003c90 <search_user>:

FRESULT search_user(char *filename, char *user_key, char *user_name){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b0a6      	sub	sp, #152	@ 0x98
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
	char line[LINE_BUFFER_SIZE];
	char *line_key;
	char *line_user;
	//Abro el archivo
	fresult = f_open(&fil, filename, FA_READ);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	482f      	ldr	r0, [pc, #188]	@ (8003d60 <search_user+0xd0>)
 8003ca2:	f009 fa65 	bl	800d170 <f_open>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b2e      	ldr	r3, [pc, #184]	@ (8003d64 <search_user+0xd4>)
 8003cac:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8003cae:	4b2d      	ldr	r3, [pc, #180]	@ (8003d64 <search_user+0xd4>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <search_user+0x2c>
		return fresult;
 8003cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d64 <search_user+0xd4>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	e04c      	b.n	8003d56 <search_user+0xc6>
	}

	//Descarto el header
	f_gets(line, LINE_BUFFER_SIZE, &fil);
 8003cbc:	f107 0310 	add.w	r3, r7, #16
 8003cc0:	4a27      	ldr	r2, [pc, #156]	@ (8003d60 <search_user+0xd0>)
 8003cc2:	2180      	movs	r1, #128	@ 0x80
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f00b f82c 	bl	800ed22 <f_gets>

	//Busco el usuario asociado linea por linea
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 8003cca:	e032      	b.n	8003d32 <search_user+0xa2>
		line_key = strtok(line, " ");								//Separo la clave
 8003ccc:	f107 0310 	add.w	r3, r7, #16
 8003cd0:	4925      	ldr	r1, [pc, #148]	@ (8003d68 <search_user+0xd8>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f00f fc34 	bl	8013540 <strtok>
 8003cd8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
		line_user = strtok(NULL, "\n");								//Separo el usuario
 8003cdc:	4923      	ldr	r1, [pc, #140]	@ (8003d6c <search_user+0xdc>)
 8003cde:	2000      	movs	r0, #0
 8003ce0:	f00f fc2e 	bl	8013540 <strtok>
 8003ce4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

		//Comparo clave
		if(line_key && strcmp(line_key, user_key) == 0){
 8003ce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01a      	beq.n	8003d26 <search_user+0x96>
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003cf6:	f7fc fad3 	bl	80002a0 <strcmp>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d112      	bne.n	8003d26 <search_user+0x96>
			if(line_user){
 8003d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00e      	beq.n	8003d26 <search_user+0x96>
				strncpy(user_name, line_user, USER_STR_SIZE - 1);
 8003d08:	2231      	movs	r2, #49	@ 0x31
 8003d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f00f fc02 	bl	8013518 <strncpy>
				user_name[USER_STR_SIZE - 1] = '\0';				//Me aseguro de que haya terminacion nula
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3331      	adds	r3, #49	@ 0x31
 8003d18:	2200      	movs	r2, #0
 8003d1a:	701a      	strb	r2, [r3, #0]
				f_close(&fil);
 8003d1c:	4810      	ldr	r0, [pc, #64]	@ (8003d60 <search_user+0xd0>)
 8003d1e:	f00a fa2c 	bl	800e17a <f_close>
				return FR_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e017      	b.n	8003d56 <search_user+0xc6>
			}
		}

		//Limpio la linea para que no se acumulen caracteres de palabras largas
		clear_buffer(line, LINE_BUFFER_SIZE);
 8003d26:	f107 0310 	add.w	r3, r7, #16
 8003d2a:	2180      	movs	r1, #128	@ 0x80
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fcc7 	bl	80046c0 <clear_buffer>
	while(f_gets(line, LINE_BUFFER_SIZE, &fil) != NULL){
 8003d32:	f107 0310 	add.w	r3, r7, #16
 8003d36:	4a0a      	ldr	r2, [pc, #40]	@ (8003d60 <search_user+0xd0>)
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f00a fff1 	bl	800ed22 <f_gets>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1c2      	bne.n	8003ccc <search_user+0x3c>
	}

	//Si se llego al final sin encontrar el usuario, devuelve mensaje de error
	fresult = f_close(&fil);
 8003d46:	4806      	ldr	r0, [pc, #24]	@ (8003d60 <search_user+0xd0>)
 8003d48:	f00a fa17 	bl	800e17a <f_close>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <search_user+0xd4>)
 8003d52:	701a      	strb	r2, [r3, #0]
	return FR_NO_FILE;												//Devuelve FR_NO_FILE si no se encuentra el usuario
 8003d54:	2304      	movs	r3, #4
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3798      	adds	r7, #152	@ 0x98
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20001790 	.word	0x20001790
 8003d64:	20002908 	.word	0x20002908
 8003d68:	080148a8 	.word	0x080148a8
 8003d6c:	080148ac 	.word	0x080148ac

08003d70 <initialize_files>:

/*Este archivo contiene las funciones principales de la tarea SD*/
#define NO_DATABASE FR_NO_FILE
#define NO_REGISTER FR_DISK_ERR

FRESULT initialize_files(void){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
	FRESULT res;

	//Chequeo que exista el archivo con la database de usuarios
	res = check_if_file_exists("usuarios.txt");
 8003d76:	4811      	ldr	r0, [pc, #68]	@ (8003dbc <initialize_files+0x4c>)
 8003d78:	f7ff fd80 	bl	800387c <check_if_file_exists>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	71fb      	strb	r3, [r7, #7]
	if(res != FR_OK){
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <initialize_files+0x1a>
		return NO_DATABASE;
 8003d86:	2304      	movs	r3, #4
 8003d88:	e013      	b.n	8003db2 <initialize_files+0x42>
	}

	//Chequeo si existe el archivo de registro de accesos. Si no existe, lo creo
	res = check_if_file_exists("registro.txt");
 8003d8a:	480d      	ldr	r0, [pc, #52]	@ (8003dc0 <initialize_files+0x50>)
 8003d8c:	f7ff fd76 	bl	800387c <check_if_file_exists>
 8003d90:	4603      	mov	r3, r0
 8003d92:	71fb      	strb	r3, [r7, #7]
	if(res != FR_OK){
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <initialize_files+0x40>
		res = create_file("registro.txt", "Fecha Usuario Estado\n");
 8003d9a:	490a      	ldr	r1, [pc, #40]	@ (8003dc4 <initialize_files+0x54>)
 8003d9c:	4808      	ldr	r0, [pc, #32]	@ (8003dc0 <initialize_files+0x50>)
 8003d9e:	f7ff fd89 	bl	80038b4 <create_file>
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
		if(res != FR_OK){
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <initialize_files+0x40>
			return NO_REGISTER;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <initialize_files+0x42>
		}
	}
	return FR_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	080148b0 	.word	0x080148b0
 8003dc0:	080148c0 	.word	0x080148c0
 8003dc4:	080148d0 	.word	0x080148d0

08003dc8 <initialize_sd_and_verify_files>:

bool initialize_sd_and_verify_files(display_message_t *error_message){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	FRESULT res;

	res = mount_sd("");
 8003dd0:	4817      	ldr	r0, [pc, #92]	@ (8003e30 <initialize_sd_and_verify_files+0x68>)
 8003dd2:	f7ff fd11 	bl	80037f8 <mount_sd>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK){
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <initialize_sd_and_verify_files+0x22>
		*error_message = DISPLAY_ERROR_SD;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2211      	movs	r2, #17
 8003de4:	701a      	strb	r2, [r3, #0]
		return false;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e01d      	b.n	8003e26 <initialize_sd_and_verify_files+0x5e>
	}

	res = initialize_files();
 8003dea:	f7ff ffc1 	bl	8003d70 <initialize_files>
 8003dee:	4603      	mov	r3, r0
 8003df0:	73fb      	strb	r3, [r7, #15]
	if(res != FR_OK){
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d015      	beq.n	8003e24 <initialize_sd_and_verify_files+0x5c>
		switch(res){
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d005      	beq.n	8003e0a <initialize_sd_and_verify_files+0x42>
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d107      	bne.n	8003e12 <initialize_sd_and_verify_files+0x4a>
		case NO_DATABASE:
			*error_message = DISPLAY_DATABASE_NOT_FOUND;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	220f      	movs	r2, #15
 8003e06:	701a      	strb	r2, [r3, #0]
			break;
 8003e08:	e007      	b.n	8003e1a <initialize_sd_and_verify_files+0x52>
		case NO_REGISTER:
			*error_message = DISPLAY_REGISTER_NOT_CREATED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	701a      	strb	r2, [r3, #0]
			break;
 8003e10:	e003      	b.n	8003e1a <initialize_sd_and_verify_files+0x52>
		default:
			*error_message = DISPLAY_ERROR_UNKNOWN;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2213      	movs	r2, #19
 8003e16:	701a      	strb	r2, [r3, #0]
			break;
 8003e18:	bf00      	nop
		}
		unmount_sd("");
 8003e1a:	4805      	ldr	r0, [pc, #20]	@ (8003e30 <initialize_sd_and_verify_files+0x68>)
 8003e1c:	f7ff fd0e 	bl	800383c <unmount_sd>
		return false;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e000      	b.n	8003e26 <initialize_sd_and_verify_files+0x5e>
	}

	//No desmontar si se encontraron los archivos necesarios
	return true;
 8003e24:	2301      	movs	r3, #1
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	080148e8 	.word	0x080148e8

08003e34 <process_user_key>:

bool process_user_key(char *user_key, char *user_name, display_message_t *error_message){
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
	FRESULT res = search_user("usuarios.txt", user_key, user_name);
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	480a      	ldr	r0, [pc, #40]	@ (8003e70 <process_user_key+0x3c>)
 8003e46:	f7ff ff23 	bl	8003c90 <search_user>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	75fb      	strb	r3, [r7, #23]
	if(res != FR_OK){
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <process_user_key+0x2a>
		*error_message = DISPLAY_USER_NOT_FOUND;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2205      	movs	r2, #5
 8003e58:	701a      	strb	r2, [r3, #0]
		return false;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e004      	b.n	8003e68 <process_user_key+0x34>
	}
	clear_char(user_name, '\r');										//Limpio '\r' agregado por windows
 8003e5e:	210d      	movs	r1, #13
 8003e60:	68b8      	ldr	r0, [r7, #8]
 8003e62:	f000 fc4b 	bl	80046fc <clear_char>
	return true;
 8003e66:	2301      	movs	r3, #1
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	080148b0 	.word	0x080148b0

08003e74 <build_entry_message>:

void build_entry_message(char *entry, char *user_name, const char *status){
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
	get_time_from_rtc(entry);						//Obtengo fecha y hora
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7ff fd83 	bl	800398c <get_time_from_rtc>
	if(user_name != NULL){
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <build_entry_message+0x22>
		strcat(entry, user_name);					//Concateno nombre de usuario
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f00f fb33 	bl	80134fa <strcat>
 8003e94:	e00d      	b.n	8003eb2 <build_entry_message+0x3e>
	}
	else{
		strcat(entry, "Desconocido");				//Si no existe, concateno desconocido
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7fc fa0c 	bl	80002b4 <strlen>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a13      	ldr	r2, [pc, #76]	@ (8003ef4 <build_entry_message+0x80>)
 8003ea6:	461c      	mov	r4, r3
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003eac:	6020      	str	r0, [r4, #0]
 8003eae:	6061      	str	r1, [r4, #4]
 8003eb0:	60a2      	str	r2, [r4, #8]
	}
	strcat(entry, " ");
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7fc f9fe 	bl	80002b4 <strlen>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	490d      	ldr	r1, [pc, #52]	@ (8003ef8 <build_entry_message+0x84>)
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	8013      	strh	r3, [r2, #0]
	strcat(entry, status);							//Concateno estado de acceso
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f00f fb14 	bl	80134fa <strcat>
	strcat(entry, "\n");
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7fc f9ee 	bl	80002b4 <strlen>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	4906      	ldr	r1, [pc, #24]	@ (8003efc <build_entry_message+0x88>)
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	8013      	strh	r3, [r2, #0]
	return;
 8003eea:	bf00      	nop
}
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	080148ec 	.word	0x080148ec
 8003ef8:	080148f8 	.word	0x080148f8
 8003efc:	080148fc 	.word	0x080148fc

08003f00 <recognize_user_voice>:

bool recognize_user_voice(char *template_path, char *user_name, display_message_t *message){
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
	size_t free_heap = xPortGetFreeHeapSize();
 8003f0c:	f00d fb78 	bl	8011600 <xPortGetFreeHeapSize>
 8003f10:	61f8      	str	r0, [r7, #28]
	uint16_t *voice_buf = pvPortMalloc(U16_SIZE_BYTES(AUDIO_BUFFER_SIZE));
 8003f12:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8003f16:	f00d fa41 	bl	801139c <pvPortMalloc>
 8003f1a:	61b8      	str	r0, [r7, #24]
	display_message_t aux;
	char *entry;
	if(voice_buf == NULL){
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d104      	bne.n	8003f2c <recognize_user_voice+0x2c>
		*message = DISPLAY_ERROR_MEMORY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2212      	movs	r2, #18
 8003f26:	701a      	strb	r2, [r3, #0]
		return false;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e065      	b.n	8003ff8 <recognize_user_voice+0xf8>
	}

	//Envio mensaje a display para indicar que comienza el reconocimiento de voz
	aux = DISPLAY_START_SPEECH_REC;
 8003f2c:	2306      	movs	r3, #6
 8003f2e:	74fb      	strb	r3, [r7, #19]
	xQueueSend(display_queue, &aux, portMAX_DELAY);									//Envio mensaje al display
 8003f30:	4b33      	ldr	r3, [pc, #204]	@ (8004000 <recognize_user_voice+0x100>)
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	f107 0113 	add.w	r1, r7, #19
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	f00b faef 	bl	800f520 <xQueueGenericSend>
	xSemaphoreTake(sd_display_sync, portMAX_DELAY);									//Bloqueo la tarea hasta que el display me devuelva el semaforo
 8003f42:	4b30      	ldr	r3, [pc, #192]	@ (8004004 <recognize_user_voice+0x104>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f00b fd5c 	bl	800fa08 <xQueueSemaphoreTake>


	capture_voice(voice_buf, AUDIO_BUFFER_SIZE);
 8003f50:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8003f54:	69b8      	ldr	r0, [r7, #24]
 8003f56:	f7ff f94f 	bl	80031f8 <capture_voice>

	//Almaceno la voz en la SD
	aux = DISPLAY_PROCESSING_DATA;
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	74fb      	strb	r3, [r7, #19]
	xQueueSend(display_queue, &aux, portMAX_DELAY);									//Envio mensaje indicando que se esta procesando la voz
 8003f5e:	4b28      	ldr	r3, [pc, #160]	@ (8004000 <recognize_user_voice+0x100>)
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	f107 0113 	add.w	r1, r7, #19
 8003f66:	2300      	movs	r3, #0
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6c:	f00b fad8 	bl	800f520 <xQueueGenericSend>
	store_voice(voice_buf, AUDIO_BUFFER_SIZE, FRAME_SIZE, "current_voice.bin");
 8003f70:	4b25      	ldr	r3, [pc, #148]	@ (8004008 <recognize_user_voice+0x108>)
 8003f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f76:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 8003f7a:	69b8      	ldr	r0, [r7, #24]
 8003f7c:	f7ff f9a2 	bl	80032c4 <store_voice>
	vPortFree(voice_buf);
 8003f80:	69b8      	ldr	r0, [r7, #24]
 8003f82:	f00d fad9 	bl	8011538 <vPortFree>
	free_heap = xPortGetFreeHeapSize();
 8003f86:	f00d fb3b 	bl	8011600 <xPortGetFreeHeapSize>
 8003f8a:	61f8      	str	r0, [r7, #28]
	//Extraigo los features de la voz
	entry = pvPortMalloc(CHAR_SIZE_BYTES(ENTRY_STR_SIZE));
 8003f8c:	203c      	movs	r0, #60	@ 0x3c
 8003f8e:	f00d fa05 	bl	801139c <pvPortMalloc>
 8003f92:	6178      	str	r0, [r7, #20]
	extract_and_save_features("current_voice.bin", "current_feature.bin");
 8003f94:	491d      	ldr	r1, [pc, #116]	@ (800400c <recognize_user_voice+0x10c>)
 8003f96:	481c      	ldr	r0, [pc, #112]	@ (8004008 <recognize_user_voice+0x108>)
 8003f98:	f7ff f9e6 	bl	8003368 <extract_and_save_features>
	if(check_voice(template_path, "current_feature.bin")){
 8003f9c:	491b      	ldr	r1, [pc, #108]	@ (800400c <recognize_user_voice+0x10c>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f7ff fa30 	bl	8003404 <check_voice>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d013      	beq.n	8003fd2 <recognize_user_voice+0xd2>
		build_entry_message(entry, user_name, "Concedido\n");
 8003faa:	4a19      	ldr	r2, [pc, #100]	@ (8004010 <recognize_user_voice+0x110>)
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f7ff ff60 	bl	8003e74 <build_entry_message>
		write_entry("registro.txt", entry);
 8003fb4:	6979      	ldr	r1, [r7, #20]
 8003fb6:	4817      	ldr	r0, [pc, #92]	@ (8004014 <recognize_user_voice+0x114>)
 8003fb8:	f7ff fdee 	bl	8003b98 <write_entry>
		*message = DISPLAY_VOICE_RECOGNIZED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2207      	movs	r2, #7
 8003fc0:	701a      	strb	r2, [r3, #0]
		vPortFree(entry);
 8003fc2:	6978      	ldr	r0, [r7, #20]
 8003fc4:	f00d fab8 	bl	8011538 <vPortFree>
		f_unlink("current_feature.bin");
 8003fc8:	4810      	ldr	r0, [pc, #64]	@ (800400c <recognize_user_voice+0x10c>)
 8003fca:	f00a fda2 	bl	800eb12 <f_unlink>
		return true;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e012      	b.n	8003ff8 <recognize_user_voice+0xf8>
	}
	else{
		build_entry_message(entry, user_name, "Denegado");
 8003fd2:	4a11      	ldr	r2, [pc, #68]	@ (8004018 <recognize_user_voice+0x118>)
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7ff ff4c 	bl	8003e74 <build_entry_message>
		write_entry("registro.txt", entry);
 8003fdc:	6979      	ldr	r1, [r7, #20]
 8003fde:	480d      	ldr	r0, [pc, #52]	@ (8004014 <recognize_user_voice+0x114>)
 8003fe0:	f7ff fdda 	bl	8003b98 <write_entry>
		*message = DISPLAY_VOICE_NOT_RECOGNIZED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	701a      	strb	r2, [r3, #0]
		vPortFree(entry);
 8003fea:	6978      	ldr	r0, [r7, #20]
 8003fec:	f00d faa4 	bl	8011538 <vPortFree>
		f_unlink("current_feature.bin");
 8003ff0:	4806      	ldr	r0, [pc, #24]	@ (800400c <recognize_user_voice+0x10c>)
 8003ff2:	f00a fd8e 	bl	800eb12 <f_unlink>
		return false;
 8003ff6:	2300      	movs	r3, #0
	}
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	200002b8 	.word	0x200002b8
 8004004:	200002c0 	.word	0x200002c0
 8004008:	08014900 	.word	0x08014900
 800400c:	08014914 	.word	0x08014914
 8004010:	08014928 	.word	0x08014928
 8004014:	080148c0 	.word	0x080148c0
 8004018:	08014934 	.word	0x08014934

0800401c <generate_template>:

bool generate_template(void){
 800401c:	b580      	push	{r7, lr}
 800401e:	b09e      	sub	sp, #120	@ 0x78
 8004020:	af00      	add	r7, sp, #0
	display_message_t message;
	float *template, *my_feature;
	char filenames[NUM_OF_VOICES][20] = {"feature_1.bin", "feature_2.bin", "feature_3.bin", "feature_4.bin", "feature_5.bin"};
 8004022:	4a79      	ldr	r2, [pc, #484]	@ (8004208 <generate_template+0x1ec>)
 8004024:	463b      	mov	r3, r7
 8004026:	4611      	mov	r1, r2
 8004028:	2264      	movs	r2, #100	@ 0x64
 800402a:	4618      	mov	r0, r3
 800402c:	f00f fb57 	bl	80136de <memcpy>


	//Reservo memoria para el buffer que contiene la captura de voz
	uint16_t *voice_buf = pvPortMalloc(U16_SIZE_BYTES(AUDIO_BUFFER_SIZE));
 8004030:	f44f 4010 	mov.w	r0, #36864	@ 0x9000
 8004034:	f00d f9b2 	bl	801139c <pvPortMalloc>
 8004038:	6738      	str	r0, [r7, #112]	@ 0x70
	if(voice_buf == NULL){
 800403a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10d      	bne.n	800405c <generate_template+0x40>
		//Manejar el error
		message = DISPLAY_ERROR_MEMORY;
 8004040:	2312      	movs	r3, #18
 8004042:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8004046:	4b71      	ldr	r3, [pc, #452]	@ (800420c <generate_template+0x1f0>)
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 800404e:	2300      	movs	r3, #0
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	f00b fa64 	bl	800f520 <xQueueGenericSend>
		while(1);
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <generate_template+0x3c>
		return false;
	}
	//Capturo las voces y las guardo en la tarjeta SD
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 800405c:	2300      	movs	r3, #0
 800405e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004062:	e03c      	b.n	80040de <generate_template+0xc2>
		//Envio mensaje de inicio de reconocimiento al display
		message = DISPLAY_START_SPEECH_REC;
 8004064:	2306      	movs	r3, #6
 8004066:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(display_queue, &message, portMAX_DELAY);
 800406a:	4b68      	ldr	r3, [pc, #416]	@ (800420c <generate_template+0x1f0>)
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 8004072:	2300      	movs	r3, #0
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	f00b fa52 	bl	800f520 <xQueueGenericSend>
		xSemaphoreTake(sd_display_sync, portMAX_DELAY);							//Bloqueo la tarea hasta que el display me devuelva el semaforo
 800407c:	4b64      	ldr	r3, [pc, #400]	@ (8004210 <generate_template+0x1f4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f04f 31ff 	mov.w	r1, #4294967295
 8004084:	4618      	mov	r0, r3
 8004086:	f00b fcbf 	bl	800fa08 <xQueueSemaphoreTake>

		//Capturo voces y las almaceno en la SD
		capture_voice(voice_buf, AUDIO_BUFFER_SIZE);
 800408a:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 800408e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8004090:	f7ff f8b2 	bl	80031f8 <capture_voice>
		message = DISPLAY_PROCESSING_DATA;
 8004094:	230c      	movs	r3, #12
 8004096:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(display_queue, &message, portMAX_DELAY);
 800409a:	4b5c      	ldr	r3, [pc, #368]	@ (800420c <generate_template+0x1f0>)
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 80040a2:	2300      	movs	r3, #0
 80040a4:	f04f 32ff 	mov.w	r2, #4294967295
 80040a8:	f00b fa3a 	bl	800f520 <xQueueGenericSend>
		store_voice(voice_buf, AUDIO_BUFFER_SIZE, FRAME_SIZE, "current_voice.bin");
 80040ac:	4b59      	ldr	r3, [pc, #356]	@ (8004214 <generate_template+0x1f8>)
 80040ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040b2:	f44f 4190 	mov.w	r1, #18432	@ 0x4800
 80040b6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80040b8:	f7ff f904 	bl	80032c4 <store_voice>
		extract_and_save_features("current_voice.bin", filenames[i]);											//Borro el archivo current_voice.bin
 80040bc:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80040c0:	4639      	mov	r1, r7
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	4619      	mov	r1, r3
 80040ce:	4851      	ldr	r0, [pc, #324]	@ (8004214 <generate_template+0x1f8>)
 80040d0:	f7ff f94a 	bl	8003368 <extract_and_save_features>
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 80040d4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80040d8:	3301      	adds	r3, #1
 80040da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80040de:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d9be      	bls.n	8004064 <generate_template+0x48>
	}

	//Libero memoria utilizada para capturar voz
	vPortFree(voice_buf);
 80040e6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80040e8:	f00d fa26 	bl	8011538 <vPortFree>

	//Reservo memoria utilizada para crear el template
	template = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 80040ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80040f0:	f00d f954 	bl	801139c <pvPortMalloc>
 80040f4:	66f8      	str	r0, [r7, #108]	@ 0x6c
	my_feature = pvPortMalloc(FLOAT_SIZE_BYTES(FEATURE_SIZE));
 80040f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80040fa:	f00d f94f 	bl	801139c <pvPortMalloc>
 80040fe:	66b8      	str	r0, [r7, #104]	@ 0x68
	if(template == NULL || my_feature == NULL){
 8004100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <generate_template+0xf0>
 8004106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <generate_template+0x10c>
		//Manejar error
		message = DISPLAY_ERROR_MEMORY;
 800410c:	2312      	movs	r3, #18
 800410e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		xQueueSend(display_queue, &message, portMAX_DELAY);
 8004112:	4b3e      	ldr	r3, [pc, #248]	@ (800420c <generate_template+0x1f0>)
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 800411a:	2300      	movs	r3, #0
 800411c:	f04f 32ff 	mov.w	r2, #4294967295
 8004120:	f00b f9fe 	bl	800f520 <xQueueGenericSend>
		while(1);
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <generate_template+0x108>
		return false;
	}

	arm_fill_f32(0.0f, template, FEATURE_SIZE);
 8004128:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800412c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800412e:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8004218 <generate_template+0x1fc>
 8004132:	f00d fb2f 	bl	8011794 <arm_fill_f32>

	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 8004136:	2300      	movs	r3, #0
 8004138:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800413c:	e03d      	b.n	80041ba <generate_template+0x19e>
		//En cada iteracion se procesa el bloque i del feature_{j+1}.bin
		for(uint8_t j = 0; j < NUM_OF_VOICES; j++){
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8004144:	e01b      	b.n	800417e <generate_template+0x162>
			read_buffer_from_sd(filenames[j], my_feature, FEATURE_SIZE, i * FEATURE_SIZE);
 8004146:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 800414a:	4639      	mov	r1, r7
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	18c8      	adds	r0, r1, r3
 8004156:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800415a:	029b      	lsls	r3, r3, #10
 800415c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004160:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004162:	f7ff fcc3 	bl	8003aec <read_buffer_from_sd>
			arm_add_f32(template, my_feature, template, FEATURE_SIZE);
 8004166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800416a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800416c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800416e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004170:	f00e fd0a 	bl	8012b88 <arm_add_f32>
		for(uint8_t j = 0; j < NUM_OF_VOICES; j++){
 8004174:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8004178:	3301      	adds	r3, #1
 800417a:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800417e:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8004182:	2b04      	cmp	r3, #4
 8004184:	d9df      	bls.n	8004146 <generate_template+0x12a>
		}

		//Escalo para obtener el promedio
		arm_scale_f32(template, 1.0f / NUM_OF_VOICES, template, FEATURE_SIZE);
 8004186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800418a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800418c:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800421c <generate_template+0x200>
 8004190:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004192:	f00e fcc3 	bl	8012b1c <arm_scale_f32>
		save_buffer_on_sd("current_template.bin", template, FEATURE_SIZE);
 8004196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800419a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800419c:	4820      	ldr	r0, [pc, #128]	@ (8004220 <generate_template+0x204>)
 800419e:	f7ff fc37 	bl	8003a10 <save_buffer_on_sd>
		arm_fill_f32(0.0f, template, FEATURE_SIZE);
 80041a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041a8:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8004218 <generate_template+0x1fc>
 80041ac:	f00d faf2 	bl	8011794 <arm_fill_f32>
	for(uint8_t i = 0; i < NUM_OF_FRAMES; i++){
 80041b0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80041b4:	3301      	adds	r3, #1
 80041b6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80041ba:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d9bd      	bls.n	800413e <generate_template+0x122>
	}

	//Borro los archivos generados para crear el template
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 80041c2:	2300      	movs	r3, #0
 80041c4:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80041c8:	e00f      	b.n	80041ea <generate_template+0x1ce>
		f_unlink(filenames[i]);
 80041ca:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 80041ce:	4639      	mov	r1, r7
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	4618      	mov	r0, r3
 80041dc:	f00a fc99 	bl	800eb12 <f_unlink>
	for(uint8_t i = 0; i < NUM_OF_VOICES; i++){
 80041e0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80041e4:	3301      	adds	r3, #1
 80041e6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 80041ea:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d9eb      	bls.n	80041ca <generate_template+0x1ae>
	}

	//Libero memoria de template y my_feature
	vPortFree(template);
 80041f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041f4:	f00d f9a0 	bl	8011538 <vPortFree>
	vPortFree(my_feature);
 80041f8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80041fa:	f00d f99d 	bl	8011538 <vPortFree>
	return true;
 80041fe:	2301      	movs	r3, #1
}
 8004200:	4618      	mov	r0, r3
 8004202:	3778      	adds	r7, #120	@ 0x78
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	08014958 	.word	0x08014958
 800420c:	200002b8 	.word	0x200002b8
 8004210:	200002c0 	.word	0x200002c0
 8004214:	08014900 	.word	0x08014900
 8004218:	00000000 	.word	0x00000000
 800421c:	3e4ccccd 	.word	0x3e4ccccd
 8004220:	08014940 	.word	0x08014940

08004224 <display_task>:
	}
}

#elif DISPLAY_FUNCTION == 1
//Version funcional que utiliza el control de acceso
void display_task(void *pvParameters){
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	display_message_t message;
	uint8_t counter = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]
	display_init();						//Inicializo el display
 8004230:	f7fe fa57 	bl	80026e2 <display_init>
	display_start_msg();				//Muestro mensaje inicial
 8004234:	f7fe faf2 	bl	800281c <display_start_msg>
	while(1){
		xQueueReceive(display_queue, &message, portMAX_DELAY);
 8004238:	4b65      	ldr	r3, [pc, #404]	@ (80043d0 <display_task+0x1ac>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f107 010e 	add.w	r1, r7, #14
 8004240:	f04f 32ff 	mov.w	r2, #4294967295
 8004244:	4618      	mov	r0, r3
 8004246:	f00b fafd 	bl	800f844 <xQueueReceive>
		switch(message){
 800424a:	7bbb      	ldrb	r3, [r7, #14]
 800424c:	3b01      	subs	r3, #1
 800424e:	2b11      	cmp	r3, #17
 8004250:	d8f2      	bhi.n	8004238 <display_task+0x14>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <display_task+0x34>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	080042a1 	.word	0x080042a1
 800425c:	080042a7 	.word	0x080042a7
 8004260:	080042bf 	.word	0x080042bf
 8004264:	080042d7 	.word	0x080042d7
 8004268:	080042e9 	.word	0x080042e9
 800426c:	080042fb 	.word	0x080042fb
 8004270:	0800431f 	.word	0x0800431f
 8004274:	0800433b 	.word	0x0800433b
 8004278:	0800435d 	.word	0x0800435d
 800427c:	0800436b 	.word	0x0800436b
 8004280:	0800437d 	.word	0x0800437d
 8004284:	08004357 	.word	0x08004357
 8004288:	080043a3 	.word	0x080043a3
 800428c:	08004395 	.word	0x08004395
 8004290:	0800438f 	.word	0x0800438f
 8004294:	08004239 	.word	0x08004239
 8004298:	08004239 	.word	0x08004239
 800429c:	080043bf 	.word	0x080043bf
		case DISPLAY_SCREEN_WELCOME:
			display_start_msg();
 80042a0:	f7fe fabc 	bl	800281c <display_start_msg>
			break;
 80042a4:	e092      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_ENTER_DIGIT:
			if(counter < SEQUENCE_LENGTH){
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	f200 808b 	bhi.w	80043c4 <display_task+0x1a0>
				counter++;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	3301      	adds	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fe fae6 	bl	8002888 <display_sequence_entry_msg>
			}
			break;
 80042bc:	e082      	b.n	80043c4 <display_task+0x1a0>
		case DISPLAY_ERASE_DIGIT:
			if(counter > 0){
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8081 	beq.w	80043c8 <display_task+0x1a4>
				counter--;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
				display_sequence_entry_msg(counter);
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe fada 	bl	8002888 <display_sequence_entry_msg>
			}
			break;
 80042d4:	e078      	b.n	80043c8 <display_task+0x1a4>
		case DISPLAY_USER_FOUND:
			display_user_found_msg();
 80042d6:	f7fe fb35 	bl	8002944 <display_user_found_msg>
			counter = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 80042de:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80042e2:	f00b ffc9 	bl	8010278 <vTaskDelay>
			break;
 80042e6:	e071      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_USER_NOT_FOUND:
			display_user_not_found_msg();
 80042e8:	f7fe fb36 	bl	8002958 <display_user_not_found_msg>
			counter = 0;							//Reinicio el contador
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 80042f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80042f4:	f00b ffc0 	bl	8010278 <vTaskDelay>
			break;
 80042f8:	e068      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_START_SPEECH_REC:
			display_start_voice_recognition_msg();
 80042fa:	f7fe fb37 	bl	800296c <display_start_voice_recognition_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80042fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004302:	f00b ffb9 	bl	8010278 <vTaskDelay>
			countdown_msg();
 8004306:	f7fe fb3b 	bl	8002980 <countdown_msg>
			display_capturing_voice_msg();
 800430a:	f7fe fb8f 	bl	8002a2c <display_capturing_voice_msg>
			xSemaphoreGive(sd_display_sync);
 800430e:	4b31      	ldr	r3, [pc, #196]	@ (80043d4 <display_task+0x1b0>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	2200      	movs	r2, #0
 8004316:	2100      	movs	r1, #0
 8004318:	f00b f902 	bl	800f520 <xQueueGenericSend>
			break;
 800431c:	e056      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_VOICE_RECOGNIZED:
			display_recognized_voice_msg();
 800431e:	f7fe fb8f 	bl	8002a40 <display_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004322:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004326:	f00b ffa7 	bl	8010278 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 800432a:	4b2a      	ldr	r3, [pc, #168]	@ (80043d4 <display_task+0x1b0>)
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	2200      	movs	r2, #0
 8004332:	2100      	movs	r1, #0
 8004334:	f00b f8f4 	bl	800f520 <xQueueGenericSend>
			break;
 8004338:	e048      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_VOICE_NOT_RECOGNIZED:
			display_not_recognized_voice_msg();
 800433a:	f7fe fb8b 	bl	8002a54 <display_not_recognized_voice_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 800433e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004342:	f00b ff99 	bl	8010278 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 8004346:	4b23      	ldr	r3, [pc, #140]	@ (80043d4 <display_task+0x1b0>)
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	f00b f8e6 	bl	800f520 <xQueueGenericSend>
			break;
 8004354:	e03a      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_PROCESSING_DATA:
			display_processing_data_msg();
 8004356:	f7fe fb87 	bl	8002a68 <display_processing_data_msg>
			//vTaskDelay(2000 / portTICK_RATE_MS);
			break;
 800435a:	e037      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_ACCESS_GRANTED:
			display_access_granted_msg();
 800435c:	f7fe fae8 	bl	8002930 <display_access_granted_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004360:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004364:	f00b ff88 	bl	8010278 <vTaskDelay>
			break;
 8004368:	e030      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_TIMEOUT_EVENT:
			display_timeout_msg();
 800436a:	f7fe facd 	bl	8002908 <display_timeout_msg>
			counter = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004372:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004376:	f00b ff7f 	bl	8010278 <vTaskDelay>
			break;
 800437a:	e027      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_INCOMPLETE_SEQUENCE_EVENT:
			display_incomplete_entry_msg();
 800437c:	f7fe face 	bl	800291c <display_incomplete_entry_msg>
			counter = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	73fb      	strb	r3, [r7, #15]
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004384:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004388:	f00b ff76 	bl	8010278 <vTaskDelay>
			break;
 800438c:	e01e      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_DATABASE_NOT_FOUND:
			display_missing_database_msg();
 800438e:	f7fe fb75 	bl	8002a7c <display_missing_database_msg>
			break;
 8004392:	e01b      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_TEMPLATE_NOT_FOUND:
			display_missing_template_msg();
 8004394:	f7fe fb7c 	bl	8002a90 <display_missing_template_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 8004398:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800439c:	f00b ff6c 	bl	8010278 <vTaskDelay>
			break;
 80043a0:	e014      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_TEMPLATE_SAVED:
			display_template_saved_msg();
 80043a2:	f7fe fb7f 	bl	8002aa4 <display_template_saved_msg>
			vTaskDelay(2000 / portTICK_RATE_MS);
 80043a6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80043aa:	f00b ff65 	bl	8010278 <vTaskDelay>
			xSemaphoreGive(sd_display_sync);
 80043ae:	4b09      	ldr	r3, [pc, #36]	@ (80043d4 <display_task+0x1b0>)
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	2300      	movs	r3, #0
 80043b4:	2200      	movs	r2, #0
 80043b6:	2100      	movs	r1, #0
 80043b8:	f00b f8b2 	bl	800f520 <xQueueGenericSend>
			break;
 80043bc:	e006      	b.n	80043cc <display_task+0x1a8>
		case DISPLAY_ERROR_MEMORY:
			display_missing_database_msg();
 80043be:	f7fe fb5d 	bl	8002a7c <display_missing_database_msg>
 80043c2:	e739      	b.n	8004238 <display_task+0x14>
			break;
 80043c4:	bf00      	nop
 80043c6:	e737      	b.n	8004238 <display_task+0x14>
			break;
 80043c8:	bf00      	nop
 80043ca:	e735      	b.n	8004238 <display_task+0x14>
		xQueueReceive(display_queue, &message, portMAX_DELAY);
 80043cc:	e734      	b.n	8004238 <display_task+0x14>
 80043ce:	bf00      	nop
 80043d0:	200002b8 	.word	0x200002b8
 80043d4:	200002c0 	.word	0x200002c0

080043d8 <keypad_task>:
#include "digit_handle_logic.h"
#include "keypad_functions.h"
/*================[Public Task]=====================*/
void keypad_task(void *pvParameters){
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	char input;
	char kp_buffer[SEQUENCE_LENGTH + 1] = {0};										//Son 7 elementos para incluir el caracter '\0'
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	f107 0310 	add.w	r3, r7, #16
 80043e8:	2100      	movs	r1, #0
 80043ea:	460a      	mov	r2, r1
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	460a      	mov	r2, r1
 80043f0:	709a      	strb	r2, [r3, #2]
	bool send_flag = false;
 80043f2:	2300      	movs	r3, #0
 80043f4:	72fb      	strb	r3, [r7, #11]
	display_message_t message;
	while(1){
		input = read_keypad();
 80043f6:	f7fe fe9d 	bl	8003134 <read_keypad>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75bb      	strb	r3, [r7, #22]
		message = handle_keypad_input(input, kp_buffer, &send_flag);
 80043fe:	f107 020b 	add.w	r2, r7, #11
 8004402:	f107 010c 	add.w	r1, r7, #12
 8004406:	7dbb      	ldrb	r3, [r7, #22]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe fd8d 	bl	8002f28 <handle_keypad_input>
 800440e:	4603      	mov	r3, r0
 8004410:	72bb      	strb	r3, [r7, #10]
		if(send_flag){
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01c      	beq.n	8004452 <keypad_task+0x7a>
			//Envio uno por uno los digitos obtenidos con el keypad a la tarea SD
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8004418:	2300      	movs	r3, #0
 800441a:	75fb      	strb	r3, [r7, #23]
 800441c:	e00d      	b.n	800443a <keypad_task+0x62>
				xQueueSend(sequence_queue, &kp_buffer[i], portMAX_DELAY);
 800441e:	4b13      	ldr	r3, [pc, #76]	@ (800446c <keypad_task+0x94>)
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	f107 020c 	add.w	r2, r7, #12
 8004428:	18d1      	adds	r1, r2, r3
 800442a:	2300      	movs	r3, #0
 800442c:	f04f 32ff 	mov.w	r2, #4294967295
 8004430:	f00b f876 	bl	800f520 <xQueueGenericSend>
			for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 8004434:	7dfb      	ldrb	r3, [r7, #23]
 8004436:	3301      	adds	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	2b06      	cmp	r3, #6
 800443e:	d9ee      	bls.n	800441e <keypad_task+0x46>
			}
			xSemaphoreTake(keypad_sd_sync, portMAX_DELAY);							//Espero que la tarea SD devuelva el semaforo
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <keypad_task+0x98>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f04f 31ff 	mov.w	r1, #4294967295
 8004448:	4618      	mov	r0, r3
 800444a:	f00b fadd 	bl	800fa08 <xQueueSemaphoreTake>

			//Reinicio el flag de envio
			send_flag = false;
 800444e:	2300      	movs	r3, #0
 8004450:	72fb      	strb	r3, [r7, #11]
		}
		//Envio el mensaje a la tarea display si no hay pantalla idle
		if(message != DISPLAY_IDLE){
 8004452:	7abb      	ldrb	r3, [r7, #10]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0ce      	beq.n	80043f6 <keypad_task+0x1e>
			xQueueSend(display_queue, &message, portMAX_DELAY);
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <keypad_task+0x9c>)
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	f107 010a 	add.w	r1, r7, #10
 8004460:	2300      	movs	r3, #0
 8004462:	f04f 32ff 	mov.w	r2, #4294967295
 8004466:	f00b f85b 	bl	800f520 <xQueueGenericSend>
		input = read_keypad();
 800446a:	e7c4      	b.n	80043f6 <keypad_task+0x1e>
 800446c:	200002b4 	.word	0x200002b4
 8004470:	200002bc 	.word	0x200002bc
 8004474:	200002b8 	.word	0x200002b8

08004478 <sd_task>:
/*================[Private defines]========================*/
#define CODE_VERSION 1

/*================[Public task]==========================*/
#if CODE_VERSION == 1
void sd_task(void *pvParameters){
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	char user_key_retrieved[SEQUENCE_LENGTH + 1];					//Para recibir los digitos desde el keypad
	char *template_path;											//Para guardar la direccion del template asociado al usuario
	char *user_name;												//Para guardar el nombre de usuario

	//Control inicial. Verifico existencia de archivos importantes
	if(!initialize_sd_and_verify_files(&message)){
 8004480:	f107 0313 	add.w	r3, r7, #19
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fc9f 	bl	8003dc8 <initialize_sd_and_verify_files>
 800448a:	4603      	mov	r3, r0
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <sd_task+0x34>
		//No se pudieron realizar las inicializaciones
		xQueueSend(display_queue, &message, portMAX_DELAY);			//Envio pantalla de error al display
 8004496:	4b84      	ldr	r3, [pc, #528]	@ (80046a8 <sd_task+0x230>)
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	f107 0113 	add.w	r1, r7, #19
 800449e:	2300      	movs	r3, #0
 80044a0:	f04f 32ff 	mov.w	r2, #4294967295
 80044a4:	f00b f83c 	bl	800f520 <xQueueGenericSend>
		while(1);													//Loop permanente. Resetear y solucionar el problema.
 80044a8:	bf00      	nop
 80044aa:	e7fd      	b.n	80044a8 <sd_task+0x30>
	}

	while(1){
		//Espero a que llegue la clave de usuario ingresada desde la tarea keypad
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80044ac:	2300      	movs	r3, #0
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e00d      	b.n	80044ce <sd_task+0x56>
			xQueueReceive(sequence_queue, &user_key_retrieved[i], portMAX_DELAY);
 80044b2:	4b7e      	ldr	r3, [pc, #504]	@ (80046ac <sd_task+0x234>)
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	7ffb      	ldrb	r3, [r7, #31]
 80044b8:	f107 020c 	add.w	r2, r7, #12
 80044bc:	4413      	add	r3, r2
 80044be:	f04f 32ff 	mov.w	r2, #4294967295
 80044c2:	4619      	mov	r1, r3
 80044c4:	f00b f9be 	bl	800f844 <xQueueReceive>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80044c8:	7ffb      	ldrb	r3, [r7, #31]
 80044ca:	3301      	adds	r3, #1
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	7ffb      	ldrb	r3, [r7, #31]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d9ee      	bls.n	80044b2 <sd_task+0x3a>
		}

		//Verifico si la clave es 000000. En cuyo caso se debe crear el template
		if(strcmp(user_key_retrieved, "000000") == 0){
 80044d4:	f107 030c 	add.w	r3, r7, #12
 80044d8:	4975      	ldr	r1, [pc, #468]	@ (80046b0 <sd_task+0x238>)
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fb fee0 	bl	80002a0 <strcmp>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d138      	bne.n	8004558 <sd_task+0xe0>
			if(generate_template()){
 80044e6:	f7ff fd99 	bl	800401c <generate_template>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d019      	beq.n	8004524 <sd_task+0xac>
				//Muestro mensaje en display indicando que se creo el template
				message = DISPLAY_TEMPLATE_SAVED;
 80044f0:	230d      	movs	r3, #13
 80044f2:	74fb      	strb	r3, [r7, #19]
				xQueueSend(display_queue, &message, portMAX_DELAY);
 80044f4:	4b6c      	ldr	r3, [pc, #432]	@ (80046a8 <sd_task+0x230>)
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	f107 0113 	add.w	r1, r7, #19
 80044fc:	2300      	movs	r3, #0
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004502:	f00b f80d 	bl	800f520 <xQueueGenericSend>
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 8004506:	4b6b      	ldr	r3, [pc, #428]	@ (80046b4 <sd_task+0x23c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f04f 31ff 	mov.w	r1, #4294967295
 800450e:	4618      	mov	r0, r3
 8004510:	f00b fa7a 	bl	800fa08 <xQueueSemaphoreTake>
				xSemaphoreGive(keypad_sd_sync);
 8004514:	4b68      	ldr	r3, [pc, #416]	@ (80046b8 <sd_task+0x240>)
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	2300      	movs	r3, #0
 800451a:	2200      	movs	r2, #0
 800451c:	2100      	movs	r1, #0
 800451e:	f00a ffff 	bl	800f520 <xQueueGenericSend>
				message = DISPLAY_TEMPLATE_NOT_FOUND;
				xQueueSend(display_queue, &message, portMAX_DELAY);
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
				xSemaphoreGive(keypad_sd_sync);
			}
			continue;
 8004522:	e0bf      	b.n	80046a4 <sd_task+0x22c>
				message = DISPLAY_TEMPLATE_NOT_FOUND;
 8004524:	230e      	movs	r3, #14
 8004526:	74fb      	strb	r3, [r7, #19]
				xQueueSend(display_queue, &message, portMAX_DELAY);
 8004528:	4b5f      	ldr	r3, [pc, #380]	@ (80046a8 <sd_task+0x230>)
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	f107 0113 	add.w	r1, r7, #19
 8004530:	2300      	movs	r3, #0
 8004532:	f04f 32ff 	mov.w	r2, #4294967295
 8004536:	f00a fff3 	bl	800f520 <xQueueGenericSend>
				xSemaphoreTake(sd_display_sync, portMAX_DELAY);
 800453a:	4b5e      	ldr	r3, [pc, #376]	@ (80046b4 <sd_task+0x23c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f04f 31ff 	mov.w	r1, #4294967295
 8004542:	4618      	mov	r0, r3
 8004544:	f00b fa60 	bl	800fa08 <xQueueSemaphoreTake>
				xSemaphoreGive(keypad_sd_sync);
 8004548:	4b5b      	ldr	r3, [pc, #364]	@ (80046b8 <sd_task+0x240>)
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	2300      	movs	r3, #0
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	f00a ffe5 	bl	800f520 <xQueueGenericSend>
			continue;
 8004556:	e0a5      	b.n	80046a4 <sd_task+0x22c>
		}

		//Continuo con flujo normal de ejecucion

		//Reservo memoria para almacenar usuario
		user_name = pvPortMalloc(USER_STR_SIZE * sizeof(char));
 8004558:	2032      	movs	r0, #50	@ 0x32
 800455a:	f00c ff1f 	bl	801139c <pvPortMalloc>
 800455e:	61b8      	str	r0, [r7, #24]
		if(user_name == NULL){
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10b      	bne.n	800457e <sd_task+0x106>
			message = DISPLAY_ERROR_MEMORY;
 8004566:	2312      	movs	r3, #18
 8004568:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 800456a:	4b4f      	ldr	r3, [pc, #316]	@ (80046a8 <sd_task+0x230>)
 800456c:	6818      	ldr	r0, [r3, #0]
 800456e:	f107 0113 	add.w	r1, r7, #19
 8004572:	2300      	movs	r3, #0
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	f00a ffd2 	bl	800f520 <xQueueGenericSend>
			continue;
 800457c:	e092      	b.n	80046a4 <sd_task+0x22c>
		}

		//Chequeo existencia de usuario
		if(!process_user_key(user_key_retrieved, user_name, &message)){
 800457e:	f107 0213 	add.w	r2, r7, #19
 8004582:	f107 030c 	add.w	r3, r7, #12
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fc53 	bl	8003e34 <process_user_key>
 800458e:	4603      	mov	r3, r0
 8004590:	f083 0301 	eor.w	r3, r3, #1
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d013      	beq.n	80045c2 <sd_task+0x14a>
			//Usuario no existe. Enviar mensaje al display
			xQueueSend(display_queue, &message, portMAX_DELAY);
 800459a:	4b43      	ldr	r3, [pc, #268]	@ (80046a8 <sd_task+0x230>)
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	f107 0113 	add.w	r1, r7, #19
 80045a2:	2300      	movs	r3, #0
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295
 80045a8:	f00a ffba 	bl	800f520 <xQueueGenericSend>
			vPortFree(user_name);
 80045ac:	69b8      	ldr	r0, [r7, #24]
 80045ae:	f00c ffc3 	bl	8011538 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 80045b2:	4b41      	ldr	r3, [pc, #260]	@ (80046b8 <sd_task+0x240>)
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	2300      	movs	r3, #0
 80045b8:	2200      	movs	r2, #0
 80045ba:	2100      	movs	r1, #0
 80045bc:	f00a ffb0 	bl	800f520 <xQueueGenericSend>
			continue;
 80045c0:	e070      	b.n	80046a4 <sd_task+0x22c>
		}

		//Indico que se encontro el usuario
		message = DISPLAY_USER_FOUND;
 80045c2:	2304      	movs	r3, #4
 80045c4:	74fb      	strb	r3, [r7, #19]
		xQueueSend(display_queue, &message, portMAX_DELAY);
 80045c6:	4b38      	ldr	r3, [pc, #224]	@ (80046a8 <sd_task+0x230>)
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	f107 0113 	add.w	r1, r7, #19
 80045ce:	2300      	movs	r3, #0
 80045d0:	f04f 32ff 	mov.w	r2, #4294967295
 80045d4:	f00a ffa4 	bl	800f520 <xQueueGenericSend>

		//Reservo memoria para armar el template path
		template_path = pvPortMalloc(TEMPLATE_STR_SIZE * sizeof(char));
 80045d8:	2032      	movs	r0, #50	@ 0x32
 80045da:	f00c fedf 	bl	801139c <pvPortMalloc>
 80045de:	6178      	str	r0, [r7, #20]
		if(template_path == NULL){
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d115      	bne.n	8004612 <sd_task+0x19a>
			message = DISPLAY_ERROR_MEMORY;
 80045e6:	2312      	movs	r3, #18
 80045e8:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 80045ea:	4b2f      	ldr	r3, [pc, #188]	@ (80046a8 <sd_task+0x230>)
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	f107 0113 	add.w	r1, r7, #19
 80045f2:	2300      	movs	r3, #0
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	f00a ff92 	bl	800f520 <xQueueGenericSend>
			vPortFree(user_name);
 80045fc:	69b8      	ldr	r0, [r7, #24]
 80045fe:	f00c ff9b 	bl	8011538 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 8004602:	4b2d      	ldr	r3, [pc, #180]	@ (80046b8 <sd_task+0x240>)
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	2300      	movs	r3, #0
 8004608:	2200      	movs	r2, #0
 800460a:	2100      	movs	r1, #0
 800460c:	f00a ff88 	bl	800f520 <xQueueGenericSend>
			continue;
 8004610:	e048      	b.n	80046a4 <sd_task+0x22c>
		}

		//Verifico la existencia del template
		snprintf(template_path, TEMPLATE_STR_SIZE, "%s.bin", user_name);
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	4a29      	ldr	r2, [pc, #164]	@ (80046bc <sd_task+0x244>)
 8004616:	2132      	movs	r1, #50	@ 0x32
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f00e fed5 	bl	80133c8 <sniprintf>
		if(check_if_file_exists(template_path) != FR_OK){
 800461e:	6978      	ldr	r0, [r7, #20]
 8004620:	f7ff f92c 	bl	800387c <check_if_file_exists>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <sd_task+0x1e4>
			message = DISPLAY_TEMPLATE_NOT_FOUND;
 800462a:	230e      	movs	r3, #14
 800462c:	74fb      	strb	r3, [r7, #19]
			xQueueSend(display_queue, &message, portMAX_DELAY);
 800462e:	4b1e      	ldr	r3, [pc, #120]	@ (80046a8 <sd_task+0x230>)
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	f107 0113 	add.w	r1, r7, #19
 8004636:	2300      	movs	r3, #0
 8004638:	f04f 32ff 	mov.w	r2, #4294967295
 800463c:	f00a ff70 	bl	800f520 <xQueueGenericSend>
			vPortFree(user_name);
 8004640:	69b8      	ldr	r0, [r7, #24]
 8004642:	f00c ff79 	bl	8011538 <vPortFree>
			vPortFree(template_path);
 8004646:	6978      	ldr	r0, [r7, #20]
 8004648:	f00c ff76 	bl	8011538 <vPortFree>
			xSemaphoreGive(keypad_sd_sync);
 800464c:	4b1a      	ldr	r3, [pc, #104]	@ (80046b8 <sd_task+0x240>)
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	2300      	movs	r3, #0
 8004652:	2200      	movs	r2, #0
 8004654:	2100      	movs	r1, #0
 8004656:	f00a ff63 	bl	800f520 <xQueueGenericSend>
			continue;
 800465a:	e023      	b.n	80046a4 <sd_task+0x22c>
		}

		//Realizo reconocimiento de voz
		if(recognize_user_voice(template_path, user_name, &message)){
 800465c:	f107 0313 	add.w	r3, r7, #19
 8004660:	461a      	mov	r2, r3
 8004662:	69b9      	ldr	r1, [r7, #24]
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f7ff fc4b 	bl	8003f00 <recognize_user_voice>
			//Activo cerradura

		}

		//Libero memoria y envio mensaje el mensaje que corresponda al display
		vPortFree(user_name);
 800466a:	69b8      	ldr	r0, [r7, #24]
 800466c:	f00c ff64 	bl	8011538 <vPortFree>
		vPortFree(template_path);
 8004670:	6978      	ldr	r0, [r7, #20]
 8004672:	f00c ff61 	bl	8011538 <vPortFree>

		xQueueSend(display_queue, &message, portMAX_DELAY);
 8004676:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <sd_task+0x230>)
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	f107 0113 	add.w	r1, r7, #19
 800467e:	2300      	movs	r3, #0
 8004680:	f04f 32ff 	mov.w	r2, #4294967295
 8004684:	f00a ff4c 	bl	800f520 <xQueueGenericSend>
		xSemaphoreTake(sd_display_sync, portMAX_DELAY);												//Bloqueo la tarea hasta que termine de mostrarse el mensaje de reconocimiento
 8004688:	4b0a      	ldr	r3, [pc, #40]	@ (80046b4 <sd_task+0x23c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f04f 31ff 	mov.w	r1, #4294967295
 8004690:	4618      	mov	r0, r3
 8004692:	f00b f9b9 	bl	800fa08 <xQueueSemaphoreTake>
		xSemaphoreGive(keypad_sd_sync);																//Doy el semaforo para que la tarea keypad pueda ejecutarse
 8004696:	4b08      	ldr	r3, [pc, #32]	@ (80046b8 <sd_task+0x240>)
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	2300      	movs	r3, #0
 800469c:	2200      	movs	r2, #0
 800469e:	2100      	movs	r1, #0
 80046a0:	f00a ff3e 	bl	800f520 <xQueueGenericSend>
		for(uint8_t i = 0; i < SEQUENCE_LENGTH + 1; i++){
 80046a4:	e702      	b.n	80044ac <sd_task+0x34>
 80046a6:	bf00      	nop
 80046a8:	200002b8 	.word	0x200002b8
 80046ac:	200002b4 	.word	0x200002b4
 80046b0:	080149bc 	.word	0x080149bc
 80046b4:	200002c0 	.word	0x200002c0
 80046b8:	200002bc 	.word	0x200002bc
 80046bc:	080149c4 	.word	0x080149c4

080046c0 <clear_buffer>:
#include "common_utils.h"
//Funciones utiles
void clear_buffer(char *buffer, size_t length) {
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
    if (buffer == NULL) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00f      	beq.n	80046f0 <clear_buffer+0x30>
        return; // Verifica que el puntero no sea nulo
    }
    for (size_t i = 0; i < length; i++) {
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e007      	b.n	80046e6 <clear_buffer+0x26>
        buffer[i] = '\0'; // Llena el buffer con caracteres nulos
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d3f3      	bcc.n	80046d6 <clear_buffer+0x16>
 80046ee:	e000      	b.n	80046f2 <clear_buffer+0x32>
        return; // Verifica que el puntero no sea nulo
 80046f0:	bf00      	nop
    }
}
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <clear_char>:

void clear_char(char *buffer, char character){
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	70fb      	strb	r3, [r7, #3]
	char *ptr = buffer;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 800470c:	e006      	b.n	800471c <clear_char+0x20>
		if(*ptr == 0){
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <clear_char+0x2c>
			break;
		}
		ptr++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
	while(*ptr != character){
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	429a      	cmp	r2, r3
 8004724:	d1f3      	bne.n	800470e <clear_char+0x12>
 8004726:	e000      	b.n	800472a <clear_char+0x2e>
			break;
 8004728:	bf00      	nop
	}
	*ptr = 0;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]
	return;
 8004730:	bf00      	nop
}
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004740:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <HAL_Init+0x40>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0d      	ldr	r2, [pc, #52]	@ (800477c <HAL_Init+0x40>)
 8004746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800474a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800474c:	4b0b      	ldr	r3, [pc, #44]	@ (800477c <HAL_Init+0x40>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a0a      	ldr	r2, [pc, #40]	@ (800477c <HAL_Init+0x40>)
 8004752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004758:	4b08      	ldr	r3, [pc, #32]	@ (800477c <HAL_Init+0x40>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a07      	ldr	r2, [pc, #28]	@ (800477c <HAL_Init+0x40>)
 800475e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004764:	2003      	movs	r0, #3
 8004766:	f000 fe3e 	bl	80053e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800476a:	200f      	movs	r0, #15
 800476c:	f7fd fdc2 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004770:	f7fd fbd8 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40023c00 	.word	0x40023c00

08004780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004784:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_IncTick+0x20>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_IncTick+0x24>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4413      	add	r3, r2
 8004790:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <HAL_IncTick+0x24>)
 8004792:	6013      	str	r3, [r2, #0]
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000018 	.word	0x20000018
 80047a4:	20002914 	.word	0x20002914

080047a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return uwTick;
 80047ac:	4b03      	ldr	r3, [pc, #12]	@ (80047bc <HAL_GetTick+0x14>)
 80047ae:	681b      	ldr	r3, [r3, #0]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20002914 	.word	0x20002914

080047c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e033      	b.n	800483e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fd fbcc 	bl	8001f7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d118      	bne.n	8004830 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004806:	f023 0302 	bic.w	r3, r3, #2
 800480a:	f043 0202 	orr.w	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fbb2 	bl	8004f7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	f043 0201 	orr.w	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	641a      	str	r2, [r3, #64]	@ 0x40
 800482e:	e001      	b.n	8004834 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800483c:	7bfb      	ldrb	r3, [r7, #15]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d049      	beq.n	8004910 <HAL_ADC_IRQHandler+0xca>
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d046      	beq.n	8004910 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	2b00      	cmp	r3, #0
 800488c:	d105      	bne.n	800489a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d12b      	bne.n	8004900 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d127      	bne.n	8004900 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d119      	bne.n	8004900 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0220 	bic.w	r2, r2, #32
 80048da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d105      	bne.n	8004900 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	f043 0201 	orr.w	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fd fae1 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0212 	mvn.w	r2, #18
 800490e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d057      	beq.n	80049d6 <HAL_ADC_IRQHandler+0x190>
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d054      	beq.n	80049d6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d105      	bne.n	8004944 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d139      	bne.n	80049c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800496a:	2b00      	cmp	r3, #0
 800496c:	d12b      	bne.n	80049c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004978:	2b00      	cmp	r3, #0
 800497a:	d124      	bne.n	80049c6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11d      	bne.n	80049c6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800498e:	2b00      	cmp	r3, #0
 8004990:	d119      	bne.n	80049c6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049a0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d105      	bne.n	80049c6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fc56 	bl	8005278 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 020c 	mvn.w	r2, #12
 80049d4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d017      	beq.n	8004a1c <HAL_ADC_IRQHandler+0x1d6>
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d014      	beq.n	8004a1c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10d      	bne.n	8004a1c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f97f 	bl	8004d10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f06f 0201 	mvn.w	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a2a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d015      	beq.n	8004a5e <HAL_ADC_IRQHandler+0x218>
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d012      	beq.n	8004a5e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3c:	f043 0202 	orr.w	r2, r3, #2
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0220 	mvn.w	r2, #32
 8004a4c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f968 	bl	8004d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0220 	mvn.w	r2, #32
 8004a5c:	601a      	str	r2, [r3, #0]
  }
}
 8004a5e:	bf00      	nop
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <HAL_ADC_Start_DMA+0x1e>
 8004a82:	2302      	movs	r3, #2
 8004a84:	e0ce      	b.n	8004c24 <HAL_ADC_Start_DMA+0x1bc>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d018      	beq.n	8004ace <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004aac:	4b5f      	ldr	r3, [pc, #380]	@ (8004c2c <HAL_ADC_Start_DMA+0x1c4>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c30 <HAL_ADC_Start_DMA+0x1c8>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0c9a      	lsrs	r2, r3, #18
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004ac0:	e002      	b.n	8004ac8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f9      	bne.n	8004ac2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004adc:	d107      	bne.n	8004aee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aec:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 8086 	bne.w	8004c0a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004b28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b3c:	d106      	bne.n	8004b4c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f023 0206 	bic.w	r2, r3, #6
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b4a:	e002      	b.n	8004b52 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b5a:	4b36      	ldr	r3, [pc, #216]	@ (8004c34 <HAL_ADC_Start_DMA+0x1cc>)
 8004b5c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b62:	4a35      	ldr	r2, [pc, #212]	@ (8004c38 <HAL_ADC_Start_DMA+0x1d0>)
 8004b64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	4a34      	ldr	r2, [pc, #208]	@ (8004c3c <HAL_ADC_Start_DMA+0x1d4>)
 8004b6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b72:	4a33      	ldr	r2, [pc, #204]	@ (8004c40 <HAL_ADC_Start_DMA+0x1d8>)
 8004b74:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004b7e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004b8e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b9e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	334c      	adds	r3, #76	@ 0x4c
 8004baa:	4619      	mov	r1, r3
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f000 fcfc 	bl	80055ac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10f      	bne.n	8004be0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d129      	bne.n	8004c22 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	e020      	b.n	8004c22 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a17      	ldr	r2, [pc, #92]	@ (8004c44 <HAL_ADC_Start_DMA+0x1dc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d11b      	bne.n	8004c22 <HAL_ADC_Start_DMA+0x1ba>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d114      	bne.n	8004c22 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	e00b      	b.n	8004c22 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f043 0210 	orr.w	r2, r3, #16
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f043 0201 	orr.w	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000004 	.word	0x20000004
 8004c30:	431bde83 	.word	0x431bde83
 8004c34:	40012300 	.word	0x40012300
 8004c38:	08005175 	.word	0x08005175
 8004c3c:	0800522f 	.word	0x0800522f
 8004c40:	0800524b 	.word	0x0800524b
 8004c44:	40012000 	.word	0x40012000

08004c48 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_ADC_Stop_DMA+0x1a>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e048      	b.n	8004cf4 <HAL_ADC_Stop_DMA+0xac>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d130      	bne.n	8004cea <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c96:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d10f      	bne.n	8004cc6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fcd6 	bl	800565c <HAL_DMA_Abort>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004cd4:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	f043 0201 	orr.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x1c>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e105      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x228>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b09      	cmp	r3, #9
 8004d62:	d925      	bls.n	8004db0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68d9      	ldr	r1, [r3, #12]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	4613      	mov	r3, r2
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	3b1e      	subs	r3, #30
 8004d7a:	2207      	movs	r2, #7
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	43da      	mvns	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	400a      	ands	r2, r1
 8004d88:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68d9      	ldr	r1, [r3, #12]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	4403      	add	r3, r0
 8004da2:	3b1e      	subs	r3, #30
 8004da4:	409a      	lsls	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	60da      	str	r2, [r3, #12]
 8004dae:	e022      	b.n	8004df6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6919      	ldr	r1, [r3, #16]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	400a      	ands	r2, r1
 8004dd2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6919      	ldr	r1, [r3, #16]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4618      	mov	r0, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4403      	add	r3, r0
 8004dec:	409a      	lsls	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b06      	cmp	r3, #6
 8004dfc:	d824      	bhi.n	8004e48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3b05      	subs	r3, #5
 8004e10:	221f      	movs	r2, #31
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	3b05      	subs	r3, #5
 8004e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e46:	e04c      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b0c      	cmp	r3, #12
 8004e4e:	d824      	bhi.n	8004e9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	3b23      	subs	r3, #35	@ 0x23
 8004e62:	221f      	movs	r2, #31
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43da      	mvns	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	400a      	ands	r2, r1
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	4618      	mov	r0, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	3b23      	subs	r3, #35	@ 0x23
 8004e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e98:	e023      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3b41      	subs	r3, #65	@ 0x41
 8004eac:	221f      	movs	r2, #31
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	400a      	ands	r2, r1
 8004eba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4618      	mov	r0, r3
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3b41      	subs	r3, #65	@ 0x41
 8004ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ee2:	4b22      	ldr	r3, [pc, #136]	@ (8004f6c <HAL_ADC_ConfigChannel+0x234>)
 8004ee4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a21      	ldr	r2, [pc, #132]	@ (8004f70 <HAL_ADC_ConfigChannel+0x238>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d109      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x1cc>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b12      	cmp	r3, #18
 8004ef6:	d105      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a19      	ldr	r2, [pc, #100]	@ (8004f70 <HAL_ADC_ConfigChannel+0x238>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d123      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x21e>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	d003      	beq.n	8004f1e <HAL_ADC_ConfigChannel+0x1e6>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b11      	cmp	r3, #17
 8004f1c:	d11b      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b10      	cmp	r3, #16
 8004f30:	d111      	bne.n	8004f56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f32:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <HAL_ADC_ConfigChannel+0x23c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a10      	ldr	r2, [pc, #64]	@ (8004f78 <HAL_ADC_ConfigChannel+0x240>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	0c9a      	lsrs	r2, r3, #18
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f48:	e002      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f9      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40012300 	.word	0x40012300
 8004f70:	40012000 	.word	0x40012000
 8004f74:	20000004 	.word	0x20000004
 8004f78:	431bde83 	.word	0x431bde83

08004f7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f84:	4b79      	ldr	r3, [pc, #484]	@ (800516c <ADC_Init+0x1f0>)
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	021a      	lsls	r2, r3, #8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6859      	ldr	r1, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689a      	ldr	r2, [r3, #8]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6899      	ldr	r1, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	4a58      	ldr	r2, [pc, #352]	@ (8005170 <ADC_Init+0x1f4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6899      	ldr	r1, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6899      	ldr	r1, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	e00f      	b.n	800507a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005078:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0202 	bic.w	r2, r2, #2
 8005088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6899      	ldr	r1, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	7e1b      	ldrb	r3, [r3, #24]
 8005094:	005a      	lsls	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80050c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	3b01      	subs	r3, #1
 80050d4:	035a      	lsls	r2, r3, #13
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	e007      	b.n	80050f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80050fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	3b01      	subs	r3, #1
 800510c:	051a      	lsls	r2, r3, #20
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005132:	025a      	lsls	r2, r3, #9
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800514a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6899      	ldr	r1, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	029a      	lsls	r2, r3, #10
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	609a      	str	r2, [r3, #8]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40012300 	.word	0x40012300
 8005170:	0f000001 	.word	0x0f000001

08005174 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800518a:	2b00      	cmp	r3, #0
 800518c:	d13c      	bne.n	8005208 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d12b      	bne.n	8005200 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d127      	bne.n	8005200 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d006      	beq.n	80051cc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d119      	bne.n	8005200 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0220 	bic.w	r2, r2, #32
 80051da:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7fc fe61 	bl	8001ec8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005206:	e00e      	b.n	8005226 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff fd85 	bl	8004d24 <HAL_ADC_ErrorCallback>
}
 800521a:	e004      	b.n	8005226 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	4798      	blx	r3
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f7ff fd5d 	bl	8004cfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005256:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2240      	movs	r2, #64	@ 0x40
 800525c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005262:	f043 0204 	orr.w	r2, r3, #4
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff fd5a 	bl	8004d24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005270:	bf00      	nop
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800529c:	4b0c      	ldr	r3, [pc, #48]	@ (80052d0 <__NVIC_SetPriorityGrouping+0x44>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80052a8:	4013      	ands	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052be:	4a04      	ldr	r2, [pc, #16]	@ (80052d0 <__NVIC_SetPriorityGrouping+0x44>)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	60d3      	str	r3, [r2, #12]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000ed00 	.word	0xe000ed00

080052d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052d8:	4b04      	ldr	r3, [pc, #16]	@ (80052ec <__NVIC_GetPriorityGrouping+0x18>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	f003 0307 	and.w	r3, r3, #7
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	e000ed00 	.word	0xe000ed00

080052f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	db0b      	blt.n	800531a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	f003 021f 	and.w	r2, r3, #31
 8005308:	4907      	ldr	r1, [pc, #28]	@ (8005328 <__NVIC_EnableIRQ+0x38>)
 800530a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	2001      	movs	r0, #1
 8005312:	fa00 f202 	lsl.w	r2, r0, r2
 8005316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	e000e100 	.word	0xe000e100

0800532c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	6039      	str	r1, [r7, #0]
 8005336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800533c:	2b00      	cmp	r3, #0
 800533e:	db0a      	blt.n	8005356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	490c      	ldr	r1, [pc, #48]	@ (8005378 <__NVIC_SetPriority+0x4c>)
 8005346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800534a:	0112      	lsls	r2, r2, #4
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	440b      	add	r3, r1
 8005350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005354:	e00a      	b.n	800536c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	b2da      	uxtb	r2, r3
 800535a:	4908      	ldr	r1, [pc, #32]	@ (800537c <__NVIC_SetPriority+0x50>)
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	3b04      	subs	r3, #4
 8005364:	0112      	lsls	r2, r2, #4
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	440b      	add	r3, r1
 800536a:	761a      	strb	r2, [r3, #24]
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	e000e100 	.word	0xe000e100
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005380:	b480      	push	{r7}
 8005382:	b089      	sub	sp, #36	@ 0x24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f1c3 0307 	rsb	r3, r3, #7
 800539a:	2b04      	cmp	r3, #4
 800539c:	bf28      	it	cs
 800539e:	2304      	movcs	r3, #4
 80053a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	3304      	adds	r3, #4
 80053a6:	2b06      	cmp	r3, #6
 80053a8:	d902      	bls.n	80053b0 <NVIC_EncodePriority+0x30>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3b03      	subs	r3, #3
 80053ae:	e000      	b.n	80053b2 <NVIC_EncodePriority+0x32>
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43da      	mvns	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	401a      	ands	r2, r3
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053c8:	f04f 31ff 	mov.w	r1, #4294967295
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	43d9      	mvns	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	4313      	orrs	r3, r2
         );
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3724      	adds	r7, #36	@ 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff ff4c 	bl	800528c <__NVIC_SetPriorityGrouping>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800540e:	f7ff ff61 	bl	80052d4 <__NVIC_GetPriorityGrouping>
 8005412:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	6978      	ldr	r0, [r7, #20]
 800541a:	f7ff ffb1 	bl	8005380 <NVIC_EncodePriority>
 800541e:	4602      	mov	r2, r0
 8005420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff ff80 	bl	800532c <__NVIC_SetPriority>
}
 800542c:	bf00      	nop
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800543e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff ff54 	bl	80052f0 <__NVIC_EnableIRQ>
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800545c:	f7ff f9a4 	bl	80047a8 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e099      	b.n	80055a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800548c:	e00f      	b.n	80054ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800548e:	f7ff f98b 	bl	80047a8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b05      	cmp	r3, #5
 800549a:	d908      	bls.n	80054ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2203      	movs	r2, #3
 80054a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e078      	b.n	80055a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e8      	bne.n	800548e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4b38      	ldr	r3, [pc, #224]	@ (80055a8 <HAL_DMA_Init+0x158>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005504:	2b04      	cmp	r3, #4
 8005506:	d107      	bne.n	8005518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005510:	4313      	orrs	r3, r2
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f023 0307 	bic.w	r3, r3, #7
 800552e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553e:	2b04      	cmp	r3, #4
 8005540:	d117      	bne.n	8005572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00e      	beq.n	8005572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fadf 	bl	8005b18 <DMA_CheckFifoParam>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d008      	beq.n	8005572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2240      	movs	r2, #64	@ 0x40
 8005564:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800556e:	2301      	movs	r3, #1
 8005570:	e016      	b.n	80055a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa96 	bl	8005aac <DMA_CalcBaseAndBitshift>
 8005580:	4603      	mov	r3, r0
 8005582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005588:	223f      	movs	r2, #63	@ 0x3f
 800558a:	409a      	lsls	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	f010803f 	.word	0xf010803f

080055ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_DMA_Start_IT+0x26>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e040      	b.n	8005654 <HAL_DMA_Start_IT+0xa8>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d12f      	bne.n	8005646 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fa28 	bl	8005a50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005604:	223f      	movs	r2, #63	@ 0x3f
 8005606:	409a      	lsls	r2, r3
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0216 	orr.w	r2, r2, #22
 800561a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0208 	orr.w	r2, r2, #8
 8005632:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e005      	b.n	8005652 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800564e:	2302      	movs	r3, #2
 8005650:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005652:	7dfb      	ldrb	r3, [r7, #23]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005668:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800566a:	f7ff f89d 	bl	80047a8 <HAL_GetTick>
 800566e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d008      	beq.n	800568e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2280      	movs	r2, #128	@ 0x80
 8005680:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e052      	b.n	8005734 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0216 	bic.w	r2, r2, #22
 800569c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695a      	ldr	r2, [r3, #20]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d103      	bne.n	80056be <HAL_DMA_Abort+0x62>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0208 	bic.w	r2, r2, #8
 80056cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0201 	bic.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056de:	e013      	b.n	8005708 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056e0:	f7ff f862 	bl	80047a8 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d90c      	bls.n	8005708 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2203      	movs	r2, #3
 80056f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e015      	b.n	8005734 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e4      	bne.n	80056e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571a:	223f      	movs	r2, #63	@ 0x3f
 800571c:	409a      	lsls	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005748:	4b8e      	ldr	r3, [pc, #568]	@ (8005984 <HAL_DMA_IRQHandler+0x248>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a8e      	ldr	r2, [pc, #568]	@ (8005988 <HAL_DMA_IRQHandler+0x24c>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0a9b      	lsrs	r3, r3, #10
 8005754:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005766:	2208      	movs	r2, #8
 8005768:	409a      	lsls	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01a      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d013      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0204 	bic.w	r2, r2, #4
 800578e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005794:	2208      	movs	r2, #8
 8005796:	409a      	lsls	r2, r3
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a0:	f043 0201 	orr.w	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d012      	beq.n	80057de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ca:	2201      	movs	r2, #1
 80057cc:	409a      	lsls	r2, r3
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d6:	f043 0202 	orr.w	r2, r3, #2
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e2:	2204      	movs	r2, #4
 80057e4:	409a      	lsls	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d012      	beq.n	8005814 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005800:	2204      	movs	r2, #4
 8005802:	409a      	lsls	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580c:	f043 0204 	orr.w	r2, r3, #4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005818:	2210      	movs	r2, #16
 800581a:	409a      	lsls	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d043      	beq.n	80058ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d03c      	beq.n	80058ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005836:	2210      	movs	r2, #16
 8005838:	409a      	lsls	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d018      	beq.n	800587e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d108      	bne.n	800586c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d024      	beq.n	80058ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	4798      	blx	r3
 800586a:	e01f      	b.n	80058ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005870:	2b00      	cmp	r3, #0
 8005872:	d01b      	beq.n	80058ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	4798      	blx	r3
 800587c:	e016      	b.n	80058ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d107      	bne.n	800589c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0208 	bic.w	r2, r2, #8
 800589a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b0:	2220      	movs	r2, #32
 80058b2:	409a      	lsls	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 808f 	beq.w	80059dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8087 	beq.w	80059dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d2:	2220      	movs	r2, #32
 80058d4:	409a      	lsls	r2, r3
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b05      	cmp	r3, #5
 80058e4:	d136      	bne.n	8005954 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0216 	bic.w	r2, r2, #22
 80058f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005904:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	2b00      	cmp	r3, #0
 800590c:	d103      	bne.n	8005916 <HAL_DMA_IRQHandler+0x1da>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0208 	bic.w	r2, r2, #8
 8005924:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592a:	223f      	movs	r2, #63	@ 0x3f
 800592c:	409a      	lsls	r2, r3
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005946:	2b00      	cmp	r3, #0
 8005948:	d07e      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
        }
        return;
 8005952:	e079      	b.n	8005a48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01d      	beq.n	800599e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10d      	bne.n	800598c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005974:	2b00      	cmp	r3, #0
 8005976:	d031      	beq.n	80059dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	4798      	blx	r3
 8005980:	e02c      	b.n	80059dc <HAL_DMA_IRQHandler+0x2a0>
 8005982:	bf00      	nop
 8005984:	20000004 	.word	0x20000004
 8005988:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d023      	beq.n	80059dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	4798      	blx	r3
 800599c:	e01e      	b.n	80059dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10f      	bne.n	80059cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0210 	bic.w	r2, r2, #16
 80059ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d032      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d022      	beq.n	8005a36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2205      	movs	r2, #5
 80059f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d307      	bcc.n	8005a24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f2      	bne.n	8005a08 <HAL_DMA_IRQHandler+0x2cc>
 8005a22:	e000      	b.n	8005a26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
 8005a46:	e000      	b.n	8005a4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a48:	bf00      	nop
    }
  }
}
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	d108      	bne.n	8005a90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a8e:	e007      	b.n	8005aa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	3b10      	subs	r3, #16
 8005abc:	4a14      	ldr	r2, [pc, #80]	@ (8005b10 <DMA_CalcBaseAndBitshift+0x64>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	091b      	lsrs	r3, r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ac6:	4a13      	ldr	r2, [pc, #76]	@ (8005b14 <DMA_CalcBaseAndBitshift+0x68>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d909      	bls.n	8005aee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005ae2:	f023 0303 	bic.w	r3, r3, #3
 8005ae6:	1d1a      	adds	r2, r3, #4
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	659a      	str	r2, [r3, #88]	@ 0x58
 8005aec:	e007      	b.n	8005afe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005af6:	f023 0303 	bic.w	r3, r3, #3
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	aaaaaaab 	.word	0xaaaaaaab
 8005b14:	0801852c 	.word	0x0801852c

08005b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11f      	bne.n	8005b72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d856      	bhi.n	8005be6 <DMA_CheckFifoParam+0xce>
 8005b38:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <DMA_CheckFifoParam+0x28>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b63 	.word	0x08005b63
 8005b48:	08005b51 	.word	0x08005b51
 8005b4c:	08005be7 	.word	0x08005be7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d046      	beq.n	8005bea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b60:	e043      	b.n	8005bea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b6a:	d140      	bne.n	8005bee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b70:	e03d      	b.n	8005bee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b7a:	d121      	bne.n	8005bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d837      	bhi.n	8005bf2 <DMA_CheckFifoParam+0xda>
 8005b82:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <DMA_CheckFifoParam+0x70>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005b99 	.word	0x08005b99
 8005b8c:	08005b9f 	.word	0x08005b9f
 8005b90:	08005b99 	.word	0x08005b99
 8005b94:	08005bb1 	.word	0x08005bb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b9c:	e030      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d025      	beq.n	8005bf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bae:	e022      	b.n	8005bf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bb8:	d11f      	bne.n	8005bfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bbe:	e01c      	b.n	8005bfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d903      	bls.n	8005bce <DMA_CheckFifoParam+0xb6>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b03      	cmp	r3, #3
 8005bca:	d003      	beq.n	8005bd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bcc:	e018      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd2:	e015      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00e      	beq.n	8005bfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      break;
 8005be4:	e00b      	b.n	8005bfe <DMA_CheckFifoParam+0xe6>
      break;
 8005be6:	bf00      	nop
 8005be8:	e00a      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
      break;
 8005bea:	bf00      	nop
 8005bec:	e008      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e006      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
      break;
 8005bf2:	bf00      	nop
 8005bf4:	e004      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
      break;
 8005bf6:	bf00      	nop
 8005bf8:	e002      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
      break;   
 8005bfa:	bf00      	nop
 8005bfc:	e000      	b.n	8005c00 <DMA_CheckFifoParam+0xe8>
      break;
 8005bfe:	bf00      	nop
    }
  } 
  
  return status; 
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop

08005c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	@ 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e159      	b.n	8005ee0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	f040 8148 	bne.w	8005eda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d005      	beq.n	8005c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d130      	bne.n	8005cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 0201 	and.w	r2, r3, #1
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d017      	beq.n	8005d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d123      	bne.n	8005d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	08da      	lsrs	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3208      	adds	r2, #8
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	220f      	movs	r2, #15
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	08da      	lsrs	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	69b9      	ldr	r1, [r7, #24]
 8005d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0203 	and.w	r2, r3, #3
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80a2 	beq.w	8005eda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	4b57      	ldr	r3, [pc, #348]	@ (8005ef8 <HAL_GPIO_Init+0x2e8>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9e:	4a56      	ldr	r2, [pc, #344]	@ (8005ef8 <HAL_GPIO_Init+0x2e8>)
 8005da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005da6:	4b54      	ldr	r3, [pc, #336]	@ (8005ef8 <HAL_GPIO_Init+0x2e8>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005db2:	4a52      	ldr	r2, [pc, #328]	@ (8005efc <HAL_GPIO_Init+0x2ec>)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	3302      	adds	r3, #2
 8005dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	220f      	movs	r2, #15
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a49      	ldr	r2, [pc, #292]	@ (8005f00 <HAL_GPIO_Init+0x2f0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d019      	beq.n	8005e12 <HAL_GPIO_Init+0x202>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a48      	ldr	r2, [pc, #288]	@ (8005f04 <HAL_GPIO_Init+0x2f4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d013      	beq.n	8005e0e <HAL_GPIO_Init+0x1fe>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a47      	ldr	r2, [pc, #284]	@ (8005f08 <HAL_GPIO_Init+0x2f8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00d      	beq.n	8005e0a <HAL_GPIO_Init+0x1fa>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a46      	ldr	r2, [pc, #280]	@ (8005f0c <HAL_GPIO_Init+0x2fc>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <HAL_GPIO_Init+0x1f6>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a45      	ldr	r2, [pc, #276]	@ (8005f10 <HAL_GPIO_Init+0x300>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_GPIO_Init+0x1f2>
 8005dfe:	2304      	movs	r3, #4
 8005e00:	e008      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e02:	2307      	movs	r3, #7
 8005e04:	e006      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e06:	2303      	movs	r3, #3
 8005e08:	e004      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e002      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <HAL_GPIO_Init+0x204>
 8005e12:	2300      	movs	r3, #0
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	f002 0203 	and.w	r2, r2, #3
 8005e1a:	0092      	lsls	r2, r2, #2
 8005e1c:	4093      	lsls	r3, r2
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e24:	4935      	ldr	r1, [pc, #212]	@ (8005efc <HAL_GPIO_Init+0x2ec>)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	089b      	lsrs	r3, r3, #2
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e32:	4b38      	ldr	r3, [pc, #224]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e56:	4a2f      	ldr	r2, [pc, #188]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e80:	4a24      	ldr	r2, [pc, #144]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e86:	4b23      	ldr	r3, [pc, #140]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4013      	ands	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005eb0:	4b18      	ldr	r3, [pc, #96]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8005f14 <HAL_GPIO_Init+0x304>)
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	3301      	adds	r3, #1
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	2b0f      	cmp	r3, #15
 8005ee4:	f67f aea2 	bls.w	8005c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	3724      	adds	r7, #36	@ 0x24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40013800 	.word	0x40013800
 8005f00:	40020000 	.word	0x40020000
 8005f04:	40020400 	.word	0x40020400
 8005f08:	40020800 	.word	0x40020800
 8005f0c:	40020c00 	.word	0x40020c00
 8005f10:	40021000 	.word	0x40021000
 8005f14:	40013c00 	.word	0x40013c00

08005f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	887b      	ldrh	r3, [r7, #2]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
 8005f34:	e001      	b.n	8005f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	807b      	strh	r3, [r7, #2]
 8005f54:	4613      	mov	r3, r2
 8005f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f58:	787b      	ldrb	r3, [r7, #1]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f5e:	887a      	ldrh	r2, [r7, #2]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f64:	e003      	b.n	8005f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f66:	887b      	ldrh	r3, [r7, #2]
 8005f68:	041a      	lsls	r2, r3, #16
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	619a      	str	r2, [r3, #24]
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e12b      	b.n	80061e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fc f868 	bl	8002078 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2224      	movs	r2, #36	@ 0x24
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fe0:	f001 f8ea 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 8005fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4a81      	ldr	r2, [pc, #516]	@ (80061f0 <HAL_I2C_Init+0x274>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d807      	bhi.n	8006000 <HAL_I2C_Init+0x84>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a80      	ldr	r2, [pc, #512]	@ (80061f4 <HAL_I2C_Init+0x278>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	bf94      	ite	ls
 8005ff8:	2301      	movls	r3, #1
 8005ffa:	2300      	movhi	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	e006      	b.n	800600e <HAL_I2C_Init+0x92>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4a7d      	ldr	r2, [pc, #500]	@ (80061f8 <HAL_I2C_Init+0x27c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	bf94      	ite	ls
 8006008:	2301      	movls	r3, #1
 800600a:	2300      	movhi	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e0e7      	b.n	80061e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a78      	ldr	r2, [pc, #480]	@ (80061fc <HAL_I2C_Init+0x280>)
 800601a:	fba2 2303 	umull	r2, r3, r2, r3
 800601e:	0c9b      	lsrs	r3, r3, #18
 8006020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	4a6a      	ldr	r2, [pc, #424]	@ (80061f0 <HAL_I2C_Init+0x274>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d802      	bhi.n	8006050 <HAL_I2C_Init+0xd4>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	3301      	adds	r3, #1
 800604e:	e009      	b.n	8006064 <HAL_I2C_Init+0xe8>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	4a69      	ldr	r2, [pc, #420]	@ (8006200 <HAL_I2C_Init+0x284>)
 800605c:	fba2 2303 	umull	r2, r3, r2, r3
 8006060:	099b      	lsrs	r3, r3, #6
 8006062:	3301      	adds	r3, #1
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6812      	ldr	r2, [r2, #0]
 8006068:	430b      	orrs	r3, r1
 800606a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006076:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	495c      	ldr	r1, [pc, #368]	@ (80061f0 <HAL_I2C_Init+0x274>)
 8006080:	428b      	cmp	r3, r1
 8006082:	d819      	bhi.n	80060b8 <HAL_I2C_Init+0x13c>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1e59      	subs	r1, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006098:	400b      	ands	r3, r1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_I2C_Init+0x138>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	1e59      	subs	r1, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80060ac:	3301      	adds	r3, #1
 80060ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b2:	e051      	b.n	8006158 <HAL_I2C_Init+0x1dc>
 80060b4:	2304      	movs	r3, #4
 80060b6:	e04f      	b.n	8006158 <HAL_I2C_Init+0x1dc>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d111      	bne.n	80060e4 <HAL_I2C_Init+0x168>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1e58      	subs	r0, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6859      	ldr	r1, [r3, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	440b      	add	r3, r1
 80060ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80060d2:	3301      	adds	r3, #1
 80060d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bf0c      	ite	eq
 80060dc:	2301      	moveq	r3, #1
 80060de:	2300      	movne	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	e012      	b.n	800610a <HAL_I2C_Init+0x18e>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1e58      	subs	r0, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6859      	ldr	r1, [r3, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	0099      	lsls	r1, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060fa:	3301      	adds	r3, #1
 80060fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006100:	2b00      	cmp	r3, #0
 8006102:	bf0c      	ite	eq
 8006104:	2301      	moveq	r3, #1
 8006106:	2300      	movne	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_I2C_Init+0x196>
 800610e:	2301      	movs	r3, #1
 8006110:	e022      	b.n	8006158 <HAL_I2C_Init+0x1dc>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10e      	bne.n	8006138 <HAL_I2C_Init+0x1bc>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	1e58      	subs	r0, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6859      	ldr	r1, [r3, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	440b      	add	r3, r1
 8006128:	fbb0 f3f3 	udiv	r3, r0, r3
 800612c:	3301      	adds	r3, #1
 800612e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006136:	e00f      	b.n	8006158 <HAL_I2C_Init+0x1dc>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	1e58      	subs	r0, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6859      	ldr	r1, [r3, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	0099      	lsls	r1, r3, #2
 8006148:	440b      	add	r3, r1
 800614a:	fbb0 f3f3 	udiv	r3, r0, r3
 800614e:	3301      	adds	r3, #1
 8006150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006154:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	6809      	ldr	r1, [r1, #0]
 800615c:	4313      	orrs	r3, r2
 800615e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69da      	ldr	r2, [r3, #28]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006186:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	6911      	ldr	r1, [r2, #16]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	68d2      	ldr	r2, [r2, #12]
 8006192:	4311      	orrs	r1, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	430b      	orrs	r3, r1
 800619a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	000186a0 	.word	0x000186a0
 80061f4:	001e847f 	.word	0x001e847f
 80061f8:	003d08ff 	.word	0x003d08ff
 80061fc:	431bde83 	.word	0x431bde83
 8006200:	10624dd3 	.word	0x10624dd3

08006204 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800621e:	f7fe fac3 	bl	80047a8 <HAL_GetTick>
 8006222:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b20      	cmp	r3, #32
 800622e:	f040 80d9 	bne.w	80063e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	2319      	movs	r3, #25
 8006238:	2201      	movs	r2, #1
 800623a:	496d      	ldr	r1, [pc, #436]	@ (80063f0 <HAL_I2C_Mem_Write+0x1ec>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f971 	bl	8006524 <I2C_WaitOnFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
 800624a:	e0cc      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_I2C_Mem_Write+0x56>
 8006256:	2302      	movs	r3, #2
 8006258:	e0c5      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	2b01      	cmp	r3, #1
 800626e:	d007      	beq.n	8006280 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800628e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2221      	movs	r2, #33	@ 0x21
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2240      	movs	r2, #64	@ 0x40
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a3a      	ldr	r2, [r7, #32]
 80062aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80062b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4a4d      	ldr	r2, [pc, #308]	@ (80063f4 <HAL_I2C_Mem_Write+0x1f0>)
 80062c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062c2:	88f8      	ldrh	r0, [r7, #6]
 80062c4:	893a      	ldrh	r2, [r7, #8]
 80062c6:	8979      	ldrh	r1, [r7, #10]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f890 	bl	80063f8 <I2C_RequestMemoryWrite>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d052      	beq.n	8006384 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e081      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fa36 	bl	8006758 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00d      	beq.n	800630e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d107      	bne.n	800630a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006308:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e06b      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	781a      	ldrb	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b04      	cmp	r3, #4
 800634a:	d11b      	bne.n	8006384 <HAL_I2C_Mem_Write+0x180>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	3b01      	subs	r3, #1
 800637e:	b29a      	uxth	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1aa      	bne.n	80062e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fa29 	bl	80067e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00d      	beq.n	80063b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d107      	bne.n	80063b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e016      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e000      	b.n	80063e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80063e4:	2302      	movs	r3, #2
  }
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	00100002 	.word	0x00100002
 80063f4:	ffff0000 	.word	0xffff0000

080063f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	461a      	mov	r2, r3
 8006406:	4603      	mov	r3, r0
 8006408:	817b      	strh	r3, [r7, #10]
 800640a:	460b      	mov	r3, r1
 800640c:	813b      	strh	r3, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2200      	movs	r2, #0
 800642a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f878 	bl	8006524 <I2C_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00d      	beq.n	8006456 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006448:	d103      	bne.n	8006452 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006450:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e05f      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006456:	897b      	ldrh	r3, [r7, #10]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	6a3a      	ldr	r2, [r7, #32]
 800646a:	492d      	ldr	r1, [pc, #180]	@ (8006520 <I2C_RequestMemoryWrite+0x128>)
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f8d3 	bl	8006618 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e04c      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006494:	6a39      	ldr	r1, [r7, #32]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f95e 	bl	8006758 <I2C_WaitOnTXEFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00d      	beq.n	80064be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d107      	bne.n	80064ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e02b      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d105      	bne.n	80064d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064c4:	893b      	ldrh	r3, [r7, #8]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	611a      	str	r2, [r3, #16]
 80064ce:	e021      	b.n	8006514 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064d0:	893b      	ldrh	r3, [r7, #8]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e0:	6a39      	ldr	r1, [r7, #32]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 f938 	bl	8006758 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d107      	bne.n	8006506 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e005      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800650a:	893b      	ldrh	r3, [r7, #8]
 800650c:	b2da      	uxtb	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	00010002 	.word	0x00010002

08006524 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006534:	e048      	b.n	80065c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d044      	beq.n	80065c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800653e:	f7fe f933 	bl	80047a8 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d302      	bcc.n	8006554 <I2C_WaitOnFlagUntilTimeout+0x30>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d139      	bne.n	80065c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	0c1b      	lsrs	r3, r3, #16
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b01      	cmp	r3, #1
 800655c:	d10d      	bne.n	800657a <I2C_WaitOnFlagUntilTimeout+0x56>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	43da      	mvns	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4013      	ands	r3, r2
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	bf0c      	ite	eq
 8006570:	2301      	moveq	r3, #1
 8006572:	2300      	movne	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	e00c      	b.n	8006594 <I2C_WaitOnFlagUntilTimeout+0x70>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	43da      	mvns	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4013      	ands	r3, r2
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	bf0c      	ite	eq
 800658c:	2301      	moveq	r3, #1
 800658e:	2300      	movne	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	461a      	mov	r2, r3
 8006594:	79fb      	ldrb	r3, [r7, #7]
 8006596:	429a      	cmp	r2, r3
 8006598:	d116      	bne.n	80065c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	f043 0220 	orr.w	r2, r3, #32
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e023      	b.n	8006610 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	0c1b      	lsrs	r3, r3, #16
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d10d      	bne.n	80065ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	43da      	mvns	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4013      	ands	r3, r2
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf0c      	ite	eq
 80065e4:	2301      	moveq	r3, #1
 80065e6:	2300      	movne	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	e00c      	b.n	8006608 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	43da      	mvns	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	4013      	ands	r3, r2
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf0c      	ite	eq
 8006600:	2301      	moveq	r3, #1
 8006602:	2300      	movne	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	461a      	mov	r2, r3
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	429a      	cmp	r2, r3
 800660c:	d093      	beq.n	8006536 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006626:	e071      	b.n	800670c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006636:	d123      	bne.n	8006680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006646:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006650:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666c:	f043 0204 	orr.w	r2, r3, #4
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e067      	b.n	8006750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006686:	d041      	beq.n	800670c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006688:	f7fe f88e 	bl	80047a8 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d302      	bcc.n	800669e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d136      	bne.n	800670c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	0c1b      	lsrs	r3, r3, #16
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d10c      	bne.n	80066c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	43da      	mvns	r2, r3
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bf14      	ite	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	2300      	moveq	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	e00b      	b.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	43da      	mvns	r2, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4013      	ands	r3, r2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bf14      	ite	ne
 80066d4:	2301      	movne	r3, #1
 80066d6:	2300      	moveq	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d016      	beq.n	800670c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f8:	f043 0220 	orr.w	r2, r3, #32
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e021      	b.n	8006750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	0c1b      	lsrs	r3, r3, #16
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b01      	cmp	r3, #1
 8006714:	d10c      	bne.n	8006730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	43da      	mvns	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4013      	ands	r3, r2
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	bf14      	ite	ne
 8006728:	2301      	movne	r3, #1
 800672a:	2300      	moveq	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	e00b      	b.n	8006748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	43da      	mvns	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4013      	ands	r3, r2
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	bf14      	ite	ne
 8006742:	2301      	movne	r3, #1
 8006744:	2300      	moveq	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	f47f af6d 	bne.w	8006628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006764:	e034      	b.n	80067d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f886 	bl	8006878 <I2C_IsAcknowledgeFailed>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e034      	b.n	80067e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d028      	beq.n	80067d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800677e:	f7fe f813 	bl	80047a8 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	d302      	bcc.n	8006794 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11d      	bne.n	80067d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679e:	2b80      	cmp	r3, #128	@ 0x80
 80067a0:	d016      	beq.n	80067d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067bc:	f043 0220 	orr.w	r2, r3, #32
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e007      	b.n	80067e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067da:	2b80      	cmp	r3, #128	@ 0x80
 80067dc:	d1c3      	bne.n	8006766 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067f4:	e034      	b.n	8006860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f83e 	bl	8006878 <I2C_IsAcknowledgeFailed>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e034      	b.n	8006870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d028      	beq.n	8006860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680e:	f7fd ffcb 	bl	80047a8 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	429a      	cmp	r2, r3
 800681c:	d302      	bcc.n	8006824 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d11d      	bne.n	8006860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b04      	cmp	r3, #4
 8006830:	d016      	beq.n	8006860 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684c:	f043 0220 	orr.w	r2, r3, #32
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e007      	b.n	8006870 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b04      	cmp	r3, #4
 800686c:	d1c3      	bne.n	80067f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800688a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800688e:	d11b      	bne.n	80068c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006898:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	f043 0204 	orr.w	r2, r3, #4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e267      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d075      	beq.n	80069e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80068f6:	4b88      	ldr	r3, [pc, #544]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 030c 	and.w	r3, r3, #12
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d00c      	beq.n	800691c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006902:	4b85      	ldr	r3, [pc, #532]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800690a:	2b08      	cmp	r3, #8
 800690c:	d112      	bne.n	8006934 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800690e:	4b82      	ldr	r3, [pc, #520]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006916:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800691a:	d10b      	bne.n	8006934 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691c:	4b7e      	ldr	r3, [pc, #504]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d05b      	beq.n	80069e0 <HAL_RCC_OscConfig+0x108>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d157      	bne.n	80069e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e242      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800693c:	d106      	bne.n	800694c <HAL_RCC_OscConfig+0x74>
 800693e:	4b76      	ldr	r3, [pc, #472]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a75      	ldr	r2, [pc, #468]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	e01d      	b.n	8006988 <HAL_RCC_OscConfig+0xb0>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006954:	d10c      	bne.n	8006970 <HAL_RCC_OscConfig+0x98>
 8006956:	4b70      	ldr	r3, [pc, #448]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a6f      	ldr	r2, [pc, #444]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 800695c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	4b6d      	ldr	r3, [pc, #436]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a6c      	ldr	r2, [pc, #432]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	e00b      	b.n	8006988 <HAL_RCC_OscConfig+0xb0>
 8006970:	4b69      	ldr	r3, [pc, #420]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a68      	ldr	r2, [pc, #416]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	4b66      	ldr	r3, [pc, #408]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a65      	ldr	r2, [pc, #404]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d013      	beq.n	80069b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006990:	f7fd ff0a 	bl	80047a8 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006998:	f7fd ff06 	bl	80047a8 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b64      	cmp	r3, #100	@ 0x64
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e207      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f0      	beq.n	8006998 <HAL_RCC_OscConfig+0xc0>
 80069b6:	e014      	b.n	80069e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fd fef6 	bl	80047a8 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c0:	f7fd fef2 	bl	80047a8 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b64      	cmp	r3, #100	@ 0x64
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e1f3      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069d2:	4b51      	ldr	r3, [pc, #324]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0xe8>
 80069de:	e000      	b.n	80069e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d063      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80069ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 030c 	and.w	r3, r3, #12
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069fa:	4b47      	ldr	r3, [pc, #284]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a02:	2b08      	cmp	r3, #8
 8006a04:	d11c      	bne.n	8006a40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a06:	4b44      	ldr	r3, [pc, #272]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d116      	bne.n	8006a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a12:	4b41      	ldr	r3, [pc, #260]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_RCC_OscConfig+0x152>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d001      	beq.n	8006a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e1c7      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	4937      	ldr	r1, [pc, #220]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a3e:	e03a      	b.n	8006ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d020      	beq.n	8006a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a48:	4b34      	ldr	r3, [pc, #208]	@ (8006b1c <HAL_RCC_OscConfig+0x244>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4e:	f7fd feab 	bl	80047a8 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a56:	f7fd fea7 	bl	80047a8 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e1a8      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a68:	4b2b      	ldr	r3, [pc, #172]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a74:	4b28      	ldr	r3, [pc, #160]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	4925      	ldr	r1, [pc, #148]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]
 8006a88:	e015      	b.n	8006ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a8a:	4b24      	ldr	r3, [pc, #144]	@ (8006b1c <HAL_RCC_OscConfig+0x244>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a90:	f7fd fe8a 	bl	80047a8 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a98:	f7fd fe86 	bl	80047a8 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e187      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d036      	beq.n	8006b30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aca:	4b15      	ldr	r3, [pc, #84]	@ (8006b20 <HAL_RCC_OscConfig+0x248>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad0:	f7fd fe6a 	bl	80047a8 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ad8:	f7fd fe66 	bl	80047a8 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e167      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aea:	4b0b      	ldr	r3, [pc, #44]	@ (8006b18 <HAL_RCC_OscConfig+0x240>)
 8006aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x200>
 8006af6:	e01b      	b.n	8006b30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006af8:	4b09      	ldr	r3, [pc, #36]	@ (8006b20 <HAL_RCC_OscConfig+0x248>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006afe:	f7fd fe53 	bl	80047a8 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b04:	e00e      	b.n	8006b24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b06:	f7fd fe4f 	bl	80047a8 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d907      	bls.n	8006b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e150      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	42470000 	.word	0x42470000
 8006b20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b24:	4b88      	ldr	r3, [pc, #544]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1ea      	bne.n	8006b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8097 	beq.w	8006c6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b42:	4b81      	ldr	r3, [pc, #516]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10f      	bne.n	8006b6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
 8006b52:	4b7d      	ldr	r3, [pc, #500]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b56:	4a7c      	ldr	r2, [pc, #496]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b5e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b66:	60bb      	str	r3, [r7, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b6e:	4b77      	ldr	r3, [pc, #476]	@ (8006d4c <HAL_RCC_OscConfig+0x474>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d118      	bne.n	8006bac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b7a:	4b74      	ldr	r3, [pc, #464]	@ (8006d4c <HAL_RCC_OscConfig+0x474>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a73      	ldr	r2, [pc, #460]	@ (8006d4c <HAL_RCC_OscConfig+0x474>)
 8006b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b86:	f7fd fe0f 	bl	80047a8 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b8e:	f7fd fe0b 	bl	80047a8 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e10c      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8006d4c <HAL_RCC_OscConfig+0x474>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d106      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x2ea>
 8006bb4:	4b64      	ldr	r3, [pc, #400]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb8:	4a63      	ldr	r2, [pc, #396]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bba:	f043 0301 	orr.w	r3, r3, #1
 8006bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bc0:	e01c      	b.n	8006bfc <HAL_RCC_OscConfig+0x324>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b05      	cmp	r3, #5
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCC_OscConfig+0x30c>
 8006bca:	4b5f      	ldr	r3, [pc, #380]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bce:	4a5e      	ldr	r2, [pc, #376]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bd0:	f043 0304 	orr.w	r3, r3, #4
 8006bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bda:	4a5b      	ldr	r2, [pc, #364]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	f043 0301 	orr.w	r3, r3, #1
 8006be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006be2:	e00b      	b.n	8006bfc <HAL_RCC_OscConfig+0x324>
 8006be4:	4b58      	ldr	r3, [pc, #352]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be8:	4a57      	ldr	r2, [pc, #348]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bf0:	4b55      	ldr	r3, [pc, #340]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf4:	4a54      	ldr	r2, [pc, #336]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006bf6:	f023 0304 	bic.w	r3, r3, #4
 8006bfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d015      	beq.n	8006c30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c04:	f7fd fdd0 	bl	80047a8 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0a:	e00a      	b.n	8006c22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0c:	f7fd fdcc 	bl	80047a8 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e0cb      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c22:	4b49      	ldr	r3, [pc, #292]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0ee      	beq.n	8006c0c <HAL_RCC_OscConfig+0x334>
 8006c2e:	e014      	b.n	8006c5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c30:	f7fd fdba 	bl	80047a8 <HAL_GetTick>
 8006c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c36:	e00a      	b.n	8006c4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c38:	f7fd fdb6 	bl	80047a8 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e0b5      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1ee      	bne.n	8006c38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d105      	bne.n	8006c6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c60:	4b39      	ldr	r3, [pc, #228]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c64:	4a38      	ldr	r2, [pc, #224]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a1 	beq.w	8006db8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c76:	4b34      	ldr	r3, [pc, #208]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f003 030c 	and.w	r3, r3, #12
 8006c7e:	2b08      	cmp	r3, #8
 8006c80:	d05c      	beq.n	8006d3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d141      	bne.n	8006d0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8a:	4b31      	ldr	r3, [pc, #196]	@ (8006d50 <HAL_RCC_OscConfig+0x478>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c90:	f7fd fd8a 	bl	80047a8 <HAL_GetTick>
 8006c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c98:	f7fd fd86 	bl	80047a8 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e087      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006caa:	4b27      	ldr	r3, [pc, #156]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f0      	bne.n	8006c98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69da      	ldr	r2, [r3, #28]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc4:	019b      	lsls	r3, r3, #6
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ccc:	085b      	lsrs	r3, r3, #1
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	061b      	lsls	r3, r3, #24
 8006cda:	491b      	ldr	r1, [pc, #108]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d50 <HAL_RCC_OscConfig+0x478>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce6:	f7fd fd5f 	bl	80047a8 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cee:	f7fd fd5b 	bl	80047a8 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e05c      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d00:	4b11      	ldr	r3, [pc, #68]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0f0      	beq.n	8006cee <HAL_RCC_OscConfig+0x416>
 8006d0c:	e054      	b.n	8006db8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d0e:	4b10      	ldr	r3, [pc, #64]	@ (8006d50 <HAL_RCC_OscConfig+0x478>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d14:	f7fd fd48 	bl	80047a8 <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d1c:	f7fd fd44 	bl	80047a8 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e045      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2e:	4b06      	ldr	r3, [pc, #24]	@ (8006d48 <HAL_RCC_OscConfig+0x470>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0x444>
 8006d3a:	e03d      	b.n	8006db8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d107      	bne.n	8006d54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e038      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	40007000 	.word	0x40007000
 8006d50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d54:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc4 <HAL_RCC_OscConfig+0x4ec>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d028      	beq.n	8006db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d121      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d11a      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d84:	4013      	ands	r3, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d111      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d107      	bne.n	8006db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d001      	beq.n	8006db8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40023800 	.word	0x40023800

08006dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0cc      	b.n	8006f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ddc:	4b68      	ldr	r3, [pc, #416]	@ (8006f80 <HAL_RCC_ClockConfig+0x1b8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d90c      	bls.n	8006e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dea:	4b65      	ldr	r3, [pc, #404]	@ (8006f80 <HAL_RCC_ClockConfig+0x1b8>)
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006df2:	4b63      	ldr	r3, [pc, #396]	@ (8006f80 <HAL_RCC_ClockConfig+0x1b8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d001      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e0b8      	b.n	8006f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d020      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e1c:	4b59      	ldr	r3, [pc, #356]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4a58      	ldr	r2, [pc, #352]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0308 	and.w	r3, r3, #8
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e34:	4b53      	ldr	r3, [pc, #332]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	4a52      	ldr	r2, [pc, #328]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e40:	4b50      	ldr	r3, [pc, #320]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	494d      	ldr	r1, [pc, #308]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d044      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d107      	bne.n	8006e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e66:	4b47      	ldr	r3, [pc, #284]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d119      	bne.n	8006ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e07f      	b.n	8006f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d003      	beq.n	8006e86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d107      	bne.n	8006e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e86:	4b3f      	ldr	r3, [pc, #252]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d109      	bne.n	8006ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e06f      	b.n	8006f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e96:	4b3b      	ldr	r3, [pc, #236]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e067      	b.n	8006f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ea6:	4b37      	ldr	r3, [pc, #220]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f023 0203 	bic.w	r2, r3, #3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	4934      	ldr	r1, [pc, #208]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006eb8:	f7fd fc76 	bl	80047a8 <HAL_GetTick>
 8006ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ebe:	e00a      	b.n	8006ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec0:	f7fd fc72 	bl	80047a8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e04f      	b.n	8006f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 020c 	and.w	r2, r3, #12
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d1eb      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ee8:	4b25      	ldr	r3, [pc, #148]	@ (8006f80 <HAL_RCC_ClockConfig+0x1b8>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d20c      	bcs.n	8006f10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ef6:	4b22      	ldr	r3, [pc, #136]	@ (8006f80 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efe:	4b20      	ldr	r3, [pc, #128]	@ (8006f80 <HAL_RCC_ClockConfig+0x1b8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d001      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e032      	b.n	8006f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f1c:	4b19      	ldr	r3, [pc, #100]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4916      	ldr	r1, [pc, #88]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0308 	and.w	r3, r3, #8
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d009      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f3a:	4b12      	ldr	r3, [pc, #72]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	490e      	ldr	r1, [pc, #56]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f4e:	f000 f821 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006f52:	4602      	mov	r2, r0
 8006f54:	4b0b      	ldr	r3, [pc, #44]	@ (8006f84 <HAL_RCC_ClockConfig+0x1bc>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	091b      	lsrs	r3, r3, #4
 8006f5a:	f003 030f 	and.w	r3, r3, #15
 8006f5e:	490a      	ldr	r1, [pc, #40]	@ (8006f88 <HAL_RCC_ClockConfig+0x1c0>)
 8006f60:	5ccb      	ldrb	r3, [r1, r3]
 8006f62:	fa22 f303 	lsr.w	r3, r2, r3
 8006f66:	4a09      	ldr	r2, [pc, #36]	@ (8006f8c <HAL_RCC_ClockConfig+0x1c4>)
 8006f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006f6a:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c8>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fb f9c0 	bl	80022f4 <HAL_InitTick>

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40023c00 	.word	0x40023c00
 8006f84:	40023800 	.word	0x40023800
 8006f88:	08014a28 	.word	0x08014a28
 8006f8c:	20000004 	.word	0x20000004
 8006f90:	20000014 	.word	0x20000014

08006f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f98:	b094      	sub	sp, #80	@ 0x50
 8006f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fac:	4b79      	ldr	r3, [pc, #484]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 030c 	and.w	r3, r3, #12
 8006fb4:	2b08      	cmp	r3, #8
 8006fb6:	d00d      	beq.n	8006fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	f200 80e1 	bhi.w	8007180 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d003      	beq.n	8006fce <HAL_RCC_GetSysClockFreq+0x3a>
 8006fc6:	e0db      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fc8:	4b73      	ldr	r3, [pc, #460]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fcc:	e0db      	b.n	8007186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fce:	4b73      	ldr	r3, [pc, #460]	@ (800719c <HAL_RCC_GetSysClockFreq+0x208>)
 8006fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fd2:	e0d8      	b.n	8007186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fdc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fde:	4b6d      	ldr	r3, [pc, #436]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d063      	beq.n	80070b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fea:	4b6a      	ldr	r3, [pc, #424]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ffe:	2300      	movs	r3, #0
 8007000:	637b      	str	r3, [r7, #52]	@ 0x34
 8007002:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007006:	4622      	mov	r2, r4
 8007008:	462b      	mov	r3, r5
 800700a:	f04f 0000 	mov.w	r0, #0
 800700e:	f04f 0100 	mov.w	r1, #0
 8007012:	0159      	lsls	r1, r3, #5
 8007014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007018:	0150      	lsls	r0, r2, #5
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4621      	mov	r1, r4
 8007020:	1a51      	subs	r1, r2, r1
 8007022:	6139      	str	r1, [r7, #16]
 8007024:	4629      	mov	r1, r5
 8007026:	eb63 0301 	sbc.w	r3, r3, r1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007038:	4659      	mov	r1, fp
 800703a:	018b      	lsls	r3, r1, #6
 800703c:	4651      	mov	r1, sl
 800703e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007042:	4651      	mov	r1, sl
 8007044:	018a      	lsls	r2, r1, #6
 8007046:	4651      	mov	r1, sl
 8007048:	ebb2 0801 	subs.w	r8, r2, r1
 800704c:	4659      	mov	r1, fp
 800704e:	eb63 0901 	sbc.w	r9, r3, r1
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800705e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007066:	4690      	mov	r8, r2
 8007068:	4699      	mov	r9, r3
 800706a:	4623      	mov	r3, r4
 800706c:	eb18 0303 	adds.w	r3, r8, r3
 8007070:	60bb      	str	r3, [r7, #8]
 8007072:	462b      	mov	r3, r5
 8007074:	eb49 0303 	adc.w	r3, r9, r3
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	f04f 0200 	mov.w	r2, #0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007086:	4629      	mov	r1, r5
 8007088:	024b      	lsls	r3, r1, #9
 800708a:	4621      	mov	r1, r4
 800708c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007090:	4621      	mov	r1, r4
 8007092:	024a      	lsls	r2, r1, #9
 8007094:	4610      	mov	r0, r2
 8007096:	4619      	mov	r1, r3
 8007098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800709a:	2200      	movs	r2, #0
 800709c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800709e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070a4:	f7f9 fd82 	bl	8000bac <__aeabi_uldivmod>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4613      	mov	r3, r2
 80070ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b0:	e058      	b.n	8007164 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b2:	4b38      	ldr	r3, [pc, #224]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x200>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	099b      	lsrs	r3, r3, #6
 80070b8:	2200      	movs	r2, #0
 80070ba:	4618      	mov	r0, r3
 80070bc:	4611      	mov	r1, r2
 80070be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070c2:	623b      	str	r3, [r7, #32]
 80070c4:	2300      	movs	r3, #0
 80070c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070cc:	4642      	mov	r2, r8
 80070ce:	464b      	mov	r3, r9
 80070d0:	f04f 0000 	mov.w	r0, #0
 80070d4:	f04f 0100 	mov.w	r1, #0
 80070d8:	0159      	lsls	r1, r3, #5
 80070da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070de:	0150      	lsls	r0, r2, #5
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4641      	mov	r1, r8
 80070e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80070ea:	4649      	mov	r1, r9
 80070ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007100:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007104:	ebb2 040a 	subs.w	r4, r2, sl
 8007108:	eb63 050b 	sbc.w	r5, r3, fp
 800710c:	f04f 0200 	mov.w	r2, #0
 8007110:	f04f 0300 	mov.w	r3, #0
 8007114:	00eb      	lsls	r3, r5, #3
 8007116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800711a:	00e2      	lsls	r2, r4, #3
 800711c:	4614      	mov	r4, r2
 800711e:	461d      	mov	r5, r3
 8007120:	4643      	mov	r3, r8
 8007122:	18e3      	adds	r3, r4, r3
 8007124:	603b      	str	r3, [r7, #0]
 8007126:	464b      	mov	r3, r9
 8007128:	eb45 0303 	adc.w	r3, r5, r3
 800712c:	607b      	str	r3, [r7, #4]
 800712e:	f04f 0200 	mov.w	r2, #0
 8007132:	f04f 0300 	mov.w	r3, #0
 8007136:	e9d7 4500 	ldrd	r4, r5, [r7]
 800713a:	4629      	mov	r1, r5
 800713c:	028b      	lsls	r3, r1, #10
 800713e:	4621      	mov	r1, r4
 8007140:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007144:	4621      	mov	r1, r4
 8007146:	028a      	lsls	r2, r1, #10
 8007148:	4610      	mov	r0, r2
 800714a:	4619      	mov	r1, r3
 800714c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800714e:	2200      	movs	r2, #0
 8007150:	61bb      	str	r3, [r7, #24]
 8007152:	61fa      	str	r2, [r7, #28]
 8007154:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007158:	f7f9 fd28 	bl	8000bac <__aeabi_uldivmod>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4613      	mov	r3, r2
 8007162:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007164:	4b0b      	ldr	r3, [pc, #44]	@ (8007194 <HAL_RCC_GetSysClockFreq+0x200>)
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	0c1b      	lsrs	r3, r3, #16
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	3301      	adds	r3, #1
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007174:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007178:	fbb2 f3f3 	udiv	r3, r2, r3
 800717c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800717e:	e002      	b.n	8007186 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <HAL_RCC_GetSysClockFreq+0x204>)
 8007182:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007188:	4618      	mov	r0, r3
 800718a:	3750      	adds	r7, #80	@ 0x50
 800718c:	46bd      	mov	sp, r7
 800718e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007192:	bf00      	nop
 8007194:	40023800 	.word	0x40023800
 8007198:	00f42400 	.word	0x00f42400
 800719c:	007a1200 	.word	0x007a1200

080071a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071a4:	4b03      	ldr	r3, [pc, #12]	@ (80071b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80071a6:	681b      	ldr	r3, [r3, #0]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20000004 	.word	0x20000004

080071b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071bc:	f7ff fff0 	bl	80071a0 <HAL_RCC_GetHCLKFreq>
 80071c0:	4602      	mov	r2, r0
 80071c2:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	0a9b      	lsrs	r3, r3, #10
 80071c8:	f003 0307 	and.w	r3, r3, #7
 80071cc:	4903      	ldr	r1, [pc, #12]	@ (80071dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80071ce:	5ccb      	ldrb	r3, [r1, r3]
 80071d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40023800 	.word	0x40023800
 80071dc:	08014a38 	.word	0x08014a38

080071e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071e4:	f7ff ffdc 	bl	80071a0 <HAL_RCC_GetHCLKFreq>
 80071e8:	4602      	mov	r2, r0
 80071ea:	4b05      	ldr	r3, [pc, #20]	@ (8007200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	0b5b      	lsrs	r3, r3, #13
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	4903      	ldr	r1, [pc, #12]	@ (8007204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071f6:	5ccb      	ldrb	r3, [r1, r3]
 80071f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40023800 	.word	0x40023800
 8007204:	08014a38 	.word	0x08014a38

08007208 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	220f      	movs	r2, #15
 8007216:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007218:	4b12      	ldr	r3, [pc, #72]	@ (8007264 <HAL_RCC_GetClockConfig+0x5c>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0203 	and.w	r2, r3, #3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007224:	4b0f      	ldr	r3, [pc, #60]	@ (8007264 <HAL_RCC_GetClockConfig+0x5c>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007230:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <HAL_RCC_GetClockConfig+0x5c>)
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800723c:	4b09      	ldr	r3, [pc, #36]	@ (8007264 <HAL_RCC_GetClockConfig+0x5c>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	08db      	lsrs	r3, r3, #3
 8007242:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800724a:	4b07      	ldr	r3, [pc, #28]	@ (8007268 <HAL_RCC_GetClockConfig+0x60>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0207 	and.w	r2, r3, #7
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	601a      	str	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800
 8007268:	40023c00 	.word	0x40023c00

0800726c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d105      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007290:	2b00      	cmp	r3, #0
 8007292:	d035      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007294:	4b67      	ldr	r3, [pc, #412]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800729a:	f7fd fa85 	bl	80047a8 <HAL_GetTick>
 800729e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072a0:	e008      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072a2:	f7fd fa81 	bl	80047a8 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d901      	bls.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e0ba      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072b4:	4b60      	ldr	r3, [pc, #384]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f0      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	019a      	lsls	r2, r3, #6
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	071b      	lsls	r3, r3, #28
 80072cc:	495a      	ldr	r1, [pc, #360]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072ce:	4313      	orrs	r3, r2
 80072d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072d4:	4b57      	ldr	r3, [pc, #348]	@ (8007434 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072da:	f7fd fa65 	bl	80047a8 <HAL_GetTick>
 80072de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072e0:	e008      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80072e2:	f7fd fa61 	bl	80047a8 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d901      	bls.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e09a      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072f4:	4b50      	ldr	r3, [pc, #320]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0f0      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8083 	beq.w	8007414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	4b49      	ldr	r3, [pc, #292]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007316:	4a48      	ldr	r2, [pc, #288]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800731c:	6413      	str	r3, [r2, #64]	@ 0x40
 800731e:	4b46      	ldr	r3, [pc, #280]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800732a:	4b44      	ldr	r3, [pc, #272]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a43      	ldr	r2, [pc, #268]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007334:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007336:	f7fd fa37 	bl	80047a8 <HAL_GetTick>
 800733a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800733c:	e008      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800733e:	f7fd fa33 	bl	80047a8 <HAL_GetTick>
 8007342:	4602      	mov	r2, r0
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d901      	bls.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e06c      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007350:	4b3a      	ldr	r3, [pc, #232]	@ (800743c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0f0      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800735c:	4b36      	ldr	r3, [pc, #216]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800735e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007364:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d02f      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	429a      	cmp	r2, r3
 8007378:	d028      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800737a:	4b2f      	ldr	r3, [pc, #188]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007382:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007384:	4b2e      	ldr	r3, [pc, #184]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007386:	2201      	movs	r2, #1
 8007388:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800738a:	4b2d      	ldr	r3, [pc, #180]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007390:	4a29      	ldr	r2, [pc, #164]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007396:	4b28      	ldr	r3, [pc, #160]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d114      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073a2:	f7fd fa01 	bl	80047a8 <HAL_GetTick>
 80073a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a8:	e00a      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073aa:	f7fd f9fd 	bl	80047a8 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d901      	bls.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e034      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0ee      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073d8:	d10d      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80073da:	4b17      	ldr	r3, [pc, #92]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80073ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ee:	4912      	ldr	r1, [pc, #72]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	608b      	str	r3, [r1, #8]
 80073f4:	e005      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073f6:	4b10      	ldr	r3, [pc, #64]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	4a0f      	ldr	r2, [pc, #60]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80073fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007400:	6093      	str	r3, [r2, #8]
 8007402:	4b0d      	ldr	r3, [pc, #52]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007404:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800740e:	490a      	ldr	r1, [pc, #40]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007410:	4313      	orrs	r3, r2
 8007412:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	7c1a      	ldrb	r2, [r3, #16]
 8007424:	4b07      	ldr	r3, [pc, #28]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007426:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	42470068 	.word	0x42470068
 8007438:	40023800 	.word	0x40023800
 800743c:	40007000 	.word	0x40007000
 8007440:	42470e40 	.word	0x42470e40
 8007444:	424711e0 	.word	0x424711e0

08007448 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e073      	b.n	8007546 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7f5b      	ldrb	r3, [r3, #29]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fa fe4a 	bl	8002108 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b10      	cmp	r3, #16
 8007486:	d055      	beq.n	8007534 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	22ca      	movs	r2, #202	@ 0xca
 800748e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2253      	movs	r2, #83	@ 0x53
 8007496:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fa49 	bl	8007930 <RTC_EnterInitMode>
 800749e:	4603      	mov	r3, r0
 80074a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d12c      	bne.n	8007502 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80074b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6899      	ldr	r1, [r3, #8]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	68d2      	ldr	r2, [r2, #12]
 80074e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6919      	ldr	r1, [r3, #16]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	041a      	lsls	r2, r3, #16
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fa50 	bl	800799e <RTC_ExitInitMode>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d110      	bne.n	800752a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007516:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	22ff      	movs	r2, #255	@ 0xff
 8007530:	625a      	str	r2, [r3, #36]	@ 0x24
 8007532:	e001      	b.n	8007538 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800754e:	b590      	push	{r4, r7, lr}
 8007550:	b087      	sub	sp, #28
 8007552:	af00      	add	r7, sp, #0
 8007554:	60f8      	str	r0, [r7, #12]
 8007556:	60b9      	str	r1, [r7, #8]
 8007558:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	7f1b      	ldrb	r3, [r3, #28]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_RTC_SetTime+0x1c>
 8007566:	2302      	movs	r3, #2
 8007568:	e087      	b.n	800767a <HAL_RTC_SetTime+0x12c>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2202      	movs	r2, #2
 8007574:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d126      	bne.n	80075ca <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2200      	movs	r2, #0
 800758e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fa27 	bl	80079e8 <RTC_ByteToBcd2>
 800759a:	4603      	mov	r3, r0
 800759c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 fa20 	bl	80079e8 <RTC_ByteToBcd2>
 80075a8:	4603      	mov	r3, r0
 80075aa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075ac:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	789b      	ldrb	r3, [r3, #2]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 fa18 	bl	80079e8 <RTC_ByteToBcd2>
 80075b8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80075ba:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	78db      	ldrb	r3, [r3, #3]
 80075c2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]
 80075c8:	e018      	b.n	80075fc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	785b      	ldrb	r3, [r3, #1]
 80075e8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80075ea:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80075f0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	78db      	ldrb	r3, [r3, #3]
 80075f6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	22ca      	movs	r2, #202	@ 0xca
 8007602:	625a      	str	r2, [r3, #36]	@ 0x24
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2253      	movs	r2, #83	@ 0x53
 800760a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 f98f 	bl	8007930 <RTC_EnterInitMode>
 8007612:	4603      	mov	r3, r0
 8007614:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007616:	7cfb      	ldrb	r3, [r7, #19]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d120      	bne.n	800765e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007626:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800762a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800763a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6899      	ldr	r1, [r3, #8]
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	431a      	orrs	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f9a2 	bl	800799e <RTC_ExitInitMode>
 800765a:	4603      	mov	r3, r0
 800765c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800765e:	7cfb      	ldrb	r3, [r7, #19]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	22ff      	movs	r2, #255	@ 0xff
 8007670:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	771a      	strb	r2, [r3, #28]

  return status;
 8007678:	7cfb      	ldrb	r3, [r7, #19]
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	bd90      	pop	{r4, r7, pc}

08007682 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80076b4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80076b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	0c1b      	lsrs	r3, r3, #16
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	0d9b      	lsrs	r3, r3, #22
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d11a      	bne.n	8007734 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f98e 	bl	8007a24 <RTC_Bcd2ToByte>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	4618      	mov	r0, r3
 8007716:	f000 f985 	bl	8007a24 <RTC_Bcd2ToByte>
 800771a:	4603      	mov	r3, r0
 800771c:	461a      	mov	r2, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 f97c 	bl	8007a24 <RTC_Bcd2ToByte>
 800772c:	4603      	mov	r3, r0
 800772e:	461a      	mov	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800773e:	b590      	push	{r4, r7, lr}
 8007740:	b087      	sub	sp, #28
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	7f1b      	ldrb	r3, [r3, #28]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_RTC_SetDate+0x1c>
 8007756:	2302      	movs	r3, #2
 8007758:	e071      	b.n	800783e <HAL_RTC_SetDate+0x100>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2202      	movs	r2, #2
 8007764:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10e      	bne.n	800778a <HAL_RTC_SetDate+0x4c>
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	785b      	ldrb	r3, [r3, #1]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	d008      	beq.n	800778a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	f023 0310 	bic.w	r3, r3, #16
 8007780:	b2db      	uxtb	r3, r3
 8007782:	330a      	adds	r3, #10
 8007784:	b2da      	uxtb	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d11c      	bne.n	80077ca <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	78db      	ldrb	r3, [r3, #3]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f927 	bl	80079e8 <RTC_ByteToBcd2>
 800779a:	4603      	mov	r3, r0
 800779c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 f920 	bl	80079e8 <RTC_ByteToBcd2>
 80077a8:	4603      	mov	r3, r0
 80077aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80077ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	789b      	ldrb	r3, [r3, #2]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 f918 	bl	80079e8 <RTC_ByteToBcd2>
 80077b8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80077ba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80077c4:	4313      	orrs	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e00e      	b.n	80077e8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	78db      	ldrb	r3, [r3, #3]
 80077ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	785b      	ldrb	r3, [r3, #1]
 80077d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077d6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80077dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	22ca      	movs	r2, #202	@ 0xca
 80077ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2253      	movs	r2, #83	@ 0x53
 80077f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f899 	bl	8007930 <RTC_EnterInitMode>
 80077fe:	4603      	mov	r3, r0
 8007800:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007802:	7cfb      	ldrb	r3, [r7, #19]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10c      	bne.n	8007822 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007812:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007816:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f8c0 	bl	800799e <RTC_ExitInitMode>
 800781e:	4603      	mov	r3, r0
 8007820:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007822:	7cfb      	ldrb	r3, [r7, #19]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d102      	bne.n	800782e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	22ff      	movs	r2, #255	@ 0xff
 8007834:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	771a      	strb	r2, [r3, #28]

  return status;
 800783c:	7cfb      	ldrb	r3, [r7, #19]
}
 800783e:	4618      	mov	r0, r3
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	bd90      	pop	{r4, r7, pc}

08007846 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007860:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007864:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	0a1b      	lsrs	r3, r3, #8
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007888:	b2da      	uxtb	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	0b5b      	lsrs	r3, r3, #13
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0307 	and.w	r3, r3, #7
 8007898:	b2da      	uxtb	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d11a      	bne.n	80078da <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f000 f8bb 	bl	8007a24 <RTC_Bcd2ToByte>
 80078ae:	4603      	mov	r3, r0
 80078b0:	461a      	mov	r2, r3
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f8b2 	bl	8007a24 <RTC_Bcd2ToByte>
 80078c0:	4603      	mov	r3, r0
 80078c2:	461a      	mov	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	789b      	ldrb	r3, [r3, #2]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 f8a9 	bl	8007a24 <RTC_Bcd2ToByte>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a0d      	ldr	r2, [pc, #52]	@ (800792c <HAL_RTC_WaitForSynchro+0x48>)
 80078f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f8:	f7fc ff56 	bl	80047a8 <HAL_GetTick>
 80078fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80078fe:	e009      	b.n	8007914 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007900:	f7fc ff52 	bl	80047a8 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800790e:	d901      	bls.n	8007914 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e007      	b.n	8007924 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0ee      	beq.n	8007900 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	00013f5f 	.word	0x00013f5f

08007930 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d122      	bne.n	8007994 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800795c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800795e:	f7fc ff23 	bl	80047a8 <HAL_GetTick>
 8007962:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007964:	e00c      	b.n	8007980 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007966:	f7fc ff1f 	bl	80047a8 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007974:	d904      	bls.n	8007980 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2204      	movs	r2, #4
 800797a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <RTC_EnterInitMode+0x64>
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d1e8      	bne.n	8007966 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007994:	7bfb      	ldrb	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ff8b 	bl	80078e4 <HAL_RTC_WaitForSynchro>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2204      	movs	r2, #4
 80079d8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	4603      	mov	r3, r0
 80079f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80079f6:	e005      	b.n	8007a04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3301      	adds	r3, #1
 80079fc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	3b0a      	subs	r3, #10
 8007a02:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	2b09      	cmp	r3, #9
 8007a08:	d8f6      	bhi.n	80079f8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	b2db      	uxtb	r3, r3
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007a32:	79fb      	ldrb	r3, [r7, #7]
 8007a34:	091b      	lsrs	r3, r3, #4
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	4413      	add	r3, r2
 8007a52:	b2db      	uxtb	r3, r3
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e07b      	b.n	8007b6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d108      	bne.n	8007a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a82:	d009      	beq.n	8007a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	61da      	str	r2, [r3, #28]
 8007a8a:	e005      	b.n	8007a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d106      	bne.n	8007ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fa fb54 	bl	8002160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ace:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	431a      	orrs	r2, r3
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b12:	431a      	orrs	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1c:	ea42 0103 	orr.w	r1, r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	0c1b      	lsrs	r3, r3, #16
 8007b36:	f003 0104 	and.w	r1, r3, #4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3e:	f003 0210 	and.w	r2, r3, #16
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69da      	ldr	r2, [r3, #28]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b088      	sub	sp, #32
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	603b      	str	r3, [r7, #0]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b82:	f7fc fe11 	bl	80047a8 <HAL_GetTick>
 8007b86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d001      	beq.n	8007b9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e12a      	b.n	8007df2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_SPI_Transmit+0x36>
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e122      	b.n	8007df2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_SPI_Transmit+0x48>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e11b      	b.n	8007df2 <HAL_SPI_Transmit+0x280>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2203      	movs	r2, #3
 8007bc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	88fa      	ldrh	r2, [r7, #6]
 8007bda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	88fa      	ldrh	r2, [r7, #6]
 8007be0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c08:	d10f      	bne.n	8007c2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c34:	2b40      	cmp	r3, #64	@ 0x40
 8007c36:	d007      	beq.n	8007c48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c50:	d152      	bne.n	8007cf8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_SPI_Transmit+0xee>
 8007c5a:	8b7b      	ldrh	r3, [r7, #26]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d145      	bne.n	8007cec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c64:	881a      	ldrh	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c70:	1c9a      	adds	r2, r3, #2
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007c84:	e032      	b.n	8007cec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d112      	bne.n	8007cba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c98:	881a      	ldrh	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca4:	1c9a      	adds	r2, r3, #2
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007cb8:	e018      	b.n	8007cec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cba:	f7fc fd75 	bl	80047a8 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d803      	bhi.n	8007cd2 <HAL_SPI_Transmit+0x160>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd0:	d102      	bne.n	8007cd8 <HAL_SPI_Transmit+0x166>
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d109      	bne.n	8007cec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e082      	b.n	8007df2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1c7      	bne.n	8007c86 <HAL_SPI_Transmit+0x114>
 8007cf6:	e053      	b.n	8007da0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <HAL_SPI_Transmit+0x194>
 8007d00:	8b7b      	ldrh	r3, [r7, #26]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d147      	bne.n	8007d96 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	330c      	adds	r3, #12
 8007d10:	7812      	ldrb	r2, [r2, #0]
 8007d12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3b01      	subs	r3, #1
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007d2c:	e033      	b.n	8007d96 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d113      	bne.n	8007d64 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	7812      	ldrb	r2, [r2, #0]
 8007d48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007d62:	e018      	b.n	8007d96 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d64:	f7fc fd20 	bl	80047a8 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d803      	bhi.n	8007d7c <HAL_SPI_Transmit+0x20a>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7a:	d102      	bne.n	8007d82 <HAL_SPI_Transmit+0x210>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e02d      	b.n	8007df2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1c6      	bne.n	8007d2e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	6839      	ldr	r1, [r7, #0]
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fa67 	bl	8008278 <SPI_EndRxTxTransaction>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2220      	movs	r2, #32
 8007db4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	617b      	str	r3, [r7, #20]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	617b      	str	r3, [r7, #20]
 8007dd2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007df0:	2300      	movs	r3, #0
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b08a      	sub	sp, #40	@ 0x28
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e0c:	f7fc fccc 	bl	80047a8 <HAL_GetTick>
 8007e10:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e18:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007e20:	887b      	ldrh	r3, [r7, #2]
 8007e22:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e24:	7ffb      	ldrb	r3, [r7, #31]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d00c      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x4a>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e30:	d106      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <HAL_SPI_TransmitReceive+0x46>
 8007e3a:	7ffb      	ldrb	r3, [r7, #31]
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	d001      	beq.n	8007e44 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007e40:	2302      	movs	r3, #2
 8007e42:	e17f      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d005      	beq.n	8007e56 <HAL_SPI_TransmitReceive+0x5c>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <HAL_SPI_TransmitReceive+0x5c>
 8007e50:	887b      	ldrh	r3, [r7, #2]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e174      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_SPI_TransmitReceive+0x6e>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e16d      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d003      	beq.n	8007e84 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2205      	movs	r2, #5
 8007e80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	887a      	ldrh	r2, [r7, #2]
 8007e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	887a      	ldrh	r2, [r7, #2]
 8007e9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	887a      	ldrh	r2, [r7, #2]
 8007ea6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	887a      	ldrh	r2, [r7, #2]
 8007eac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec4:	2b40      	cmp	r3, #64	@ 0x40
 8007ec6:	d007      	beq.n	8007ed8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ee0:	d17e      	bne.n	8007fe0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_SPI_TransmitReceive+0xf6>
 8007eea:	8afb      	ldrh	r3, [r7, #22]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d16c      	bne.n	8007fca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef4:	881a      	ldrh	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f00:	1c9a      	adds	r2, r3, #2
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f14:	e059      	b.n	8007fca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d11b      	bne.n	8007f5c <HAL_SPI_TransmitReceive+0x162>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d016      	beq.n	8007f5c <HAL_SPI_TransmitReceive+0x162>
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d113      	bne.n	8007f5c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f38:	881a      	ldrh	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f44:	1c9a      	adds	r2, r3, #2
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	3b01      	subs	r3, #1
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d119      	bne.n	8007f9e <HAL_SPI_TransmitReceive+0x1a4>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d014      	beq.n	8007f9e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f86:	1c9a      	adds	r2, r3, #2
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	3b01      	subs	r3, #1
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f9e:	f7fc fc03 	bl	80047a8 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d80d      	bhi.n	8007fca <HAL_SPI_TransmitReceive+0x1d0>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb4:	d009      	beq.n	8007fca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e0bc      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1a0      	bne.n	8007f16 <HAL_SPI_TransmitReceive+0x11c>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d19b      	bne.n	8007f16 <HAL_SPI_TransmitReceive+0x11c>
 8007fde:	e082      	b.n	80080e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <HAL_SPI_TransmitReceive+0x1f4>
 8007fe8:	8afb      	ldrh	r3, [r7, #22]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d171      	bne.n	80080d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	330c      	adds	r3, #12
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	b29a      	uxth	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008014:	e05d      	b.n	80080d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b02      	cmp	r3, #2
 8008022:	d11c      	bne.n	800805e <HAL_SPI_TransmitReceive+0x264>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d017      	beq.n	800805e <HAL_SPI_TransmitReceive+0x264>
 800802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008030:	2b01      	cmp	r3, #1
 8008032:	d114      	bne.n	800805e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	330c      	adds	r3, #12
 800803e:	7812      	ldrb	r2, [r2, #0]
 8008040:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b01      	cmp	r3, #1
 800806a:	d119      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x2a6>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d014      	beq.n	80080a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008080:	b2d2      	uxtb	r2, r2
 8008082:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800809c:	2301      	movs	r3, #1
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080a0:	f7fc fb82 	bl	80047a8 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d803      	bhi.n	80080b8 <HAL_SPI_TransmitReceive+0x2be>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d102      	bne.n	80080be <HAL_SPI_TransmitReceive+0x2c4>
 80080b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d109      	bne.n	80080d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e038      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d19c      	bne.n	8008016 <HAL_SPI_TransmitReceive+0x21c>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d197      	bne.n	8008016 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080e6:	6a3a      	ldr	r2, [r7, #32]
 80080e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 f8c4 	bl	8008278 <SPI_EndRxTxTransaction>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d008      	beq.n	8008108 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e01d      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10a      	bne.n	8008126 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	613b      	str	r3, [r7, #16]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008142:	2300      	movs	r3, #0
  }
}
 8008144:	4618      	mov	r0, r3
 8008146:	3728      	adds	r7, #40	@ 0x28
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800815a:	b2db      	uxtb	r3, r3
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	603b      	str	r3, [r7, #0]
 8008174:	4613      	mov	r3, r2
 8008176:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008178:	f7fc fb16 	bl	80047a8 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008180:	1a9b      	subs	r3, r3, r2
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4413      	add	r3, r2
 8008186:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008188:	f7fc fb0e 	bl	80047a8 <HAL_GetTick>
 800818c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800818e:	4b39      	ldr	r3, [pc, #228]	@ (8008274 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	015b      	lsls	r3, r3, #5
 8008194:	0d1b      	lsrs	r3, r3, #20
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	fb02 f303 	mul.w	r3, r2, r3
 800819c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800819e:	e054      	b.n	800824a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a6:	d050      	beq.n	800824a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081a8:	f7fc fafe 	bl	80047a8 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	69fa      	ldr	r2, [r7, #28]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d902      	bls.n	80081be <SPI_WaitFlagStateUntilTimeout+0x56>
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d13d      	bne.n	800823a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081d6:	d111      	bne.n	80081fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e0:	d004      	beq.n	80081ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ea:	d107      	bne.n	80081fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008204:	d10f      	bne.n	8008226 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008224:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e017      	b.n	800826a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	3b01      	subs	r3, #1
 8008248:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4013      	ands	r3, r2
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	429a      	cmp	r2, r3
 8008258:	bf0c      	ite	eq
 800825a:	2301      	moveq	r3, #1
 800825c:	2300      	movne	r3, #0
 800825e:	b2db      	uxtb	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	429a      	cmp	r2, r3
 8008266:	d19b      	bne.n	80081a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3720      	adds	r7, #32
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000004 	.word	0x20000004

08008278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b088      	sub	sp, #32
 800827c:	af02      	add	r7, sp, #8
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2201      	movs	r2, #1
 800828c:	2102      	movs	r1, #2
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7ff ff6a 	bl	8008168 <SPI_WaitFlagStateUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800829e:	f043 0220 	orr.w	r2, r3, #32
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e032      	b.n	8008310 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008318 <SPI_EndRxTxTransaction+0xa0>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a1b      	ldr	r2, [pc, #108]	@ (800831c <SPI_EndRxTxTransaction+0xa4>)
 80082b0:	fba2 2303 	umull	r2, r3, r2, r3
 80082b4:	0d5b      	lsrs	r3, r3, #21
 80082b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80082ba:	fb02 f303 	mul.w	r3, r2, r3
 80082be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082c8:	d112      	bne.n	80082f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2180      	movs	r1, #128	@ 0x80
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff ff47 	bl	8008168 <SPI_WaitFlagStateUntilTimeout>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d016      	beq.n	800830e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e4:	f043 0220 	orr.w	r2, r3, #32
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e00f      	b.n	8008310 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008306:	2b80      	cmp	r3, #128	@ 0x80
 8008308:	d0f2      	beq.n	80082f0 <SPI_EndRxTxTransaction+0x78>
 800830a:	e000      	b.n	800830e <SPI_EndRxTxTransaction+0x96>
        break;
 800830c:	bf00      	nop
  }

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20000004 	.word	0x20000004
 800831c:	165e9f81 	.word	0x165e9f81

08008320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e041      	b.n	80083b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7f9 ff64 	bl	8002214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	3304      	adds	r3, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f000 fa9e 	bl	80088a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d001      	beq.n	80083d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e044      	b.n	8008462 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008470 <HAL_TIM_Base_Start_IT+0xb0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d018      	beq.n	800842c <HAL_TIM_Base_Start_IT+0x6c>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008402:	d013      	beq.n	800842c <HAL_TIM_Base_Start_IT+0x6c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1a      	ldr	r2, [pc, #104]	@ (8008474 <HAL_TIM_Base_Start_IT+0xb4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d00e      	beq.n	800842c <HAL_TIM_Base_Start_IT+0x6c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a19      	ldr	r2, [pc, #100]	@ (8008478 <HAL_TIM_Base_Start_IT+0xb8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d009      	beq.n	800842c <HAL_TIM_Base_Start_IT+0x6c>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a17      	ldr	r2, [pc, #92]	@ (800847c <HAL_TIM_Base_Start_IT+0xbc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d004      	beq.n	800842c <HAL_TIM_Base_Start_IT+0x6c>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a16      	ldr	r2, [pc, #88]	@ (8008480 <HAL_TIM_Base_Start_IT+0xc0>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d111      	bne.n	8008450 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b06      	cmp	r3, #6
 800843c:	d010      	beq.n	8008460 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0201 	orr.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844e:	e007      	b.n	8008460 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	40010000 	.word	0x40010000
 8008474:	40000400 	.word	0x40000400
 8008478:	40000800 	.word	0x40000800
 800847c:	40000c00 	.word	0x40000c00
 8008480:	40014000 	.word	0x40014000

08008484 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6a1a      	ldr	r2, [r3, #32]
 80084a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80084a6:	4013      	ands	r3, r2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10f      	bne.n	80084cc <HAL_TIM_Base_Stop_IT+0x48>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6a1a      	ldr	r2, [r3, #32]
 80084b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80084b6:	4013      	ands	r3, r2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d107      	bne.n	80084cc <HAL_TIM_Base_Stop_IT+0x48>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f022 0201 	bic.w	r2, r2, #1
 80084ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d020      	beq.n	8008546 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01b      	beq.n	8008546 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f06f 0202 	mvn.w	r2, #2
 8008516:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	f003 0303 	and.w	r3, r3, #3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f999 	bl	8008864 <HAL_TIM_IC_CaptureCallback>
 8008532:	e005      	b.n	8008540 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f98b 	bl	8008850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f99c 	bl	8008878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d020      	beq.n	8008592 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f003 0304 	and.w	r3, r3, #4
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01b      	beq.n	8008592 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f06f 0204 	mvn.w	r2, #4
 8008562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 f973 	bl	8008864 <HAL_TIM_IC_CaptureCallback>
 800857e:	e005      	b.n	800858c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f965 	bl	8008850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f976 	bl	8008878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b00      	cmp	r3, #0
 800859a:	d020      	beq.n	80085de <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d01b      	beq.n	80085de <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f06f 0208 	mvn.w	r2, #8
 80085ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2204      	movs	r2, #4
 80085b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	f003 0303 	and.w	r3, r3, #3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f94d 	bl	8008864 <HAL_TIM_IC_CaptureCallback>
 80085ca:	e005      	b.n	80085d8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f93f 	bl	8008850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f950 	bl	8008878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f003 0310 	and.w	r3, r3, #16
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d020      	beq.n	800862a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d01b      	beq.n	800862a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f06f 0210 	mvn.w	r2, #16
 80085fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2208      	movs	r2, #8
 8008600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800860c:	2b00      	cmp	r3, #0
 800860e:	d003      	beq.n	8008618 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f927 	bl	8008864 <HAL_TIM_IC_CaptureCallback>
 8008616:	e005      	b.n	8008624 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f919 	bl	8008850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f92a 	bl	8008878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00c      	beq.n	800864e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d007      	beq.n	800864e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f06f 0201 	mvn.w	r2, #1
 8008646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7f9 fc55 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00c      	beq.n	8008672 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800865e:	2b00      	cmp	r3, #0
 8008660:	d007      	beq.n	8008672 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800866a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fab5 	bl	8008bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00c      	beq.n	8008696 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800868e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f8fb 	bl	800888c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f003 0320 	and.w	r3, r3, #32
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d007      	beq.n	80086ba <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f06f 0220 	mvn.w	r2, #32
 80086b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa87 	bl	8008bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086ba:	bf00      	nop
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b084      	sub	sp, #16
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d101      	bne.n	80086de <HAL_TIM_ConfigClockSource+0x1c>
 80086da:	2302      	movs	r3, #2
 80086dc:	e0b4      	b.n	8008848 <HAL_TIM_ConfigClockSource+0x186>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2202      	movs	r2, #2
 80086ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80086fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008704:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008716:	d03e      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0xd4>
 8008718:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800871c:	f200 8087 	bhi.w	800882e <HAL_TIM_ConfigClockSource+0x16c>
 8008720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008724:	f000 8086 	beq.w	8008834 <HAL_TIM_ConfigClockSource+0x172>
 8008728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800872c:	d87f      	bhi.n	800882e <HAL_TIM_ConfigClockSource+0x16c>
 800872e:	2b70      	cmp	r3, #112	@ 0x70
 8008730:	d01a      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0xa6>
 8008732:	2b70      	cmp	r3, #112	@ 0x70
 8008734:	d87b      	bhi.n	800882e <HAL_TIM_ConfigClockSource+0x16c>
 8008736:	2b60      	cmp	r3, #96	@ 0x60
 8008738:	d050      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0x11a>
 800873a:	2b60      	cmp	r3, #96	@ 0x60
 800873c:	d877      	bhi.n	800882e <HAL_TIM_ConfigClockSource+0x16c>
 800873e:	2b50      	cmp	r3, #80	@ 0x50
 8008740:	d03c      	beq.n	80087bc <HAL_TIM_ConfigClockSource+0xfa>
 8008742:	2b50      	cmp	r3, #80	@ 0x50
 8008744:	d873      	bhi.n	800882e <HAL_TIM_ConfigClockSource+0x16c>
 8008746:	2b40      	cmp	r3, #64	@ 0x40
 8008748:	d058      	beq.n	80087fc <HAL_TIM_ConfigClockSource+0x13a>
 800874a:	2b40      	cmp	r3, #64	@ 0x40
 800874c:	d86f      	bhi.n	800882e <HAL_TIM_ConfigClockSource+0x16c>
 800874e:	2b30      	cmp	r3, #48	@ 0x30
 8008750:	d064      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x15a>
 8008752:	2b30      	cmp	r3, #48	@ 0x30
 8008754:	d86b      	bhi.n	800882e <HAL_TIM_ConfigClockSource+0x16c>
 8008756:	2b20      	cmp	r3, #32
 8008758:	d060      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x15a>
 800875a:	2b20      	cmp	r3, #32
 800875c:	d867      	bhi.n	800882e <HAL_TIM_ConfigClockSource+0x16c>
 800875e:	2b00      	cmp	r3, #0
 8008760:	d05c      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x15a>
 8008762:	2b10      	cmp	r3, #16
 8008764:	d05a      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x15a>
 8008766:	e062      	b.n	800882e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008778:	f000 f998 	bl	8008aac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800878a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	609a      	str	r2, [r3, #8]
      break;
 8008794:	e04f      	b.n	8008836 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087a6:	f000 f981 	bl	8008aac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087b8:	609a      	str	r2, [r3, #8]
      break;
 80087ba:	e03c      	b.n	8008836 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087c8:	461a      	mov	r2, r3
 80087ca:	f000 f8f5 	bl	80089b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2150      	movs	r1, #80	@ 0x50
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 f94e 	bl	8008a76 <TIM_ITRx_SetConfig>
      break;
 80087da:	e02c      	b.n	8008836 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087e8:	461a      	mov	r2, r3
 80087ea:	f000 f914 	bl	8008a16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2160      	movs	r1, #96	@ 0x60
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 f93e 	bl	8008a76 <TIM_ITRx_SetConfig>
      break;
 80087fa:	e01c      	b.n	8008836 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008808:	461a      	mov	r2, r3
 800880a:	f000 f8d5 	bl	80089b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2140      	movs	r1, #64	@ 0x40
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f92e 	bl	8008a76 <TIM_ITRx_SetConfig>
      break;
 800881a:	e00c      	b.n	8008836 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4619      	mov	r1, r3
 8008826:	4610      	mov	r0, r2
 8008828:	f000 f925 	bl	8008a76 <TIM_ITRx_SetConfig>
      break;
 800882c:	e003      	b.n	8008836 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	73fb      	strb	r3, [r7, #15]
      break;
 8008832:	e000      	b.n	8008836 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008834:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008846:	7bfb      	ldrb	r3, [r7, #15]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a3a      	ldr	r2, [pc, #232]	@ (800899c <TIM_Base_SetConfig+0xfc>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d00f      	beq.n	80088d8 <TIM_Base_SetConfig+0x38>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088be:	d00b      	beq.n	80088d8 <TIM_Base_SetConfig+0x38>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4a37      	ldr	r2, [pc, #220]	@ (80089a0 <TIM_Base_SetConfig+0x100>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d007      	beq.n	80088d8 <TIM_Base_SetConfig+0x38>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a36      	ldr	r2, [pc, #216]	@ (80089a4 <TIM_Base_SetConfig+0x104>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d003      	beq.n	80088d8 <TIM_Base_SetConfig+0x38>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a35      	ldr	r2, [pc, #212]	@ (80089a8 <TIM_Base_SetConfig+0x108>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d108      	bne.n	80088ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a2b      	ldr	r2, [pc, #172]	@ (800899c <TIM_Base_SetConfig+0xfc>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01b      	beq.n	800892a <TIM_Base_SetConfig+0x8a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088f8:	d017      	beq.n	800892a <TIM_Base_SetConfig+0x8a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a28      	ldr	r2, [pc, #160]	@ (80089a0 <TIM_Base_SetConfig+0x100>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <TIM_Base_SetConfig+0x8a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a27      	ldr	r2, [pc, #156]	@ (80089a4 <TIM_Base_SetConfig+0x104>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00f      	beq.n	800892a <TIM_Base_SetConfig+0x8a>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a26      	ldr	r2, [pc, #152]	@ (80089a8 <TIM_Base_SetConfig+0x108>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00b      	beq.n	800892a <TIM_Base_SetConfig+0x8a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a25      	ldr	r2, [pc, #148]	@ (80089ac <TIM_Base_SetConfig+0x10c>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d007      	beq.n	800892a <TIM_Base_SetConfig+0x8a>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a24      	ldr	r2, [pc, #144]	@ (80089b0 <TIM_Base_SetConfig+0x110>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d003      	beq.n	800892a <TIM_Base_SetConfig+0x8a>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a23      	ldr	r2, [pc, #140]	@ (80089b4 <TIM_Base_SetConfig+0x114>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d108      	bne.n	800893c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a0e      	ldr	r2, [pc, #56]	@ (800899c <TIM_Base_SetConfig+0xfc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d103      	bne.n	8008970 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b01      	cmp	r3, #1
 8008980:	d105      	bne.n	800898e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f023 0201 	bic.w	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	611a      	str	r2, [r3, #16]
  }
}
 800898e:	bf00      	nop
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	40010000 	.word	0x40010000
 80089a0:	40000400 	.word	0x40000400
 80089a4:	40000800 	.word	0x40000800
 80089a8:	40000c00 	.word	0x40000c00
 80089ac:	40014000 	.word	0x40014000
 80089b0:	40014400 	.word	0x40014400
 80089b4:	40014800 	.word	0x40014800

080089b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	f023 0201 	bic.w	r2, r3, #1
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f023 030a 	bic.w	r3, r3, #10
 80089f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	621a      	str	r2, [r3, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	371c      	adds	r7, #28
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b087      	sub	sp, #28
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	f023 0210 	bic.w	r2, r3, #16
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	031b      	lsls	r3, r3, #12
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	621a      	str	r2, [r3, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b085      	sub	sp, #20
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f043 0307 	orr.w	r3, r3, #7
 8008a98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	609a      	str	r2, [r3, #8]
}
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ac6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	021a      	lsls	r2, r3, #8
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	609a      	str	r2, [r3, #8]
}
 8008ae0:	bf00      	nop
 8008ae2:	371c      	adds	r7, #28
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e050      	b.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a1c      	ldr	r2, [pc, #112]	@ (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d018      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b50:	d013      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a18      	ldr	r2, [pc, #96]	@ (8008bb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d00e      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a16      	ldr	r2, [pc, #88]	@ (8008bbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d009      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a15      	ldr	r2, [pc, #84]	@ (8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d004      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a13      	ldr	r2, [pc, #76]	@ (8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d10c      	bne.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40010000 	.word	0x40010000
 8008bb8:	40000400 	.word	0x40000400
 8008bbc:	40000800 	.word	0x40000800
 8008bc0:	40000c00 	.word	0x40000c00
 8008bc4:	40014000 	.word	0x40014000

08008bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e042      	b.n	8008c88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d106      	bne.n	8008c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7f9 fb24 	bl	8002264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2224      	movs	r2, #36	@ 0x24
 8008c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68da      	ldr	r2, [r3, #12]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f973 	bl	8008f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	695a      	ldr	r2, [r3, #20]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	@ 0x28
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d175      	bne.n	8008d9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <HAL_UART_Transmit+0x2c>
 8008cb6:	88fb      	ldrh	r3, [r7, #6]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e06e      	b.n	8008d9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2221      	movs	r2, #33	@ 0x21
 8008cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cce:	f7fb fd6b 	bl	80047a8 <HAL_GetTick>
 8008cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	88fa      	ldrh	r2, [r7, #6]
 8008cd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	88fa      	ldrh	r2, [r7, #6]
 8008cde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce8:	d108      	bne.n	8008cfc <HAL_UART_Transmit+0x6c>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	e003      	b.n	8008d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d04:	e02e      	b.n	8008d64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2180      	movs	r1, #128	@ 0x80
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 f848 	bl	8008da6 <UART_WaitOnFlagUntilTimeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d005      	beq.n	8008d28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e03a      	b.n	8008d9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10b      	bne.n	8008d46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	3302      	adds	r3, #2
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e007      	b.n	8008d56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	781a      	ldrb	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	3301      	adds	r3, #1
 8008d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1cb      	bne.n	8008d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	2200      	movs	r2, #0
 8008d76:	2140      	movs	r1, #64	@ 0x40
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f814 	bl	8008da6 <UART_WaitOnFlagUntilTimeout>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e006      	b.n	8008d9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e000      	b.n	8008d9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008d9c:	2302      	movs	r3, #2
  }
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3720      	adds	r7, #32
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b086      	sub	sp, #24
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	603b      	str	r3, [r7, #0]
 8008db2:	4613      	mov	r3, r2
 8008db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db6:	e03b      	b.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dbe:	d037      	beq.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc0:	f7fb fcf2 	bl	80047a8 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	6a3a      	ldr	r2, [r7, #32]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d302      	bcc.n	8008dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e03a      	b.n	8008e50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d023      	beq.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b80      	cmp	r3, #128	@ 0x80
 8008dec:	d020      	beq.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b40      	cmp	r3, #64	@ 0x40
 8008df2:	d01d      	beq.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	2b08      	cmp	r3, #8
 8008e00:	d116      	bne.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008e02:	2300      	movs	r3, #0
 8008e04:	617b      	str	r3, [r7, #20]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f81d 	bl	8008e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2208      	movs	r2, #8
 8008e22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e00f      	b.n	8008e50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	bf0c      	ite	eq
 8008e40:	2301      	moveq	r3, #1
 8008e42:	2300      	movne	r3, #0
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d0b4      	beq.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b095      	sub	sp, #84	@ 0x54
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	330c      	adds	r3, #12
 8008e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6a:	e853 3f00 	ldrex	r3, [r3]
 8008e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e80:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e88:	e841 2300 	strex	r3, r2, [r1]
 8008e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1e5      	bne.n	8008e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3314      	adds	r3, #20
 8008e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	f023 0301 	bic.w	r3, r3, #1
 8008eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3314      	adds	r3, #20
 8008eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e5      	bne.n	8008e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d119      	bne.n	8008f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	330c      	adds	r3, #12
 8008ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f023 0310 	bic.w	r3, r3, #16
 8008ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	330c      	adds	r3, #12
 8008eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ef0:	61ba      	str	r2, [r7, #24]
 8008ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	6979      	ldr	r1, [r7, #20]
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	e841 2300 	strex	r3, r2, [r1]
 8008efc:	613b      	str	r3, [r7, #16]
   return(result);
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e5      	bne.n	8008ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2220      	movs	r2, #32
 8008f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008f12:	bf00      	nop
 8008f14:	3754      	adds	r7, #84	@ 0x54
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
	...

08008f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f24:	b0c0      	sub	sp, #256	@ 0x100
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f3c:	68d9      	ldr	r1, [r3, #12]
 8008f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	ea40 0301 	orr.w	r3, r0, r1
 8008f48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	431a      	orrs	r2, r3
 8008f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f64:	69db      	ldr	r3, [r3, #28]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008f78:	f021 010c 	bic.w	r1, r1, #12
 8008f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f86:	430b      	orrs	r3, r1
 8008f88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f9a:	6999      	ldr	r1, [r3, #24]
 8008f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	ea40 0301 	orr.w	r3, r0, r1
 8008fa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	4b8f      	ldr	r3, [pc, #572]	@ (80091ec <UART_SetConfig+0x2cc>)
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d005      	beq.n	8008fc0 <UART_SetConfig+0xa0>
 8008fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	4b8d      	ldr	r3, [pc, #564]	@ (80091f0 <UART_SetConfig+0x2d0>)
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d104      	bne.n	8008fca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fc0:	f7fe f90e 	bl	80071e0 <HAL_RCC_GetPCLK2Freq>
 8008fc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008fc8:	e003      	b.n	8008fd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fca:	f7fe f8f5 	bl	80071b8 <HAL_RCC_GetPCLK1Freq>
 8008fce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fdc:	f040 810c 	bne.w	80091f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008fee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	462b      	mov	r3, r5
 8008ff6:	1891      	adds	r1, r2, r2
 8008ff8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ffa:	415b      	adcs	r3, r3
 8008ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ffe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009002:	4621      	mov	r1, r4
 8009004:	eb12 0801 	adds.w	r8, r2, r1
 8009008:	4629      	mov	r1, r5
 800900a:	eb43 0901 	adc.w	r9, r3, r1
 800900e:	f04f 0200 	mov.w	r2, #0
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800901a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800901e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009022:	4690      	mov	r8, r2
 8009024:	4699      	mov	r9, r3
 8009026:	4623      	mov	r3, r4
 8009028:	eb18 0303 	adds.w	r3, r8, r3
 800902c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009030:	462b      	mov	r3, r5
 8009032:	eb49 0303 	adc.w	r3, r9, r3
 8009036:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800903a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009046:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800904a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800904e:	460b      	mov	r3, r1
 8009050:	18db      	adds	r3, r3, r3
 8009052:	653b      	str	r3, [r7, #80]	@ 0x50
 8009054:	4613      	mov	r3, r2
 8009056:	eb42 0303 	adc.w	r3, r2, r3
 800905a:	657b      	str	r3, [r7, #84]	@ 0x54
 800905c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009060:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009064:	f7f7 fda2 	bl	8000bac <__aeabi_uldivmod>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4b61      	ldr	r3, [pc, #388]	@ (80091f4 <UART_SetConfig+0x2d4>)
 800906e:	fba3 2302 	umull	r2, r3, r3, r2
 8009072:	095b      	lsrs	r3, r3, #5
 8009074:	011c      	lsls	r4, r3, #4
 8009076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800907a:	2200      	movs	r2, #0
 800907c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009080:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009084:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009088:	4642      	mov	r2, r8
 800908a:	464b      	mov	r3, r9
 800908c:	1891      	adds	r1, r2, r2
 800908e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009090:	415b      	adcs	r3, r3
 8009092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009094:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009098:	4641      	mov	r1, r8
 800909a:	eb12 0a01 	adds.w	sl, r2, r1
 800909e:	4649      	mov	r1, r9
 80090a0:	eb43 0b01 	adc.w	fp, r3, r1
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090b8:	4692      	mov	sl, r2
 80090ba:	469b      	mov	fp, r3
 80090bc:	4643      	mov	r3, r8
 80090be:	eb1a 0303 	adds.w	r3, sl, r3
 80090c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090c6:	464b      	mov	r3, r9
 80090c8:	eb4b 0303 	adc.w	r3, fp, r3
 80090cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80090e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090e4:	460b      	mov	r3, r1
 80090e6:	18db      	adds	r3, r3, r3
 80090e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80090ea:	4613      	mov	r3, r2
 80090ec:	eb42 0303 	adc.w	r3, r2, r3
 80090f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80090f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80090f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80090fa:	f7f7 fd57 	bl	8000bac <__aeabi_uldivmod>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4611      	mov	r1, r2
 8009104:	4b3b      	ldr	r3, [pc, #236]	@ (80091f4 <UART_SetConfig+0x2d4>)
 8009106:	fba3 2301 	umull	r2, r3, r3, r1
 800910a:	095b      	lsrs	r3, r3, #5
 800910c:	2264      	movs	r2, #100	@ 0x64
 800910e:	fb02 f303 	mul.w	r3, r2, r3
 8009112:	1acb      	subs	r3, r1, r3
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800911a:	4b36      	ldr	r3, [pc, #216]	@ (80091f4 <UART_SetConfig+0x2d4>)
 800911c:	fba3 2302 	umull	r2, r3, r3, r2
 8009120:	095b      	lsrs	r3, r3, #5
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009128:	441c      	add	r4, r3
 800912a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800912e:	2200      	movs	r2, #0
 8009130:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009134:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009138:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800913c:	4642      	mov	r2, r8
 800913e:	464b      	mov	r3, r9
 8009140:	1891      	adds	r1, r2, r2
 8009142:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009144:	415b      	adcs	r3, r3
 8009146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009148:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800914c:	4641      	mov	r1, r8
 800914e:	1851      	adds	r1, r2, r1
 8009150:	6339      	str	r1, [r7, #48]	@ 0x30
 8009152:	4649      	mov	r1, r9
 8009154:	414b      	adcs	r3, r1
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
 8009158:	f04f 0200 	mov.w	r2, #0
 800915c:	f04f 0300 	mov.w	r3, #0
 8009160:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009164:	4659      	mov	r1, fp
 8009166:	00cb      	lsls	r3, r1, #3
 8009168:	4651      	mov	r1, sl
 800916a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800916e:	4651      	mov	r1, sl
 8009170:	00ca      	lsls	r2, r1, #3
 8009172:	4610      	mov	r0, r2
 8009174:	4619      	mov	r1, r3
 8009176:	4603      	mov	r3, r0
 8009178:	4642      	mov	r2, r8
 800917a:	189b      	adds	r3, r3, r2
 800917c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009180:	464b      	mov	r3, r9
 8009182:	460a      	mov	r2, r1
 8009184:	eb42 0303 	adc.w	r3, r2, r3
 8009188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009198:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800919c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091a0:	460b      	mov	r3, r1
 80091a2:	18db      	adds	r3, r3, r3
 80091a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091a6:	4613      	mov	r3, r2
 80091a8:	eb42 0303 	adc.w	r3, r2, r3
 80091ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80091b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80091b6:	f7f7 fcf9 	bl	8000bac <__aeabi_uldivmod>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4b0d      	ldr	r3, [pc, #52]	@ (80091f4 <UART_SetConfig+0x2d4>)
 80091c0:	fba3 1302 	umull	r1, r3, r3, r2
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	2164      	movs	r1, #100	@ 0x64
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	3332      	adds	r3, #50	@ 0x32
 80091d2:	4a08      	ldr	r2, [pc, #32]	@ (80091f4 <UART_SetConfig+0x2d4>)
 80091d4:	fba2 2303 	umull	r2, r3, r2, r3
 80091d8:	095b      	lsrs	r3, r3, #5
 80091da:	f003 0207 	and.w	r2, r3, #7
 80091de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4422      	add	r2, r4
 80091e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80091e8:	e106      	b.n	80093f8 <UART_SetConfig+0x4d8>
 80091ea:	bf00      	nop
 80091ec:	40011000 	.word	0x40011000
 80091f0:	40011400 	.word	0x40011400
 80091f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009202:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009206:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800920a:	4642      	mov	r2, r8
 800920c:	464b      	mov	r3, r9
 800920e:	1891      	adds	r1, r2, r2
 8009210:	6239      	str	r1, [r7, #32]
 8009212:	415b      	adcs	r3, r3
 8009214:	627b      	str	r3, [r7, #36]	@ 0x24
 8009216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800921a:	4641      	mov	r1, r8
 800921c:	1854      	adds	r4, r2, r1
 800921e:	4649      	mov	r1, r9
 8009220:	eb43 0501 	adc.w	r5, r3, r1
 8009224:	f04f 0200 	mov.w	r2, #0
 8009228:	f04f 0300 	mov.w	r3, #0
 800922c:	00eb      	lsls	r3, r5, #3
 800922e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009232:	00e2      	lsls	r2, r4, #3
 8009234:	4614      	mov	r4, r2
 8009236:	461d      	mov	r5, r3
 8009238:	4643      	mov	r3, r8
 800923a:	18e3      	adds	r3, r4, r3
 800923c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009240:	464b      	mov	r3, r9
 8009242:	eb45 0303 	adc.w	r3, r5, r3
 8009246:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800924a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009256:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800925a:	f04f 0200 	mov.w	r2, #0
 800925e:	f04f 0300 	mov.w	r3, #0
 8009262:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009266:	4629      	mov	r1, r5
 8009268:	008b      	lsls	r3, r1, #2
 800926a:	4621      	mov	r1, r4
 800926c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009270:	4621      	mov	r1, r4
 8009272:	008a      	lsls	r2, r1, #2
 8009274:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009278:	f7f7 fc98 	bl	8000bac <__aeabi_uldivmod>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4b60      	ldr	r3, [pc, #384]	@ (8009404 <UART_SetConfig+0x4e4>)
 8009282:	fba3 2302 	umull	r2, r3, r3, r2
 8009286:	095b      	lsrs	r3, r3, #5
 8009288:	011c      	lsls	r4, r3, #4
 800928a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800928e:	2200      	movs	r2, #0
 8009290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009294:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009298:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800929c:	4642      	mov	r2, r8
 800929e:	464b      	mov	r3, r9
 80092a0:	1891      	adds	r1, r2, r2
 80092a2:	61b9      	str	r1, [r7, #24]
 80092a4:	415b      	adcs	r3, r3
 80092a6:	61fb      	str	r3, [r7, #28]
 80092a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092ac:	4641      	mov	r1, r8
 80092ae:	1851      	adds	r1, r2, r1
 80092b0:	6139      	str	r1, [r7, #16]
 80092b2:	4649      	mov	r1, r9
 80092b4:	414b      	adcs	r3, r1
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	f04f 0200 	mov.w	r2, #0
 80092bc:	f04f 0300 	mov.w	r3, #0
 80092c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092c4:	4659      	mov	r1, fp
 80092c6:	00cb      	lsls	r3, r1, #3
 80092c8:	4651      	mov	r1, sl
 80092ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092ce:	4651      	mov	r1, sl
 80092d0:	00ca      	lsls	r2, r1, #3
 80092d2:	4610      	mov	r0, r2
 80092d4:	4619      	mov	r1, r3
 80092d6:	4603      	mov	r3, r0
 80092d8:	4642      	mov	r2, r8
 80092da:	189b      	adds	r3, r3, r2
 80092dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092e0:	464b      	mov	r3, r9
 80092e2:	460a      	mov	r2, r1
 80092e4:	eb42 0303 	adc.w	r3, r2, r3
 80092e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80092f8:	f04f 0200 	mov.w	r2, #0
 80092fc:	f04f 0300 	mov.w	r3, #0
 8009300:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009304:	4649      	mov	r1, r9
 8009306:	008b      	lsls	r3, r1, #2
 8009308:	4641      	mov	r1, r8
 800930a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800930e:	4641      	mov	r1, r8
 8009310:	008a      	lsls	r2, r1, #2
 8009312:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009316:	f7f7 fc49 	bl	8000bac <__aeabi_uldivmod>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	4611      	mov	r1, r2
 8009320:	4b38      	ldr	r3, [pc, #224]	@ (8009404 <UART_SetConfig+0x4e4>)
 8009322:	fba3 2301 	umull	r2, r3, r3, r1
 8009326:	095b      	lsrs	r3, r3, #5
 8009328:	2264      	movs	r2, #100	@ 0x64
 800932a:	fb02 f303 	mul.w	r3, r2, r3
 800932e:	1acb      	subs	r3, r1, r3
 8009330:	011b      	lsls	r3, r3, #4
 8009332:	3332      	adds	r3, #50	@ 0x32
 8009334:	4a33      	ldr	r2, [pc, #204]	@ (8009404 <UART_SetConfig+0x4e4>)
 8009336:	fba2 2303 	umull	r2, r3, r2, r3
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009340:	441c      	add	r4, r3
 8009342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009346:	2200      	movs	r2, #0
 8009348:	673b      	str	r3, [r7, #112]	@ 0x70
 800934a:	677a      	str	r2, [r7, #116]	@ 0x74
 800934c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009350:	4642      	mov	r2, r8
 8009352:	464b      	mov	r3, r9
 8009354:	1891      	adds	r1, r2, r2
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	415b      	adcs	r3, r3
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009360:	4641      	mov	r1, r8
 8009362:	1851      	adds	r1, r2, r1
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	4649      	mov	r1, r9
 8009368:	414b      	adcs	r3, r1
 800936a:	607b      	str	r3, [r7, #4]
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	f04f 0300 	mov.w	r3, #0
 8009374:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009378:	4659      	mov	r1, fp
 800937a:	00cb      	lsls	r3, r1, #3
 800937c:	4651      	mov	r1, sl
 800937e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009382:	4651      	mov	r1, sl
 8009384:	00ca      	lsls	r2, r1, #3
 8009386:	4610      	mov	r0, r2
 8009388:	4619      	mov	r1, r3
 800938a:	4603      	mov	r3, r0
 800938c:	4642      	mov	r2, r8
 800938e:	189b      	adds	r3, r3, r2
 8009390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009392:	464b      	mov	r3, r9
 8009394:	460a      	mov	r2, r1
 8009396:	eb42 0303 	adc.w	r3, r2, r3
 800939a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800939c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80093a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80093b4:	4649      	mov	r1, r9
 80093b6:	008b      	lsls	r3, r1, #2
 80093b8:	4641      	mov	r1, r8
 80093ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093be:	4641      	mov	r1, r8
 80093c0:	008a      	lsls	r2, r1, #2
 80093c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80093c6:	f7f7 fbf1 	bl	8000bac <__aeabi_uldivmod>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009404 <UART_SetConfig+0x4e4>)
 80093d0:	fba3 1302 	umull	r1, r3, r3, r2
 80093d4:	095b      	lsrs	r3, r3, #5
 80093d6:	2164      	movs	r1, #100	@ 0x64
 80093d8:	fb01 f303 	mul.w	r3, r1, r3
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	011b      	lsls	r3, r3, #4
 80093e0:	3332      	adds	r3, #50	@ 0x32
 80093e2:	4a08      	ldr	r2, [pc, #32]	@ (8009404 <UART_SetConfig+0x4e4>)
 80093e4:	fba2 2303 	umull	r2, r3, r2, r3
 80093e8:	095b      	lsrs	r3, r3, #5
 80093ea:	f003 020f 	and.w	r2, r3, #15
 80093ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4422      	add	r2, r4
 80093f6:	609a      	str	r2, [r3, #8]
}
 80093f8:	bf00      	nop
 80093fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80093fe:	46bd      	mov	sp, r7
 8009400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009404:	51eb851f 	.word	0x51eb851f

08009408 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800940c:	4904      	ldr	r1, [pc, #16]	@ (8009420 <MX_FATFS_Init+0x18>)
 800940e:	4805      	ldr	r0, [pc, #20]	@ (8009424 <MX_FATFS_Init+0x1c>)
 8009410:	f005 fd12 	bl	800ee38 <FATFS_LinkDriver>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	4b03      	ldr	r3, [pc, #12]	@ (8009428 <MX_FATFS_Init+0x20>)
 800941a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800941c:	bf00      	nop
 800941e:	bd80      	pop	{r7, pc}
 8009420:	2000291c 	.word	0x2000291c
 8009424:	2000001c 	.word	0x2000001c
 8009428:	20002918 	.word	0x20002918

0800942c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009430:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	4618      	mov	r0, r3
 800944a:	f7f7 fee1 	bl	8001210 <SD_disk_initialize>
 800944e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	4603      	mov	r3, r0
 8009460:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	4618      	mov	r0, r3
 8009466:	f7f7 ffbd 	bl	80013e4 <SD_disk_status>
 800946a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800946c:	4618      	mov	r0, r3
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009484:	7bf8      	ldrb	r0, [r7, #15]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	68b9      	ldr	r1, [r7, #8]
 800948c:	f7f7 ffc0 	bl	8001410 <SD_disk_read>
 8009490:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
 80094a6:	4603      	mov	r3, r0
 80094a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80094aa:	7bf8      	ldrb	r0, [r7, #15]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	68b9      	ldr	r1, [r7, #8]
 80094b2:	f7f8 f817 	bl	80014e4 <SD_disk_write>
 80094b6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	603a      	str	r2, [r7, #0]
 80094ca:	71fb      	strb	r3, [r7, #7]
 80094cc:	460b      	mov	r3, r1
 80094ce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80094d0:	79b9      	ldrb	r1, [r7, #6]
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7f8 f888 	bl	80015ec <SD_disk_ioctl>
 80094dc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
	...

080094e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	4603      	mov	r3, r0
 80094f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	4a08      	ldr	r2, [pc, #32]	@ (8009518 <disk_status+0x30>)
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	79fa      	ldrb	r2, [r7, #7]
 8009500:	4905      	ldr	r1, [pc, #20]	@ (8009518 <disk_status+0x30>)
 8009502:	440a      	add	r2, r1
 8009504:	7a12      	ldrb	r2, [r2, #8]
 8009506:	4610      	mov	r0, r2
 8009508:	4798      	blx	r3
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20002948 	.word	0x20002948

0800951c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800952a:	79fb      	ldrb	r3, [r7, #7]
 800952c:	4a0e      	ldr	r2, [pc, #56]	@ (8009568 <disk_initialize+0x4c>)
 800952e:	5cd3      	ldrb	r3, [r2, r3]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d114      	bne.n	800955e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009534:	79fb      	ldrb	r3, [r7, #7]
 8009536:	4a0c      	ldr	r2, [pc, #48]	@ (8009568 <disk_initialize+0x4c>)
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	79fa      	ldrb	r2, [r7, #7]
 8009542:	4909      	ldr	r1, [pc, #36]	@ (8009568 <disk_initialize+0x4c>)
 8009544:	440a      	add	r2, r1
 8009546:	7a12      	ldrb	r2, [r2, #8]
 8009548:	4610      	mov	r0, r2
 800954a:	4798      	blx	r3
 800954c:	4603      	mov	r3, r0
 800954e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d103      	bne.n	800955e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009556:	79fb      	ldrb	r3, [r7, #7]
 8009558:	4a03      	ldr	r2, [pc, #12]	@ (8009568 <disk_initialize+0x4c>)
 800955a:	2101      	movs	r1, #1
 800955c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20002948 	.word	0x20002948

0800956c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800956c:	b590      	push	{r4, r7, lr}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	4a0a      	ldr	r2, [pc, #40]	@ (80095a8 <disk_read+0x3c>)
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	689c      	ldr	r4, [r3, #8]
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	4a07      	ldr	r2, [pc, #28]	@ (80095a8 <disk_read+0x3c>)
 800958c:	4413      	add	r3, r2
 800958e:	7a18      	ldrb	r0, [r3, #8]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	47a0      	blx	r4
 8009598:	4603      	mov	r3, r0
 800959a:	75fb      	strb	r3, [r7, #23]
  return res;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	371c      	adds	r7, #28
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd90      	pop	{r4, r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20002948 	.word	0x20002948

080095ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80095ac:	b590      	push	{r4, r7, lr}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	607a      	str	r2, [r7, #4]
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	4603      	mov	r3, r0
 80095ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4a0a      	ldr	r2, [pc, #40]	@ (80095e8 <disk_write+0x3c>)
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	68dc      	ldr	r4, [r3, #12]
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	4a07      	ldr	r2, [pc, #28]	@ (80095e8 <disk_write+0x3c>)
 80095cc:	4413      	add	r3, r2
 80095ce:	7a18      	ldrb	r0, [r3, #8]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	68b9      	ldr	r1, [r7, #8]
 80095d6:	47a0      	blx	r4
 80095d8:	4603      	mov	r3, r0
 80095da:	75fb      	strb	r3, [r7, #23]
  return res;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	371c      	adds	r7, #28
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd90      	pop	{r4, r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20002948 	.word	0x20002948

080095ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	4603      	mov	r3, r0
 80095f4:	603a      	str	r2, [r7, #0]
 80095f6:	71fb      	strb	r3, [r7, #7]
 80095f8:	460b      	mov	r3, r1
 80095fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80095fc:	79fb      	ldrb	r3, [r7, #7]
 80095fe:	4a09      	ldr	r2, [pc, #36]	@ (8009624 <disk_ioctl+0x38>)
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	79fa      	ldrb	r2, [r7, #7]
 800960a:	4906      	ldr	r1, [pc, #24]	@ (8009624 <disk_ioctl+0x38>)
 800960c:	440a      	add	r2, r1
 800960e:	7a10      	ldrb	r0, [r2, #8]
 8009610:	79b9      	ldrb	r1, [r7, #6]
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	4798      	blx	r3
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]
  return res;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	20002948 	.word	0x20002948

08009628 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3301      	adds	r3, #1
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009638:	89fb      	ldrh	r3, [r7, #14]
 800963a:	021b      	lsls	r3, r3, #8
 800963c:	b21a      	sxth	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	b21b      	sxth	r3, r3
 8009644:	4313      	orrs	r3, r2
 8009646:	b21b      	sxth	r3, r3
 8009648:	81fb      	strh	r3, [r7, #14]
	return rv;
 800964a:	89fb      	ldrh	r3, [r7, #14]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3303      	adds	r3, #3
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	3202      	adds	r2, #2
 8009670:	7812      	ldrb	r2, [r2, #0]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	021b      	lsls	r3, r3, #8
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	3201      	adds	r2, #1
 800967e:	7812      	ldrb	r2, [r2, #0]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	7812      	ldrb	r2, [r2, #0]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009690:	68fb      	ldr	r3, [r7, #12]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr

0800969e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800969e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80096a2:	b09d      	sub	sp, #116	@ 0x74
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 80096a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096aa:	3307      	adds	r3, #7
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2200      	movs	r2, #0
 80096b2:	469a      	mov	sl, r3
 80096b4:	4693      	mov	fp, r2
 80096b6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 80096ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80096be:	f04f 0000 	mov.w	r0, #0
 80096c2:	f04f 0100 	mov.w	r1, #0
 80096c6:	0219      	lsls	r1, r3, #8
 80096c8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80096cc:	0210      	lsls	r0, r2, #8
 80096ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096d0:	3306      	adds	r3, #6
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2200      	movs	r2, #0
 80096d8:	461c      	mov	r4, r3
 80096da:	4615      	mov	r5, r2
 80096dc:	ea40 0804 	orr.w	r8, r0, r4
 80096e0:	ea41 0905 	orr.w	r9, r1, r5
 80096e4:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80096e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80096ec:	f04f 0000 	mov.w	r0, #0
 80096f0:	f04f 0100 	mov.w	r1, #0
 80096f4:	0219      	lsls	r1, r3, #8
 80096f6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80096fa:	0210      	lsls	r0, r2, #8
 80096fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096fe:	3305      	adds	r3, #5
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2200      	movs	r2, #0
 8009706:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009708:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800970a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800970e:	4623      	mov	r3, r4
 8009710:	4303      	orrs	r3, r0
 8009712:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009714:	462b      	mov	r3, r5
 8009716:	430b      	orrs	r3, r1
 8009718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800971a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800971e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8009722:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009726:	f04f 0000 	mov.w	r0, #0
 800972a:	f04f 0100 	mov.w	r1, #0
 800972e:	0219      	lsls	r1, r3, #8
 8009730:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009734:	0210      	lsls	r0, r2, #8
 8009736:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009738:	3304      	adds	r3, #4
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2200      	movs	r2, #0
 8009740:	653b      	str	r3, [r7, #80]	@ 0x50
 8009742:	657a      	str	r2, [r7, #84]	@ 0x54
 8009744:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8009748:	4623      	mov	r3, r4
 800974a:	4303      	orrs	r3, r0
 800974c:	623b      	str	r3, [r7, #32]
 800974e:	462b      	mov	r3, r5
 8009750:	430b      	orrs	r3, r1
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24
 8009754:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009758:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800975c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009760:	f04f 0000 	mov.w	r0, #0
 8009764:	f04f 0100 	mov.w	r1, #0
 8009768:	0219      	lsls	r1, r3, #8
 800976a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800976e:	0210      	lsls	r0, r2, #8
 8009770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009772:	3303      	adds	r3, #3
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2200      	movs	r2, #0
 800977a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800977c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800977e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8009782:	4623      	mov	r3, r4
 8009784:	4303      	orrs	r3, r0
 8009786:	61bb      	str	r3, [r7, #24]
 8009788:	462b      	mov	r3, r5
 800978a:	430b      	orrs	r3, r1
 800978c:	61fb      	str	r3, [r7, #28]
 800978e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009792:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8009796:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800979a:	f04f 0000 	mov.w	r0, #0
 800979e:	f04f 0100 	mov.w	r1, #0
 80097a2:	0219      	lsls	r1, r3, #8
 80097a4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80097a8:	0210      	lsls	r0, r2, #8
 80097aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097ac:	3302      	adds	r3, #2
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2200      	movs	r2, #0
 80097b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80097b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80097b8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80097bc:	4623      	mov	r3, r4
 80097be:	4303      	orrs	r3, r0
 80097c0:	613b      	str	r3, [r7, #16]
 80097c2:	462b      	mov	r3, r5
 80097c4:	430b      	orrs	r3, r1
 80097c6:	617b      	str	r3, [r7, #20]
 80097c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80097cc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80097d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80097d4:	f04f 0200 	mov.w	r2, #0
 80097d8:	f04f 0300 	mov.w	r3, #0
 80097dc:	020b      	lsls	r3, r1, #8
 80097de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097e2:	0202      	lsls	r2, r0, #8
 80097e4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80097e6:	3101      	adds	r1, #1
 80097e8:	7809      	ldrb	r1, [r1, #0]
 80097ea:	b2c9      	uxtb	r1, r1
 80097ec:	2000      	movs	r0, #0
 80097ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80097f0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80097f2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80097f6:	4621      	mov	r1, r4
 80097f8:	4311      	orrs	r1, r2
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	4629      	mov	r1, r5
 80097fe:	4319      	orrs	r1, r3
 8009800:	60f9      	str	r1, [r7, #12]
 8009802:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009806:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 800980a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800980e:	f04f 0200 	mov.w	r2, #0
 8009812:	f04f 0300 	mov.w	r3, #0
 8009816:	020b      	lsls	r3, r1, #8
 8009818:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800981c:	0202      	lsls	r2, r0, #8
 800981e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009820:	7809      	ldrb	r1, [r1, #0]
 8009822:	b2c9      	uxtb	r1, r1
 8009824:	2000      	movs	r0, #0
 8009826:	6339      	str	r1, [r7, #48]	@ 0x30
 8009828:	6378      	str	r0, [r7, #52]	@ 0x34
 800982a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800982e:	4621      	mov	r1, r4
 8009830:	4311      	orrs	r1, r2
 8009832:	6039      	str	r1, [r7, #0]
 8009834:	4629      	mov	r1, r5
 8009836:	4319      	orrs	r1, r3
 8009838:	6079      	str	r1, [r7, #4]
 800983a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800983e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8009842:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8009846:	4610      	mov	r0, r2
 8009848:	4619      	mov	r1, r3
 800984a:	3774      	adds	r7, #116	@ 0x74
 800984c:	46bd      	mov	sp, r7
 800984e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009852:	4770      	bx	lr

08009854 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	460b      	mov	r3, r1
 800985e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	887a      	ldrh	r2, [r7, #2]
 8009868:	b2d2      	uxtb	r2, r2
 800986a:	701a      	strb	r2, [r3, #0]
 800986c:	887b      	ldrh	r3, [r7, #2]
 800986e:	0a1b      	lsrs	r3, r3, #8
 8009870:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	887a      	ldrh	r2, [r7, #2]
 800987a:	b2d2      	uxtb	r2, r2
 800987c:	701a      	strb	r2, [r3, #0]
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	607a      	str	r2, [r7, #4]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	b2d2      	uxtb	r2, r2
 800989e:	701a      	strb	r2, [r3, #0]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	1c5a      	adds	r2, r3, #1
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	b2d2      	uxtb	r2, r2
 80098b0:	701a      	strb	r2, [r3, #0]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	0a1b      	lsrs	r3, r3, #8
 80098b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	607a      	str	r2, [r7, #4]
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	b2d2      	uxtb	r2, r2
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	0a1b      	lsrs	r3, r3, #8
 80098c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	1c5a      	adds	r2, r3, #1
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80098e2:	b480      	push	{r7}
 80098e4:	b085      	sub	sp, #20
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	60f8      	str	r0, [r7, #12]
 80098ea:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	60fa      	str	r2, [r7, #12]
 80098f4:	783a      	ldrb	r2, [r7, #0]
 80098f6:	701a      	strb	r2, [r3, #0]
 80098f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80098fc:	f04f 0200 	mov.w	r2, #0
 8009900:	f04f 0300 	mov.w	r3, #0
 8009904:	0a02      	lsrs	r2, r0, #8
 8009906:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800990a:	0a0b      	lsrs	r3, r1, #8
 800990c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	60fa      	str	r2, [r7, #12]
 8009916:	783a      	ldrb	r2, [r7, #0]
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	f04f 0300 	mov.w	r3, #0
 8009926:	0a02      	lsrs	r2, r0, #8
 8009928:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800992c:	0a0b      	lsrs	r3, r1, #8
 800992e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	1c5a      	adds	r2, r3, #1
 8009936:	60fa      	str	r2, [r7, #12]
 8009938:	783a      	ldrb	r2, [r7, #0]
 800993a:	701a      	strb	r2, [r3, #0]
 800993c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009940:	f04f 0200 	mov.w	r2, #0
 8009944:	f04f 0300 	mov.w	r3, #0
 8009948:	0a02      	lsrs	r2, r0, #8
 800994a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800994e:	0a0b      	lsrs	r3, r1, #8
 8009950:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	60fa      	str	r2, [r7, #12]
 800995a:	783a      	ldrb	r2, [r7, #0]
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	f04f 0300 	mov.w	r3, #0
 800996a:	0a02      	lsrs	r2, r0, #8
 800996c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009970:	0a0b      	lsrs	r3, r1, #8
 8009972:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	60fa      	str	r2, [r7, #12]
 800997c:	783a      	ldrb	r2, [r7, #0]
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 0300 	mov.w	r3, #0
 800998c:	0a02      	lsrs	r2, r0, #8
 800998e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009992:	0a0b      	lsrs	r3, r1, #8
 8009994:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	60fa      	str	r2, [r7, #12]
 800999e:	783a      	ldrb	r2, [r7, #0]
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099a6:	f04f 0200 	mov.w	r2, #0
 80099aa:	f04f 0300 	mov.w	r3, #0
 80099ae:	0a02      	lsrs	r2, r0, #8
 80099b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80099b4:	0a0b      	lsrs	r3, r1, #8
 80099b6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	60fa      	str	r2, [r7, #12]
 80099c0:	783a      	ldrb	r2, [r7, #0]
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80099c8:	f04f 0200 	mov.w	r2, #0
 80099cc:	f04f 0300 	mov.w	r3, #0
 80099d0:	0a02      	lsrs	r2, r0, #8
 80099d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80099d6:	0a0b      	lsrs	r3, r1, #8
 80099d8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	60fa      	str	r2, [r7, #12]
 80099e2:	783a      	ldrb	r2, [r7, #0]
 80099e4:	701a      	strb	r2, [r3, #0]
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80099f2:	b480      	push	{r7}
 80099f4:	b087      	sub	sp, #28
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00d      	beq.n	8009a28 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	1c53      	adds	r3, r2, #1
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	1c59      	adds	r1, r3, #1
 8009a16:	6179      	str	r1, [r7, #20]
 8009a18:	7812      	ldrb	r2, [r2, #0]
 8009a1a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1f1      	bne.n	8009a0c <mem_cpy+0x1a>
	}
}
 8009a28:	bf00      	nop
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	1c5a      	adds	r2, r3, #1
 8009a48:	617a      	str	r2, [r7, #20]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	b2d2      	uxtb	r2, r2
 8009a4e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	607b      	str	r3, [r7, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1f3      	bne.n	8009a44 <mem_set+0x10>
}
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009a6a:	b480      	push	{r7}
 8009a6c:	b089      	sub	sp, #36	@ 0x24
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	60b9      	str	r1, [r7, #8]
 8009a74:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	61fa      	str	r2, [r7, #28]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	61ba      	str	r2, [r7, #24]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	1acb      	subs	r3, r1, r3
 8009a96:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	607b      	str	r3, [r7, #4]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <mem_cmp+0x40>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0eb      	beq.n	8009a82 <mem_cmp+0x18>

	return r;
 8009aaa:	697b      	ldr	r3, [r7, #20]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3724      	adds	r7, #36	@ 0x24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009ac2:	e002      	b.n	8009aca <chk_chr+0x12>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	607b      	str	r3, [r7, #4]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d005      	beq.n	8009ade <chk_chr+0x26>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d1f2      	bne.n	8009ac4 <chk_chr+0xc>
	return *str;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b082      	sub	sp, #8
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d009      	beq.n	8009b10 <lock_fs+0x22>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f005 fa99 	bl	800f038 <ff_req_grant>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <lock_fs+0x22>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e000      	b.n	8009b12 <lock_fs+0x24>
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	460b      	mov	r3, r1
 8009b24:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00d      	beq.n	8009b48 <unlock_fs+0x2e>
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	2b0c      	cmp	r3, #12
 8009b30:	d00a      	beq.n	8009b48 <unlock_fs+0x2e>
 8009b32:	78fb      	ldrb	r3, [r7, #3]
 8009b34:	2b0b      	cmp	r3, #11
 8009b36:	d007      	beq.n	8009b48 <unlock_fs+0x2e>
 8009b38:	78fb      	ldrb	r3, [r7, #3]
 8009b3a:	2b0f      	cmp	r3, #15
 8009b3c:	d004      	beq.n	8009b48 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f005 fa8d 	bl	800f062 <ff_rel_grant>
	}
}
 8009b48:	bf00      	nop
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60bb      	str	r3, [r7, #8]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	e029      	b.n	8009bb8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009b64:	4a27      	ldr	r2, [pc, #156]	@ (8009c04 <chk_lock+0xb4>)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	011b      	lsls	r3, r3, #4
 8009b6a:	4413      	add	r3, r2
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01d      	beq.n	8009bae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009b72:	4a24      	ldr	r2, [pc, #144]	@ (8009c04 <chk_lock+0xb4>)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	4413      	add	r3, r2
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d116      	bne.n	8009bb2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009b84:	4a1f      	ldr	r2, [pc, #124]	@ (8009c04 <chk_lock+0xb4>)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	4413      	add	r3, r2
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d10c      	bne.n	8009bb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009b98:	4a1a      	ldr	r2, [pc, #104]	@ (8009c04 <chk_lock+0xb4>)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	4413      	add	r3, r2
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d102      	bne.n	8009bb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009bac:	e007      	b.n	8009bbe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d9d2      	bls.n	8009b64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d109      	bne.n	8009bd8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d102      	bne.n	8009bd0 <chk_lock+0x80>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d101      	bne.n	8009bd4 <chk_lock+0x84>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e010      	b.n	8009bf6 <chk_lock+0xa6>
 8009bd4:	2312      	movs	r3, #18
 8009bd6:	e00e      	b.n	8009bf6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d108      	bne.n	8009bf0 <chk_lock+0xa0>
 8009bde:	4a09      	ldr	r2, [pc, #36]	@ (8009c04 <chk_lock+0xb4>)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	4413      	add	r3, r2
 8009be6:	330c      	adds	r3, #12
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bee:	d101      	bne.n	8009bf4 <chk_lock+0xa4>
 8009bf0:	2310      	movs	r3, #16
 8009bf2:	e000      	b.n	8009bf6 <chk_lock+0xa6>
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	20002928 	.word	0x20002928

08009c08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	e002      	b.n	8009c1a <enq_lock+0x12>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3301      	adds	r3, #1
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d806      	bhi.n	8009c2e <enq_lock+0x26>
 8009c20:	4a09      	ldr	r2, [pc, #36]	@ (8009c48 <enq_lock+0x40>)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	4413      	add	r3, r2
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1f2      	bne.n	8009c14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	bf14      	ite	ne
 8009c34:	2301      	movne	r3, #1
 8009c36:	2300      	moveq	r3, #0
 8009c38:	b2db      	uxtb	r3, r3
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20002928 	.word	0x20002928

08009c4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	e01f      	b.n	8009c9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009c5c:	4a41      	ldr	r2, [pc, #260]	@ (8009d64 <inc_lock+0x118>)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	4413      	add	r3, r2
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d113      	bne.n	8009c96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009c6e:	4a3d      	ldr	r2, [pc, #244]	@ (8009d64 <inc_lock+0x118>)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	4413      	add	r3, r2
 8009c76:	3304      	adds	r3, #4
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d109      	bne.n	8009c96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009c82:	4a38      	ldr	r2, [pc, #224]	@ (8009d64 <inc_lock+0x118>)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	4413      	add	r3, r2
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d006      	beq.n	8009ca4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d9dc      	bls.n	8009c5c <inc_lock+0x10>
 8009ca2:	e000      	b.n	8009ca6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009ca4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d132      	bne.n	8009d12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e002      	b.n	8009cb8 <inc_lock+0x6c>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d806      	bhi.n	8009ccc <inc_lock+0x80>
 8009cbe:	4a29      	ldr	r2, [pc, #164]	@ (8009d64 <inc_lock+0x118>)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	4413      	add	r3, r2
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f2      	bne.n	8009cb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d101      	bne.n	8009cd6 <inc_lock+0x8a>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e040      	b.n	8009d58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4922      	ldr	r1, [pc, #136]	@ (8009d64 <inc_lock+0x118>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	440b      	add	r3, r1
 8009ce2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	491e      	ldr	r1, [pc, #120]	@ (8009d64 <inc_lock+0x118>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	440b      	add	r3, r1
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cf8:	491a      	ldr	r1, [pc, #104]	@ (8009d64 <inc_lock+0x118>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	440b      	add	r3, r1
 8009d00:	3308      	adds	r3, #8
 8009d02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d04:	4a17      	ldr	r2, [pc, #92]	@ (8009d64 <inc_lock+0x118>)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	4413      	add	r3, r2
 8009d0c:	330c      	adds	r3, #12
 8009d0e:	2200      	movs	r2, #0
 8009d10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d009      	beq.n	8009d2c <inc_lock+0xe0>
 8009d18:	4a12      	ldr	r2, [pc, #72]	@ (8009d64 <inc_lock+0x118>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	4413      	add	r3, r2
 8009d20:	330c      	adds	r3, #12
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <inc_lock+0xe0>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	e015      	b.n	8009d58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d108      	bne.n	8009d44 <inc_lock+0xf8>
 8009d32:	4a0c      	ldr	r2, [pc, #48]	@ (8009d64 <inc_lock+0x118>)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	4413      	add	r3, r2
 8009d3a:	330c      	adds	r3, #12
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	e001      	b.n	8009d48 <inc_lock+0xfc>
 8009d44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d48:	4906      	ldr	r1, [pc, #24]	@ (8009d64 <inc_lock+0x118>)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	440b      	add	r3, r1
 8009d50:	330c      	adds	r3, #12
 8009d52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3301      	adds	r3, #1
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	20002928 	.word	0x20002928

08009d68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	607b      	str	r3, [r7, #4]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d825      	bhi.n	8009dc8 <dec_lock+0x60>
		n = Files[i].ctr;
 8009d7c:	4a17      	ldr	r2, [pc, #92]	@ (8009ddc <dec_lock+0x74>)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	4413      	add	r3, r2
 8009d84:	330c      	adds	r3, #12
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009d8a:	89fb      	ldrh	r3, [r7, #14]
 8009d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d90:	d101      	bne.n	8009d96 <dec_lock+0x2e>
 8009d92:	2300      	movs	r3, #0
 8009d94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009d96:	89fb      	ldrh	r3, [r7, #14]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <dec_lock+0x3a>
 8009d9c:	89fb      	ldrh	r3, [r7, #14]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009da2:	4a0e      	ldr	r2, [pc, #56]	@ (8009ddc <dec_lock+0x74>)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	4413      	add	r3, r2
 8009daa:	330c      	adds	r3, #12
 8009dac:	89fa      	ldrh	r2, [r7, #14]
 8009dae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009db0:	89fb      	ldrh	r3, [r7, #14]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d105      	bne.n	8009dc2 <dec_lock+0x5a>
 8009db6:	4a09      	ldr	r2, [pc, #36]	@ (8009ddc <dec_lock+0x74>)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	4413      	add	r3, r2
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	737b      	strb	r3, [r7, #13]
 8009dc6:	e001      	b.n	8009dcc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009dc8:	2302      	movs	r3, #2
 8009dca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009dcc:	7b7b      	ldrb	r3, [r7, #13]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20002928 	.word	0x20002928

08009de0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e010      	b.n	8009e10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009dee:	4a0d      	ldr	r2, [pc, #52]	@ (8009e24 <clear_lock+0x44>)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	4413      	add	r3, r2
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d105      	bne.n	8009e0a <clear_lock+0x2a>
 8009dfe:	4a09      	ldr	r2, [pc, #36]	@ (8009e24 <clear_lock+0x44>)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	4413      	add	r3, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d9eb      	bls.n	8009dee <clear_lock+0xe>
	}
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	20002928 	.word	0x20002928

08009e28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	78db      	ldrb	r3, [r3, #3]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d034      	beq.n	8009ea6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	7858      	ldrb	r0, [r3, #1]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	f7ff fbac 	bl	80095ac <disk_write>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	73fb      	strb	r3, [r7, #15]
 8009e5e:	e022      	b.n	8009ea6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	1ad2      	subs	r2, r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d217      	bcs.n	8009ea6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	789b      	ldrb	r3, [r3, #2]
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	e010      	b.n	8009ea0 <sync_window+0x78>
					wsect += fs->fsize;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	4413      	add	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7858      	ldrb	r0, [r3, #1]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009e92:	2301      	movs	r3, #1
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	f7ff fb89 	bl	80095ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	613b      	str	r3, [r7, #16]
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d8eb      	bhi.n	8009e7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d01b      	beq.n	8009f00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff ffad 	bl	8009e28 <sync_window>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d113      	bne.n	8009f00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7858      	ldrb	r0, [r3, #1]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	f7ff fb41 	bl	800956c <disk_read>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d004      	beq.n	8009efa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
	return res;
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff ff87 	bl	8009e28 <sync_window>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d159      	bne.n	8009fd8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d149      	bne.n	8009fc0 <sync_fs+0xb4>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	791b      	ldrb	r3, [r3, #4]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d145      	bne.n	8009fc0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	899b      	ldrh	r3, [r3, #12]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	2100      	movs	r1, #0
 8009f42:	f7ff fd77 	bl	8009a34 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3340      	adds	r3, #64	@ 0x40
 8009f4a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009f4e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7ff fc7e 	bl	8009854 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	3340      	adds	r3, #64	@ 0x40
 8009f5c:	4921      	ldr	r1, [pc, #132]	@ (8009fe4 <sync_fs+0xd8>)
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff fc93 	bl	800988a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3340      	adds	r3, #64	@ 0x40
 8009f68:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009f6c:	491e      	ldr	r1, [pc, #120]	@ (8009fe8 <sync_fs+0xdc>)
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff fc8b 	bl	800988a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3340      	adds	r3, #64	@ 0x40
 8009f78:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6a1b      	ldr	r3, [r3, #32]
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f7ff fc81 	bl	800988a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3340      	adds	r3, #64	@ 0x40
 8009f8c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	4619      	mov	r1, r3
 8009f96:	4610      	mov	r0, r2
 8009f98:	f7ff fc77 	bl	800988a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	7858      	ldrb	r0, [r3, #1]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f7ff faf9 	bl	80095ac <disk_write>
			fs->fsi_flag = 0;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	785b      	ldrb	r3, [r3, #1]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fb0f 	bl	80095ec <disk_ioctl>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <sync_fs+0xcc>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	41615252 	.word	0x41615252
 8009fe8:	61417272 	.word	0x61417272

08009fec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	3b02      	subs	r3, #2
 8009ffa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a000:	3b02      	subs	r3, #2
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	429a      	cmp	r2, r3
 800a006:	d301      	bcc.n	800a00c <clust2sect+0x20>
 800a008:	2300      	movs	r3, #0
 800a00a:	e008      	b.n	800a01e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	895b      	ldrh	r3, [r3, #10]
 800a010:	461a      	mov	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	fb03 f202 	mul.w	r2, r3, r2
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a01c:	4413      	add	r3, r2
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
	...

0800a02c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a02c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a030:	b088      	sub	sp, #32
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	2b01      	cmp	r3, #1
 800a042:	d904      	bls.n	800a04e <get_fat+0x22>
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d302      	bcc.n	800a054 <get_fat+0x28>
		val = 1;	/* Internal error */
 800a04e:	2301      	movs	r3, #1
 800a050:	61fb      	str	r3, [r7, #28]
 800a052:	e139      	b.n	800a2c8 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a054:	f04f 33ff 	mov.w	r3, #4294967295
 800a058:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	3b01      	subs	r3, #1
 800a060:	2b03      	cmp	r3, #3
 800a062:	f200 8125 	bhi.w	800a2b0 <get_fat+0x284>
 800a066:	a201      	add	r2, pc, #4	@ (adr r2, 800a06c <get_fat+0x40>)
 800a068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06c:	0800a07d 	.word	0x0800a07d
 800a070:	0800a129 	.word	0x0800a129
 800a074:	0800a175 	.word	0x0800a175
 800a078:	0800a1c5 	.word	0x0800a1c5
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	085b      	lsrs	r3, r3, #1
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	899b      	ldrh	r3, [r3, #12]
 800a092:	4619      	mov	r1, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	fbb3 f3f1 	udiv	r3, r3, r1
 800a09a:	4413      	add	r3, r2
 800a09c:	4619      	mov	r1, r3
 800a09e:	69b8      	ldr	r0, [r7, #24]
 800a0a0:	f7ff ff06 	bl	8009eb0 <move_window>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f040 8105 	bne.w	800a2b6 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	60fa      	str	r2, [r7, #12]
 800a0b2:	69ba      	ldr	r2, [r7, #24]
 800a0b4:	8992      	ldrh	r2, [r2, #12]
 800a0b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0ba:	fb01 f202 	mul.w	r2, r1, r2
 800a0be:	1a9b      	subs	r3, r3, r2
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	899b      	ldrh	r3, [r3, #12]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0da:	4413      	add	r3, r2
 800a0dc:	4619      	mov	r1, r3
 800a0de:	69b8      	ldr	r0, [r7, #24]
 800a0e0:	f7ff fee6 	bl	8009eb0 <move_window>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f040 80e7 	bne.w	800a2ba <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	899b      	ldrh	r3, [r3, #12]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0f8:	fb01 f202 	mul.w	r2, r1, r2
 800a0fc:	1a9b      	subs	r3, r3, r2
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	4413      	add	r3, r2
 800a102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	68ba      	ldr	r2, [r7, #8]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <get_fat+0xf2>
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	091b      	lsrs	r3, r3, #4
 800a11c:	e002      	b.n	800a124 <get_fat+0xf8>
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a124:	61fb      	str	r3, [r7, #28]
			break;
 800a126:	e0cf      	b.n	800a2c8 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	899b      	ldrh	r3, [r3, #12]
 800a130:	085b      	lsrs	r3, r3, #1
 800a132:	b29b      	uxth	r3, r3
 800a134:	4619      	mov	r1, r3
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	fbb3 f3f1 	udiv	r3, r3, r1
 800a13c:	4413      	add	r3, r2
 800a13e:	4619      	mov	r1, r3
 800a140:	69b8      	ldr	r0, [r7, #24]
 800a142:	f7ff feb5 	bl	8009eb0 <move_window>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f040 80b8 	bne.w	800a2be <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	8992      	ldrh	r2, [r2, #12]
 800a15c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a160:	fb00 f202 	mul.w	r2, r0, r2
 800a164:	1a9b      	subs	r3, r3, r2
 800a166:	440b      	add	r3, r1
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff fa5d 	bl	8009628 <ld_word>
 800a16e:	4603      	mov	r3, r0
 800a170:	61fb      	str	r3, [r7, #28]
			break;
 800a172:	e0a9      	b.n	800a2c8 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	899b      	ldrh	r3, [r3, #12]
 800a17c:	089b      	lsrs	r3, r3, #2
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4619      	mov	r1, r3
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	fbb3 f3f1 	udiv	r3, r3, r1
 800a188:	4413      	add	r3, r2
 800a18a:	4619      	mov	r1, r3
 800a18c:	69b8      	ldr	r0, [r7, #24]
 800a18e:	f7ff fe8f 	bl	8009eb0 <move_window>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	f040 8094 	bne.w	800a2c2 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	69ba      	ldr	r2, [r7, #24]
 800a1a6:	8992      	ldrh	r2, [r2, #12]
 800a1a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1ac:	fb00 f202 	mul.w	r2, r0, r2
 800a1b0:	1a9b      	subs	r3, r3, r2
 800a1b2:	440b      	add	r3, r1
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fa4f 	bl	8009658 <ld_dword>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a1c0:	61fb      	str	r3, [r7, #28]
			break;
 800a1c2:	e081      	b.n	800a2c8 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	d070      	beq.n	800a2b0 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a1de:	1e54      	subs	r4, r2, #1
 800a1e0:	f143 35ff 	adc.w	r5, r3, #4294967295
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	899b      	ldrh	r3, [r3, #12]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	4698      	mov	r8, r3
 800a1ee:	4691      	mov	r9, r2
 800a1f0:	4642      	mov	r2, r8
 800a1f2:	464b      	mov	r3, r9
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	f7f6 fcd8 	bl	8000bac <__aeabi_uldivmod>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	895b      	ldrh	r3, [r3, #10]
 800a204:	fbb2 f3f3 	udiv	r3, r2, r3
 800a208:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	79db      	ldrb	r3, [r3, #7]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d10e      	bne.n	800a230 <get_fat+0x204>
					if (cofs <= clen) {
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	429a      	cmp	r2, r3
 800a218:	d80a      	bhi.n	800a230 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d002      	beq.n	800a228 <get_fat+0x1fc>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	e001      	b.n	800a22c <get_fat+0x200>
 800a228:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a22c:	61fb      	str	r3, [r7, #28]
						break;
 800a22e:	e04b      	b.n	800a2c8 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	79db      	ldrb	r3, [r3, #7]
 800a234:	2b03      	cmp	r3, #3
 800a236:	d108      	bne.n	800a24a <get_fat+0x21e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d203      	bcs.n	800a24a <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	61fb      	str	r3, [r7, #28]
					break;
 800a248:	e03e      	b.n	800a2c8 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	79db      	ldrb	r3, [r3, #7]
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d02e      	beq.n	800a2b0 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a25a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a25e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a260:	e032      	b.n	800a2c8 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	899b      	ldrh	r3, [r3, #12]
 800a26a:	089b      	lsrs	r3, r3, #2
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	4619      	mov	r1, r3
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	fbb3 f3f1 	udiv	r3, r3, r1
 800a276:	4413      	add	r3, r2
 800a278:	4619      	mov	r1, r3
 800a27a:	69b8      	ldr	r0, [r7, #24]
 800a27c:	f7ff fe18 	bl	8009eb0 <move_window>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d11f      	bne.n	800a2c6 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	69ba      	ldr	r2, [r7, #24]
 800a292:	8992      	ldrh	r2, [r2, #12]
 800a294:	fbb3 f0f2 	udiv	r0, r3, r2
 800a298:	fb00 f202 	mul.w	r2, r0, r2
 800a29c:	1a9b      	subs	r3, r3, r2
 800a29e:	440b      	add	r3, r1
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff f9d9 	bl	8009658 <ld_dword>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a2ac:	61fb      	str	r3, [r7, #28]
					break;
 800a2ae:	e00b      	b.n	800a2c8 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	61fb      	str	r3, [r7, #28]
 800a2b4:	e008      	b.n	800a2c8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2b6:	bf00      	nop
 800a2b8:	e006      	b.n	800a2c8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2ba:	bf00      	nop
 800a2bc:	e004      	b.n	800a2c8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2be:	bf00      	nop
 800a2c0:	e002      	b.n	800a2c8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2c2:	bf00      	nop
 800a2c4:	e000      	b.n	800a2c8 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2c6:	bf00      	nop
		}
	}

	return val;
 800a2c8:	69fb      	ldr	r3, [r7, #28]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3720      	adds	r7, #32
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a2d4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a2d4:	b590      	push	{r4, r7, lr}
 800a2d6:	b089      	sub	sp, #36	@ 0x24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	f240 810d 	bls.w	800a506 <put_fat+0x232>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	f080 8107 	bcs.w	800a506 <put_fat+0x232>
		switch (fs->fs_type) {
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b04      	cmp	r3, #4
 800a2fe:	f300 8102 	bgt.w	800a506 <put_fat+0x232>
 800a302:	2b03      	cmp	r3, #3
 800a304:	f280 80b3 	bge.w	800a46e <put_fat+0x19a>
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d003      	beq.n	800a314 <put_fat+0x40>
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	f000 8083 	beq.w	800a418 <put_fat+0x144>
 800a312:	e0f8      	b.n	800a506 <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	61bb      	str	r3, [r7, #24]
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	085b      	lsrs	r3, r3, #1
 800a31c:	69ba      	ldr	r2, [r7, #24]
 800a31e:	4413      	add	r3, r2
 800a320:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	899b      	ldrh	r3, [r3, #12]
 800a32a:	4619      	mov	r1, r3
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a332:	4413      	add	r3, r2
 800a334:	4619      	mov	r1, r3
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f7ff fdba 	bl	8009eb0 <move_window>
 800a33c:	4603      	mov	r3, r0
 800a33e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a340:	7ffb      	ldrb	r3, [r7, #31]
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 80d8 	bne.w	800a4f8 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	1c5a      	adds	r2, r3, #1
 800a352:	61ba      	str	r2, [r7, #24]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	8992      	ldrh	r2, [r2, #12]
 800a358:	fbb3 f0f2 	udiv	r0, r3, r2
 800a35c:	fb00 f202 	mul.w	r2, r0, r2
 800a360:	1a9b      	subs	r3, r3, r2
 800a362:	440b      	add	r3, r1
 800a364:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00d      	beq.n	800a38c <put_fat+0xb8>
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	b25b      	sxtb	r3, r3
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	b25a      	sxtb	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	011b      	lsls	r3, r3, #4
 800a382:	b25b      	sxtb	r3, r3
 800a384:	4313      	orrs	r3, r2
 800a386:	b25b      	sxtb	r3, r3
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	e001      	b.n	800a390 <put_fat+0xbc>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2201      	movs	r2, #1
 800a398:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	899b      	ldrh	r3, [r3, #12]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3aa:	4413      	add	r3, r2
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f7ff fd7e 	bl	8009eb0 <move_window>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3b8:	7ffb      	ldrb	r3, [r7, #31]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f040 809e 	bne.w	800a4fc <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	899b      	ldrh	r3, [r3, #12]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3d2:	fb00 f202 	mul.w	r2, r0, r2
 800a3d6:	1a9b      	subs	r3, r3, r2
 800a3d8:	440b      	add	r3, r1
 800a3da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f003 0301 	and.w	r3, r3, #1
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <put_fat+0x11a>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	091b      	lsrs	r3, r3, #4
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	e00e      	b.n	800a40c <put_fat+0x138>
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	b25b      	sxtb	r3, r3
 800a3f4:	f023 030f 	bic.w	r3, r3, #15
 800a3f8:	b25a      	sxtb	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	0a1b      	lsrs	r3, r3, #8
 800a3fe:	b25b      	sxtb	r3, r3
 800a400:	f003 030f 	and.w	r3, r3, #15
 800a404:	b25b      	sxtb	r3, r3
 800a406:	4313      	orrs	r3, r2
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2201      	movs	r2, #1
 800a414:	70da      	strb	r2, [r3, #3]
			break;
 800a416:	e076      	b.n	800a506 <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	899b      	ldrh	r3, [r3, #12]
 800a420:	085b      	lsrs	r3, r3, #1
 800a422:	b29b      	uxth	r3, r3
 800a424:	4619      	mov	r1, r3
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	fbb3 f3f1 	udiv	r3, r3, r1
 800a42c:	4413      	add	r3, r2
 800a42e:	4619      	mov	r1, r3
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7ff fd3d 	bl	8009eb0 <move_window>
 800a436:	4603      	mov	r3, r0
 800a438:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a43a:	7ffb      	ldrb	r3, [r7, #31]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d15f      	bne.n	800a500 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	8992      	ldrh	r2, [r2, #12]
 800a44e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a452:	fb00 f202 	mul.w	r2, r0, r2
 800a456:	1a9b      	subs	r3, r3, r2
 800a458:	440b      	add	r3, r1
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	b292      	uxth	r2, r2
 800a45e:	4611      	mov	r1, r2
 800a460:	4618      	mov	r0, r3
 800a462:	f7ff f9f7 	bl	8009854 <st_word>
			fs->wflag = 1;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	70da      	strb	r2, [r3, #3]
			break;
 800a46c:	e04b      	b.n	800a506 <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	899b      	ldrh	r3, [r3, #12]
 800a476:	089b      	lsrs	r3, r3, #2
 800a478:	b29b      	uxth	r3, r3
 800a47a:	4619      	mov	r1, r3
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a482:	4413      	add	r3, r2
 800a484:	4619      	mov	r1, r3
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f7ff fd12 	bl	8009eb0 <move_window>
 800a48c:	4603      	mov	r3, r0
 800a48e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a490:	7ffb      	ldrb	r3, [r7, #31]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d136      	bne.n	800a504 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	d017      	beq.n	800a4ce <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	8992      	ldrh	r2, [r2, #12]
 800a4b2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4b6:	fb00 f202 	mul.w	r2, r0, r2
 800a4ba:	1a9b      	subs	r3, r3, r2
 800a4bc:	440b      	add	r3, r1
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff f8ca 	bl	8009658 <ld_dword>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4ca:	4323      	orrs	r3, r4
 800a4cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	8992      	ldrh	r2, [r2, #12]
 800a4dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4e0:	fb00 f202 	mul.w	r2, r0, r2
 800a4e4:	1a9b      	subs	r3, r3, r2
 800a4e6:	440b      	add	r3, r1
 800a4e8:	6879      	ldr	r1, [r7, #4]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff f9cd 	bl	800988a <st_dword>
			fs->wflag = 1;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	70da      	strb	r2, [r3, #3]
			break;
 800a4f6:	e006      	b.n	800a506 <put_fat+0x232>
			if (res != FR_OK) break;
 800a4f8:	bf00      	nop
 800a4fa:	e004      	b.n	800a506 <put_fat+0x232>
			if (res != FR_OK) break;
 800a4fc:	bf00      	nop
 800a4fe:	e002      	b.n	800a506 <put_fat+0x232>
			if (res != FR_OK) break;
 800a500:	bf00      	nop
 800a502:	e000      	b.n	800a506 <put_fat+0x232>
			if (res != FR_OK) break;
 800a504:	bf00      	nop
		}
	}
	return res;
 800a506:	7ffb      	ldrb	r3, [r7, #31]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3724      	adds	r7, #36	@ 0x24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd90      	pop	{r4, r7, pc}

0800a510 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	@ 0x28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	3b02      	subs	r3, #2
 800a520:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a526:	3b02      	subs	r3, #2
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d301      	bcc.n	800a532 <find_bitmap+0x22>
 800a52e:	2300      	movs	r3, #0
 800a530:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	61fb      	str	r3, [r7, #28]
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	61bb      	str	r3, [r7, #24]
 800a53a:	2300      	movs	r3, #0
 800a53c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	08db      	lsrs	r3, r3, #3
 800a546:	68f9      	ldr	r1, [r7, #12]
 800a548:	8989      	ldrh	r1, [r1, #12]
 800a54a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a54e:	4413      	add	r3, r2
 800a550:	4619      	mov	r1, r3
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f7ff fcac 	bl	8009eb0 <move_window>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <find_bitmap+0x54>
 800a55e:	f04f 33ff 	mov.w	r3, #4294967295
 800a562:	e058      	b.n	800a616 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	08db      	lsrs	r3, r3, #3
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	8992      	ldrh	r2, [r2, #12]
 800a56c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a570:	fb01 f202 	mul.w	r2, r1, r2
 800a574:	1a9b      	subs	r3, r3, r2
 800a576:	623b      	str	r3, [r7, #32]
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f003 0307 	and.w	r3, r3, #7
 800a57e:	2201      	movs	r2, #1
 800a580:	fa02 f303 	lsl.w	r3, r2, r3
 800a584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	4413      	add	r3, r2
 800a58e:	3340      	adds	r3, #64	@ 0x40
 800a590:	781a      	ldrb	r2, [r3, #0]
 800a592:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a596:	4013      	ands	r3, r2
 800a598:	74fb      	strb	r3, [r7, #19]
 800a59a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	61fb      	str	r3, [r7, #28]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ae:	3b02      	subs	r3, #2
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d307      	bcc.n	800a5c6 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	61fb      	str	r3, [r7, #28]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	899b      	ldrh	r3, [r3, #12]
 800a5c4:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800a5c6:	7cfb      	ldrb	r3, [r7, #19]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d109      	bne.n	800a5e0 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	617b      	str	r3, [r7, #20]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d106      	bne.n	800a5e8 <find_bitmap+0xd8>
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	3302      	adds	r3, #2
 800a5de:	e01a      	b.n	800a616 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	61bb      	str	r3, [r7, #24]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d101      	bne.n	800a5f4 <find_bitmap+0xe4>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e010      	b.n	800a616 <find_bitmap+0x106>
			} while (bm);
 800a5f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1c5      	bne.n	800a588 <find_bitmap+0x78>
			bm = 1;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	3301      	adds	r3, #1
 800a606:	623b      	str	r3, [r7, #32]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	899b      	ldrh	r3, [r3, #12]
 800a60c:	461a      	mov	r2, r3
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	4293      	cmp	r3, r2
 800a612:	d3b9      	bcc.n	800a588 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a614:	e793      	b.n	800a53e <find_bitmap+0x2e>
	}
}
 800a616:	4618      	mov	r0, r3
 800a618:	3728      	adds	r7, #40	@ 0x28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b088      	sub	sp, #32
 800a622:	af00      	add	r7, sp, #0
 800a624:	60f8      	str	r0, [r7, #12]
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	607a      	str	r2, [r7, #4]
 800a62a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	3b02      	subs	r3, #2
 800a630:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	08db      	lsrs	r3, r3, #3
 800a63a:	68f9      	ldr	r1, [r7, #12]
 800a63c:	8989      	ldrh	r1, [r1, #12]
 800a63e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a642:	4413      	add	r3, r2
 800a644:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	08db      	lsrs	r3, r3, #3
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	8992      	ldrh	r2, [r2, #12]
 800a64e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a652:	fb01 f202 	mul.w	r2, r1, r2
 800a656:	1a9b      	subs	r3, r3, r2
 800a658:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	2201      	movs	r2, #1
 800a662:	fa02 f303 	lsl.w	r3, r2, r3
 800a666:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	617a      	str	r2, [r7, #20]
 800a66e:	4619      	mov	r1, r3
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f7ff fc1d 	bl	8009eb0 <move_window>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <change_bitmap+0x62>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e03f      	b.n	800a700 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	4413      	add	r3, r2
 800a686:	3340      	adds	r3, #64	@ 0x40
 800a688:	781a      	ldrb	r2, [r3, #0]
 800a68a:	7ffb      	ldrb	r3, [r7, #31]
 800a68c:	4013      	ands	r3, r2
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	2b00      	cmp	r3, #0
 800a692:	bf14      	ite	ne
 800a694:	2301      	movne	r3, #1
 800a696:	2300      	moveq	r3, #0
 800a698:	b2db      	uxtb	r3, r3
 800a69a:	461a      	mov	r2, r3
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d101      	bne.n	800a6a6 <change_bitmap+0x88>
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	e02c      	b.n	800a700 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	3340      	adds	r3, #64	@ 0x40
 800a6ae:	781a      	ldrb	r2, [r3, #0]
 800a6b0:	7ffb      	ldrb	r3, [r7, #31]
 800a6b2:	4053      	eors	r3, r2
 800a6b4:	b2d9      	uxtb	r1, r3
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	3340      	adds	r3, #64	@ 0x40
 800a6be:	460a      	mov	r2, r1
 800a6c0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	607b      	str	r3, [r7, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <change_bitmap+0xba>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e013      	b.n	800a700 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800a6d8:	7ffb      	ldrb	r3, [r7, #31]
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	77fb      	strb	r3, [r7, #31]
 800a6de:	7ffb      	ldrb	r3, [r7, #31]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1cd      	bne.n	800a680 <change_bitmap+0x62>
			bm = 1;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	61bb      	str	r3, [r7, #24]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	899b      	ldrh	r3, [r3, #12]
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d3c2      	bcc.n	800a680 <change_bitmap+0x62>
		i = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a6fe:	e7b3      	b.n	800a668 <change_bitmap+0x4a>
	}
}
 800a700:	4618      	mov	r0, r3
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	79db      	ldrb	r3, [r3, #7]
 800a714:	2b03      	cmp	r3, #3
 800a716:	d121      	bne.n	800a75c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	613b      	str	r3, [r7, #16]
 800a724:	e014      	b.n	800a750 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6818      	ldr	r0, [r3, #0]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	3301      	adds	r3, #1
 800a72e:	461a      	mov	r2, r3
 800a730:	6979      	ldr	r1, [r7, #20]
 800a732:	f7ff fdcf 	bl	800a2d4 <put_fat>
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800a73a:	7bfb      	ldrb	r3, [r7, #15]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <fill_first_frag+0x3c>
 800a740:	7bfb      	ldrb	r3, [r7, #15]
 800a742:	e00c      	b.n	800a75e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	3301      	adds	r3, #1
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	613b      	str	r3, [r7, #16]
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1e7      	bne.n	800a726 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b086      	sub	sp, #24
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	60f8      	str	r0, [r7, #12]
 800a76e:	60b9      	str	r1, [r7, #8]
 800a770:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a772:	e020      	b.n	800a7b6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	1c59      	adds	r1, r3, #1
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d905      	bls.n	800a796 <fill_last_frag+0x30>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	69db      	ldr	r3, [r3, #28]
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	3302      	adds	r3, #2
 800a794:	e000      	b.n	800a798 <fill_last_frag+0x32>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	461a      	mov	r2, r3
 800a79a:	f7ff fd9b 	bl	800a2d4 <put_fat>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <fill_last_frag+0x46>
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	e009      	b.n	800a7c0 <fill_last_frag+0x5a>
		obj->n_frag--;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	69db      	ldr	r3, [r3, #28]
 800a7b0:	1e5a      	subs	r2, r3, #1
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1da      	bne.n	800a774 <fill_last_frag+0xe>
	}
	return FR_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b08a      	sub	sp, #40	@ 0x28
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d904      	bls.n	800a7f6 <remove_chain+0x2e>
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d301      	bcc.n	800a7fa <remove_chain+0x32>
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e096      	b.n	800a928 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d014      	beq.n	800a82a <remove_chain+0x62>
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b04      	cmp	r3, #4
 800a806:	d103      	bne.n	800a810 <remove_chain+0x48>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	79db      	ldrb	r3, [r3, #7]
 800a80c:	2b02      	cmp	r3, #2
 800a80e:	d00c      	beq.n	800a82a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a810:	f04f 32ff 	mov.w	r2, #4294967295
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	69b8      	ldr	r0, [r7, #24]
 800a818:	f7ff fd5c 	bl	800a2d4 <put_fat>
 800a81c:	4603      	mov	r3, r0
 800a81e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a820:	7ffb      	ldrb	r3, [r7, #31]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <remove_chain+0x62>
 800a826:	7ffb      	ldrb	r3, [r7, #31]
 800a828:	e07e      	b.n	800a928 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a82a:	68b9      	ldr	r1, [r7, #8]
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7ff fbfd 	bl	800a02c <get_fat>
 800a832:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d055      	beq.n	800a8e6 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d101      	bne.n	800a844 <remove_chain+0x7c>
 800a840:	2302      	movs	r3, #2
 800a842:	e071      	b.n	800a928 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84a:	d101      	bne.n	800a850 <remove_chain+0x88>
 800a84c:	2301      	movs	r3, #1
 800a84e:	e06b      	b.n	800a928 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	2b04      	cmp	r3, #4
 800a856:	d00b      	beq.n	800a870 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a858:	2200      	movs	r2, #0
 800a85a:	68b9      	ldr	r1, [r7, #8]
 800a85c:	69b8      	ldr	r0, [r7, #24]
 800a85e:	f7ff fd39 	bl	800a2d4 <put_fat>
 800a862:	4603      	mov	r3, r0
 800a864:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a866:	7ffb      	ldrb	r3, [r7, #31]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <remove_chain+0xa8>
 800a86c:	7ffb      	ldrb	r3, [r7, #31]
 800a86e:	e05b      	b.n	800a928 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	6a1a      	ldr	r2, [r3, #32]
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a878:	3b02      	subs	r3, #2
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d20b      	bcs.n	800a896 <remove_chain+0xce>
			fs->free_clst++;
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	1c5a      	adds	r2, r3, #1
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	791b      	ldrb	r3, [r3, #4]
 800a88c:	f043 0301 	orr.w	r3, r3, #1
 800a890:	b2da      	uxtb	r2, r3
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	3301      	adds	r3, #1
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d102      	bne.n	800a8a6 <remove_chain+0xde>
			ecl = nxt;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	623b      	str	r3, [r7, #32]
 800a8a4:	e017      	b.n	800a8d6 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	d10f      	bne.n	800a8ce <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800a8ae:	6a3a      	ldr	r2, [r7, #32]
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8ba:	69b8      	ldr	r0, [r7, #24]
 800a8bc:	f7ff feaf 	bl	800a61e <change_bitmap>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800a8c4:	7ffb      	ldrb	r3, [r7, #31]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <remove_chain+0x106>
 800a8ca:	7ffb      	ldrb	r3, [r7, #31]
 800a8cc:	e02c      	b.n	800a928 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	623b      	str	r3, [r7, #32]
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d3a2      	bcc.n	800a82a <remove_chain+0x62>
 800a8e4:	e000      	b.n	800a8e8 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800a8e6:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2b04      	cmp	r3, #4
 800a8ee:	d11a      	bne.n	800a926 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d103      	bne.n	800a8fe <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	71da      	strb	r2, [r3, #7]
 800a8fc:	e013      	b.n	800a926 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	79db      	ldrb	r3, [r3, #7]
 800a902:	2b03      	cmp	r3, #3
 800a904:	d10f      	bne.n	800a926 <remove_chain+0x15e>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d30a      	bcc.n	800a926 <remove_chain+0x15e>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	689a      	ldr	r2, [r3, #8]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	4413      	add	r3, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d802      	bhi.n	800a926 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2202      	movs	r2, #2
 800a924:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3728      	adds	r7, #40	@ 0x28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b088      	sub	sp, #32
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10d      	bne.n	800a962 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d004      	beq.n	800a95c <create_chain+0x2c>
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d31b      	bcc.n	800a994 <create_chain+0x64>
 800a95c:	2301      	movs	r3, #1
 800a95e:	61bb      	str	r3, [r7, #24]
 800a960:	e018      	b.n	800a994 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f7ff fb61 	bl	800a02c <get_fat>
 800a96a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d801      	bhi.n	800a976 <create_chain+0x46>
 800a972:	2301      	movs	r3, #1
 800a974:	e0d9      	b.n	800ab2a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97c:	d101      	bne.n	800a982 <create_chain+0x52>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	e0d3      	b.n	800ab2a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d201      	bcs.n	800a990 <create_chain+0x60>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	e0cc      	b.n	800ab2a <create_chain+0x1fa>
		scl = clst;
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b04      	cmp	r3, #4
 800a99a:	d164      	bne.n	800aa66 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800a99c:	2201      	movs	r2, #1
 800a99e:	69b9      	ldr	r1, [r7, #24]
 800a9a0:	6938      	ldr	r0, [r7, #16]
 800a9a2:	f7ff fdb5 	bl	800a510 <find_bitmap>
 800a9a6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <create_chain+0x86>
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d101      	bne.n	800a9ba <create_chain+0x8a>
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	e0b7      	b.n	800ab2a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	2201      	movs	r2, #1
 800a9be:	69f9      	ldr	r1, [r7, #28]
 800a9c0:	6938      	ldr	r0, [r7, #16]
 800a9c2:	f7ff fe2c 	bl	800a61e <change_bitmap>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d101      	bne.n	800a9d4 <create_chain+0xa4>
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e0aa      	b.n	800ab2a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d102      	bne.n	800a9e0 <create_chain+0xb0>
 800a9da:	f04f 33ff 	mov.w	r3, #4294967295
 800a9de:	e0a4      	b.n	800ab2a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d103      	bne.n	800a9ee <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	71da      	strb	r2, [r3, #7]
 800a9ec:	e011      	b.n	800aa12 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	79db      	ldrb	r3, [r3, #7]
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d10d      	bne.n	800aa12 <create_chain+0xe2>
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d008      	beq.n	800aa12 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2203      	movs	r2, #3
 800aa10:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	79db      	ldrb	r3, [r3, #7]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d064      	beq.n	800aae4 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d10b      	bne.n	800aa3c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <create_chain+0x104>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	3301      	adds	r3, #1
 800aa32:	e000      	b.n	800aa36 <create_chain+0x106>
 800aa34:	2302      	movs	r3, #2
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	61d3      	str	r3, [r2, #28]
 800aa3a:	e053      	b.n	800aae4 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d102      	bne.n	800aa4a <create_chain+0x11a>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800aa4a:	69fa      	ldr	r2, [r7, #28]
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7ff fe89 	bl	800a766 <fill_last_frag>
 800aa54:	4603      	mov	r3, r0
 800aa56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d142      	bne.n	800aae4 <create_chain+0x1b4>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	61da      	str	r2, [r3, #28]
 800aa64:	e03e      	b.n	800aae4 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa74:	69fa      	ldr	r2, [r7, #28]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d307      	bcc.n	800aa8a <create_chain+0x15a>
				ncl = 2;
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aa7e:	69fa      	ldr	r2, [r7, #28]
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d901      	bls.n	800aa8a <create_chain+0x15a>
 800aa86:	2300      	movs	r3, #0
 800aa88:	e04f      	b.n	800ab2a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aa8a:	69f9      	ldr	r1, [r7, #28]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f7ff facd 	bl	800a02c <get_fat>
 800aa92:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00e      	beq.n	800aab8 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d003      	beq.n	800aaa8 <create_chain+0x178>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa6:	d101      	bne.n	800aaac <create_chain+0x17c>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	e03e      	b.n	800ab2a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800aaac:	69fa      	ldr	r2, [r7, #28]
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d1da      	bne.n	800aa6a <create_chain+0x13a>
 800aab4:	2300      	movs	r3, #0
 800aab6:	e038      	b.n	800ab2a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800aab8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aaba:	f04f 32ff 	mov.w	r2, #4294967295
 800aabe:	69f9      	ldr	r1, [r7, #28]
 800aac0:	6938      	ldr	r0, [r7, #16]
 800aac2:	f7ff fc07 	bl	800a2d4 <put_fat>
 800aac6:	4603      	mov	r3, r0
 800aac8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d109      	bne.n	800aae4 <create_chain+0x1b4>
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d006      	beq.n	800aae4 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aad6:	69fa      	ldr	r2, [r7, #28]
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6938      	ldr	r0, [r7, #16]
 800aadc:	f7ff fbfa 	bl	800a2d4 <put_fat>
 800aae0:	4603      	mov	r3, r0
 800aae2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d116      	bne.n	800ab18 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	6a1a      	ldr	r2, [r3, #32]
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf8:	3b02      	subs	r3, #2
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d804      	bhi.n	800ab08 <create_chain+0x1d8>
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	1e5a      	subs	r2, r3, #1
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	791b      	ldrb	r3, [r3, #4]
 800ab0c:	f043 0301 	orr.w	r3, r3, #1
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	711a      	strb	r2, [r3, #4]
 800ab16:	e007      	b.n	800ab28 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d102      	bne.n	800ab24 <create_chain+0x1f4>
 800ab1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab22:	e000      	b.n	800ab26 <create_chain+0x1f6>
 800ab24:	2301      	movs	r3, #1
 800ab26:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab28:	69fb      	ldr	r3, [r7, #28]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3720      	adds	r7, #32
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ab32:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	899b      	ldrh	r3, [r3, #12]
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	2200      	movs	r2, #0
 800ab56:	4698      	mov	r8, r3
 800ab58:	4691      	mov	r9, r2
 800ab5a:	4642      	mov	r2, r8
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ab62:	f7f6 f823 	bl	8000bac <__aeabi_uldivmod>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	895b      	ldrh	r3, [r3, #10]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	2200      	movs	r2, #0
 800ab76:	461c      	mov	r4, r3
 800ab78:	4615      	mov	r5, r2
 800ab7a:	4622      	mov	r2, r4
 800ab7c:	462b      	mov	r3, r5
 800ab7e:	f7f6 f815 	bl	8000bac <__aeabi_uldivmod>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4613      	mov	r3, r2
 800ab88:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	1d1a      	adds	r2, r3, #4
 800ab8e:	61ba      	str	r2, [r7, #24]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <clmt_clust+0x6c>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	e010      	b.n	800abc0 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800ab9e:	69fa      	ldr	r2, [r7, #28]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d307      	bcc.n	800abb6 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800aba6:	69fa      	ldr	r2, [r7, #28]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	61fb      	str	r3, [r7, #28]
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	3304      	adds	r3, #4
 800abb2:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abb4:	e7e9      	b.n	800ab8a <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800abb6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	4413      	add	r3, r2
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800abca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b086      	sub	sp, #24
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d102      	bne.n	800abe8 <dir_sdi+0x1e>
 800abe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abe6:	e001      	b.n	800abec <dir_sdi+0x22>
 800abe8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d904      	bls.n	800abfc <dir_sdi+0x32>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	f003 031f 	and.w	r3, r3, #31
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <dir_sdi+0x36>
		return FR_INT_ERR;
 800abfc:	2302      	movs	r3, #2
 800abfe:	e074      	b.n	800acea <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d109      	bne.n	800ac26 <dir_sdi+0x5c>
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d905      	bls.n	800ac26 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac1e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10c      	bne.n	800ac46 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	8912      	ldrh	r2, [r2, #8]
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d301      	bcc.n	800ac3c <dir_sdi+0x72>
 800ac38:	2302      	movs	r3, #2
 800ac3a:	e056      	b.n	800acea <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac44:	e02d      	b.n	800aca2 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	895b      	ldrh	r3, [r3, #10]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	899b      	ldrh	r3, [r3, #12]
 800ac50:	fb02 f303 	mul.w	r3, r2, r3
 800ac54:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac56:	e019      	b.n	800ac8c <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6979      	ldr	r1, [r7, #20]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff f9e5 	bl	800a02c <get_fat>
 800ac62:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d101      	bne.n	800ac70 <dir_sdi+0xa6>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e03c      	b.n	800acea <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d904      	bls.n	800ac80 <dir_sdi+0xb6>
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7a:	697a      	ldr	r2, [r7, #20]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d301      	bcc.n	800ac84 <dir_sdi+0xba>
 800ac80:	2302      	movs	r3, #2
 800ac82:	e032      	b.n	800acea <dir_sdi+0x120>
			ofs -= csz;
 800ac84:	683a      	ldr	r2, [r7, #0]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d2e1      	bcs.n	800ac58 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800ac94:	6979      	ldr	r1, [r7, #20]
 800ac96:	6938      	ldr	r0, [r7, #16]
 800ac98:	f7ff f9a8 	bl	8009fec <clust2sect>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <dir_sdi+0xea>
 800acb0:	2302      	movs	r3, #2
 800acb2:	e01a      	b.n	800acea <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	899b      	ldrh	r3, [r3, #12]
 800acbc:	4619      	mov	r1, r3
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	fbb3 f3f1 	udiv	r3, r3, r1
 800acc4:	441a      	add	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	899b      	ldrh	r3, [r3, #12]
 800acd4:	461a      	mov	r2, r3
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	fbb3 f0f2 	udiv	r0, r3, r2
 800acdc:	fb00 f202 	mul.w	r2, r0, r2
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	18ca      	adds	r2, r1, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b086      	sub	sp, #24
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad06:	3320      	adds	r3, #32
 800ad08:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00b      	beq.n	800ad2a <dir_next+0x38>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d102      	bne.n	800ad20 <dir_next+0x2e>
 800ad1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad1e:	e001      	b.n	800ad24 <dir_next+0x32>
 800ad20:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d801      	bhi.n	800ad2e <dir_next+0x3c>
 800ad2a:	2304      	movs	r3, #4
 800ad2c:	e0c3      	b.n	800aeb6 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	899b      	ldrh	r3, [r3, #12]
 800ad32:	461a      	mov	r2, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad3a:	fb01 f202 	mul.w	r2, r1, r2
 800ad3e:	1a9b      	subs	r3, r3, r2
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f040 80a5 	bne.w	800ae90 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10b      	bne.n	800ad70 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	8912      	ldrh	r2, [r2, #8]
 800ad60:	4293      	cmp	r3, r2
 800ad62:	f0c0 8095 	bcc.w	800ae90 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad6c:	2304      	movs	r3, #4
 800ad6e:	e0a2      	b.n	800aeb6 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	899b      	ldrh	r3, [r3, #12]
 800ad74:	461a      	mov	r2, r3
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	8952      	ldrh	r2, [r2, #10]
 800ad80:	3a01      	subs	r2, #1
 800ad82:	4013      	ands	r3, r2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f040 8083 	bne.w	800ae90 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad90:	4619      	mov	r1, r3
 800ad92:	4610      	mov	r0, r2
 800ad94:	f7ff f94a 	bl	800a02c <get_fat>
 800ad98:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d801      	bhi.n	800ada4 <dir_next+0xb2>
 800ada0:	2302      	movs	r3, #2
 800ada2:	e088      	b.n	800aeb6 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adaa:	d101      	bne.n	800adb0 <dir_next+0xbe>
 800adac:	2301      	movs	r3, #1
 800adae:	e082      	b.n	800aeb6 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb4:	697a      	ldr	r2, [r7, #20]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d360      	bcc.n	800ae7c <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d104      	bne.n	800adca <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	639a      	str	r2, [r3, #56]	@ 0x38
 800adc6:	2304      	movs	r3, #4
 800adc8:	e075      	b.n	800aeb6 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f7ff fdac 	bl	800a930 <create_chain>
 800add8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <dir_next+0xf2>
 800ade0:	2307      	movs	r3, #7
 800ade2:	e068      	b.n	800aeb6 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d101      	bne.n	800adee <dir_next+0xfc>
 800adea:	2302      	movs	r3, #2
 800adec:	e063      	b.n	800aeb6 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf4:	d101      	bne.n	800adfa <dir_next+0x108>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e05d      	b.n	800aeb6 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	79db      	ldrb	r3, [r3, #7]
 800adfe:	f043 0304 	orr.w	r3, r3, #4
 800ae02:	b2da      	uxtb	r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7ff f80d 	bl	8009e28 <sync_window>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <dir_next+0x126>
 800ae14:	2301      	movs	r3, #1
 800ae16:	e04e      	b.n	800aeb6 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	899b      	ldrh	r3, [r3, #12]
 800ae22:	461a      	mov	r2, r3
 800ae24:	2100      	movs	r1, #0
 800ae26:	f7fe fe05 	bl	8009a34 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	613b      	str	r3, [r7, #16]
 800ae2e:	6979      	ldr	r1, [r7, #20]
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff f8db 	bl	8009fec <clust2sect>
 800ae36:	4602      	mov	r2, r0
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ae3c:	e012      	b.n	800ae64 <dir_next+0x172>
						fs->wflag = 1;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2201      	movs	r2, #1
 800ae42:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7fe ffef 	bl	8009e28 <sync_window>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d001      	beq.n	800ae54 <dir_next+0x162>
 800ae50:	2301      	movs	r3, #1
 800ae52:	e030      	b.n	800aeb6 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	3301      	adds	r3, #1
 800ae58:	613b      	str	r3, [r7, #16]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae5e:	1c5a      	adds	r2, r3, #1
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	63da      	str	r2, [r3, #60]	@ 0x3c
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	895b      	ldrh	r3, [r3, #10]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d3e6      	bcc.n	800ae3e <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	1ad2      	subs	r2, r2, r3
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800ae82:	6979      	ldr	r1, [r7, #20]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7ff f8b1 	bl	8009fec <clust2sect>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	899b      	ldrh	r3, [r3, #12]
 800aea0:	461a      	mov	r2, r3
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	fbb3 f0f2 	udiv	r0, r3, r2
 800aea8:	fb00 f202 	mul.w	r2, r0, r2
 800aeac:	1a9b      	subs	r3, r3, r2
 800aeae:	18ca      	adds	r2, r1, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b086      	sub	sp, #24
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aece:	2100      	movs	r1, #0
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff fe7a 	bl	800abca <dir_sdi>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d140      	bne.n	800af62 <dir_alloc+0xa4>
		n = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee8:	4619      	mov	r1, r3
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f7fe ffe0 	bl	8009eb0 <move_window>
 800aef0:	4603      	mov	r3, r0
 800aef2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d132      	bne.n	800af60 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d108      	bne.n	800af14 <dir_alloc+0x56>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	b25b      	sxtb	r3, r3
 800af0a:	43db      	mvns	r3, r3
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	09db      	lsrs	r3, r3, #7
 800af10:	b2db      	uxtb	r3, r3
 800af12:	e00f      	b.n	800af34 <dir_alloc+0x76>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	2be5      	cmp	r3, #229	@ 0xe5
 800af1c:	d004      	beq.n	800af28 <dir_alloc+0x6a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d101      	bne.n	800af2c <dir_alloc+0x6e>
 800af28:	2301      	movs	r3, #1
 800af2a:	e000      	b.n	800af2e <dir_alloc+0x70>
 800af2c:	2300      	movs	r3, #0
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	d007      	beq.n	800af48 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	3301      	adds	r3, #1
 800af3c:	613b      	str	r3, [r7, #16]
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	429a      	cmp	r2, r3
 800af44:	d102      	bne.n	800af4c <dir_alloc+0x8e>
 800af46:	e00c      	b.n	800af62 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af48:	2300      	movs	r3, #0
 800af4a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af4c:	2101      	movs	r1, #1
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7ff fecf 	bl	800acf2 <dir_next>
 800af54:	4603      	mov	r3, r0
 800af56:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af58:	7dfb      	ldrb	r3, [r7, #23]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d0c2      	beq.n	800aee4 <dir_alloc+0x26>
 800af5e:	e000      	b.n	800af62 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800af60:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	2b04      	cmp	r3, #4
 800af66:	d101      	bne.n	800af6c <dir_alloc+0xae>
 800af68:	2307      	movs	r3, #7
 800af6a:	75fb      	strb	r3, [r7, #23]
	return res;
 800af6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	331a      	adds	r3, #26
 800af84:	4618      	mov	r0, r3
 800af86:	f7fe fb4f 	bl	8009628 <ld_word>
 800af8a:	4603      	mov	r3, r0
 800af8c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b03      	cmp	r3, #3
 800af94:	d109      	bne.n	800afaa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	3314      	adds	r3, #20
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fe fb44 	bl	8009628 <ld_word>
 800afa0:	4603      	mov	r3, r0
 800afa2:	041b      	lsls	r3, r3, #16
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800afaa:	68fb      	ldr	r3, [r7, #12]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	331a      	adds	r3, #26
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	b292      	uxth	r2, r2
 800afc8:	4611      	mov	r1, r2
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fc42 	bl	8009854 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b03      	cmp	r3, #3
 800afd6:	d109      	bne.n	800afec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f103 0214 	add.w	r2, r3, #20
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	0c1b      	lsrs	r3, r3, #16
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f7fe fc34 	bl	8009854 <st_word>
	}
}
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800aff4:	b590      	push	{r4, r7, lr}
 800aff6:	b087      	sub	sp, #28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	331a      	adds	r3, #26
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fb10 	bl	8009628 <ld_word>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <cmp_lfn+0x1e>
 800b00e:	2300      	movs	r3, #0
 800b010:	e059      	b.n	800b0c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b01a:	1e5a      	subs	r2, r3, #1
 800b01c:	4613      	mov	r3, r2
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b028:	2301      	movs	r3, #1
 800b02a:	81fb      	strh	r3, [r7, #14]
 800b02c:	2300      	movs	r3, #0
 800b02e:	613b      	str	r3, [r7, #16]
 800b030:	e033      	b.n	800b09a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b032:	4a27      	ldr	r2, [pc, #156]	@ (800b0d0 <cmp_lfn+0xdc>)
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	4413      	add	r3, r2
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	4413      	add	r3, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f7fe faf1 	bl	8009628 <ld_word>
 800b046:	4603      	mov	r3, r0
 800b048:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b04a:	89fb      	ldrh	r3, [r7, #14]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01a      	beq.n	800b086 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2bfe      	cmp	r3, #254	@ 0xfe
 800b054:	d812      	bhi.n	800b07c <cmp_lfn+0x88>
 800b056:	89bb      	ldrh	r3, [r7, #12]
 800b058:	4618      	mov	r0, r3
 800b05a:	f003 ff39 	bl	800eed0 <ff_wtoupper>
 800b05e:	4603      	mov	r3, r0
 800b060:	461c      	mov	r4, r3
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	617a      	str	r2, [r7, #20]
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4413      	add	r3, r2
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	4618      	mov	r0, r3
 800b072:	f003 ff2d 	bl	800eed0 <ff_wtoupper>
 800b076:	4603      	mov	r3, r0
 800b078:	429c      	cmp	r4, r3
 800b07a:	d001      	beq.n	800b080 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b07c:	2300      	movs	r3, #0
 800b07e:	e022      	b.n	800b0c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b080:	89bb      	ldrh	r3, [r7, #12]
 800b082:	81fb      	strh	r3, [r7, #14]
 800b084:	e006      	b.n	800b094 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b086:	89bb      	ldrh	r3, [r7, #12]
 800b088:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d001      	beq.n	800b094 <cmp_lfn+0xa0>
 800b090:	2300      	movs	r3, #0
 800b092:	e018      	b.n	800b0c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	3301      	adds	r3, #1
 800b098:	613b      	str	r3, [r7, #16]
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	2b0c      	cmp	r3, #12
 800b09e:	d9c8      	bls.n	800b032 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <cmp_lfn+0xd0>
 800b0ac:	89fb      	ldrh	r3, [r7, #14]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d008      	beq.n	800b0c4 <cmp_lfn+0xd0>
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <cmp_lfn+0xd0>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e000      	b.n	800b0c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b0c4:	2301      	movs	r3, #1
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	371c      	adds	r7, #28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd90      	pop	{r4, r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	080185b4 	.word	0x080185b4

0800b0d4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	331a      	adds	r3, #26
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7fe faa0 	bl	8009628 <ld_word>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <pick_lfn+0x1e>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e04d      	b.n	800b18e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0fa:	1e5a      	subs	r2, r3, #1
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	005b      	lsls	r3, r3, #1
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b108:	2301      	movs	r3, #1
 800b10a:	81fb      	strh	r3, [r7, #14]
 800b10c:	2300      	movs	r3, #0
 800b10e:	613b      	str	r3, [r7, #16]
 800b110:	e028      	b.n	800b164 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b112:	4a21      	ldr	r2, [pc, #132]	@ (800b198 <pick_lfn+0xc4>)
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4413      	add	r3, r2
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	4413      	add	r3, r2
 800b120:	4618      	mov	r0, r3
 800b122:	f7fe fa81 	bl	8009628 <ld_word>
 800b126:	4603      	mov	r3, r0
 800b128:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b12a:	89fb      	ldrh	r3, [r7, #14]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00f      	beq.n	800b150 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2bfe      	cmp	r3, #254	@ 0xfe
 800b134:	d901      	bls.n	800b13a <pick_lfn+0x66>
 800b136:	2300      	movs	r3, #0
 800b138:	e029      	b.n	800b18e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b13a:	89bb      	ldrh	r3, [r7, #12]
 800b13c:	81fb      	strh	r3, [r7, #14]
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	1c5a      	adds	r2, r3, #1
 800b142:	617a      	str	r2, [r7, #20]
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	4413      	add	r3, r2
 800b14a:	89fa      	ldrh	r2, [r7, #14]
 800b14c:	801a      	strh	r2, [r3, #0]
 800b14e:	e006      	b.n	800b15e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b150:	89bb      	ldrh	r3, [r7, #12]
 800b152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b156:	4293      	cmp	r3, r2
 800b158:	d001      	beq.n	800b15e <pick_lfn+0x8a>
 800b15a:	2300      	movs	r3, #0
 800b15c:	e017      	b.n	800b18e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	3301      	adds	r3, #1
 800b162:	613b      	str	r3, [r7, #16]
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	2b0c      	cmp	r3, #12
 800b168:	d9d3      	bls.n	800b112 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00a      	beq.n	800b18c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2bfe      	cmp	r3, #254	@ 0xfe
 800b17a:	d901      	bls.n	800b180 <pick_lfn+0xac>
 800b17c:	2300      	movs	r3, #0
 800b17e:	e006      	b.n	800b18e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	4413      	add	r3, r2
 800b188:	2200      	movs	r2, #0
 800b18a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b18c:	2301      	movs	r3, #1
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	080185b4 	.word	0x080185b4

0800b19c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	4611      	mov	r1, r2
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	71fb      	strb	r3, [r7, #7]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	330d      	adds	r3, #13
 800b1b6:	79ba      	ldrb	r2, [r7, #6]
 800b1b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	330b      	adds	r3, #11
 800b1be:	220f      	movs	r2, #15
 800b1c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	330c      	adds	r3, #12
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	331a      	adds	r3, #26
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fe fb3f 	bl	8009854 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	1e5a      	subs	r2, r3, #1
 800b1da:	4613      	mov	r3, r2
 800b1dc:	005b      	lsls	r3, r3, #1
 800b1de:	4413      	add	r3, r2
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	82fb      	strh	r3, [r7, #22]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b1ee:	8afb      	ldrh	r3, [r7, #22]
 800b1f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d007      	beq.n	800b208 <put_lfn+0x6c>
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	61fa      	str	r2, [r7, #28]
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	68fa      	ldr	r2, [r7, #12]
 800b202:	4413      	add	r3, r2
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b208:	4a17      	ldr	r2, [pc, #92]	@ (800b268 <put_lfn+0xcc>)
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	4413      	add	r3, r2
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	461a      	mov	r2, r3
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	4413      	add	r3, r2
 800b216:	8afa      	ldrh	r2, [r7, #22]
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe fb1a 	bl	8009854 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b220:	8afb      	ldrh	r3, [r7, #22]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d102      	bne.n	800b22c <put_lfn+0x90>
 800b226:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b22a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	3301      	adds	r3, #1
 800b230:	61bb      	str	r3, [r7, #24]
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	2b0c      	cmp	r3, #12
 800b236:	d9da      	bls.n	800b1ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b238:	8afb      	ldrh	r3, [r7, #22]
 800b23a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b23e:	4293      	cmp	r3, r2
 800b240:	d006      	beq.n	800b250 <put_lfn+0xb4>
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	4413      	add	r3, r2
 800b24a:	881b      	ldrh	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d103      	bne.n	800b258 <put_lfn+0xbc>
 800b250:	79fb      	ldrb	r3, [r7, #7]
 800b252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b256:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	79fa      	ldrb	r2, [r7, #7]
 800b25c:	701a      	strb	r2, [r3, #0]
}
 800b25e:	bf00      	nop
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	080185b4 	.word	0x080185b4

0800b26c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b08c      	sub	sp, #48	@ 0x30
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b27a:	220b      	movs	r2, #11
 800b27c:	68b9      	ldr	r1, [r7, #8]
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f7fe fbb7 	bl	80099f2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b05      	cmp	r3, #5
 800b288:	d92b      	bls.n	800b2e2 <gen_numname+0x76>
		sr = seq;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b28e:	e022      	b.n	800b2d6 <gen_numname+0x6a>
			wc = *lfn++;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	1c9a      	adds	r2, r3, #2
 800b294:	607a      	str	r2, [r7, #4]
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b29a:	2300      	movs	r3, #0
 800b29c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b29e:	e017      	b.n	800b2d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	005a      	lsls	r2, r3, #1
 800b2a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	4413      	add	r3, r2
 800b2ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b2ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b2b0:	085b      	lsrs	r3, r3, #1
 800b2b2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d005      	beq.n	800b2ca <gen_numname+0x5e>
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b2c4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b2c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d2:	2b0f      	cmp	r3, #15
 800b2d4:	d9e4      	bls.n	800b2a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1d8      	bne.n	800b290 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b2e2:	2307      	movs	r3, #7
 800b2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	f003 030f 	and.w	r3, r3, #15
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	3330      	adds	r3, #48	@ 0x30
 800b2f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b2f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2fa:	2b39      	cmp	r3, #57	@ 0x39
 800b2fc:	d904      	bls.n	800b308 <gen_numname+0x9c>
 800b2fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b302:	3307      	adds	r3, #7
 800b304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30a:	1e5a      	subs	r2, r3, #1
 800b30c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b30e:	3330      	adds	r3, #48	@ 0x30
 800b310:	443b      	add	r3, r7
 800b312:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b316:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	091b      	lsrs	r3, r3, #4
 800b31e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1df      	bne.n	800b2e6 <gen_numname+0x7a>
	ns[i] = '~';
 800b326:	f107 0214 	add.w	r2, r7, #20
 800b32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32c:	4413      	add	r3, r2
 800b32e:	227e      	movs	r2, #126	@ 0x7e
 800b330:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b332:	2300      	movs	r3, #0
 800b334:	627b      	str	r3, [r7, #36]	@ 0x24
 800b336:	e002      	b.n	800b33e <gen_numname+0xd2>
 800b338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33a:	3301      	adds	r3, #1
 800b33c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	429a      	cmp	r2, r3
 800b344:	d205      	bcs.n	800b352 <gen_numname+0xe6>
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34a:	4413      	add	r3, r2
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	2b20      	cmp	r3, #32
 800b350:	d1f2      	bne.n	800b338 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b354:	2b07      	cmp	r3, #7
 800b356:	d807      	bhi.n	800b368 <gen_numname+0xfc>
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b35e:	3330      	adds	r3, #48	@ 0x30
 800b360:	443b      	add	r3, r7
 800b362:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b366:	e000      	b.n	800b36a <gen_numname+0xfe>
 800b368:	2120      	movs	r1, #32
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4413      	add	r3, r2
 800b374:	460a      	mov	r2, r1
 800b376:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37a:	2b07      	cmp	r3, #7
 800b37c:	d9e9      	bls.n	800b352 <gen_numname+0xe6>
}
 800b37e:	bf00      	nop
 800b380:	bf00      	nop
 800b382:	3730      	adds	r7, #48	@ 0x30
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b390:	2300      	movs	r3, #0
 800b392:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b394:	230b      	movs	r3, #11
 800b396:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	0852      	lsrs	r2, r2, #1
 800b39e:	01db      	lsls	r3, r3, #7
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	b2da      	uxtb	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	1c59      	adds	r1, r3, #1
 800b3a8:	6079      	str	r1, [r7, #4]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	60bb      	str	r3, [r7, #8]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1ed      	bne.n	800b398 <sum_sfn+0x10>
	return sum;
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b087      	sub	sp, #28
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	015b      	lsls	r3, r3, #5
 800b3dc:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b3de:	2300      	movs	r3, #0
 800b3e0:	827b      	strh	r3, [r7, #18]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]
 800b3e6:	e017      	b.n	800b418 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d103      	bne.n	800b3f6 <xdir_sum+0x2c>
			i++;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	617b      	str	r3, [r7, #20]
 800b3f4:	e00d      	b.n	800b412 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b3f6:	8a7b      	ldrh	r3, [r7, #18]
 800b3f8:	03db      	lsls	r3, r3, #15
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	8a7b      	ldrh	r3, [r7, #18]
 800b3fe:	085b      	lsrs	r3, r3, #1
 800b400:	b29b      	uxth	r3, r3
 800b402:	4413      	add	r3, r2
 800b404:	b29b      	uxth	r3, r3
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	440a      	add	r2, r1
 800b40c:	7812      	ldrb	r2, [r2, #0]
 800b40e:	4413      	add	r3, r2
 800b410:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	3301      	adds	r3, #1
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d3e3      	bcc.n	800b3e8 <xdir_sum+0x1e>
		}
	}
	return sum;
 800b420:	8a7b      	ldrh	r3, [r7, #18]
}
 800b422:	4618      	mov	r0, r3
 800b424:	371c      	adds	r7, #28
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b084      	sub	sp, #16
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800b436:	2300      	movs	r3, #0
 800b438:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800b43a:	e01f      	b.n	800b47c <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b43c:	89bb      	ldrh	r3, [r7, #12]
 800b43e:	4618      	mov	r0, r3
 800b440:	f003 fd46 	bl	800eed0 <ff_wtoupper>
 800b444:	4603      	mov	r3, r0
 800b446:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b448:	89fb      	ldrh	r3, [r7, #14]
 800b44a:	03db      	lsls	r3, r3, #15
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	89fb      	ldrh	r3, [r7, #14]
 800b450:	085b      	lsrs	r3, r3, #1
 800b452:	b29b      	uxth	r3, r3
 800b454:	4413      	add	r3, r2
 800b456:	b29a      	uxth	r2, r3
 800b458:	89bb      	ldrh	r3, [r7, #12]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	4413      	add	r3, r2
 800b460:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b462:	89fb      	ldrh	r3, [r7, #14]
 800b464:	03db      	lsls	r3, r3, #15
 800b466:	b29a      	uxth	r2, r3
 800b468:	89fb      	ldrh	r3, [r7, #14]
 800b46a:	085b      	lsrs	r3, r3, #1
 800b46c:	b29b      	uxth	r3, r3
 800b46e:	4413      	add	r3, r2
 800b470:	b29a      	uxth	r2, r3
 800b472:	89bb      	ldrh	r3, [r7, #12]
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	b29b      	uxth	r3, r3
 800b478:	4413      	add	r3, r2
 800b47a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	1c9a      	adds	r2, r3, #2
 800b480:	607a      	str	r2, [r7, #4]
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	81bb      	strh	r3, [r7, #12]
 800b486:	89bb      	ldrh	r3, [r7, #12]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1d7      	bne.n	800b43c <xname_sum+0xe>
	}
	return sum;
 800b48c:	89fb      	ldrh	r3, [r7, #14]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b4a4:	2340      	movs	r3, #64	@ 0x40
 800b4a6:	613b      	str	r3, [r7, #16]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	e02c      	b.n	800b508 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f003 031f 	and.w	r3, r3, #31
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d102      	bne.n	800b4be <get_xdir_info+0x28>
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	3302      	adds	r3, #2
 800b4bc:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7fe f8af 	bl	8009628 <ld_word>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f003 fcc2 	bl	800ee58 <ff_convert>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800b4d8:	897b      	ldrh	r3, [r7, #10]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <get_xdir_info+0x4e>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2bfe      	cmp	r3, #254	@ 0xfe
 800b4e2:	d902      	bls.n	800b4ea <get_xdir_info+0x54>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	617b      	str	r3, [r7, #20]
 800b4e8:	e015      	b.n	800b516 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	617a      	str	r2, [r7, #20]
 800b4f0:	897a      	ldrh	r2, [r7, #10]
 800b4f2:	b2d1      	uxtb	r1, r2
 800b4f4:	683a      	ldr	r2, [r7, #0]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	460a      	mov	r2, r1
 800b4fa:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	3302      	adds	r3, #2
 800b500:	613b      	str	r3, [r7, #16]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3301      	adds	r3, #1
 800b506:	60fb      	str	r3, [r7, #12]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	3323      	adds	r3, #35	@ 0x23
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	461a      	mov	r2, r3
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	4293      	cmp	r3, r2
 800b514:	d3cb      	bcc.n	800b4ae <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <get_xdir_info+0x94>
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	617a      	str	r2, [r7, #20]
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	4413      	add	r3, r2
 800b526:	223f      	movs	r2, #63	@ 0x3f
 800b528:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	4413      	add	r3, r2
 800b530:	331a      	adds	r3, #26
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2200      	movs	r2, #0
 800b53a:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	791a      	ldrb	r2, [r3, #4]
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	7b1b      	ldrb	r3, [r3, #12]
 800b548:	f003 0310 	and.w	r3, r3, #16
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d107      	bne.n	800b560 <get_xdir_info+0xca>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3338      	adds	r3, #56	@ 0x38
 800b554:	4618      	mov	r0, r3
 800b556:	f7fe f8a2 	bl	800969e <ld_qword>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	e003      	b.n	800b568 <get_xdir_info+0xd2>
 800b560:	f04f 0200 	mov.w	r2, #0
 800b564:	f04f 0300 	mov.w	r3, #0
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	330c      	adds	r3, #12
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe f858 	bl	8009628 <ld_word>
 800b578:	4603      	mov	r3, r0
 800b57a:	461a      	mov	r2, r3
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	330e      	adds	r3, #14
 800b584:	4618      	mov	r0, r3
 800b586:	f7fe f84f 	bl	8009628 <ld_word>
 800b58a:	4603      	mov	r3, r0
 800b58c:	461a      	mov	r2, r3
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	811a      	strh	r2, [r3, #8]
}
 800b592:	bf00      	nop
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800b59c:	b590      	push	{r4, r7, lr}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	f7fe fc7a 	bl	8009eb0 <move_window>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <load_xdir+0x2e>
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	e09f      	b.n	800b70a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b85      	cmp	r3, #133	@ 0x85
 800b5d2:	d001      	beq.n	800b5d8 <load_xdir+0x3c>
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	e098      	b.n	800b70a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5dc:	2220      	movs	r2, #32
 800b5de:	4619      	mov	r1, r3
 800b5e0:	6938      	ldr	r0, [r7, #16]
 800b5e2:	f7fe fa06 	bl	80099f2 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	015b      	lsls	r3, r3, #5
 800b5f0:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	2b5f      	cmp	r3, #95	@ 0x5f
 800b5f6:	d903      	bls.n	800b600 <load_xdir+0x64>
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b5fe:	d901      	bls.n	800b604 <load_xdir+0x68>
 800b600:	2302      	movs	r3, #2
 800b602:	e082      	b.n	800b70a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800b604:	2100      	movs	r1, #0
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff fb73 	bl	800acf2 <dir_next>
 800b60c:	4603      	mov	r3, r0
 800b60e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d001      	beq.n	800b61a <load_xdir+0x7e>
 800b616:	7bfb      	ldrb	r3, [r7, #15]
 800b618:	e077      	b.n	800b70a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b622:	4619      	mov	r1, r3
 800b624:	4610      	mov	r0, r2
 800b626:	f7fe fc43 	bl	8009eb0 <move_window>
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <load_xdir+0x9c>
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	e068      	b.n	800b70a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b640:	d001      	beq.n	800b646 <load_xdir+0xaa>
 800b642:	2302      	movs	r3, #2
 800b644:	e061      	b.n	800b70a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f103 0020 	add.w	r0, r3, #32
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b650:	2220      	movs	r2, #32
 800b652:	4619      	mov	r1, r3
 800b654:	f7fe f9cd 	bl	80099f2 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	3323      	adds	r3, #35	@ 0x23
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	332c      	adds	r3, #44	@ 0x2c
 800b660:	4a2c      	ldr	r2, [pc, #176]	@ (800b714 <load_xdir+0x178>)
 800b662:	fba2 2303 	umull	r2, r3, r2, r3
 800b666:	08db      	lsrs	r3, r3, #3
 800b668:	015b      	lsls	r3, r3, #5
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d201      	bcs.n	800b674 <load_xdir+0xd8>
 800b670:	2302      	movs	r3, #2
 800b672:	e04a      	b.n	800b70a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800b674:	2340      	movs	r3, #64	@ 0x40
 800b676:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800b678:	2100      	movs	r1, #0
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fb39 	bl	800acf2 <dir_next>
 800b680:	4603      	mov	r3, r0
 800b682:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d001      	beq.n	800b68e <load_xdir+0xf2>
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
 800b68c:	e03d      	b.n	800b70a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b696:	4619      	mov	r1, r3
 800b698:	4610      	mov	r0, r2
 800b69a:	f7fe fc09 	bl	8009eb0 <move_window>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <load_xdir+0x110>
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
 800b6aa:	e02e      	b.n	800b70a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2bc1      	cmp	r3, #193	@ 0xc1
 800b6b4:	d001      	beq.n	800b6ba <load_xdir+0x11e>
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e027      	b.n	800b70a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b6c0:	d208      	bcs.n	800b6d4 <load_xdir+0x138>
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	18d0      	adds	r0, r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	f7fe f98f 	bl	80099f2 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	3320      	adds	r3, #32
 800b6d8:	617b      	str	r3, [r7, #20]
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d3ca      	bcc.n	800b678 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800b6e8:	d80e      	bhi.n	800b708 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b6ea:	6938      	ldr	r0, [r7, #16]
 800b6ec:	f7ff fe6d 	bl	800b3ca <xdir_sum>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	461c      	mov	r4, r3
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	3302      	adds	r3, #2
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fd ff95 	bl	8009628 <ld_word>
 800b6fe:	4603      	mov	r3, r0
 800b700:	429c      	cmp	r4, r3
 800b702:	d001      	beq.n	800b708 <load_xdir+0x16c>
 800b704:	2302      	movs	r3, #2
 800b706:	e000      	b.n	800b70a <load_xdir+0x16e>
	}
	return FR_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	371c      	adds	r7, #28
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd90      	pop	{r4, r7, pc}
 800b712:	bf00      	nop
 800b714:	88888889 	.word	0x88888889

0800b718 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800b718:	b5b0      	push	{r4, r5, r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800b722:	6839      	ldr	r1, [r7, #0]
 800b724:	6808      	ldr	r0, [r1, #0]
 800b726:	6879      	ldr	r1, [r7, #4]
 800b728:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6a08      	ldr	r0, [r1, #32]
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800b736:	b2c8      	uxtb	r0, r1
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800b740:	2000      	movs	r0, #0
 800b742:	460c      	mov	r4, r1
 800b744:	4605      	mov	r5, r0
 800b746:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800b74a:	2300      	movs	r3, #0
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7ff fa32 	bl	800abca <dir_sdi>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b76a:	7bfb      	ldrb	r3, [r7, #15]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7ff ff13 	bl	800b59c <load_xdir>
 800b776:	4603      	mov	r3, r0
 800b778:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bdb0      	pop	{r4, r5, r7, pc}

0800b784 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800b784:	b590      	push	{r4, r7, lr}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	1c9c      	adds	r4, r3, #2
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff fe16 	bl	800b3ca <xdir_sum>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f7fe f856 	bl	8009854 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fa06 	bl	800abca <dir_sdi>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b7c2:	e026      	b.n	800b812 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	f7fe fb6e 	bl	8009eb0 <move_window>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d11d      	bne.n	800b81a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	68f9      	ldr	r1, [r7, #12]
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe f903 	bl	80099f2 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	613b      	str	r3, [r7, #16]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00e      	beq.n	800b81e <store_xdir+0x9a>
		dirb += SZDIRE;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	3320      	adds	r3, #32
 800b804:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800b806:	2100      	movs	r1, #0
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7ff fa72 	bl	800acf2 <dir_next>
 800b80e:	4603      	mov	r3, r0
 800b810:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b812:	7dfb      	ldrb	r3, [r7, #23]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d0d5      	beq.n	800b7c4 <store_xdir+0x40>
 800b818:	e002      	b.n	800b820 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800b81a:	bf00      	nop
 800b81c:	e000      	b.n	800b820 <store_xdir+0x9c>
		if (--nent == 0) break;
 800b81e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <store_xdir+0xa8>
 800b826:	7dfb      	ldrb	r3, [r7, #23]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d101      	bne.n	800b830 <store_xdir+0xac>
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	e000      	b.n	800b832 <store_xdir+0xae>
 800b830:	2302      	movs	r3, #2
}
 800b832:	4618      	mov	r0, r3
 800b834:	371c      	adds	r7, #28
 800b836:	46bd      	mov	sp, r7
 800b838:	bd90      	pop	{r4, r7, pc}

0800b83a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800b83a:	b590      	push	{r4, r7, lr}
 800b83c:	b085      	sub	sp, #20
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800b844:	2240      	movs	r2, #64	@ 0x40
 800b846:	2100      	movs	r1, #0
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7fe f8f3 	bl	8009a34 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2285      	movs	r2, #133	@ 0x85
 800b852:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3320      	adds	r3, #32
 800b858:	22c0      	movs	r2, #192	@ 0xc0
 800b85a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800b85c:	2300      	movs	r3, #0
 800b85e:	72bb      	strb	r3, [r7, #10]
 800b860:	2301      	movs	r3, #1
 800b862:	72fb      	strb	r3, [r7, #11]
 800b864:	2301      	movs	r3, #1
 800b866:	813b      	strh	r3, [r7, #8]
 800b868:	2340      	movs	r3, #64	@ 0x40
 800b86a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	1c5a      	adds	r2, r3, #1
 800b870:	60fa      	str	r2, [r7, #12]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	4413      	add	r3, r2
 800b876:	22c1      	movs	r2, #193	@ 0xc1
 800b878:	701a      	strb	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	1c5a      	adds	r2, r3, #1
 800b87e:	60fa      	str	r2, [r7, #12]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	4413      	add	r3, r2
 800b884:	2200      	movs	r2, #0
 800b886:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800b888:	893b      	ldrh	r3, [r7, #8]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d00b      	beq.n	800b8a6 <create_xdir+0x6c>
 800b88e:	7abb      	ldrb	r3, [r7, #10]
 800b890:	005b      	lsls	r3, r3, #1
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	4413      	add	r3, r2
 800b896:	881b      	ldrh	r3, [r3, #0]
 800b898:	813b      	strh	r3, [r7, #8]
 800b89a:	893b      	ldrh	r3, [r7, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <create_xdir+0x6c>
 800b8a0:	7abb      	ldrb	r3, [r7, #10]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	893a      	ldrh	r2, [r7, #8]
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7fd ffcf 	bl	8009854 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	3302      	adds	r3, #2
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f003 031f 	and.w	r3, r3, #31
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e0      	bne.n	800b888 <create_xdir+0x4e>
		nb++;
 800b8c6:	7afb      	ldrb	r3, [r7, #11]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800b8cc:	7abb      	ldrb	r3, [r7, #10]
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1c8      	bne.n	800b86c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	3323      	adds	r3, #35	@ 0x23
 800b8de:	7aba      	ldrb	r2, [r7, #10]
 800b8e0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	7afa      	ldrb	r2, [r7, #11]
 800b8e8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800b8f0:	6838      	ldr	r0, [r7, #0]
 800b8f2:	f7ff fd9c 	bl	800b42e <xname_sum>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f7fd ffaa 	bl	8009854 <st_word>
}
 800b900:	bf00      	nop
 800b902:	3714      	adds	r7, #20
 800b904:	46bd      	mov	sp, r7
 800b906:	bd90      	pop	{r4, r7, pc}

0800b908 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b912:	2304      	movs	r3, #4
 800b914:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b91c:	23ff      	movs	r3, #255	@ 0xff
 800b91e:	757b      	strb	r3, [r7, #21]
 800b920:	23ff      	movs	r3, #255	@ 0xff
 800b922:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b924:	e09f      	b.n	800ba66 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b92a:	4619      	mov	r1, r3
 800b92c:	6938      	ldr	r0, [r7, #16]
 800b92e:	f7fe fabf 	bl	8009eb0 <move_window>
 800b932:	4603      	mov	r3, r0
 800b934:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b936:	7dfb      	ldrb	r3, [r7, #23]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f040 809a 	bne.w	800ba72 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b946:	7dbb      	ldrb	r3, [r7, #22]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d102      	bne.n	800b952 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b94c:	2304      	movs	r3, #4
 800b94e:	75fb      	strb	r3, [r7, #23]
 800b950:	e096      	b.n	800ba80 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	2b04      	cmp	r3, #4
 800b958:	d118      	bne.n	800b98c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800b95a:	7dbb      	ldrb	r3, [r7, #22]
 800b95c:	2b85      	cmp	r3, #133	@ 0x85
 800b95e:	d179      	bne.n	800ba54 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7ff fe17 	bl	800b59c <load_xdir>
 800b96e:	4603      	mov	r3, r0
 800b970:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d17e      	bne.n	800ba76 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	695b      	ldr	r3, [r3, #20]
 800b97c:	3304      	adds	r3, #4
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b984:	b2da      	uxtb	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	719a      	strb	r2, [r3, #6]
					}
					break;
 800b98a:	e074      	b.n	800ba76 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b990:	330b      	adds	r3, #11
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b998:	73fb      	strb	r3, [r7, #15]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	7bfa      	ldrb	r2, [r7, #15]
 800b99e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b9a0:	7dbb      	ldrb	r3, [r7, #22]
 800b9a2:	2be5      	cmp	r3, #229	@ 0xe5
 800b9a4:	d00e      	beq.n	800b9c4 <dir_read+0xbc>
 800b9a6:	7dbb      	ldrb	r3, [r7, #22]
 800b9a8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9aa:	d00b      	beq.n	800b9c4 <dir_read+0xbc>
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	f023 0320 	bic.w	r3, r3, #32
 800b9b2:	2b08      	cmp	r3, #8
 800b9b4:	bf0c      	ite	eq
 800b9b6:	2301      	moveq	r3, #1
 800b9b8:	2300      	movne	r3, #0
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	461a      	mov	r2, r3
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d002      	beq.n	800b9ca <dir_read+0xc2>
				ord = 0xFF;
 800b9c4:	23ff      	movs	r3, #255	@ 0xff
 800b9c6:	757b      	strb	r3, [r7, #21]
 800b9c8:	e044      	b.n	800ba54 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b9ca:	7bfb      	ldrb	r3, [r7, #15]
 800b9cc:	2b0f      	cmp	r3, #15
 800b9ce:	d12f      	bne.n	800ba30 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b9d0:	7dbb      	ldrb	r3, [r7, #22]
 800b9d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00d      	beq.n	800b9f6 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9de:	7b5b      	ldrb	r3, [r3, #13]
 800b9e0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b9e2:	7dbb      	ldrb	r3, [r7, #22]
 800b9e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9e8:	75bb      	strb	r3, [r7, #22]
 800b9ea:	7dbb      	ldrb	r3, [r7, #22]
 800b9ec:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9f6:	7dba      	ldrb	r2, [r7, #22]
 800b9f8:	7d7b      	ldrb	r3, [r7, #21]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d115      	bne.n	800ba2a <dir_read+0x122>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba02:	330d      	adds	r3, #13
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	7d3a      	ldrb	r2, [r7, #20]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d10e      	bne.n	800ba2a <dir_read+0x122>
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f7ff fb5c 	bl	800b0d4 <pick_lfn>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <dir_read+0x122>
 800ba22:	7d7b      	ldrb	r3, [r7, #21]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	e000      	b.n	800ba2c <dir_read+0x124>
 800ba2a:	23ff      	movs	r3, #255	@ 0xff
 800ba2c:	757b      	strb	r3, [r7, #21]
 800ba2e:	e011      	b.n	800ba54 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ba30:	7d7b      	ldrb	r3, [r7, #21]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d109      	bne.n	800ba4a <dir_read+0x142>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fca4 	bl	800b388 <sum_sfn>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	7d3b      	ldrb	r3, [r7, #20]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d017      	beq.n	800ba7a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba50:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800ba52:	e012      	b.n	800ba7a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ba54:	2100      	movs	r1, #0
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff f94b 	bl	800acf2 <dir_next>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d10b      	bne.n	800ba7e <dir_read+0x176>
	while (dp->sect) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f47f af5b 	bne.w	800b926 <dir_read+0x1e>
 800ba70:	e006      	b.n	800ba80 <dir_read+0x178>
		if (res != FR_OK) break;
 800ba72:	bf00      	nop
 800ba74:	e004      	b.n	800ba80 <dir_read+0x178>
					break;
 800ba76:	bf00      	nop
 800ba78:	e002      	b.n	800ba80 <dir_read+0x178>
					break;
 800ba7a:	bf00      	nop
 800ba7c:	e000      	b.n	800ba80 <dir_read+0x178>
		if (res != FR_OK) break;
 800ba7e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <dir_read+0x184>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ba96:	b590      	push	{r4, r7, lr}
 800ba98:	b089      	sub	sp, #36	@ 0x24
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800baa4:	2100      	movs	r1, #0
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff f88f 	bl	800abca <dir_sdi>
 800baac:	4603      	mov	r3, r0
 800baae:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800bab0:	7ffb      	ldrb	r3, [r7, #31]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <dir_find+0x24>
 800bab6:	7ffb      	ldrb	r3, [r7, #31]
 800bab8:	e113      	b.n	800bce2 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	2b04      	cmp	r3, #4
 800bac0:	d165      	bne.n	800bb8e <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff fcb1 	bl	800b42e <xname_sum>
 800bacc:	4603      	mov	r3, r0
 800bace:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bad0:	e050      	b.n	800bb74 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	695b      	ldr	r3, [r3, #20]
 800bad6:	3324      	adds	r3, #36	@ 0x24
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fd fda5 	bl	8009628 <ld_word>
 800bade:	4603      	mov	r3, r0
 800bae0:	461a      	mov	r2, r3
 800bae2:	893b      	ldrh	r3, [r7, #8]
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d144      	bne.n	800bb72 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800baf0:	76fb      	strb	r3, [r7, #27]
 800baf2:	2340      	movs	r3, #64	@ 0x40
 800baf4:	617b      	str	r3, [r7, #20]
 800baf6:	2300      	movs	r3, #0
 800baf8:	613b      	str	r3, [r7, #16]
 800bafa:	e029      	b.n	800bb50 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f003 031f 	and.w	r3, r3, #31
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d102      	bne.n	800bb0c <dir_find+0x76>
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	3302      	adds	r3, #2
 800bb0a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	695a      	ldr	r2, [r3, #20]
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	4413      	add	r3, r2
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fd fd87 	bl	8009628 <ld_word>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f003 f9d7 	bl	800eed0 <ff_wtoupper>
 800bb22:	4603      	mov	r3, r0
 800bb24:	461c      	mov	r4, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	691a      	ldr	r2, [r3, #16]
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	4413      	add	r3, r2
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f003 f9cc 	bl	800eed0 <ff_wtoupper>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	429c      	cmp	r4, r3
 800bb3c:	d10c      	bne.n	800bb58 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bb3e:	7efb      	ldrb	r3, [r7, #27]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	76fb      	strb	r3, [r7, #27]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	3302      	adds	r3, #2
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	613b      	str	r3, [r7, #16]
 800bb50:	7efb      	ldrb	r3, [r7, #27]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1d2      	bne.n	800bafc <dir_find+0x66>
 800bb56:	e000      	b.n	800bb5a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bb58:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bb5a:	7efb      	ldrb	r3, [r7, #27]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d109      	bne.n	800bb74 <dir_find+0xde>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	691a      	ldr	r2, [r3, #16]
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	005b      	lsls	r3, r3, #1
 800bb68:	4413      	add	r3, r2
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00b      	beq.n	800bb88 <dir_find+0xf2>
 800bb70:	e000      	b.n	800bb74 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bb72:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bb74:	2100      	movs	r1, #0
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff fec6 	bl	800b908 <dir_read>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	77fb      	strb	r3, [r7, #31]
 800bb80:	7ffb      	ldrb	r3, [r7, #31]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0a5      	beq.n	800bad2 <dir_find+0x3c>
 800bb86:	e000      	b.n	800bb8a <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bb88:	bf00      	nop
		}
		return res;
 800bb8a:	7ffb      	ldrb	r3, [r7, #31]
 800bb8c:	e0a9      	b.n	800bce2 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb8e:	23ff      	movs	r3, #255	@ 0xff
 800bb90:	773b      	strb	r3, [r7, #28]
 800bb92:	7f3b      	ldrb	r3, [r7, #28]
 800bb94:	777b      	strb	r3, [r7, #29]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f04f 32ff 	mov.w	r2, #4294967295
 800bb9c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba2:	4619      	mov	r1, r3
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f7fe f983 	bl	8009eb0 <move_window>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800bbae:	7ffb      	ldrb	r3, [r7, #31]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f040 8090 	bne.w	800bcd6 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbbe:	7fbb      	ldrb	r3, [r7, #30]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d102      	bne.n	800bbca <dir_find+0x134>
 800bbc4:	2304      	movs	r3, #4
 800bbc6:	77fb      	strb	r3, [r7, #31]
 800bbc8:	e08a      	b.n	800bce0 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbce:	330b      	adds	r3, #11
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbd6:	72fb      	strb	r3, [r7, #11]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	7afa      	ldrb	r2, [r7, #11]
 800bbdc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bbde:	7fbb      	ldrb	r3, [r7, #30]
 800bbe0:	2be5      	cmp	r3, #229	@ 0xe5
 800bbe2:	d007      	beq.n	800bbf4 <dir_find+0x15e>
 800bbe4:	7afb      	ldrb	r3, [r7, #11]
 800bbe6:	f003 0308 	and.w	r3, r3, #8
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d009      	beq.n	800bc02 <dir_find+0x16c>
 800bbee:	7afb      	ldrb	r3, [r7, #11]
 800bbf0:	2b0f      	cmp	r3, #15
 800bbf2:	d006      	beq.n	800bc02 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bbf4:	23ff      	movs	r3, #255	@ 0xff
 800bbf6:	777b      	strb	r3, [r7, #29]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800bbfe:	64da      	str	r2, [r3, #76]	@ 0x4c
 800bc00:	e05e      	b.n	800bcc0 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bc02:	7afb      	ldrb	r3, [r7, #11]
 800bc04:	2b0f      	cmp	r3, #15
 800bc06:	d136      	bne.n	800bc76 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bc0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d154      	bne.n	800bcc0 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bc16:	7fbb      	ldrb	r3, [r7, #30]
 800bc18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00d      	beq.n	800bc3c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc24:	7b5b      	ldrb	r3, [r3, #13]
 800bc26:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bc28:	7fbb      	ldrb	r3, [r7, #30]
 800bc2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc2e:	77bb      	strb	r3, [r7, #30]
 800bc30:	7fbb      	ldrb	r3, [r7, #30]
 800bc32:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bc3c:	7fba      	ldrb	r2, [r7, #30]
 800bc3e:	7f7b      	ldrb	r3, [r7, #29]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d115      	bne.n	800bc70 <dir_find+0x1da>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc48:	330d      	adds	r3, #13
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	7f3a      	ldrb	r2, [r7, #28]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d10e      	bne.n	800bc70 <dir_find+0x1da>
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	691a      	ldr	r2, [r3, #16]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	f7ff f9c9 	bl	800aff4 <cmp_lfn>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d003      	beq.n	800bc70 <dir_find+0x1da>
 800bc68:	7f7b      	ldrb	r3, [r7, #29]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	e000      	b.n	800bc72 <dir_find+0x1dc>
 800bc70:	23ff      	movs	r3, #255	@ 0xff
 800bc72:	777b      	strb	r3, [r7, #29]
 800bc74:	e024      	b.n	800bcc0 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bc76:	7f7b      	ldrb	r3, [r7, #29]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d109      	bne.n	800bc90 <dir_find+0x1fa>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff fb81 	bl	800b388 <sum_sfn>
 800bc86:	4603      	mov	r3, r0
 800bc88:	461a      	mov	r2, r3
 800bc8a:	7f3b      	ldrb	r3, [r7, #28]
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d024      	beq.n	800bcda <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bc96:	f003 0301 	and.w	r3, r3, #1
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10a      	bne.n	800bcb4 <dir_find+0x21e>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3340      	adds	r3, #64	@ 0x40
 800bca6:	220b      	movs	r2, #11
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f7fd fede 	bl	8009a6a <mem_cmp>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d014      	beq.n	800bcde <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bcb4:	23ff      	movs	r3, #255	@ 0xff
 800bcb6:	777b      	strb	r3, [r7, #29]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f04f 32ff 	mov.w	r2, #4294967295
 800bcbe:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcc0:	2100      	movs	r1, #0
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff f815 	bl	800acf2 <dir_next>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800bccc:	7ffb      	ldrb	r3, [r7, #31]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f43f af65 	beq.w	800bb9e <dir_find+0x108>
 800bcd4:	e004      	b.n	800bce0 <dir_find+0x24a>
		if (res != FR_OK) break;
 800bcd6:	bf00      	nop
 800bcd8:	e002      	b.n	800bce0 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bcda:	bf00      	nop
 800bcdc:	e000      	b.n	800bce0 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bcde:	bf00      	nop

	return res;
 800bce0:	7ffb      	ldrb	r3, [r7, #31]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3724      	adds	r7, #36	@ 0x24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd90      	pop	{r4, r7, pc}
	...

0800bcec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bcec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bcf0:	b0a0      	sub	sp, #128	@ 0x80
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800bd02:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d001      	beq.n	800bd0e <dir_register+0x22>
 800bd0a:	2306      	movs	r3, #6
 800bd0c:	e192      	b.n	800c034 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bd0e:	2300      	movs	r3, #0
 800bd10:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd12:	e002      	b.n	800bd1a <dir_register+0x2e>
 800bd14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd16:	3301      	adds	r3, #1
 800bd18:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd1c:	691a      	ldr	r2, [r3, #16]
 800bd1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	4413      	add	r3, r2
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1f4      	bne.n	800bd14 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bd2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	f040 80a3 	bne.w	800be7a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800bd34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd36:	330e      	adds	r3, #14
 800bd38:	4aa4      	ldr	r2, [pc, #656]	@ (800bfcc <dir_register+0x2e0>)
 800bd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd3e:	08db      	lsrs	r3, r3, #3
 800bd40:	3302      	adds	r3, #2
 800bd42:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800bd44:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f7ff f8b9 	bl	800aebe <dir_alloc>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800bd52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <dir_register+0x74>
 800bd5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bd5e:	e169      	b.n	800c034 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd66:	3b01      	subs	r3, #1
 800bd68:	015b      	lsls	r3, r3, #5
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d076      	beq.n	800be66 <dir_register+0x17a>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	79db      	ldrb	r3, [r3, #7]
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d070      	beq.n	800be66 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bd8a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd8c:	8949      	ldrh	r1, [r1, #10]
 800bd8e:	4608      	mov	r0, r1
 800bd90:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd92:	8989      	ldrh	r1, [r1, #12]
 800bd94:	fb00 f101 	mul.w	r1, r0, r1
 800bd98:	2000      	movs	r0, #0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	eb12 0804 	adds.w	r8, r2, r4
 800bda2:	eb43 0905 	adc.w	r9, r3, r5
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fe fcaa 	bl	800a708 <fill_first_frag>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800bdba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <dir_register+0xdc>
 800bdc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bdc6:	e135      	b.n	800c034 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdce:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	f7fe fcc7 	bl	800a766 <fill_last_frag>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800bdde:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d002      	beq.n	800bdec <dir_register+0x100>
 800bde6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bdea:	e123      	b.n	800c034 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	f107 0308 	add.w	r3, r7, #8
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff fc8f 	bl	800b718 <load_obj_dir>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800be00:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <dir_register+0x122>
 800be08:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be0c:	e112      	b.n	800c034 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800be0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be10:	695b      	ldr	r3, [r3, #20]
 800be12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be1c:	4608      	mov	r0, r1
 800be1e:	f7fd fd60 	bl	80098e2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800be22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800be30:	4608      	mov	r0, r1
 800be32:	f7fd fd56 	bl	80098e2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	79da      	ldrb	r2, [r3, #7]
 800be3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be3c:	695b      	ldr	r3, [r3, #20]
 800be3e:	3321      	adds	r3, #33	@ 0x21
 800be40:	f042 0201 	orr.w	r2, r2, #1
 800be44:	b2d2      	uxtb	r2, r2
 800be46:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800be48:	f107 0308 	add.w	r3, r7, #8
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff fc99 	bl	800b784 <store_xdir>
 800be52:	4603      	mov	r3, r0
 800be54:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800be58:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d002      	beq.n	800be66 <dir_register+0x17a>
 800be60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800be64:	e0e6      	b.n	800c034 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800be66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be68:	695a      	ldr	r2, [r3, #20]
 800be6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	4619      	mov	r1, r3
 800be70:	4610      	mov	r0, r2
 800be72:	f7ff fce2 	bl	800b83a <create_xdir>
		return FR_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	e0dc      	b.n	800c034 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800be80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800be84:	220c      	movs	r2, #12
 800be86:	4618      	mov	r0, r3
 800be88:	f7fd fdb3 	bl	80099f2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800be8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d033      	beq.n	800bf00 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2240      	movs	r2, #64	@ 0x40
 800be9c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800bea0:	2301      	movs	r3, #1
 800bea2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bea4:	e016      	b.n	800bed4 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800beac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800beae:	691a      	ldr	r2, [r3, #16]
 800beb0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800beb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800beb6:	f7ff f9d9 	bl	800b26c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff fdeb 	bl	800ba96 <dir_find>
 800bec0:	4603      	mov	r3, r0
 800bec2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800bec6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800bece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bed0:	3301      	adds	r3, #1
 800bed2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bed6:	2b63      	cmp	r3, #99	@ 0x63
 800bed8:	d9e5      	bls.n	800bea6 <dir_register+0x1ba>
 800beda:	e000      	b.n	800bede <dir_register+0x1f2>
			if (res != FR_OK) break;
 800bedc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bee0:	2b64      	cmp	r3, #100	@ 0x64
 800bee2:	d101      	bne.n	800bee8 <dir_register+0x1fc>
 800bee4:	2307      	movs	r3, #7
 800bee6:	e0a5      	b.n	800c034 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bee8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800beec:	2b04      	cmp	r3, #4
 800beee:	d002      	beq.n	800bef6 <dir_register+0x20a>
 800bef0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bef4:	e09e      	b.n	800c034 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bef6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bf00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf04:	f003 0302 	and.w	r3, r3, #2
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <dir_register+0x230>
 800bf0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf0e:	330c      	adds	r3, #12
 800bf10:	4a2f      	ldr	r2, [pc, #188]	@ (800bfd0 <dir_register+0x2e4>)
 800bf12:	fba2 2303 	umull	r2, r3, r2, r3
 800bf16:	089b      	lsrs	r3, r3, #2
 800bf18:	3301      	adds	r3, #1
 800bf1a:	e000      	b.n	800bf1e <dir_register+0x232>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bf20:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7fe ffcb 	bl	800aebe <dir_alloc>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bf2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d14f      	bne.n	800bfd6 <dir_register+0x2ea>
 800bf36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf38:	3b01      	subs	r3, #1
 800bf3a:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d049      	beq.n	800bfd6 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf48:	015b      	lsls	r3, r3, #5
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7fe fe3b 	bl	800abca <dir_sdi>
 800bf54:	4603      	mov	r3, r0
 800bf56:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800bf5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d139      	bne.n	800bfd6 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3340      	adds	r3, #64	@ 0x40
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff fa0e 	bl	800b388 <sum_sfn>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf76:	4619      	mov	r1, r3
 800bf78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bf7a:	f7fd ff99 	bl	8009eb0 <move_window>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800bf84:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d123      	bne.n	800bfd4 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bf8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf8e:	6918      	ldr	r0, [r3, #16]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800bf94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800bf9c:	f7ff f8fe 	bl	800b19c <put_lfn>
				fs->wflag = 1;
 800bfa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7fe fea2 	bl	800acf2 <dir_next>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800bfb4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10c      	bne.n	800bfd6 <dir_register+0x2ea>
 800bfbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfbe:	3b01      	subs	r3, #1
 800bfc0:	673b      	str	r3, [r7, #112]	@ 0x70
 800bfc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1d4      	bne.n	800bf72 <dir_register+0x286>
 800bfc8:	e005      	b.n	800bfd6 <dir_register+0x2ea>
 800bfca:	bf00      	nop
 800bfcc:	88888889 	.word	0x88888889
 800bfd0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800bfd4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bfd6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d128      	bne.n	800c030 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bfe6:	f7fd ff63 	bl	8009eb0 <move_window>
 800bfea:	4603      	mov	r3, r0
 800bfec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800bff0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d11b      	bne.n	800c030 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bffc:	2220      	movs	r2, #32
 800bffe:	2100      	movs	r1, #0
 800c000:	4618      	mov	r0, r3
 800c002:	f7fd fd17 	bl	8009a34 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	3340      	adds	r3, #64	@ 0x40
 800c00e:	220b      	movs	r2, #11
 800c010:	4619      	mov	r1, r3
 800c012:	f7fd fcee 	bl	80099f2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c020:	330c      	adds	r3, #12
 800c022:	f002 0218 	and.w	r2, r2, #24
 800c026:	b2d2      	uxtb	r2, r2
 800c028:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c02a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c02c:	2201      	movs	r2, #1
 800c02e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c030:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c034:	4618      	mov	r0, r3
 800c036:	3780      	adds	r7, #128	@ 0x80
 800c038:	46bd      	mov	sp, r7
 800c03a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c03e:	bf00      	nop

0800c040 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c052:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05c:	d007      	beq.n	800c06e <dir_remove+0x2e>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c062:	4619      	mov	r1, r3
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f7fe fdb0 	bl	800abca <dir_sdi>
 800c06a:	4603      	mov	r3, r0
 800c06c:	e000      	b.n	800c070 <dir_remove+0x30>
 800c06e:	2300      	movs	r3, #0
 800c070:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c072:	7dfb      	ldrb	r3, [r7, #23]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d136      	bne.n	800c0e6 <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c07c:	4619      	mov	r1, r3
 800c07e:	6938      	ldr	r0, [r7, #16]
 800c080:	f7fd ff16 	bl	8009eb0 <move_window>
 800c084:	4603      	mov	r3, r0
 800c086:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d123      	bne.n	800c0d6 <dir_remove+0x96>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	2b04      	cmp	r3, #4
 800c094:	d109      	bne.n	800c0aa <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c09a:	781a      	ldrb	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c0a4:	b2d2      	uxtb	r2, r2
 800c0a6:	701a      	strb	r2, [r3, #0]
 800c0a8:	e003      	b.n	800c0b2 <dir_remove+0x72>
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ae:	22e5      	movs	r2, #229	@ 0xe5
 800c0b0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0bc:	68fa      	ldr	r2, [r7, #12]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d90b      	bls.n	800c0da <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f7fe fe14 	bl	800acf2 <dir_next>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800c0ce:	7dfb      	ldrb	r3, [r7, #23]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d0d1      	beq.n	800c078 <dir_remove+0x38>
 800c0d4:	e002      	b.n	800c0dc <dir_remove+0x9c>
			if (res != FR_OK) break;
 800c0d6:	bf00      	nop
 800c0d8:	e000      	b.n	800c0dc <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800c0da:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800c0dc:	7dfb      	ldrb	r3, [r7, #23]
 800c0de:	2b04      	cmp	r3, #4
 800c0e0:	d101      	bne.n	800c0e6 <dir_remove+0xa6>
 800c0e2:	2302      	movs	r3, #2
 800c0e4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800c0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c0f0:	b5b0      	push	{r4, r5, r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	2200      	movs	r2, #0
 800c104:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 80d9 	beq.w	800c2c2 <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b04      	cmp	r3, #4
 800c116:	d106      	bne.n	800c126 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	695b      	ldr	r3, [r3, #20]
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff f9b9 	bl	800b496 <get_xdir_info>
		return;
 800c124:	e0ce      	b.n	800c2c4 <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12e:	d032      	beq.n	800c196 <get_fileinfo+0xa6>
			i = j = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	61bb      	str	r3, [r7, #24]
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c138:	e01b      	b.n	800c172 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c13a:	89fb      	ldrh	r3, [r7, #14]
 800c13c:	2100      	movs	r1, #0
 800c13e:	4618      	mov	r0, r3
 800c140:	f002 fe8a 	bl	800ee58 <ff_convert>
 800c144:	4603      	mov	r3, r0
 800c146:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c148:	89fb      	ldrh	r3, [r7, #14]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d102      	bne.n	800c154 <get_fileinfo+0x64>
 800c14e:	2300      	movs	r3, #0
 800c150:	61fb      	str	r3, [r7, #28]
 800c152:	e01a      	b.n	800c18a <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	2bfe      	cmp	r3, #254	@ 0xfe
 800c158:	d902      	bls.n	800c160 <get_fileinfo+0x70>
 800c15a:	2300      	movs	r3, #0
 800c15c:	61fb      	str	r3, [r7, #28]
 800c15e:	e014      	b.n	800c18a <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	61fa      	str	r2, [r7, #28]
 800c166:	89fa      	ldrh	r2, [r7, #14]
 800c168:	b2d1      	uxtb	r1, r2
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	4413      	add	r3, r2
 800c16e:	460a      	mov	r2, r1
 800c170:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	691a      	ldr	r2, [r3, #16]
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	1c59      	adds	r1, r3, #1
 800c17a:	61b9      	str	r1, [r7, #24]
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	4413      	add	r3, r2
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	81fb      	strh	r3, [r7, #14]
 800c184:	89fb      	ldrh	r3, [r7, #14]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1d7      	bne.n	800c13a <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	4413      	add	r3, r2
 800c190:	331a      	adds	r3, #26
 800c192:	2200      	movs	r2, #0
 800c194:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c196:	2300      	movs	r3, #0
 800c198:	61bb      	str	r3, [r7, #24]
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	331a      	adds	r3, #26
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c1aa:	e04d      	b.n	800c248 <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	1c59      	adds	r1, r3, #1
 800c1b4:	61f9      	str	r1, [r7, #28]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c1bc:	7dfb      	ldrb	r3, [r7, #23]
 800c1be:	2b20      	cmp	r3, #32
 800c1c0:	d041      	beq.n	800c246 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c1c2:	7dfb      	ldrb	r3, [r7, #23]
 800c1c4:	2b05      	cmp	r3, #5
 800c1c6:	d101      	bne.n	800c1cc <get_fileinfo+0xdc>
 800c1c8:	23e5      	movs	r3, #229	@ 0xe5
 800c1ca:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	2b09      	cmp	r3, #9
 800c1d0:	d10f      	bne.n	800c1f2 <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 800c1d2:	89bb      	ldrh	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d105      	bne.n	800c1e4 <get_fileinfo+0xf4>
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	4413      	add	r3, r2
 800c1de:	331a      	adds	r3, #26
 800c1e0:	222e      	movs	r2, #46	@ 0x2e
 800c1e2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	1c5a      	adds	r2, r3, #1
 800c1e8:	61ba      	str	r2, [r7, #24]
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	222e      	movs	r2, #46	@ 0x2e
 800c1f0:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	330d      	adds	r3, #13
 800c1fa:	7dfa      	ldrb	r2, [r7, #23]
 800c1fc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c1fe:	89bb      	ldrh	r3, [r7, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d11c      	bne.n	800c23e <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	2b40      	cmp	r3, #64	@ 0x40
 800c208:	d913      	bls.n	800c232 <get_fileinfo+0x142>
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
 800c20c:	2b5a      	cmp	r3, #90	@ 0x5a
 800c20e:	d810      	bhi.n	800c232 <get_fileinfo+0x142>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c214:	330c      	adds	r3, #12
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	461a      	mov	r2, r3
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	2b08      	cmp	r3, #8
 800c21e:	d901      	bls.n	800c224 <get_fileinfo+0x134>
 800c220:	2310      	movs	r3, #16
 800c222:	e000      	b.n	800c226 <get_fileinfo+0x136>
 800c224:	2308      	movs	r3, #8
 800c226:	4013      	ands	r3, r2
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 800c22c:	7dfb      	ldrb	r3, [r7, #23]
 800c22e:	3320      	adds	r3, #32
 800c230:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	4413      	add	r3, r2
 800c238:	331a      	adds	r3, #26
 800c23a:	7dfa      	ldrb	r2, [r7, #23]
 800c23c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	3301      	adds	r3, #1
 800c242:	61bb      	str	r3, [r7, #24]
 800c244:	e000      	b.n	800c248 <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 800c246:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	2b0a      	cmp	r3, #10
 800c24c:	d9ae      	bls.n	800c1ac <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800c24e:	89bb      	ldrh	r3, [r7, #12]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10d      	bne.n	800c270 <get_fileinfo+0x180>
		fno->fname[j] = 0;
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	4413      	add	r3, r2
 800c25a:	331a      	adds	r3, #26
 800c25c:	2200      	movs	r2, #0
 800c25e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c264:	330c      	adds	r3, #12
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <get_fileinfo+0x180>
 800c26c:	2300      	movs	r3, #0
 800c26e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	4413      	add	r3, r2
 800c276:	330d      	adds	r3, #13
 800c278:	2200      	movs	r2, #0
 800c27a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c280:	7ada      	ldrb	r2, [r3, #11]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c28a:	331c      	adds	r3, #28
 800c28c:	4618      	mov	r0, r3
 800c28e:	f7fd f9e3 	bl	8009658 <ld_dword>
 800c292:	4603      	mov	r3, r0
 800c294:	2200      	movs	r2, #0
 800c296:	461c      	mov	r4, r3
 800c298:	4615      	mov	r5, r2
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a4:	3316      	adds	r3, #22
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fd f9d6 	bl	8009658 <ld_dword>
 800c2ac:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	815a      	strh	r2, [r3, #10]
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	0c1b      	lsrs	r3, r3, #16
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	811a      	strh	r2, [r3, #8]
 800c2c0:	e000      	b.n	800c2c4 <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c2c2:	bf00      	nop
}
 800c2c4:	3720      	adds	r7, #32
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c2cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08a      	sub	sp, #40	@ 0x28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	613b      	str	r3, [r7, #16]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	60fb      	str	r3, [r7, #12]
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	617b      	str	r3, [r7, #20]
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	1c5a      	adds	r2, r3, #1
 800c2f0:	61ba      	str	r2, [r7, #24]
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c2fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c2fc:	2b1f      	cmp	r3, #31
 800c2fe:	d940      	bls.n	800c382 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c300:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c302:	2b2f      	cmp	r3, #47	@ 0x2f
 800c304:	d006      	beq.n	800c314 <create_name+0x48>
 800c306:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c308:	2b5c      	cmp	r3, #92	@ 0x5c
 800c30a:	d110      	bne.n	800c32e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c30c:	e002      	b.n	800c314 <create_name+0x48>
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	3301      	adds	r3, #1
 800c312:	61bb      	str	r3, [r7, #24]
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	4413      	add	r3, r2
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c31e:	d0f6      	beq.n	800c30e <create_name+0x42>
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	4413      	add	r3, r2
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	2b5c      	cmp	r3, #92	@ 0x5c
 800c32a:	d0f0      	beq.n	800c30e <create_name+0x42>
			break;
 800c32c:	e02a      	b.n	800c384 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2bfe      	cmp	r3, #254	@ 0xfe
 800c332:	d901      	bls.n	800c338 <create_name+0x6c>
 800c334:	2306      	movs	r3, #6
 800c336:	e17d      	b.n	800c634 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c338:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c33e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c340:	2101      	movs	r1, #1
 800c342:	4618      	mov	r0, r3
 800c344:	f002 fd88 	bl	800ee58 <ff_convert>
 800c348:	4603      	mov	r3, r0
 800c34a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c34c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <create_name+0x8a>
 800c352:	2306      	movs	r3, #6
 800c354:	e16e      	b.n	800c634 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c356:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c358:	2b7f      	cmp	r3, #127	@ 0x7f
 800c35a:	d809      	bhi.n	800c370 <create_name+0xa4>
 800c35c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c35e:	4619      	mov	r1, r3
 800c360:	488d      	ldr	r0, [pc, #564]	@ (800c598 <create_name+0x2cc>)
 800c362:	f7fd fba9 	bl	8009ab8 <chk_chr>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <create_name+0xa4>
 800c36c:	2306      	movs	r3, #6
 800c36e:	e161      	b.n	800c634 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	617a      	str	r2, [r7, #20]
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	4413      	add	r3, r2
 800c37c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c37e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c380:	e7b4      	b.n	800c2ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c382:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	441a      	add	r2, r3
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c38e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c390:	2b1f      	cmp	r3, #31
 800c392:	d801      	bhi.n	800c398 <create_name+0xcc>
 800c394:	2304      	movs	r3, #4
 800c396:	e000      	b.n	800c39a <create_name+0xce>
 800c398:	2300      	movs	r3, #0
 800c39a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c39e:	e011      	b.n	800c3c4 <create_name+0xf8>
		w = lfn[di - 1];
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	881b      	ldrh	r3, [r3, #0]
 800c3b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c3b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3b4:	2b20      	cmp	r3, #32
 800c3b6:	d002      	beq.n	800c3be <create_name+0xf2>
 800c3b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3bc:	d106      	bne.n	800c3cc <create_name+0x100>
		di--;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1ea      	bne.n	800c3a0 <create_name+0xd4>
 800c3ca:	e000      	b.n	800c3ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c3cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <create_name+0x118>
 800c3e0:	2306      	movs	r3, #6
 800c3e2:	e127      	b.n	800c634 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	3340      	adds	r3, #64	@ 0x40
 800c3e8:	220b      	movs	r2, #11
 800c3ea:	2120      	movs	r1, #32
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fd fb21 	bl	8009a34 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	61bb      	str	r3, [r7, #24]
 800c3f6:	e002      	b.n	800c3fe <create_name+0x132>
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	61bb      	str	r3, [r7, #24]
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	4413      	add	r3, r2
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	2b20      	cmp	r3, #32
 800c40a:	d0f5      	beq.n	800c3f8 <create_name+0x12c>
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4413      	add	r3, r2
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	2b2e      	cmp	r3, #46	@ 0x2e
 800c418:	d0ee      	beq.n	800c3f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d009      	beq.n	800c434 <create_name+0x168>
 800c420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c424:	f043 0303 	orr.w	r3, r3, #3
 800c428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c42c:	e002      	b.n	800c434 <create_name+0x168>
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	3b01      	subs	r3, #1
 800c432:	617b      	str	r3, [r7, #20]
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d009      	beq.n	800c44e <create_name+0x182>
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c440:	3b01      	subs	r3, #1
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	4413      	add	r3, r2
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c44c:	d1ef      	bne.n	800c42e <create_name+0x162>

	i = b = 0; ni = 8;
 800c44e:	2300      	movs	r3, #0
 800c450:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c454:	2300      	movs	r3, #0
 800c456:	623b      	str	r3, [r7, #32]
 800c458:	2308      	movs	r3, #8
 800c45a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	1c5a      	adds	r2, r3, #1
 800c460:	61ba      	str	r2, [r7, #24]
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	4413      	add	r3, r2
 800c468:	881b      	ldrh	r3, [r3, #0]
 800c46a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c46c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 8090 	beq.w	800c594 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c474:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c476:	2b20      	cmp	r3, #32
 800c478:	d006      	beq.n	800c488 <create_name+0x1bc>
 800c47a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c47c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c47e:	d10a      	bne.n	800c496 <create_name+0x1ca>
 800c480:	69ba      	ldr	r2, [r7, #24]
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	429a      	cmp	r2, r3
 800c486:	d006      	beq.n	800c496 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c48c:	f043 0303 	orr.w	r3, r3, #3
 800c490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c494:	e07d      	b.n	800c592 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c496:	6a3a      	ldr	r2, [r7, #32]
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d203      	bcs.n	800c4a6 <create_name+0x1da>
 800c49e:	69ba      	ldr	r2, [r7, #24]
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d123      	bne.n	800c4ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	2b0b      	cmp	r3, #11
 800c4aa:	d106      	bne.n	800c4ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4b0:	f043 0303 	orr.w	r3, r3, #3
 800c4b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c4b8:	e075      	b.n	800c5a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c4ba:	69ba      	ldr	r2, [r7, #24]
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d005      	beq.n	800c4ce <create_name+0x202>
 800c4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4c6:	f043 0303 	orr.w	r3, r3, #3
 800c4ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800c4ce:	69ba      	ldr	r2, [r7, #24]
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d866      	bhi.n	800c5a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	61bb      	str	r3, [r7, #24]
 800c4da:	2308      	movs	r3, #8
 800c4dc:	623b      	str	r3, [r7, #32]
 800c4de:	230b      	movs	r3, #11
 800c4e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c4e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c4ec:	e051      	b.n	800c592 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c4ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4f0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4f2:	d914      	bls.n	800c51e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c4f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f002 fcad 	bl	800ee58 <ff_convert>
 800c4fe:	4603      	mov	r3, r0
 800c500:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c502:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c504:	2b00      	cmp	r3, #0
 800c506:	d004      	beq.n	800c512 <create_name+0x246>
 800c508:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c50a:	3b80      	subs	r3, #128	@ 0x80
 800c50c:	4a23      	ldr	r2, [pc, #140]	@ (800c59c <create_name+0x2d0>)
 800c50e:	5cd3      	ldrb	r3, [r2, r3]
 800c510:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c516:	f043 0302 	orr.w	r3, r3, #2
 800c51a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c51e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c520:	2b00      	cmp	r3, #0
 800c522:	d007      	beq.n	800c534 <create_name+0x268>
 800c524:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c526:	4619      	mov	r1, r3
 800c528:	481d      	ldr	r0, [pc, #116]	@ (800c5a0 <create_name+0x2d4>)
 800c52a:	f7fd fac5 	bl	8009ab8 <chk_chr>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d008      	beq.n	800c546 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c534:	235f      	movs	r3, #95	@ 0x5f
 800c536:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c53c:	f043 0303 	orr.w	r3, r3, #3
 800c540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c544:	e01b      	b.n	800c57e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c548:	2b40      	cmp	r3, #64	@ 0x40
 800c54a:	d909      	bls.n	800c560 <create_name+0x294>
 800c54c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c54e:	2b5a      	cmp	r3, #90	@ 0x5a
 800c550:	d806      	bhi.n	800c560 <create_name+0x294>
					b |= 2;
 800c552:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c556:	f043 0302 	orr.w	r3, r3, #2
 800c55a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c55e:	e00e      	b.n	800c57e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c562:	2b60      	cmp	r3, #96	@ 0x60
 800c564:	d90b      	bls.n	800c57e <create_name+0x2b2>
 800c566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c568:	2b7a      	cmp	r3, #122	@ 0x7a
 800c56a:	d808      	bhi.n	800c57e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c56c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c570:	f043 0301 	orr.w	r3, r3, #1
 800c574:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c578:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c57a:	3b20      	subs	r3, #32
 800c57c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c57e:	6a3b      	ldr	r3, [r7, #32]
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	623a      	str	r2, [r7, #32]
 800c584:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c586:	b2d1      	uxtb	r1, r2
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	4413      	add	r3, r2
 800c58c:	460a      	mov	r2, r1
 800c58e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c592:	e763      	b.n	800c45c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c594:	bf00      	nop
 800c596:	e006      	b.n	800c5a6 <create_name+0x2da>
 800c598:	080149cc 	.word	0x080149cc
 800c59c:	08018534 	.word	0x08018534
 800c5a0:	080149d8 	.word	0x080149d8
			if (si > di) break;			/* No extension */
 800c5a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c5ac:	2be5      	cmp	r3, #229	@ 0xe5
 800c5ae:	d103      	bne.n	800c5b8 <create_name+0x2ec>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2205      	movs	r2, #5
 800c5b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	2b08      	cmp	r3, #8
 800c5bc:	d104      	bne.n	800c5c8 <create_name+0x2fc>
 800c5be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c5c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5cc:	f003 030c 	and.w	r3, r3, #12
 800c5d0:	2b0c      	cmp	r3, #12
 800c5d2:	d005      	beq.n	800c5e0 <create_name+0x314>
 800c5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5d8:	f003 0303 	and.w	r3, r3, #3
 800c5dc:	2b03      	cmp	r3, #3
 800c5de:	d105      	bne.n	800c5ec <create_name+0x320>
 800c5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5e4:	f043 0302 	orr.w	r3, r3, #2
 800c5e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5f0:	f003 0302 	and.w	r3, r3, #2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d117      	bne.n	800c628 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c5f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c5fc:	f003 0303 	and.w	r3, r3, #3
 800c600:	2b01      	cmp	r3, #1
 800c602:	d105      	bne.n	800c610 <create_name+0x344>
 800c604:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c608:	f043 0310 	orr.w	r3, r3, #16
 800c60c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c610:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c614:	f003 030c 	and.w	r3, r3, #12
 800c618:	2b04      	cmp	r3, #4
 800c61a:	d105      	bne.n	800c628 <create_name+0x35c>
 800c61c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c620:	f043 0308 	orr.w	r3, r3, #8
 800c624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c62e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800c632:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c634:	4618      	mov	r0, r3
 800c636:	3728      	adds	r7, #40	@ 0x28
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c650:	e002      	b.n	800c658 <follow_path+0x1c>
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c65e:	d0f8      	beq.n	800c652 <follow_path+0x16>
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b5c      	cmp	r3, #92	@ 0x5c
 800c666:	d0f4      	beq.n	800c652 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	2200      	movs	r2, #0
 800c66c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	2200      	movs	r2, #0
 800c672:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b1f      	cmp	r3, #31
 800c67a:	d80a      	bhi.n	800c692 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2280      	movs	r2, #128	@ 0x80
 800c680:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800c684:	2100      	movs	r1, #0
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7fe fa9f 	bl	800abca <dir_sdi>
 800c68c:	4603      	mov	r3, r0
 800c68e:	75fb      	strb	r3, [r7, #23]
 800c690:	e07d      	b.n	800c78e <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c692:	463b      	mov	r3, r7
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff fe18 	bl	800c2cc <create_name>
 800c69c:	4603      	mov	r3, r0
 800c69e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d16e      	bne.n	800c784 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff f9f5 	bl	800ba96 <dir_find>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c6b6:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00a      	beq.n	800c6d4 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	2b04      	cmp	r3, #4
 800c6c2:	d161      	bne.n	800c788 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c6c4:	7afb      	ldrb	r3, [r7, #11]
 800c6c6:	f003 0304 	and.w	r3, r3, #4
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d15c      	bne.n	800c788 <follow_path+0x14c>
 800c6ce:	2305      	movs	r3, #5
 800c6d0:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c6d2:	e059      	b.n	800c788 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6d4:	7afb      	ldrb	r3, [r7, #11]
 800c6d6:	f003 0304 	and.w	r3, r3, #4
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d156      	bne.n	800c78c <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	799b      	ldrb	r3, [r3, #6]
 800c6e2:	f003 0310 	and.w	r3, r3, #16
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d102      	bne.n	800c6f0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800c6ea:	2305      	movs	r3, #5
 800c6ec:	75fb      	strb	r3, [r7, #23]
 800c6ee:	e04e      	b.n	800c78e <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b04      	cmp	r3, #4
 800c6f6:	d130      	bne.n	800c75a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	689a      	ldr	r2, [r3, #8]
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c706:	4613      	mov	r3, r2
 800c708:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	79d2      	ldrb	r2, [r2, #7]
 800c710:	431a      	orrs	r2, r3
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	3334      	adds	r3, #52	@ 0x34
 800c724:	4618      	mov	r0, r3
 800c726:	f7fc ff97 	bl	8009658 <ld_dword>
 800c72a:	4602      	mov	r2, r0
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	3321      	adds	r3, #33	@ 0x21
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	f003 0302 	and.w	r3, r3, #2
 800c73c:	b2da      	uxtb	r2, r3
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	3338      	adds	r3, #56	@ 0x38
 800c748:	4618      	mov	r0, r3
 800c74a:	f7fc ffa8 	bl	800969e <ld_qword>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	6939      	ldr	r1, [r7, #16]
 800c754:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c758:	e79b      	b.n	800c692 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	8992      	ldrh	r2, [r2, #12]
 800c768:	fbb3 f0f2 	udiv	r0, r3, r2
 800c76c:	fb00 f202 	mul.w	r2, r0, r2
 800c770:	1a9b      	subs	r3, r3, r2
 800c772:	440b      	add	r3, r1
 800c774:	4619      	mov	r1, r3
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f7fe fbfd 	bl	800af76 <ld_clust>
 800c77c:	4602      	mov	r2, r0
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c782:	e786      	b.n	800c692 <follow_path+0x56>
			if (res != FR_OK) break;
 800c784:	bf00      	nop
 800c786:	e002      	b.n	800c78e <follow_path+0x152>
				break;
 800c788:	bf00      	nop
 800c78a:	e000      	b.n	800c78e <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c78c:	bf00      	nop
			}
		}
	}

	return res;
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c798:	b480      	push	{r7}
 800c79a:	b087      	sub	sp, #28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d031      	beq.n	800c812 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	617b      	str	r3, [r7, #20]
 800c7b4:	e002      	b.n	800c7bc <get_ldnumber+0x24>
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	617b      	str	r3, [r7, #20]
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2b1f      	cmp	r3, #31
 800c7c2:	d903      	bls.n	800c7cc <get_ldnumber+0x34>
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7ca:	d1f4      	bne.n	800c7b6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7d2:	d11c      	bne.n	800c80e <get_ldnumber+0x76>
			tp = *path;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	1c5a      	adds	r2, r3, #1
 800c7de:	60fa      	str	r2, [r7, #12]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	3b30      	subs	r3, #48	@ 0x30
 800c7e4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	2b09      	cmp	r3, #9
 800c7ea:	d80e      	bhi.n	800c80a <get_ldnumber+0x72>
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d10a      	bne.n	800c80a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d107      	bne.n	800c80a <get_ldnumber+0x72>
					vol = (int)i;
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	3301      	adds	r3, #1
 800c802:	617b      	str	r3, [r7, #20]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	e002      	b.n	800c814 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c80e:	2300      	movs	r3, #0
 800c810:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c812:	693b      	ldr	r3, [r7, #16]
}
 800c814:	4618      	mov	r0, r3
 800c816:	371c      	adds	r7, #28
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	70da      	strb	r2, [r3, #3]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f04f 32ff 	mov.w	r2, #4294967295
 800c836:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c838:	6839      	ldr	r1, [r7, #0]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7fd fb38 	bl	8009eb0 <move_window>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d001      	beq.n	800c84a <check_fs+0x2a>
 800c846:	2304      	movs	r3, #4
 800c848:	e044      	b.n	800c8d4 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3340      	adds	r3, #64	@ 0x40
 800c84e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c852:	4618      	mov	r0, r3
 800c854:	f7fc fee8 	bl	8009628 <ld_word>
 800c858:	4603      	mov	r3, r0
 800c85a:	461a      	mov	r2, r3
 800c85c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c860:	429a      	cmp	r2, r3
 800c862:	d001      	beq.n	800c868 <check_fs+0x48>
 800c864:	2303      	movs	r3, #3
 800c866:	e035      	b.n	800c8d4 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c86e:	2be9      	cmp	r3, #233	@ 0xe9
 800c870:	d009      	beq.n	800c886 <check_fs+0x66>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c878:	2beb      	cmp	r3, #235	@ 0xeb
 800c87a:	d11e      	bne.n	800c8ba <check_fs+0x9a>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c882:	2b90      	cmp	r3, #144	@ 0x90
 800c884:	d119      	bne.n	800c8ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	3340      	adds	r3, #64	@ 0x40
 800c88a:	3336      	adds	r3, #54	@ 0x36
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fc fee3 	bl	8009658 <ld_dword>
 800c892:	4603      	mov	r3, r0
 800c894:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c898:	4a10      	ldr	r2, [pc, #64]	@ (800c8dc <check_fs+0xbc>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d101      	bne.n	800c8a2 <check_fs+0x82>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	e018      	b.n	800c8d4 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3340      	adds	r3, #64	@ 0x40
 800c8a6:	3352      	adds	r3, #82	@ 0x52
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fc fed5 	bl	8009658 <ld_dword>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	4a0b      	ldr	r2, [pc, #44]	@ (800c8e0 <check_fs+0xc0>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d101      	bne.n	800c8ba <check_fs+0x9a>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	e00c      	b.n	800c8d4 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3340      	adds	r3, #64	@ 0x40
 800c8be:	220b      	movs	r2, #11
 800c8c0:	4908      	ldr	r1, [pc, #32]	@ (800c8e4 <check_fs+0xc4>)
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fd f8d1 	bl	8009a6a <mem_cmp>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d101      	bne.n	800c8d2 <check_fs+0xb2>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <check_fs+0xb4>
#endif
	return 2;
 800c8d2:	2302      	movs	r3, #2
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	00544146 	.word	0x00544146
 800c8e0:	33544146 	.word	0x33544146
 800c8e4:	080149e0 	.word	0x080149e0

0800c8e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c8e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8ec:	b09c      	sub	sp, #112	@ 0x70
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	61f8      	str	r0, [r7, #28]
 800c8f2:	61b9      	str	r1, [r7, #24]
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c8fe:	69f8      	ldr	r0, [r7, #28]
 800c900:	f7ff ff4a 	bl	800c798 <get_ldnumber>
 800c904:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800c906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c908:	2b00      	cmp	r3, #0
 800c90a:	da01      	bge.n	800c910 <find_volume+0x28>
 800c90c:	230b      	movs	r3, #11
 800c90e:	e378      	b.n	800d002 <find_volume+0x71a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c910:	4aa2      	ldr	r2, [pc, #648]	@ (800cb9c <find_volume+0x2b4>)
 800c912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c918:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c91a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d101      	bne.n	800c924 <find_volume+0x3c>
 800c920:	230c      	movs	r3, #12
 800c922:	e36e      	b.n	800d002 <find_volume+0x71a>

	ENTER_FF(fs);						/* Lock the volume */
 800c924:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800c926:	f7fd f8e2 	bl	8009aee <lock_fs>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <find_volume+0x4c>
 800c930:	230f      	movs	r3, #15
 800c932:	e366      	b.n	800d002 <find_volume+0x71a>
	*rfs = fs;							/* Return pointer to the file system object */
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c938:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
 800c93c:	f023 0301 	bic.w	r3, r3, #1
 800c940:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c942:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d01a      	beq.n	800c980 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800c94a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c94c:	785b      	ldrb	r3, [r3, #1]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fc fdca 	bl	80094e8 <disk_status>
 800c954:	4603      	mov	r3, r0
 800c956:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c95a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10c      	bne.n	800c980 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d007      	beq.n	800c97c <find_volume+0x94>
 800c96c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800c978:	230a      	movs	r3, #10
 800c97a:	e342      	b.n	800d002 <find_volume+0x71a>
			}
			return FR_OK;				/* The file system object is valid */
 800c97c:	2300      	movs	r3, #0
 800c97e:	e340      	b.n	800d002 <find_volume+0x71a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c982:	2200      	movs	r2, #0
 800c984:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c98c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c98e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c990:	785b      	ldrb	r3, [r3, #1]
 800c992:	4618      	mov	r0, r3
 800c994:	f7fc fdc2 	bl	800951c <disk_initialize>
 800c998:	4603      	mov	r3, r0
 800c99a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c99e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c9a2:	f003 0301 	and.w	r3, r3, #1
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d001      	beq.n	800c9ae <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e329      	b.n	800d002 <find_volume+0x71a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c9ae:	7dfb      	ldrb	r3, [r7, #23]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d007      	beq.n	800c9c4 <find_volume+0xdc>
 800c9b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800c9b8:	f003 0304 	and.w	r3, r3, #4
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800c9c0:	230a      	movs	r3, #10
 800c9c2:	e31e      	b.n	800d002 <find_volume+0x71a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c9c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9c6:	7858      	ldrb	r0, [r3, #1]
 800c9c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ca:	330c      	adds	r3, #12
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	2102      	movs	r1, #2
 800c9d0:	f7fc fe0c 	bl	80095ec <disk_ioctl>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d001      	beq.n	800c9de <find_volume+0xf6>
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e311      	b.n	800d002 <find_volume+0x71a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c9de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e0:	899b      	ldrh	r3, [r3, #12]
 800c9e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c9e6:	d80d      	bhi.n	800ca04 <find_volume+0x11c>
 800c9e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ea:	899b      	ldrh	r3, [r3, #12]
 800c9ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f0:	d308      	bcc.n	800ca04 <find_volume+0x11c>
 800c9f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9f4:	899b      	ldrh	r3, [r3, #12]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9fa:	899b      	ldrh	r3, [r3, #12]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	4013      	ands	r3, r2
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <find_volume+0x120>
 800ca04:	2301      	movs	r3, #1
 800ca06:	e2fc      	b.n	800d002 <find_volume+0x71a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca0c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca0e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ca10:	f7ff ff06 	bl	800c820 <check_fs>
 800ca14:	4603      	mov	r3, r0
 800ca16:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca1a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d14d      	bne.n	800cabe <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca22:	2300      	movs	r3, #0
 800ca24:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca26:	e020      	b.n	800ca6a <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca2a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800ca2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca30:	011b      	lsls	r3, r3, #4
 800ca32:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ca36:	4413      	add	r3, r2
 800ca38:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d006      	beq.n	800ca52 <find_volume+0x16a>
 800ca44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca46:	3308      	adds	r3, #8
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fc fe05 	bl	8009658 <ld_dword>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	e000      	b.n	800ca54 <find_volume+0x16c>
 800ca52:	2200      	movs	r2, #0
 800ca54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	3360      	adds	r3, #96	@ 0x60
 800ca5a:	f107 0110 	add.w	r1, r7, #16
 800ca5e:	440b      	add	r3, r1
 800ca60:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca66:	3301      	adds	r3, #1
 800ca68:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca6c:	2b03      	cmp	r3, #3
 800ca6e:	d9db      	bls.n	800ca28 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca70:	2300      	movs	r3, #0
 800ca72:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800ca74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d002      	beq.n	800ca80 <find_volume+0x198>
 800ca7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	3360      	adds	r3, #96	@ 0x60
 800ca86:	f107 0210 	add.w	r2, r7, #16
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800ca90:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d005      	beq.n	800caa4 <find_volume+0x1bc>
 800ca98:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca9a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ca9c:	f7ff fec0 	bl	800c820 <check_fs>
 800caa0:	4603      	mov	r3, r0
 800caa2:	e000      	b.n	800caa6 <find_volume+0x1be>
 800caa4:	2303      	movs	r3, #3
 800caa6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800caaa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d905      	bls.n	800cabe <find_volume+0x1d6>
 800cab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cab4:	3301      	adds	r3, #1
 800cab6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cab8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caba:	2b03      	cmp	r3, #3
 800cabc:	d9e0      	bls.n	800ca80 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cabe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cac2:	2b04      	cmp	r3, #4
 800cac4:	d101      	bne.n	800caca <find_volume+0x1e2>
 800cac6:	2301      	movs	r3, #1
 800cac8:	e29b      	b.n	800d002 <find_volume+0x71a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800caca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d901      	bls.n	800cad6 <find_volume+0x1ee>
 800cad2:	230d      	movs	r3, #13
 800cad4:	e295      	b.n	800d002 <find_volume+0x71a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800cad6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cada:	2b01      	cmp	r3, #1
 800cadc:	f040 8100 	bne.w	800cce0 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800cae0:	230b      	movs	r3, #11
 800cae2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cae4:	e002      	b.n	800caec <find_volume+0x204>
 800cae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cae8:	3301      	adds	r3, #1
 800caea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caee:	2b3f      	cmp	r3, #63	@ 0x3f
 800caf0:	d806      	bhi.n	800cb00 <find_volume+0x218>
 800caf2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800caf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caf6:	4413      	add	r3, r2
 800caf8:	3340      	adds	r3, #64	@ 0x40
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d0f2      	beq.n	800cae6 <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800cb00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb02:	2b3f      	cmp	r3, #63	@ 0x3f
 800cb04:	d801      	bhi.n	800cb0a <find_volume+0x222>
 800cb06:	230d      	movs	r3, #13
 800cb08:	e27b      	b.n	800d002 <find_volume+0x71a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800cb0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb0c:	3340      	adds	r3, #64	@ 0x40
 800cb0e:	3368      	adds	r3, #104	@ 0x68
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fc fd89 	bl	8009628 <ld_word>
 800cb16:	4603      	mov	r3, r0
 800cb18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb1c:	d001      	beq.n	800cb22 <find_volume+0x23a>
 800cb1e:	230d      	movs	r3, #13
 800cb20:	e26f      	b.n	800d002 <find_volume+0x71a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800cb22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb24:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cb28:	461a      	mov	r2, r3
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	4093      	lsls	r3, r2
 800cb2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb30:	8992      	ldrh	r2, [r2, #12]
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d001      	beq.n	800cb3a <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 800cb36:	230d      	movs	r3, #13
 800cb38:	e263      	b.n	800d002 <find_volume+0x71a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800cb3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb3c:	3340      	adds	r3, #64	@ 0x40
 800cb3e:	3348      	adds	r3, #72	@ 0x48
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7fc fdac 	bl	800969e <ld_qword>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cb4c:	2000      	movs	r0, #0
 800cb4e:	60b9      	str	r1, [r7, #8]
 800cb50:	60f8      	str	r0, [r7, #12]
 800cb52:	68b9      	ldr	r1, [r7, #8]
 800cb54:	1851      	adds	r1, r2, r1
 800cb56:	6039      	str	r1, [r7, #0]
 800cb58:	68f9      	ldr	r1, [r7, #12]
 800cb5a:	eb43 0101 	adc.w	r1, r3, r1
 800cb5e:	6079      	str	r1, [r7, #4]
 800cb60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb64:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800cb68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d301      	bcc.n	800cb74 <find_volume+0x28c>
 800cb70:	230d      	movs	r3, #13
 800cb72:	e246      	b.n	800d002 <find_volume+0x71a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800cb74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb76:	3340      	adds	r3, #64	@ 0x40
 800cb78:	3354      	adds	r3, #84	@ 0x54
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fc fd6c 	bl	8009658 <ld_dword>
 800cb80:	4602      	mov	r2, r0
 800cb82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb84:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800cb86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb88:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 800cb8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800cb90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb92:	789b      	ldrb	r3, [r3, #2]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d003      	beq.n	800cba0 <find_volume+0x2b8>
 800cb98:	230d      	movs	r3, #13
 800cb9a:	e232      	b.n	800d002 <find_volume+0x71a>
 800cb9c:	20002920 	.word	0x20002920

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800cba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cba2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cba6:	461a      	mov	r2, r3
 800cba8:	2301      	movs	r3, #1
 800cbaa:	4093      	lsls	r3, r2
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800cbb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbb4:	895b      	ldrh	r3, [r3, #10]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d101      	bne.n	800cbbe <find_volume+0x2d6>
 800cbba:	230d      	movs	r3, #13
 800cbbc:	e221      	b.n	800d002 <find_volume+0x71a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cbbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbc0:	3340      	adds	r3, #64	@ 0x40
 800cbc2:	335c      	adds	r3, #92	@ 0x5c
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fc fd47 	bl	8009658 <ld_dword>
 800cbca:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cbcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbce:	4a9a      	ldr	r2, [pc, #616]	@ (800ce38 <find_volume+0x550>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d901      	bls.n	800cbd8 <find_volume+0x2f0>
 800cbd4:	230d      	movs	r3, #13
 800cbd6:	e214      	b.n	800d002 <find_volume+0x71a>
		fs->n_fatent = nclst + 2;
 800cbd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbda:	1c9a      	adds	r2, r3, #2
 800cbdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbde:	625a      	str	r2, [r3, #36]	@ 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800cbe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbe2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbe4:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cbe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbe8:	3340      	adds	r3, #64	@ 0x40
 800cbea:	3358      	adds	r3, #88	@ 0x58
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fc fd33 	bl	8009658 <ld_dword>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cbf6:	441a      	add	r2, r3
 800cbf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbfa:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800cbfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbfe:	3340      	adds	r3, #64	@ 0x40
 800cc00:	3350      	adds	r3, #80	@ 0x50
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fc fd28 	bl	8009658 <ld_dword>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc0c:	441a      	add	r2, r3
 800cc0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc10:	631a      	str	r2, [r3, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800cc12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc16:	2200      	movs	r2, #0
 800cc18:	469a      	mov	sl, r3
 800cc1a:	4693      	mov	fp, r2
 800cc1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc1e:	895b      	ldrh	r3, [r3, #10]
 800cc20:	461a      	mov	r2, r3
 800cc22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc24:	fb02 f303 	mul.w	r3, r2, r3
 800cc28:	2200      	movs	r2, #0
 800cc2a:	4698      	mov	r8, r3
 800cc2c:	4691      	mov	r9, r2
 800cc2e:	eb1a 0408 	adds.w	r4, sl, r8
 800cc32:	eb4b 0509 	adc.w	r5, fp, r9
 800cc36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cc3a:	42a2      	cmp	r2, r4
 800cc3c:	41ab      	sbcs	r3, r5
 800cc3e:	d201      	bcs.n	800cc44 <find_volume+0x35c>
 800cc40:	230d      	movs	r3, #13
 800cc42:	e1de      	b.n	800d002 <find_volume+0x71a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800cc44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc46:	3340      	adds	r3, #64	@ 0x40
 800cc48:	3360      	adds	r3, #96	@ 0x60
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fc fd04 	bl	8009658 <ld_dword>
 800cc50:	4602      	mov	r2, r0
 800cc52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc54:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800cc56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cc5e:	f7fd f9c5 	bl	8009fec <clust2sect>
 800cc62:	4603      	mov	r3, r0
 800cc64:	4619      	mov	r1, r3
 800cc66:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cc68:	f7fd f922 	bl	8009eb0 <move_window>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d001      	beq.n	800cc76 <find_volume+0x38e>
 800cc72:	2301      	movs	r3, #1
 800cc74:	e1c5      	b.n	800d002 <find_volume+0x71a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cc76:	2300      	movs	r3, #0
 800cc78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc7a:	e015      	b.n	800cca8 <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800cc7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc80:	4413      	add	r3, r2
 800cc82:	3340      	adds	r3, #64	@ 0x40
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	2b81      	cmp	r3, #129	@ 0x81
 800cc88:	d10b      	bne.n	800cca2 <find_volume+0x3ba>
 800cc8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc8c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800cc90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc92:	3314      	adds	r3, #20
 800cc94:	4413      	add	r3, r2
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fc fcde 	bl	8009658 <ld_dword>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	d009      	beq.n	800ccb6 <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cca4:	3320      	adds	r3, #32
 800cca6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccaa:	899b      	ldrh	r3, [r3, #12]
 800ccac:	461a      	mov	r2, r3
 800ccae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d3e3      	bcc.n	800cc7c <find_volume+0x394>
 800ccb4:	e000      	b.n	800ccb8 <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800ccb6:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800ccb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccba:	899b      	ldrh	r3, [r3, #12]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d101      	bne.n	800ccc8 <find_volume+0x3e0>
 800ccc4:	230d      	movs	r3, #13
 800ccc6:	e19c      	b.n	800d002 <find_volume+0x71a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ccc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccca:	f04f 32ff 	mov.w	r2, #4294967295
 800ccce:	621a      	str	r2, [r3, #32]
 800ccd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccd2:	6a1a      	ldr	r2, [r3, #32]
 800ccd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccd6:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800ccd8:	2304      	movs	r3, #4
 800ccda:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800ccde:	e17e      	b.n	800cfde <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cce0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cce2:	3340      	adds	r3, #64	@ 0x40
 800cce4:	330b      	adds	r3, #11
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7fc fc9e 	bl	8009628 <ld_word>
 800ccec:	4603      	mov	r3, r0
 800ccee:	461a      	mov	r2, r3
 800ccf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccf2:	899b      	ldrh	r3, [r3, #12]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d001      	beq.n	800ccfc <find_volume+0x414>
 800ccf8:	230d      	movs	r3, #13
 800ccfa:	e182      	b.n	800d002 <find_volume+0x71a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ccfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccfe:	3340      	adds	r3, #64	@ 0x40
 800cd00:	3316      	adds	r3, #22
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fc fc90 	bl	8009628 <ld_word>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cd0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d106      	bne.n	800cd20 <find_volume+0x438>
 800cd12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd14:	3340      	adds	r3, #64	@ 0x40
 800cd16:	3324      	adds	r3, #36	@ 0x24
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fc fc9d 	bl	8009658 <ld_dword>
 800cd1e:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800cd20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cd24:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cd26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd28:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800cd2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cd30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd32:	789b      	ldrb	r3, [r3, #2]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d005      	beq.n	800cd44 <find_volume+0x45c>
 800cd38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd3a:	789b      	ldrb	r3, [r3, #2]
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d001      	beq.n	800cd44 <find_volume+0x45c>
 800cd40:	230d      	movs	r3, #13
 800cd42:	e15e      	b.n	800d002 <find_volume+0x71a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cd44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd46:	789b      	ldrb	r3, [r3, #2]
 800cd48:	461a      	mov	r2, r3
 800cd4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd4c:	fb02 f303 	mul.w	r3, r2, r3
 800cd50:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cd52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd54:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cd5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd60:	895b      	ldrh	r3, [r3, #10]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d008      	beq.n	800cd78 <find_volume+0x490>
 800cd66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd68:	895b      	ldrh	r3, [r3, #10]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6e:	895b      	ldrh	r3, [r3, #10]
 800cd70:	3b01      	subs	r3, #1
 800cd72:	4013      	ands	r3, r2
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <find_volume+0x494>
 800cd78:	230d      	movs	r3, #13
 800cd7a:	e142      	b.n	800d002 <find_volume+0x71a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cd7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd7e:	3340      	adds	r3, #64	@ 0x40
 800cd80:	3311      	adds	r3, #17
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fc fc50 	bl	8009628 <ld_word>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cd90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd92:	891b      	ldrh	r3, [r3, #8]
 800cd94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd96:	8992      	ldrh	r2, [r2, #12]
 800cd98:	0952      	lsrs	r2, r2, #5
 800cd9a:	b292      	uxth	r2, r2
 800cd9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cda0:	fb01 f202 	mul.w	r2, r1, r2
 800cda4:	1a9b      	subs	r3, r3, r2
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <find_volume+0x4c8>
 800cdac:	230d      	movs	r3, #13
 800cdae:	e128      	b.n	800d002 <find_volume+0x71a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cdb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdb2:	3340      	adds	r3, #64	@ 0x40
 800cdb4:	3313      	adds	r3, #19
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fc fc36 	bl	8009628 <ld_word>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cdc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <find_volume+0x4ec>
 800cdc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdc8:	3340      	adds	r3, #64	@ 0x40
 800cdca:	3320      	adds	r3, #32
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fc fc43 	bl	8009658 <ld_dword>
 800cdd2:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cdd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdd6:	3340      	adds	r3, #64	@ 0x40
 800cdd8:	330e      	adds	r3, #14
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fc fc24 	bl	8009628 <ld_word>
 800cde0:	4603      	mov	r3, r0
 800cde2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cde6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <find_volume+0x50a>
 800cdee:	230d      	movs	r3, #13
 800cdf0:	e107      	b.n	800d002 <find_volume+0x71a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cdf2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800cdf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cdf8:	4413      	add	r3, r2
 800cdfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cdfc:	8911      	ldrh	r1, [r2, #8]
 800cdfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce00:	8992      	ldrh	r2, [r2, #12]
 800ce02:	0952      	lsrs	r2, r2, #5
 800ce04:	b292      	uxth	r2, r2
 800ce06:	fbb1 f2f2 	udiv	r2, r1, r2
 800ce0a:	b292      	uxth	r2, r2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ce10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d201      	bcs.n	800ce1c <find_volume+0x534>
 800ce18:	230d      	movs	r3, #13
 800ce1a:	e0f2      	b.n	800d002 <find_volume+0x71a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce24:	8952      	ldrh	r2, [r2, #10]
 800ce26:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d104      	bne.n	800ce3c <find_volume+0x554>
 800ce32:	230d      	movs	r3, #13
 800ce34:	e0e5      	b.n	800d002 <find_volume+0x71a>
 800ce36:	bf00      	nop
 800ce38:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce44:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d802      	bhi.n	800ce52 <find_volume+0x56a>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce54:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d802      	bhi.n	800ce62 <find_volume+0x57a>
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce64:	1c9a      	adds	r2, r3, #2
 800ce66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce68:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800ce6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ce6e:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce70:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ce74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce76:	441a      	add	r2, r3
 800ce78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce7a:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800ce7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ce7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce80:	441a      	add	r2, r3
 800ce82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce84:	639a      	str	r2, [r3, #56]	@ 0x38
		if (fmt == FS_FAT32) {
 800ce86:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ce8a:	2b03      	cmp	r3, #3
 800ce8c:	d11e      	bne.n	800cecc <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ce8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce90:	3340      	adds	r3, #64	@ 0x40
 800ce92:	332a      	adds	r3, #42	@ 0x2a
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fc fbc7 	bl	8009628 <ld_word>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d001      	beq.n	800cea4 <find_volume+0x5bc>
 800cea0:	230d      	movs	r3, #13
 800cea2:	e0ae      	b.n	800d002 <find_volume+0x71a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cea4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cea6:	891b      	ldrh	r3, [r3, #8]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d001      	beq.n	800ceb0 <find_volume+0x5c8>
 800ceac:	230d      	movs	r3, #13
 800ceae:	e0a8      	b.n	800d002 <find_volume+0x71a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ceb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceb2:	3340      	adds	r3, #64	@ 0x40
 800ceb4:	332c      	adds	r3, #44	@ 0x2c
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fc fbce 	bl	8009658 <ld_dword>
 800cebc:	4602      	mov	r2, r0
 800cebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cec0:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cec6:	009b      	lsls	r3, r3, #2
 800cec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ceca:	e01f      	b.n	800cf0c <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cece:	891b      	ldrh	r3, [r3, #8]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <find_volume+0x5f0>
 800ced4:	230d      	movs	r3, #13
 800ced6:	e094      	b.n	800d002 <find_volume+0x71a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ced8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cedc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cede:	441a      	add	r2, r3
 800cee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cee2:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cee4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d103      	bne.n	800cef4 <find_volume+0x60c>
 800ceec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cef0:	005b      	lsls	r3, r3, #1
 800cef2:	e00a      	b.n	800cf0a <find_volume+0x622>
 800cef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cef8:	4613      	mov	r3, r2
 800cefa:	005b      	lsls	r3, r3, #1
 800cefc:	4413      	add	r3, r2
 800cefe:	085a      	lsrs	r2, r3, #1
 800cf00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf04:	f003 0301 	and.w	r3, r3, #1
 800cf08:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cf0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cf10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf12:	899b      	ldrh	r3, [r3, #12]
 800cf14:	4619      	mov	r1, r3
 800cf16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf18:	440b      	add	r3, r1
 800cf1a:	3b01      	subs	r3, #1
 800cf1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf1e:	8989      	ldrh	r1, [r1, #12]
 800cf20:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d201      	bcs.n	800cf2c <find_volume+0x644>
 800cf28:	230d      	movs	r3, #13
 800cf2a:	e06a      	b.n	800d002 <find_volume+0x71a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf32:	621a      	str	r2, [r3, #32]
 800cf34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf36:	6a1a      	ldr	r2, [r3, #32]
 800cf38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800cf3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3e:	2280      	movs	r2, #128	@ 0x80
 800cf40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cf42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf46:	2b03      	cmp	r3, #3
 800cf48:	d149      	bne.n	800cfde <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4c:	3340      	adds	r3, #64	@ 0x40
 800cf4e:	3330      	adds	r3, #48	@ 0x30
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fc fb69 	bl	8009628 <ld_word>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d140      	bne.n	800cfde <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf5e:	3301      	adds	r3, #1
 800cf60:	4619      	mov	r1, r3
 800cf62:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cf64:	f7fc ffa4 	bl	8009eb0 <move_window>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d137      	bne.n	800cfde <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 800cf6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf70:	2200      	movs	r2, #0
 800cf72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf76:	3340      	adds	r3, #64	@ 0x40
 800cf78:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fc fb53 	bl	8009628 <ld_word>
 800cf82:	4603      	mov	r3, r0
 800cf84:	461a      	mov	r2, r3
 800cf86:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d127      	bne.n	800cfde <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cf8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf90:	3340      	adds	r3, #64	@ 0x40
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fc fb60 	bl	8009658 <ld_dword>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	4a1c      	ldr	r2, [pc, #112]	@ (800d00c <find_volume+0x724>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d11e      	bne.n	800cfde <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfa2:	3340      	adds	r3, #64	@ 0x40
 800cfa4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fc fb55 	bl	8009658 <ld_dword>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	4a17      	ldr	r2, [pc, #92]	@ (800d010 <find_volume+0x728>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d113      	bne.n	800cfde <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cfb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfb8:	3340      	adds	r3, #64	@ 0x40
 800cfba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fc fb4a 	bl	8009658 <ld_dword>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc8:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cfca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfcc:	3340      	adds	r3, #64	@ 0x40
 800cfce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fc fb40 	bl	8009658 <ld_dword>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfdc:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cfde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfe0:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800cfe4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cfe6:	4b0b      	ldr	r3, [pc, #44]	@ (800d014 <find_volume+0x72c>)
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	3301      	adds	r3, #1
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	4b09      	ldr	r3, [pc, #36]	@ (800d014 <find_volume+0x72c>)
 800cff0:	801a      	strh	r2, [r3, #0]
 800cff2:	4b08      	ldr	r3, [pc, #32]	@ (800d014 <find_volume+0x72c>)
 800cff4:	881a      	ldrh	r2, [r3, #0]
 800cff6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cff8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cffa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cffc:	f7fc fef0 	bl	8009de0 <clear_lock>
#endif
	return FR_OK;
 800d000:	2300      	movs	r3, #0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3770      	adds	r7, #112	@ 0x70
 800d006:	46bd      	mov	sp, r7
 800d008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d00c:	41615252 	.word	0x41615252
 800d010:	61417272 	.word	0x61417272
 800d014:	20002924 	.word	0x20002924

0800d018 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b084      	sub	sp, #16
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d022:	2309      	movs	r3, #9
 800d024:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d02e      	beq.n	800d08a <validate+0x72>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d02a      	beq.n	800d08a <validate+0x72>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d025      	beq.n	800d08a <validate+0x72>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	889a      	ldrh	r2, [r3, #4]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	88db      	ldrh	r3, [r3, #6]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d11e      	bne.n	800d08a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4618      	mov	r0, r3
 800d052:	f7fc fd4c 	bl	8009aee <lock_fs>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d014      	beq.n	800d086 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	785b      	ldrb	r3, [r3, #1]
 800d062:	4618      	mov	r0, r3
 800d064:	f7fc fa40 	bl	80094e8 <disk_status>
 800d068:	4603      	mov	r3, r0
 800d06a:	f003 0301 	and.w	r3, r3, #1
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d102      	bne.n	800d078 <validate+0x60>
				res = FR_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	73fb      	strb	r3, [r7, #15]
 800d076:	e008      	b.n	800d08a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2100      	movs	r1, #0
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fc fd4b 	bl	8009b1a <unlock_fs>
 800d084:	e001      	b.n	800d08a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d086:	230f      	movs	r3, #15
 800d088:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d102      	bne.n	800d096 <validate+0x7e>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	e000      	b.n	800d098 <validate+0x80>
 800d096:	2300      	movs	r3, #0
 800d098:	683a      	ldr	r2, [r7, #0]
 800d09a:	6013      	str	r3, [r2, #0]
	return res;
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
	...

0800d0a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b088      	sub	sp, #32
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d0ba:	f107 0310 	add.w	r3, r7, #16
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7ff fb6a 	bl	800c798 <get_ldnumber>
 800d0c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	da01      	bge.n	800d0d0 <f_mount+0x28>
 800d0cc:	230b      	movs	r3, #11
 800d0ce:	e048      	b.n	800d162 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d0d0:	4a26      	ldr	r2, [pc, #152]	@ (800d16c <f_mount+0xc4>)
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00f      	beq.n	800d100 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d0e0:	69b8      	ldr	r0, [r7, #24]
 800d0e2:	f7fc fe7d 	bl	8009de0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f001 ff98 	bl	800f020 <ff_del_syncobj>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d101      	bne.n	800d0fa <f_mount+0x52>
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	e033      	b.n	800d162 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00f      	beq.n	800d126 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	b2da      	uxtb	r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	3318      	adds	r3, #24
 800d114:	4619      	mov	r1, r3
 800d116:	4610      	mov	r0, r2
 800d118:	f001 ff64 	bl	800efe4 <ff_cre_syncobj>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d101      	bne.n	800d126 <f_mount+0x7e>
 800d122:	2302      	movs	r3, #2
 800d124:	e01d      	b.n	800d162 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	4910      	ldr	r1, [pc, #64]	@ (800d16c <f_mount+0xc4>)
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <f_mount+0x94>
 800d136:	79fb      	ldrb	r3, [r7, #7]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d001      	beq.n	800d140 <f_mount+0x98>
 800d13c:	2300      	movs	r3, #0
 800d13e:	e010      	b.n	800d162 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d140:	f107 010c 	add.w	r1, r7, #12
 800d144:	f107 0308 	add.w	r3, r7, #8
 800d148:	2200      	movs	r2, #0
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7ff fbcc 	bl	800c8e8 <find_volume>
 800d150:	4603      	mov	r3, r0
 800d152:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	7dfa      	ldrb	r2, [r7, #23]
 800d158:	4611      	mov	r1, r2
 800d15a:	4618      	mov	r0, r3
 800d15c:	f7fc fcdd 	bl	8009b1a <unlock_fs>
 800d160:	7dfb      	ldrb	r3, [r7, #23]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3720      	adds	r7, #32
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	20002920 	.word	0x20002920

0800d170 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d174:	b0aa      	sub	sp, #168	@ 0xa8
 800d176:	af00      	add	r7, sp, #0
 800d178:	6278      	str	r0, [r7, #36]	@ 0x24
 800d17a:	6239      	str	r1, [r7, #32]
 800d17c:	4613      	mov	r3, r2
 800d17e:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d182:	2b00      	cmp	r3, #0
 800d184:	d101      	bne.n	800d18a <f_open+0x1a>
 800d186:	2309      	movs	r3, #9
 800d188:	e2e2      	b.n	800d750 <f_open+0x5e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d18a:	7ffb      	ldrb	r3, [r7, #31]
 800d18c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d190:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800d192:	7ffb      	ldrb	r3, [r7, #31]
 800d194:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800d198:	f107 0020 	add.w	r0, r7, #32
 800d19c:	461a      	mov	r2, r3
 800d19e:	f7ff fba3 	bl	800c8e8 <find_volume>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
	if (res == FR_OK) {
 800d1a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f040 82bf 	bne.w	800d730 <f_open+0x5c0>
		dj.obj.fs = fs;
 800d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b4:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
 800d1b6:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800d1ba:	f001 ff5d 	bl	800f078 <ff_memalloc>
 800d1be:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800d1c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d106      	bne.n	800d1d8 <f_open+0x68>
 800d1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1cc:	2111      	movs	r1, #17
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fc fca3 	bl	8009b1a <unlock_fs>
 800d1d4:	2311      	movs	r3, #17
 800d1d6:	e2bb      	b.n	800d750 <f_open+0x5e0>
 800d1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d1de:	611a      	str	r2, [r3, #16]
 800d1e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d1e6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800d1ea:	6153      	str	r3, [r2, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d1ec:	6a3b      	ldr	r3, [r7, #32]
 800d1ee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	f7ff fa21 	bl	800c63c <follow_path>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d200:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d204:	2b00      	cmp	r3, #0
 800d206:	d118      	bne.n	800d23a <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d208:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800d20c:	b25b      	sxtb	r3, r3
 800d20e:	2b00      	cmp	r3, #0
 800d210:	da03      	bge.n	800d21a <f_open+0xaa>
				res = FR_INVALID_NAME;
 800d212:	2306      	movs	r3, #6
 800d214:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d218:	e00f      	b.n	800d23a <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d21a:	7ffb      	ldrb	r3, [r7, #31]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	bf8c      	ite	hi
 800d220:	2301      	movhi	r3, #1
 800d222:	2300      	movls	r3, #0
 800d224:	b2db      	uxtb	r3, r3
 800d226:	461a      	mov	r2, r3
 800d228:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d22c:	4611      	mov	r1, r2
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fc fc8e 	bl	8009b50 <chk_lock>
 800d234:	4603      	mov	r3, r0
 800d236:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d23a:	7ffb      	ldrb	r3, [r7, #31]
 800d23c:	f003 031c 	and.w	r3, r3, #28
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 8117 	beq.w	800d474 <f_open+0x304>
			if (res != FR_OK) {					/* No file, create new */
 800d246:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d017      	beq.n	800d27e <f_open+0x10e>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d24e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d252:	2b04      	cmp	r3, #4
 800d254:	d10e      	bne.n	800d274 <f_open+0x104>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d256:	f7fc fcd7 	bl	8009c08 <enq_lock>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d006      	beq.n	800d26e <f_open+0xfe>
 800d260:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d264:	4618      	mov	r0, r3
 800d266:	f7fe fd41 	bl	800bcec <dir_register>
 800d26a:	4603      	mov	r3, r0
 800d26c:	e000      	b.n	800d270 <f_open+0x100>
 800d26e:	2312      	movs	r3, #18
 800d270:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d274:	7ffb      	ldrb	r3, [r7, #31]
 800d276:	f043 0308 	orr.w	r3, r3, #8
 800d27a:	77fb      	strb	r3, [r7, #31]
 800d27c:	e011      	b.n	800d2a2 <f_open+0x132>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d27e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d282:	f003 0311 	and.w	r3, r3, #17
 800d286:	2b00      	cmp	r3, #0
 800d288:	d003      	beq.n	800d292 <f_open+0x122>
					res = FR_DENIED;
 800d28a:	2307      	movs	r3, #7
 800d28c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d290:	e007      	b.n	800d2a2 <f_open+0x132>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d292:	7ffb      	ldrb	r3, [r7, #31]
 800d294:	f003 0304 	and.w	r3, r3, #4
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <f_open+0x132>
 800d29c:	2308      	movs	r3, #8
 800d29e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d2a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f040 8100 	bne.w	800d4ac <f_open+0x33c>
 800d2ac:	7ffb      	ldrb	r3, [r7, #31]
 800d2ae:	f003 0308 	and.w	r3, r3, #8
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f000 80fa 	beq.w	800d4ac <f_open+0x33c>
				dw = GET_FATTIME();
 800d2b8:	f7fc f8b8 	bl	800942c <get_fattime>
 800d2bc:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	2b04      	cmp	r3, #4
 800d2c6:	f040 8085 	bne.w	800d3d4 <f_open+0x264>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d2ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ce:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	695b      	ldr	r3, [r3, #20]
 800d2d4:	3334      	adds	r3, #52	@ 0x34
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fc f9be 	bl	8009658 <ld_dword>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e0:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e4:	695b      	ldr	r3, [r3, #20]
 800d2e6:	3338      	adds	r3, #56	@ 0x38
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fc f9d8 	bl	800969e <ld_qword>
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f6:	695b      	ldr	r3, [r3, #20]
 800d2f8:	3321      	adds	r3, #33	@ 0x21
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	f003 0302 	and.w	r3, r3, #2
 800d300:	b2db      	uxtb	r3, r3
 800d302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d304:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800d306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d308:	2200      	movs	r2, #0
 800d30a:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	3308      	adds	r3, #8
 800d312:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d316:	4618      	mov	r0, r3
 800d318:	f7fc fab7 	bl	800988a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31e:	695b      	ldr	r3, [r3, #20]
 800d320:	f103 0214 	add.w	r2, r3, #20
 800d324:	2300      	movs	r3, #0
 800d326:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32a:	695b      	ldr	r3, [r3, #20]
 800d32c:	330c      	adds	r3, #12
 800d32e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d332:	4618      	mov	r0, r3
 800d334:	f7fc faa9 	bl	800988a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d33a:	695b      	ldr	r3, [r3, #20]
 800d33c:	f103 0215 	add.w	r2, r3, #21
 800d340:	2300      	movs	r3, #0
 800d342:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	1d1a      	adds	r2, r3, #4
 800d34a:	2320      	movs	r3, #32
 800d34c:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	3334      	adds	r3, #52	@ 0x34
 800d354:	2100      	movs	r1, #0
 800d356:	4618      	mov	r0, r3
 800d358:	f7fc fa97 	bl	800988a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35e:	695b      	ldr	r3, [r3, #20]
 800d360:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d364:	f04f 0200 	mov.w	r2, #0
 800d368:	f04f 0300 	mov.w	r3, #0
 800d36c:	4608      	mov	r0, r1
 800d36e:	f7fc fab8 	bl	80098e2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d37a:	f04f 0200 	mov.w	r2, #0
 800d37e:	f04f 0300 	mov.w	r3, #0
 800d382:	4608      	mov	r0, r1
 800d384:	f7fc faad 	bl	80098e2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800d390:	2301      	movs	r3, #1
 800d392:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800d394:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fe f9f3 	bl	800b784 <store_xdir>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d3a4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d17f      	bne.n	800d4ac <f_open+0x33c>
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ae:	689b      	ldr	r3, [r3, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d07b      	beq.n	800d4ac <f_open+0x33c>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d3b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	4619      	mov	r1, r3
 800d3be:	f7fd fa03 	bl	800a7c8 <remove_chain>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3ce:	3b01      	subs	r3, #1
 800d3d0:	61d3      	str	r3, [r2, #28]
 800d3d2:	e06b      	b.n	800d4ac <f_open+0x33c>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d3d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3d6:	330e      	adds	r3, #14
 800d3d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fc fa54 	bl	800988a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d3e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3e4:	3316      	adds	r3, #22
 800d3e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fc fa4d 	bl	800988a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d3f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3f2:	f103 020b 	add.w	r2, r3, #11
 800d3f6:	2320      	movs	r3, #32
 800d3f8:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d3fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f7fd fdb8 	bl	800af76 <ld_clust>
 800d406:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d40a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d40c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d40e:	2200      	movs	r2, #0
 800d410:	4619      	mov	r1, r3
 800d412:	f7fd fdcf 	bl	800afb4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d418:	331c      	adds	r3, #28
 800d41a:	2100      	movs	r1, #0
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fc fa34 	bl	800988a <st_dword>
					fs->wflag = 1;
 800d422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d424:	2301      	movs	r3, #1
 800d426:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d428:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d03d      	beq.n	800d4ac <f_open+0x33c>
						dw = fs->winsect;
 800d430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d434:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						res = remove_chain(&dj.obj, cl, 0);
 800d438:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d43c:	2200      	movs	r2, #0
 800d43e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d442:	4618      	mov	r0, r3
 800d444:	f7fd f9c0 	bl	800a7c8 <remove_chain>
 800d448:	4603      	mov	r3, r0
 800d44a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
						if (res == FR_OK) {
 800d44e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d452:	2b00      	cmp	r3, #0
 800d454:	d12a      	bne.n	800d4ac <f_open+0x33c>
							res = move_window(fs, dw);
 800d456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d458:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7fc fd27 	bl	8009eb0 <move_window>
 800d462:	4603      	mov	r3, r0
 800d464:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d46a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d46e:	3b01      	subs	r3, #1
 800d470:	61d3      	str	r3, [r2, #28]
 800d472:	e01b      	b.n	800d4ac <f_open+0x33c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d474:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d117      	bne.n	800d4ac <f_open+0x33c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d47c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d480:	f003 0310 	and.w	r3, r3, #16
 800d484:	2b00      	cmp	r3, #0
 800d486:	d003      	beq.n	800d490 <f_open+0x320>
					res = FR_NO_FILE;
 800d488:	2304      	movs	r3, #4
 800d48a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d48e:	e00d      	b.n	800d4ac <f_open+0x33c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d490:	7ffb      	ldrb	r3, [r7, #31]
 800d492:	f003 0302 	and.w	r3, r3, #2
 800d496:	2b00      	cmp	r3, #0
 800d498:	d008      	beq.n	800d4ac <f_open+0x33c>
 800d49a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <f_open+0x33c>
						res = FR_DENIED;
 800d4a6:	2307      	movs	r3, #7
 800d4a8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					}
				}
			}
		}
		if (res == FR_OK) {
 800d4ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d126      	bne.n	800d502 <f_open+0x392>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d4b4:	7ffb      	ldrb	r3, [r7, #31]
 800d4b6:	f003 0308 	and.w	r3, r3, #8
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <f_open+0x356>
				mode |= FA_MODIFIED;
 800d4be:	7ffb      	ldrb	r3, [r7, #31]
 800d4c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4c4:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4cc:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800d4ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d2:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4d4:	7ffb      	ldrb	r3, [r7, #31]
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	bf8c      	ite	hi
 800d4da:	2301      	movhi	r3, #1
 800d4dc:	2300      	movls	r3, #0
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7fc fbaf 	bl	8009c4c <inc_lock>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f2:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d102      	bne.n	800d502 <f_open+0x392>
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d502:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d506:	2b00      	cmp	r3, #0
 800d508:	f040 810e 	bne.w	800d728 <f_open+0x5b8>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b04      	cmp	r3, #4
 800d512:	d12d      	bne.n	800d570 <f_open+0x400>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d51a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d51e:	4613      	mov	r3, r2
 800d520:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d524:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d528:	431a      	orrs	r2, r3
 800d52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52c:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d52e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d532:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	3334      	adds	r3, #52	@ 0x34
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fc f88c 	bl	8009658 <ld_dword>
 800d540:	4602      	mov	r2, r0
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	3338      	adds	r3, #56	@ 0x38
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fc f8a6 	bl	800969e <ld_qword>
 800d552:	4602      	mov	r2, r0
 800d554:	460b      	mov	r3, r1
 800d556:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d558:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55e:	695b      	ldr	r3, [r3, #20]
 800d560:	3321      	adds	r3, #33	@ 0x21
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	f003 0302 	and.w	r3, r3, #2
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56c:	71da      	strb	r2, [r3, #7]
 800d56e:	e016      	b.n	800d59e <f_open+0x42e>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7fd fcfd 	bl	800af76 <ld_clust>
 800d57c:	4602      	mov	r2, r0
 800d57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d580:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d584:	331c      	adds	r3, #28
 800d586:	4618      	mov	r0, r3
 800d588:	f7fc f866 	bl	8009658 <ld_dword>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2200      	movs	r2, #0
 800d590:	613b      	str	r3, [r7, #16]
 800d592:	617a      	str	r2, [r7, #20]
 800d594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d596:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d59a:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d5a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ac:	88da      	ldrh	r2, [r3, #6]
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b4:	7ffa      	ldrb	r2, [r7, #31]
 800d5b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5bc:	2200      	movs	r2, #0
 800d5be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d5c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d5ca:	f04f 0200 	mov.w	r2, #0
 800d5ce:	f04f 0300 	mov.w	r3, #0
 800d5d2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d8:	3354      	adds	r3, #84	@ 0x54
 800d5da:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d5de:	2100      	movs	r1, #0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7fc fa27 	bl	8009a34 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d5e6:	7ffb      	ldrb	r3, [r7, #31]
 800d5e8:	f003 0320 	and.w	r3, r3, #32
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 809b 	beq.w	800d728 <f_open+0x5b8>
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	f000 8095 	beq.w	800d728 <f_open+0x5b8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d600:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d606:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d60c:	895b      	ldrh	r3, [r3, #10]
 800d60e:	461a      	mov	r2, r3
 800d610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d612:	899b      	ldrh	r3, [r3, #12]
 800d614:	fb02 f303 	mul.w	r3, r2, r3
 800d618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d626:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d62a:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800d62e:	e023      	b.n	800d678 <f_open+0x508>
					clst = get_fat(&fp->obj, clst);
 800d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d632:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800d636:	4618      	mov	r0, r3
 800d638:	f7fc fcf8 	bl	800a02c <get_fat>
 800d63c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
					if (clst <= 1) res = FR_INT_ERR;
 800d640:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d644:	2b01      	cmp	r3, #1
 800d646:	d802      	bhi.n	800d64e <f_open+0x4de>
 800d648:	2302      	movs	r3, #2
 800d64a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d64e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d656:	d102      	bne.n	800d65e <f_open+0x4ee>
 800d658:	2301      	movs	r3, #1
 800d65a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d65e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d662:	2200      	movs	r2, #0
 800d664:	4698      	mov	r8, r3
 800d666:	4691      	mov	r9, r2
 800d668:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d66c:	ebb2 0a08 	subs.w	sl, r2, r8
 800d670:	eb63 0b09 	sbc.w	fp, r3, r9
 800d674:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
 800d678:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10a      	bne.n	800d696 <f_open+0x526>
 800d680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d684:	2200      	movs	r2, #0
 800d686:	461c      	mov	r4, r3
 800d688:	4615      	mov	r5, r2
 800d68a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800d68e:	4294      	cmp	r4, r2
 800d690:	eb75 0303 	sbcs.w	r3, r5, r3
 800d694:	d3cc      	bcc.n	800d630 <f_open+0x4c0>
				}
				fp->clust = clst;
 800d696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d698:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d69c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d69e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d140      	bne.n	800d728 <f_open+0x5b8>
 800d6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a8:	899b      	ldrh	r3, [r3, #12]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	60bb      	str	r3, [r7, #8]
 800d6b0:	60fa      	str	r2, [r7, #12]
 800d6b2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d6b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d6ba:	f7f3 fa77 	bl	8000bac <__aeabi_uldivmod>
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	d032      	beq.n	800d728 <f_open+0x5b8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fc fc8f 	bl	8009fec <clust2sect>
 800d6ce:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 800d6d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d103      	bne.n	800d6e2 <f_open+0x572>
						res = FR_INT_ERR;
 800d6da:	2302      	movs	r3, #2
 800d6dc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 800d6e0:	e022      	b.n	800d728 <f_open+0x5b8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e4:	899b      	ldrh	r3, [r3, #12]
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	603b      	str	r3, [r7, #0]
 800d6ec:	607a      	str	r2, [r7, #4]
 800d6ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6f2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d6f6:	f7f3 fa59 	bl	8000bac <__aeabi_uldivmod>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d702:	441a      	add	r2, r3
 800d704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d706:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70a:	7858      	ldrb	r0, [r3, #1]
 800d70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d716:	2301      	movs	r3, #1
 800d718:	f7fb ff28 	bl	800956c <disk_read>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d002      	beq.n	800d728 <f_open+0x5b8>
 800d722:	2301      	movs	r3, #1
 800d724:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d728:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d72c:	f001 fcb0 	bl	800f090 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d730:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <f_open+0x5ce>
 800d738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73a:	2200      	movs	r2, #0
 800d73c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d740:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800d744:	4611      	mov	r1, r2
 800d746:	4618      	mov	r0, r3
 800d748:	f7fc f9e7 	bl	8009b1a <unlock_fs>
 800d74c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
}
 800d750:	4618      	mov	r0, r3
 800d752:	37a8      	adds	r7, #168	@ 0xa8
 800d754:	46bd      	mov	sp, r7
 800d756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d75a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d75a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d75e:	b098      	sub	sp, #96	@ 0x60
 800d760:	af00      	add	r7, sp, #0
 800d762:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d764:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d766:	627a      	str	r2, [r7, #36]	@ 0x24
 800d768:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76c:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 800d76e:	6a3a      	ldr	r2, [r7, #32]
 800d770:	2300      	movs	r3, #0
 800d772:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d776:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d77a:	4619      	mov	r1, r3
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7ff fc4b 	bl	800d018 <validate>
 800d782:	4603      	mov	r3, r0
 800d784:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d788:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d108      	bne.n	800d7a2 <f_read+0x48>
 800d790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d792:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d796:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d79a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d009      	beq.n	800d7b6 <f_read+0x5c>
 800d7a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7a4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800d7a8:	4611      	mov	r1, r2
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fc f9b5 	bl	8009b1a <unlock_fs>
 800d7b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d7b4:	e193      	b.n	800dade <f_read+0x384>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d106      	bne.n	800d7d2 <f_read+0x78>
 800d7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7c6:	2107      	movs	r1, #7
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fc f9a6 	bl	8009b1a <unlock_fs>
 800d7ce:	2307      	movs	r3, #7
 800d7d0:	e185      	b.n	800dade <f_read+0x384>
	remain = fp->obj.objsize - fp->fptr;
 800d7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d7de:	ebb0 0802 	subs.w	r8, r0, r2
 800d7e2:	eb61 0903 	sbc.w	r9, r1, r3
 800d7e6:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	461c      	mov	r4, r3
 800d7f0:	4615      	mov	r5, r2
 800d7f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d7f6:	42a2      	cmp	r2, r4
 800d7f8:	41ab      	sbcs	r3, r5
 800d7fa:	f080 8166 	bcs.w	800daca <f_read+0x370>
 800d7fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d800:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800d802:	e162      	b.n	800daca <f_read+0x370>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d806:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d80c:	899b      	ldrh	r3, [r3, #12]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	2200      	movs	r2, #0
 800d812:	61bb      	str	r3, [r7, #24]
 800d814:	61fa      	str	r2, [r7, #28]
 800d816:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d81a:	f7f3 f9c7 	bl	8000bac <__aeabi_uldivmod>
 800d81e:	4313      	orrs	r3, r2
 800d820:	f040 8107 	bne.w	800da32 <f_read+0x2d8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d826:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800d82a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d82c:	899b      	ldrh	r3, [r3, #12]
 800d82e:	b29b      	uxth	r3, r3
 800d830:	2200      	movs	r2, #0
 800d832:	613b      	str	r3, [r7, #16]
 800d834:	617a      	str	r2, [r7, #20]
 800d836:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d83a:	f7f3 f9b7 	bl	8000bac <__aeabi_uldivmod>
 800d83e:	4602      	mov	r2, r0
 800d840:	460b      	mov	r3, r1
 800d842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d844:	895b      	ldrh	r3, [r3, #10]
 800d846:	3b01      	subs	r3, #1
 800d848:	4013      	ands	r3, r2
 800d84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800d84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d13c      	bne.n	800d8cc <f_read+0x172>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d854:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d858:	4313      	orrs	r3, r2
 800d85a:	d103      	bne.n	800d864 <f_read+0x10a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d862:	e013      	b.n	800d88c <f_read+0x132>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d007      	beq.n	800d87c <f_read+0x122>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d872:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d874:	f7fd f95d 	bl	800ab32 <clmt_clust>
 800d878:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d87a:	e007      	b.n	800d88c <f_read+0x132>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d87c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d882:	4619      	mov	r1, r3
 800d884:	4610      	mov	r0, r2
 800d886:	f7fc fbd1 	bl	800a02c <get_fat>
 800d88a:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d88c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d80a      	bhi.n	800d8a8 <f_read+0x14e>
 800d892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d894:	2202      	movs	r2, #2
 800d896:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d89c:	2102      	movs	r1, #2
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fc f93b 	bl	8009b1a <unlock_fs>
 800d8a4:	2302      	movs	r3, #2
 800d8a6:	e11a      	b.n	800dade <f_read+0x384>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ae:	d10a      	bne.n	800d8c6 <f_read+0x16c>
 800d8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ba:	2101      	movs	r1, #1
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fc f92c 	bl	8009b1a <unlock_fs>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e10b      	b.n	800dade <f_read+0x384>
				fp->clust = clst;				/* Update current cluster */
 800d8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8ca:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d8cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4610      	mov	r0, r2
 800d8d6:	f7fc fb89 	bl	8009fec <clust2sect>
 800d8da:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10a      	bne.n	800d8f8 <f_read+0x19e>
 800d8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e4:	2202      	movs	r2, #2
 800d8e6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ec:	2102      	movs	r1, #2
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fc f913 	bl	8009b1a <unlock_fs>
 800d8f4:	2302      	movs	r3, #2
 800d8f6:	e0f2      	b.n	800dade <f_read+0x384>
			sect += csect;
 800d8f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d8fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8fc:	4413      	add	r3, r2
 800d8fe:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d902:	899b      	ldrh	r3, [r3, #12]
 800d904:	461a      	mov	r2, r3
 800d906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d908:	fbb3 f3f2 	udiv	r3, r3, r2
 800d90c:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d90e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d910:	2b00      	cmp	r3, #0
 800d912:	d048      	beq.n	800d9a6 <f_read+0x24c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d914:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d916:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d918:	4413      	add	r3, r2
 800d91a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d91c:	8952      	ldrh	r2, [r2, #10]
 800d91e:	4293      	cmp	r3, r2
 800d920:	d905      	bls.n	800d92e <f_read+0x1d4>
					cc = fs->csize - csect;
 800d922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d924:	895b      	ldrh	r3, [r3, #10]
 800d926:	461a      	mov	r2, r3
 800d928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d930:	7858      	ldrb	r0, [r3, #1]
 800d932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d934:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d936:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d938:	f7fb fe18 	bl	800956c <disk_read>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00a      	beq.n	800d958 <f_read+0x1fe>
 800d942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d944:	2201      	movs	r2, #1
 800d946:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94c:	2101      	movs	r1, #1
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fc f8e3 	bl	8009b1a <unlock_fs>
 800d954:	2301      	movs	r3, #1
 800d956:	e0c2      	b.n	800dade <f_read+0x384>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d95e:	b25b      	sxtb	r3, r3
 800d960:	2b00      	cmp	r3, #0
 800d962:	da18      	bge.n	800d996 <f_read+0x23c>
 800d964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96a:	1ad3      	subs	r3, r2, r3
 800d96c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d96e:	429a      	cmp	r2, r3
 800d970:	d911      	bls.n	800d996 <f_read+0x23c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d97c:	8992      	ldrh	r2, [r2, #12]
 800d97e:	fb02 f303 	mul.w	r3, r2, r3
 800d982:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d984:	18d0      	adds	r0, r2, r3
 800d986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d988:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d98e:	899b      	ldrh	r3, [r3, #12]
 800d990:	461a      	mov	r2, r3
 800d992:	f7fc f82e 	bl	80099f2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d998:	899b      	ldrh	r3, [r3, #12]
 800d99a:	461a      	mov	r2, r3
 800d99c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d99e:	fb02 f303 	mul.w	r3, r2, r3
 800d9a2:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 800d9a4:	e071      	b.n	800da8a <f_read+0x330>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d03d      	beq.n	800da2c <f_read+0x2d2>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9b6:	b25b      	sxtb	r3, r3
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	da20      	bge.n	800d9fe <f_read+0x2a4>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9be:	7858      	ldrb	r0, [r3, #1]
 800d9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800d9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	f7fb fdee 	bl	80095ac <disk_write>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00a      	beq.n	800d9ec <f_read+0x292>
 800d9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d9de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fc f899 	bl	8009b1a <unlock_fs>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e078      	b.n	800dade <f_read+0x384>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d9f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da00:	7858      	ldrb	r0, [r3, #1]
 800da02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da04:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800da08:	2301      	movs	r3, #1
 800da0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da0c:	f7fb fdae 	bl	800956c <disk_read>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00a      	beq.n	800da2c <f_read+0x2d2>
 800da16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da18:	2201      	movs	r2, #1
 800da1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800da1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da20:	2101      	movs	r1, #1
 800da22:	4618      	mov	r0, r3
 800da24:	f7fc f879 	bl	8009b1a <unlock_fs>
 800da28:	2301      	movs	r3, #1
 800da2a:	e058      	b.n	800dade <f_read+0x384>
			}
#endif
			fp->sect = sect;
 800da2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da30:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800da32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da34:	899b      	ldrh	r3, [r3, #12]
 800da36:	4618      	mov	r0, r3
 800da38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800da3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da40:	899b      	ldrh	r3, [r3, #12]
 800da42:	fbb2 f1f3 	udiv	r1, r2, r3
 800da46:	fb01 f303 	mul.w	r3, r1, r3
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	1ac3      	subs	r3, r0, r3
 800da4e:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800da50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800da52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da54:	429a      	cmp	r2, r3
 800da56:	d901      	bls.n	800da5c <f_read+0x302>
 800da58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da5a:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800da5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da5e:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800da62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da64:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800da68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da6a:	899b      	ldrh	r3, [r3, #12]
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	2200      	movs	r2, #0
 800da70:	60bb      	str	r3, [r7, #8]
 800da72:	60fa      	str	r2, [r7, #12]
 800da74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da78:	f7f3 f898 	bl	8000bac <__aeabi_uldivmod>
 800da7c:	4613      	mov	r3, r2
 800da7e:	4423      	add	r3, r4
 800da80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800da82:	4619      	mov	r1, r3
 800da84:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800da86:	f7fb ffb4 	bl	80099f2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800da8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800da8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da8e:	4413      	add	r3, r2
 800da90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800da98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800da9a:	2000      	movs	r0, #0
 800da9c:	468a      	mov	sl, r1
 800da9e:	4683      	mov	fp, r0
 800daa0:	eb12 010a 	adds.w	r1, r2, sl
 800daa4:	6039      	str	r1, [r7, #0]
 800daa6:	eb43 030b 	adc.w	r3, r3, fp
 800daaa:	607b      	str	r3, [r7, #4]
 800daac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daae:	e9d7 1200 	ldrd	r1, r2, [r7]
 800dab2:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800dab6:	6a3b      	ldr	r3, [r7, #32]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dabc:	441a      	add	r2, r3
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	601a      	str	r2, [r3, #0]
 800dac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800daca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f47f ae99 	bne.w	800d804 <f_read+0xaa>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dad4:	2100      	movs	r1, #0
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fc f81f 	bl	8009b1a <unlock_fs>
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3760      	adds	r7, #96	@ 0x60
 800dae2:	46bd      	mov	sp, r7
 800dae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dae8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daec:	b091      	sub	sp, #68	@ 0x44
 800daee:	af00      	add	r7, sp, #0
 800daf0:	61f8      	str	r0, [r7, #28]
 800daf2:	61b9      	str	r1, [r7, #24]
 800daf4:	617a      	str	r2, [r7, #20]
 800daf6:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800daf8:	69bb      	ldr	r3, [r7, #24]
 800dafa:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	2200      	movs	r2, #0
 800db00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	f107 0220 	add.w	r2, r7, #32
 800db08:	4611      	mov	r1, r2
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7ff fa84 	bl	800d018 <validate>
 800db10:	4603      	mov	r3, r0
 800db12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800db16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d108      	bne.n	800db30 <f_write+0x48>
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800db24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800db28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d009      	beq.n	800db44 <f_write+0x5c>
 800db30:	6a3b      	ldr	r3, [r7, #32]
 800db32:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800db36:	4611      	mov	r1, r2
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fb ffee 	bl	8009b1a <unlock_fs>
 800db3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800db42:	e1d2      	b.n	800deea <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800db4a:	f003 0302 	and.w	r3, r3, #2
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d106      	bne.n	800db60 <f_write+0x78>
 800db52:	6a3b      	ldr	r3, [r7, #32]
 800db54:	2107      	movs	r1, #7
 800db56:	4618      	mov	r0, r3
 800db58:	f7fb ffdf 	bl	8009b1a <unlock_fs>
 800db5c:	2307      	movs	r3, #7
 800db5e:	e1c4      	b.n	800deea <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800db60:	6a3b      	ldr	r3, [r7, #32]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	2b04      	cmp	r3, #4
 800db66:	f000 81ab 	beq.w	800dec0 <f_write+0x3d8>
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	18d1      	adds	r1, r2, r3
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db7a:	4613      	mov	r3, r2
 800db7c:	4299      	cmp	r1, r3
 800db7e:	f080 819f 	bcs.w	800dec0 <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800db88:	4613      	mov	r3, r2
 800db8a:	43db      	mvns	r3, r3
 800db8c:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800db8e:	e197      	b.n	800dec0 <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	899b      	ldrh	r3, [r3, #12]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	2200      	movs	r2, #0
 800db9e:	461d      	mov	r5, r3
 800dba0:	4616      	mov	r6, r2
 800dba2:	462a      	mov	r2, r5
 800dba4:	4633      	mov	r3, r6
 800dba6:	f7f3 f801 	bl	8000bac <__aeabi_uldivmod>
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	f040 8128 	bne.w	800de00 <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dbb6:	6a3b      	ldr	r3, [r7, #32]
 800dbb8:	899b      	ldrh	r3, [r3, #12]
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	60bb      	str	r3, [r7, #8]
 800dbc0:	60fa      	str	r2, [r7, #12]
 800dbc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dbc6:	f7f2 fff1 	bl	8000bac <__aeabi_uldivmod>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	6a3b      	ldr	r3, [r7, #32]
 800dbd0:	895b      	ldrh	r3, [r3, #10]
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800dbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d150      	bne.n	800dc80 <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	d10c      	bne.n	800dc02 <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800dbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d11a      	bne.n	800dc2a <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	2100      	movs	r1, #0
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fc fe99 	bl	800a930 <create_chain>
 800dbfe:	63b8      	str	r0, [r7, #56]	@ 0x38
 800dc00:	e013      	b.n	800dc2a <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d007      	beq.n	800dc1a <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc0a:	69fb      	ldr	r3, [r7, #28]
 800dc0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dc10:	69f8      	ldr	r0, [r7, #28]
 800dc12:	f7fc ff8e 	bl	800ab32 <clmt_clust>
 800dc16:	63b8      	str	r0, [r7, #56]	@ 0x38
 800dc18:	e007      	b.n	800dc2a <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dc1a:	69fa      	ldr	r2, [r7, #28]
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc20:	4619      	mov	r1, r3
 800dc22:	4610      	mov	r0, r2
 800dc24:	f7fc fe84 	bl	800a930 <create_chain>
 800dc28:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f000 814c 	beq.w	800deca <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d10a      	bne.n	800dc4e <f_write+0x166>
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dc40:	6a3b      	ldr	r3, [r7, #32]
 800dc42:	2102      	movs	r1, #2
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7fb ff68 	bl	8009b1a <unlock_fs>
 800dc4a:	2302      	movs	r3, #2
 800dc4c:	e14d      	b.n	800deea <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc54:	d10a      	bne.n	800dc6c <f_write+0x184>
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	2101      	movs	r1, #1
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fb ff59 	bl	8009b1a <unlock_fs>
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e13e      	b.n	800deea <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc70:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dc72:	69fb      	ldr	r3, [r7, #28]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d102      	bne.n	800dc80 <f_write+0x198>
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc7e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dc86:	b25b      	sxtb	r3, r3
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	da20      	bge.n	800dcce <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc8c:	6a3b      	ldr	r3, [r7, #32]
 800dc8e:	7858      	ldrb	r0, [r3, #1]
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	f7fb fc86 	bl	80095ac <disk_write>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00a      	beq.n	800dcbc <f_write+0x1d4>
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	2201      	movs	r2, #1
 800dcaa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dcae:	6a3b      	ldr	r3, [r7, #32]
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fb ff31 	bl	8009b1a <unlock_fs>
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e116      	b.n	800deea <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dcc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dcce:	6a3a      	ldr	r2, [r7, #32]
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	4610      	mov	r0, r2
 800dcd8:	f7fc f988 	bl	8009fec <clust2sect>
 800dcdc:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <f_write+0x212>
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	2202      	movs	r2, #2
 800dce8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dcec:	6a3b      	ldr	r3, [r7, #32]
 800dcee:	2102      	movs	r1, #2
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fb ff12 	bl	8009b1a <unlock_fs>
 800dcf6:	2302      	movs	r3, #2
 800dcf8:	e0f7      	b.n	800deea <f_write+0x402>
			sect += csect;
 800dcfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfe:	4413      	add	r3, r2
 800dd00:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dd02:	6a3b      	ldr	r3, [r7, #32]
 800dd04:	899b      	ldrh	r3, [r3, #12]
 800dd06:	461a      	mov	r2, r3
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd0e:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d04b      	beq.n	800ddae <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1a:	4413      	add	r3, r2
 800dd1c:	6a3a      	ldr	r2, [r7, #32]
 800dd1e:	8952      	ldrh	r2, [r2, #10]
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d905      	bls.n	800dd30 <f_write+0x248>
					cc = fs->csize - csect;
 800dd24:	6a3b      	ldr	r3, [r7, #32]
 800dd26:	895b      	ldrh	r3, [r3, #10]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2c:	1ad3      	subs	r3, r2, r3
 800dd2e:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd30:	6a3b      	ldr	r3, [r7, #32]
 800dd32:	7858      	ldrb	r0, [r3, #1]
 800dd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd3a:	f7fb fc37 	bl	80095ac <disk_write>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00a      	beq.n	800dd5a <f_write+0x272>
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800dd4c:	6a3b      	ldr	r3, [r7, #32]
 800dd4e:	2101      	movs	r1, #1
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7fb fee2 	bl	8009b1a <unlock_fs>
 800dd56:	2301      	movs	r3, #1
 800dd58:	e0c7      	b.n	800deea <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd60:	1ad3      	subs	r3, r2, r3
 800dd62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d91a      	bls.n	800dd9e <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd74:	1ad3      	subs	r3, r2, r3
 800dd76:	6a3a      	ldr	r2, [r7, #32]
 800dd78:	8992      	ldrh	r2, [r2, #12]
 800dd7a:	fb02 f303 	mul.w	r3, r2, r3
 800dd7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd80:	18d1      	adds	r1, r2, r3
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	899b      	ldrh	r3, [r3, #12]
 800dd86:	461a      	mov	r2, r3
 800dd88:	f7fb fe33 	bl	80099f2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd96:	b2da      	uxtb	r2, r3
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	899b      	ldrh	r3, [r3, #12]
 800dda2:	461a      	mov	r2, r3
 800dda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dda6:	fb02 f303 	mul.w	r3, r2, r3
 800ddaa:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800ddac:	e05d      	b.n	800de6a <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d020      	beq.n	800ddfa <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 800ddb8:	69fb      	ldr	r3, [r7, #28]
 800ddba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ddc4:	4290      	cmp	r0, r2
 800ddc6:	eb71 0303 	sbcs.w	r3, r1, r3
 800ddca:	d216      	bcs.n	800ddfa <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	7858      	ldrb	r0, [r3, #1]
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddda:	f7fb fbc7 	bl	800956c <disk_read>
 800ddde:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00a      	beq.n	800ddfa <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	2201      	movs	r2, #1
 800dde8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ddec:	6a3b      	ldr	r3, [r7, #32]
 800ddee:	2101      	movs	r1, #1
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fb fe92 	bl	8009b1a <unlock_fs>
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	e077      	b.n	800deea <f_write+0x402>
			}
#endif
			fp->sect = sect;
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddfe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de00:	6a3b      	ldr	r3, [r7, #32]
 800de02:	899b      	ldrh	r3, [r3, #12]
 800de04:	4618      	mov	r0, r3
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	899b      	ldrh	r3, [r3, #12]
 800de10:	fbb2 f1f3 	udiv	r1, r2, r3
 800de14:	fb01 f303 	mul.w	r3, r1, r3
 800de18:	1ad3      	subs	r3, r2, r3
 800de1a:	1ac3      	subs	r3, r0, r3
 800de1c:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800de1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	429a      	cmp	r2, r3
 800de24:	d901      	bls.n	800de2a <f_write+0x342>
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	899b      	ldrh	r3, [r3, #12]
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	2200      	movs	r2, #0
 800de3e:	603b      	str	r3, [r7, #0]
 800de40:	607a      	str	r2, [r7, #4]
 800de42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de46:	f7f2 feb1 	bl	8000bac <__aeabi_uldivmod>
 800de4a:	4613      	mov	r3, r2
 800de4c:	4423      	add	r3, r4
 800de4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de50:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de52:	4618      	mov	r0, r3
 800de54:	f7fb fdcd 	bl	80099f2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800de5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800de62:	b2da      	uxtb	r2, r3
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800de6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de6e:	4413      	add	r3, r2
 800de70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de72:	69fb      	ldr	r3, [r7, #28]
 800de74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800de78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800de7a:	2000      	movs	r0, #0
 800de7c:	4688      	mov	r8, r1
 800de7e:	4681      	mov	r9, r0
 800de80:	eb12 0a08 	adds.w	sl, r2, r8
 800de84:	eb43 0b09 	adc.w	fp, r3, r9
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800de9a:	4290      	cmp	r0, r2
 800de9c:	eb71 0403 	sbcs.w	r4, r1, r3
 800dea0:	d201      	bcs.n	800dea6 <f_write+0x3be>
 800dea2:	4610      	mov	r0, r2
 800dea4:	4619      	mov	r1, r3
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deb2:	441a      	add	r2, r3
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	601a      	str	r2, [r3, #0]
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f47f ae64 	bne.w	800db90 <f_write+0xa8>
 800dec8:	e000      	b.n	800decc <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800deca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ded2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	2100      	movs	r1, #0
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fb fe19 	bl	8009b1a <unlock_fs>
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3744      	adds	r7, #68	@ 0x44
 800deee:	46bd      	mov	sp, r7
 800def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800def4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b09c      	sub	sp, #112	@ 0x70
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800df02:	4611      	mov	r1, r2
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff f887 	bl	800d018 <validate>
 800df0a:	4603      	mov	r3, r0
 800df0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (res == FR_OK) {
 800df10:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800df14:	2b00      	cmp	r3, #0
 800df16:	f040 8123 	bne.w	800e160 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 811b 	beq.w	800e160 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df30:	b25b      	sxtb	r3, r3
 800df32:	2b00      	cmp	r3, #0
 800df34:	da1c      	bge.n	800df70 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df38:	7858      	ldrb	r0, [r3, #1]
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df44:	2301      	movs	r3, #1
 800df46:	f7fb fb31 	bl	80095ac <disk_write>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d006      	beq.n	800df5e <f_sync+0x6a>
 800df50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df52:	2101      	movs	r1, #1
 800df54:	4618      	mov	r0, r3
 800df56:	f7fb fde0 	bl	8009b1a <unlock_fs>
 800df5a:	2301      	movs	r3, #1
 800df5c:	e109      	b.n	800e172 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800df70:	f7fb fa5c 	bl	800942c <get_fattime>
 800df74:	66b8      	str	r0, [r7, #104]	@ 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800df76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	2b04      	cmp	r3, #4
 800df7c:	f040 80a5 	bne.w	800e0ca <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4618      	mov	r0, r3
 800df84:	f7fc fbc0 	bl	800a708 <fill_first_frag>
 800df88:	4603      	mov	r3, r0
 800df8a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800df8e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10a      	bne.n	800dfac <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	f7fc fbe0 	bl	800a766 <fill_last_frag>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				}
				if (res == FR_OK) {
 800dfac:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f040 80d5 	bne.w	800e160 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 800dfb6:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800dfba:	f001 f85d 	bl	800f078 <ff_memalloc>
 800dfbe:	6638      	str	r0, [r7, #96]	@ 0x60
 800dfc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d106      	bne.n	800dfd4 <f_sync+0xe0>
 800dfc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfc8:	2111      	movs	r1, #17
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fb fda5 	bl	8009b1a <unlock_fs>
 800dfd0:	2311      	movs	r3, #17
 800dfd2:	e0ce      	b.n	800e172 <f_sync+0x27e>
 800dfd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dfd8:	611a      	str	r2, [r3, #16]
 800dfda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dfdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dfde:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800dfe2:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	f107 0308 	add.w	r3, r7, #8
 800dfea:	4611      	mov	r1, r2
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fd fb93 	bl	800b718 <load_obj_dir>
 800dff2:	4603      	mov	r3, r0
 800dff4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					if (res == FR_OK) {
 800dff8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d160      	bne.n	800e0c2 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e002:	695b      	ldr	r3, [r3, #20]
 800e004:	3304      	adds	r3, #4
 800e006:	781a      	ldrb	r2, [r3, #0]
 800e008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e00a:	695b      	ldr	r3, [r3, #20]
 800e00c:	3304      	adds	r3, #4
 800e00e:	f042 0220 	orr.w	r2, r2, #32
 800e012:	b2d2      	uxtb	r2, r2
 800e014:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	79da      	ldrb	r2, [r3, #7]
 800e01a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	3321      	adds	r3, #33	@ 0x21
 800e020:	f042 0201 	orr.w	r2, r2, #1
 800e024:	b2d2      	uxtb	r2, r2
 800e026:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e02a:	695b      	ldr	r3, [r3, #20]
 800e02c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	4619      	mov	r1, r3
 800e036:	4610      	mov	r0, r2
 800e038:	f7fb fc27 	bl	800988a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e03c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e03e:	695b      	ldr	r3, [r3, #20]
 800e040:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e04a:	4608      	mov	r0, r1
 800e04c:	f7fb fc49 	bl	80098e2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e050:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e052:	695b      	ldr	r3, [r3, #20]
 800e054:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e05e:	4608      	mov	r0, r1
 800e060:	f7fb fc3f 	bl	80098e2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e066:	695b      	ldr	r3, [r3, #20]
 800e068:	330c      	adds	r3, #12
 800e06a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fb fc0c 	bl	800988a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e074:	695b      	ldr	r3, [r3, #20]
 800e076:	3315      	adds	r3, #21
 800e078:	2200      	movs	r2, #0
 800e07a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e07c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	3310      	adds	r3, #16
 800e082:	2100      	movs	r1, #0
 800e084:	4618      	mov	r0, r3
 800e086:	f7fb fc00 	bl	800988a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e08a:	f107 0308 	add.w	r3, r7, #8
 800e08e:	4618      	mov	r0, r3
 800e090:	f7fd fb78 	bl	800b784 <store_xdir>
 800e094:	4603      	mov	r3, r0
 800e096:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
						if (res == FR_OK) {
 800e09a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d10f      	bne.n	800e0c2 <f_sync+0x1ce>
							res = sync_fs(fs);
 800e0a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fb ff31 	bl	8009f0c <sync_fs>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e0b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
						}
					}
					FREE_NAMBUF();
 800e0c2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800e0c4:	f000 ffe4 	bl	800f090 <ff_memfree>
 800e0c8:	e04a      	b.n	800e160 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e0ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4610      	mov	r0, r2
 800e0d4:	f7fb feec 	bl	8009eb0 <move_window>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				if (res == FR_OK) {
 800e0de:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d13c      	bne.n	800e160 <f_sync+0x26c>
					dir = fp->dir_ptr;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0ea:	667b      	str	r3, [r7, #100]	@ 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e0ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0ee:	330b      	adds	r3, #11
 800e0f0:	781a      	ldrb	r2, [r3, #0]
 800e0f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0f4:	330b      	adds	r3, #11
 800e0f6:	f042 0220 	orr.w	r2, r2, #32
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6818      	ldr	r0, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	461a      	mov	r2, r3
 800e108:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e10a:	f7fc ff53 	bl	800afb4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e10e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e110:	f103 001c 	add.w	r0, r3, #28
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e11a:	4613      	mov	r3, r2
 800e11c:	4619      	mov	r1, r3
 800e11e:	f7fb fbb4 	bl	800988a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e124:	3316      	adds	r3, #22
 800e126:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fb fbae 	bl	800988a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e12e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e130:	3312      	adds	r3, #18
 800e132:	2100      	movs	r1, #0
 800e134:	4618      	mov	r0, r3
 800e136:	f7fb fb8d 	bl	8009854 <st_word>
					fs->wflag = 1;
 800e13a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e13c:	2201      	movs	r2, #1
 800e13e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e142:	4618      	mov	r0, r3
 800e144:	f7fb fee2 	bl	8009f0c <sync_fs>
 800e148:	4603      	mov	r3, r0
 800e14a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e162:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800e166:	4611      	mov	r1, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fb fcd6 	bl	8009b1a <unlock_fs>
 800e16e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800e172:	4618      	mov	r0, r3
 800e174:	3770      	adds	r7, #112	@ 0x70
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}

0800e17a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e17a:	b580      	push	{r7, lr}
 800e17c:	b084      	sub	sp, #16
 800e17e:	af00      	add	r7, sp, #0
 800e180:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f7ff feb6 	bl	800def4 <f_sync>
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e18c:	7bfb      	ldrb	r3, [r7, #15]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d11d      	bne.n	800e1ce <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f107 0208 	add.w	r2, r7, #8
 800e198:	4611      	mov	r1, r2
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe ff3c 	bl	800d018 <validate>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d111      	bne.n	800e1ce <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fb fdda 	bl	8009d68 <dec_lock>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e1b8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d102      	bne.n	800e1c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7fb fca6 	bl	8009b1a <unlock_fs>
#endif
		}
	}
	return res;
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e1d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1dc:	b0ba      	sub	sp, #232	@ 0xe8
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 800e1e4:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e1e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e1ec:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	4610      	mov	r0, r2
 800e1f4:	f7fe ff10 	bl	800d018 <validate>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e1fe:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e202:	2b00      	cmp	r3, #0
 800e204:	d105      	bne.n	800e212 <f_lseek+0x3a>
 800e206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e20a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e20e:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800e212:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e216:	2b00      	cmp	r3, #0
 800e218:	d111      	bne.n	800e23e <f_lseek+0x66>
 800e21a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b04      	cmp	r3, #4
 800e222:	d10c      	bne.n	800e23e <f_lseek+0x66>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e224:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800e228:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e22c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e22e:	f04f 32ff 	mov.w	r2, #4294967295
 800e232:	4619      	mov	r1, r3
 800e234:	f7fc fa97 	bl	800a766 <fill_last_frag>
 800e238:	4603      	mov	r3, r0
 800e23a:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e23e:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <f_lseek+0x84>
 800e246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e24a:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800e24e:	4611      	mov	r1, r2
 800e250:	4618      	mov	r0, r3
 800e252:	f7fb fc62 	bl	8009b1a <unlock_fs>
 800e256:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 800e25a:	e3fb      	b.n	800ea54 <f_lseek+0x87c>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e25c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e262:	2b00      	cmp	r3, #0
 800e264:	f000 8170 	beq.w	800e548 <f_lseek+0x370>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e268:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e270:	bf08      	it	eq
 800e272:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800e276:	f040 8093 	bne.w	800e3a0 <f_lseek+0x1c8>
			tbl = fp->cltbl;
 800e27a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e27e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e280:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e284:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e288:	1d1a      	adds	r2, r3, #4
 800e28a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e294:	2302      	movs	r3, #2
 800e296:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e29a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
			if (cl) {
 800e2a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d064      	beq.n	800e376 <f_lseek+0x19e>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e2ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e2ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e2be:	3302      	adds	r3, #2
 800e2c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
					do {
						pcl = cl; ncl++;
 800e2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e2cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
						cl = get_fat(&fp->obj, cl);
 800e2d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2da:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fb fea4 	bl	800a02c <get_fat>
 800e2e4:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e2e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d80c      	bhi.n	800e30a <f_lseek+0x132>
 800e2f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e2fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e2fe:	2102      	movs	r1, #2
 800e300:	4618      	mov	r0, r3
 800e302:	f7fb fc0a 	bl	8009b1a <unlock_fs>
 800e306:	2302      	movs	r3, #2
 800e308:	e3a4      	b.n	800ea54 <f_lseek+0x87c>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e30a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e312:	d10c      	bne.n	800e32e <f_lseek+0x156>
 800e314:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e31e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e322:	2101      	movs	r1, #1
 800e324:	4618      	mov	r0, r3
 800e326:	f7fb fbf8 	bl	8009b1a <unlock_fs>
 800e32a:	2301      	movs	r3, #1
 800e32c:	e392      	b.n	800ea54 <f_lseek+0x87c>
					} while (cl == pcl + 1);
 800e32e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e332:	3301      	adds	r3, #1
 800e334:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800e338:	429a      	cmp	r2, r3
 800e33a:	d0c3      	beq.n	800e2c4 <f_lseek+0xec>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e33c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e344:	429a      	cmp	r2, r3
 800e346:	d80f      	bhi.n	800e368 <f_lseek+0x190>
						*tbl++ = ncl; *tbl++ = tcl;
 800e348:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e34c:	1d1a      	adds	r2, r3, #4
 800e34e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e352:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e356:	601a      	str	r2, [r3, #0]
 800e358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e35c:	1d1a      	adds	r2, r3, #4
 800e35e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800e362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e366:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e368:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e36e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800e372:	429a      	cmp	r2, r3
 800e374:	d39a      	bcc.n	800e2ac <f_lseek+0xd4>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e37a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e37c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e380:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d804      	bhi.n	800e398 <f_lseek+0x1c0>
				*tbl = 0;		/* Terminate table */
 800e38e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]
 800e396:	e353      	b.n	800ea40 <f_lseek+0x868>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e398:	2311      	movs	r3, #17
 800e39a:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 800e39e:	e34f      	b.n	800ea40 <f_lseek+0x868>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e3a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e3a8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e3ac:	4290      	cmp	r0, r2
 800e3ae:	eb71 0303 	sbcs.w	r3, r1, r3
 800e3b2:	d205      	bcs.n	800e3c0 <f_lseek+0x1e8>
 800e3b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e3bc:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
			fp->fptr = ofs;				/* Set file pointer */
 800e3c0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e3c4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e3c8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			if (ofs) {
 800e3cc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	f000 8335 	beq.w	800ea40 <f_lseek+0x868>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e3d6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e3da:	f112 38ff 	adds.w	r8, r2, #4294967295
 800e3de:	f143 39ff 	adc.w	r9, r3, #4294967295
 800e3e2:	4642      	mov	r2, r8
 800e3e4:	464b      	mov	r3, r9
 800e3e6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800e3ea:	f7fc fba2 	bl	800ab32 <clmt_clust>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3f4:	641a      	str	r2, [r3, #64]	@ 0x40
				dsc = clust2sect(fs, fp->clust);
 800e3f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e3fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e400:	4619      	mov	r1, r3
 800e402:	4610      	mov	r0, r2
 800e404:	f7fb fdf2 	bl	8009fec <clust2sect>
 800e408:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e40c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e410:	2b00      	cmp	r3, #0
 800e412:	d10c      	bne.n	800e42e <f_lseek+0x256>
 800e414:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e418:	2202      	movs	r2, #2
 800e41a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e41e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e422:	2102      	movs	r1, #2
 800e424:	4618      	mov	r0, r3
 800e426:	f7fb fb78 	bl	8009b1a <unlock_fs>
 800e42a:	2302      	movs	r3, #2
 800e42c:	e312      	b.n	800ea54 <f_lseek+0x87c>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e42e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e432:	1e54      	subs	r4, r2, #1
 800e434:	f143 35ff 	adc.w	r5, r3, #4294967295
 800e438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e43c:	899b      	ldrh	r3, [r3, #12]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	2200      	movs	r2, #0
 800e442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e44a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800e44e:	4620      	mov	r0, r4
 800e450:	4629      	mov	r1, r5
 800e452:	f7f2 fbab 	bl	8000bac <__aeabi_uldivmod>
 800e456:	4602      	mov	r2, r0
 800e458:	460b      	mov	r3, r1
 800e45a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e45e:	895b      	ldrh	r3, [r3, #10]
 800e460:	3b01      	subs	r3, #1
 800e462:	4013      	ands	r3, r2
 800e464:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e468:	4413      	add	r3, r2
 800e46a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e46e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e472:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e47a:	899b      	ldrh	r3, [r3, #12]
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	2200      	movs	r2, #0
 800e480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e484:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e488:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e48c:	f7f2 fb8e 	bl	8000bac <__aeabi_uldivmod>
 800e490:	4313      	orrs	r3, r2
 800e492:	f000 82d5 	beq.w	800ea40 <f_lseek+0x868>
 800e496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e49a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e49c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	f000 82cd 	beq.w	800ea40 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e4a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4ae:	b25b      	sxtb	r3, r3
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	da27      	bge.n	800e504 <f_lseek+0x32c>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4b8:	7858      	ldrb	r0, [r3, #1]
 800e4ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4be:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e4c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	f7fb f86f 	bl	80095ac <disk_write>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d00c      	beq.n	800e4ee <f_lseek+0x316>
 800e4d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4d8:	2201      	movs	r2, #1
 800e4da:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e4de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e4e2:	2101      	movs	r1, #1
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7fb fb18 	bl	8009b1a <unlock_fs>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e2b2      	b.n	800ea54 <f_lseek+0x87c>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e4ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e4f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e4f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e500:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e508:	7858      	ldrb	r0, [r3, #1]
 800e50a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e50e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e512:	2301      	movs	r3, #1
 800e514:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e518:	f7fb f828 	bl	800956c <disk_read>
 800e51c:	4603      	mov	r3, r0
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00c      	beq.n	800e53c <f_lseek+0x364>
 800e522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e526:	2201      	movs	r2, #1
 800e528:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e52c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e530:	2101      	movs	r1, #1
 800e532:	4618      	mov	r0, r3
 800e534:	f7fb faf1 	bl	8009b1a <unlock_fs>
 800e538:	2301      	movs	r3, #1
 800e53a:	e28b      	b.n	800ea54 <f_lseek+0x87c>
#endif
					fp->sect = dsc;
 800e53c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e540:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e544:	645a      	str	r2, [r3, #68]	@ 0x44
 800e546:	e27b      	b.n	800ea40 <f_lseek+0x868>
#endif

	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
 800e548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	2b04      	cmp	r3, #4
 800e550:	d009      	beq.n	800e566 <f_lseek+0x38e>
 800e552:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e556:	2b01      	cmp	r3, #1
 800e558:	d305      	bcc.n	800e566 <f_lseek+0x38e>
 800e55a:	f04f 32ff 	mov.w	r2, #4294967295
 800e55e:	f04f 0300 	mov.w	r3, #0
 800e562:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e56a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e56e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e572:	4290      	cmp	r0, r2
 800e574:	eb71 0303 	sbcs.w	r3, r1, r3
 800e578:	d20d      	bcs.n	800e596 <f_lseek+0x3be>
 800e57a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e57e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e582:	f003 0302 	and.w	r3, r3, #2
 800e586:	2b00      	cmp	r3, #0
 800e588:	d105      	bne.n	800e596 <f_lseek+0x3be>
			ofs = fp->obj.objsize;
 800e58a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e58e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e592:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
		}
		ifptr = fp->fptr;
 800e596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e59a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e59e:	e9c7 2330 	strd	r2, r3, [r7, #192]	@ 0xc0
		fp->fptr = nsect = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e5a8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e5ac:	f04f 0200 	mov.w	r2, #0
 800e5b0:	f04f 0300 	mov.w	r3, #0
 800e5b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		if (ofs) {
 800e5b8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	f000 81b8 	beq.w	800e932 <f_lseek+0x75a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e5c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5c6:	895b      	ldrh	r3, [r3, #10]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e5ce:	899b      	ldrh	r3, [r3, #12]
 800e5d0:	fb02 f303 	mul.w	r3, r2, r3
 800e5d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			if (ifptr > 0 &&
 800e5d8:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	d069      	beq.n	800e6b4 <f_lseek+0x4dc>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e5e0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e5e4:	1e51      	subs	r1, r2, #1
 800e5e6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800e5ea:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e5ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e5f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e5fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800e5fc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800e600:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e604:	f7f2 fad2 	bl	8000bac <__aeabi_uldivmod>
 800e608:	4602      	mov	r2, r0
 800e60a:	460b      	mov	r3, r1
 800e60c:	4614      	mov	r4, r2
 800e60e:	461d      	mov	r5, r3
 800e610:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e614:	1e51      	subs	r1, r2, #1
 800e616:	6739      	str	r1, [r7, #112]	@ 0x70
 800e618:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e61c:	677b      	str	r3, [r7, #116]	@ 0x74
 800e61e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e622:	2200      	movs	r2, #0
 800e624:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e626:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e628:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800e62c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800e630:	f7f2 fabc 	bl	8000bac <__aeabi_uldivmod>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
			if (ifptr > 0 &&
 800e638:	4294      	cmp	r4, r2
 800e63a:	eb75 0303 	sbcs.w	r3, r5, r3
 800e63e:	d339      	bcc.n	800e6b4 <f_lseek+0x4dc>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e640:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 800e644:	1e51      	subs	r1, r2, #1
 800e646:	6639      	str	r1, [r7, #96]	@ 0x60
 800e648:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e64c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e64e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e652:	3b01      	subs	r3, #1
 800e654:	2200      	movs	r2, #0
 800e656:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e658:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800e65a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e65e:	460b      	mov	r3, r1
 800e660:	ea6f 0a03 	mvn.w	sl, r3
 800e664:	4613      	mov	r3, r2
 800e666:	ea6f 0b03 	mvn.w	fp, r3
 800e66a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e66e:	460b      	mov	r3, r1
 800e670:	ea03 030a 	and.w	r3, r3, sl
 800e674:	653b      	str	r3, [r7, #80]	@ 0x50
 800e676:	4613      	mov	r3, r2
 800e678:	ea03 030b 	and.w	r3, r3, fp
 800e67c:	657b      	str	r3, [r7, #84]	@ 0x54
 800e67e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e682:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e686:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				ofs -= fp->fptr;
 800e68a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e68e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e692:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e696:	1a14      	subs	r4, r2, r0
 800e698:	60bc      	str	r4, [r7, #8]
 800e69a:	eb63 0301 	sbc.w	r3, r3, r1
 800e69e:	60fb      	str	r3, [r7, #12]
 800e6a0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e6a4:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
				clst = fp->clust;
 800e6a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e6b2:	e03d      	b.n	800e730 <f_lseek+0x558>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e6b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d12f      	bne.n	800e726 <f_lseek+0x54e>
					clst = create_chain(&fp->obj, 0);
 800e6c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6ca:	2100      	movs	r1, #0
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fc f92f 	bl	800a930 <create_chain>
 800e6d2:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d10c      	bne.n	800e6f8 <f_lseek+0x520>
 800e6de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e6e2:	2202      	movs	r2, #2
 800e6e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e6e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e6ec:	2102      	movs	r1, #2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fb fa13 	bl	8009b1a <unlock_fs>
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	e1ad      	b.n	800ea54 <f_lseek+0x87c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e6f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e700:	d10c      	bne.n	800e71c <f_lseek+0x544>
 800e702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e706:	2201      	movs	r2, #1
 800e708:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e70c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e710:	2101      	movs	r1, #1
 800e712:	4618      	mov	r0, r3
 800e714:	f7fb fa01 	bl	8009b1a <unlock_fs>
 800e718:	2301      	movs	r3, #1
 800e71a:	e19b      	b.n	800ea54 <f_lseek+0x87c>
					fp->obj.sclust = clst;
 800e71c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e724:	6093      	str	r3, [r2, #8]
				}
#endif
				fp->clust = clst;
 800e726:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e72e:	6413      	str	r3, [r2, #64]	@ 0x40
			}
			if (clst != 0) {
 800e730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e734:	2b00      	cmp	r3, #0
 800e736:	f000 80fc 	beq.w	800e932 <f_lseek+0x75a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e73a:	e09c      	b.n	800e876 <f_lseek+0x69e>
					ofs -= bcs; fp->fptr += bcs;
 800e73c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e740:	2200      	movs	r2, #0
 800e742:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e744:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e746:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e74a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800e74e:	4621      	mov	r1, r4
 800e750:	1a51      	subs	r1, r2, r1
 800e752:	6039      	str	r1, [r7, #0]
 800e754:	4629      	mov	r1, r5
 800e756:	eb63 0301 	sbc.w	r3, r3, r1
 800e75a:	607b      	str	r3, [r7, #4]
 800e75c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e760:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
 800e764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e768:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e76c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 800e770:	2000      	movs	r0, #0
 800e772:	6439      	str	r1, [r7, #64]	@ 0x40
 800e774:	6478      	str	r0, [r7, #68]	@ 0x44
 800e776:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e77a:	4621      	mov	r1, r4
 800e77c:	1851      	adds	r1, r2, r1
 800e77e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800e780:	4629      	mov	r1, r5
 800e782:	414b      	adcs	r3, r1
 800e784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e78a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e78e:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e796:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e79a:	f003 0302 	and.w	r3, r3, #2
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d031      	beq.n	800e806 <f_lseek+0x62e>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800e7a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e7aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e7b2:	4282      	cmp	r2, r0
 800e7b4:	418b      	sbcs	r3, r1
 800e7b6:	d212      	bcs.n	800e7de <f_lseek+0x606>
							fp->obj.objsize = fp->fptr;
 800e7b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7bc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e7c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7c4:	e9c3 0104 	strd	r0, r1, [r3, #16]
							fp->flag |= FA_MODIFIED;
 800e7c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e7d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e7da:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e7de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7e2:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fc f8a2 	bl	800a930 <create_chain>
 800e7ec:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10f      	bne.n	800e818 <f_lseek+0x640>
							ofs = 0; break;
 800e7f8:	f04f 0200 	mov.w	r2, #0
 800e7fc:	f04f 0300 	mov.w	r3, #0
 800e800:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 800e804:	e047      	b.n	800e896 <f_lseek+0x6be>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e806:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e80a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fb fc0c 	bl	800a02c <get_fat>
 800e814:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e820:	d10c      	bne.n	800e83c <f_lseek+0x664>
 800e822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e826:	2201      	movs	r2, #1
 800e828:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e82c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e830:	2101      	movs	r1, #1
 800e832:	4618      	mov	r0, r3
 800e834:	f7fb f971 	bl	8009b1a <unlock_fs>
 800e838:	2301      	movs	r3, #1
 800e83a:	e10b      	b.n	800ea54 <f_lseek+0x87c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e83c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e840:	2b01      	cmp	r3, #1
 800e842:	d906      	bls.n	800e852 <f_lseek+0x67a>
 800e844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e84a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e84e:	4293      	cmp	r3, r2
 800e850:	d30c      	bcc.n	800e86c <f_lseek+0x694>
 800e852:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e856:	2202      	movs	r2, #2
 800e858:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e85c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e860:	2102      	movs	r1, #2
 800e862:	4618      	mov	r0, r3
 800e864:	f7fb f959 	bl	8009b1a <unlock_fs>
 800e868:	2302      	movs	r3, #2
 800e86a:	e0f3      	b.n	800ea54 <f_lseek+0x87c>
					fp->clust = clst;
 800e86c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e874:	6413      	str	r3, [r2, #64]	@ 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800e876:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e87a:	2200      	movs	r2, #0
 800e87c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e87e:	637a      	str	r2, [r7, #52]	@ 0x34
 800e880:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e884:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e888:	4621      	mov	r1, r4
 800e88a:	4291      	cmp	r1, r2
 800e88c:	4629      	mov	r1, r5
 800e88e:	eb71 0303 	sbcs.w	r3, r1, r3
 800e892:	f4ff af53 	bcc.w	800e73c <f_lseek+0x564>
				}
				fp->fptr += ofs;
 800e896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e89a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e89e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e8a2:	1884      	adds	r4, r0, r2
 800e8a4:	62bc      	str	r4, [r7, #40]	@ 0x28
 800e8a6:	eb41 0303 	adc.w	r3, r1, r3
 800e8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e8b4:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
				if (ofs % SS(fs)) {
 800e8b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8bc:	899b      	ldrh	r3, [r3, #12]
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	623b      	str	r3, [r7, #32]
 800e8c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800e8c6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e8ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e8ce:	f7f2 f96d 	bl	8000bac <__aeabi_uldivmod>
 800e8d2:	4313      	orrs	r3, r2
 800e8d4:	d02d      	beq.n	800e932 <f_lseek+0x75a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e8d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8da:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7fb fb84 	bl	8009fec <clust2sect>
 800e8e4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e8e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d10c      	bne.n	800e90a <f_lseek+0x732>
 800e8f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e8f4:	2202      	movs	r2, #2
 800e8f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e8fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e8fe:	2102      	movs	r1, #2
 800e900:	4618      	mov	r0, r3
 800e902:	f7fb f90a 	bl	8009b1a <unlock_fs>
 800e906:	2302      	movs	r3, #2
 800e908:	e0a4      	b.n	800ea54 <f_lseek+0x87c>
					nsect += (DWORD)(ofs / SS(fs));
 800e90a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e90e:	899b      	ldrh	r3, [r3, #12]
 800e910:	b29b      	uxth	r3, r3
 800e912:	2200      	movs	r2, #0
 800e914:	61bb      	str	r3, [r7, #24]
 800e916:	61fa      	str	r2, [r7, #28]
 800e918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e91c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e920:	f7f2 f944 	bl	8000bac <__aeabi_uldivmod>
 800e924:	4602      	mov	r2, r0
 800e926:	460b      	mov	r3, r1
 800e928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e92c:	4413      	add	r3, r2
 800e92e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e936:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e93a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e93e:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800e942:	4290      	cmp	r0, r2
 800e944:	eb71 0303 	sbcs.w	r3, r1, r3
 800e948:	d212      	bcs.n	800e970 <f_lseek+0x798>
			fp->obj.objsize = fp->fptr;
 800e94a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e94e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e956:	e9c1 2304 	strd	r2, r3, [r1, #16]
			fp->flag |= FA_MODIFIED;
 800e95a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e95e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e966:	b2da      	uxtb	r2, r3
 800e968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e96c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e970:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e974:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e97c:	899b      	ldrh	r3, [r3, #12]
 800e97e:	b29b      	uxth	r3, r3
 800e980:	2200      	movs	r2, #0
 800e982:	613b      	str	r3, [r7, #16]
 800e984:	617a      	str	r2, [r7, #20]
 800e986:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e98a:	f7f2 f90f 	bl	8000bac <__aeabi_uldivmod>
 800e98e:	4313      	orrs	r3, r2
 800e990:	d056      	beq.n	800ea40 <f_lseek+0x868>
 800e992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e998:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d04f      	beq.n	800ea40 <f_lseek+0x868>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e9a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9a8:	b25b      	sxtb	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	da27      	bge.n	800e9fe <f_lseek+0x826>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e9b2:	7858      	ldrb	r0, [r3, #1]
 800e9b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9b8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e9bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	f7fa fdf2 	bl	80095ac <disk_write>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00c      	beq.n	800e9e8 <f_lseek+0x810>
 800e9ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e9d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e9dc:	2101      	movs	r1, #1
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fb f89b 	bl	8009b1a <unlock_fs>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e035      	b.n	800ea54 <f_lseek+0x87c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e9e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e9f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e9fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e9fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea02:	7858      	ldrb	r0, [r3, #1]
 800ea04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea08:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ea12:	f7fa fdab 	bl	800956c <disk_read>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00c      	beq.n	800ea36 <f_lseek+0x85e>
 800ea1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea20:	2201      	movs	r2, #1
 800ea22:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800ea26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea2a:	2101      	movs	r1, #1
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fb f874 	bl	8009b1a <unlock_fs>
 800ea32:	2301      	movs	r3, #1
 800ea34:	e00e      	b.n	800ea54 <f_lseek+0x87c>
#endif
			fp->sect = nsect;
 800ea36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ea3e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
	}

	LEAVE_FF(fs, res);
 800ea40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea44:	f897 20e7 	ldrb.w	r2, [r7, #231]	@ 0xe7
 800ea48:	4611      	mov	r1, r2
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fb f865 	bl	8009b1a <unlock_fs>
 800ea50:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	37e8      	adds	r7, #232	@ 0xe8
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ea5e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b098      	sub	sp, #96	@ 0x60
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ea68:	f107 0108 	add.w	r1, r7, #8
 800ea6c:	1d3b      	adds	r3, r7, #4
 800ea6e:	2200      	movs	r2, #0
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fd ff39 	bl	800c8e8 <find_volume>
 800ea76:	4603      	mov	r3, r0
 800ea78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800ea7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d139      	bne.n	800eaf8 <f_stat+0x9a>
		INIT_NAMBUF(dj.obj.fs);
 800ea84:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800ea88:	f000 faf6 	bl	800f078 <ff_memalloc>
 800ea8c:	65b8      	str	r0, [r7, #88]	@ 0x58
 800ea8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d106      	bne.n	800eaa2 <f_stat+0x44>
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	2111      	movs	r1, #17
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fb f83e 	bl	8009b1a <unlock_fs>
 800ea9e:	2311      	movs	r3, #17
 800eaa0:	e033      	b.n	800eb0a <f_stat+0xac>
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eaa6:	611a      	str	r2, [r3, #16]
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800eaac:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800eab0:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	f107 0308 	add.w	r3, r7, #8
 800eab8:	4611      	mov	r1, r2
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fd fdbe 	bl	800c63c <follow_path>
 800eac0:	4603      	mov	r3, r0
 800eac2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800eac6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d111      	bne.n	800eaf2 <f_stat+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800eace:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800ead2:	b25b      	sxtb	r3, r3
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	da03      	bge.n	800eae0 <f_stat+0x82>
				res = FR_INVALID_NAME;
 800ead8:	2306      	movs	r3, #6
 800eada:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eade:	e008      	b.n	800eaf2 <f_stat+0x94>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d005      	beq.n	800eaf2 <f_stat+0x94>
 800eae6:	f107 0308 	add.w	r3, r7, #8
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fd faff 	bl	800c0f0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800eaf2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eaf4:	f000 facc 	bl	800f090 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800eafe:	4611      	mov	r1, r2
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fb f80a 	bl	8009b1a <unlock_fs>
 800eb06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3760      	adds	r7, #96	@ 0x60
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b0bc      	sub	sp, #240	@ 0xf0
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eb20:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800eb24:	1d3b      	adds	r3, r7, #4
 800eb26:	2202      	movs	r2, #2
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fd fedd 	bl	800c8e8 <find_volume>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
	dj.obj.fs = fs;
 800eb34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	if (res == FR_OK) {
 800eb3a:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f040 80e2 	bne.w	800ed08 <f_unlink+0x1f6>
		INIT_NAMBUF(fs);
 800eb44:	f44f 608c 	mov.w	r0, #1120	@ 0x460
 800eb48:	f000 fa96 	bl	800f078 <ff_memalloc>
 800eb4c:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
 800eb50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d106      	bne.n	800eb66 <f_unlink+0x54>
 800eb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb5a:	2111      	movs	r1, #17
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7fa ffdc 	bl	8009b1a <unlock_fs>
 800eb62:	2311      	movs	r3, #17
 800eb64:	e0d9      	b.n	800ed1a <f_unlink+0x208>
 800eb66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb6c:	611a      	str	r2, [r3, #16]
 800eb6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb70:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800eb74:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800eb78:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);		/* Follow the file path */
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800eb80:	4611      	mov	r1, r2
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fd fd5a 	bl	800c63c <follow_path>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800eb8e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d108      	bne.n	800eba8 <f_unlink+0x96>
 800eb96:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800eb9a:	2102      	movs	r1, #2
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fa ffd7 	bl	8009b50 <chk_lock>
 800eba2:	4603      	mov	r3, r0
 800eba4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800eba8:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f040 80a7 	bne.w	800ed00 <f_unlink+0x1ee>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ebb2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800ebb6:	b25b      	sxtb	r3, r3
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	da03      	bge.n	800ebc4 <f_unlink+0xb2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ebbc:	2306      	movs	r3, #6
 800ebbe:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 800ebc2:	e008      	b.n	800ebd6 <f_unlink+0xc4>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ebc4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d002      	beq.n	800ebd6 <f_unlink+0xc4>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ebd0:	2307      	movs	r3, #7
 800ebd2:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				}
			}
			if (res == FR_OK) {
 800ebd6:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d166      	bne.n	800ecac <f_unlink+0x19a>
#if _FS_EXFAT
				obj.fs = fs;
 800ebde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe0:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 800ebe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	2b04      	cmp	r3, #4
 800ebe8:	d11d      	bne.n	800ec26 <f_unlink+0x114>
					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ebea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	3334      	adds	r3, #52	@ 0x34
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fa fd31 	bl	8009658 <ld_dword>
 800ebf6:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
 800ebfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ebfe:	613b      	str	r3, [r7, #16]
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ec00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	3338      	adds	r3, #56	@ 0x38
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fa fd49 	bl	800969e <ld_qword>
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	460b      	mov	r3, r1
 800ec10:	e9c7 2306 	strd	r2, r3, [r7, #24]
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ec14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec16:	695b      	ldr	r3, [r3, #20]
 800ec18:	3321      	adds	r3, #33	@ 0x21
 800ec1a:	781b      	ldrb	r3, [r3, #0]
 800ec1c:	f003 0302 	and.w	r3, r3, #2
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	73fb      	strb	r3, [r7, #15]
 800ec24:	e008      	b.n	800ec38 <f_unlink+0x126>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ec26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec28:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800ec2c:	4611      	mov	r1, r2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fc f9a1 	bl	800af76 <ld_clust>
 800ec34:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ec38:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800ec3c:	f003 0310 	and.w	r3, r3, #16
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d033      	beq.n	800ecac <f_unlink+0x19a>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ec44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec46:	643b      	str	r3, [r7, #64]	@ 0x40
						sdj.obj.sclust = dclst;
 800ec48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ec4c:	64bb      	str	r3, [r7, #72]	@ 0x48
#if _FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 800ec4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b04      	cmp	r3, #4
 800ec54:	d106      	bne.n	800ec64 <f_unlink+0x152>
							sdj.obj.objsize = obj.objsize;
 800ec56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ec5a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
							sdj.obj.stat = obj.stat;
 800ec5e:	7bfb      	ldrb	r3, [r7, #15]
 800ec60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ec64:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7fb ffad 	bl	800abca <dir_sdi>
 800ec70:	4603      	mov	r3, r0
 800ec72:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						if (res == FR_OK) {
 800ec76:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d116      	bne.n	800ecac <f_unlink+0x19a>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ec7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ec82:	2100      	movs	r1, #0
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fc fe3f 	bl	800b908 <dir_read>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ec90:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d102      	bne.n	800ec9e <f_unlink+0x18c>
 800ec98:	2307      	movs	r3, #7
 800ec9a:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ec9e:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800eca2:	2b04      	cmp	r3, #4
 800eca4:	d102      	bne.n	800ecac <f_unlink+0x19a>
 800eca6:	2300      	movs	r3, #0
 800eca8:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 800ecac:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d125      	bne.n	800ed00 <f_unlink+0x1ee>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ecb4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fd f9c1 	bl	800c040 <dir_remove>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ecc4:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10e      	bne.n	800ecea <f_unlink+0x1d8>
 800eccc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00a      	beq.n	800ecea <f_unlink+0x1d8>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 800ecd4:	f107 0308 	add.w	r3, r7, #8
 800ecd8:	2200      	movs	r2, #0
 800ecda:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fb fd72 	bl	800a7c8 <remove_chain>
 800ece4:	4603      	mov	r3, r0
 800ece6:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ecea:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d106      	bne.n	800ed00 <f_unlink+0x1ee>
 800ecf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7fb f909 	bl	8009f0c <sync_fs>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
			}
		}
		FREE_NAMBUF();
 800ed00:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 800ed04:	f000 f9c4 	bl	800f090 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 800ed08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed0a:	f897 20ef 	ldrb.w	r2, [r7, #239]	@ 0xef
 800ed0e:	4611      	mov	r1, r2
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fa ff02 	bl	8009b1a <unlock_fs>
 800ed16:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	37f0      	adds	r7, #240	@ 0xf0
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b088      	sub	sp, #32
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	60f8      	str	r0, [r7, #12]
 800ed2a:	60b9      	str	r1, [r7, #8]
 800ed2c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ed36:	e01c      	b.n	800ed72 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800ed38:	f107 0310 	add.w	r3, r7, #16
 800ed3c:	f107 0114 	add.w	r1, r7, #20
 800ed40:	2201      	movs	r2, #1
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f7fe fd09 	bl	800d75a <f_read>
		if (rc != 1) break;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d117      	bne.n	800ed7e <f_gets+0x5c>
		c = s[0];
 800ed4e:	7d3b      	ldrb	r3, [r7, #20]
 800ed50:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
 800ed54:	2b0d      	cmp	r3, #13
 800ed56:	d00b      	beq.n	800ed70 <f_gets+0x4e>
		*p++ = c;
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	61ba      	str	r2, [r7, #24]
 800ed5e:	7dfa      	ldrb	r2, [r7, #23]
 800ed60:	701a      	strb	r2, [r3, #0]
		n++;
 800ed62:	69fb      	ldr	r3, [r7, #28]
 800ed64:	3301      	adds	r3, #1
 800ed66:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
 800ed6a:	2b0a      	cmp	r3, #10
 800ed6c:	d009      	beq.n	800ed82 <f_gets+0x60>
 800ed6e:	e000      	b.n	800ed72 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800ed70:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	3b01      	subs	r3, #1
 800ed76:	69fa      	ldr	r2, [r7, #28]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	dbdd      	blt.n	800ed38 <f_gets+0x16>
 800ed7c:	e002      	b.n	800ed84 <f_gets+0x62>
		if (rc != 1) break;
 800ed7e:	bf00      	nop
 800ed80:	e000      	b.n	800ed84 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800ed82:	bf00      	nop
	}
	*p = 0;
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	2200      	movs	r2, #0
 800ed88:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d001      	beq.n	800ed94 <f_gets+0x72>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	e000      	b.n	800ed96 <f_gets+0x74>
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3720      	adds	r7, #32
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
	...

0800eda0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	4613      	mov	r3, r2
 800edac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800edae:	2301      	movs	r3, #1
 800edb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800edb2:	2300      	movs	r3, #0
 800edb4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800edb6:	4b1f      	ldr	r3, [pc, #124]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800edb8:	7a5b      	ldrb	r3, [r3, #9]
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d131      	bne.n	800ee24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800edc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800edc2:	7a5b      	ldrb	r3, [r3, #9]
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	461a      	mov	r2, r3
 800edc8:	4b1a      	ldr	r3, [pc, #104]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800edca:	2100      	movs	r1, #0
 800edcc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800edce:	4b19      	ldr	r3, [pc, #100]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800edd0:	7a5b      	ldrb	r3, [r3, #9]
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	4a17      	ldr	r2, [pc, #92]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800edd6:	009b      	lsls	r3, r3, #2
 800edd8:	4413      	add	r3, r2
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800edde:	4b15      	ldr	r3, [pc, #84]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800ede0:	7a5b      	ldrb	r3, [r3, #9]
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	461a      	mov	r2, r3
 800ede6:	4b13      	ldr	r3, [pc, #76]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800ede8:	4413      	add	r3, r2
 800edea:	79fa      	ldrb	r2, [r7, #7]
 800edec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800edee:	4b11      	ldr	r3, [pc, #68]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800edf0:	7a5b      	ldrb	r3, [r3, #9]
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	1c5a      	adds	r2, r3, #1
 800edf6:	b2d1      	uxtb	r1, r2
 800edf8:	4a0e      	ldr	r2, [pc, #56]	@ (800ee34 <FATFS_LinkDriverEx+0x94>)
 800edfa:	7251      	strb	r1, [r2, #9]
 800edfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800edfe:	7dbb      	ldrb	r3, [r7, #22]
 800ee00:	3330      	adds	r3, #48	@ 0x30
 800ee02:	b2da      	uxtb	r2, r3
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	223a      	movs	r2, #58	@ 0x3a
 800ee0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	3302      	adds	r3, #2
 800ee14:	222f      	movs	r2, #47	@ 0x2f
 800ee16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	3303      	adds	r3, #3
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ee20:	2300      	movs	r3, #0
 800ee22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ee24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	371c      	adds	r7, #28
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	20002948 	.word	0x20002948

0800ee38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ee42:	2200      	movs	r2, #0
 800ee44:	6839      	ldr	r1, [r7, #0]
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f7ff ffaa 	bl	800eda0 <FATFS_LinkDriverEx>
 800ee4c:	4603      	mov	r3, r0
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3708      	adds	r7, #8
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
	...

0800ee58 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	4603      	mov	r3, r0
 800ee60:	6039      	str	r1, [r7, #0]
 800ee62:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ee64:	88fb      	ldrh	r3, [r7, #6]
 800ee66:	2b7f      	cmp	r3, #127	@ 0x7f
 800ee68:	d802      	bhi.n	800ee70 <ff_convert+0x18>
		c = chr;
 800ee6a:	88fb      	ldrh	r3, [r7, #6]
 800ee6c:	81fb      	strh	r3, [r7, #14]
 800ee6e:	e025      	b.n	800eebc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00b      	beq.n	800ee8e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ee76:	88fb      	ldrh	r3, [r7, #6]
 800ee78:	2bff      	cmp	r3, #255	@ 0xff
 800ee7a:	d805      	bhi.n	800ee88 <ff_convert+0x30>
 800ee7c:	88fb      	ldrh	r3, [r7, #6]
 800ee7e:	3b80      	subs	r3, #128	@ 0x80
 800ee80:	4a12      	ldr	r2, [pc, #72]	@ (800eecc <ff_convert+0x74>)
 800ee82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee86:	e000      	b.n	800ee8a <ff_convert+0x32>
 800ee88:	2300      	movs	r3, #0
 800ee8a:	81fb      	strh	r3, [r7, #14]
 800ee8c:	e016      	b.n	800eebc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ee8e:	2300      	movs	r3, #0
 800ee90:	81fb      	strh	r3, [r7, #14]
 800ee92:	e009      	b.n	800eea8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ee94:	89fb      	ldrh	r3, [r7, #14]
 800ee96:	4a0d      	ldr	r2, [pc, #52]	@ (800eecc <ff_convert+0x74>)
 800ee98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee9c:	88fa      	ldrh	r2, [r7, #6]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d006      	beq.n	800eeb0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800eea2:	89fb      	ldrh	r3, [r7, #14]
 800eea4:	3301      	adds	r3, #1
 800eea6:	81fb      	strh	r3, [r7, #14]
 800eea8:	89fb      	ldrh	r3, [r7, #14]
 800eeaa:	2b7f      	cmp	r3, #127	@ 0x7f
 800eeac:	d9f2      	bls.n	800ee94 <ff_convert+0x3c>
 800eeae:	e000      	b.n	800eeb2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800eeb0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800eeb2:	89fb      	ldrh	r3, [r7, #14]
 800eeb4:	3380      	adds	r3, #128	@ 0x80
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800eebc:	89fb      	ldrh	r3, [r7, #14]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3714      	adds	r7, #20
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	080185c4 	.word	0x080185c4

0800eed0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b087      	sub	sp, #28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4603      	mov	r3, r0
 800eed8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800eeda:	88fb      	ldrh	r3, [r7, #6]
 800eedc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eee0:	d201      	bcs.n	800eee6 <ff_wtoupper+0x16>
 800eee2:	4b3e      	ldr	r3, [pc, #248]	@ (800efdc <ff_wtoupper+0x10c>)
 800eee4:	e000      	b.n	800eee8 <ff_wtoupper+0x18>
 800eee6:	4b3e      	ldr	r3, [pc, #248]	@ (800efe0 <ff_wtoupper+0x110>)
 800eee8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	1c9a      	adds	r2, r3, #2
 800eeee:	617a      	str	r2, [r7, #20]
 800eef0:	881b      	ldrh	r3, [r3, #0]
 800eef2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eef4:	8a7b      	ldrh	r3, [r7, #18]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d068      	beq.n	800efcc <ff_wtoupper+0xfc>
 800eefa:	88fa      	ldrh	r2, [r7, #6]
 800eefc:	8a7b      	ldrh	r3, [r7, #18]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d364      	bcc.n	800efcc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	1c9a      	adds	r2, r3, #2
 800ef06:	617a      	str	r2, [r7, #20]
 800ef08:	881b      	ldrh	r3, [r3, #0]
 800ef0a:	823b      	strh	r3, [r7, #16]
 800ef0c:	8a3b      	ldrh	r3, [r7, #16]
 800ef0e:	0a1b      	lsrs	r3, r3, #8
 800ef10:	81fb      	strh	r3, [r7, #14]
 800ef12:	8a3b      	ldrh	r3, [r7, #16]
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ef18:	88fa      	ldrh	r2, [r7, #6]
 800ef1a:	8a79      	ldrh	r1, [r7, #18]
 800ef1c:	8a3b      	ldrh	r3, [r7, #16]
 800ef1e:	440b      	add	r3, r1
 800ef20:	429a      	cmp	r2, r3
 800ef22:	da49      	bge.n	800efb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ef24:	89fb      	ldrh	r3, [r7, #14]
 800ef26:	2b08      	cmp	r3, #8
 800ef28:	d84f      	bhi.n	800efca <ff_wtoupper+0xfa>
 800ef2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ef30 <ff_wtoupper+0x60>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800ef55 	.word	0x0800ef55
 800ef34:	0800ef67 	.word	0x0800ef67
 800ef38:	0800ef7d 	.word	0x0800ef7d
 800ef3c:	0800ef85 	.word	0x0800ef85
 800ef40:	0800ef8d 	.word	0x0800ef8d
 800ef44:	0800ef95 	.word	0x0800ef95
 800ef48:	0800ef9d 	.word	0x0800ef9d
 800ef4c:	0800efa5 	.word	0x0800efa5
 800ef50:	0800efad 	.word	0x0800efad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ef54:	88fa      	ldrh	r2, [r7, #6]
 800ef56:	8a7b      	ldrh	r3, [r7, #18]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	005b      	lsls	r3, r3, #1
 800ef5c:	697a      	ldr	r2, [r7, #20]
 800ef5e:	4413      	add	r3, r2
 800ef60:	881b      	ldrh	r3, [r3, #0]
 800ef62:	80fb      	strh	r3, [r7, #6]
 800ef64:	e027      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ef66:	88fa      	ldrh	r2, [r7, #6]
 800ef68:	8a7b      	ldrh	r3, [r7, #18]
 800ef6a:	1ad3      	subs	r3, r2, r3
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	88fa      	ldrh	r2, [r7, #6]
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	80fb      	strh	r3, [r7, #6]
 800ef7a:	e01c      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ef7c:	88fb      	ldrh	r3, [r7, #6]
 800ef7e:	3b10      	subs	r3, #16
 800ef80:	80fb      	strh	r3, [r7, #6]
 800ef82:	e018      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ef84:	88fb      	ldrh	r3, [r7, #6]
 800ef86:	3b20      	subs	r3, #32
 800ef88:	80fb      	strh	r3, [r7, #6]
 800ef8a:	e014      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ef8c:	88fb      	ldrh	r3, [r7, #6]
 800ef8e:	3b30      	subs	r3, #48	@ 0x30
 800ef90:	80fb      	strh	r3, [r7, #6]
 800ef92:	e010      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ef94:	88fb      	ldrh	r3, [r7, #6]
 800ef96:	3b1a      	subs	r3, #26
 800ef98:	80fb      	strh	r3, [r7, #6]
 800ef9a:	e00c      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ef9c:	88fb      	ldrh	r3, [r7, #6]
 800ef9e:	3308      	adds	r3, #8
 800efa0:	80fb      	strh	r3, [r7, #6]
 800efa2:	e008      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800efa4:	88fb      	ldrh	r3, [r7, #6]
 800efa6:	3b50      	subs	r3, #80	@ 0x50
 800efa8:	80fb      	strh	r3, [r7, #6]
 800efaa:	e004      	b.n	800efb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800efac:	88fb      	ldrh	r3, [r7, #6]
 800efae:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800efb2:	80fb      	strh	r3, [r7, #6]
 800efb4:	bf00      	nop
			}
			break;
 800efb6:	e008      	b.n	800efca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800efb8:	89fb      	ldrh	r3, [r7, #14]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d195      	bne.n	800eeea <ff_wtoupper+0x1a>
 800efbe:	8a3b      	ldrh	r3, [r7, #16]
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	697a      	ldr	r2, [r7, #20]
 800efc4:	4413      	add	r3, r2
 800efc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800efc8:	e78f      	b.n	800eeea <ff_wtoupper+0x1a>
			break;
 800efca:	bf00      	nop
	}

	return chr;
 800efcc:	88fb      	ldrh	r3, [r7, #6]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	371c      	adds	r7, #28
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	080186c4 	.word	0x080186c4
 800efe0:	080188b8 	.word	0x080188b8

0800efe4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	4603      	mov	r3, r0
 800efec:	6039      	str	r1, [r7, #0]
 800efee:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800eff0:	2300      	movs	r3, #0
 800eff2:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800eff4:	f107 0308 	add.w	r3, r7, #8
 800eff8:	2101      	movs	r1, #1
 800effa:	4618      	mov	r0, r3
 800effc:	f000 f865 	bl	800f0ca <osSemaphoreCreate>
 800f000:	4602      	mov	r2, r0
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	bf14      	ite	ne
 800f00e:	2301      	movne	r3, #1
 800f010:	2300      	moveq	r3, #0
 800f012:	b2db      	uxtb	r3, r3
 800f014:	60fb      	str	r3, [r7, #12]

    return ret;
 800f016:	68fb      	ldr	r3, [r7, #12]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b082      	sub	sp, #8
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 f8f1 	bl	800f210 <osSemaphoreDelete>
#endif
    return 1;
 800f02e:	2301      	movs	r3, #1
}
 800f030:	4618      	mov	r0, r3
 800f032:	3708      	adds	r7, #8
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f040:	2300      	movs	r3, #0
 800f042:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f044:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 f85d 	bl	800f108 <osSemaphoreWait>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d101      	bne.n	800f058 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f054:	2301      	movs	r3, #1
 800f056:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f058:	68fb      	ldr	r3, [r7, #12]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f062:	b580      	push	{r7, lr}
 800f064:	b082      	sub	sp, #8
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 f89a 	bl	800f1a4 <osSemaphoreRelease>
#endif
}
 800f070:	bf00      	nop
 800f072:	3708      	adds	r7, #8
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f002 f98b 	bl	801139c <pvPortMalloc>
 800f086:	4603      	mov	r3, r0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f002 fa4d 	bl	8011538 <vPortFree>
}
 800f09e:	bf00      	nop
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f0a6:	b480      	push	{r7}
 800f0a8:	b083      	sub	sp, #12
 800f0aa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0ac:	f3ef 8305 	mrs	r3, IPSR
 800f0b0:	607b      	str	r3, [r7, #4]
  return(result);
 800f0b2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	bf14      	ite	ne
 800f0b8:	2301      	movne	r3, #1
 800f0ba:	2300      	moveq	r3, #0
 800f0bc:	b2db      	uxtb	r3, r3
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	370c      	adds	r7, #12
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr

0800f0ca <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b084      	sub	sp, #16
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
 800f0d2:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d110      	bne.n	800f0fc <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800f0da:	2203      	movs	r2, #3
 800f0dc:	2100      	movs	r1, #0
 800f0de:	2001      	movs	r0, #1
 800f0e0:	f000 f9c8 	bl	800f474 <xQueueGenericCreate>
 800f0e4:	60f8      	str	r0, [r7, #12]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d005      	beq.n	800f0f8 <osSemaphoreCreate+0x2e>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	68f8      	ldr	r0, [r7, #12]
 800f0f4:	f000 fa14 	bl	800f520 <xQueueGenericSend>
    return sema;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	e000      	b.n	800f0fe <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800f0fc:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
	...

0800f108 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f112:	2300      	movs	r3, #0
 800f114:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d101      	bne.n	800f120 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f11c:	2380      	movs	r3, #128	@ 0x80
 800f11e:	e03a      	b.n	800f196 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f120:	2300      	movs	r3, #0
 800f122:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12a:	d103      	bne.n	800f134 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f12c:	f04f 33ff 	mov.w	r3, #4294967295
 800f130:	60fb      	str	r3, [r7, #12]
 800f132:	e009      	b.n	800f148 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d006      	beq.n	800f148 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <osSemaphoreWait+0x40>
      ticks = 1;
 800f144:	2301      	movs	r3, #1
 800f146:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f148:	f7ff ffad 	bl	800f0a6 <inHandlerMode>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d017      	beq.n	800f182 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f152:	f107 0308 	add.w	r3, r7, #8
 800f156:	461a      	mov	r2, r3
 800f158:	2100      	movs	r1, #0
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fd64 	bl	800fc28 <xQueueReceiveFromISR>
 800f160:	4603      	mov	r3, r0
 800f162:	2b01      	cmp	r3, #1
 800f164:	d001      	beq.n	800f16a <osSemaphoreWait+0x62>
      return osErrorOS;
 800f166:	23ff      	movs	r3, #255	@ 0xff
 800f168:	e015      	b.n	800f196 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d011      	beq.n	800f194 <osSemaphoreWait+0x8c>
 800f170:	4b0b      	ldr	r3, [pc, #44]	@ (800f1a0 <osSemaphoreWait+0x98>)
 800f172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f176:	601a      	str	r2, [r3, #0]
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	f3bf 8f6f 	isb	sy
 800f180:	e008      	b.n	800f194 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f182:	68f9      	ldr	r1, [r7, #12]
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fc3f 	bl	800fa08 <xQueueSemaphoreTake>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d001      	beq.n	800f194 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f190:	23ff      	movs	r3, #255	@ 0xff
 800f192:	e000      	b.n	800f196 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3710      	adds	r7, #16
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	e000ed04 	.word	0xe000ed04

0800f1a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f1b4:	f7ff ff77 	bl	800f0a6 <inHandlerMode>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d016      	beq.n	800f1ec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f1be:	f107 0308 	add.w	r3, r7, #8
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f000 faad 	bl	800f724 <xQueueGiveFromISR>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d001      	beq.n	800f1d4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f1d0:	23ff      	movs	r3, #255	@ 0xff
 800f1d2:	e017      	b.n	800f204 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d013      	beq.n	800f202 <osSemaphoreRelease+0x5e>
 800f1da:	4b0c      	ldr	r3, [pc, #48]	@ (800f20c <osSemaphoreRelease+0x68>)
 800f1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1e0:	601a      	str	r2, [r3, #0]
 800f1e2:	f3bf 8f4f 	dsb	sy
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	e00a      	b.n	800f202 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 f994 	bl	800f520 <xQueueGenericSend>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d001      	beq.n	800f202 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f1fe:	23ff      	movs	r3, #255	@ 0xff
 800f200:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f202:	68fb      	ldr	r3, [r7, #12]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	e000ed04 	.word	0xe000ed04

0800f210 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f218:	f7ff ff45 	bl	800f0a6 <inHandlerMode>
 800f21c:	4603      	mov	r3, r0
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f222:	2382      	movs	r3, #130	@ 0x82
 800f224:	e003      	b.n	800f22e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 fd80 	bl	800fd2c <vQueueDelete>

  return osOK; 
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3708      	adds	r7, #8
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f236:	b480      	push	{r7}
 800f238:	b083      	sub	sp, #12
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f103 0208 	add.w	r2, r3, #8
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f04f 32ff 	mov.w	r2, #4294967295
 800f24e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f103 0208 	add.w	r2, r3, #8
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f103 0208 	add.w	r2, r3, #8
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f26a:	bf00      	nop
 800f26c:	370c      	adds	r7, #12
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f276:	b480      	push	{r7}
 800f278:	b083      	sub	sp, #12
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f284:	bf00      	nop
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f290:	b480      	push	{r7}
 800f292:	b085      	sub	sp, #20
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	68fa      	ldr	r2, [r7, #12]
 800f2a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	689a      	ldr	r2, [r3, #8]
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	683a      	ldr	r2, [r7, #0]
 800f2ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	687a      	ldr	r2, [r7, #4]
 800f2c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	1c5a      	adds	r2, r3, #1
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	601a      	str	r2, [r3, #0]
}
 800f2cc:	bf00      	nop
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ee:	d103      	bne.n	800f2f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	60fb      	str	r3, [r7, #12]
 800f2f6:	e00c      	b.n	800f312 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	60fb      	str	r3, [r7, #12]
 800f2fe:	e002      	b.n	800f306 <vListInsert+0x2e>
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	60fb      	str	r3, [r7, #12]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	68ba      	ldr	r2, [r7, #8]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d2f6      	bcs.n	800f300 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	683a      	ldr	r2, [r7, #0]
 800f32c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	687a      	ldr	r2, [r7, #4]
 800f332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	1c5a      	adds	r2, r3, #1
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	601a      	str	r2, [r3, #0]
}
 800f33e:	bf00      	nop
 800f340:	3714      	adds	r7, #20
 800f342:	46bd      	mov	sp, r7
 800f344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f348:	4770      	bx	lr

0800f34a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f34a:	b480      	push	{r7}
 800f34c:	b085      	sub	sp, #20
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	685b      	ldr	r3, [r3, #4]
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	6892      	ldr	r2, [r2, #8]
 800f360:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	689b      	ldr	r3, [r3, #8]
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	6852      	ldr	r2, [r2, #4]
 800f36a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	687a      	ldr	r2, [r7, #4]
 800f372:	429a      	cmp	r2, r3
 800f374:	d103      	bne.n	800f37e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	689a      	ldr	r2, [r3, #8]
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	1e5a      	subs	r2, r3, #1
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3714      	adds	r7, #20
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
	...

0800f3a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d10b      	bne.n	800f3cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f3c6:	bf00      	nop
 800f3c8:	bf00      	nop
 800f3ca:	e7fd      	b.n	800f3c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f3cc:	f001 fec4 	bl	8011158 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3d8:	68f9      	ldr	r1, [r7, #12]
 800f3da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f3dc:	fb01 f303 	mul.w	r3, r1, r3
 800f3e0:	441a      	add	r2, r3
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	68f9      	ldr	r1, [r7, #12]
 800f400:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f402:	fb01 f303 	mul.w	r3, r1, r3
 800f406:	441a      	add	r2, r3
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	22ff      	movs	r2, #255	@ 0xff
 800f410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	22ff      	movs	r2, #255	@ 0xff
 800f418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d114      	bne.n	800f44c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	691b      	ldr	r3, [r3, #16]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d01a      	beq.n	800f460 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	3310      	adds	r3, #16
 800f42e:	4618      	mov	r0, r3
 800f430:	f001 f998 	bl	8010764 <xTaskRemoveFromEventList>
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d012      	beq.n	800f460 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f43a:	4b0d      	ldr	r3, [pc, #52]	@ (800f470 <xQueueGenericReset+0xd0>)
 800f43c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	f3bf 8f4f 	dsb	sy
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	e009      	b.n	800f460 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	3310      	adds	r3, #16
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff fef0 	bl	800f236 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	3324      	adds	r3, #36	@ 0x24
 800f45a:	4618      	mov	r0, r3
 800f45c:	f7ff feeb 	bl	800f236 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f460:	f001 feac 	bl	80111bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f464:	2301      	movs	r3, #1
}
 800f466:	4618      	mov	r0, r3
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	e000ed04 	.word	0xe000ed04

0800f474 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f474:	b580      	push	{r7, lr}
 800f476:	b08a      	sub	sp, #40	@ 0x28
 800f478:	af02      	add	r7, sp, #8
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	60b9      	str	r1, [r7, #8]
 800f47e:	4613      	mov	r3, r2
 800f480:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10b      	bne.n	800f4a0 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	613b      	str	r3, [r7, #16]
}
 800f49a:	bf00      	nop
 800f49c:	bf00      	nop
 800f49e:	e7fd      	b.n	800f49c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	68ba      	ldr	r2, [r7, #8]
 800f4a4:	fb02 f303 	mul.w	r3, r2, r3
 800f4a8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	3348      	adds	r3, #72	@ 0x48
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f001 ff74 	bl	801139c <pvPortMalloc>
 800f4b4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00d      	beq.n	800f4d8 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	3348      	adds	r3, #72	@ 0x48
 800f4c4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4c6:	79fa      	ldrb	r2, [r7, #7]
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	697a      	ldr	r2, [r7, #20]
 800f4d0:	68b9      	ldr	r1, [r7, #8]
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f000 f805 	bl	800f4e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f4d8:	69bb      	ldr	r3, [r7, #24]
	}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3720      	adds	r7, #32
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b084      	sub	sp, #16
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	60f8      	str	r0, [r7, #12]
 800f4ea:	60b9      	str	r1, [r7, #8]
 800f4ec:	607a      	str	r2, [r7, #4]
 800f4ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d103      	bne.n	800f4fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	69ba      	ldr	r2, [r7, #24]
 800f4fa:	601a      	str	r2, [r3, #0]
 800f4fc:	e002      	b.n	800f504 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f504:	69bb      	ldr	r3, [r7, #24]
 800f506:	68fa      	ldr	r2, [r7, #12]
 800f508:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f510:	2101      	movs	r1, #1
 800f512:	69b8      	ldr	r0, [r7, #24]
 800f514:	f7ff ff44 	bl	800f3a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f518:	bf00      	nop
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b08e      	sub	sp, #56	@ 0x38
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f52e:	2300      	movs	r3, #0
 800f530:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10b      	bne.n	800f554 <xQueueGenericSend+0x34>
	__asm volatile
 800f53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f54e:	bf00      	nop
 800f550:	bf00      	nop
 800f552:	e7fd      	b.n	800f550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d103      	bne.n	800f562 <xQueueGenericSend+0x42>
 800f55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d101      	bne.n	800f566 <xQueueGenericSend+0x46>
 800f562:	2301      	movs	r3, #1
 800f564:	e000      	b.n	800f568 <xQueueGenericSend+0x48>
 800f566:	2300      	movs	r3, #0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d10b      	bne.n	800f584 <xQueueGenericSend+0x64>
	__asm volatile
 800f56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f570:	f383 8811 	msr	BASEPRI, r3
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f57e:	bf00      	nop
 800f580:	bf00      	nop
 800f582:	e7fd      	b.n	800f580 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	2b02      	cmp	r3, #2
 800f588:	d103      	bne.n	800f592 <xQueueGenericSend+0x72>
 800f58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f58c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d101      	bne.n	800f596 <xQueueGenericSend+0x76>
 800f592:	2301      	movs	r3, #1
 800f594:	e000      	b.n	800f598 <xQueueGenericSend+0x78>
 800f596:	2300      	movs	r3, #0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d10b      	bne.n	800f5b4 <xQueueGenericSend+0x94>
	__asm volatile
 800f59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a0:	f383 8811 	msr	BASEPRI, r3
 800f5a4:	f3bf 8f6f 	isb	sy
 800f5a8:	f3bf 8f4f 	dsb	sy
 800f5ac:	623b      	str	r3, [r7, #32]
}
 800f5ae:	bf00      	nop
 800f5b0:	bf00      	nop
 800f5b2:	e7fd      	b.n	800f5b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5b4:	f001 fa76 	bl	8010aa4 <xTaskGetSchedulerState>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d102      	bne.n	800f5c4 <xQueueGenericSend+0xa4>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d101      	bne.n	800f5c8 <xQueueGenericSend+0xa8>
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	e000      	b.n	800f5ca <xQueueGenericSend+0xaa>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10b      	bne.n	800f5e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d2:	f383 8811 	msr	BASEPRI, r3
 800f5d6:	f3bf 8f6f 	isb	sy
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	61fb      	str	r3, [r7, #28]
}
 800f5e0:	bf00      	nop
 800f5e2:	bf00      	nop
 800f5e4:	e7fd      	b.n	800f5e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5e6:	f001 fdb7 	bl	8011158 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d302      	bcc.n	800f5fc <xQueueGenericSend+0xdc>
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	2b02      	cmp	r3, #2
 800f5fa:	d129      	bne.n	800f650 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f5fc:	683a      	ldr	r2, [r7, #0]
 800f5fe:	68b9      	ldr	r1, [r7, #8]
 800f600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f602:	f000 fbca 	bl	800fd9a <prvCopyDataToQueue>
 800f606:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f60a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d010      	beq.n	800f632 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f612:	3324      	adds	r3, #36	@ 0x24
 800f614:	4618      	mov	r0, r3
 800f616:	f001 f8a5 	bl	8010764 <xTaskRemoveFromEventList>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d013      	beq.n	800f648 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f620:	4b3f      	ldr	r3, [pc, #252]	@ (800f720 <xQueueGenericSend+0x200>)
 800f622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f626:	601a      	str	r2, [r3, #0]
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	f3bf 8f6f 	isb	sy
 800f630:	e00a      	b.n	800f648 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f634:	2b00      	cmp	r3, #0
 800f636:	d007      	beq.n	800f648 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f638:	4b39      	ldr	r3, [pc, #228]	@ (800f720 <xQueueGenericSend+0x200>)
 800f63a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f63e:	601a      	str	r2, [r3, #0]
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f648:	f001 fdb8 	bl	80111bc <vPortExitCritical>
				return pdPASS;
 800f64c:	2301      	movs	r3, #1
 800f64e:	e063      	b.n	800f718 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d103      	bne.n	800f65e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f656:	f001 fdb1 	bl	80111bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f65a:	2300      	movs	r3, #0
 800f65c:	e05c      	b.n	800f718 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f65e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f660:	2b00      	cmp	r3, #0
 800f662:	d106      	bne.n	800f672 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f664:	f107 0314 	add.w	r3, r7, #20
 800f668:	4618      	mov	r0, r3
 800f66a:	f001 f8df 	bl	801082c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f66e:	2301      	movs	r3, #1
 800f670:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f672:	f001 fda3 	bl	80111bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f676:	f000 fe7d 	bl	8010374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f67a:	f001 fd6d 	bl	8011158 <vPortEnterCritical>
 800f67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f684:	b25b      	sxtb	r3, r3
 800f686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68a:	d103      	bne.n	800f694 <xQueueGenericSend+0x174>
 800f68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f68e:	2200      	movs	r2, #0
 800f690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f69a:	b25b      	sxtb	r3, r3
 800f69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a0:	d103      	bne.n	800f6aa <xQueueGenericSend+0x18a>
 800f6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f6aa:	f001 fd87 	bl	80111bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6ae:	1d3a      	adds	r2, r7, #4
 800f6b0:	f107 0314 	add.w	r3, r7, #20
 800f6b4:	4611      	mov	r1, r2
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f001 f8ce 	bl	8010858 <xTaskCheckForTimeOut>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d124      	bne.n	800f70c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f6c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6c4:	f000 fc61 	bl	800ff8a <prvIsQueueFull>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d018      	beq.n	800f700 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6d0:	3310      	adds	r3, #16
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	4611      	mov	r1, r2
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f001 f81e 	bl	8010718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f6dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f6de:	f000 fbec 	bl	800feba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f6e2:	f000 fe55 	bl	8010390 <xTaskResumeAll>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f47f af7c 	bne.w	800f5e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f6ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f720 <xQueueGenericSend+0x200>)
 800f6f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6f4:	601a      	str	r2, [r3, #0]
 800f6f6:	f3bf 8f4f 	dsb	sy
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	e772      	b.n	800f5e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f702:	f000 fbda 	bl	800feba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f706:	f000 fe43 	bl	8010390 <xTaskResumeAll>
 800f70a:	e76c      	b.n	800f5e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f70c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f70e:	f000 fbd4 	bl	800feba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f712:	f000 fe3d 	bl	8010390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f716:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3738      	adds	r7, #56	@ 0x38
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	e000ed04 	.word	0xe000ed04

0800f724 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b08e      	sub	sp, #56	@ 0x38
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f734:	2b00      	cmp	r3, #0
 800f736:	d10b      	bne.n	800f750 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f73c:	f383 8811 	msr	BASEPRI, r3
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	f3bf 8f4f 	dsb	sy
 800f748:	623b      	str	r3, [r7, #32]
}
 800f74a:	bf00      	nop
 800f74c:	bf00      	nop
 800f74e:	e7fd      	b.n	800f74c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00b      	beq.n	800f770 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75c:	f383 8811 	msr	BASEPRI, r3
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	61fb      	str	r3, [r7, #28]
}
 800f76a:	bf00      	nop
 800f76c:	bf00      	nop
 800f76e:	e7fd      	b.n	800f76c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d103      	bne.n	800f780 <xQueueGiveFromISR+0x5c>
 800f778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d101      	bne.n	800f784 <xQueueGiveFromISR+0x60>
 800f780:	2301      	movs	r3, #1
 800f782:	e000      	b.n	800f786 <xQueueGiveFromISR+0x62>
 800f784:	2300      	movs	r3, #0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10b      	bne.n	800f7a2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78e:	f383 8811 	msr	BASEPRI, r3
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	61bb      	str	r3, [r7, #24]
}
 800f79c:	bf00      	nop
 800f79e:	bf00      	nop
 800f7a0:	e7fd      	b.n	800f79e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7a2:	f001 fdb9 	bl	8011318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f7a6:	f3ef 8211 	mrs	r2, BASEPRI
 800f7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ae:	f383 8811 	msr	BASEPRI, r3
 800f7b2:	f3bf 8f6f 	isb	sy
 800f7b6:	f3bf 8f4f 	dsb	sy
 800f7ba:	617a      	str	r2, [r7, #20]
 800f7bc:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f7be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d22b      	bcs.n	800f82a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7de:	1c5a      	adds	r2, r3, #1
 800f7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ec:	d112      	bne.n	800f814 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d016      	beq.n	800f824 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f8:	3324      	adds	r3, #36	@ 0x24
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f000 ffb2 	bl	8010764 <xTaskRemoveFromEventList>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00e      	beq.n	800f824 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00b      	beq.n	800f824 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f80c:	683b      	ldr	r3, [r7, #0]
 800f80e:	2201      	movs	r2, #1
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	e007      	b.n	800f824 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f814:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f818:	3301      	adds	r3, #1
 800f81a:	b2db      	uxtb	r3, r3
 800f81c:	b25a      	sxtb	r2, r3
 800f81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f824:	2301      	movs	r3, #1
 800f826:	637b      	str	r3, [r7, #52]	@ 0x34
 800f828:	e001      	b.n	800f82e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f82a:	2300      	movs	r3, #0
 800f82c:	637b      	str	r3, [r7, #52]	@ 0x34
 800f82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f830:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f838:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f83a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3738      	adds	r7, #56	@ 0x38
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b08c      	sub	sp, #48	@ 0x30
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f850:	2300      	movs	r3, #0
 800f852:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d10b      	bne.n	800f876 <xQueueReceive+0x32>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	623b      	str	r3, [r7, #32]
}
 800f870:	bf00      	nop
 800f872:	bf00      	nop
 800f874:	e7fd      	b.n	800f872 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d103      	bne.n	800f884 <xQueueReceive+0x40>
 800f87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f880:	2b00      	cmp	r3, #0
 800f882:	d101      	bne.n	800f888 <xQueueReceive+0x44>
 800f884:	2301      	movs	r3, #1
 800f886:	e000      	b.n	800f88a <xQueueReceive+0x46>
 800f888:	2300      	movs	r3, #0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d10b      	bne.n	800f8a6 <xQueueReceive+0x62>
	__asm volatile
 800f88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f892:	f383 8811 	msr	BASEPRI, r3
 800f896:	f3bf 8f6f 	isb	sy
 800f89a:	f3bf 8f4f 	dsb	sy
 800f89e:	61fb      	str	r3, [r7, #28]
}
 800f8a0:	bf00      	nop
 800f8a2:	bf00      	nop
 800f8a4:	e7fd      	b.n	800f8a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8a6:	f001 f8fd 	bl	8010aa4 <xTaskGetSchedulerState>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d102      	bne.n	800f8b6 <xQueueReceive+0x72>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d101      	bne.n	800f8ba <xQueueReceive+0x76>
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e000      	b.n	800f8bc <xQueueReceive+0x78>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d10b      	bne.n	800f8d8 <xQueueReceive+0x94>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c4:	f383 8811 	msr	BASEPRI, r3
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	61bb      	str	r3, [r7, #24]
}
 800f8d2:	bf00      	nop
 800f8d4:	bf00      	nop
 800f8d6:	e7fd      	b.n	800f8d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8d8:	f001 fc3e 	bl	8011158 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d01f      	beq.n	800f928 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f8e8:	68b9      	ldr	r1, [r7, #8]
 800f8ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ec:	f000 fabf 	bl	800fe6e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f2:	1e5a      	subs	r2, r3, #1
 800f8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8fa:	691b      	ldr	r3, [r3, #16]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00f      	beq.n	800f920 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f902:	3310      	adds	r3, #16
 800f904:	4618      	mov	r0, r3
 800f906:	f000 ff2d 	bl	8010764 <xTaskRemoveFromEventList>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d007      	beq.n	800f920 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f910:	4b3c      	ldr	r3, [pc, #240]	@ (800fa04 <xQueueReceive+0x1c0>)
 800f912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f916:	601a      	str	r2, [r3, #0]
 800f918:	f3bf 8f4f 	dsb	sy
 800f91c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f920:	f001 fc4c 	bl	80111bc <vPortExitCritical>
				return pdPASS;
 800f924:	2301      	movs	r3, #1
 800f926:	e069      	b.n	800f9fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d103      	bne.n	800f936 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f92e:	f001 fc45 	bl	80111bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f932:	2300      	movs	r3, #0
 800f934:	e062      	b.n	800f9fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d106      	bne.n	800f94a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f93c:	f107 0310 	add.w	r3, r7, #16
 800f940:	4618      	mov	r0, r3
 800f942:	f000 ff73 	bl	801082c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f946:	2301      	movs	r3, #1
 800f948:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f94a:	f001 fc37 	bl	80111bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f94e:	f000 fd11 	bl	8010374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f952:	f001 fc01 	bl	8011158 <vPortEnterCritical>
 800f956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f95c:	b25b      	sxtb	r3, r3
 800f95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f962:	d103      	bne.n	800f96c <xQueueReceive+0x128>
 800f964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f966:	2200      	movs	r2, #0
 800f968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f96e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f972:	b25b      	sxtb	r3, r3
 800f974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f978:	d103      	bne.n	800f982 <xQueueReceive+0x13e>
 800f97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97c:	2200      	movs	r2, #0
 800f97e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f982:	f001 fc1b 	bl	80111bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f986:	1d3a      	adds	r2, r7, #4
 800f988:	f107 0310 	add.w	r3, r7, #16
 800f98c:	4611      	mov	r1, r2
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 ff62 	bl	8010858 <xTaskCheckForTimeOut>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	d123      	bne.n	800f9e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f99a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f99c:	f000 fadf 	bl	800ff5e <prvIsQueueEmpty>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d017      	beq.n	800f9d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a8:	3324      	adds	r3, #36	@ 0x24
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	4611      	mov	r1, r2
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f000 feb2 	bl	8010718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9b6:	f000 fa80 	bl	800feba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9ba:	f000 fce9 	bl	8010390 <xTaskResumeAll>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d189      	bne.n	800f8d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800f9c4:	4b0f      	ldr	r3, [pc, #60]	@ (800fa04 <xQueueReceive+0x1c0>)
 800f9c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9ca:	601a      	str	r2, [r3, #0]
 800f9cc:	f3bf 8f4f 	dsb	sy
 800f9d0:	f3bf 8f6f 	isb	sy
 800f9d4:	e780      	b.n	800f8d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f9d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9d8:	f000 fa6f 	bl	800feba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9dc:	f000 fcd8 	bl	8010390 <xTaskResumeAll>
 800f9e0:	e77a      	b.n	800f8d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f9e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9e4:	f000 fa69 	bl	800feba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9e8:	f000 fcd2 	bl	8010390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f9ee:	f000 fab6 	bl	800ff5e <prvIsQueueEmpty>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f43f af6f 	beq.w	800f8d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f9fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3730      	adds	r7, #48	@ 0x30
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	e000ed04 	.word	0xe000ed04

0800fa08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b08e      	sub	sp, #56	@ 0x38
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fa12:	2300      	movs	r3, #0
 800fa14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fa1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10b      	bne.n	800fa3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa28:	f383 8811 	msr	BASEPRI, r3
 800fa2c:	f3bf 8f6f 	isb	sy
 800fa30:	f3bf 8f4f 	dsb	sy
 800fa34:	623b      	str	r3, [r7, #32]
}
 800fa36:	bf00      	nop
 800fa38:	bf00      	nop
 800fa3a:	e7fd      	b.n	800fa38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fa3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00b      	beq.n	800fa5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fa44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	61fb      	str	r3, [r7, #28]
}
 800fa56:	bf00      	nop
 800fa58:	bf00      	nop
 800fa5a:	e7fd      	b.n	800fa58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa5c:	f001 f822 	bl	8010aa4 <xTaskGetSchedulerState>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d102      	bne.n	800fa6c <xQueueSemaphoreTake+0x64>
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d101      	bne.n	800fa70 <xQueueSemaphoreTake+0x68>
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	e000      	b.n	800fa72 <xQueueSemaphoreTake+0x6a>
 800fa70:	2300      	movs	r3, #0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d10b      	bne.n	800fa8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fa76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa7a:	f383 8811 	msr	BASEPRI, r3
 800fa7e:	f3bf 8f6f 	isb	sy
 800fa82:	f3bf 8f4f 	dsb	sy
 800fa86:	61bb      	str	r3, [r7, #24]
}
 800fa88:	bf00      	nop
 800fa8a:	bf00      	nop
 800fa8c:	e7fd      	b.n	800fa8a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa8e:	f001 fb63 	bl	8011158 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fa92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fa98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d024      	beq.n	800fae8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa0:	1e5a      	subs	r2, r3, #1
 800faa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800faa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d104      	bne.n	800fab8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800faae:	f001 f9a5 	bl	8010dfc <pvTaskIncrementMutexHeldCount>
 800fab2:	4602      	mov	r2, r0
 800fab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fab6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faba:	691b      	ldr	r3, [r3, #16]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00f      	beq.n	800fae0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fac2:	3310      	adds	r3, #16
 800fac4:	4618      	mov	r0, r3
 800fac6:	f000 fe4d 	bl	8010764 <xTaskRemoveFromEventList>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d007      	beq.n	800fae0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fad0:	4b54      	ldr	r3, [pc, #336]	@ (800fc24 <xQueueSemaphoreTake+0x21c>)
 800fad2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fae0:	f001 fb6c 	bl	80111bc <vPortExitCritical>
				return pdPASS;
 800fae4:	2301      	movs	r3, #1
 800fae6:	e098      	b.n	800fc1a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d112      	bne.n	800fb14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800faee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00b      	beq.n	800fb0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800faf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf8:	f383 8811 	msr	BASEPRI, r3
 800fafc:	f3bf 8f6f 	isb	sy
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	617b      	str	r3, [r7, #20]
}
 800fb06:	bf00      	nop
 800fb08:	bf00      	nop
 800fb0a:	e7fd      	b.n	800fb08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fb0c:	f001 fb56 	bl	80111bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb10:	2300      	movs	r3, #0
 800fb12:	e082      	b.n	800fc1a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d106      	bne.n	800fb28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb1a:	f107 030c 	add.w	r3, r7, #12
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f000 fe84 	bl	801082c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb24:	2301      	movs	r3, #1
 800fb26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb28:	f001 fb48 	bl	80111bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb2c:	f000 fc22 	bl	8010374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb30:	f001 fb12 	bl	8011158 <vPortEnterCritical>
 800fb34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb3a:	b25b      	sxtb	r3, r3
 800fb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb40:	d103      	bne.n	800fb4a <xQueueSemaphoreTake+0x142>
 800fb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb44:	2200      	movs	r2, #0
 800fb46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb50:	b25b      	sxtb	r3, r3
 800fb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb56:	d103      	bne.n	800fb60 <xQueueSemaphoreTake+0x158>
 800fb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb60:	f001 fb2c 	bl	80111bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb64:	463a      	mov	r2, r7
 800fb66:	f107 030c 	add.w	r3, r7, #12
 800fb6a:	4611      	mov	r1, r2
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f000 fe73 	bl	8010858 <xTaskCheckForTimeOut>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d132      	bne.n	800fbde <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fb7a:	f000 f9f0 	bl	800ff5e <prvIsQueueEmpty>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d026      	beq.n	800fbd2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d109      	bne.n	800fba0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fb8c:	f001 fae4 	bl	8011158 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb92:	689b      	ldr	r3, [r3, #8]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 ffa3 	bl	8010ae0 <xTaskPriorityInherit>
 800fb9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fb9c:	f001 fb0e 	bl	80111bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba2:	3324      	adds	r3, #36	@ 0x24
 800fba4:	683a      	ldr	r2, [r7, #0]
 800fba6:	4611      	mov	r1, r2
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f000 fdb5 	bl	8010718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fbae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbb0:	f000 f983 	bl	800feba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fbb4:	f000 fbec 	bl	8010390 <xTaskResumeAll>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f47f af67 	bne.w	800fa8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fbc0:	4b18      	ldr	r3, [pc, #96]	@ (800fc24 <xQueueSemaphoreTake+0x21c>)
 800fbc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbc6:	601a      	str	r2, [r3, #0]
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	f3bf 8f6f 	isb	sy
 800fbd0:	e75d      	b.n	800fa8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fbd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbd4:	f000 f971 	bl	800feba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbd8:	f000 fbda 	bl	8010390 <xTaskResumeAll>
 800fbdc:	e757      	b.n	800fa8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fbde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbe0:	f000 f96b 	bl	800feba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbe4:	f000 fbd4 	bl	8010390 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fbea:	f000 f9b8 	bl	800ff5e <prvIsQueueEmpty>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	f43f af4c 	beq.w	800fa8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d00d      	beq.n	800fc18 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fbfc:	f001 faac 	bl	8011158 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fc00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fc02:	f000 f8b2 	bl	800fd6a <prvGetDisinheritPriorityAfterTimeout>
 800fc06:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f001 f864 	bl	8010cdc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fc14:	f001 fad2 	bl	80111bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3738      	adds	r7, #56	@ 0x38
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
 800fc22:	bf00      	nop
 800fc24:	e000ed04 	.word	0xe000ed04

0800fc28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b08e      	sub	sp, #56	@ 0x38
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10b      	bne.n	800fc56 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800fc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	623b      	str	r3, [r7, #32]
}
 800fc50:	bf00      	nop
 800fc52:	bf00      	nop
 800fc54:	e7fd      	b.n	800fc52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d103      	bne.n	800fc64 <xQueueReceiveFromISR+0x3c>
 800fc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d101      	bne.n	800fc68 <xQueueReceiveFromISR+0x40>
 800fc64:	2301      	movs	r3, #1
 800fc66:	e000      	b.n	800fc6a <xQueueReceiveFromISR+0x42>
 800fc68:	2300      	movs	r3, #0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10b      	bne.n	800fc86 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	61fb      	str	r3, [r7, #28]
}
 800fc80:	bf00      	nop
 800fc82:	bf00      	nop
 800fc84:	e7fd      	b.n	800fc82 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc86:	f001 fb47 	bl	8011318 <vPortValidateInterruptPriority>
	__asm volatile
 800fc8a:	f3ef 8211 	mrs	r2, BASEPRI
 800fc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	61ba      	str	r2, [r7, #24]
 800fca0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fca2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcaa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d02f      	beq.n	800fd12 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fcb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fcb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fcbc:	68b9      	ldr	r1, [r7, #8]
 800fcbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fcc0:	f000 f8d5 	bl	800fe6e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc6:	1e5a      	subs	r2, r3, #1
 800fcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fccc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fcd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcd4:	d112      	bne.n	800fcfc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd8:	691b      	ldr	r3, [r3, #16]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d016      	beq.n	800fd0c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fce0:	3310      	adds	r3, #16
 800fce2:	4618      	mov	r0, r3
 800fce4:	f000 fd3e 	bl	8010764 <xTaskRemoveFromEventList>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00e      	beq.n	800fd0c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00b      	beq.n	800fd0c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	601a      	str	r2, [r3, #0]
 800fcfa:	e007      	b.n	800fd0c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fd00:	3301      	adds	r3, #1
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	b25a      	sxtb	r2, r3
 800fd06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800fd0c:	2301      	movs	r3, #1
 800fd0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd10:	e001      	b.n	800fd16 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800fd12:	2300      	movs	r3, #0
 800fd14:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd18:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	f383 8811 	msr	BASEPRI, r3
}
 800fd20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3738      	adds	r7, #56	@ 0x38
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d10b      	bne.n	800fd56 <vQueueDelete+0x2a>
	__asm volatile
 800fd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd42:	f383 8811 	msr	BASEPRI, r3
 800fd46:	f3bf 8f6f 	isb	sy
 800fd4a:	f3bf 8f4f 	dsb	sy
 800fd4e:	60bb      	str	r3, [r7, #8]
}
 800fd50:	bf00      	nop
 800fd52:	bf00      	nop
 800fd54:	e7fd      	b.n	800fd52 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f000 f930 	bl	800ffbc <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f001 fbeb 	bl	8011538 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fd62:	bf00      	nop
 800fd64:	3710      	adds	r7, #16
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fd6a:	b480      	push	{r7}
 800fd6c:	b085      	sub	sp, #20
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d006      	beq.n	800fd88 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	f1c3 0307 	rsb	r3, r3, #7
 800fd84:	60fb      	str	r3, [r7, #12]
 800fd86:	e001      	b.n	800fd8c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
	}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr

0800fd9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b086      	sub	sp, #24
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	60f8      	str	r0, [r7, #12]
 800fda2:	60b9      	str	r1, [r7, #8]
 800fda4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fda6:	2300      	movs	r3, #0
 800fda8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d10d      	bne.n	800fdd4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d14d      	bne.n	800fe5c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	689b      	ldr	r3, [r3, #8]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f000 ff01 	bl	8010bcc <xTaskPriorityDisinherit>
 800fdca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	609a      	str	r2, [r3, #8]
 800fdd2:	e043      	b.n	800fe5c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d119      	bne.n	800fe0e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	6858      	ldr	r0, [r3, #4]
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fde2:	461a      	mov	r2, r3
 800fde4:	68b9      	ldr	r1, [r7, #8]
 800fde6:	f003 fc7a 	bl	80136de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	685a      	ldr	r2, [r3, #4]
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdf2:	441a      	add	r2, r3
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	685a      	ldr	r2, [r3, #4]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d32b      	bcc.n	800fe5c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	605a      	str	r2, [r3, #4]
 800fe0c:	e026      	b.n	800fe5c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	68d8      	ldr	r0, [r3, #12]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe16:	461a      	mov	r2, r3
 800fe18:	68b9      	ldr	r1, [r7, #8]
 800fe1a:	f003 fc60 	bl	80136de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	68da      	ldr	r2, [r3, #12]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe26:	425b      	negs	r3, r3
 800fe28:	441a      	add	r2, r3
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	68da      	ldr	r2, [r3, #12]
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d207      	bcs.n	800fe4a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	689a      	ldr	r2, [r3, #8]
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe42:	425b      	negs	r3, r3
 800fe44:	441a      	add	r2, r3
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d105      	bne.n	800fe5c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d002      	beq.n	800fe5c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	1c5a      	adds	r2, r3, #1
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800fe64:	697b      	ldr	r3, [r7, #20]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3718      	adds	r7, #24
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b082      	sub	sp, #8
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
 800fe76:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d018      	beq.n	800feb2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	68da      	ldr	r2, [r3, #12]
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe88:	441a      	add	r2, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	68da      	ldr	r2, [r3, #12]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	689b      	ldr	r3, [r3, #8]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d303      	bcc.n	800fea2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	68d9      	ldr	r1, [r3, #12]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800feaa:	461a      	mov	r2, r3
 800feac:	6838      	ldr	r0, [r7, #0]
 800feae:	f003 fc16 	bl	80136de <memcpy>
	}
}
 800feb2:	bf00      	nop
 800feb4:	3708      	adds	r7, #8
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}

0800feba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800feba:	b580      	push	{r7, lr}
 800febc:	b084      	sub	sp, #16
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fec2:	f001 f949 	bl	8011158 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fecc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fece:	e011      	b.n	800fef4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d012      	beq.n	800fefe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	3324      	adds	r3, #36	@ 0x24
 800fedc:	4618      	mov	r0, r3
 800fede:	f000 fc41 	bl	8010764 <xTaskRemoveFromEventList>
 800fee2:	4603      	mov	r3, r0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d001      	beq.n	800feec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fee8:	f000 fd1a 	bl	8010920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800feec:	7bfb      	ldrb	r3, [r7, #15]
 800feee:	3b01      	subs	r3, #1
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	dce9      	bgt.n	800fed0 <prvUnlockQueue+0x16>
 800fefc:	e000      	b.n	800ff00 <prvUnlockQueue+0x46>
					break;
 800fefe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	22ff      	movs	r2, #255	@ 0xff
 800ff04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ff08:	f001 f958 	bl	80111bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ff0c:	f001 f924 	bl	8011158 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff18:	e011      	b.n	800ff3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	691b      	ldr	r3, [r3, #16]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d012      	beq.n	800ff48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	3310      	adds	r3, #16
 800ff26:	4618      	mov	r0, r3
 800ff28:	f000 fc1c 	bl	8010764 <xTaskRemoveFromEventList>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ff32:	f000 fcf5 	bl	8010920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ff36:	7bbb      	ldrb	r3, [r7, #14]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ff3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	dce9      	bgt.n	800ff1a <prvUnlockQueue+0x60>
 800ff46:	e000      	b.n	800ff4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ff48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	22ff      	movs	r2, #255	@ 0xff
 800ff4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ff52:	f001 f933 	bl	80111bc <vPortExitCritical>
}
 800ff56:	bf00      	nop
 800ff58:	3710      	adds	r7, #16
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b084      	sub	sp, #16
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff66:	f001 f8f7 	bl	8011158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d102      	bne.n	800ff78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ff72:	2301      	movs	r3, #1
 800ff74:	60fb      	str	r3, [r7, #12]
 800ff76:	e001      	b.n	800ff7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff7c:	f001 f91e 	bl	80111bc <vPortExitCritical>

	return xReturn;
 800ff80:	68fb      	ldr	r3, [r7, #12]
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}

0800ff8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff8a:	b580      	push	{r7, lr}
 800ff8c:	b084      	sub	sp, #16
 800ff8e:	af00      	add	r7, sp, #0
 800ff90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff92:	f001 f8e1 	bl	8011158 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d102      	bne.n	800ffa8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ffa2:	2301      	movs	r3, #1
 800ffa4:	60fb      	str	r3, [r7, #12]
 800ffa6:	e001      	b.n	800ffac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ffac:	f001 f906 	bl	80111bc <vPortExitCritical>

	return xReturn;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3710      	adds	r7, #16
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
	...

0800ffbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b085      	sub	sp, #20
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	60fb      	str	r3, [r7, #12]
 800ffc8:	e016      	b.n	800fff8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ffca:	4a10      	ldr	r2, [pc, #64]	@ (801000c <vQueueUnregisterQueue+0x50>)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	00db      	lsls	r3, r3, #3
 800ffd0:	4413      	add	r3, r2
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d10b      	bne.n	800fff2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ffda:	4a0c      	ldr	r2, [pc, #48]	@ (801000c <vQueueUnregisterQueue+0x50>)
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2100      	movs	r1, #0
 800ffe0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ffe4:	4a09      	ldr	r2, [pc, #36]	@ (801000c <vQueueUnregisterQueue+0x50>)
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	00db      	lsls	r3, r3, #3
 800ffea:	4413      	add	r3, r2
 800ffec:	2200      	movs	r2, #0
 800ffee:	605a      	str	r2, [r3, #4]
				break;
 800fff0:	e006      	b.n	8010000 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3301      	adds	r3, #1
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2b07      	cmp	r3, #7
 800fffc:	d9e5      	bls.n	800ffca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fffe:	bf00      	nop
 8010000:	bf00      	nop
 8010002:	3714      	adds	r7, #20
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr
 801000c:	20002954 	.word	0x20002954

08010010 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010010:	b580      	push	{r7, lr}
 8010012:	b08c      	sub	sp, #48	@ 0x30
 8010014:	af04      	add	r7, sp, #16
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	603b      	str	r3, [r7, #0]
 801001c:	4613      	mov	r3, r2
 801001e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010020:	88fb      	ldrh	r3, [r7, #6]
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	4618      	mov	r0, r3
 8010026:	f001 f9b9 	bl	801139c <pvPortMalloc>
 801002a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d00e      	beq.n	8010050 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010032:	2054      	movs	r0, #84	@ 0x54
 8010034:	f001 f9b2 	bl	801139c <pvPortMalloc>
 8010038:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d003      	beq.n	8010048 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	631a      	str	r2, [r3, #48]	@ 0x30
 8010046:	e005      	b.n	8010054 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010048:	6978      	ldr	r0, [r7, #20]
 801004a:	f001 fa75 	bl	8011538 <vPortFree>
 801004e:	e001      	b.n	8010054 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010050:	2300      	movs	r3, #0
 8010052:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d013      	beq.n	8010082 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801005a:	88fa      	ldrh	r2, [r7, #6]
 801005c:	2300      	movs	r3, #0
 801005e:	9303      	str	r3, [sp, #12]
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	9302      	str	r3, [sp, #8]
 8010064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010066:	9301      	str	r3, [sp, #4]
 8010068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801006a:	9300      	str	r3, [sp, #0]
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	68b9      	ldr	r1, [r7, #8]
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f000 f80e 	bl	8010092 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010076:	69f8      	ldr	r0, [r7, #28]
 8010078:	f000 f894 	bl	80101a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801007c:	2301      	movs	r3, #1
 801007e:	61bb      	str	r3, [r7, #24]
 8010080:	e002      	b.n	8010088 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010082:	f04f 33ff 	mov.w	r3, #4294967295
 8010086:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010088:	69bb      	ldr	r3, [r7, #24]
	}
 801008a:	4618      	mov	r0, r3
 801008c:	3720      	adds	r7, #32
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b088      	sub	sp, #32
 8010096:	af00      	add	r7, sp, #0
 8010098:	60f8      	str	r0, [r7, #12]
 801009a:	60b9      	str	r1, [r7, #8]
 801009c:	607a      	str	r2, [r7, #4]
 801009e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80100a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80100aa:	3b01      	subs	r3, #1
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4413      	add	r3, r2
 80100b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	f023 0307 	bic.w	r3, r3, #7
 80100b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	f003 0307 	and.w	r3, r3, #7
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00b      	beq.n	80100dc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80100c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100c8:	f383 8811 	msr	BASEPRI, r3
 80100cc:	f3bf 8f6f 	isb	sy
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	617b      	str	r3, [r7, #20]
}
 80100d6:	bf00      	nop
 80100d8:	bf00      	nop
 80100da:	e7fd      	b.n	80100d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d01f      	beq.n	8010122 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80100e2:	2300      	movs	r3, #0
 80100e4:	61fb      	str	r3, [r7, #28]
 80100e6:	e012      	b.n	801010e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80100e8:	68ba      	ldr	r2, [r7, #8]
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	4413      	add	r3, r2
 80100ee:	7819      	ldrb	r1, [r3, #0]
 80100f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	4413      	add	r3, r2
 80100f6:	3334      	adds	r3, #52	@ 0x34
 80100f8:	460a      	mov	r2, r1
 80100fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80100fc:	68ba      	ldr	r2, [r7, #8]
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	4413      	add	r3, r2
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d006      	beq.n	8010116 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	3301      	adds	r3, #1
 801010c:	61fb      	str	r3, [r7, #28]
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	2b0f      	cmp	r3, #15
 8010112:	d9e9      	bls.n	80100e8 <prvInitialiseNewTask+0x56>
 8010114:	e000      	b.n	8010118 <prvInitialiseNewTask+0x86>
			{
				break;
 8010116:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801011a:	2200      	movs	r2, #0
 801011c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010120:	e003      	b.n	801012a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010124:	2200      	movs	r2, #0
 8010126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801012a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801012c:	2b06      	cmp	r3, #6
 801012e:	d901      	bls.n	8010134 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010130:	2306      	movs	r3, #6
 8010132:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010136:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010138:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801013a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801013e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010142:	2200      	movs	r2, #0
 8010144:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010148:	3304      	adds	r3, #4
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff f893 	bl	800f276 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010152:	3318      	adds	r3, #24
 8010154:	4618      	mov	r0, r3
 8010156:	f7ff f88e 	bl	800f276 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801015a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801015c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801015e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010162:	f1c3 0207 	rsb	r2, r3, #7
 8010166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010168:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801016a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801016c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801016e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010172:	2200      	movs	r2, #0
 8010174:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010178:	2200      	movs	r2, #0
 801017a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	68f9      	ldr	r1, [r7, #12]
 8010182:	69b8      	ldr	r0, [r7, #24]
 8010184:	f000 feb4 	bl	8010ef0 <pxPortInitialiseStack>
 8010188:	4602      	mov	r2, r0
 801018a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801018c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801018e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801019a:	bf00      	nop
 801019c:	3720      	adds	r7, #32
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
	...

080101a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80101ac:	f000 ffd4 	bl	8011158 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80101b0:	4b2a      	ldr	r3, [pc, #168]	@ (801025c <prvAddNewTaskToReadyList+0xb8>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	3301      	adds	r3, #1
 80101b6:	4a29      	ldr	r2, [pc, #164]	@ (801025c <prvAddNewTaskToReadyList+0xb8>)
 80101b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80101ba:	4b29      	ldr	r3, [pc, #164]	@ (8010260 <prvAddNewTaskToReadyList+0xbc>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d109      	bne.n	80101d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80101c2:	4a27      	ldr	r2, [pc, #156]	@ (8010260 <prvAddNewTaskToReadyList+0xbc>)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80101c8:	4b24      	ldr	r3, [pc, #144]	@ (801025c <prvAddNewTaskToReadyList+0xb8>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d110      	bne.n	80101f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80101d0:	f000 fbca 	bl	8010968 <prvInitialiseTaskLists>
 80101d4:	e00d      	b.n	80101f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80101d6:	4b23      	ldr	r3, [pc, #140]	@ (8010264 <prvAddNewTaskToReadyList+0xc0>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d109      	bne.n	80101f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80101de:	4b20      	ldr	r3, [pc, #128]	@ (8010260 <prvAddNewTaskToReadyList+0xbc>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d802      	bhi.n	80101f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80101ec:	4a1c      	ldr	r2, [pc, #112]	@ (8010260 <prvAddNewTaskToReadyList+0xbc>)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80101f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010268 <prvAddNewTaskToReadyList+0xc4>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	3301      	adds	r3, #1
 80101f8:	4a1b      	ldr	r2, [pc, #108]	@ (8010268 <prvAddNewTaskToReadyList+0xc4>)
 80101fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010200:	2201      	movs	r2, #1
 8010202:	409a      	lsls	r2, r3
 8010204:	4b19      	ldr	r3, [pc, #100]	@ (801026c <prvAddNewTaskToReadyList+0xc8>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4313      	orrs	r3, r2
 801020a:	4a18      	ldr	r2, [pc, #96]	@ (801026c <prvAddNewTaskToReadyList+0xc8>)
 801020c:	6013      	str	r3, [r2, #0]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010212:	4613      	mov	r3, r2
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	4413      	add	r3, r2
 8010218:	009b      	lsls	r3, r3, #2
 801021a:	4a15      	ldr	r2, [pc, #84]	@ (8010270 <prvAddNewTaskToReadyList+0xcc>)
 801021c:	441a      	add	r2, r3
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	3304      	adds	r3, #4
 8010222:	4619      	mov	r1, r3
 8010224:	4610      	mov	r0, r2
 8010226:	f7ff f833 	bl	800f290 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801022a:	f000 ffc7 	bl	80111bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801022e:	4b0d      	ldr	r3, [pc, #52]	@ (8010264 <prvAddNewTaskToReadyList+0xc0>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00e      	beq.n	8010254 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010236:	4b0a      	ldr	r3, [pc, #40]	@ (8010260 <prvAddNewTaskToReadyList+0xbc>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010240:	429a      	cmp	r2, r3
 8010242:	d207      	bcs.n	8010254 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010244:	4b0b      	ldr	r3, [pc, #44]	@ (8010274 <prvAddNewTaskToReadyList+0xd0>)
 8010246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010254:	bf00      	nop
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	20002a94 	.word	0x20002a94
 8010260:	20002994 	.word	0x20002994
 8010264:	20002aa0 	.word	0x20002aa0
 8010268:	20002ab0 	.word	0x20002ab0
 801026c:	20002a9c 	.word	0x20002a9c
 8010270:	20002998 	.word	0x20002998
 8010274:	e000ed04 	.word	0xe000ed04

08010278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010280:	2300      	movs	r3, #0
 8010282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d018      	beq.n	80102bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801028a:	4b14      	ldr	r3, [pc, #80]	@ (80102dc <vTaskDelay+0x64>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d00b      	beq.n	80102aa <vTaskDelay+0x32>
	__asm volatile
 8010292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010296:	f383 8811 	msr	BASEPRI, r3
 801029a:	f3bf 8f6f 	isb	sy
 801029e:	f3bf 8f4f 	dsb	sy
 80102a2:	60bb      	str	r3, [r7, #8]
}
 80102a4:	bf00      	nop
 80102a6:	bf00      	nop
 80102a8:	e7fd      	b.n	80102a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80102aa:	f000 f863 	bl	8010374 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80102ae:	2100      	movs	r1, #0
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 fdb7 	bl	8010e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80102b6:	f000 f86b 	bl	8010390 <xTaskResumeAll>
 80102ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d107      	bne.n	80102d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80102c2:	4b07      	ldr	r3, [pc, #28]	@ (80102e0 <vTaskDelay+0x68>)
 80102c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102c8:	601a      	str	r2, [r3, #0]
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80102d2:	bf00      	nop
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
 80102da:	bf00      	nop
 80102dc:	20002abc 	.word	0x20002abc
 80102e0:	e000ed04 	.word	0xe000ed04

080102e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b086      	sub	sp, #24
 80102e8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80102ea:	4b1c      	ldr	r3, [pc, #112]	@ (801035c <vTaskStartScheduler+0x78>)
 80102ec:	9301      	str	r3, [sp, #4]
 80102ee:	2300      	movs	r3, #0
 80102f0:	9300      	str	r3, [sp, #0]
 80102f2:	2300      	movs	r3, #0
 80102f4:	2280      	movs	r2, #128	@ 0x80
 80102f6:	491a      	ldr	r1, [pc, #104]	@ (8010360 <vTaskStartScheduler+0x7c>)
 80102f8:	481a      	ldr	r0, [pc, #104]	@ (8010364 <vTaskStartScheduler+0x80>)
 80102fa:	f7ff fe89 	bl	8010010 <xTaskCreate>
 80102fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2b01      	cmp	r3, #1
 8010304:	d116      	bne.n	8010334 <vTaskStartScheduler+0x50>
	__asm volatile
 8010306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801030a:	f383 8811 	msr	BASEPRI, r3
 801030e:	f3bf 8f6f 	isb	sy
 8010312:	f3bf 8f4f 	dsb	sy
 8010316:	60bb      	str	r3, [r7, #8]
}
 8010318:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801031a:	4b13      	ldr	r3, [pc, #76]	@ (8010368 <vTaskStartScheduler+0x84>)
 801031c:	f04f 32ff 	mov.w	r2, #4294967295
 8010320:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010322:	4b12      	ldr	r3, [pc, #72]	@ (801036c <vTaskStartScheduler+0x88>)
 8010324:	2201      	movs	r2, #1
 8010326:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010328:	4b11      	ldr	r3, [pc, #68]	@ (8010370 <vTaskStartScheduler+0x8c>)
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801032e:	f000 fe6f 	bl	8011010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010332:	e00f      	b.n	8010354 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f1b3 3fff 	cmp.w	r3, #4294967295
 801033a:	d10b      	bne.n	8010354 <vTaskStartScheduler+0x70>
	__asm volatile
 801033c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010340:	f383 8811 	msr	BASEPRI, r3
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	607b      	str	r3, [r7, #4]
}
 801034e:	bf00      	nop
 8010350:	bf00      	nop
 8010352:	e7fd      	b.n	8010350 <vTaskStartScheduler+0x6c>
}
 8010354:	bf00      	nop
 8010356:	3710      	adds	r7, #16
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	20002ab8 	.word	0x20002ab8
 8010360:	08014a20 	.word	0x08014a20
 8010364:	08010939 	.word	0x08010939
 8010368:	20002ab4 	.word	0x20002ab4
 801036c:	20002aa0 	.word	0x20002aa0
 8010370:	20002a98 	.word	0x20002a98

08010374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010374:	b480      	push	{r7}
 8010376:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010378:	4b04      	ldr	r3, [pc, #16]	@ (801038c <vTaskSuspendAll+0x18>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	3301      	adds	r3, #1
 801037e:	4a03      	ldr	r2, [pc, #12]	@ (801038c <vTaskSuspendAll+0x18>)
 8010380:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010382:	bf00      	nop
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr
 801038c:	20002abc 	.word	0x20002abc

08010390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801039a:	2300      	movs	r3, #0
 801039c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801039e:	4b42      	ldr	r3, [pc, #264]	@ (80104a8 <xTaskResumeAll+0x118>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d10b      	bne.n	80103be <xTaskResumeAll+0x2e>
	__asm volatile
 80103a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	603b      	str	r3, [r7, #0]
}
 80103b8:	bf00      	nop
 80103ba:	bf00      	nop
 80103bc:	e7fd      	b.n	80103ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80103be:	f000 fecb 	bl	8011158 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80103c2:	4b39      	ldr	r3, [pc, #228]	@ (80104a8 <xTaskResumeAll+0x118>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	3b01      	subs	r3, #1
 80103c8:	4a37      	ldr	r2, [pc, #220]	@ (80104a8 <xTaskResumeAll+0x118>)
 80103ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103cc:	4b36      	ldr	r3, [pc, #216]	@ (80104a8 <xTaskResumeAll+0x118>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d161      	bne.n	8010498 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80103d4:	4b35      	ldr	r3, [pc, #212]	@ (80104ac <xTaskResumeAll+0x11c>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d05d      	beq.n	8010498 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103dc:	e02e      	b.n	801043c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103de:	4b34      	ldr	r3, [pc, #208]	@ (80104b0 <xTaskResumeAll+0x120>)
 80103e0:	68db      	ldr	r3, [r3, #12]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	3318      	adds	r3, #24
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fe ffad 	bl	800f34a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	3304      	adds	r3, #4
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fe ffa8 	bl	800f34a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103fe:	2201      	movs	r2, #1
 8010400:	409a      	lsls	r2, r3
 8010402:	4b2c      	ldr	r3, [pc, #176]	@ (80104b4 <xTaskResumeAll+0x124>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4313      	orrs	r3, r2
 8010408:	4a2a      	ldr	r2, [pc, #168]	@ (80104b4 <xTaskResumeAll+0x124>)
 801040a:	6013      	str	r3, [r2, #0]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010410:	4613      	mov	r3, r2
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	4413      	add	r3, r2
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	4a27      	ldr	r2, [pc, #156]	@ (80104b8 <xTaskResumeAll+0x128>)
 801041a:	441a      	add	r2, r3
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	3304      	adds	r3, #4
 8010420:	4619      	mov	r1, r3
 8010422:	4610      	mov	r0, r2
 8010424:	f7fe ff34 	bl	800f290 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801042c:	4b23      	ldr	r3, [pc, #140]	@ (80104bc <xTaskResumeAll+0x12c>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010432:	429a      	cmp	r2, r3
 8010434:	d302      	bcc.n	801043c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010436:	4b22      	ldr	r3, [pc, #136]	@ (80104c0 <xTaskResumeAll+0x130>)
 8010438:	2201      	movs	r2, #1
 801043a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801043c:	4b1c      	ldr	r3, [pc, #112]	@ (80104b0 <xTaskResumeAll+0x120>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d1cc      	bne.n	80103de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801044a:	f000 fb0b 	bl	8010a64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801044e:	4b1d      	ldr	r3, [pc, #116]	@ (80104c4 <xTaskResumeAll+0x134>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d010      	beq.n	801047c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801045a:	f000 f847 	bl	80104ec <xTaskIncrementTick>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d002      	beq.n	801046a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010464:	4b16      	ldr	r3, [pc, #88]	@ (80104c0 <xTaskResumeAll+0x130>)
 8010466:	2201      	movs	r2, #1
 8010468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3b01      	subs	r3, #1
 801046e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1f1      	bne.n	801045a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010476:	4b13      	ldr	r3, [pc, #76]	@ (80104c4 <xTaskResumeAll+0x134>)
 8010478:	2200      	movs	r2, #0
 801047a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801047c:	4b10      	ldr	r3, [pc, #64]	@ (80104c0 <xTaskResumeAll+0x130>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d009      	beq.n	8010498 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010484:	2301      	movs	r3, #1
 8010486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010488:	4b0f      	ldr	r3, [pc, #60]	@ (80104c8 <xTaskResumeAll+0x138>)
 801048a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801048e:	601a      	str	r2, [r3, #0]
 8010490:	f3bf 8f4f 	dsb	sy
 8010494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010498:	f000 fe90 	bl	80111bc <vPortExitCritical>

	return xAlreadyYielded;
 801049c:	68bb      	ldr	r3, [r7, #8]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3710      	adds	r7, #16
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	20002abc 	.word	0x20002abc
 80104ac:	20002a94 	.word	0x20002a94
 80104b0:	20002a54 	.word	0x20002a54
 80104b4:	20002a9c 	.word	0x20002a9c
 80104b8:	20002998 	.word	0x20002998
 80104bc:	20002994 	.word	0x20002994
 80104c0:	20002aa8 	.word	0x20002aa8
 80104c4:	20002aa4 	.word	0x20002aa4
 80104c8:	e000ed04 	.word	0xe000ed04

080104cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80104d2:	4b05      	ldr	r3, [pc, #20]	@ (80104e8 <xTaskGetTickCount+0x1c>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80104d8:	687b      	ldr	r3, [r7, #4]
}
 80104da:	4618      	mov	r0, r3
 80104dc:	370c      	adds	r7, #12
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	20002a98 	.word	0x20002a98

080104ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b086      	sub	sp, #24
 80104f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80104f2:	2300      	movs	r3, #0
 80104f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80104f6:	4b4f      	ldr	r3, [pc, #316]	@ (8010634 <xTaskIncrementTick+0x148>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	f040 808f 	bne.w	801061e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010500:	4b4d      	ldr	r3, [pc, #308]	@ (8010638 <xTaskIncrementTick+0x14c>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	3301      	adds	r3, #1
 8010506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010508:	4a4b      	ldr	r2, [pc, #300]	@ (8010638 <xTaskIncrementTick+0x14c>)
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d121      	bne.n	8010558 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010514:	4b49      	ldr	r3, [pc, #292]	@ (801063c <xTaskIncrementTick+0x150>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00b      	beq.n	8010536 <xTaskIncrementTick+0x4a>
	__asm volatile
 801051e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010522:	f383 8811 	msr	BASEPRI, r3
 8010526:	f3bf 8f6f 	isb	sy
 801052a:	f3bf 8f4f 	dsb	sy
 801052e:	603b      	str	r3, [r7, #0]
}
 8010530:	bf00      	nop
 8010532:	bf00      	nop
 8010534:	e7fd      	b.n	8010532 <xTaskIncrementTick+0x46>
 8010536:	4b41      	ldr	r3, [pc, #260]	@ (801063c <xTaskIncrementTick+0x150>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	60fb      	str	r3, [r7, #12]
 801053c:	4b40      	ldr	r3, [pc, #256]	@ (8010640 <xTaskIncrementTick+0x154>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a3e      	ldr	r2, [pc, #248]	@ (801063c <xTaskIncrementTick+0x150>)
 8010542:	6013      	str	r3, [r2, #0]
 8010544:	4a3e      	ldr	r2, [pc, #248]	@ (8010640 <xTaskIncrementTick+0x154>)
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	6013      	str	r3, [r2, #0]
 801054a:	4b3e      	ldr	r3, [pc, #248]	@ (8010644 <xTaskIncrementTick+0x158>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	3301      	adds	r3, #1
 8010550:	4a3c      	ldr	r2, [pc, #240]	@ (8010644 <xTaskIncrementTick+0x158>)
 8010552:	6013      	str	r3, [r2, #0]
 8010554:	f000 fa86 	bl	8010a64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010558:	4b3b      	ldr	r3, [pc, #236]	@ (8010648 <xTaskIncrementTick+0x15c>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	429a      	cmp	r2, r3
 8010560:	d348      	bcc.n	80105f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010562:	4b36      	ldr	r3, [pc, #216]	@ (801063c <xTaskIncrementTick+0x150>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d104      	bne.n	8010576 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801056c:	4b36      	ldr	r3, [pc, #216]	@ (8010648 <xTaskIncrementTick+0x15c>)
 801056e:	f04f 32ff 	mov.w	r2, #4294967295
 8010572:	601a      	str	r2, [r3, #0]
					break;
 8010574:	e03e      	b.n	80105f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010576:	4b31      	ldr	r3, [pc, #196]	@ (801063c <xTaskIncrementTick+0x150>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	68db      	ldr	r3, [r3, #12]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	685b      	ldr	r3, [r3, #4]
 8010584:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010586:	693a      	ldr	r2, [r7, #16]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	429a      	cmp	r2, r3
 801058c:	d203      	bcs.n	8010596 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801058e:	4a2e      	ldr	r2, [pc, #184]	@ (8010648 <xTaskIncrementTick+0x15c>)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010594:	e02e      	b.n	80105f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	3304      	adds	r3, #4
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe fed5 	bl	800f34a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d004      	beq.n	80105b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	3318      	adds	r3, #24
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7fe fecc 	bl	800f34a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105b6:	2201      	movs	r2, #1
 80105b8:	409a      	lsls	r2, r3
 80105ba:	4b24      	ldr	r3, [pc, #144]	@ (801064c <xTaskIncrementTick+0x160>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	4313      	orrs	r3, r2
 80105c0:	4a22      	ldr	r2, [pc, #136]	@ (801064c <xTaskIncrementTick+0x160>)
 80105c2:	6013      	str	r3, [r2, #0]
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105c8:	4613      	mov	r3, r2
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	4413      	add	r3, r2
 80105ce:	009b      	lsls	r3, r3, #2
 80105d0:	4a1f      	ldr	r2, [pc, #124]	@ (8010650 <xTaskIncrementTick+0x164>)
 80105d2:	441a      	add	r2, r3
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	3304      	adds	r3, #4
 80105d8:	4619      	mov	r1, r3
 80105da:	4610      	mov	r0, r2
 80105dc:	f7fe fe58 	bl	800f290 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105e4:	4b1b      	ldr	r3, [pc, #108]	@ (8010654 <xTaskIncrementTick+0x168>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d3b9      	bcc.n	8010562 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80105ee:	2301      	movs	r3, #1
 80105f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80105f2:	e7b6      	b.n	8010562 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80105f4:	4b17      	ldr	r3, [pc, #92]	@ (8010654 <xTaskIncrementTick+0x168>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105fa:	4915      	ldr	r1, [pc, #84]	@ (8010650 <xTaskIncrementTick+0x164>)
 80105fc:	4613      	mov	r3, r2
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	4413      	add	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	440b      	add	r3, r1
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	2b01      	cmp	r3, #1
 801060a:	d901      	bls.n	8010610 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801060c:	2301      	movs	r3, #1
 801060e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010610:	4b11      	ldr	r3, [pc, #68]	@ (8010658 <xTaskIncrementTick+0x16c>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d007      	beq.n	8010628 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010618:	2301      	movs	r3, #1
 801061a:	617b      	str	r3, [r7, #20]
 801061c:	e004      	b.n	8010628 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801061e:	4b0f      	ldr	r3, [pc, #60]	@ (801065c <xTaskIncrementTick+0x170>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3301      	adds	r3, #1
 8010624:	4a0d      	ldr	r2, [pc, #52]	@ (801065c <xTaskIncrementTick+0x170>)
 8010626:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010628:	697b      	ldr	r3, [r7, #20]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3718      	adds	r7, #24
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	20002abc 	.word	0x20002abc
 8010638:	20002a98 	.word	0x20002a98
 801063c:	20002a4c 	.word	0x20002a4c
 8010640:	20002a50 	.word	0x20002a50
 8010644:	20002aac 	.word	0x20002aac
 8010648:	20002ab4 	.word	0x20002ab4
 801064c:	20002a9c 	.word	0x20002a9c
 8010650:	20002998 	.word	0x20002998
 8010654:	20002994 	.word	0x20002994
 8010658:	20002aa8 	.word	0x20002aa8
 801065c:	20002aa4 	.word	0x20002aa4

08010660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010660:	b480      	push	{r7}
 8010662:	b087      	sub	sp, #28
 8010664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010666:	4b27      	ldr	r3, [pc, #156]	@ (8010704 <vTaskSwitchContext+0xa4>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d003      	beq.n	8010676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801066e:	4b26      	ldr	r3, [pc, #152]	@ (8010708 <vTaskSwitchContext+0xa8>)
 8010670:	2201      	movs	r2, #1
 8010672:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010674:	e040      	b.n	80106f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8010676:	4b24      	ldr	r3, [pc, #144]	@ (8010708 <vTaskSwitchContext+0xa8>)
 8010678:	2200      	movs	r2, #0
 801067a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801067c:	4b23      	ldr	r3, [pc, #140]	@ (801070c <vTaskSwitchContext+0xac>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	fab3 f383 	clz	r3, r3
 8010688:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801068a:	7afb      	ldrb	r3, [r7, #11]
 801068c:	f1c3 031f 	rsb	r3, r3, #31
 8010690:	617b      	str	r3, [r7, #20]
 8010692:	491f      	ldr	r1, [pc, #124]	@ (8010710 <vTaskSwitchContext+0xb0>)
 8010694:	697a      	ldr	r2, [r7, #20]
 8010696:	4613      	mov	r3, r2
 8010698:	009b      	lsls	r3, r3, #2
 801069a:	4413      	add	r3, r2
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	440b      	add	r3, r1
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d10b      	bne.n	80106be <vTaskSwitchContext+0x5e>
	__asm volatile
 80106a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	607b      	str	r3, [r7, #4]
}
 80106b8:	bf00      	nop
 80106ba:	bf00      	nop
 80106bc:	e7fd      	b.n	80106ba <vTaskSwitchContext+0x5a>
 80106be:	697a      	ldr	r2, [r7, #20]
 80106c0:	4613      	mov	r3, r2
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	4413      	add	r3, r2
 80106c6:	009b      	lsls	r3, r3, #2
 80106c8:	4a11      	ldr	r2, [pc, #68]	@ (8010710 <vTaskSwitchContext+0xb0>)
 80106ca:	4413      	add	r3, r2
 80106cc:	613b      	str	r3, [r7, #16]
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	685a      	ldr	r2, [r3, #4]
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	605a      	str	r2, [r3, #4]
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	693b      	ldr	r3, [r7, #16]
 80106de:	3308      	adds	r3, #8
 80106e0:	429a      	cmp	r2, r3
 80106e2:	d104      	bne.n	80106ee <vTaskSwitchContext+0x8e>
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	685a      	ldr	r2, [r3, #4]
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	605a      	str	r2, [r3, #4]
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	68db      	ldr	r3, [r3, #12]
 80106f4:	4a07      	ldr	r2, [pc, #28]	@ (8010714 <vTaskSwitchContext+0xb4>)
 80106f6:	6013      	str	r3, [r2, #0]
}
 80106f8:	bf00      	nop
 80106fa:	371c      	adds	r7, #28
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr
 8010704:	20002abc 	.word	0x20002abc
 8010708:	20002aa8 	.word	0x20002aa8
 801070c:	20002a9c 	.word	0x20002a9c
 8010710:	20002998 	.word	0x20002998
 8010714:	20002994 	.word	0x20002994

08010718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d10b      	bne.n	8010740 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801072c:	f383 8811 	msr	BASEPRI, r3
 8010730:	f3bf 8f6f 	isb	sy
 8010734:	f3bf 8f4f 	dsb	sy
 8010738:	60fb      	str	r3, [r7, #12]
}
 801073a:	bf00      	nop
 801073c:	bf00      	nop
 801073e:	e7fd      	b.n	801073c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010740:	4b07      	ldr	r3, [pc, #28]	@ (8010760 <vTaskPlaceOnEventList+0x48>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	3318      	adds	r3, #24
 8010746:	4619      	mov	r1, r3
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7fe fdc5 	bl	800f2d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801074e:	2101      	movs	r1, #1
 8010750:	6838      	ldr	r0, [r7, #0]
 8010752:	f000 fb67 	bl	8010e24 <prvAddCurrentTaskToDelayedList>
}
 8010756:	bf00      	nop
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20002994 	.word	0x20002994

08010764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d10b      	bne.n	8010792 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801077a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801077e:	f383 8811 	msr	BASEPRI, r3
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	f3bf 8f4f 	dsb	sy
 801078a:	60fb      	str	r3, [r7, #12]
}
 801078c:	bf00      	nop
 801078e:	bf00      	nop
 8010790:	e7fd      	b.n	801078e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010792:	693b      	ldr	r3, [r7, #16]
 8010794:	3318      	adds	r3, #24
 8010796:	4618      	mov	r0, r3
 8010798:	f7fe fdd7 	bl	800f34a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801079c:	4b1d      	ldr	r3, [pc, #116]	@ (8010814 <xTaskRemoveFromEventList+0xb0>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d11c      	bne.n	80107de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	3304      	adds	r3, #4
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fe fdce 	bl	800f34a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107b2:	2201      	movs	r2, #1
 80107b4:	409a      	lsls	r2, r3
 80107b6:	4b18      	ldr	r3, [pc, #96]	@ (8010818 <xTaskRemoveFromEventList+0xb4>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4313      	orrs	r3, r2
 80107bc:	4a16      	ldr	r2, [pc, #88]	@ (8010818 <xTaskRemoveFromEventList+0xb4>)
 80107be:	6013      	str	r3, [r2, #0]
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107c4:	4613      	mov	r3, r2
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	4413      	add	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	4a13      	ldr	r2, [pc, #76]	@ (801081c <xTaskRemoveFromEventList+0xb8>)
 80107ce:	441a      	add	r2, r3
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	3304      	adds	r3, #4
 80107d4:	4619      	mov	r1, r3
 80107d6:	4610      	mov	r0, r2
 80107d8:	f7fe fd5a 	bl	800f290 <vListInsertEnd>
 80107dc:	e005      	b.n	80107ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	3318      	adds	r3, #24
 80107e2:	4619      	mov	r1, r3
 80107e4:	480e      	ldr	r0, [pc, #56]	@ (8010820 <xTaskRemoveFromEventList+0xbc>)
 80107e6:	f7fe fd53 	bl	800f290 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010824 <xTaskRemoveFromEventList+0xc0>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d905      	bls.n	8010804 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80107f8:	2301      	movs	r3, #1
 80107fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80107fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010828 <xTaskRemoveFromEventList+0xc4>)
 80107fe:	2201      	movs	r2, #1
 8010800:	601a      	str	r2, [r3, #0]
 8010802:	e001      	b.n	8010808 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010804:	2300      	movs	r3, #0
 8010806:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010808:	697b      	ldr	r3, [r7, #20]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3718      	adds	r7, #24
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	20002abc 	.word	0x20002abc
 8010818:	20002a9c 	.word	0x20002a9c
 801081c:	20002998 	.word	0x20002998
 8010820:	20002a54 	.word	0x20002a54
 8010824:	20002994 	.word	0x20002994
 8010828:	20002aa8 	.word	0x20002aa8

0801082c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010834:	4b06      	ldr	r3, [pc, #24]	@ (8010850 <vTaskInternalSetTimeOutState+0x24>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801083c:	4b05      	ldr	r3, [pc, #20]	@ (8010854 <vTaskInternalSetTimeOutState+0x28>)
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	605a      	str	r2, [r3, #4]
}
 8010844:	bf00      	nop
 8010846:	370c      	adds	r7, #12
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr
 8010850:	20002aac 	.word	0x20002aac
 8010854:	20002a98 	.word	0x20002a98

08010858 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b088      	sub	sp, #32
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d10b      	bne.n	8010880 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	613b      	str	r3, [r7, #16]
}
 801087a:	bf00      	nop
 801087c:	bf00      	nop
 801087e:	e7fd      	b.n	801087c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d10b      	bne.n	801089e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801088a:	f383 8811 	msr	BASEPRI, r3
 801088e:	f3bf 8f6f 	isb	sy
 8010892:	f3bf 8f4f 	dsb	sy
 8010896:	60fb      	str	r3, [r7, #12]
}
 8010898:	bf00      	nop
 801089a:	bf00      	nop
 801089c:	e7fd      	b.n	801089a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801089e:	f000 fc5b 	bl	8011158 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80108a2:	4b1d      	ldr	r3, [pc, #116]	@ (8010918 <xTaskCheckForTimeOut+0xc0>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	69ba      	ldr	r2, [r7, #24]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ba:	d102      	bne.n	80108c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80108bc:	2300      	movs	r3, #0
 80108be:	61fb      	str	r3, [r7, #28]
 80108c0:	e023      	b.n	801090a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	4b15      	ldr	r3, [pc, #84]	@ (801091c <xTaskCheckForTimeOut+0xc4>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d007      	beq.n	80108de <xTaskCheckForTimeOut+0x86>
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	69ba      	ldr	r2, [r7, #24]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d302      	bcc.n	80108de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80108d8:	2301      	movs	r3, #1
 80108da:	61fb      	str	r3, [r7, #28]
 80108dc:	e015      	b.n	801090a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	697a      	ldr	r2, [r7, #20]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d20b      	bcs.n	8010900 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	681a      	ldr	r2, [r3, #0]
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	1ad2      	subs	r2, r2, r3
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7ff ff99 	bl	801082c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80108fa:	2300      	movs	r3, #0
 80108fc:	61fb      	str	r3, [r7, #28]
 80108fe:	e004      	b.n	801090a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	2200      	movs	r2, #0
 8010904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010906:	2301      	movs	r3, #1
 8010908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801090a:	f000 fc57 	bl	80111bc <vPortExitCritical>

	return xReturn;
 801090e:	69fb      	ldr	r3, [r7, #28]
}
 8010910:	4618      	mov	r0, r3
 8010912:	3720      	adds	r7, #32
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	20002a98 	.word	0x20002a98
 801091c:	20002aac 	.word	0x20002aac

08010920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010920:	b480      	push	{r7}
 8010922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010924:	4b03      	ldr	r3, [pc, #12]	@ (8010934 <vTaskMissedYield+0x14>)
 8010926:	2201      	movs	r2, #1
 8010928:	601a      	str	r2, [r3, #0]
}
 801092a:	bf00      	nop
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr
 8010934:	20002aa8 	.word	0x20002aa8

08010938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010940:	f000 f852 	bl	80109e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010944:	4b06      	ldr	r3, [pc, #24]	@ (8010960 <prvIdleTask+0x28>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d9f9      	bls.n	8010940 <prvIdleTask+0x8>
			{
				taskYIELD();
 801094c:	4b05      	ldr	r3, [pc, #20]	@ (8010964 <prvIdleTask+0x2c>)
 801094e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	f3bf 8f4f 	dsb	sy
 8010958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801095c:	e7f0      	b.n	8010940 <prvIdleTask+0x8>
 801095e:	bf00      	nop
 8010960:	20002998 	.word	0x20002998
 8010964:	e000ed04 	.word	0xe000ed04

08010968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801096e:	2300      	movs	r3, #0
 8010970:	607b      	str	r3, [r7, #4]
 8010972:	e00c      	b.n	801098e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	4613      	mov	r3, r2
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	4413      	add	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	4a12      	ldr	r2, [pc, #72]	@ (80109c8 <prvInitialiseTaskLists+0x60>)
 8010980:	4413      	add	r3, r2
 8010982:	4618      	mov	r0, r3
 8010984:	f7fe fc57 	bl	800f236 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3301      	adds	r3, #1
 801098c:	607b      	str	r3, [r7, #4]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b06      	cmp	r3, #6
 8010992:	d9ef      	bls.n	8010974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010994:	480d      	ldr	r0, [pc, #52]	@ (80109cc <prvInitialiseTaskLists+0x64>)
 8010996:	f7fe fc4e 	bl	800f236 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801099a:	480d      	ldr	r0, [pc, #52]	@ (80109d0 <prvInitialiseTaskLists+0x68>)
 801099c:	f7fe fc4b 	bl	800f236 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80109a0:	480c      	ldr	r0, [pc, #48]	@ (80109d4 <prvInitialiseTaskLists+0x6c>)
 80109a2:	f7fe fc48 	bl	800f236 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80109a6:	480c      	ldr	r0, [pc, #48]	@ (80109d8 <prvInitialiseTaskLists+0x70>)
 80109a8:	f7fe fc45 	bl	800f236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80109ac:	480b      	ldr	r0, [pc, #44]	@ (80109dc <prvInitialiseTaskLists+0x74>)
 80109ae:	f7fe fc42 	bl	800f236 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80109b2:	4b0b      	ldr	r3, [pc, #44]	@ (80109e0 <prvInitialiseTaskLists+0x78>)
 80109b4:	4a05      	ldr	r2, [pc, #20]	@ (80109cc <prvInitialiseTaskLists+0x64>)
 80109b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80109b8:	4b0a      	ldr	r3, [pc, #40]	@ (80109e4 <prvInitialiseTaskLists+0x7c>)
 80109ba:	4a05      	ldr	r2, [pc, #20]	@ (80109d0 <prvInitialiseTaskLists+0x68>)
 80109bc:	601a      	str	r2, [r3, #0]
}
 80109be:	bf00      	nop
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	20002998 	.word	0x20002998
 80109cc:	20002a24 	.word	0x20002a24
 80109d0:	20002a38 	.word	0x20002a38
 80109d4:	20002a54 	.word	0x20002a54
 80109d8:	20002a68 	.word	0x20002a68
 80109dc:	20002a80 	.word	0x20002a80
 80109e0:	20002a4c 	.word	0x20002a4c
 80109e4:	20002a50 	.word	0x20002a50

080109e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80109ee:	e019      	b.n	8010a24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80109f0:	f000 fbb2 	bl	8011158 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109f4:	4b10      	ldr	r3, [pc, #64]	@ (8010a38 <prvCheckTasksWaitingTermination+0x50>)
 80109f6:	68db      	ldr	r3, [r3, #12]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	3304      	adds	r3, #4
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fe fca2 	bl	800f34a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a06:	4b0d      	ldr	r3, [pc, #52]	@ (8010a3c <prvCheckTasksWaitingTermination+0x54>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3b01      	subs	r3, #1
 8010a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8010a3c <prvCheckTasksWaitingTermination+0x54>)
 8010a0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010a10:	4b0b      	ldr	r3, [pc, #44]	@ (8010a40 <prvCheckTasksWaitingTermination+0x58>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	4a0a      	ldr	r2, [pc, #40]	@ (8010a40 <prvCheckTasksWaitingTermination+0x58>)
 8010a18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010a1a:	f000 fbcf 	bl	80111bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 f810 	bl	8010a44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a24:	4b06      	ldr	r3, [pc, #24]	@ (8010a40 <prvCheckTasksWaitingTermination+0x58>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1e1      	bne.n	80109f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010a2c:	bf00      	nop
 8010a2e:	bf00      	nop
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	20002a68 	.word	0x20002a68
 8010a3c:	20002a94 	.word	0x20002a94
 8010a40:	20002a7c 	.word	0x20002a7c

08010a44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a50:	4618      	mov	r0, r3
 8010a52:	f000 fd71 	bl	8011538 <vPortFree>
			vPortFree( pxTCB );
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f000 fd6e 	bl	8011538 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010a5c:	bf00      	nop
 8010a5e:	3708      	adds	r7, #8
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8010a9c <prvResetNextTaskUnblockTime+0x38>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d104      	bne.n	8010a7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010a74:	4b0a      	ldr	r3, [pc, #40]	@ (8010aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8010a76:	f04f 32ff 	mov.w	r2, #4294967295
 8010a7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010a7c:	e008      	b.n	8010a90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a7e:	4b07      	ldr	r3, [pc, #28]	@ (8010a9c <prvResetNextTaskUnblockTime+0x38>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	4a04      	ldr	r2, [pc, #16]	@ (8010aa0 <prvResetNextTaskUnblockTime+0x3c>)
 8010a8e:	6013      	str	r3, [r2, #0]
}
 8010a90:	bf00      	nop
 8010a92:	370c      	adds	r7, #12
 8010a94:	46bd      	mov	sp, r7
 8010a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9a:	4770      	bx	lr
 8010a9c:	20002a4c 	.word	0x20002a4c
 8010aa0:	20002ab4 	.word	0x20002ab4

08010aa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8010ad8 <xTaskGetSchedulerState+0x34>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d102      	bne.n	8010ab8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	607b      	str	r3, [r7, #4]
 8010ab6:	e008      	b.n	8010aca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ab8:	4b08      	ldr	r3, [pc, #32]	@ (8010adc <xTaskGetSchedulerState+0x38>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d102      	bne.n	8010ac6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ac0:	2302      	movs	r3, #2
 8010ac2:	607b      	str	r3, [r7, #4]
 8010ac4:	e001      	b.n	8010aca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010aca:	687b      	ldr	r3, [r7, #4]
	}
 8010acc:	4618      	mov	r0, r3
 8010ace:	370c      	adds	r7, #12
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad6:	4770      	bx	lr
 8010ad8:	20002aa0 	.word	0x20002aa0
 8010adc:	20002abc 	.word	0x20002abc

08010ae0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b084      	sub	sp, #16
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010aec:	2300      	movs	r3, #0
 8010aee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d05e      	beq.n	8010bb4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010afa:	4b31      	ldr	r3, [pc, #196]	@ (8010bc0 <xTaskPriorityInherit+0xe0>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d24e      	bcs.n	8010ba2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	699b      	ldr	r3, [r3, #24]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	db06      	blt.n	8010b1a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8010bc0 <xTaskPriorityInherit+0xe0>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b12:	f1c3 0207 	rsb	r2, r3, #7
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	6959      	ldr	r1, [r3, #20]
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b22:	4613      	mov	r3, r2
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	4413      	add	r3, r2
 8010b28:	009b      	lsls	r3, r3, #2
 8010b2a:	4a26      	ldr	r2, [pc, #152]	@ (8010bc4 <xTaskPriorityInherit+0xe4>)
 8010b2c:	4413      	add	r3, r2
 8010b2e:	4299      	cmp	r1, r3
 8010b30:	d12f      	bne.n	8010b92 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	3304      	adds	r3, #4
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7fe fc07 	bl	800f34a <uxListRemove>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d10a      	bne.n	8010b58 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b46:	2201      	movs	r2, #1
 8010b48:	fa02 f303 	lsl.w	r3, r2, r3
 8010b4c:	43da      	mvns	r2, r3
 8010b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8010bc8 <xTaskPriorityInherit+0xe8>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	4013      	ands	r3, r2
 8010b54:	4a1c      	ldr	r2, [pc, #112]	@ (8010bc8 <xTaskPriorityInherit+0xe8>)
 8010b56:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010b58:	4b19      	ldr	r3, [pc, #100]	@ (8010bc0 <xTaskPriorityInherit+0xe0>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b66:	2201      	movs	r2, #1
 8010b68:	409a      	lsls	r2, r3
 8010b6a:	4b17      	ldr	r3, [pc, #92]	@ (8010bc8 <xTaskPriorityInherit+0xe8>)
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	4313      	orrs	r3, r2
 8010b70:	4a15      	ldr	r2, [pc, #84]	@ (8010bc8 <xTaskPriorityInherit+0xe8>)
 8010b72:	6013      	str	r3, [r2, #0]
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b78:	4613      	mov	r3, r2
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	4413      	add	r3, r2
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	4a10      	ldr	r2, [pc, #64]	@ (8010bc4 <xTaskPriorityInherit+0xe4>)
 8010b82:	441a      	add	r2, r3
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3304      	adds	r3, #4
 8010b88:	4619      	mov	r1, r3
 8010b8a:	4610      	mov	r0, r2
 8010b8c:	f7fe fb80 	bl	800f290 <vListInsertEnd>
 8010b90:	e004      	b.n	8010b9c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010b92:	4b0b      	ldr	r3, [pc, #44]	@ (8010bc0 <xTaskPriorityInherit+0xe0>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	60fb      	str	r3, [r7, #12]
 8010ba0:	e008      	b.n	8010bb4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ba6:	4b06      	ldr	r3, [pc, #24]	@ (8010bc0 <xTaskPriorityInherit+0xe0>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d201      	bcs.n	8010bb4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
	}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3710      	adds	r7, #16
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}
 8010bbe:	bf00      	nop
 8010bc0:	20002994 	.word	0x20002994
 8010bc4:	20002998 	.word	0x20002998
 8010bc8:	20002a9c 	.word	0x20002a9c

08010bcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b086      	sub	sp, #24
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d070      	beq.n	8010cc4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010be2:	4b3b      	ldr	r3, [pc, #236]	@ (8010cd0 <xTaskPriorityDisinherit+0x104>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	693a      	ldr	r2, [r7, #16]
 8010be8:	429a      	cmp	r2, r3
 8010bea:	d00b      	beq.n	8010c04 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf0:	f383 8811 	msr	BASEPRI, r3
 8010bf4:	f3bf 8f6f 	isb	sy
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	60fb      	str	r3, [r7, #12]
}
 8010bfe:	bf00      	nop
 8010c00:	bf00      	nop
 8010c02:	e7fd      	b.n	8010c00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d10b      	bne.n	8010c24 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c10:	f383 8811 	msr	BASEPRI, r3
 8010c14:	f3bf 8f6f 	isb	sy
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	60bb      	str	r3, [r7, #8]
}
 8010c1e:	bf00      	nop
 8010c20:	bf00      	nop
 8010c22:	e7fd      	b.n	8010c20 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c28:	1e5a      	subs	r2, r3, #1
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d044      	beq.n	8010cc4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d140      	bne.n	8010cc4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	3304      	adds	r3, #4
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fe fb7f 	bl	800f34a <uxListRemove>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d115      	bne.n	8010c7e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c56:	491f      	ldr	r1, [pc, #124]	@ (8010cd4 <xTaskPriorityDisinherit+0x108>)
 8010c58:	4613      	mov	r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	440b      	add	r3, r1
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d10a      	bne.n	8010c7e <xTaskPriorityDisinherit+0xb2>
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c72:	43da      	mvns	r2, r3
 8010c74:	4b18      	ldr	r3, [pc, #96]	@ (8010cd8 <xTaskPriorityDisinherit+0x10c>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	4013      	ands	r3, r2
 8010c7a:	4a17      	ldr	r2, [pc, #92]	@ (8010cd8 <xTaskPriorityDisinherit+0x10c>)
 8010c7c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c8a:	f1c3 0207 	rsb	r2, r3, #7
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c96:	2201      	movs	r2, #1
 8010c98:	409a      	lsls	r2, r3
 8010c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8010cd8 <xTaskPriorityDisinherit+0x10c>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8010cd8 <xTaskPriorityDisinherit+0x10c>)
 8010ca2:	6013      	str	r3, [r2, #0]
 8010ca4:	693b      	ldr	r3, [r7, #16]
 8010ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ca8:	4613      	mov	r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	4413      	add	r3, r2
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	4a08      	ldr	r2, [pc, #32]	@ (8010cd4 <xTaskPriorityDisinherit+0x108>)
 8010cb2:	441a      	add	r2, r3
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	3304      	adds	r3, #4
 8010cb8:	4619      	mov	r1, r3
 8010cba:	4610      	mov	r0, r2
 8010cbc:	f7fe fae8 	bl	800f290 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010cc4:	697b      	ldr	r3, [r7, #20]
	}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3718      	adds	r7, #24
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	20002994 	.word	0x20002994
 8010cd4:	20002998 	.word	0x20002998
 8010cd8:	20002a9c 	.word	0x20002a9c

08010cdc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b088      	sub	sp, #32
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010cea:	2301      	movs	r3, #1
 8010cec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d079      	beq.n	8010de8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010cf4:	69bb      	ldr	r3, [r7, #24]
 8010cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10b      	bne.n	8010d14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	60fb      	str	r3, [r7, #12]
}
 8010d0e:	bf00      	nop
 8010d10:	bf00      	nop
 8010d12:	e7fd      	b.n	8010d10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010d14:	69bb      	ldr	r3, [r7, #24]
 8010d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d18:	683a      	ldr	r2, [r7, #0]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d902      	bls.n	8010d24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	61fb      	str	r3, [r7, #28]
 8010d22:	e002      	b.n	8010d2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010d2a:	69bb      	ldr	r3, [r7, #24]
 8010d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d2e:	69fa      	ldr	r2, [r7, #28]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d059      	beq.n	8010de8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010d38:	697a      	ldr	r2, [r7, #20]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d154      	bne.n	8010de8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8010df0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	69ba      	ldr	r2, [r7, #24]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d10b      	bne.n	8010d60 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d4c:	f383 8811 	msr	BASEPRI, r3
 8010d50:	f3bf 8f6f 	isb	sy
 8010d54:	f3bf 8f4f 	dsb	sy
 8010d58:	60bb      	str	r3, [r7, #8]
}
 8010d5a:	bf00      	nop
 8010d5c:	bf00      	nop
 8010d5e:	e7fd      	b.n	8010d5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010d60:	69bb      	ldr	r3, [r7, #24]
 8010d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	69fa      	ldr	r2, [r7, #28]
 8010d6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010d6c:	69bb      	ldr	r3, [r7, #24]
 8010d6e:	699b      	ldr	r3, [r3, #24]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	db04      	blt.n	8010d7e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d74:	69fb      	ldr	r3, [r7, #28]
 8010d76:	f1c3 0207 	rsb	r2, r3, #7
 8010d7a:	69bb      	ldr	r3, [r7, #24]
 8010d7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	6959      	ldr	r1, [r3, #20]
 8010d82:	693a      	ldr	r2, [r7, #16]
 8010d84:	4613      	mov	r3, r2
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	4413      	add	r3, r2
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	4a19      	ldr	r2, [pc, #100]	@ (8010df4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010d8e:	4413      	add	r3, r2
 8010d90:	4299      	cmp	r1, r3
 8010d92:	d129      	bne.n	8010de8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d94:	69bb      	ldr	r3, [r7, #24]
 8010d96:	3304      	adds	r3, #4
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fe fad6 	bl	800f34a <uxListRemove>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d10a      	bne.n	8010dba <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010da8:	2201      	movs	r2, #1
 8010daa:	fa02 f303 	lsl.w	r3, r2, r3
 8010dae:	43da      	mvns	r2, r3
 8010db0:	4b11      	ldr	r3, [pc, #68]	@ (8010df8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	4013      	ands	r3, r2
 8010db6:	4a10      	ldr	r2, [pc, #64]	@ (8010df8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010db8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010dba:	69bb      	ldr	r3, [r7, #24]
 8010dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	409a      	lsls	r2, r3
 8010dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8010df8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8010df8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8010dca:	6013      	str	r3, [r2, #0]
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	009b      	lsls	r3, r3, #2
 8010dd4:	4413      	add	r3, r2
 8010dd6:	009b      	lsls	r3, r3, #2
 8010dd8:	4a06      	ldr	r2, [pc, #24]	@ (8010df4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010dda:	441a      	add	r2, r3
 8010ddc:	69bb      	ldr	r3, [r7, #24]
 8010dde:	3304      	adds	r3, #4
 8010de0:	4619      	mov	r1, r3
 8010de2:	4610      	mov	r0, r2
 8010de4:	f7fe fa54 	bl	800f290 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010de8:	bf00      	nop
 8010dea:	3720      	adds	r7, #32
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}
 8010df0:	20002994 	.word	0x20002994
 8010df4:	20002998 	.word	0x20002998
 8010df8:	20002a9c 	.word	0x20002a9c

08010dfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010dfc:	b480      	push	{r7}
 8010dfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010e00:	4b07      	ldr	r3, [pc, #28]	@ (8010e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d004      	beq.n	8010e12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010e08:	4b05      	ldr	r3, [pc, #20]	@ (8010e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010e0e:	3201      	adds	r2, #1
 8010e10:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8010e12:	4b03      	ldr	r3, [pc, #12]	@ (8010e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e14:	681b      	ldr	r3, [r3, #0]
	}
 8010e16:	4618      	mov	r0, r3
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr
 8010e20:	20002994 	.word	0x20002994

08010e24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
 8010e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010e2e:	4b29      	ldr	r3, [pc, #164]	@ (8010ed4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e34:	4b28      	ldr	r3, [pc, #160]	@ (8010ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	3304      	adds	r3, #4
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7fe fa85 	bl	800f34a <uxListRemove>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10b      	bne.n	8010e5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010e46:	4b24      	ldr	r3, [pc, #144]	@ (8010ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e4c:	2201      	movs	r2, #1
 8010e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8010e52:	43da      	mvns	r2, r3
 8010e54:	4b21      	ldr	r3, [pc, #132]	@ (8010edc <prvAddCurrentTaskToDelayedList+0xb8>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4013      	ands	r3, r2
 8010e5a:	4a20      	ldr	r2, [pc, #128]	@ (8010edc <prvAddCurrentTaskToDelayedList+0xb8>)
 8010e5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e64:	d10a      	bne.n	8010e7c <prvAddCurrentTaskToDelayedList+0x58>
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d007      	beq.n	8010e7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	3304      	adds	r3, #4
 8010e72:	4619      	mov	r1, r3
 8010e74:	481a      	ldr	r0, [pc, #104]	@ (8010ee0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010e76:	f7fe fa0b 	bl	800f290 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010e7a:	e026      	b.n	8010eca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4413      	add	r3, r2
 8010e82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010e84:	4b14      	ldr	r3, [pc, #80]	@ (8010ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010e8c:	68ba      	ldr	r2, [r7, #8]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d209      	bcs.n	8010ea8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e94:	4b13      	ldr	r3, [pc, #76]	@ (8010ee4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	4b0f      	ldr	r3, [pc, #60]	@ (8010ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	3304      	adds	r3, #4
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	f7fe fa19 	bl	800f2d8 <vListInsert>
}
 8010ea6:	e010      	b.n	8010eca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8010ee8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	4b0a      	ldr	r3, [pc, #40]	@ (8010ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	3304      	adds	r3, #4
 8010eb2:	4619      	mov	r1, r3
 8010eb4:	4610      	mov	r0, r2
 8010eb6:	f7fe fa0f 	bl	800f2d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010eba:	4b0c      	ldr	r3, [pc, #48]	@ (8010eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	68ba      	ldr	r2, [r7, #8]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d202      	bcs.n	8010eca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010ec4:	4a09      	ldr	r2, [pc, #36]	@ (8010eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	6013      	str	r3, [r2, #0]
}
 8010eca:	bf00      	nop
 8010ecc:	3710      	adds	r7, #16
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}
 8010ed2:	bf00      	nop
 8010ed4:	20002a98 	.word	0x20002a98
 8010ed8:	20002994 	.word	0x20002994
 8010edc:	20002a9c 	.word	0x20002a9c
 8010ee0:	20002a80 	.word	0x20002a80
 8010ee4:	20002a50 	.word	0x20002a50
 8010ee8:	20002a4c 	.word	0x20002a4c
 8010eec:	20002ab4 	.word	0x20002ab4

08010ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b085      	sub	sp, #20
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	3b04      	subs	r3, #4
 8010f00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	3b04      	subs	r3, #4
 8010f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	f023 0201 	bic.w	r2, r3, #1
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	3b04      	subs	r3, #4
 8010f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010f20:	4a0c      	ldr	r2, [pc, #48]	@ (8010f54 <pxPortInitialiseStack+0x64>)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	3b14      	subs	r3, #20
 8010f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	3b04      	subs	r3, #4
 8010f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	f06f 0202 	mvn.w	r2, #2
 8010f3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	3b20      	subs	r3, #32
 8010f44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010f46:	68fb      	ldr	r3, [r7, #12]
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3714      	adds	r7, #20
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	08010f59 	.word	0x08010f59

08010f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b085      	sub	sp, #20
 8010f5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010f62:	4b13      	ldr	r3, [pc, #76]	@ (8010fb0 <prvTaskExitError+0x58>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f6a:	d00b      	beq.n	8010f84 <prvTaskExitError+0x2c>
	__asm volatile
 8010f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f70:	f383 8811 	msr	BASEPRI, r3
 8010f74:	f3bf 8f6f 	isb	sy
 8010f78:	f3bf 8f4f 	dsb	sy
 8010f7c:	60fb      	str	r3, [r7, #12]
}
 8010f7e:	bf00      	nop
 8010f80:	bf00      	nop
 8010f82:	e7fd      	b.n	8010f80 <prvTaskExitError+0x28>
	__asm volatile
 8010f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f88:	f383 8811 	msr	BASEPRI, r3
 8010f8c:	f3bf 8f6f 	isb	sy
 8010f90:	f3bf 8f4f 	dsb	sy
 8010f94:	60bb      	str	r3, [r7, #8]
}
 8010f96:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010f98:	bf00      	nop
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d0fc      	beq.n	8010f9a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010fa0:	bf00      	nop
 8010fa2:	bf00      	nop
 8010fa4:	3714      	adds	r7, #20
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop
 8010fb0:	20000030 	.word	0x20000030
	...

08010fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010fc0:	4b07      	ldr	r3, [pc, #28]	@ (8010fe0 <pxCurrentTCBConst2>)
 8010fc2:	6819      	ldr	r1, [r3, #0]
 8010fc4:	6808      	ldr	r0, [r1, #0]
 8010fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fca:	f380 8809 	msr	PSP, r0
 8010fce:	f3bf 8f6f 	isb	sy
 8010fd2:	f04f 0000 	mov.w	r0, #0
 8010fd6:	f380 8811 	msr	BASEPRI, r0
 8010fda:	4770      	bx	lr
 8010fdc:	f3af 8000 	nop.w

08010fe0 <pxCurrentTCBConst2>:
 8010fe0:	20002994 	.word	0x20002994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010fe4:	bf00      	nop
 8010fe6:	bf00      	nop

08010fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010fe8:	4808      	ldr	r0, [pc, #32]	@ (801100c <prvPortStartFirstTask+0x24>)
 8010fea:	6800      	ldr	r0, [r0, #0]
 8010fec:	6800      	ldr	r0, [r0, #0]
 8010fee:	f380 8808 	msr	MSP, r0
 8010ff2:	f04f 0000 	mov.w	r0, #0
 8010ff6:	f380 8814 	msr	CONTROL, r0
 8010ffa:	b662      	cpsie	i
 8010ffc:	b661      	cpsie	f
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	df00      	svc	0
 8011008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801100a:	bf00      	nop
 801100c:	e000ed08 	.word	0xe000ed08

08011010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b086      	sub	sp, #24
 8011014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011016:	4b47      	ldr	r3, [pc, #284]	@ (8011134 <xPortStartScheduler+0x124>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	4a47      	ldr	r2, [pc, #284]	@ (8011138 <xPortStartScheduler+0x128>)
 801101c:	4293      	cmp	r3, r2
 801101e:	d10b      	bne.n	8011038 <xPortStartScheduler+0x28>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	613b      	str	r3, [r7, #16]
}
 8011032:	bf00      	nop
 8011034:	bf00      	nop
 8011036:	e7fd      	b.n	8011034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011038:	4b3e      	ldr	r3, [pc, #248]	@ (8011134 <xPortStartScheduler+0x124>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	4a3f      	ldr	r2, [pc, #252]	@ (801113c <xPortStartScheduler+0x12c>)
 801103e:	4293      	cmp	r3, r2
 8011040:	d10b      	bne.n	801105a <xPortStartScheduler+0x4a>
	__asm volatile
 8011042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	60fb      	str	r3, [r7, #12]
}
 8011054:	bf00      	nop
 8011056:	bf00      	nop
 8011058:	e7fd      	b.n	8011056 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801105a:	4b39      	ldr	r3, [pc, #228]	@ (8011140 <xPortStartScheduler+0x130>)
 801105c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	b2db      	uxtb	r3, r3
 8011064:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	22ff      	movs	r2, #255	@ 0xff
 801106a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	b2db      	uxtb	r3, r3
 8011072:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011074:	78fb      	ldrb	r3, [r7, #3]
 8011076:	b2db      	uxtb	r3, r3
 8011078:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801107c:	b2da      	uxtb	r2, r3
 801107e:	4b31      	ldr	r3, [pc, #196]	@ (8011144 <xPortStartScheduler+0x134>)
 8011080:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011082:	4b31      	ldr	r3, [pc, #196]	@ (8011148 <xPortStartScheduler+0x138>)
 8011084:	2207      	movs	r2, #7
 8011086:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011088:	e009      	b.n	801109e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801108a:	4b2f      	ldr	r3, [pc, #188]	@ (8011148 <xPortStartScheduler+0x138>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	3b01      	subs	r3, #1
 8011090:	4a2d      	ldr	r2, [pc, #180]	@ (8011148 <xPortStartScheduler+0x138>)
 8011092:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011094:	78fb      	ldrb	r3, [r7, #3]
 8011096:	b2db      	uxtb	r3, r3
 8011098:	005b      	lsls	r3, r3, #1
 801109a:	b2db      	uxtb	r3, r3
 801109c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801109e:	78fb      	ldrb	r3, [r7, #3]
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80110a6:	2b80      	cmp	r3, #128	@ 0x80
 80110a8:	d0ef      	beq.n	801108a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80110aa:	4b27      	ldr	r3, [pc, #156]	@ (8011148 <xPortStartScheduler+0x138>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f1c3 0307 	rsb	r3, r3, #7
 80110b2:	2b04      	cmp	r3, #4
 80110b4:	d00b      	beq.n	80110ce <xPortStartScheduler+0xbe>
	__asm volatile
 80110b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ba:	f383 8811 	msr	BASEPRI, r3
 80110be:	f3bf 8f6f 	isb	sy
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	60bb      	str	r3, [r7, #8]
}
 80110c8:	bf00      	nop
 80110ca:	bf00      	nop
 80110cc:	e7fd      	b.n	80110ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80110ce:	4b1e      	ldr	r3, [pc, #120]	@ (8011148 <xPortStartScheduler+0x138>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	021b      	lsls	r3, r3, #8
 80110d4:	4a1c      	ldr	r2, [pc, #112]	@ (8011148 <xPortStartScheduler+0x138>)
 80110d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80110d8:	4b1b      	ldr	r3, [pc, #108]	@ (8011148 <xPortStartScheduler+0x138>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80110e0:	4a19      	ldr	r2, [pc, #100]	@ (8011148 <xPortStartScheduler+0x138>)
 80110e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80110ec:	4b17      	ldr	r3, [pc, #92]	@ (801114c <xPortStartScheduler+0x13c>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a16      	ldr	r2, [pc, #88]	@ (801114c <xPortStartScheduler+0x13c>)
 80110f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80110f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80110f8:	4b14      	ldr	r3, [pc, #80]	@ (801114c <xPortStartScheduler+0x13c>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4a13      	ldr	r2, [pc, #76]	@ (801114c <xPortStartScheduler+0x13c>)
 80110fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011102:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011104:	f000 f8da 	bl	80112bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011108:	4b11      	ldr	r3, [pc, #68]	@ (8011150 <xPortStartScheduler+0x140>)
 801110a:	2200      	movs	r2, #0
 801110c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801110e:	f000 f8f9 	bl	8011304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011112:	4b10      	ldr	r3, [pc, #64]	@ (8011154 <xPortStartScheduler+0x144>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	4a0f      	ldr	r2, [pc, #60]	@ (8011154 <xPortStartScheduler+0x144>)
 8011118:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801111c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801111e:	f7ff ff63 	bl	8010fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011122:	f7ff fa9d 	bl	8010660 <vTaskSwitchContext>
	prvTaskExitError();
 8011126:	f7ff ff17 	bl	8010f58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801112a:	2300      	movs	r3, #0
}
 801112c:	4618      	mov	r0, r3
 801112e:	3718      	adds	r7, #24
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	e000ed00 	.word	0xe000ed00
 8011138:	410fc271 	.word	0x410fc271
 801113c:	410fc270 	.word	0x410fc270
 8011140:	e000e400 	.word	0xe000e400
 8011144:	20002ac0 	.word	0x20002ac0
 8011148:	20002ac4 	.word	0x20002ac4
 801114c:	e000ed20 	.word	0xe000ed20
 8011150:	20000030 	.word	0x20000030
 8011154:	e000ef34 	.word	0xe000ef34

08011158 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
	__asm volatile
 801115e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011162:	f383 8811 	msr	BASEPRI, r3
 8011166:	f3bf 8f6f 	isb	sy
 801116a:	f3bf 8f4f 	dsb	sy
 801116e:	607b      	str	r3, [r7, #4]
}
 8011170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011172:	4b10      	ldr	r3, [pc, #64]	@ (80111b4 <vPortEnterCritical+0x5c>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	3301      	adds	r3, #1
 8011178:	4a0e      	ldr	r2, [pc, #56]	@ (80111b4 <vPortEnterCritical+0x5c>)
 801117a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801117c:	4b0d      	ldr	r3, [pc, #52]	@ (80111b4 <vPortEnterCritical+0x5c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	2b01      	cmp	r3, #1
 8011182:	d110      	bne.n	80111a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011184:	4b0c      	ldr	r3, [pc, #48]	@ (80111b8 <vPortEnterCritical+0x60>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	b2db      	uxtb	r3, r3
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00b      	beq.n	80111a6 <vPortEnterCritical+0x4e>
	__asm volatile
 801118e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011192:	f383 8811 	msr	BASEPRI, r3
 8011196:	f3bf 8f6f 	isb	sy
 801119a:	f3bf 8f4f 	dsb	sy
 801119e:	603b      	str	r3, [r7, #0]
}
 80111a0:	bf00      	nop
 80111a2:	bf00      	nop
 80111a4:	e7fd      	b.n	80111a2 <vPortEnterCritical+0x4a>
	}
}
 80111a6:	bf00      	nop
 80111a8:	370c      	adds	r7, #12
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop
 80111b4:	20000030 	.word	0x20000030
 80111b8:	e000ed04 	.word	0xe000ed04

080111bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80111c2:	4b12      	ldr	r3, [pc, #72]	@ (801120c <vPortExitCritical+0x50>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d10b      	bne.n	80111e2 <vPortExitCritical+0x26>
	__asm volatile
 80111ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ce:	f383 8811 	msr	BASEPRI, r3
 80111d2:	f3bf 8f6f 	isb	sy
 80111d6:	f3bf 8f4f 	dsb	sy
 80111da:	607b      	str	r3, [r7, #4]
}
 80111dc:	bf00      	nop
 80111de:	bf00      	nop
 80111e0:	e7fd      	b.n	80111de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80111e2:	4b0a      	ldr	r3, [pc, #40]	@ (801120c <vPortExitCritical+0x50>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	3b01      	subs	r3, #1
 80111e8:	4a08      	ldr	r2, [pc, #32]	@ (801120c <vPortExitCritical+0x50>)
 80111ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80111ec:	4b07      	ldr	r3, [pc, #28]	@ (801120c <vPortExitCritical+0x50>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d105      	bne.n	8011200 <vPortExitCritical+0x44>
 80111f4:	2300      	movs	r3, #0
 80111f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80111f8:	683b      	ldr	r3, [r7, #0]
 80111fa:	f383 8811 	msr	BASEPRI, r3
}
 80111fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011200:	bf00      	nop
 8011202:	370c      	adds	r7, #12
 8011204:	46bd      	mov	sp, r7
 8011206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120a:	4770      	bx	lr
 801120c:	20000030 	.word	0x20000030

08011210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011210:	f3ef 8009 	mrs	r0, PSP
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	4b15      	ldr	r3, [pc, #84]	@ (8011270 <pxCurrentTCBConst>)
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	f01e 0f10 	tst.w	lr, #16
 8011220:	bf08      	it	eq
 8011222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801122a:	6010      	str	r0, [r2, #0]
 801122c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011230:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011234:	f380 8811 	msr	BASEPRI, r0
 8011238:	f3bf 8f4f 	dsb	sy
 801123c:	f3bf 8f6f 	isb	sy
 8011240:	f7ff fa0e 	bl	8010660 <vTaskSwitchContext>
 8011244:	f04f 0000 	mov.w	r0, #0
 8011248:	f380 8811 	msr	BASEPRI, r0
 801124c:	bc09      	pop	{r0, r3}
 801124e:	6819      	ldr	r1, [r3, #0]
 8011250:	6808      	ldr	r0, [r1, #0]
 8011252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011256:	f01e 0f10 	tst.w	lr, #16
 801125a:	bf08      	it	eq
 801125c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011260:	f380 8809 	msr	PSP, r0
 8011264:	f3bf 8f6f 	isb	sy
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	f3af 8000 	nop.w

08011270 <pxCurrentTCBConst>:
 8011270:	20002994 	.word	0x20002994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011274:	bf00      	nop
 8011276:	bf00      	nop

08011278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
	__asm volatile
 801127e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011282:	f383 8811 	msr	BASEPRI, r3
 8011286:	f3bf 8f6f 	isb	sy
 801128a:	f3bf 8f4f 	dsb	sy
 801128e:	607b      	str	r3, [r7, #4]
}
 8011290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011292:	f7ff f92b 	bl	80104ec <xTaskIncrementTick>
 8011296:	4603      	mov	r3, r0
 8011298:	2b00      	cmp	r3, #0
 801129a:	d003      	beq.n	80112a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801129c:	4b06      	ldr	r3, [pc, #24]	@ (80112b8 <SysTick_Handler+0x40>)
 801129e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112a2:	601a      	str	r2, [r3, #0]
 80112a4:	2300      	movs	r3, #0
 80112a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	f383 8811 	msr	BASEPRI, r3
}
 80112ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80112b0:	bf00      	nop
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	e000ed04 	.word	0xe000ed04

080112bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80112bc:	b480      	push	{r7}
 80112be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80112c0:	4b0b      	ldr	r3, [pc, #44]	@ (80112f0 <vPortSetupTimerInterrupt+0x34>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80112c6:	4b0b      	ldr	r3, [pc, #44]	@ (80112f4 <vPortSetupTimerInterrupt+0x38>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80112cc:	4b0a      	ldr	r3, [pc, #40]	@ (80112f8 <vPortSetupTimerInterrupt+0x3c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	4a0a      	ldr	r2, [pc, #40]	@ (80112fc <vPortSetupTimerInterrupt+0x40>)
 80112d2:	fba2 2303 	umull	r2, r3, r2, r3
 80112d6:	099b      	lsrs	r3, r3, #6
 80112d8:	4a09      	ldr	r2, [pc, #36]	@ (8011300 <vPortSetupTimerInterrupt+0x44>)
 80112da:	3b01      	subs	r3, #1
 80112dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80112de:	4b04      	ldr	r3, [pc, #16]	@ (80112f0 <vPortSetupTimerInterrupt+0x34>)
 80112e0:	2207      	movs	r2, #7
 80112e2:	601a      	str	r2, [r3, #0]
}
 80112e4:	bf00      	nop
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop
 80112f0:	e000e010 	.word	0xe000e010
 80112f4:	e000e018 	.word	0xe000e018
 80112f8:	20000004 	.word	0x20000004
 80112fc:	10624dd3 	.word	0x10624dd3
 8011300:	e000e014 	.word	0xe000e014

08011304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011304:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011314 <vPortEnableVFP+0x10>
 8011308:	6801      	ldr	r1, [r0, #0]
 801130a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801130e:	6001      	str	r1, [r0, #0]
 8011310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011312:	bf00      	nop
 8011314:	e000ed88 	.word	0xe000ed88

08011318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011318:	b480      	push	{r7}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801131e:	f3ef 8305 	mrs	r3, IPSR
 8011322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	2b0f      	cmp	r3, #15
 8011328:	d915      	bls.n	8011356 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801132a:	4a18      	ldr	r2, [pc, #96]	@ (801138c <vPortValidateInterruptPriority+0x74>)
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	4413      	add	r3, r2
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011334:	4b16      	ldr	r3, [pc, #88]	@ (8011390 <vPortValidateInterruptPriority+0x78>)
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	7afa      	ldrb	r2, [r7, #11]
 801133a:	429a      	cmp	r2, r3
 801133c:	d20b      	bcs.n	8011356 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801133e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	607b      	str	r3, [r7, #4]
}
 8011350:	bf00      	nop
 8011352:	bf00      	nop
 8011354:	e7fd      	b.n	8011352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011356:	4b0f      	ldr	r3, [pc, #60]	@ (8011394 <vPortValidateInterruptPriority+0x7c>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801135e:	4b0e      	ldr	r3, [pc, #56]	@ (8011398 <vPortValidateInterruptPriority+0x80>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	429a      	cmp	r2, r3
 8011364:	d90b      	bls.n	801137e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801136a:	f383 8811 	msr	BASEPRI, r3
 801136e:	f3bf 8f6f 	isb	sy
 8011372:	f3bf 8f4f 	dsb	sy
 8011376:	603b      	str	r3, [r7, #0]
}
 8011378:	bf00      	nop
 801137a:	bf00      	nop
 801137c:	e7fd      	b.n	801137a <vPortValidateInterruptPriority+0x62>
	}
 801137e:	bf00      	nop
 8011380:	3714      	adds	r7, #20
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	e000e3f0 	.word	0xe000e3f0
 8011390:	20002ac0 	.word	0x20002ac0
 8011394:	e000ed0c 	.word	0xe000ed0c
 8011398:	20002ac4 	.word	0x20002ac4

0801139c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b08a      	sub	sp, #40	@ 0x28
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80113a4:	2300      	movs	r3, #0
 80113a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80113a8:	f7fe ffe4 	bl	8010374 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80113ac:	4b5c      	ldr	r3, [pc, #368]	@ (8011520 <pvPortMalloc+0x184>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d101      	bne.n	80113b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80113b4:	f000 f930 	bl	8011618 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80113b8:	4b5a      	ldr	r3, [pc, #360]	@ (8011524 <pvPortMalloc+0x188>)
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	4013      	ands	r3, r2
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	f040 8095 	bne.w	80114f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d01e      	beq.n	801140a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80113cc:	2208      	movs	r2, #8
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	4413      	add	r3, r2
 80113d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f003 0307 	and.w	r3, r3, #7
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d015      	beq.n	801140a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f023 0307 	bic.w	r3, r3, #7
 80113e4:	3308      	adds	r3, #8
 80113e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f003 0307 	and.w	r3, r3, #7
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00b      	beq.n	801140a <pvPortMalloc+0x6e>
	__asm volatile
 80113f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113f6:	f383 8811 	msr	BASEPRI, r3
 80113fa:	f3bf 8f6f 	isb	sy
 80113fe:	f3bf 8f4f 	dsb	sy
 8011402:	617b      	str	r3, [r7, #20]
}
 8011404:	bf00      	nop
 8011406:	bf00      	nop
 8011408:	e7fd      	b.n	8011406 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d06f      	beq.n	80114f0 <pvPortMalloc+0x154>
 8011410:	4b45      	ldr	r3, [pc, #276]	@ (8011528 <pvPortMalloc+0x18c>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	687a      	ldr	r2, [r7, #4]
 8011416:	429a      	cmp	r2, r3
 8011418:	d86a      	bhi.n	80114f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801141a:	4b44      	ldr	r3, [pc, #272]	@ (801152c <pvPortMalloc+0x190>)
 801141c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801141e:	4b43      	ldr	r3, [pc, #268]	@ (801152c <pvPortMalloc+0x190>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011424:	e004      	b.n	8011430 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011428:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	429a      	cmp	r2, r3
 8011438:	d903      	bls.n	8011442 <pvPortMalloc+0xa6>
 801143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d1f1      	bne.n	8011426 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011442:	4b37      	ldr	r3, [pc, #220]	@ (8011520 <pvPortMalloc+0x184>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011448:	429a      	cmp	r2, r3
 801144a:	d051      	beq.n	80114f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801144c:	6a3b      	ldr	r3, [r7, #32]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2208      	movs	r2, #8
 8011452:	4413      	add	r3, r2
 8011454:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	6a3b      	ldr	r3, [r7, #32]
 801145c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011460:	685a      	ldr	r2, [r3, #4]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	1ad2      	subs	r2, r2, r3
 8011466:	2308      	movs	r3, #8
 8011468:	005b      	lsls	r3, r3, #1
 801146a:	429a      	cmp	r2, r3
 801146c:	d920      	bls.n	80114b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801146e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	4413      	add	r3, r2
 8011474:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011476:	69bb      	ldr	r3, [r7, #24]
 8011478:	f003 0307 	and.w	r3, r3, #7
 801147c:	2b00      	cmp	r3, #0
 801147e:	d00b      	beq.n	8011498 <pvPortMalloc+0xfc>
	__asm volatile
 8011480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011484:	f383 8811 	msr	BASEPRI, r3
 8011488:	f3bf 8f6f 	isb	sy
 801148c:	f3bf 8f4f 	dsb	sy
 8011490:	613b      	str	r3, [r7, #16]
}
 8011492:	bf00      	nop
 8011494:	bf00      	nop
 8011496:	e7fd      	b.n	8011494 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801149a:	685a      	ldr	r2, [r3, #4]
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	1ad2      	subs	r2, r2, r3
 80114a0:	69bb      	ldr	r3, [r7, #24]
 80114a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80114a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80114aa:	69b8      	ldr	r0, [r7, #24]
 80114ac:	f000 f918 	bl	80116e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80114b0:	4b1d      	ldr	r3, [pc, #116]	@ (8011528 <pvPortMalloc+0x18c>)
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	1ad3      	subs	r3, r2, r3
 80114ba:	4a1b      	ldr	r2, [pc, #108]	@ (8011528 <pvPortMalloc+0x18c>)
 80114bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114be:	4b1a      	ldr	r3, [pc, #104]	@ (8011528 <pvPortMalloc+0x18c>)
 80114c0:	681a      	ldr	r2, [r3, #0]
 80114c2:	4b1b      	ldr	r3, [pc, #108]	@ (8011530 <pvPortMalloc+0x194>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d203      	bcs.n	80114d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80114ca:	4b17      	ldr	r3, [pc, #92]	@ (8011528 <pvPortMalloc+0x18c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	4a18      	ldr	r2, [pc, #96]	@ (8011530 <pvPortMalloc+0x194>)
 80114d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80114d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d4:	685a      	ldr	r2, [r3, #4]
 80114d6:	4b13      	ldr	r3, [pc, #76]	@ (8011524 <pvPortMalloc+0x188>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	431a      	orrs	r2, r3
 80114dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80114e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e2:	2200      	movs	r2, #0
 80114e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80114e6:	4b13      	ldr	r3, [pc, #76]	@ (8011534 <pvPortMalloc+0x198>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	3301      	adds	r3, #1
 80114ec:	4a11      	ldr	r2, [pc, #68]	@ (8011534 <pvPortMalloc+0x198>)
 80114ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80114f0:	f7fe ff4e 	bl	8010390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	f003 0307 	and.w	r3, r3, #7
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00b      	beq.n	8011516 <pvPortMalloc+0x17a>
	__asm volatile
 80114fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011502:	f383 8811 	msr	BASEPRI, r3
 8011506:	f3bf 8f6f 	isb	sy
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	60fb      	str	r3, [r7, #12]
}
 8011510:	bf00      	nop
 8011512:	bf00      	nop
 8011514:	e7fd      	b.n	8011512 <pvPortMalloc+0x176>
	return pvReturn;
 8011516:	69fb      	ldr	r3, [r7, #28]
}
 8011518:	4618      	mov	r0, r3
 801151a:	3728      	adds	r7, #40	@ 0x28
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}
 8011520:	20016350 	.word	0x20016350
 8011524:	20016364 	.word	0x20016364
 8011528:	20016354 	.word	0x20016354
 801152c:	20016348 	.word	0x20016348
 8011530:	20016358 	.word	0x20016358
 8011534:	2001635c 	.word	0x2001635c

08011538 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d04f      	beq.n	80115ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801154a:	2308      	movs	r3, #8
 801154c:	425b      	negs	r3, r3
 801154e:	697a      	ldr	r2, [r7, #20]
 8011550:	4413      	add	r3, r2
 8011552:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	685a      	ldr	r2, [r3, #4]
 801155c:	4b25      	ldr	r3, [pc, #148]	@ (80115f4 <vPortFree+0xbc>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4013      	ands	r3, r2
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10b      	bne.n	801157e <vPortFree+0x46>
	__asm volatile
 8011566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801156a:	f383 8811 	msr	BASEPRI, r3
 801156e:	f3bf 8f6f 	isb	sy
 8011572:	f3bf 8f4f 	dsb	sy
 8011576:	60fb      	str	r3, [r7, #12]
}
 8011578:	bf00      	nop
 801157a:	bf00      	nop
 801157c:	e7fd      	b.n	801157a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d00b      	beq.n	801159e <vPortFree+0x66>
	__asm volatile
 8011586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801158a:	f383 8811 	msr	BASEPRI, r3
 801158e:	f3bf 8f6f 	isb	sy
 8011592:	f3bf 8f4f 	dsb	sy
 8011596:	60bb      	str	r3, [r7, #8]
}
 8011598:	bf00      	nop
 801159a:	bf00      	nop
 801159c:	e7fd      	b.n	801159a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	685a      	ldr	r2, [r3, #4]
 80115a2:	4b14      	ldr	r3, [pc, #80]	@ (80115f4 <vPortFree+0xbc>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	4013      	ands	r3, r2
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d01e      	beq.n	80115ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80115ac:	693b      	ldr	r3, [r7, #16]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d11a      	bne.n	80115ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	685a      	ldr	r2, [r3, #4]
 80115b8:	4b0e      	ldr	r3, [pc, #56]	@ (80115f4 <vPortFree+0xbc>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	43db      	mvns	r3, r3
 80115be:	401a      	ands	r2, r3
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80115c4:	f7fe fed6 	bl	8010374 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	685a      	ldr	r2, [r3, #4]
 80115cc:	4b0a      	ldr	r3, [pc, #40]	@ (80115f8 <vPortFree+0xc0>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	4413      	add	r3, r2
 80115d2:	4a09      	ldr	r2, [pc, #36]	@ (80115f8 <vPortFree+0xc0>)
 80115d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80115d6:	6938      	ldr	r0, [r7, #16]
 80115d8:	f000 f882 	bl	80116e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80115dc:	4b07      	ldr	r3, [pc, #28]	@ (80115fc <vPortFree+0xc4>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	3301      	adds	r3, #1
 80115e2:	4a06      	ldr	r2, [pc, #24]	@ (80115fc <vPortFree+0xc4>)
 80115e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80115e6:	f7fe fed3 	bl	8010390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80115ea:	bf00      	nop
 80115ec:	3718      	adds	r7, #24
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	20016364 	.word	0x20016364
 80115f8:	20016354 	.word	0x20016354
 80115fc:	20016360 	.word	0x20016360

08011600 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8011600:	b480      	push	{r7}
 8011602:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8011604:	4b03      	ldr	r3, [pc, #12]	@ (8011614 <xPortGetFreeHeapSize+0x14>)
 8011606:	681b      	ldr	r3, [r3, #0]
}
 8011608:	4618      	mov	r0, r3
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop
 8011614:	20016354 	.word	0x20016354

08011618 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011618:	b480      	push	{r7}
 801161a:	b085      	sub	sp, #20
 801161c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801161e:	4b29      	ldr	r3, [pc, #164]	@ (80116c4 <prvHeapInit+0xac>)
 8011620:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011622:	4b29      	ldr	r3, [pc, #164]	@ (80116c8 <prvHeapInit+0xb0>)
 8011624:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f003 0307 	and.w	r3, r3, #7
 801162c:	2b00      	cmp	r3, #0
 801162e:	d00c      	beq.n	801164a <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	3307      	adds	r3, #7
 8011634:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f023 0307 	bic.w	r3, r3, #7
 801163c:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801163e:	68ba      	ldr	r2, [r7, #8]
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	1ad3      	subs	r3, r2, r3
 8011644:	4a20      	ldr	r2, [pc, #128]	@ (80116c8 <prvHeapInit+0xb0>)
 8011646:	4413      	add	r3, r2
 8011648:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801164e:	4a1f      	ldr	r2, [pc, #124]	@ (80116cc <prvHeapInit+0xb4>)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011654:	4b1d      	ldr	r3, [pc, #116]	@ (80116cc <prvHeapInit+0xb4>)
 8011656:	2200      	movs	r2, #0
 8011658:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	68ba      	ldr	r2, [r7, #8]
 801165e:	4413      	add	r3, r2
 8011660:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011662:	2208      	movs	r2, #8
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	1a9b      	subs	r3, r3, r2
 8011668:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f023 0307 	bic.w	r3, r3, #7
 8011670:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	4a16      	ldr	r2, [pc, #88]	@ (80116d0 <prvHeapInit+0xb8>)
 8011676:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011678:	4b15      	ldr	r3, [pc, #84]	@ (80116d0 <prvHeapInit+0xb8>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	2200      	movs	r2, #0
 801167e:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011680:	4b13      	ldr	r3, [pc, #76]	@ (80116d0 <prvHeapInit+0xb8>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2200      	movs	r2, #0
 8011686:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	68fa      	ldr	r2, [r7, #12]
 8011690:	1ad2      	subs	r2, r2, r3
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011696:	4b0e      	ldr	r3, [pc, #56]	@ (80116d0 <prvHeapInit+0xb8>)
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	4a0c      	ldr	r2, [pc, #48]	@ (80116d4 <prvHeapInit+0xbc>)
 80116a4:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	4a0b      	ldr	r2, [pc, #44]	@ (80116d8 <prvHeapInit+0xc0>)
 80116ac:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80116ae:	4b0b      	ldr	r3, [pc, #44]	@ (80116dc <prvHeapInit+0xc4>)
 80116b0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80116b4:	601a      	str	r2, [r3, #0]
}
 80116b6:	bf00      	nop
 80116b8:	3714      	adds	r7, #20
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	00013880 	.word	0x00013880
 80116c8:	20002ac8 	.word	0x20002ac8
 80116cc:	20016348 	.word	0x20016348
 80116d0:	20016350 	.word	0x20016350
 80116d4:	20016358 	.word	0x20016358
 80116d8:	20016354 	.word	0x20016354
 80116dc:	20016364 	.word	0x20016364

080116e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80116e8:	4b28      	ldr	r3, [pc, #160]	@ (801178c <prvInsertBlockIntoFreeList+0xac>)
 80116ea:	60fb      	str	r3, [r7, #12]
 80116ec:	e002      	b.n	80116f4 <prvInsertBlockIntoFreeList+0x14>
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	60fb      	str	r3, [r7, #12]
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d8f7      	bhi.n	80116ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	68ba      	ldr	r2, [r7, #8]
 8011708:	4413      	add	r3, r2
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	429a      	cmp	r2, r3
 801170e:	d108      	bne.n	8011722 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	685a      	ldr	r2, [r3, #4]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	441a      	add	r2, r3
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	68ba      	ldr	r2, [r7, #8]
 801172c:	441a      	add	r2, r3
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	429a      	cmp	r2, r3
 8011734:	d118      	bne.n	8011768 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	4b15      	ldr	r3, [pc, #84]	@ (8011790 <prvInsertBlockIntoFreeList+0xb0>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	429a      	cmp	r2, r3
 8011740:	d00d      	beq.n	801175e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	685a      	ldr	r2, [r3, #4]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	441a      	add	r2, r3
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	601a      	str	r2, [r3, #0]
 801175c:	e008      	b.n	8011770 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801175e:	4b0c      	ldr	r3, [pc, #48]	@ (8011790 <prvInsertBlockIntoFreeList+0xb0>)
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	601a      	str	r2, [r3, #0]
 8011766:	e003      	b.n	8011770 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011770:	68fa      	ldr	r2, [r7, #12]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	429a      	cmp	r2, r3
 8011776:	d002      	beq.n	801177e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801177e:	bf00      	nop
 8011780:	3714      	adds	r7, #20
 8011782:	46bd      	mov	sp, r7
 8011784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011788:	4770      	bx	lr
 801178a:	bf00      	nop
 801178c:	20016348 	.word	0x20016348
 8011790:	20016350 	.word	0x20016350

08011794 <arm_fill_f32>:
 8011794:	b410      	push	{r4}
 8011796:	088c      	lsrs	r4, r1, #2
 8011798:	d010      	beq.n	80117bc <arm_fill_f32+0x28>
 801179a:	f100 0310 	add.w	r3, r0, #16
 801179e:	4622      	mov	r2, r4
 80117a0:	3a01      	subs	r2, #1
 80117a2:	ed03 0a04 	vstr	s0, [r3, #-16]
 80117a6:	ed03 0a03 	vstr	s0, [r3, #-12]
 80117aa:	ed03 0a02 	vstr	s0, [r3, #-8]
 80117ae:	ed03 0a01 	vstr	s0, [r3, #-4]
 80117b2:	f103 0310 	add.w	r3, r3, #16
 80117b6:	d1f3      	bne.n	80117a0 <arm_fill_f32+0xc>
 80117b8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80117bc:	f011 0103 	ands.w	r1, r1, #3
 80117c0:	d003      	beq.n	80117ca <arm_fill_f32+0x36>
 80117c2:	3901      	subs	r1, #1
 80117c4:	eca0 0a01 	vstmia	r0!, {s0}
 80117c8:	d1fb      	bne.n	80117c2 <arm_fill_f32+0x2e>
 80117ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117ce:	4770      	bx	lr

080117d0 <arm_min_f32>:
 80117d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d4:	1e4f      	subs	r7, r1, #1
 80117d6:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80117da:	f100 0e04 	add.w	lr, r0, #4
 80117de:	edd0 7a00 	vldr	s15, [r0]
 80117e2:	d058      	beq.n	8011896 <arm_min_f32+0xc6>
 80117e4:	3014      	adds	r0, #20
 80117e6:	46c4      	mov	ip, r8
 80117e8:	2604      	movs	r6, #4
 80117ea:	2400      	movs	r4, #0
 80117ec:	ed10 6a04 	vldr	s12, [r0, #-16]
 80117f0:	ed50 6a03 	vldr	s13, [r0, #-12]
 80117f4:	ed10 7a02 	vldr	s14, [r0, #-8]
 80117f8:	ed50 5a01 	vldr	s11, [r0, #-4]
 80117fc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011804:	bf48      	it	mi
 8011806:	eef0 7a46 	vmovmi.f32	s15, s12
 801180a:	f1a6 0503 	sub.w	r5, r6, #3
 801180e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011812:	bf48      	it	mi
 8011814:	462c      	movmi	r4, r5
 8011816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801181a:	bfc8      	it	gt
 801181c:	eef0 7a66 	vmovgt.f32	s15, s13
 8011820:	f1a6 0502 	sub.w	r5, r6, #2
 8011824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011828:	bfc8      	it	gt
 801182a:	462c      	movgt	r4, r5
 801182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011830:	bfc8      	it	gt
 8011832:	eef0 7a47 	vmovgt.f32	s15, s14
 8011836:	f106 35ff 	add.w	r5, r6, #4294967295
 801183a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801183e:	bfc8      	it	gt
 8011840:	462c      	movgt	r4, r5
 8011842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011846:	bfc8      	it	gt
 8011848:	4634      	movgt	r4, r6
 801184a:	bfc8      	it	gt
 801184c:	eef0 7a65 	vmovgt.f32	s15, s11
 8011850:	f1bc 0c01 	subs.w	ip, ip, #1
 8011854:	f106 0604 	add.w	r6, r6, #4
 8011858:	f100 0010 	add.w	r0, r0, #16
 801185c:	d1c6      	bne.n	80117ec <arm_min_f32+0x1c>
 801185e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8011862:	f017 0003 	ands.w	r0, r7, #3
 8011866:	d018      	beq.n	801189a <arm_min_f32+0xca>
 8011868:	1a08      	subs	r0, r1, r0
 801186a:	ecbe 7a01 	vldmia	lr!, {s14}
 801186e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011876:	bf48      	it	mi
 8011878:	4604      	movmi	r4, r0
 801187a:	f100 0001 	add.w	r0, r0, #1
 801187e:	bf58      	it	pl
 8011880:	eeb0 7a67 	vmovpl.f32	s14, s15
 8011884:	4288      	cmp	r0, r1
 8011886:	eef0 7a47 	vmov.f32	s15, s14
 801188a:	d1ee      	bne.n	801186a <arm_min_f32+0x9a>
 801188c:	ed82 7a00 	vstr	s14, [r2]
 8011890:	601c      	str	r4, [r3, #0]
 8011892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011896:	4644      	mov	r4, r8
 8011898:	e7e3      	b.n	8011862 <arm_min_f32+0x92>
 801189a:	eeb0 7a67 	vmov.f32	s14, s15
 801189e:	e7f5      	b.n	801188c <arm_min_f32+0xbc>

080118a0 <arm_max_f32>:
 80118a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118a4:	1e4f      	subs	r7, r1, #1
 80118a6:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80118aa:	f100 0e04 	add.w	lr, r0, #4
 80118ae:	edd0 7a00 	vldr	s15, [r0]
 80118b2:	d058      	beq.n	8011966 <arm_max_f32+0xc6>
 80118b4:	3014      	adds	r0, #20
 80118b6:	46c4      	mov	ip, r8
 80118b8:	2604      	movs	r6, #4
 80118ba:	2400      	movs	r4, #0
 80118bc:	ed10 6a04 	vldr	s12, [r0, #-16]
 80118c0:	ed50 6a03 	vldr	s13, [r0, #-12]
 80118c4:	ed10 7a02 	vldr	s14, [r0, #-8]
 80118c8:	ed50 5a01 	vldr	s11, [r0, #-4]
 80118cc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80118d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d4:	bfc8      	it	gt
 80118d6:	eef0 7a46 	vmovgt.f32	s15, s12
 80118da:	f1a6 0503 	sub.w	r5, r6, #3
 80118de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80118e2:	bfc8      	it	gt
 80118e4:	462c      	movgt	r4, r5
 80118e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ea:	bf48      	it	mi
 80118ec:	eef0 7a66 	vmovmi.f32	s15, s13
 80118f0:	f1a6 0502 	sub.w	r5, r6, #2
 80118f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118f8:	bf48      	it	mi
 80118fa:	462c      	movmi	r4, r5
 80118fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011900:	bf48      	it	mi
 8011902:	eef0 7a47 	vmovmi.f32	s15, s14
 8011906:	f106 35ff 	add.w	r5, r6, #4294967295
 801190a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801190e:	bf48      	it	mi
 8011910:	462c      	movmi	r4, r5
 8011912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011916:	bf48      	it	mi
 8011918:	4634      	movmi	r4, r6
 801191a:	bf48      	it	mi
 801191c:	eef0 7a65 	vmovmi.f32	s15, s11
 8011920:	f1bc 0c01 	subs.w	ip, ip, #1
 8011924:	f106 0604 	add.w	r6, r6, #4
 8011928:	f100 0010 	add.w	r0, r0, #16
 801192c:	d1c6      	bne.n	80118bc <arm_max_f32+0x1c>
 801192e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8011932:	f017 0003 	ands.w	r0, r7, #3
 8011936:	d018      	beq.n	801196a <arm_max_f32+0xca>
 8011938:	1a08      	subs	r0, r1, r0
 801193a:	ecbe 7a01 	vldmia	lr!, {s14}
 801193e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011946:	bfc8      	it	gt
 8011948:	4604      	movgt	r4, r0
 801194a:	f100 0001 	add.w	r0, r0, #1
 801194e:	bfd8      	it	le
 8011950:	eeb0 7a67 	vmovle.f32	s14, s15
 8011954:	4288      	cmp	r0, r1
 8011956:	eef0 7a47 	vmov.f32	s15, s14
 801195a:	d1ee      	bne.n	801193a <arm_max_f32+0x9a>
 801195c:	ed82 7a00 	vstr	s14, [r2]
 8011960:	601c      	str	r4, [r3, #0]
 8011962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011966:	4644      	mov	r4, r8
 8011968:	e7e3      	b.n	8011932 <arm_max_f32+0x92>
 801196a:	eeb0 7a67 	vmov.f32	s14, s15
 801196e:	e7f5      	b.n	801195c <arm_max_f32+0xbc>

08011970 <arm_rfft_fast_init_f32>:
 8011970:	084b      	lsrs	r3, r1, #1
 8011972:	2b80      	cmp	r3, #128	@ 0x80
 8011974:	b410      	push	{r4}
 8011976:	8201      	strh	r1, [r0, #16]
 8011978:	8003      	strh	r3, [r0, #0]
 801197a:	d047      	beq.n	8011a0c <arm_rfft_fast_init_f32+0x9c>
 801197c:	d917      	bls.n	80119ae <arm_rfft_fast_init_f32+0x3e>
 801197e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011982:	d03d      	beq.n	8011a00 <arm_rfft_fast_init_f32+0x90>
 8011984:	d929      	bls.n	80119da <arm_rfft_fast_init_f32+0x6a>
 8011986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801198a:	d020      	beq.n	80119ce <arm_rfft_fast_init_f32+0x5e>
 801198c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011990:	d113      	bne.n	80119ba <arm_rfft_fast_init_f32+0x4a>
 8011992:	4921      	ldr	r1, [pc, #132]	@ (8011a18 <arm_rfft_fast_init_f32+0xa8>)
 8011994:	4a21      	ldr	r2, [pc, #132]	@ (8011a1c <arm_rfft_fast_init_f32+0xac>)
 8011996:	4b22      	ldr	r3, [pc, #136]	@ (8011a20 <arm_rfft_fast_init_f32+0xb0>)
 8011998:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 801199c:	8184      	strh	r4, [r0, #12]
 801199e:	6081      	str	r1, [r0, #8]
 80119a0:	6042      	str	r2, [r0, #4]
 80119a2:	6143      	str	r3, [r0, #20]
 80119a4:	2000      	movs	r0, #0
 80119a6:	b240      	sxtb	r0, r0
 80119a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119ac:	4770      	bx	lr
 80119ae:	2b20      	cmp	r3, #32
 80119b0:	d01c      	beq.n	80119ec <arm_rfft_fast_init_f32+0x7c>
 80119b2:	2b40      	cmp	r3, #64	@ 0x40
 80119b4:	d006      	beq.n	80119c4 <arm_rfft_fast_init_f32+0x54>
 80119b6:	2b10      	cmp	r3, #16
 80119b8:	d01d      	beq.n	80119f6 <arm_rfft_fast_init_f32+0x86>
 80119ba:	20ff      	movs	r0, #255	@ 0xff
 80119bc:	b240      	sxtb	r0, r0
 80119be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119c2:	4770      	bx	lr
 80119c4:	2438      	movs	r4, #56	@ 0x38
 80119c6:	4917      	ldr	r1, [pc, #92]	@ (8011a24 <arm_rfft_fast_init_f32+0xb4>)
 80119c8:	4a17      	ldr	r2, [pc, #92]	@ (8011a28 <arm_rfft_fast_init_f32+0xb8>)
 80119ca:	4b18      	ldr	r3, [pc, #96]	@ (8011a2c <arm_rfft_fast_init_f32+0xbc>)
 80119cc:	e7e6      	b.n	801199c <arm_rfft_fast_init_f32+0x2c>
 80119ce:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80119d2:	4917      	ldr	r1, [pc, #92]	@ (8011a30 <arm_rfft_fast_init_f32+0xc0>)
 80119d4:	4a17      	ldr	r2, [pc, #92]	@ (8011a34 <arm_rfft_fast_init_f32+0xc4>)
 80119d6:	4b18      	ldr	r3, [pc, #96]	@ (8011a38 <arm_rfft_fast_init_f32+0xc8>)
 80119d8:	e7e0      	b.n	801199c <arm_rfft_fast_init_f32+0x2c>
 80119da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80119de:	d1ec      	bne.n	80119ba <arm_rfft_fast_init_f32+0x4a>
 80119e0:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80119e4:	4915      	ldr	r1, [pc, #84]	@ (8011a3c <arm_rfft_fast_init_f32+0xcc>)
 80119e6:	4a16      	ldr	r2, [pc, #88]	@ (8011a40 <arm_rfft_fast_init_f32+0xd0>)
 80119e8:	4b16      	ldr	r3, [pc, #88]	@ (8011a44 <arm_rfft_fast_init_f32+0xd4>)
 80119ea:	e7d7      	b.n	801199c <arm_rfft_fast_init_f32+0x2c>
 80119ec:	2430      	movs	r4, #48	@ 0x30
 80119ee:	4916      	ldr	r1, [pc, #88]	@ (8011a48 <arm_rfft_fast_init_f32+0xd8>)
 80119f0:	4a16      	ldr	r2, [pc, #88]	@ (8011a4c <arm_rfft_fast_init_f32+0xdc>)
 80119f2:	4b17      	ldr	r3, [pc, #92]	@ (8011a50 <arm_rfft_fast_init_f32+0xe0>)
 80119f4:	e7d2      	b.n	801199c <arm_rfft_fast_init_f32+0x2c>
 80119f6:	2414      	movs	r4, #20
 80119f8:	4916      	ldr	r1, [pc, #88]	@ (8011a54 <arm_rfft_fast_init_f32+0xe4>)
 80119fa:	4a17      	ldr	r2, [pc, #92]	@ (8011a58 <arm_rfft_fast_init_f32+0xe8>)
 80119fc:	4b17      	ldr	r3, [pc, #92]	@ (8011a5c <arm_rfft_fast_init_f32+0xec>)
 80119fe:	e7cd      	b.n	801199c <arm_rfft_fast_init_f32+0x2c>
 8011a00:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8011a04:	4916      	ldr	r1, [pc, #88]	@ (8011a60 <arm_rfft_fast_init_f32+0xf0>)
 8011a06:	4a17      	ldr	r2, [pc, #92]	@ (8011a64 <arm_rfft_fast_init_f32+0xf4>)
 8011a08:	4b17      	ldr	r3, [pc, #92]	@ (8011a68 <arm_rfft_fast_init_f32+0xf8>)
 8011a0a:	e7c7      	b.n	801199c <arm_rfft_fast_init_f32+0x2c>
 8011a0c:	24d0      	movs	r4, #208	@ 0xd0
 8011a0e:	4917      	ldr	r1, [pc, #92]	@ (8011a6c <arm_rfft_fast_init_f32+0xfc>)
 8011a10:	4a17      	ldr	r2, [pc, #92]	@ (8011a70 <arm_rfft_fast_init_f32+0x100>)
 8011a12:	4b18      	ldr	r3, [pc, #96]	@ (8011a74 <arm_rfft_fast_init_f32+0x104>)
 8011a14:	e7c2      	b.n	801199c <arm_rfft_fast_init_f32+0x2c>
 8011a16:	bf00      	nop
 8011a18:	08027f80 	.word	0x08027f80
 8011a1c:	08018974 	.word	0x08018974
 8011a20:	0801eae4 	.word	0x0801eae4
 8011a24:	0801ca74 	.word	0x0801ca74
 8011a28:	08029d40 	.word	0x08029d40
 8011a2c:	0802c230 	.word	0x0802c230
 8011a30:	08025464 	.word	0x08025464
 8011a34:	08023364 	.word	0x08023364
 8011a38:	0801cae4 	.word	0x0801cae4
 8011a3c:	0802bec0 	.word	0x0802bec0
 8011a40:	08022ae4 	.word	0x08022ae4
 8011a44:	08029f40 	.word	0x08029f40
 8011a48:	0802631c 	.word	0x0802631c
 8011a4c:	08025364 	.word	0x08025364
 8011a50:	0801c974 	.word	0x0801c974
 8011a54:	08026274 	.word	0x08026274
 8011a58:	080232e4 	.word	0x080232e4
 8011a5c:	0802629c 	.word	0x0802629c
 8011a60:	0802a740 	.word	0x0802a740
 8011a64:	08026f80 	.word	0x08026f80
 8011a68:	0802aac0 	.word	0x0802aac0
 8011a6c:	0802c430 	.word	0x0802c430
 8011a70:	08026b80 	.word	0x08026b80
 8011a74:	0802bac0 	.word	0x0802bac0

08011a78 <arm_rfft_fast_f32>:
 8011a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a7c:	8a06      	ldrh	r6, [r0, #16]
 8011a7e:	0876      	lsrs	r6, r6, #1
 8011a80:	4607      	mov	r7, r0
 8011a82:	4615      	mov	r5, r2
 8011a84:	8006      	strh	r6, [r0, #0]
 8011a86:	460c      	mov	r4, r1
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d15c      	bne.n	8011b46 <arm_rfft_fast_f32+0xce>
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	2301      	movs	r3, #1
 8011a90:	f000 fbe6 	bl	8012260 <arm_cfft_f32>
 8011a94:	edd4 7a00 	vldr	s15, [r4]
 8011a98:	ed94 7a01 	vldr	s14, [r4, #4]
 8011a9c:	883e      	ldrh	r6, [r7, #0]
 8011a9e:	6978      	ldr	r0, [r7, #20]
 8011aa0:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011aa8:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8011aac:	ee77 6a87 	vadd.f32	s13, s15, s14
 8011ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ab4:	3e01      	subs	r6, #1
 8011ab6:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8011aba:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011abe:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011ac2:	ed85 7a00 	vstr	s14, [r5]
 8011ac6:	edc5 7a01 	vstr	s15, [r5, #4]
 8011aca:	3010      	adds	r0, #16
 8011acc:	f105 0210 	add.w	r2, r5, #16
 8011ad0:	3b08      	subs	r3, #8
 8011ad2:	f104 0110 	add.w	r1, r4, #16
 8011ad6:	ed51 4a02 	vldr	s9, [r1, #-8]
 8011ada:	ed93 5a02 	vldr	s10, [r3, #8]
 8011ade:	ed11 7a01 	vldr	s14, [r1, #-4]
 8011ae2:	ed10 6a02 	vldr	s12, [r0, #-8]
 8011ae6:	edd3 5a03 	vldr	s11, [r3, #12]
 8011aea:	ed50 6a01 	vldr	s13, [r0, #-4]
 8011aee:	ee75 7a64 	vsub.f32	s15, s10, s9
 8011af2:	ee35 4a87 	vadd.f32	s8, s11, s14
 8011af6:	ee35 5a24 	vadd.f32	s10, s10, s9
 8011afa:	ee77 5a65 	vsub.f32	s11, s14, s11
 8011afe:	ee66 4a27 	vmul.f32	s9, s12, s15
 8011b02:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8011b06:	ee34 5a85 	vadd.f32	s10, s9, s10
 8011b0a:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011b0e:	ee66 6a84 	vmul.f32	s13, s13, s8
 8011b12:	ee77 7a25 	vadd.f32	s15, s14, s11
 8011b16:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011b1a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011b1e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8011b22:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011b26:	3e01      	subs	r6, #1
 8011b28:	ed42 6a02 	vstr	s13, [r2, #-8]
 8011b2c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8011b30:	f1a3 0308 	sub.w	r3, r3, #8
 8011b34:	f101 0108 	add.w	r1, r1, #8
 8011b38:	f100 0008 	add.w	r0, r0, #8
 8011b3c:	f102 0208 	add.w	r2, r2, #8
 8011b40:	d1c9      	bne.n	8011ad6 <arm_rfft_fast_f32+0x5e>
 8011b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b46:	edd1 7a00 	vldr	s15, [r1]
 8011b4a:	edd1 6a01 	vldr	s13, [r1, #4]
 8011b4e:	6941      	ldr	r1, [r0, #20]
 8011b50:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011b54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011b58:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8011b5c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011b60:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011b64:	3e01      	subs	r6, #1
 8011b66:	ed82 7a00 	vstr	s14, [r2]
 8011b6a:	edc2 7a01 	vstr	s15, [r2, #4]
 8011b6e:	00f0      	lsls	r0, r6, #3
 8011b70:	b3ee      	cbz	r6, 8011bee <arm_rfft_fast_f32+0x176>
 8011b72:	3808      	subs	r0, #8
 8011b74:	f101 0e10 	add.w	lr, r1, #16
 8011b78:	4420      	add	r0, r4
 8011b7a:	f104 0110 	add.w	r1, r4, #16
 8011b7e:	f102 0c10 	add.w	ip, r2, #16
 8011b82:	ed90 7a02 	vldr	s14, [r0, #8]
 8011b86:	ed51 6a02 	vldr	s13, [r1, #-8]
 8011b8a:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8011b8e:	ed90 4a03 	vldr	s8, [r0, #12]
 8011b92:	ed11 5a01 	vldr	s10, [r1, #-4]
 8011b96:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8011b9a:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8011b9e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8011ba2:	ee26 3a27 	vmul.f32	s6, s12, s15
 8011ba6:	ee77 6a26 	vadd.f32	s13, s14, s13
 8011baa:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011bae:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8011bb2:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011bb6:	ee77 7a05 	vadd.f32	s15, s14, s10
 8011bba:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011bbe:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011bc2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011bc6:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8011bca:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011bce:	ee27 7a23 	vmul.f32	s14, s14, s7
 8011bd2:	3e01      	subs	r6, #1
 8011bd4:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8011bd8:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8011bdc:	f1a0 0008 	sub.w	r0, r0, #8
 8011be0:	f101 0108 	add.w	r1, r1, #8
 8011be4:	f10e 0e08 	add.w	lr, lr, #8
 8011be8:	f10c 0c08 	add.w	ip, ip, #8
 8011bec:	d1c9      	bne.n	8011b82 <arm_rfft_fast_f32+0x10a>
 8011bee:	4638      	mov	r0, r7
 8011bf0:	4629      	mov	r1, r5
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	f000 bb31 	b.w	8012260 <arm_cfft_f32>
 8011bfe:	bf00      	nop

08011c00 <arm_cfft_radix8by2_f32>:
 8011c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c04:	ed2d 8b08 	vpush	{d8-d11}
 8011c08:	f8b0 e000 	ldrh.w	lr, [r0]
 8011c0c:	6842      	ldr	r2, [r0, #4]
 8011c0e:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8011c12:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8011c16:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8011c1a:	4607      	mov	r7, r0
 8011c1c:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8011c20:	f000 80af 	beq.w	8011d82 <arm_cfft_radix8by2_f32+0x182>
 8011c24:	3310      	adds	r3, #16
 8011c26:	18ce      	adds	r6, r1, r3
 8011c28:	3210      	adds	r2, #16
 8011c2a:	4443      	add	r3, r8
 8011c2c:	f101 0510 	add.w	r5, r1, #16
 8011c30:	f108 0410 	add.w	r4, r8, #16
 8011c34:	ed54 1a04 	vldr	s3, [r4, #-16]
 8011c38:	ed13 4a04 	vldr	s8, [r3, #-16]
 8011c3c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8011c40:	ed53 5a02 	vldr	s11, [r3, #-8]
 8011c44:	ed13 5a01 	vldr	s10, [r3, #-4]
 8011c48:	ed54 6a03 	vldr	s13, [r4, #-12]
 8011c4c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8011c50:	ed16 2a04 	vldr	s4, [r6, #-16]
 8011c54:	ed56 2a03 	vldr	s5, [r6, #-12]
 8011c58:	ed15 6a03 	vldr	s12, [r5, #-12]
 8011c5c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8011c60:	ed15 3a04 	vldr	s6, [r5, #-16]
 8011c64:	ed54 7a01 	vldr	s15, [r4, #-4]
 8011c68:	ed56 0a02 	vldr	s1, [r6, #-8]
 8011c6c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8011c70:	ed55 4a02 	vldr	s9, [r5, #-8]
 8011c74:	ee73 ba21 	vadd.f32	s23, s6, s3
 8011c78:	ee36 ba26 	vadd.f32	s22, s12, s13
 8011c7c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8011c80:	ee72 9a04 	vadd.f32	s19, s4, s8
 8011c84:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8011c88:	ee31 8a05 	vadd.f32	s16, s2, s10
 8011c8c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8011c90:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8011c94:	ed45 ba04 	vstr	s23, [r5, #-16]
 8011c98:	ed05 ba03 	vstr	s22, [r5, #-12]
 8011c9c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8011ca0:	ed05 aa01 	vstr	s20, [r5, #-4]
 8011ca4:	ed06 8a01 	vstr	s16, [r6, #-4]
 8011ca8:	ed46 9a04 	vstr	s19, [r6, #-16]
 8011cac:	ed06 9a03 	vstr	s18, [r6, #-12]
 8011cb0:	ed46 8a02 	vstr	s17, [r6, #-8]
 8011cb4:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011cb8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8011cbc:	ed12 6a03 	vldr	s12, [r2, #-12]
 8011cc0:	ed52 2a04 	vldr	s5, [r2, #-16]
 8011cc4:	ee33 3a61 	vsub.f32	s6, s6, s3
 8011cc8:	ee34 4a42 	vsub.f32	s8, s8, s4
 8011ccc:	ee26 8a86 	vmul.f32	s16, s13, s12
 8011cd0:	ee24 2a06 	vmul.f32	s4, s8, s12
 8011cd4:	ee63 1a22 	vmul.f32	s3, s6, s5
 8011cd8:	ee24 4a22 	vmul.f32	s8, s8, s5
 8011cdc:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011ce0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8011ce4:	ee23 6a86 	vmul.f32	s12, s7, s12
 8011ce8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011cec:	ee36 6a04 	vadd.f32	s12, s12, s8
 8011cf0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8011cf4:	ee72 3a63 	vsub.f32	s7, s4, s7
 8011cf8:	ee71 2a88 	vadd.f32	s5, s3, s16
 8011cfc:	ed44 6a03 	vstr	s13, [r4, #-12]
 8011d00:	ed44 2a04 	vstr	s5, [r4, #-16]
 8011d04:	ed43 3a04 	vstr	s7, [r3, #-16]
 8011d08:	ed03 6a03 	vstr	s12, [r3, #-12]
 8011d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011d10:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8011d14:	ed12 7a01 	vldr	s14, [r2, #-4]
 8011d18:	ed52 5a02 	vldr	s11, [r2, #-8]
 8011d1c:	ee35 6a41 	vsub.f32	s12, s10, s2
 8011d20:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8011d24:	ee67 3a87 	vmul.f32	s7, s15, s14
 8011d28:	ee26 5a87 	vmul.f32	s10, s13, s14
 8011d2c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8011d30:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011d34:	ee64 4a87 	vmul.f32	s9, s9, s14
 8011d38:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011d3c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8011d40:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011d44:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8011d48:	ee74 5a23 	vadd.f32	s11, s8, s7
 8011d4c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8011d50:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011d54:	f1be 0e01 	subs.w	lr, lr, #1
 8011d58:	ed44 5a02 	vstr	s11, [r4, #-8]
 8011d5c:	f105 0510 	add.w	r5, r5, #16
 8011d60:	ed44 7a01 	vstr	s15, [r4, #-4]
 8011d64:	f106 0610 	add.w	r6, r6, #16
 8011d68:	ed03 6a02 	vstr	s12, [r3, #-8]
 8011d6c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8011d70:	f102 0210 	add.w	r2, r2, #16
 8011d74:	f104 0410 	add.w	r4, r4, #16
 8011d78:	f103 0310 	add.w	r3, r3, #16
 8011d7c:	f47f af5a 	bne.w	8011c34 <arm_cfft_radix8by2_f32+0x34>
 8011d80:	687a      	ldr	r2, [r7, #4]
 8011d82:	fa1f f48c 	uxth.w	r4, ip
 8011d86:	4608      	mov	r0, r1
 8011d88:	2302      	movs	r3, #2
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	f000 ff78 	bl	8012c80 <arm_radix8_butterfly_f32>
 8011d90:	ecbd 8b08 	vpop	{d8-d11}
 8011d94:	4640      	mov	r0, r8
 8011d96:	4621      	mov	r1, r4
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	2302      	movs	r3, #2
 8011d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011da0:	f000 bf6e 	b.w	8012c80 <arm_radix8_butterfly_f32>

08011da4 <arm_cfft_radix8by4_f32>:
 8011da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da8:	ed2d 8b0a 	vpush	{d8-d12}
 8011dac:	8802      	ldrh	r2, [r0, #0]
 8011dae:	ed91 6a00 	vldr	s12, [r1]
 8011db2:	b08f      	sub	sp, #60	@ 0x3c
 8011db4:	460f      	mov	r7, r1
 8011db6:	0852      	lsrs	r2, r2, #1
 8011db8:	0093      	lsls	r3, r2, #2
 8011dba:	900c      	str	r0, [sp, #48]	@ 0x30
 8011dbc:	9103      	str	r1, [sp, #12]
 8011dbe:	6841      	ldr	r1, [r0, #4]
 8011dc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8011dc4:	4638      	mov	r0, r7
 8011dc6:	4418      	add	r0, r3
 8011dc8:	4606      	mov	r6, r0
 8011dca:	9009      	str	r0, [sp, #36]	@ 0x24
 8011dcc:	4418      	add	r0, r3
 8011dce:	edd0 6a00 	vldr	s13, [r0]
 8011dd2:	edd6 3a00 	vldr	s7, [r6]
 8011dd6:	edd6 2a01 	vldr	s5, [r6, #4]
 8011dda:	edd0 7a01 	vldr	s15, [r0, #4]
 8011dde:	900a      	str	r0, [sp, #40]	@ 0x28
 8011de0:	ee76 5a26 	vadd.f32	s11, s12, s13
 8011de4:	4604      	mov	r4, r0
 8011de6:	4625      	mov	r5, r4
 8011de8:	441c      	add	r4, r3
 8011dea:	ed94 4a00 	vldr	s8, [r4]
 8011dee:	ed94 5a01 	vldr	s10, [r4, #4]
 8011df2:	9401      	str	r4, [sp, #4]
 8011df4:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8011df8:	4630      	mov	r0, r6
 8011dfa:	ee74 4a24 	vadd.f32	s9, s8, s9
 8011dfe:	463e      	mov	r6, r7
 8011e00:	ee14 ea90 	vmov	lr, s9
 8011e04:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011e08:	f846 eb08 	str.w	lr, [r6], #8
 8011e0c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011e10:	edd0 4a01 	vldr	s9, [r0, #4]
 8011e14:	9604      	str	r6, [sp, #16]
 8011e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e1a:	9e01      	ldr	r6, [sp, #4]
 8011e1c:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8011e20:	ed96 2a01 	vldr	s4, [r6, #4]
 8011e24:	ee36 7a24 	vadd.f32	s14, s12, s9
 8011e28:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8011e2c:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8011e30:	ee36 6a62 	vsub.f32	s12, s12, s5
 8011e34:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011e38:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8011e3c:	ee73 3a45 	vsub.f32	s7, s6, s10
 8011e40:	4604      	mov	r4, r0
 8011e42:	ee36 6a45 	vsub.f32	s12, s12, s10
 8011e46:	ee75 6a26 	vadd.f32	s13, s10, s13
 8011e4a:	46a3      	mov	fp, r4
 8011e4c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8011e50:	ee34 5a84 	vadd.f32	s10, s9, s8
 8011e54:	ee13 8a90 	vmov	r8, s7
 8011e58:	46a4      	mov	ip, r4
 8011e5a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8011e5e:	ed87 7a01 	vstr	s14, [r7, #4]
 8011e62:	f84b 8b08 	str.w	r8, [fp], #8
 8011e66:	f1ac 0704 	sub.w	r7, ip, #4
 8011e6a:	ed8c 5a01 	vstr	s10, [ip, #4]
 8011e6e:	f101 0c08 	add.w	ip, r1, #8
 8011e72:	462c      	mov	r4, r5
 8011e74:	f8cd c014 	str.w	ip, [sp, #20]
 8011e78:	ee15 ca90 	vmov	ip, s11
 8011e7c:	f844 cb08 	str.w	ip, [r4], #8
 8011e80:	9407      	str	r4, [sp, #28]
 8011e82:	f101 0410 	add.w	r4, r1, #16
 8011e86:	ed85 6a01 	vstr	s12, [r5, #4]
 8011e8a:	0852      	lsrs	r2, r2, #1
 8011e8c:	9402      	str	r4, [sp, #8]
 8011e8e:	462c      	mov	r4, r5
 8011e90:	f101 0518 	add.w	r5, r1, #24
 8011e94:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011e96:	46b2      	mov	sl, r6
 8011e98:	9506      	str	r5, [sp, #24]
 8011e9a:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8011e9e:	3a02      	subs	r2, #2
 8011ea0:	ee16 5a90 	vmov	r5, s13
 8011ea4:	46b6      	mov	lr, r6
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	0852      	lsrs	r2, r2, #1
 8011eaa:	f84a 5b08 	str.w	r5, [sl], #8
 8011eae:	f1a0 0604 	sub.w	r6, r0, #4
 8011eb2:	edce 7a01 	vstr	s15, [lr, #4]
 8011eb6:	9208      	str	r2, [sp, #32]
 8011eb8:	f000 8130 	beq.w	801211c <arm_cfft_radix8by4_f32+0x378>
 8011ebc:	4691      	mov	r9, r2
 8011ebe:	9a03      	ldr	r2, [sp, #12]
 8011ec0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011ec4:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8011ec8:	3b08      	subs	r3, #8
 8011eca:	f102 0510 	add.w	r5, r2, #16
 8011ece:	f101 0c20 	add.w	ip, r1, #32
 8011ed2:	f1a4 020c 	sub.w	r2, r4, #12
 8011ed6:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8011eda:	4433      	add	r3, r6
 8011edc:	3410      	adds	r4, #16
 8011ede:	4650      	mov	r0, sl
 8011ee0:	4659      	mov	r1, fp
 8011ee2:	ed55 3a02 	vldr	s7, [r5, #-8]
 8011ee6:	ed14 5a02 	vldr	s10, [r4, #-8]
 8011eea:	ed91 7a00 	vldr	s14, [r1]
 8011eee:	edd0 7a00 	vldr	s15, [r0]
 8011ef2:	ed15 4a01 	vldr	s8, [r5, #-4]
 8011ef6:	ed54 5a01 	vldr	s11, [r4, #-4]
 8011efa:	edd0 6a01 	vldr	s13, [r0, #4]
 8011efe:	ed91 6a01 	vldr	s12, [r1, #4]
 8011f02:	ee33 8a85 	vadd.f32	s16, s7, s10
 8011f06:	ee34 0a25 	vadd.f32	s0, s8, s11
 8011f0a:	ee78 4a07 	vadd.f32	s9, s16, s14
 8011f0e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8011f12:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8011f16:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8011f1a:	ed45 4a02 	vstr	s9, [r5, #-8]
 8011f1e:	edd1 4a01 	vldr	s9, [r1, #4]
 8011f22:	ed90 4a01 	vldr	s8, [r0, #4]
 8011f26:	ee70 4a24 	vadd.f32	s9, s0, s9
 8011f2a:	ee76 aa05 	vadd.f32	s21, s12, s10
 8011f2e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011f32:	ee35 aac7 	vsub.f32	s20, s11, s14
 8011f36:	ed45 4a01 	vstr	s9, [r5, #-4]
 8011f3a:	edd6 1a00 	vldr	s3, [r6]
 8011f3e:	edd7 0a00 	vldr	s1, [r7]
 8011f42:	ed92 4a02 	vldr	s8, [r2, #8]
 8011f46:	edd3 3a02 	vldr	s7, [r3, #8]
 8011f4a:	ed93 2a01 	vldr	s4, [r3, #4]
 8011f4e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8011f52:	edd2 2a01 	vldr	s5, [r2, #4]
 8011f56:	ed57 9a01 	vldr	s19, [r7, #-4]
 8011f5a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8011f5e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8011f62:	ee74 8a84 	vadd.f32	s17, s9, s8
 8011f66:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8011f6a:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8011f6e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8011f72:	ee18 aa90 	vmov	sl, s17
 8011f76:	f847 a908 	str.w	sl, [r7], #-8
 8011f7a:	edd2 8a01 	vldr	s17, [r2, #4]
 8011f7e:	ed93 9a01 	vldr	s18, [r3, #4]
 8011f82:	ee73 8a28 	vadd.f32	s17, s6, s17
 8011f86:	ee3a aa27 	vadd.f32	s20, s20, s15
 8011f8a:	ee78 8a89 	vadd.f32	s17, s17, s18
 8011f8e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8011f92:	edc7 8a01 	vstr	s17, [r7, #4]
 8011f96:	ed18 ba02 	vldr	s22, [r8, #-8]
 8011f9a:	ed58 8a01 	vldr	s17, [r8, #-4]
 8011f9e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8011fa2:	ee6a ba28 	vmul.f32	s23, s20, s17
 8011fa6:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8011faa:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8011fae:	ee30 9a81 	vadd.f32	s18, s1, s2
 8011fb2:	ee79 9a82 	vadd.f32	s19, s19, s4
 8011fb6:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8011fba:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8011fbe:	ee69 baa8 	vmul.f32	s23, s19, s17
 8011fc2:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8011fc6:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8011fca:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011fce:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8011fd2:	ee1c aa10 	vmov	sl, s24
 8011fd6:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8011fda:	f841 ab08 	str.w	sl, [r1], #8
 8011fde:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8011fe2:	ee3b bacb 	vsub.f32	s22, s23, s22
 8011fe6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8011fea:	ee33 3a62 	vsub.f32	s6, s6, s5
 8011fee:	ed01 aa01 	vstr	s20, [r1, #-4]
 8011ff2:	edc2 8a01 	vstr	s17, [r2, #4]
 8011ff6:	ed82 ba02 	vstr	s22, [r2, #8]
 8011ffa:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8011ffe:	ee74 3a63 	vsub.f32	s7, s8, s7
 8012002:	ee38 8a47 	vsub.f32	s16, s16, s14
 8012006:	ed1c 4a03 	vldr	s8, [ip, #-12]
 801200a:	ee30 0a46 	vsub.f32	s0, s0, s12
 801200e:	ee33 3a42 	vsub.f32	s6, s6, s4
 8012012:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012016:	ee30 0a66 	vsub.f32	s0, s0, s13
 801201a:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 801201e:	ee63 8a04 	vmul.f32	s17, s6, s8
 8012022:	ee28 aa24 	vmul.f32	s20, s16, s9
 8012026:	ee60 9a04 	vmul.f32	s19, s0, s8
 801202a:	ee28 8a04 	vmul.f32	s16, s16, s8
 801202e:	ee20 0a24 	vmul.f32	s0, s0, s9
 8012032:	ee63 3a84 	vmul.f32	s7, s7, s8
 8012036:	ee39 4a68 	vsub.f32	s8, s18, s17
 801203a:	ee7a 9a29 	vadd.f32	s19, s20, s19
 801203e:	ee14 aa10 	vmov	sl, s8
 8012042:	ee30 0a48 	vsub.f32	s0, s0, s16
 8012046:	ee63 4a24 	vmul.f32	s9, s6, s9
 801204a:	ed44 9a02 	vstr	s19, [r4, #-8]
 801204e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8012052:	ed04 0a01 	vstr	s0, [r4, #-4]
 8012056:	f846 a908 	str.w	sl, [r6], #-8
 801205a:	ee35 6a46 	vsub.f32	s12, s10, s12
 801205e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8012062:	edc6 3a01 	vstr	s7, [r6, #4]
 8012066:	ee76 6a86 	vadd.f32	s13, s13, s12
 801206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801206e:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 8012072:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 8012076:	ee67 5a86 	vmul.f32	s11, s15, s12
 801207a:	ee26 5a87 	vmul.f32	s10, s13, s14
 801207e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8012082:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8012086:	ee72 2ae1 	vsub.f32	s5, s5, s3
 801208a:	ee75 5a25 	vadd.f32	s11, s10, s11
 801208e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8012092:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012096:	ee67 7a87 	vmul.f32	s15, s15, s14
 801209a:	ee21 6a06 	vmul.f32	s12, s2, s12
 801209e:	ee62 2a87 	vmul.f32	s5, s5, s14
 80120a2:	ee21 1a07 	vmul.f32	s2, s2, s14
 80120a6:	ee15 aa90 	vmov	sl, s11
 80120aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80120ae:	f840 ab08 	str.w	sl, [r0], #8
 80120b2:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80120b6:	ee76 2a22 	vadd.f32	s5, s12, s5
 80120ba:	f1b9 0901 	subs.w	r9, r9, #1
 80120be:	ed40 7a01 	vstr	s15, [r0, #-4]
 80120c2:	f105 0508 	add.w	r5, r5, #8
 80120c6:	ed83 1a02 	vstr	s2, [r3, #8]
 80120ca:	edc3 2a01 	vstr	s5, [r3, #4]
 80120ce:	f108 0808 	add.w	r8, r8, #8
 80120d2:	f1a2 0208 	sub.w	r2, r2, #8
 80120d6:	f10c 0c10 	add.w	ip, ip, #16
 80120da:	f104 0408 	add.w	r4, r4, #8
 80120de:	f10e 0e18 	add.w	lr, lr, #24
 80120e2:	f1a3 0308 	sub.w	r3, r3, #8
 80120e6:	f47f aefc 	bne.w	8011ee2 <arm_cfft_radix8by4_f32+0x13e>
 80120ea:	9908      	ldr	r1, [sp, #32]
 80120ec:	9802      	ldr	r0, [sp, #8]
 80120ee:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 80120f2:	00cb      	lsls	r3, r1, #3
 80120f4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80120f8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80120fc:	9102      	str	r1, [sp, #8]
 80120fe:	9904      	ldr	r1, [sp, #16]
 8012100:	4419      	add	r1, r3
 8012102:	9104      	str	r1, [sp, #16]
 8012104:	9905      	ldr	r1, [sp, #20]
 8012106:	4419      	add	r1, r3
 8012108:	9105      	str	r1, [sp, #20]
 801210a:	9907      	ldr	r1, [sp, #28]
 801210c:	449b      	add	fp, r3
 801210e:	4419      	add	r1, r3
 8012110:	449a      	add	sl, r3
 8012112:	9b06      	ldr	r3, [sp, #24]
 8012114:	9107      	str	r1, [sp, #28]
 8012116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801211a:	9306      	str	r3, [sp, #24]
 801211c:	9a04      	ldr	r2, [sp, #16]
 801211e:	9807      	ldr	r0, [sp, #28]
 8012120:	edd2 3a00 	vldr	s7, [r2]
 8012124:	ed90 4a00 	vldr	s8, [r0]
 8012128:	eddb 7a00 	vldr	s15, [fp]
 801212c:	ed9a 3a00 	vldr	s6, [sl]
 8012130:	edd2 4a01 	vldr	s9, [r2, #4]
 8012134:	ed90 7a01 	vldr	s14, [r0, #4]
 8012138:	ed9b 2a01 	vldr	s4, [fp, #4]
 801213c:	edda 5a01 	vldr	s11, [sl, #4]
 8012140:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8012144:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012146:	ee73 6a84 	vadd.f32	s13, s7, s8
 801214a:	ee34 6a87 	vadd.f32	s12, s9, s14
 801214e:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8012152:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8012156:	ee33 5a05 	vadd.f32	s10, s6, s10
 801215a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801215e:	ed82 5a00 	vstr	s10, [r2]
 8012162:	ed9b 5a01 	vldr	s10, [fp, #4]
 8012166:	edda 4a01 	vldr	s9, [sl, #4]
 801216a:	ee36 5a05 	vadd.f32	s10, s12, s10
 801216e:	ee72 3a04 	vadd.f32	s7, s4, s8
 8012172:	ee35 5a24 	vadd.f32	s10, s10, s9
 8012176:	ee77 4a67 	vsub.f32	s9, s14, s15
 801217a:	ed82 5a01 	vstr	s10, [r2, #4]
 801217e:	9a05      	ldr	r2, [sp, #20]
 8012180:	ee34 5a83 	vadd.f32	s10, s9, s6
 8012184:	edd2 1a00 	vldr	s3, [r2]
 8012188:	edd2 2a01 	vldr	s5, [r2, #4]
 801218c:	9a02      	ldr	r2, [sp, #8]
 801218e:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8012192:	ee36 6a42 	vsub.f32	s12, s12, s4
 8012196:	ee63 4aa1 	vmul.f32	s9, s7, s3
 801219a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801219e:	ee65 2a22 	vmul.f32	s5, s10, s5
 80121a2:	ee25 5a21 	vmul.f32	s10, s10, s3
 80121a6:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80121aa:	ee35 5a63 	vsub.f32	s10, s10, s7
 80121ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80121b2:	edcb 2a00 	vstr	s5, [fp]
 80121b6:	ed8b 5a01 	vstr	s10, [fp, #4]
 80121ba:	edd2 3a01 	vldr	s7, [r2, #4]
 80121be:	ed92 5a00 	vldr	s10, [r2]
 80121c2:	9a06      	ldr	r2, [sp, #24]
 80121c4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80121c8:	ee36 6a65 	vsub.f32	s12, s12, s11
 80121cc:	ee66 4a85 	vmul.f32	s9, s13, s10
 80121d0:	ee26 5a05 	vmul.f32	s10, s12, s10
 80121d4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80121d8:	ee26 6a23 	vmul.f32	s12, s12, s7
 80121dc:	ee75 6a66 	vsub.f32	s13, s10, s13
 80121e0:	ee34 6a86 	vadd.f32	s12, s9, s12
 80121e4:	ee34 4a42 	vsub.f32	s8, s8, s4
 80121e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121ec:	edc0 6a01 	vstr	s13, [r0, #4]
 80121f0:	ed80 6a00 	vstr	s12, [r0]
 80121f4:	ed92 6a01 	vldr	s12, [r2, #4]
 80121f8:	9803      	ldr	r0, [sp, #12]
 80121fa:	ee77 7a43 	vsub.f32	s15, s14, s6
 80121fe:	ee75 5a84 	vadd.f32	s11, s11, s8
 8012202:	ed92 7a00 	vldr	s14, [r2]
 8012206:	ee65 6a87 	vmul.f32	s13, s11, s14
 801220a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801220e:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012212:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012216:	ee77 5a65 	vsub.f32	s11, s14, s11
 801221a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801221e:	edca 5a01 	vstr	s11, [sl, #4]
 8012222:	edca 7a00 	vstr	s15, [sl]
 8012226:	6872      	ldr	r2, [r6, #4]
 8012228:	4621      	mov	r1, r4
 801222a:	2304      	movs	r3, #4
 801222c:	f000 fd28 	bl	8012c80 <arm_radix8_butterfly_f32>
 8012230:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012232:	6872      	ldr	r2, [r6, #4]
 8012234:	4621      	mov	r1, r4
 8012236:	2304      	movs	r3, #4
 8012238:	f000 fd22 	bl	8012c80 <arm_radix8_butterfly_f32>
 801223c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801223e:	6872      	ldr	r2, [r6, #4]
 8012240:	4621      	mov	r1, r4
 8012242:	2304      	movs	r3, #4
 8012244:	f000 fd1c 	bl	8012c80 <arm_radix8_butterfly_f32>
 8012248:	9801      	ldr	r0, [sp, #4]
 801224a:	6872      	ldr	r2, [r6, #4]
 801224c:	4621      	mov	r1, r4
 801224e:	2304      	movs	r3, #4
 8012250:	b00f      	add	sp, #60	@ 0x3c
 8012252:	ecbd 8b0a 	vpop	{d8-d12}
 8012256:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225a:	f000 bd11 	b.w	8012c80 <arm_radix8_butterfly_f32>
 801225e:	bf00      	nop

08012260 <arm_cfft_f32>:
 8012260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012264:	2a01      	cmp	r2, #1
 8012266:	4606      	mov	r6, r0
 8012268:	4617      	mov	r7, r2
 801226a:	460c      	mov	r4, r1
 801226c:	4698      	mov	r8, r3
 801226e:	8805      	ldrh	r5, [r0, #0]
 8012270:	d054      	beq.n	801231c <arm_cfft_f32+0xbc>
 8012272:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8012276:	d04c      	beq.n	8012312 <arm_cfft_f32+0xb2>
 8012278:	d916      	bls.n	80122a8 <arm_cfft_f32+0x48>
 801227a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 801227e:	d01a      	beq.n	80122b6 <arm_cfft_f32+0x56>
 8012280:	d95c      	bls.n	801233c <arm_cfft_f32+0xdc>
 8012282:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8012286:	d044      	beq.n	8012312 <arm_cfft_f32+0xb2>
 8012288:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 801228c:	d105      	bne.n	801229a <arm_cfft_f32+0x3a>
 801228e:	4620      	mov	r0, r4
 8012290:	4629      	mov	r1, r5
 8012292:	6872      	ldr	r2, [r6, #4]
 8012294:	2301      	movs	r3, #1
 8012296:	f000 fcf3 	bl	8012c80 <arm_radix8_butterfly_f32>
 801229a:	f1b8 0f00 	cmp.w	r8, #0
 801229e:	d111      	bne.n	80122c4 <arm_cfft_f32+0x64>
 80122a0:	2f01      	cmp	r7, #1
 80122a2:	d016      	beq.n	80122d2 <arm_cfft_f32+0x72>
 80122a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122a8:	2d20      	cmp	r5, #32
 80122aa:	d032      	beq.n	8012312 <arm_cfft_f32+0xb2>
 80122ac:	d94a      	bls.n	8012344 <arm_cfft_f32+0xe4>
 80122ae:	2d40      	cmp	r5, #64	@ 0x40
 80122b0:	d0ed      	beq.n	801228e <arm_cfft_f32+0x2e>
 80122b2:	2d80      	cmp	r5, #128	@ 0x80
 80122b4:	d1f1      	bne.n	801229a <arm_cfft_f32+0x3a>
 80122b6:	4630      	mov	r0, r6
 80122b8:	4621      	mov	r1, r4
 80122ba:	f7ff fca1 	bl	8011c00 <arm_cfft_radix8by2_f32>
 80122be:	f1b8 0f00 	cmp.w	r8, #0
 80122c2:	d0ed      	beq.n	80122a0 <arm_cfft_f32+0x40>
 80122c4:	4620      	mov	r0, r4
 80122c6:	89b1      	ldrh	r1, [r6, #12]
 80122c8:	68b2      	ldr	r2, [r6, #8]
 80122ca:	f7ed ff89 	bl	80001e0 <arm_bitreversal_32>
 80122ce:	2f01      	cmp	r7, #1
 80122d0:	d1e8      	bne.n	80122a4 <arm_cfft_f32+0x44>
 80122d2:	ee07 5a90 	vmov	s15, r5
 80122d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80122de:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 80122e2:	2d00      	cmp	r5, #0
 80122e4:	d0de      	beq.n	80122a4 <arm_cfft_f32+0x44>
 80122e6:	f104 0108 	add.w	r1, r4, #8
 80122ea:	2300      	movs	r3, #0
 80122ec:	3301      	adds	r3, #1
 80122ee:	429d      	cmp	r5, r3
 80122f0:	f101 0108 	add.w	r1, r1, #8
 80122f4:	ed11 7a04 	vldr	s14, [r1, #-16]
 80122f8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80122fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012300:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012304:	ed01 7a04 	vstr	s14, [r1, #-16]
 8012308:	ed41 7a03 	vstr	s15, [r1, #-12]
 801230c:	d1ee      	bne.n	80122ec <arm_cfft_f32+0x8c>
 801230e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012312:	4630      	mov	r0, r6
 8012314:	4621      	mov	r1, r4
 8012316:	f7ff fd45 	bl	8011da4 <arm_cfft_radix8by4_f32>
 801231a:	e7be      	b.n	801229a <arm_cfft_f32+0x3a>
 801231c:	b1ad      	cbz	r5, 801234a <arm_cfft_f32+0xea>
 801231e:	f101 030c 	add.w	r3, r1, #12
 8012322:	2200      	movs	r2, #0
 8012324:	ed53 7a02 	vldr	s15, [r3, #-8]
 8012328:	3201      	adds	r2, #1
 801232a:	eef1 7a67 	vneg.f32	s15, s15
 801232e:	4295      	cmp	r5, r2
 8012330:	ed43 7a02 	vstr	s15, [r3, #-8]
 8012334:	f103 0308 	add.w	r3, r3, #8
 8012338:	d1f4      	bne.n	8012324 <arm_cfft_f32+0xc4>
 801233a:	e79a      	b.n	8012272 <arm_cfft_f32+0x12>
 801233c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8012340:	d0a5      	beq.n	801228e <arm_cfft_f32+0x2e>
 8012342:	e7aa      	b.n	801229a <arm_cfft_f32+0x3a>
 8012344:	2d10      	cmp	r5, #16
 8012346:	d0b6      	beq.n	80122b6 <arm_cfft_f32+0x56>
 8012348:	e7a7      	b.n	801229a <arm_cfft_f32+0x3a>
 801234a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 801234e:	d894      	bhi.n	801227a <arm_cfft_f32+0x1a>
 8012350:	e7aa      	b.n	80122a8 <arm_cfft_f32+0x48>
 8012352:	bf00      	nop

08012354 <arm_fir_init_f32>:
 8012354:	b570      	push	{r4, r5, r6, lr}
 8012356:	9c04      	ldr	r4, [sp, #16]
 8012358:	6082      	str	r2, [r0, #8]
 801235a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 801235e:	3c01      	subs	r4, #1
 8012360:	4605      	mov	r5, r0
 8012362:	440c      	add	r4, r1
 8012364:	8001      	strh	r1, [r0, #0]
 8012366:	461e      	mov	r6, r3
 8012368:	00a2      	lsls	r2, r4, #2
 801236a:	4618      	mov	r0, r3
 801236c:	2100      	movs	r1, #0
 801236e:	f001 f8bc 	bl	80134ea <memset>
 8012372:	606e      	str	r6, [r5, #4]
 8012374:	bd70      	pop	{r4, r5, r6, pc}
 8012376:	bf00      	nop

08012378 <arm_fir_f32>:
 8012378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801237c:	ed2d 8b10 	vpush	{d8-d15}
 8012380:	b089      	sub	sp, #36	@ 0x24
 8012382:	4605      	mov	r5, r0
 8012384:	9003      	str	r0, [sp, #12]
 8012386:	8800      	ldrh	r0, [r0, #0]
 8012388:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801238c:	9304      	str	r3, [sp, #16]
 801238e:	461e      	mov	r6, r3
 8012390:	f100 4380 	add.w	r3, r0, #1073741824	@ 0x40000000
 8012394:	3b01      	subs	r3, #1
 8012396:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 801239a:	08f3      	lsrs	r3, r6, #3
 801239c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80123a0:	9001      	str	r0, [sp, #4]
 80123a2:	4625      	mov	r5, r4
 80123a4:	9400      	str	r4, [sp, #0]
 80123a6:	9302      	str	r3, [sp, #8]
 80123a8:	f000 81ee 	beq.w	8012788 <arm_fir_f32+0x410>
 80123ac:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 80123b0:	469e      	mov	lr, r3
 80123b2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80123b6:	1f1e      	subs	r6, r3, #4
 80123b8:	4604      	mov	r4, r0
 80123ba:	9605      	str	r6, [sp, #20]
 80123bc:	eb08 0003 	add.w	r0, r8, r3
 80123c0:	f004 0a07 	and.w	sl, r4, #7
 80123c4:	4613      	mov	r3, r2
 80123c6:	f10c 0420 	add.w	r4, ip, #32
 80123ca:	f8cd c018 	str.w	ip, [sp, #24]
 80123ce:	4684      	mov	ip, r0
 80123d0:	4648      	mov	r0, r9
 80123d2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80123d6:	9107      	str	r1, [sp, #28]
 80123d8:	f105 0720 	add.w	r7, r5, #32
 80123dc:	f101 0620 	add.w	r6, r1, #32
 80123e0:	f102 0520 	add.w	r5, r2, #32
 80123e4:	4652      	mov	r2, sl
 80123e6:	469a      	mov	sl, r3
 80123e8:	f856 3c20 	ldr.w	r3, [r6, #-32]
 80123ec:	f847 3c20 	str.w	r3, [r7, #-32]
 80123f0:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 80123f4:	f847 3c1c 	str.w	r3, [r7, #-28]
 80123f8:	f856 3c18 	ldr.w	r3, [r6, #-24]
 80123fc:	f847 3c18 	str.w	r3, [r7, #-24]
 8012400:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8012404:	f847 3c14 	str.w	r3, [r7, #-20]
 8012408:	f856 3c10 	ldr.w	r3, [r6, #-16]
 801240c:	f847 3c10 	str.w	r3, [r7, #-16]
 8012410:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8012414:	f847 3c0c 	str.w	r3, [r7, #-12]
 8012418:	f856 3c08 	ldr.w	r3, [r6, #-8]
 801241c:	f847 3c08 	str.w	r3, [r7, #-8]
 8012420:	eddf 3af1 	vldr	s7, [pc, #964]	@ 80127e8 <arm_fir_f32+0x470>
 8012424:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012428:	f847 3c04 	str.w	r3, [r7, #-4]
 801242c:	ed14 3a08 	vldr	s6, [r4, #-32]	@ 0xffffffe0
 8012430:	ed54 2a07 	vldr	s5, [r4, #-28]	@ 0xffffffe4
 8012434:	ed14 2a06 	vldr	s4, [r4, #-24]	@ 0xffffffe8
 8012438:	ed54 1a05 	vldr	s3, [r4, #-20]	@ 0xffffffec
 801243c:	ed14 1a04 	vldr	s2, [r4, #-16]
 8012440:	ed54 0a03 	vldr	s1, [r4, #-12]
 8012444:	ed14 0a02 	vldr	s0, [r4, #-8]
 8012448:	1f21      	subs	r1, r4, #4
 801244a:	eef0 8a63 	vmov.f32	s17, s7
 801244e:	eef0 9a63 	vmov.f32	s19, s7
 8012452:	eef0 aa63 	vmov.f32	s21, s7
 8012456:	eef0 ba63 	vmov.f32	s23, s7
 801245a:	eeb0 ca63 	vmov.f32	s24, s7
 801245e:	eef0 ca63 	vmov.f32	s25, s7
 8012462:	eeb0 da63 	vmov.f32	s26, s7
 8012466:	2800      	cmp	r0, #0
 8012468:	f000 81e8 	beq.w	801283c <arm_fir_f32+0x4c4>
 801246c:	f108 0120 	add.w	r1, r8, #32
 8012470:	f104 031c 	add.w	r3, r4, #28
 8012474:	4683      	mov	fp, r0
 8012476:	ed13 8a08 	vldr	s16, [r3, #-32]	@ 0xffffffe0
 801247a:	ed11 4a08 	vldr	s8, [r1, #-32]	@ 0xffffffe0
 801247e:	ed51 4a07 	vldr	s9, [r1, #-28]	@ 0xffffffe4
 8012482:	ed11 5a06 	vldr	s10, [r1, #-24]	@ 0xffffffe8
 8012486:	ed51 5a05 	vldr	s11, [r1, #-20]	@ 0xffffffec
 801248a:	ed11 6a04 	vldr	s12, [r1, #-16]
 801248e:	ed51 6a03 	vldr	s13, [r1, #-12]
 8012492:	ed11 7a02 	vldr	s14, [r1, #-8]
 8012496:	ed51 7a01 	vldr	s15, [r1, #-4]
 801249a:	ee23 fa04 	vmul.f32	s30, s6, s8
 801249e:	ee62 ea84 	vmul.f32	s29, s5, s8
 80124a2:	ed13 3a07 	vldr	s6, [r3, #-28]	@ 0xffffffe4
 80124a6:	ee22 ea04 	vmul.f32	s28, s4, s8
 80124aa:	ee61 da84 	vmul.f32	s27, s3, s8
 80124ae:	ee21 ba04 	vmul.f32	s22, s2, s8
 80124b2:	ee20 aa84 	vmul.f32	s20, s1, s8
 80124b6:	ee20 9a04 	vmul.f32	s18, s0, s8
 80124ba:	ee28 4a04 	vmul.f32	s8, s16, s8
 80124be:	ee62 fa24 	vmul.f32	s31, s4, s9
 80124c2:	ee3c ca0e 	vadd.f32	s24, s24, s28
 80124c6:	ee7b baad 	vadd.f32	s23, s23, s27
 80124ca:	ee21 eaa4 	vmul.f32	s28, s3, s9
 80124ce:	ee61 da24 	vmul.f32	s27, s2, s9
 80124d2:	ee7a aa8b 	vadd.f32	s21, s21, s22
 80124d6:	ee79 9a8a 	vadd.f32	s19, s19, s20
 80124da:	ee20 baa4 	vmul.f32	s22, s1, s9
 80124de:	ee20 aa24 	vmul.f32	s20, s0, s9
 80124e2:	ee3d da0f 	vadd.f32	s26, s26, s30
 80124e6:	ee7c caae 	vadd.f32	s25, s25, s29
 80124ea:	ee22 faa4 	vmul.f32	s30, s5, s9
 80124ee:	ee78 8a89 	vadd.f32	s17, s17, s18
 80124f2:	ed53 2a06 	vldr	s5, [r3, #-24]	@ 0xffffffe8
 80124f6:	ee28 9a24 	vmul.f32	s18, s16, s9
 80124fa:	ee73 3a84 	vadd.f32	s7, s7, s8
 80124fe:	ee63 4a24 	vmul.f32	s9, s6, s9
 8012502:	ee22 4a05 	vmul.f32	s8, s4, s10
 8012506:	ee61 ea05 	vmul.f32	s29, s2, s10
 801250a:	ed13 2a05 	vldr	s4, [r3, #-20]	@ 0xffffffec
 801250e:	ee3d da0f 	vadd.f32	s26, s26, s30
 8012512:	ee7c caaf 	vadd.f32	s25, s25, s31
 8012516:	ee20 fa85 	vmul.f32	s30, s1, s10
 801251a:	ee61 fa85 	vmul.f32	s31, s3, s10
 801251e:	ee3c ea0e 	vadd.f32	s28, s24, s28
 8012522:	ee7b daad 	vadd.f32	s27, s23, s27
 8012526:	ee3a ba8b 	vadd.f32	s22, s21, s22
 801252a:	ee60 ba05 	vmul.f32	s23, s0, s10
 801252e:	ee68 aa05 	vmul.f32	s21, s16, s10
 8012532:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8012536:	ee78 8a89 	vadd.f32	s17, s17, s18
 801253a:	ee73 3aa4 	vadd.f32	s7, s7, s9
 801253e:	ee63 4a05 	vmul.f32	s9, s6, s10
 8012542:	ee22 5a85 	vmul.f32	s10, s5, s10
 8012546:	ee21 9a25 	vmul.f32	s18, s2, s11
 801254a:	ee20 ca25 	vmul.f32	s24, s0, s11
 801254e:	ee3d da04 	vadd.f32	s26, s26, s8
 8012552:	ee7c caaf 	vadd.f32	s25, s25, s31
 8012556:	ee21 4aa5 	vmul.f32	s8, s3, s11
 801255a:	ee3e ea2e 	vadd.f32	s28, s28, s29
 801255e:	ed53 1a04 	vldr	s3, [r3, #-16]
 8012562:	ee60 eaa5 	vmul.f32	s29, s1, s11
 8012566:	ee7d da8f 	vadd.f32	s27, s27, s30
 801256a:	ee3b ba2b 	vadd.f32	s22, s22, s23
 801256e:	ee3a aa2a 	vadd.f32	s20, s20, s21
 8012572:	ee68 ba25 	vmul.f32	s23, s16, s11
 8012576:	ee63 aa25 	vmul.f32	s21, s6, s11
 801257a:	ee78 8aa4 	vadd.f32	s17, s17, s9
 801257e:	ee73 3a85 	vadd.f32	s7, s7, s10
 8012582:	ee22 5aa5 	vmul.f32	s10, s5, s11
 8012586:	ee62 5a25 	vmul.f32	s11, s4, s11
 801258a:	ee61 4a06 	vmul.f32	s9, s2, s12
 801258e:	ee60 9a86 	vmul.f32	s19, s1, s12
 8012592:	ee60 fa06 	vmul.f32	s31, s0, s12
 8012596:	ed13 1a03 	vldr	s2, [r3, #-12]
 801259a:	ee23 fa06 	vmul.f32	s30, s6, s12
 801259e:	ee3d da04 	vadd.f32	s26, s26, s8
 80125a2:	ee7c ca89 	vadd.f32	s25, s25, s18
 80125a6:	ee3e ea2e 	vadd.f32	s28, s28, s29
 80125aa:	ee28 9a06 	vmul.f32	s18, s16, s12
 80125ae:	ee7d da8c 	vadd.f32	s27, s27, s24
 80125b2:	ee3b ba2b 	vadd.f32	s22, s22, s23
 80125b6:	ee22 ca86 	vmul.f32	s24, s5, s12
 80125ba:	ee3a aa2a 	vadd.f32	s20, s20, s21
 80125be:	ee78 8a85 	vadd.f32	s17, s17, s10
 80125c2:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80125c6:	ee62 5a06 	vmul.f32	s11, s4, s12
 80125ca:	ee21 6a86 	vmul.f32	s12, s3, s12
 80125ce:	ee20 4a26 	vmul.f32	s8, s0, s13
 80125d2:	ee63 ea26 	vmul.f32	s29, s6, s13
 80125d6:	ee3a aa0c 	vadd.f32	s20, s20, s24
 80125da:	ee22 5a26 	vmul.f32	s10, s4, s13
 80125de:	ee3d da24 	vadd.f32	s26, s26, s9
 80125e2:	ee7c caa9 	vadd.f32	s25, s25, s19
 80125e6:	ee60 4aa6 	vmul.f32	s9, s1, s13
 80125ea:	ee3e ea2f 	vadd.f32	s28, s28, s31
 80125ee:	ed53 0a02 	vldr	s1, [r3, #-8]
 80125f2:	ee68 fa26 	vmul.f32	s31, s16, s13
 80125f6:	ee7d da89 	vadd.f32	s27, s27, s18
 80125fa:	ee3b ba0f 	vadd.f32	s22, s22, s30
 80125fe:	ee78 8aa5 	vadd.f32	s17, s17, s11
 8012602:	ee22 faa6 	vmul.f32	s30, s5, s13
 8012606:	ee73 3a86 	vadd.f32	s7, s7, s12
 801260a:	ee21 6aa6 	vmul.f32	s12, s3, s13
 801260e:	ee61 6a26 	vmul.f32	s13, s2, s13
 8012612:	ee60 aa07 	vmul.f32	s21, s0, s14
 8012616:	ee28 ca07 	vmul.f32	s24, s16, s14
 801261a:	ee63 ba07 	vmul.f32	s23, s6, s14
 801261e:	ee7a 9a05 	vadd.f32	s19, s20, s10
 8012622:	ee78 8a86 	vadd.f32	s17, s17, s12
 8012626:	ee3d da24 	vadd.f32	s26, s26, s9
 801262a:	ee7c ca84 	vadd.f32	s25, s25, s8
 801262e:	ee7d daae 	vadd.f32	s27, s27, s29
 8012632:	ee22 9a07 	vmul.f32	s18, s4, s14
 8012636:	ee62 ea87 	vmul.f32	s29, s5, s14
 801263a:	ee61 5a87 	vmul.f32	s11, s3, s14
 801263e:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8012642:	ed13 0a01 	vldr	s0, [r3, #-4]
 8012646:	ee61 6a07 	vmul.f32	s13, s2, s14
 801264a:	ee3e ea2f 	vadd.f32	s28, s28, s31
 801264e:	ee3b ba0f 	vadd.f32	s22, s22, s30
 8012652:	ee20 7a87 	vmul.f32	s14, s1, s14
 8012656:	ee68 4a27 	vmul.f32	s9, s16, s15
 801265a:	ee3d da2a 	vadd.f32	s26, s26, s21
 801265e:	ee7c ca8c 	vadd.f32	s25, s25, s24
 8012662:	ee23 8a27 	vmul.f32	s16, s6, s15
 8012666:	ee3e ea2b 	vadd.f32	s28, s28, s23
 801266a:	ee22 4aa7 	vmul.f32	s8, s5, s15
 801266e:	ee22 aa27 	vmul.f32	s20, s4, s15
 8012672:	ee21 5aa7 	vmul.f32	s10, s3, s15
 8012676:	ee21 6a27 	vmul.f32	s12, s2, s15
 801267a:	ee78 6aa6 	vadd.f32	s13, s17, s13
 801267e:	ee7d daae 	vadd.f32	s27, s27, s29
 8012682:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8012686:	ee3b ba09 	vadd.f32	s22, s22, s18
 801268a:	ee79 9aa5 	vadd.f32	s19, s19, s11
 801268e:	ee73 3a87 	vadd.f32	s7, s7, s14
 8012692:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012696:	f1bb 0b01 	subs.w	fp, fp, #1
 801269a:	f101 0120 	add.w	r1, r1, #32
 801269e:	ee3d da24 	vadd.f32	s26, s26, s9
 80126a2:	ee7c ca88 	vadd.f32	s25, s25, s16
 80126a6:	ee3e ca04 	vadd.f32	s24, s28, s8
 80126aa:	ee7d ba8a 	vadd.f32	s23, s27, s20
 80126ae:	ee7b aa05 	vadd.f32	s21, s22, s10
 80126b2:	ee79 9a86 	vadd.f32	s19, s19, s12
 80126b6:	ee76 8aa8 	vadd.f32	s17, s13, s17
 80126ba:	ee73 3aa7 	vadd.f32	s7, s7, s15
 80126be:	f103 0320 	add.w	r3, r3, #32
 80126c2:	f47f aed8 	bne.w	8012476 <arm_fir_f32+0xfe>
 80126c6:	eb09 0104 	add.w	r1, r9, r4
 80126ca:	46e3      	mov	fp, ip
 80126cc:	b3a2      	cbz	r2, 8012738 <arm_fir_f32+0x3c0>
 80126ce:	4613      	mov	r3, r2
 80126d0:	ecbb 6a01 	vldmia	fp!, {s12}
 80126d4:	ecf1 7a01 	vldmia	r1!, {s15}
 80126d8:	ee23 3a06 	vmul.f32	s6, s6, s12
 80126dc:	ee22 4a86 	vmul.f32	s8, s5, s12
 80126e0:	ee62 4a06 	vmul.f32	s9, s4, s12
 80126e4:	ee21 5a86 	vmul.f32	s10, s3, s12
 80126e8:	ee61 5a06 	vmul.f32	s11, s2, s12
 80126ec:	ee60 6a86 	vmul.f32	s13, s1, s12
 80126f0:	ee20 7a06 	vmul.f32	s14, s0, s12
 80126f4:	ee27 6a86 	vmul.f32	s12, s15, s12
 80126f8:	3b01      	subs	r3, #1
 80126fa:	ee3d da03 	vadd.f32	s26, s26, s6
 80126fe:	ee7c ca84 	vadd.f32	s25, s25, s8
 8012702:	eeb0 3a62 	vmov.f32	s6, s5
 8012706:	ee3c ca24 	vadd.f32	s24, s24, s9
 801270a:	eef0 2a42 	vmov.f32	s5, s4
 801270e:	ee7b ba85 	vadd.f32	s23, s23, s10
 8012712:	eeb0 2a61 	vmov.f32	s4, s3
 8012716:	ee7a aaa5 	vadd.f32	s21, s21, s11
 801271a:	eef0 1a41 	vmov.f32	s3, s2
 801271e:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8012722:	eeb0 1a60 	vmov.f32	s2, s1
 8012726:	ee78 8a87 	vadd.f32	s17, s17, s14
 801272a:	eef0 0a40 	vmov.f32	s1, s0
 801272e:	ee73 3a86 	vadd.f32	s7, s7, s12
 8012732:	eeb0 0a67 	vmov.f32	s0, s15
 8012736:	d1cb      	bne.n	80126d0 <arm_fir_f32+0x358>
 8012738:	f1be 0e01 	subs.w	lr, lr, #1
 801273c:	ed05 da08 	vstr	s26, [r5, #-32]	@ 0xffffffe0
 8012740:	ed45 ca07 	vstr	s25, [r5, #-28]	@ 0xffffffe4
 8012744:	ed05 ca06 	vstr	s24, [r5, #-24]	@ 0xffffffe8
 8012748:	ed45 ba05 	vstr	s23, [r5, #-20]	@ 0xffffffec
 801274c:	ed45 aa04 	vstr	s21, [r5, #-16]
 8012750:	ed45 9a03 	vstr	s19, [r5, #-12]
 8012754:	ed45 8a02 	vstr	s17, [r5, #-8]
 8012758:	ed45 3a01 	vstr	s7, [r5, #-4]
 801275c:	f107 0720 	add.w	r7, r7, #32
 8012760:	f106 0620 	add.w	r6, r6, #32
 8012764:	f104 0420 	add.w	r4, r4, #32
 8012768:	f105 0520 	add.w	r5, r5, #32
 801276c:	f47f ae3c 	bne.w	80123e8 <arm_fir_f32+0x70>
 8012770:	9b02      	ldr	r3, [sp, #8]
 8012772:	9800      	ldr	r0, [sp, #0]
 8012774:	f8dd c018 	ldr.w	ip, [sp, #24]
 8012778:	9907      	ldr	r1, [sp, #28]
 801277a:	015b      	lsls	r3, r3, #5
 801277c:	4652      	mov	r2, sl
 801277e:	4418      	add	r0, r3
 8012780:	9000      	str	r0, [sp, #0]
 8012782:	4419      	add	r1, r3
 8012784:	449c      	add	ip, r3
 8012786:	441a      	add	r2, r3
 8012788:	9b04      	ldr	r3, [sp, #16]
 801278a:	f013 0e07 	ands.w	lr, r3, #7
 801278e:	d01f      	beq.n	80127d0 <arm_fir_f32+0x458>
 8012790:	9f00      	ldr	r7, [sp, #0]
 8012792:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012796:	4676      	mov	r6, lr
 8012798:	4665      	mov	r5, ip
 801279a:	f851 3b04 	ldr.w	r3, [r1], #4
 801279e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80127e8 <arm_fir_f32+0x470>
 80127a2:	f847 3b04 	str.w	r3, [r7], #4
 80127a6:	4644      	mov	r4, r8
 80127a8:	464b      	mov	r3, r9
 80127aa:	4628      	mov	r0, r5
 80127ac:	ecb0 7a01 	vldmia	r0!, {s14}
 80127b0:	ecf4 7a01 	vldmia	r4!, {s15}
 80127b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127b8:	3b01      	subs	r3, #1
 80127ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80127be:	d1f5      	bne.n	80127ac <arm_fir_f32+0x434>
 80127c0:	3e01      	subs	r6, #1
 80127c2:	ece2 6a01 	vstmia	r2!, {s13}
 80127c6:	f105 0504 	add.w	r5, r5, #4
 80127ca:	d1e6      	bne.n	801279a <arm_fir_f32+0x422>
 80127cc:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 80127d0:	9b01      	ldr	r3, [sp, #4]
 80127d2:	1e59      	subs	r1, r3, #1
 80127d4:	9b03      	ldr	r3, [sp, #12]
 80127d6:	088e      	lsrs	r6, r1, #2
 80127d8:	685c      	ldr	r4, [r3, #4]
 80127da:	d020      	beq.n	801281e <arm_fir_f32+0x4a6>
 80127dc:	f104 0210 	add.w	r2, r4, #16
 80127e0:	f10c 0310 	add.w	r3, ip, #16
 80127e4:	4630      	mov	r0, r6
 80127e6:	e001      	b.n	80127ec <arm_fir_f32+0x474>
 80127e8:	00000000 	.word	0x00000000
 80127ec:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80127f0:	f842 5c10 	str.w	r5, [r2, #-16]
 80127f4:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 80127f8:	f842 5c0c 	str.w	r5, [r2, #-12]
 80127fc:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8012800:	f842 5c08 	str.w	r5, [r2, #-8]
 8012804:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8012808:	f842 5c04 	str.w	r5, [r2, #-4]
 801280c:	3801      	subs	r0, #1
 801280e:	f103 0310 	add.w	r3, r3, #16
 8012812:	f102 0210 	add.w	r2, r2, #16
 8012816:	d1e9      	bne.n	80127ec <arm_fir_f32+0x474>
 8012818:	0133      	lsls	r3, r6, #4
 801281a:	441c      	add	r4, r3
 801281c:	449c      	add	ip, r3
 801281e:	f011 0303 	ands.w	r3, r1, #3
 8012822:	d006      	beq.n	8012832 <arm_fir_f32+0x4ba>
 8012824:	4622      	mov	r2, r4
 8012826:	f85c 1b04 	ldr.w	r1, [ip], #4
 801282a:	f842 1b04 	str.w	r1, [r2], #4
 801282e:	3b01      	subs	r3, #1
 8012830:	d1f9      	bne.n	8012826 <arm_fir_f32+0x4ae>
 8012832:	b009      	add	sp, #36	@ 0x24
 8012834:	ecbd 8b10 	vpop	{d8-d15}
 8012838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801283c:	46c3      	mov	fp, r8
 801283e:	e745      	b.n	80126cc <arm_fir_f32+0x354>

08012840 <arm_cmplx_mag_f32>:
 8012840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012844:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8012848:	b084      	sub	sp, #16
 801284a:	d07f      	beq.n	801294c <arm_cmplx_mag_f32+0x10c>
 801284c:	2700      	movs	r7, #0
 801284e:	f100 0420 	add.w	r4, r0, #32
 8012852:	f101 0510 	add.w	r5, r1, #16
 8012856:	4646      	mov	r6, r8
 8012858:	e05a      	b.n	8012910 <arm_cmplx_mag_f32+0xd0>
 801285a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801285e:	eeb4 0a40 	vcmp.f32	s0, s0
 8012862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012866:	f040 80a4 	bne.w	80129b2 <arm_cmplx_mag_f32+0x172>
 801286a:	ed05 0a04 	vstr	s0, [r5, #-16]
 801286e:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8012872:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 8012876:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801287a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801287e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012882:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288a:	f2c0 808f 	blt.w	80129ac <arm_cmplx_mag_f32+0x16c>
 801288e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012892:	eeb4 0a40 	vcmp.f32	s0, s0
 8012896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289a:	f040 80af 	bne.w	80129fc <arm_cmplx_mag_f32+0x1bc>
 801289e:	ed05 0a03 	vstr	s0, [r5, #-12]
 80128a2:	ed54 7a04 	vldr	s15, [r4, #-16]
 80128a6:	ed14 0a03 	vldr	s0, [r4, #-12]
 80128aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80128ae:	ee20 0a00 	vmul.f32	s0, s0, s0
 80128b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80128b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128be:	db72      	blt.n	80129a6 <arm_cmplx_mag_f32+0x166>
 80128c0:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80128c4:	eeb4 0a40 	vcmp.f32	s0, s0
 80128c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128cc:	f040 808c 	bne.w	80129e8 <arm_cmplx_mag_f32+0x1a8>
 80128d0:	ed05 0a02 	vstr	s0, [r5, #-8]
 80128d4:	ed54 7a02 	vldr	s15, [r4, #-8]
 80128d8:	ed14 0a01 	vldr	s0, [r4, #-4]
 80128dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80128e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80128e4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80128e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f0:	db20      	blt.n	8012934 <arm_cmplx_mag_f32+0xf4>
 80128f2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80128f6:	eeb4 0a40 	vcmp.f32	s0, s0
 80128fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fe:	d169      	bne.n	80129d4 <arm_cmplx_mag_f32+0x194>
 8012900:	3e01      	subs	r6, #1
 8012902:	ed05 0a01 	vstr	s0, [r5, #-4]
 8012906:	f104 0420 	add.w	r4, r4, #32
 801290a:	f105 0510 	add.w	r5, r5, #16
 801290e:	d019      	beq.n	8012944 <arm_cmplx_mag_f32+0x104>
 8012910:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 8012914:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8012918:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801291c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012920:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012924:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801292c:	da95      	bge.n	801285a <arm_cmplx_mag_f32+0x1a>
 801292e:	f845 7c10 	str.w	r7, [r5, #-16]
 8012932:	e79c      	b.n	801286e <arm_cmplx_mag_f32+0x2e>
 8012934:	3e01      	subs	r6, #1
 8012936:	f845 7c04 	str.w	r7, [r5, #-4]
 801293a:	f104 0420 	add.w	r4, r4, #32
 801293e:	f105 0510 	add.w	r5, r5, #16
 8012942:	d1e5      	bne.n	8012910 <arm_cmplx_mag_f32+0xd0>
 8012944:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8012948:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 801294c:	f012 0503 	ands.w	r5, r2, #3
 8012950:	d026      	beq.n	80129a0 <arm_cmplx_mag_f32+0x160>
 8012952:	2600      	movs	r6, #0
 8012954:	f100 0408 	add.w	r4, r0, #8
 8012958:	e00c      	b.n	8012974 <arm_cmplx_mag_f32+0x134>
 801295a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801295e:	eeb4 0a40 	vcmp.f32	s0, s0
 8012962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012966:	d12e      	bne.n	80129c6 <arm_cmplx_mag_f32+0x186>
 8012968:	3d01      	subs	r5, #1
 801296a:	ed01 0a01 	vstr	s0, [r1, #-4]
 801296e:	f104 0408 	add.w	r4, r4, #8
 8012972:	d015      	beq.n	80129a0 <arm_cmplx_mag_f32+0x160>
 8012974:	ed54 7a02 	vldr	s15, [r4, #-8]
 8012978:	ed14 0a01 	vldr	s0, [r4, #-4]
 801297c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012980:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012984:	3104      	adds	r1, #4
 8012986:	ee77 7a80 	vadd.f32	s15, s15, s0
 801298a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012992:	dae2      	bge.n	801295a <arm_cmplx_mag_f32+0x11a>
 8012994:	3d01      	subs	r5, #1
 8012996:	f841 6c04 	str.w	r6, [r1, #-4]
 801299a:	f104 0408 	add.w	r4, r4, #8
 801299e:	d1e9      	bne.n	8012974 <arm_cmplx_mag_f32+0x134>
 80129a0:	b004      	add	sp, #16
 80129a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a6:	f845 7c08 	str.w	r7, [r5, #-8]
 80129aa:	e793      	b.n	80128d4 <arm_cmplx_mag_f32+0x94>
 80129ac:	f845 7c0c 	str.w	r7, [r5, #-12]
 80129b0:	e777      	b.n	80128a2 <arm_cmplx_mag_f32+0x62>
 80129b2:	eeb0 0a67 	vmov.f32	s0, s15
 80129b6:	9203      	str	r2, [sp, #12]
 80129b8:	9102      	str	r1, [sp, #8]
 80129ba:	9001      	str	r0, [sp, #4]
 80129bc:	f001 fe4a 	bl	8014654 <sqrtf>
 80129c0:	a801      	add	r0, sp, #4
 80129c2:	c807      	ldmia	r0, {r0, r1, r2}
 80129c4:	e751      	b.n	801286a <arm_cmplx_mag_f32+0x2a>
 80129c6:	eeb0 0a67 	vmov.f32	s0, s15
 80129ca:	9101      	str	r1, [sp, #4]
 80129cc:	f001 fe42 	bl	8014654 <sqrtf>
 80129d0:	9901      	ldr	r1, [sp, #4]
 80129d2:	e7c9      	b.n	8012968 <arm_cmplx_mag_f32+0x128>
 80129d4:	eeb0 0a67 	vmov.f32	s0, s15
 80129d8:	9203      	str	r2, [sp, #12]
 80129da:	9102      	str	r1, [sp, #8]
 80129dc:	9001      	str	r0, [sp, #4]
 80129de:	f001 fe39 	bl	8014654 <sqrtf>
 80129e2:	a801      	add	r0, sp, #4
 80129e4:	c807      	ldmia	r0, {r0, r1, r2}
 80129e6:	e78b      	b.n	8012900 <arm_cmplx_mag_f32+0xc0>
 80129e8:	eeb0 0a67 	vmov.f32	s0, s15
 80129ec:	9203      	str	r2, [sp, #12]
 80129ee:	9102      	str	r1, [sp, #8]
 80129f0:	9001      	str	r0, [sp, #4]
 80129f2:	f001 fe2f 	bl	8014654 <sqrtf>
 80129f6:	a801      	add	r0, sp, #4
 80129f8:	c807      	ldmia	r0, {r0, r1, r2}
 80129fa:	e769      	b.n	80128d0 <arm_cmplx_mag_f32+0x90>
 80129fc:	eeb0 0a67 	vmov.f32	s0, s15
 8012a00:	9203      	str	r2, [sp, #12]
 8012a02:	9102      	str	r1, [sp, #8]
 8012a04:	9001      	str	r0, [sp, #4]
 8012a06:	f001 fe25 	bl	8014654 <sqrtf>
 8012a0a:	a801      	add	r0, sp, #4
 8012a0c:	c807      	ldmia	r0, {r0, r1, r2}
 8012a0e:	e746      	b.n	801289e <arm_cmplx_mag_f32+0x5e>

08012a10 <arm_cos_f32>:
 8012a10:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8012a84 <arm_cos_f32+0x74>
 8012a14:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012a18:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8012a1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a28:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012a2c:	d504      	bpl.n	8012a38 <arm_cos_f32+0x28>
 8012a2e:	ee17 3a90 	vmov	r3, s15
 8012a32:	3b01      	subs	r3, #1
 8012a34:	ee07 3a90 	vmov	s15, r3
 8012a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a3c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8012a88 <arm_cos_f32+0x78>
 8012a40:	4a12      	ldr	r2, [pc, #72]	@ (8012a8c <arm_cos_f32+0x7c>)
 8012a42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012a46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012a4a:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012a4e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012a52:	ee17 3a90 	vmov	r3, s15
 8012a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a5a:	ee07 3a90 	vmov	s15, r3
 8012a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a62:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8012a66:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012a6a:	edd1 6a01 	vldr	s13, [r1, #4]
 8012a6e:	ed91 0a00 	vldr	s0, [r1]
 8012a72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a7a:	ee27 0a00 	vmul.f32	s0, s14, s0
 8012a7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012a82:	4770      	bx	lr
 8012a84:	3e22f983 	.word	0x3e22f983
 8012a88:	44000000 	.word	0x44000000
 8012a8c:	0802637c 	.word	0x0802637c

08012a90 <arm_sub_f32>:
 8012a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a92:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8012a96:	d033      	beq.n	8012b00 <arm_sub_f32+0x70>
 8012a98:	f100 0610 	add.w	r6, r0, #16
 8012a9c:	f101 0510 	add.w	r5, r1, #16
 8012aa0:	f102 0410 	add.w	r4, r2, #16
 8012aa4:	4677      	mov	r7, lr
 8012aa6:	ed16 6a03 	vldr	s12, [r6, #-12]
 8012aaa:	ed15 4a03 	vldr	s8, [r5, #-12]
 8012aae:	ed56 6a02 	vldr	s13, [r6, #-8]
 8012ab2:	ed55 4a02 	vldr	s9, [r5, #-8]
 8012ab6:	ed16 7a01 	vldr	s14, [r6, #-4]
 8012aba:	ed15 5a01 	vldr	s10, [r5, #-4]
 8012abe:	ed56 7a04 	vldr	s15, [r6, #-16]
 8012ac2:	ed55 5a04 	vldr	s11, [r5, #-16]
 8012ac6:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012aca:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012ace:	ee37 7a45 	vsub.f32	s14, s14, s10
 8012ad2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8012ad6:	3f01      	subs	r7, #1
 8012ad8:	ed04 6a03 	vstr	s12, [r4, #-12]
 8012adc:	ed44 6a02 	vstr	s13, [r4, #-8]
 8012ae0:	ed04 7a01 	vstr	s14, [r4, #-4]
 8012ae4:	ed44 7a04 	vstr	s15, [r4, #-16]
 8012ae8:	f106 0610 	add.w	r6, r6, #16
 8012aec:	f105 0510 	add.w	r5, r5, #16
 8012af0:	f104 0410 	add.w	r4, r4, #16
 8012af4:	d1d7      	bne.n	8012aa6 <arm_sub_f32+0x16>
 8012af6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012afa:	4420      	add	r0, r4
 8012afc:	4421      	add	r1, r4
 8012afe:	4422      	add	r2, r4
 8012b00:	f013 0303 	ands.w	r3, r3, #3
 8012b04:	d009      	beq.n	8012b1a <arm_sub_f32+0x8a>
 8012b06:	ecf0 7a01 	vldmia	r0!, {s15}
 8012b0a:	ecb1 7a01 	vldmia	r1!, {s14}
 8012b0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012b12:	3b01      	subs	r3, #1
 8012b14:	ece2 7a01 	vstmia	r2!, {s15}
 8012b18:	d1f5      	bne.n	8012b06 <arm_sub_f32+0x76>
 8012b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b1c <arm_scale_f32>:
 8012b1c:	b470      	push	{r4, r5, r6}
 8012b1e:	0896      	lsrs	r6, r2, #2
 8012b20:	d025      	beq.n	8012b6e <arm_scale_f32+0x52>
 8012b22:	f100 0410 	add.w	r4, r0, #16
 8012b26:	f101 0310 	add.w	r3, r1, #16
 8012b2a:	4635      	mov	r5, r6
 8012b2c:	ed14 6a04 	vldr	s12, [r4, #-16]
 8012b30:	ed54 6a03 	vldr	s13, [r4, #-12]
 8012b34:	ed14 7a02 	vldr	s14, [r4, #-8]
 8012b38:	ed54 7a01 	vldr	s15, [r4, #-4]
 8012b3c:	ee26 6a00 	vmul.f32	s12, s12, s0
 8012b40:	ee66 6a80 	vmul.f32	s13, s13, s0
 8012b44:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012b48:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012b4c:	3d01      	subs	r5, #1
 8012b4e:	ed03 6a04 	vstr	s12, [r3, #-16]
 8012b52:	ed43 6a03 	vstr	s13, [r3, #-12]
 8012b56:	ed03 7a02 	vstr	s14, [r3, #-8]
 8012b5a:	ed43 7a01 	vstr	s15, [r3, #-4]
 8012b5e:	f104 0410 	add.w	r4, r4, #16
 8012b62:	f103 0310 	add.w	r3, r3, #16
 8012b66:	d1e1      	bne.n	8012b2c <arm_scale_f32+0x10>
 8012b68:	0136      	lsls	r6, r6, #4
 8012b6a:	4430      	add	r0, r6
 8012b6c:	4431      	add	r1, r6
 8012b6e:	f012 0203 	ands.w	r2, r2, #3
 8012b72:	d007      	beq.n	8012b84 <arm_scale_f32+0x68>
 8012b74:	ecf0 7a01 	vldmia	r0!, {s15}
 8012b78:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012b7c:	3a01      	subs	r2, #1
 8012b7e:	ece1 7a01 	vstmia	r1!, {s15}
 8012b82:	d1f7      	bne.n	8012b74 <arm_scale_f32+0x58>
 8012b84:	bc70      	pop	{r4, r5, r6}
 8012b86:	4770      	bx	lr

08012b88 <arm_add_f32>:
 8012b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b8a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8012b8e:	d033      	beq.n	8012bf8 <arm_add_f32+0x70>
 8012b90:	f100 0610 	add.w	r6, r0, #16
 8012b94:	f101 0510 	add.w	r5, r1, #16
 8012b98:	f102 0410 	add.w	r4, r2, #16
 8012b9c:	4677      	mov	r7, lr
 8012b9e:	ed16 6a03 	vldr	s12, [r6, #-12]
 8012ba2:	ed15 4a03 	vldr	s8, [r5, #-12]
 8012ba6:	ed56 6a02 	vldr	s13, [r6, #-8]
 8012baa:	ed55 4a02 	vldr	s9, [r5, #-8]
 8012bae:	ed16 7a01 	vldr	s14, [r6, #-4]
 8012bb2:	ed15 5a01 	vldr	s10, [r5, #-4]
 8012bb6:	ed56 7a04 	vldr	s15, [r6, #-16]
 8012bba:	ed55 5a04 	vldr	s11, [r5, #-16]
 8012bbe:	ee36 6a04 	vadd.f32	s12, s12, s8
 8012bc2:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012bc6:	ee37 7a05 	vadd.f32	s14, s14, s10
 8012bca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8012bce:	3f01      	subs	r7, #1
 8012bd0:	ed04 6a03 	vstr	s12, [r4, #-12]
 8012bd4:	ed44 6a02 	vstr	s13, [r4, #-8]
 8012bd8:	ed04 7a01 	vstr	s14, [r4, #-4]
 8012bdc:	ed44 7a04 	vstr	s15, [r4, #-16]
 8012be0:	f106 0610 	add.w	r6, r6, #16
 8012be4:	f105 0510 	add.w	r5, r5, #16
 8012be8:	f104 0410 	add.w	r4, r4, #16
 8012bec:	d1d7      	bne.n	8012b9e <arm_add_f32+0x16>
 8012bee:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8012bf2:	4420      	add	r0, r4
 8012bf4:	4421      	add	r1, r4
 8012bf6:	4422      	add	r2, r4
 8012bf8:	f013 0303 	ands.w	r3, r3, #3
 8012bfc:	d009      	beq.n	8012c12 <arm_add_f32+0x8a>
 8012bfe:	ecf0 7a01 	vldmia	r0!, {s15}
 8012c02:	ecb1 7a01 	vldmia	r1!, {s14}
 8012c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012c0a:	3b01      	subs	r3, #1
 8012c0c:	ece2 7a01 	vstmia	r2!, {s15}
 8012c10:	d1f5      	bne.n	8012bfe <arm_add_f32+0x76>
 8012c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c14 <arm_abs_f32>:
 8012c14:	b470      	push	{r4, r5, r6}
 8012c16:	0896      	lsrs	r6, r2, #2
 8012c18:	d025      	beq.n	8012c66 <arm_abs_f32+0x52>
 8012c1a:	f100 0410 	add.w	r4, r0, #16
 8012c1e:	f101 0310 	add.w	r3, r1, #16
 8012c22:	4635      	mov	r5, r6
 8012c24:	ed14 6a04 	vldr	s12, [r4, #-16]
 8012c28:	ed54 6a03 	vldr	s13, [r4, #-12]
 8012c2c:	ed14 7a02 	vldr	s14, [r4, #-8]
 8012c30:	ed54 7a01 	vldr	s15, [r4, #-4]
 8012c34:	eeb0 6ac6 	vabs.f32	s12, s12
 8012c38:	eef0 6ae6 	vabs.f32	s13, s13
 8012c3c:	eeb0 7ac7 	vabs.f32	s14, s14
 8012c40:	eef0 7ae7 	vabs.f32	s15, s15
 8012c44:	3d01      	subs	r5, #1
 8012c46:	ed03 6a04 	vstr	s12, [r3, #-16]
 8012c4a:	ed43 6a03 	vstr	s13, [r3, #-12]
 8012c4e:	ed03 7a02 	vstr	s14, [r3, #-8]
 8012c52:	ed43 7a01 	vstr	s15, [r3, #-4]
 8012c56:	f104 0410 	add.w	r4, r4, #16
 8012c5a:	f103 0310 	add.w	r3, r3, #16
 8012c5e:	d1e1      	bne.n	8012c24 <arm_abs_f32+0x10>
 8012c60:	0136      	lsls	r6, r6, #4
 8012c62:	4430      	add	r0, r6
 8012c64:	4431      	add	r1, r6
 8012c66:	f012 0203 	ands.w	r2, r2, #3
 8012c6a:	d007      	beq.n	8012c7c <arm_abs_f32+0x68>
 8012c6c:	ecf0 7a01 	vldmia	r0!, {s15}
 8012c70:	3a01      	subs	r2, #1
 8012c72:	eef0 7ae7 	vabs.f32	s15, s15
 8012c76:	ece1 7a01 	vstmia	r1!, {s15}
 8012c7a:	d1f7      	bne.n	8012c6c <arm_abs_f32+0x58>
 8012c7c:	bc70      	pop	{r4, r5, r6}
 8012c7e:	4770      	bx	lr

08012c80 <arm_radix8_butterfly_f32>:
 8012c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c84:	ed2d 8b10 	vpush	{d8-d15}
 8012c88:	b09d      	sub	sp, #116	@ 0x74
 8012c8a:	461c      	mov	r4, r3
 8012c8c:	ed9f bac8 	vldr	s22, [pc, #800]	@ 8012fb0 <arm_radix8_butterfly_f32+0x330>
 8012c90:	921a      	str	r2, [sp, #104]	@ 0x68
 8012c92:	1d03      	adds	r3, r0, #4
 8012c94:	4682      	mov	sl, r0
 8012c96:	4689      	mov	r9, r1
 8012c98:	468b      	mov	fp, r1
 8012c9a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012c9c:	9400      	str	r4, [sp, #0]
 8012c9e:	469e      	mov	lr, r3
 8012ca0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8012ca4:	005a      	lsls	r2, r3, #1
 8012ca6:	18d6      	adds	r6, r2, r3
 8012ca8:	18f5      	adds	r5, r6, r3
 8012caa:	9203      	str	r2, [sp, #12]
 8012cac:	195a      	adds	r2, r3, r5
 8012cae:	18d0      	adds	r0, r2, r3
 8012cb0:	00df      	lsls	r7, r3, #3
 8012cb2:	1819      	adds	r1, r3, r0
 8012cb4:	463c      	mov	r4, r7
 8012cb6:	9701      	str	r7, [sp, #4]
 8012cb8:	4457      	add	r7, sl
 8012cba:	930c      	str	r3, [sp, #48]	@ 0x30
 8012cbc:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8012cc0:	011b      	lsls	r3, r3, #4
 8012cc2:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8012cc6:	eb07 0c04 	add.w	ip, r7, r4
 8012cca:	9c00      	ldr	r4, [sp, #0]
 8012ccc:	9302      	str	r3, [sp, #8]
 8012cce:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8012cd2:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8012cd6:	3204      	adds	r2, #4
 8012cd8:	3104      	adds	r1, #4
 8012cda:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8012cde:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012ce2:	f04f 0800 	mov.w	r8, #0
 8012ce6:	eddc 7a00 	vldr	s15, [ip]
 8012cea:	edd7 6a00 	vldr	s13, [r7]
 8012cee:	edd6 3a00 	vldr	s7, [r6]
 8012cf2:	ed5e aa01 	vldr	s21, [lr, #-4]
 8012cf6:	edd5 4a00 	vldr	s9, [r5]
 8012cfa:	ed90 2a00 	vldr	s4, [r0]
 8012cfe:	ed12 7a01 	vldr	s14, [r2, #-4]
 8012d02:	ed51 0a01 	vldr	s1, [r1, #-4]
 8012d06:	ee77 8a82 	vadd.f32	s17, s15, s4
 8012d0a:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8012d0e:	ee76 1a87 	vadd.f32	s3, s13, s14
 8012d12:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8012d16:	ee31 6a84 	vadd.f32	s12, s3, s8
 8012d1a:	ee33 5a28 	vadd.f32	s10, s6, s17
 8012d1e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8012d22:	ee75 6a06 	vadd.f32	s13, s10, s12
 8012d26:	ee35 5a46 	vsub.f32	s10, s10, s12
 8012d2a:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8012d2e:	ed85 5a00 	vstr	s10, [r5]
 8012d32:	ed96 1a01 	vldr	s2, [r6, #4]
 8012d36:	edd7 5a01 	vldr	s11, [r7, #4]
 8012d3a:	ed92 aa00 	vldr	s20, [r2]
 8012d3e:	ed91 6a00 	vldr	s12, [r1]
 8012d42:	ed9e 9a00 	vldr	s18, [lr]
 8012d46:	ed95 5a01 	vldr	s10, [r5, #4]
 8012d4a:	eddc 6a01 	vldr	s13, [ip, #4]
 8012d4e:	edd0 9a01 	vldr	s19, [r0, #4]
 8012d52:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8012d56:	ee71 2a46 	vsub.f32	s5, s2, s12
 8012d5a:	ee75 3aca 	vsub.f32	s7, s11, s20
 8012d5e:	ee37 0a60 	vsub.f32	s0, s14, s1
 8012d62:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8012d66:	ee37 7a20 	vadd.f32	s14, s14, s1
 8012d6a:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8012d6e:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8012d72:	ee79 3a05 	vadd.f32	s7, s18, s10
 8012d76:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8012d7a:	ee39 5a45 	vsub.f32	s10, s18, s10
 8012d7e:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8012d82:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8012d86:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8012d8a:	ee31 6a06 	vadd.f32	s12, s2, s12
 8012d8e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8012d92:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8012d96:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8012d9a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8012d9e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8012da2:	ee36 0a88 	vadd.f32	s0, s13, s16
 8012da6:	ee75 8a86 	vadd.f32	s17, s11, s12
 8012daa:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8012dae:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8012db2:	ee75 6a62 	vsub.f32	s13, s10, s5
 8012db6:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8012dba:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8012dbe:	ee33 1a89 	vadd.f32	s2, s7, s18
 8012dc2:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8012dc6:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8012dca:	ee75 4a22 	vadd.f32	s9, s10, s5
 8012dce:	ee32 5a27 	vadd.f32	s10, s4, s15
 8012dd2:	ee72 7a67 	vsub.f32	s15, s4, s15
 8012dd6:	ee33 8a06 	vadd.f32	s16, s6, s12
 8012dda:	ee75 2a87 	vadd.f32	s5, s11, s14
 8012dde:	ee31 9a28 	vadd.f32	s18, s2, s17
 8012de2:	ee33 6a46 	vsub.f32	s12, s6, s12
 8012de6:	ee74 0a61 	vsub.f32	s1, s8, s3
 8012dea:	ee33 2a80 	vadd.f32	s4, s7, s0
 8012dee:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012df2:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8012df6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8012dfa:	ee31 1a68 	vsub.f32	s2, s2, s17
 8012dfe:	ee34 4a21 	vadd.f32	s8, s8, s3
 8012e02:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8012e06:	ee74 4a85 	vadd.f32	s9, s9, s10
 8012e0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012e0e:	44d8      	add	r8, fp
 8012e10:	45c1      	cmp	r9, r8
 8012e12:	ed8e 9a00 	vstr	s18, [lr]
 8012e16:	ed85 1a01 	vstr	s2, [r5, #4]
 8012e1a:	449e      	add	lr, r3
 8012e1c:	ed8c 8a00 	vstr	s16, [ip]
 8012e20:	441d      	add	r5, r3
 8012e22:	ed80 6a00 	vstr	s12, [r0]
 8012e26:	edcc 0a01 	vstr	s1, [ip, #4]
 8012e2a:	ed80 4a01 	vstr	s8, [r0, #4]
 8012e2e:	449c      	add	ip, r3
 8012e30:	ed87 2a00 	vstr	s4, [r7]
 8012e34:	4418      	add	r0, r3
 8012e36:	ed41 3a01 	vstr	s7, [r1, #-4]
 8012e3a:	ed42 2a01 	vstr	s5, [r2, #-4]
 8012e3e:	ed86 7a00 	vstr	s14, [r6]
 8012e42:	ed87 3a01 	vstr	s6, [r7, #4]
 8012e46:	edc1 4a00 	vstr	s9, [r1]
 8012e4a:	441f      	add	r7, r3
 8012e4c:	edc2 5a00 	vstr	s11, [r2]
 8012e50:	4419      	add	r1, r3
 8012e52:	edc6 6a01 	vstr	s13, [r6, #4]
 8012e56:	441a      	add	r2, r3
 8012e58:	441e      	add	r6, r3
 8012e5a:	f63f af44 	bhi.w	8012ce6 <arm_radix8_butterfly_f32+0x66>
 8012e5e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012e60:	2907      	cmp	r1, #7
 8012e62:	4620      	mov	r0, r4
 8012e64:	f240 81e9 	bls.w	801323a <arm_radix8_butterfly_f32+0x5ba>
 8012e68:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8012e6c:	193e      	adds	r6, r7, r4
 8012e6e:	1935      	adds	r5, r6, r4
 8012e70:	9c03      	ldr	r4, [sp, #12]
 8012e72:	9000      	str	r0, [sp, #0]
 8012e74:	4622      	mov	r2, r4
 8012e76:	3201      	adds	r2, #1
 8012e78:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012e7c:	9900      	ldr	r1, [sp, #0]
 8012e7e:	1828      	adds	r0, r5, r0
 8012e80:	eb00 0e01 	add.w	lr, r0, r1
 8012e84:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012e86:	440a      	add	r2, r1
 8012e88:	eb04 0c01 	add.w	ip, r4, r1
 8012e8c:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8012e90:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8012e94:	9a00      	ldr	r2, [sp, #0]
 8012e96:	940f      	str	r4, [sp, #60]	@ 0x3c
 8012e98:	00ed      	lsls	r5, r5, #3
 8012e9a:	9511      	str	r5, [sp, #68]	@ 0x44
 8012e9c:	00d5      	lsls	r5, r2, #3
 8012e9e:	950d      	str	r5, [sp, #52]	@ 0x34
 8012ea0:	9d01      	ldr	r5, [sp, #4]
 8012ea2:	3508      	adds	r5, #8
 8012ea4:	9516      	str	r5, [sp, #88]	@ 0x58
 8012ea6:	9d02      	ldr	r5, [sp, #8]
 8012ea8:	3508      	adds	r5, #8
 8012eaa:	0114      	lsls	r4, r2, #4
 8012eac:	9517      	str	r5, [sp, #92]	@ 0x5c
 8012eae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012eb0:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8012eb2:	940e      	str	r4, [sp, #56]	@ 0x38
 8012eb4:	00c0      	lsls	r0, r0, #3
 8012eb6:	9010      	str	r0, [sp, #64]	@ 0x40
 8012eb8:	18aa      	adds	r2, r5, r2
 8012eba:	9207      	str	r2, [sp, #28]
 8012ebc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012ebe:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012ec0:	18aa      	adds	r2, r5, r2
 8012ec2:	9208      	str	r2, [sp, #32]
 8012ec4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8012ec6:	18aa      	adds	r2, r5, r2
 8012ec8:	9209      	str	r2, [sp, #36]	@ 0x24
 8012eca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8012ece:	f10e 0204 	add.w	r2, lr, #4
 8012ed2:	920a      	str	r2, [sp, #40]	@ 0x28
 8012ed4:	00c9      	lsls	r1, r1, #3
 8012ed6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ed8:	310c      	adds	r1, #12
 8012eda:	00f6      	lsls	r6, r6, #3
 8012edc:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8012ee0:	9114      	str	r1, [sp, #80]	@ 0x50
 8012ee2:	18a9      	adds	r1, r5, r2
 8012ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012ee6:	9612      	str	r6, [sp, #72]	@ 0x48
 8012ee8:	00ff      	lsls	r7, r7, #3
 8012eea:	19ae      	adds	r6, r5, r6
 8012eec:	3008      	adds	r0, #8
 8012eee:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8012ef2:	9606      	str	r6, [sp, #24]
 8012ef4:	9019      	str	r0, [sp, #100]	@ 0x64
 8012ef6:	18aa      	adds	r2, r5, r2
 8012ef8:	0164      	lsls	r4, r4, #5
 8012efa:	19ee      	adds	r6, r5, r7
 8012efc:	f10c 000c 	add.w	r0, ip, #12
 8012f00:	9713      	str	r7, [sp, #76]	@ 0x4c
 8012f02:	9604      	str	r6, [sp, #16]
 8012f04:	9015      	str	r0, [sp, #84]	@ 0x54
 8012f06:	9103      	str	r1, [sp, #12]
 8012f08:	9205      	str	r2, [sp, #20]
 8012f0a:	f104 0208 	add.w	r2, r4, #8
 8012f0e:	9218      	str	r2, [sp, #96]	@ 0x60
 8012f10:	f04f 0801 	mov.w	r8, #1
 8012f14:	2200      	movs	r2, #0
 8012f16:	f102 0108 	add.w	r1, r2, #8
 8012f1a:	460f      	mov	r7, r1
 8012f1c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012f1e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012f20:	188e      	adds	r6, r1, r2
 8012f22:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8012f24:	188d      	adds	r5, r1, r2
 8012f26:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8012f28:	188c      	adds	r4, r1, r2
 8012f2a:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8012f2c:	1888      	adds	r0, r1, r2
 8012f2e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012f30:	eb01 0c02 	add.w	ip, r1, r2
 8012f34:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8012f36:	440a      	add	r2, r1
 8012f38:	9903      	ldr	r1, [sp, #12]
 8012f3a:	edd1 fa00 	vldr	s31, [r1]
 8012f3e:	9905      	ldr	r1, [sp, #20]
 8012f40:	ed91 fa00 	vldr	s30, [r1]
 8012f44:	9904      	ldr	r1, [sp, #16]
 8012f46:	edd1 ea00 	vldr	s29, [r1]
 8012f4a:	9906      	ldr	r1, [sp, #24]
 8012f4c:	ed91 ea00 	vldr	s28, [r1]
 8012f50:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012f52:	edd1 da00 	vldr	s27, [r1]
 8012f56:	9908      	ldr	r1, [sp, #32]
 8012f58:	ed91 da00 	vldr	s26, [r1]
 8012f5c:	9907      	ldr	r1, [sp, #28]
 8012f5e:	edd1 ca00 	vldr	s25, [r1]
 8012f62:	9903      	ldr	r1, [sp, #12]
 8012f64:	ed91 ca01 	vldr	s24, [r1, #4]
 8012f68:	9905      	ldr	r1, [sp, #20]
 8012f6a:	edd1 ba01 	vldr	s23, [r1, #4]
 8012f6e:	9904      	ldr	r1, [sp, #16]
 8012f70:	edd1 aa01 	vldr	s21, [r1, #4]
 8012f74:	9906      	ldr	r1, [sp, #24]
 8012f76:	ed91 aa01 	vldr	s20, [r1, #4]
 8012f7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012f7c:	edd1 7a01 	vldr	s15, [r1, #4]
 8012f80:	9908      	ldr	r1, [sp, #32]
 8012f82:	edcd 7a00 	vstr	s15, [sp]
 8012f86:	edd1 7a01 	vldr	s15, [r1, #4]
 8012f8a:	9907      	ldr	r1, [sp, #28]
 8012f8c:	edcd 7a01 	vstr	s15, [sp, #4]
 8012f90:	edd1 7a01 	vldr	s15, [r1, #4]
 8012f94:	eb0a 0e07 	add.w	lr, sl, r7
 8012f98:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8012f9a:	edcd 7a02 	vstr	s15, [sp, #8]
 8012f9e:	eb0c 010a 	add.w	r1, ip, sl
 8012fa2:	4456      	add	r6, sl
 8012fa4:	4455      	add	r5, sl
 8012fa6:	4454      	add	r4, sl
 8012fa8:	4450      	add	r0, sl
 8012faa:	4452      	add	r2, sl
 8012fac:	46c4      	mov	ip, r8
 8012fae:	e001      	b.n	8012fb4 <arm_radix8_butterfly_f32+0x334>
 8012fb0:	3f3504f3 	.word	0x3f3504f3
 8012fb4:	ed96 5a00 	vldr	s10, [r6]
 8012fb8:	ed52 9a01 	vldr	s19, [r2, #-4]
 8012fbc:	ed11 6a01 	vldr	s12, [r1, #-4]
 8012fc0:	edd0 7a00 	vldr	s15, [r0]
 8012fc4:	ed17 7a01 	vldr	s14, [r7, #-4]
 8012fc8:	edde 3a00 	vldr	s7, [lr]
 8012fcc:	ed94 3a00 	vldr	s6, [r4]
 8012fd0:	ed95 2a00 	vldr	s4, [r5]
 8012fd4:	ed9e 0a01 	vldr	s0, [lr, #4]
 8012fd8:	ee33 8a85 	vadd.f32	s16, s7, s10
 8012fdc:	ee32 1a06 	vadd.f32	s2, s4, s12
 8012fe0:	ee33 4a29 	vadd.f32	s8, s6, s19
 8012fe4:	ee77 4a87 	vadd.f32	s9, s15, s14
 8012fe8:	ee78 1a04 	vadd.f32	s3, s16, s8
 8012fec:	ee71 6a24 	vadd.f32	s13, s2, s9
 8012ff0:	ee32 2a46 	vsub.f32	s4, s4, s12
 8012ff4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8012ff8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012ffc:	ed8e 6a00 	vstr	s12, [lr]
 8013000:	edd0 8a01 	vldr	s17, [r0, #4]
 8013004:	ed95 9a01 	vldr	s18, [r5, #4]
 8013008:	edd1 2a00 	vldr	s5, [r1]
 801300c:	ed97 7a00 	vldr	s14, [r7]
 8013010:	edd4 0a01 	vldr	s1, [r4, #4]
 8013014:	ed96 6a01 	vldr	s12, [r6, #4]
 8013018:	edd2 5a00 	vldr	s11, [r2]
 801301c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8013020:	ee33 3a69 	vsub.f32	s6, s6, s19
 8013024:	ee39 5a62 	vsub.f32	s10, s18, s5
 8013028:	ee78 9ac7 	vsub.f32	s19, s17, s14
 801302c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8013030:	ee38 7a87 	vadd.f32	s14, s17, s14
 8013034:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8013038:	ee79 2a22 	vadd.f32	s5, s18, s5
 801303c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8013040:	ee32 9a27 	vadd.f32	s18, s4, s15
 8013044:	ee35 5a29 	vadd.f32	s10, s10, s19
 8013048:	ee72 7a67 	vsub.f32	s15, s4, s15
 801304c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8013050:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8013054:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8013058:	ee32 9a08 	vadd.f32	s18, s4, s16
 801305c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8013060:	ee32 2a48 	vsub.f32	s4, s4, s16
 8013064:	ee71 4a64 	vsub.f32	s9, s2, s9
 8013068:	ee25 5a0b 	vmul.f32	s10, s10, s22
 801306c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8013070:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8013074:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8013078:	ee30 6a46 	vsub.f32	s12, s0, s12
 801307c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8013080:	ee36 0a28 	vadd.f32	s0, s12, s17
 8013084:	ee33 3a69 	vsub.f32	s6, s6, s19
 8013088:	ee32 7a64 	vsub.f32	s14, s4, s9
 801308c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8013090:	ee36 6a68 	vsub.f32	s12, s12, s17
 8013094:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8013098:	ee75 8a85 	vadd.f32	s17, s11, s10
 801309c:	ee74 3a22 	vadd.f32	s7, s8, s5
 80130a0:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80130a4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80130a8:	ee79 1a41 	vsub.f32	s3, s18, s2
 80130ac:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80130b0:	ee76 5a43 	vsub.f32	s11, s12, s6
 80130b4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80130b8:	ee72 4a24 	vadd.f32	s9, s4, s9
 80130bc:	ee30 4a60 	vsub.f32	s8, s0, s1
 80130c0:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80130c4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80130c8:	ee77 9a85 	vadd.f32	s19, s15, s10
 80130cc:	ee36 6a03 	vadd.f32	s12, s12, s6
 80130d0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80130d4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80130d8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80130dc:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80130e0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80130e4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80130e8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80130ec:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80130f0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80130f4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80130f8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80130fc:	ee35 3a03 	vadd.f32	s6, s10, s6
 8013100:	ee72 6a66 	vsub.f32	s13, s4, s13
 8013104:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8013108:	ee2f 2a88 	vmul.f32	s4, s31, s16
 801310c:	ed9d 4a02 	vldr	s8, [sp, #8]
 8013110:	ed8e 1a01 	vstr	s2, [lr, #4]
 8013114:	ee77 3a63 	vsub.f32	s7, s14, s7
 8013118:	ee2c 8a08 	vmul.f32	s16, s24, s16
 801311c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013120:	ed86 3a00 	vstr	s6, [r6]
 8013124:	ee30 9a89 	vadd.f32	s18, s1, s18
 8013128:	ee32 2a05 	vadd.f32	s4, s4, s10
 801312c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8013130:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8013134:	ee67 2a22 	vmul.f32	s5, s14, s5
 8013138:	ee64 1a00 	vmul.f32	s3, s8, s0
 801313c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8013140:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8013144:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8013148:	ee64 8a28 	vmul.f32	s17, s8, s17
 801314c:	ed9d 4a00 	vldr	s8, [sp]
 8013150:	edc6 6a01 	vstr	s13, [r6, #4]
 8013154:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8013158:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 801315c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8013160:	ee24 4a25 	vmul.f32	s8, s8, s11
 8013164:	ee30 7a87 	vadd.f32	s14, s1, s14
 8013168:	ee74 4a84 	vadd.f32	s9, s9, s8
 801316c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8013170:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8013174:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8013178:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 801317c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8013180:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8013184:	ee75 1a21 	vadd.f32	s3, s10, s3
 8013188:	ee30 0a68 	vsub.f32	s0, s0, s17
 801318c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8013190:	ee70 0a84 	vadd.f32	s1, s1, s8
 8013194:	ee36 6a67 	vsub.f32	s12, s12, s15
 8013198:	44dc      	add	ip, fp
 801319a:	45e1      	cmp	r9, ip
 801319c:	ed84 9a00 	vstr	s18, [r4]
 80131a0:	edc4 3a01 	vstr	s7, [r4, #4]
 80131a4:	449e      	add	lr, r3
 80131a6:	ed02 7a01 	vstr	s14, [r2, #-4]
 80131aa:	edc2 2a00 	vstr	s5, [r2]
 80131ae:	441e      	add	r6, r3
 80131b0:	ed85 2a00 	vstr	s4, [r5]
 80131b4:	ed85 8a01 	vstr	s16, [r5, #4]
 80131b8:	441c      	add	r4, r3
 80131ba:	ed47 1a01 	vstr	s3, [r7, #-4]
 80131be:	ed87 0a00 	vstr	s0, [r7]
 80131c2:	441a      	add	r2, r3
 80131c4:	ed41 4a01 	vstr	s9, [r1, #-4]
 80131c8:	edc1 9a00 	vstr	s19, [r1]
 80131cc:	441d      	add	r5, r3
 80131ce:	edc0 0a00 	vstr	s1, [r0]
 80131d2:	441f      	add	r7, r3
 80131d4:	ed80 6a01 	vstr	s12, [r0, #4]
 80131d8:	4419      	add	r1, r3
 80131da:	4418      	add	r0, r3
 80131dc:	f63f aeea 	bhi.w	8012fb4 <arm_radix8_butterfly_f32+0x334>
 80131e0:	9a03      	ldr	r2, [sp, #12]
 80131e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80131e4:	440a      	add	r2, r1
 80131e6:	9203      	str	r2, [sp, #12]
 80131e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80131ea:	9a05      	ldr	r2, [sp, #20]
 80131ec:	440a      	add	r2, r1
 80131ee:	9205      	str	r2, [sp, #20]
 80131f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80131f2:	9a04      	ldr	r2, [sp, #16]
 80131f4:	440a      	add	r2, r1
 80131f6:	9204      	str	r2, [sp, #16]
 80131f8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80131fa:	9a06      	ldr	r2, [sp, #24]
 80131fc:	440a      	add	r2, r1
 80131fe:	9206      	str	r2, [sp, #24]
 8013200:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8013202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013204:	440a      	add	r2, r1
 8013206:	9209      	str	r2, [sp, #36]	@ 0x24
 8013208:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801320a:	9a08      	ldr	r2, [sp, #32]
 801320c:	440a      	add	r2, r1
 801320e:	9208      	str	r2, [sp, #32]
 8013210:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013212:	9a07      	ldr	r2, [sp, #28]
 8013214:	440a      	add	r2, r1
 8013216:	9207      	str	r2, [sp, #28]
 8013218:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801321a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801321c:	f108 0801 	add.w	r8, r8, #1
 8013220:	3208      	adds	r2, #8
 8013222:	4588      	cmp	r8, r1
 8013224:	920a      	str	r2, [sp, #40]	@ 0x28
 8013226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013228:	f47f ae75 	bne.w	8012f16 <arm_radix8_butterfly_f32+0x296>
 801322c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8013230:	9300      	str	r3, [sp, #0]
 8013232:	46c3      	mov	fp, r8
 8013234:	f8dd e06c 	ldr.w	lr, [sp, #108]	@ 0x6c
 8013238:	e532      	b.n	8012ca0 <arm_radix8_butterfly_f32+0x20>
 801323a:	b01d      	add	sp, #116	@ 0x74
 801323c:	ecbd 8b10 	vpop	{d8-d15}
 8013240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013244 <std>:
 8013244:	2300      	movs	r3, #0
 8013246:	b510      	push	{r4, lr}
 8013248:	4604      	mov	r4, r0
 801324a:	e9c0 3300 	strd	r3, r3, [r0]
 801324e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013252:	6083      	str	r3, [r0, #8]
 8013254:	8181      	strh	r1, [r0, #12]
 8013256:	6643      	str	r3, [r0, #100]	@ 0x64
 8013258:	81c2      	strh	r2, [r0, #14]
 801325a:	6183      	str	r3, [r0, #24]
 801325c:	4619      	mov	r1, r3
 801325e:	2208      	movs	r2, #8
 8013260:	305c      	adds	r0, #92	@ 0x5c
 8013262:	f000 f942 	bl	80134ea <memset>
 8013266:	4b0d      	ldr	r3, [pc, #52]	@ (801329c <std+0x58>)
 8013268:	6263      	str	r3, [r4, #36]	@ 0x24
 801326a:	4b0d      	ldr	r3, [pc, #52]	@ (80132a0 <std+0x5c>)
 801326c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801326e:	4b0d      	ldr	r3, [pc, #52]	@ (80132a4 <std+0x60>)
 8013270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013272:	4b0d      	ldr	r3, [pc, #52]	@ (80132a8 <std+0x64>)
 8013274:	6323      	str	r3, [r4, #48]	@ 0x30
 8013276:	4b0d      	ldr	r3, [pc, #52]	@ (80132ac <std+0x68>)
 8013278:	6224      	str	r4, [r4, #32]
 801327a:	429c      	cmp	r4, r3
 801327c:	d006      	beq.n	801328c <std+0x48>
 801327e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013282:	4294      	cmp	r4, r2
 8013284:	d002      	beq.n	801328c <std+0x48>
 8013286:	33d0      	adds	r3, #208	@ 0xd0
 8013288:	429c      	cmp	r4, r3
 801328a:	d105      	bne.n	8013298 <std+0x54>
 801328c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013294:	f000 ba20 	b.w	80136d8 <__retarget_lock_init_recursive>
 8013298:	bd10      	pop	{r4, pc}
 801329a:	bf00      	nop
 801329c:	08013431 	.word	0x08013431
 80132a0:	08013453 	.word	0x08013453
 80132a4:	0801348b 	.word	0x0801348b
 80132a8:	080134af 	.word	0x080134af
 80132ac:	20016368 	.word	0x20016368

080132b0 <stdio_exit_handler>:
 80132b0:	4a02      	ldr	r2, [pc, #8]	@ (80132bc <stdio_exit_handler+0xc>)
 80132b2:	4903      	ldr	r1, [pc, #12]	@ (80132c0 <stdio_exit_handler+0x10>)
 80132b4:	4803      	ldr	r0, [pc, #12]	@ (80132c4 <stdio_exit_handler+0x14>)
 80132b6:	f000 b869 	b.w	801338c <_fwalk_sglue>
 80132ba:	bf00      	nop
 80132bc:	20000034 	.word	0x20000034
 80132c0:	0801400d 	.word	0x0801400d
 80132c4:	20000044 	.word	0x20000044

080132c8 <cleanup_stdio>:
 80132c8:	6841      	ldr	r1, [r0, #4]
 80132ca:	4b0c      	ldr	r3, [pc, #48]	@ (80132fc <cleanup_stdio+0x34>)
 80132cc:	4299      	cmp	r1, r3
 80132ce:	b510      	push	{r4, lr}
 80132d0:	4604      	mov	r4, r0
 80132d2:	d001      	beq.n	80132d8 <cleanup_stdio+0x10>
 80132d4:	f000 fe9a 	bl	801400c <_fflush_r>
 80132d8:	68a1      	ldr	r1, [r4, #8]
 80132da:	4b09      	ldr	r3, [pc, #36]	@ (8013300 <cleanup_stdio+0x38>)
 80132dc:	4299      	cmp	r1, r3
 80132de:	d002      	beq.n	80132e6 <cleanup_stdio+0x1e>
 80132e0:	4620      	mov	r0, r4
 80132e2:	f000 fe93 	bl	801400c <_fflush_r>
 80132e6:	68e1      	ldr	r1, [r4, #12]
 80132e8:	4b06      	ldr	r3, [pc, #24]	@ (8013304 <cleanup_stdio+0x3c>)
 80132ea:	4299      	cmp	r1, r3
 80132ec:	d004      	beq.n	80132f8 <cleanup_stdio+0x30>
 80132ee:	4620      	mov	r0, r4
 80132f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132f4:	f000 be8a 	b.w	801400c <_fflush_r>
 80132f8:	bd10      	pop	{r4, pc}
 80132fa:	bf00      	nop
 80132fc:	20016368 	.word	0x20016368
 8013300:	200163d0 	.word	0x200163d0
 8013304:	20016438 	.word	0x20016438

08013308 <global_stdio_init.part.0>:
 8013308:	b510      	push	{r4, lr}
 801330a:	4b0b      	ldr	r3, [pc, #44]	@ (8013338 <global_stdio_init.part.0+0x30>)
 801330c:	4c0b      	ldr	r4, [pc, #44]	@ (801333c <global_stdio_init.part.0+0x34>)
 801330e:	4a0c      	ldr	r2, [pc, #48]	@ (8013340 <global_stdio_init.part.0+0x38>)
 8013310:	601a      	str	r2, [r3, #0]
 8013312:	4620      	mov	r0, r4
 8013314:	2200      	movs	r2, #0
 8013316:	2104      	movs	r1, #4
 8013318:	f7ff ff94 	bl	8013244 <std>
 801331c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013320:	2201      	movs	r2, #1
 8013322:	2109      	movs	r1, #9
 8013324:	f7ff ff8e 	bl	8013244 <std>
 8013328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801332c:	2202      	movs	r2, #2
 801332e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013332:	2112      	movs	r1, #18
 8013334:	f7ff bf86 	b.w	8013244 <std>
 8013338:	200164a0 	.word	0x200164a0
 801333c:	20016368 	.word	0x20016368
 8013340:	080132b1 	.word	0x080132b1

08013344 <__sfp_lock_acquire>:
 8013344:	4801      	ldr	r0, [pc, #4]	@ (801334c <__sfp_lock_acquire+0x8>)
 8013346:	f000 b9c8 	b.w	80136da <__retarget_lock_acquire_recursive>
 801334a:	bf00      	nop
 801334c:	200164a9 	.word	0x200164a9

08013350 <__sfp_lock_release>:
 8013350:	4801      	ldr	r0, [pc, #4]	@ (8013358 <__sfp_lock_release+0x8>)
 8013352:	f000 b9c3 	b.w	80136dc <__retarget_lock_release_recursive>
 8013356:	bf00      	nop
 8013358:	200164a9 	.word	0x200164a9

0801335c <__sinit>:
 801335c:	b510      	push	{r4, lr}
 801335e:	4604      	mov	r4, r0
 8013360:	f7ff fff0 	bl	8013344 <__sfp_lock_acquire>
 8013364:	6a23      	ldr	r3, [r4, #32]
 8013366:	b11b      	cbz	r3, 8013370 <__sinit+0x14>
 8013368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801336c:	f7ff bff0 	b.w	8013350 <__sfp_lock_release>
 8013370:	4b04      	ldr	r3, [pc, #16]	@ (8013384 <__sinit+0x28>)
 8013372:	6223      	str	r3, [r4, #32]
 8013374:	4b04      	ldr	r3, [pc, #16]	@ (8013388 <__sinit+0x2c>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d1f5      	bne.n	8013368 <__sinit+0xc>
 801337c:	f7ff ffc4 	bl	8013308 <global_stdio_init.part.0>
 8013380:	e7f2      	b.n	8013368 <__sinit+0xc>
 8013382:	bf00      	nop
 8013384:	080132c9 	.word	0x080132c9
 8013388:	200164a0 	.word	0x200164a0

0801338c <_fwalk_sglue>:
 801338c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013390:	4607      	mov	r7, r0
 8013392:	4688      	mov	r8, r1
 8013394:	4614      	mov	r4, r2
 8013396:	2600      	movs	r6, #0
 8013398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801339c:	f1b9 0901 	subs.w	r9, r9, #1
 80133a0:	d505      	bpl.n	80133ae <_fwalk_sglue+0x22>
 80133a2:	6824      	ldr	r4, [r4, #0]
 80133a4:	2c00      	cmp	r4, #0
 80133a6:	d1f7      	bne.n	8013398 <_fwalk_sglue+0xc>
 80133a8:	4630      	mov	r0, r6
 80133aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ae:	89ab      	ldrh	r3, [r5, #12]
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	d907      	bls.n	80133c4 <_fwalk_sglue+0x38>
 80133b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80133b8:	3301      	adds	r3, #1
 80133ba:	d003      	beq.n	80133c4 <_fwalk_sglue+0x38>
 80133bc:	4629      	mov	r1, r5
 80133be:	4638      	mov	r0, r7
 80133c0:	47c0      	blx	r8
 80133c2:	4306      	orrs	r6, r0
 80133c4:	3568      	adds	r5, #104	@ 0x68
 80133c6:	e7e9      	b.n	801339c <_fwalk_sglue+0x10>

080133c8 <sniprintf>:
 80133c8:	b40c      	push	{r2, r3}
 80133ca:	b530      	push	{r4, r5, lr}
 80133cc:	4b17      	ldr	r3, [pc, #92]	@ (801342c <sniprintf+0x64>)
 80133ce:	1e0c      	subs	r4, r1, #0
 80133d0:	681d      	ldr	r5, [r3, #0]
 80133d2:	b09d      	sub	sp, #116	@ 0x74
 80133d4:	da08      	bge.n	80133e8 <sniprintf+0x20>
 80133d6:	238b      	movs	r3, #139	@ 0x8b
 80133d8:	602b      	str	r3, [r5, #0]
 80133da:	f04f 30ff 	mov.w	r0, #4294967295
 80133de:	b01d      	add	sp, #116	@ 0x74
 80133e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133e4:	b002      	add	sp, #8
 80133e6:	4770      	bx	lr
 80133e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80133ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80133f0:	bf14      	ite	ne
 80133f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80133f6:	4623      	moveq	r3, r4
 80133f8:	9304      	str	r3, [sp, #16]
 80133fa:	9307      	str	r3, [sp, #28]
 80133fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013400:	9002      	str	r0, [sp, #8]
 8013402:	9006      	str	r0, [sp, #24]
 8013404:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013408:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801340a:	ab21      	add	r3, sp, #132	@ 0x84
 801340c:	a902      	add	r1, sp, #8
 801340e:	4628      	mov	r0, r5
 8013410:	9301      	str	r3, [sp, #4]
 8013412:	f000 faed 	bl	80139f0 <_svfiprintf_r>
 8013416:	1c43      	adds	r3, r0, #1
 8013418:	bfbc      	itt	lt
 801341a:	238b      	movlt	r3, #139	@ 0x8b
 801341c:	602b      	strlt	r3, [r5, #0]
 801341e:	2c00      	cmp	r4, #0
 8013420:	d0dd      	beq.n	80133de <sniprintf+0x16>
 8013422:	9b02      	ldr	r3, [sp, #8]
 8013424:	2200      	movs	r2, #0
 8013426:	701a      	strb	r2, [r3, #0]
 8013428:	e7d9      	b.n	80133de <sniprintf+0x16>
 801342a:	bf00      	nop
 801342c:	20000040 	.word	0x20000040

08013430 <__sread>:
 8013430:	b510      	push	{r4, lr}
 8013432:	460c      	mov	r4, r1
 8013434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013438:	f000 f900 	bl	801363c <_read_r>
 801343c:	2800      	cmp	r0, #0
 801343e:	bfab      	itete	ge
 8013440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013442:	89a3      	ldrhlt	r3, [r4, #12]
 8013444:	181b      	addge	r3, r3, r0
 8013446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801344a:	bfac      	ite	ge
 801344c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801344e:	81a3      	strhlt	r3, [r4, #12]
 8013450:	bd10      	pop	{r4, pc}

08013452 <__swrite>:
 8013452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013456:	461f      	mov	r7, r3
 8013458:	898b      	ldrh	r3, [r1, #12]
 801345a:	05db      	lsls	r3, r3, #23
 801345c:	4605      	mov	r5, r0
 801345e:	460c      	mov	r4, r1
 8013460:	4616      	mov	r6, r2
 8013462:	d505      	bpl.n	8013470 <__swrite+0x1e>
 8013464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013468:	2302      	movs	r3, #2
 801346a:	2200      	movs	r2, #0
 801346c:	f000 f8d4 	bl	8013618 <_lseek_r>
 8013470:	89a3      	ldrh	r3, [r4, #12]
 8013472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801347a:	81a3      	strh	r3, [r4, #12]
 801347c:	4632      	mov	r2, r6
 801347e:	463b      	mov	r3, r7
 8013480:	4628      	mov	r0, r5
 8013482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013486:	f000 b8eb 	b.w	8013660 <_write_r>

0801348a <__sseek>:
 801348a:	b510      	push	{r4, lr}
 801348c:	460c      	mov	r4, r1
 801348e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013492:	f000 f8c1 	bl	8013618 <_lseek_r>
 8013496:	1c43      	adds	r3, r0, #1
 8013498:	89a3      	ldrh	r3, [r4, #12]
 801349a:	bf15      	itete	ne
 801349c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801349e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80134a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80134a6:	81a3      	strheq	r3, [r4, #12]
 80134a8:	bf18      	it	ne
 80134aa:	81a3      	strhne	r3, [r4, #12]
 80134ac:	bd10      	pop	{r4, pc}

080134ae <__sclose>:
 80134ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134b2:	f000 b8a1 	b.w	80135f8 <_close_r>

080134b6 <memmove>:
 80134b6:	4288      	cmp	r0, r1
 80134b8:	b510      	push	{r4, lr}
 80134ba:	eb01 0402 	add.w	r4, r1, r2
 80134be:	d902      	bls.n	80134c6 <memmove+0x10>
 80134c0:	4284      	cmp	r4, r0
 80134c2:	4623      	mov	r3, r4
 80134c4:	d807      	bhi.n	80134d6 <memmove+0x20>
 80134c6:	1e43      	subs	r3, r0, #1
 80134c8:	42a1      	cmp	r1, r4
 80134ca:	d008      	beq.n	80134de <memmove+0x28>
 80134cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80134d4:	e7f8      	b.n	80134c8 <memmove+0x12>
 80134d6:	4402      	add	r2, r0
 80134d8:	4601      	mov	r1, r0
 80134da:	428a      	cmp	r2, r1
 80134dc:	d100      	bne.n	80134e0 <memmove+0x2a>
 80134de:	bd10      	pop	{r4, pc}
 80134e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80134e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80134e8:	e7f7      	b.n	80134da <memmove+0x24>

080134ea <memset>:
 80134ea:	4402      	add	r2, r0
 80134ec:	4603      	mov	r3, r0
 80134ee:	4293      	cmp	r3, r2
 80134f0:	d100      	bne.n	80134f4 <memset+0xa>
 80134f2:	4770      	bx	lr
 80134f4:	f803 1b01 	strb.w	r1, [r3], #1
 80134f8:	e7f9      	b.n	80134ee <memset+0x4>

080134fa <strcat>:
 80134fa:	b510      	push	{r4, lr}
 80134fc:	4602      	mov	r2, r0
 80134fe:	7814      	ldrb	r4, [r2, #0]
 8013500:	4613      	mov	r3, r2
 8013502:	3201      	adds	r2, #1
 8013504:	2c00      	cmp	r4, #0
 8013506:	d1fa      	bne.n	80134fe <strcat+0x4>
 8013508:	3b01      	subs	r3, #1
 801350a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801350e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013512:	2a00      	cmp	r2, #0
 8013514:	d1f9      	bne.n	801350a <strcat+0x10>
 8013516:	bd10      	pop	{r4, pc}

08013518 <strncpy>:
 8013518:	b510      	push	{r4, lr}
 801351a:	3901      	subs	r1, #1
 801351c:	4603      	mov	r3, r0
 801351e:	b132      	cbz	r2, 801352e <strncpy+0x16>
 8013520:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013524:	f803 4b01 	strb.w	r4, [r3], #1
 8013528:	3a01      	subs	r2, #1
 801352a:	2c00      	cmp	r4, #0
 801352c:	d1f7      	bne.n	801351e <strncpy+0x6>
 801352e:	441a      	add	r2, r3
 8013530:	2100      	movs	r1, #0
 8013532:	4293      	cmp	r3, r2
 8013534:	d100      	bne.n	8013538 <strncpy+0x20>
 8013536:	bd10      	pop	{r4, pc}
 8013538:	f803 1b01 	strb.w	r1, [r3], #1
 801353c:	e7f9      	b.n	8013532 <strncpy+0x1a>
	...

08013540 <strtok>:
 8013540:	4b16      	ldr	r3, [pc, #88]	@ (801359c <strtok+0x5c>)
 8013542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013546:	681f      	ldr	r7, [r3, #0]
 8013548:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801354a:	4605      	mov	r5, r0
 801354c:	460e      	mov	r6, r1
 801354e:	b9ec      	cbnz	r4, 801358c <strtok+0x4c>
 8013550:	2050      	movs	r0, #80	@ 0x50
 8013552:	f000 f93b 	bl	80137cc <malloc>
 8013556:	4602      	mov	r2, r0
 8013558:	6478      	str	r0, [r7, #68]	@ 0x44
 801355a:	b920      	cbnz	r0, 8013566 <strtok+0x26>
 801355c:	4b10      	ldr	r3, [pc, #64]	@ (80135a0 <strtok+0x60>)
 801355e:	4811      	ldr	r0, [pc, #68]	@ (80135a4 <strtok+0x64>)
 8013560:	215b      	movs	r1, #91	@ 0x5b
 8013562:	f000 f8cb 	bl	80136fc <__assert_func>
 8013566:	e9c0 4400 	strd	r4, r4, [r0]
 801356a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801356e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8013572:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8013576:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801357a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801357e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8013582:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8013586:	6184      	str	r4, [r0, #24]
 8013588:	7704      	strb	r4, [r0, #28]
 801358a:	6244      	str	r4, [r0, #36]	@ 0x24
 801358c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801358e:	4631      	mov	r1, r6
 8013590:	4628      	mov	r0, r5
 8013592:	2301      	movs	r3, #1
 8013594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013598:	f000 b806 	b.w	80135a8 <__strtok_r>
 801359c:	20000040 	.word	0x20000040
 80135a0:	0802c5d0 	.word	0x0802c5d0
 80135a4:	0802c5e7 	.word	0x0802c5e7

080135a8 <__strtok_r>:
 80135a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135aa:	4604      	mov	r4, r0
 80135ac:	b908      	cbnz	r0, 80135b2 <__strtok_r+0xa>
 80135ae:	6814      	ldr	r4, [r2, #0]
 80135b0:	b144      	cbz	r4, 80135c4 <__strtok_r+0x1c>
 80135b2:	4620      	mov	r0, r4
 80135b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80135b8:	460f      	mov	r7, r1
 80135ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80135be:	b91e      	cbnz	r6, 80135c8 <__strtok_r+0x20>
 80135c0:	b965      	cbnz	r5, 80135dc <__strtok_r+0x34>
 80135c2:	6015      	str	r5, [r2, #0]
 80135c4:	2000      	movs	r0, #0
 80135c6:	e005      	b.n	80135d4 <__strtok_r+0x2c>
 80135c8:	42b5      	cmp	r5, r6
 80135ca:	d1f6      	bne.n	80135ba <__strtok_r+0x12>
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d1f0      	bne.n	80135b2 <__strtok_r+0xa>
 80135d0:	6014      	str	r4, [r2, #0]
 80135d2:	7003      	strb	r3, [r0, #0]
 80135d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135d6:	461c      	mov	r4, r3
 80135d8:	e00c      	b.n	80135f4 <__strtok_r+0x4c>
 80135da:	b915      	cbnz	r5, 80135e2 <__strtok_r+0x3a>
 80135dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80135e0:	460e      	mov	r6, r1
 80135e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80135e6:	42ab      	cmp	r3, r5
 80135e8:	d1f7      	bne.n	80135da <__strtok_r+0x32>
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d0f3      	beq.n	80135d6 <__strtok_r+0x2e>
 80135ee:	2300      	movs	r3, #0
 80135f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80135f4:	6014      	str	r4, [r2, #0]
 80135f6:	e7ed      	b.n	80135d4 <__strtok_r+0x2c>

080135f8 <_close_r>:
 80135f8:	b538      	push	{r3, r4, r5, lr}
 80135fa:	4d06      	ldr	r5, [pc, #24]	@ (8013614 <_close_r+0x1c>)
 80135fc:	2300      	movs	r3, #0
 80135fe:	4604      	mov	r4, r0
 8013600:	4608      	mov	r0, r1
 8013602:	602b      	str	r3, [r5, #0]
 8013604:	f7ee ffc8 	bl	8002598 <_close>
 8013608:	1c43      	adds	r3, r0, #1
 801360a:	d102      	bne.n	8013612 <_close_r+0x1a>
 801360c:	682b      	ldr	r3, [r5, #0]
 801360e:	b103      	cbz	r3, 8013612 <_close_r+0x1a>
 8013610:	6023      	str	r3, [r4, #0]
 8013612:	bd38      	pop	{r3, r4, r5, pc}
 8013614:	200164a4 	.word	0x200164a4

08013618 <_lseek_r>:
 8013618:	b538      	push	{r3, r4, r5, lr}
 801361a:	4d07      	ldr	r5, [pc, #28]	@ (8013638 <_lseek_r+0x20>)
 801361c:	4604      	mov	r4, r0
 801361e:	4608      	mov	r0, r1
 8013620:	4611      	mov	r1, r2
 8013622:	2200      	movs	r2, #0
 8013624:	602a      	str	r2, [r5, #0]
 8013626:	461a      	mov	r2, r3
 8013628:	f7ee ffdd 	bl	80025e6 <_lseek>
 801362c:	1c43      	adds	r3, r0, #1
 801362e:	d102      	bne.n	8013636 <_lseek_r+0x1e>
 8013630:	682b      	ldr	r3, [r5, #0]
 8013632:	b103      	cbz	r3, 8013636 <_lseek_r+0x1e>
 8013634:	6023      	str	r3, [r4, #0]
 8013636:	bd38      	pop	{r3, r4, r5, pc}
 8013638:	200164a4 	.word	0x200164a4

0801363c <_read_r>:
 801363c:	b538      	push	{r3, r4, r5, lr}
 801363e:	4d07      	ldr	r5, [pc, #28]	@ (801365c <_read_r+0x20>)
 8013640:	4604      	mov	r4, r0
 8013642:	4608      	mov	r0, r1
 8013644:	4611      	mov	r1, r2
 8013646:	2200      	movs	r2, #0
 8013648:	602a      	str	r2, [r5, #0]
 801364a:	461a      	mov	r2, r3
 801364c:	f7ee ff6b 	bl	8002526 <_read>
 8013650:	1c43      	adds	r3, r0, #1
 8013652:	d102      	bne.n	801365a <_read_r+0x1e>
 8013654:	682b      	ldr	r3, [r5, #0]
 8013656:	b103      	cbz	r3, 801365a <_read_r+0x1e>
 8013658:	6023      	str	r3, [r4, #0]
 801365a:	bd38      	pop	{r3, r4, r5, pc}
 801365c:	200164a4 	.word	0x200164a4

08013660 <_write_r>:
 8013660:	b538      	push	{r3, r4, r5, lr}
 8013662:	4d07      	ldr	r5, [pc, #28]	@ (8013680 <_write_r+0x20>)
 8013664:	4604      	mov	r4, r0
 8013666:	4608      	mov	r0, r1
 8013668:	4611      	mov	r1, r2
 801366a:	2200      	movs	r2, #0
 801366c:	602a      	str	r2, [r5, #0]
 801366e:	461a      	mov	r2, r3
 8013670:	f7ee ff76 	bl	8002560 <_write>
 8013674:	1c43      	adds	r3, r0, #1
 8013676:	d102      	bne.n	801367e <_write_r+0x1e>
 8013678:	682b      	ldr	r3, [r5, #0]
 801367a:	b103      	cbz	r3, 801367e <_write_r+0x1e>
 801367c:	6023      	str	r3, [r4, #0]
 801367e:	bd38      	pop	{r3, r4, r5, pc}
 8013680:	200164a4 	.word	0x200164a4

08013684 <__errno>:
 8013684:	4b01      	ldr	r3, [pc, #4]	@ (801368c <__errno+0x8>)
 8013686:	6818      	ldr	r0, [r3, #0]
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop
 801368c:	20000040 	.word	0x20000040

08013690 <__libc_init_array>:
 8013690:	b570      	push	{r4, r5, r6, lr}
 8013692:	4d0d      	ldr	r5, [pc, #52]	@ (80136c8 <__libc_init_array+0x38>)
 8013694:	4c0d      	ldr	r4, [pc, #52]	@ (80136cc <__libc_init_array+0x3c>)
 8013696:	1b64      	subs	r4, r4, r5
 8013698:	10a4      	asrs	r4, r4, #2
 801369a:	2600      	movs	r6, #0
 801369c:	42a6      	cmp	r6, r4
 801369e:	d109      	bne.n	80136b4 <__libc_init_array+0x24>
 80136a0:	4d0b      	ldr	r5, [pc, #44]	@ (80136d0 <__libc_init_array+0x40>)
 80136a2:	4c0c      	ldr	r4, [pc, #48]	@ (80136d4 <__libc_init_array+0x44>)
 80136a4:	f000 fff8 	bl	8014698 <_init>
 80136a8:	1b64      	subs	r4, r4, r5
 80136aa:	10a4      	asrs	r4, r4, #2
 80136ac:	2600      	movs	r6, #0
 80136ae:	42a6      	cmp	r6, r4
 80136b0:	d105      	bne.n	80136be <__libc_init_array+0x2e>
 80136b2:	bd70      	pop	{r4, r5, r6, pc}
 80136b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80136b8:	4798      	blx	r3
 80136ba:	3601      	adds	r6, #1
 80136bc:	e7ee      	b.n	801369c <__libc_init_array+0xc>
 80136be:	f855 3b04 	ldr.w	r3, [r5], #4
 80136c2:	4798      	blx	r3
 80136c4:	3601      	adds	r6, #1
 80136c6:	e7f2      	b.n	80136ae <__libc_init_array+0x1e>
 80136c8:	0802c6b8 	.word	0x0802c6b8
 80136cc:	0802c6b8 	.word	0x0802c6b8
 80136d0:	0802c6b8 	.word	0x0802c6b8
 80136d4:	0802c6bc 	.word	0x0802c6bc

080136d8 <__retarget_lock_init_recursive>:
 80136d8:	4770      	bx	lr

080136da <__retarget_lock_acquire_recursive>:
 80136da:	4770      	bx	lr

080136dc <__retarget_lock_release_recursive>:
 80136dc:	4770      	bx	lr

080136de <memcpy>:
 80136de:	440a      	add	r2, r1
 80136e0:	4291      	cmp	r1, r2
 80136e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80136e6:	d100      	bne.n	80136ea <memcpy+0xc>
 80136e8:	4770      	bx	lr
 80136ea:	b510      	push	{r4, lr}
 80136ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136f4:	4291      	cmp	r1, r2
 80136f6:	d1f9      	bne.n	80136ec <memcpy+0xe>
 80136f8:	bd10      	pop	{r4, pc}
	...

080136fc <__assert_func>:
 80136fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136fe:	4614      	mov	r4, r2
 8013700:	461a      	mov	r2, r3
 8013702:	4b09      	ldr	r3, [pc, #36]	@ (8013728 <__assert_func+0x2c>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	4605      	mov	r5, r0
 8013708:	68d8      	ldr	r0, [r3, #12]
 801370a:	b954      	cbnz	r4, 8013722 <__assert_func+0x26>
 801370c:	4b07      	ldr	r3, [pc, #28]	@ (801372c <__assert_func+0x30>)
 801370e:	461c      	mov	r4, r3
 8013710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013714:	9100      	str	r1, [sp, #0]
 8013716:	462b      	mov	r3, r5
 8013718:	4905      	ldr	r1, [pc, #20]	@ (8013730 <__assert_func+0x34>)
 801371a:	f000 fc9f 	bl	801405c <fiprintf>
 801371e:	f000 fcbf 	bl	80140a0 <abort>
 8013722:	4b04      	ldr	r3, [pc, #16]	@ (8013734 <__assert_func+0x38>)
 8013724:	e7f4      	b.n	8013710 <__assert_func+0x14>
 8013726:	bf00      	nop
 8013728:	20000040 	.word	0x20000040
 801372c:	0802c67c 	.word	0x0802c67c
 8013730:	0802c64e 	.word	0x0802c64e
 8013734:	0802c641 	.word	0x0802c641

08013738 <_free_r>:
 8013738:	b538      	push	{r3, r4, r5, lr}
 801373a:	4605      	mov	r5, r0
 801373c:	2900      	cmp	r1, #0
 801373e:	d041      	beq.n	80137c4 <_free_r+0x8c>
 8013740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013744:	1f0c      	subs	r4, r1, #4
 8013746:	2b00      	cmp	r3, #0
 8013748:	bfb8      	it	lt
 801374a:	18e4      	addlt	r4, r4, r3
 801374c:	f000 f8e8 	bl	8013920 <__malloc_lock>
 8013750:	4a1d      	ldr	r2, [pc, #116]	@ (80137c8 <_free_r+0x90>)
 8013752:	6813      	ldr	r3, [r2, #0]
 8013754:	b933      	cbnz	r3, 8013764 <_free_r+0x2c>
 8013756:	6063      	str	r3, [r4, #4]
 8013758:	6014      	str	r4, [r2, #0]
 801375a:	4628      	mov	r0, r5
 801375c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013760:	f000 b8e4 	b.w	801392c <__malloc_unlock>
 8013764:	42a3      	cmp	r3, r4
 8013766:	d908      	bls.n	801377a <_free_r+0x42>
 8013768:	6820      	ldr	r0, [r4, #0]
 801376a:	1821      	adds	r1, r4, r0
 801376c:	428b      	cmp	r3, r1
 801376e:	bf01      	itttt	eq
 8013770:	6819      	ldreq	r1, [r3, #0]
 8013772:	685b      	ldreq	r3, [r3, #4]
 8013774:	1809      	addeq	r1, r1, r0
 8013776:	6021      	streq	r1, [r4, #0]
 8013778:	e7ed      	b.n	8013756 <_free_r+0x1e>
 801377a:	461a      	mov	r2, r3
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	b10b      	cbz	r3, 8013784 <_free_r+0x4c>
 8013780:	42a3      	cmp	r3, r4
 8013782:	d9fa      	bls.n	801377a <_free_r+0x42>
 8013784:	6811      	ldr	r1, [r2, #0]
 8013786:	1850      	adds	r0, r2, r1
 8013788:	42a0      	cmp	r0, r4
 801378a:	d10b      	bne.n	80137a4 <_free_r+0x6c>
 801378c:	6820      	ldr	r0, [r4, #0]
 801378e:	4401      	add	r1, r0
 8013790:	1850      	adds	r0, r2, r1
 8013792:	4283      	cmp	r3, r0
 8013794:	6011      	str	r1, [r2, #0]
 8013796:	d1e0      	bne.n	801375a <_free_r+0x22>
 8013798:	6818      	ldr	r0, [r3, #0]
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	6053      	str	r3, [r2, #4]
 801379e:	4408      	add	r0, r1
 80137a0:	6010      	str	r0, [r2, #0]
 80137a2:	e7da      	b.n	801375a <_free_r+0x22>
 80137a4:	d902      	bls.n	80137ac <_free_r+0x74>
 80137a6:	230c      	movs	r3, #12
 80137a8:	602b      	str	r3, [r5, #0]
 80137aa:	e7d6      	b.n	801375a <_free_r+0x22>
 80137ac:	6820      	ldr	r0, [r4, #0]
 80137ae:	1821      	adds	r1, r4, r0
 80137b0:	428b      	cmp	r3, r1
 80137b2:	bf04      	itt	eq
 80137b4:	6819      	ldreq	r1, [r3, #0]
 80137b6:	685b      	ldreq	r3, [r3, #4]
 80137b8:	6063      	str	r3, [r4, #4]
 80137ba:	bf04      	itt	eq
 80137bc:	1809      	addeq	r1, r1, r0
 80137be:	6021      	streq	r1, [r4, #0]
 80137c0:	6054      	str	r4, [r2, #4]
 80137c2:	e7ca      	b.n	801375a <_free_r+0x22>
 80137c4:	bd38      	pop	{r3, r4, r5, pc}
 80137c6:	bf00      	nop
 80137c8:	200164b0 	.word	0x200164b0

080137cc <malloc>:
 80137cc:	4b02      	ldr	r3, [pc, #8]	@ (80137d8 <malloc+0xc>)
 80137ce:	4601      	mov	r1, r0
 80137d0:	6818      	ldr	r0, [r3, #0]
 80137d2:	f000 b825 	b.w	8013820 <_malloc_r>
 80137d6:	bf00      	nop
 80137d8:	20000040 	.word	0x20000040

080137dc <sbrk_aligned>:
 80137dc:	b570      	push	{r4, r5, r6, lr}
 80137de:	4e0f      	ldr	r6, [pc, #60]	@ (801381c <sbrk_aligned+0x40>)
 80137e0:	460c      	mov	r4, r1
 80137e2:	6831      	ldr	r1, [r6, #0]
 80137e4:	4605      	mov	r5, r0
 80137e6:	b911      	cbnz	r1, 80137ee <sbrk_aligned+0x12>
 80137e8:	f000 fc4a 	bl	8014080 <_sbrk_r>
 80137ec:	6030      	str	r0, [r6, #0]
 80137ee:	4621      	mov	r1, r4
 80137f0:	4628      	mov	r0, r5
 80137f2:	f000 fc45 	bl	8014080 <_sbrk_r>
 80137f6:	1c43      	adds	r3, r0, #1
 80137f8:	d103      	bne.n	8013802 <sbrk_aligned+0x26>
 80137fa:	f04f 34ff 	mov.w	r4, #4294967295
 80137fe:	4620      	mov	r0, r4
 8013800:	bd70      	pop	{r4, r5, r6, pc}
 8013802:	1cc4      	adds	r4, r0, #3
 8013804:	f024 0403 	bic.w	r4, r4, #3
 8013808:	42a0      	cmp	r0, r4
 801380a:	d0f8      	beq.n	80137fe <sbrk_aligned+0x22>
 801380c:	1a21      	subs	r1, r4, r0
 801380e:	4628      	mov	r0, r5
 8013810:	f000 fc36 	bl	8014080 <_sbrk_r>
 8013814:	3001      	adds	r0, #1
 8013816:	d1f2      	bne.n	80137fe <sbrk_aligned+0x22>
 8013818:	e7ef      	b.n	80137fa <sbrk_aligned+0x1e>
 801381a:	bf00      	nop
 801381c:	200164ac 	.word	0x200164ac

08013820 <_malloc_r>:
 8013820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013824:	1ccd      	adds	r5, r1, #3
 8013826:	f025 0503 	bic.w	r5, r5, #3
 801382a:	3508      	adds	r5, #8
 801382c:	2d0c      	cmp	r5, #12
 801382e:	bf38      	it	cc
 8013830:	250c      	movcc	r5, #12
 8013832:	2d00      	cmp	r5, #0
 8013834:	4606      	mov	r6, r0
 8013836:	db01      	blt.n	801383c <_malloc_r+0x1c>
 8013838:	42a9      	cmp	r1, r5
 801383a:	d904      	bls.n	8013846 <_malloc_r+0x26>
 801383c:	230c      	movs	r3, #12
 801383e:	6033      	str	r3, [r6, #0]
 8013840:	2000      	movs	r0, #0
 8013842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013846:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801391c <_malloc_r+0xfc>
 801384a:	f000 f869 	bl	8013920 <__malloc_lock>
 801384e:	f8d8 3000 	ldr.w	r3, [r8]
 8013852:	461c      	mov	r4, r3
 8013854:	bb44      	cbnz	r4, 80138a8 <_malloc_r+0x88>
 8013856:	4629      	mov	r1, r5
 8013858:	4630      	mov	r0, r6
 801385a:	f7ff ffbf 	bl	80137dc <sbrk_aligned>
 801385e:	1c43      	adds	r3, r0, #1
 8013860:	4604      	mov	r4, r0
 8013862:	d158      	bne.n	8013916 <_malloc_r+0xf6>
 8013864:	f8d8 4000 	ldr.w	r4, [r8]
 8013868:	4627      	mov	r7, r4
 801386a:	2f00      	cmp	r7, #0
 801386c:	d143      	bne.n	80138f6 <_malloc_r+0xd6>
 801386e:	2c00      	cmp	r4, #0
 8013870:	d04b      	beq.n	801390a <_malloc_r+0xea>
 8013872:	6823      	ldr	r3, [r4, #0]
 8013874:	4639      	mov	r1, r7
 8013876:	4630      	mov	r0, r6
 8013878:	eb04 0903 	add.w	r9, r4, r3
 801387c:	f000 fc00 	bl	8014080 <_sbrk_r>
 8013880:	4581      	cmp	r9, r0
 8013882:	d142      	bne.n	801390a <_malloc_r+0xea>
 8013884:	6821      	ldr	r1, [r4, #0]
 8013886:	1a6d      	subs	r5, r5, r1
 8013888:	4629      	mov	r1, r5
 801388a:	4630      	mov	r0, r6
 801388c:	f7ff ffa6 	bl	80137dc <sbrk_aligned>
 8013890:	3001      	adds	r0, #1
 8013892:	d03a      	beq.n	801390a <_malloc_r+0xea>
 8013894:	6823      	ldr	r3, [r4, #0]
 8013896:	442b      	add	r3, r5
 8013898:	6023      	str	r3, [r4, #0]
 801389a:	f8d8 3000 	ldr.w	r3, [r8]
 801389e:	685a      	ldr	r2, [r3, #4]
 80138a0:	bb62      	cbnz	r2, 80138fc <_malloc_r+0xdc>
 80138a2:	f8c8 7000 	str.w	r7, [r8]
 80138a6:	e00f      	b.n	80138c8 <_malloc_r+0xa8>
 80138a8:	6822      	ldr	r2, [r4, #0]
 80138aa:	1b52      	subs	r2, r2, r5
 80138ac:	d420      	bmi.n	80138f0 <_malloc_r+0xd0>
 80138ae:	2a0b      	cmp	r2, #11
 80138b0:	d917      	bls.n	80138e2 <_malloc_r+0xc2>
 80138b2:	1961      	adds	r1, r4, r5
 80138b4:	42a3      	cmp	r3, r4
 80138b6:	6025      	str	r5, [r4, #0]
 80138b8:	bf18      	it	ne
 80138ba:	6059      	strne	r1, [r3, #4]
 80138bc:	6863      	ldr	r3, [r4, #4]
 80138be:	bf08      	it	eq
 80138c0:	f8c8 1000 	streq.w	r1, [r8]
 80138c4:	5162      	str	r2, [r4, r5]
 80138c6:	604b      	str	r3, [r1, #4]
 80138c8:	4630      	mov	r0, r6
 80138ca:	f000 f82f 	bl	801392c <__malloc_unlock>
 80138ce:	f104 000b 	add.w	r0, r4, #11
 80138d2:	1d23      	adds	r3, r4, #4
 80138d4:	f020 0007 	bic.w	r0, r0, #7
 80138d8:	1ac2      	subs	r2, r0, r3
 80138da:	bf1c      	itt	ne
 80138dc:	1a1b      	subne	r3, r3, r0
 80138de:	50a3      	strne	r3, [r4, r2]
 80138e0:	e7af      	b.n	8013842 <_malloc_r+0x22>
 80138e2:	6862      	ldr	r2, [r4, #4]
 80138e4:	42a3      	cmp	r3, r4
 80138e6:	bf0c      	ite	eq
 80138e8:	f8c8 2000 	streq.w	r2, [r8]
 80138ec:	605a      	strne	r2, [r3, #4]
 80138ee:	e7eb      	b.n	80138c8 <_malloc_r+0xa8>
 80138f0:	4623      	mov	r3, r4
 80138f2:	6864      	ldr	r4, [r4, #4]
 80138f4:	e7ae      	b.n	8013854 <_malloc_r+0x34>
 80138f6:	463c      	mov	r4, r7
 80138f8:	687f      	ldr	r7, [r7, #4]
 80138fa:	e7b6      	b.n	801386a <_malloc_r+0x4a>
 80138fc:	461a      	mov	r2, r3
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	42a3      	cmp	r3, r4
 8013902:	d1fb      	bne.n	80138fc <_malloc_r+0xdc>
 8013904:	2300      	movs	r3, #0
 8013906:	6053      	str	r3, [r2, #4]
 8013908:	e7de      	b.n	80138c8 <_malloc_r+0xa8>
 801390a:	230c      	movs	r3, #12
 801390c:	6033      	str	r3, [r6, #0]
 801390e:	4630      	mov	r0, r6
 8013910:	f000 f80c 	bl	801392c <__malloc_unlock>
 8013914:	e794      	b.n	8013840 <_malloc_r+0x20>
 8013916:	6005      	str	r5, [r0, #0]
 8013918:	e7d6      	b.n	80138c8 <_malloc_r+0xa8>
 801391a:	bf00      	nop
 801391c:	200164b0 	.word	0x200164b0

08013920 <__malloc_lock>:
 8013920:	4801      	ldr	r0, [pc, #4]	@ (8013928 <__malloc_lock+0x8>)
 8013922:	f7ff beda 	b.w	80136da <__retarget_lock_acquire_recursive>
 8013926:	bf00      	nop
 8013928:	200164a8 	.word	0x200164a8

0801392c <__malloc_unlock>:
 801392c:	4801      	ldr	r0, [pc, #4]	@ (8013934 <__malloc_unlock+0x8>)
 801392e:	f7ff bed5 	b.w	80136dc <__retarget_lock_release_recursive>
 8013932:	bf00      	nop
 8013934:	200164a8 	.word	0x200164a8

08013938 <__ssputs_r>:
 8013938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801393c:	688e      	ldr	r6, [r1, #8]
 801393e:	461f      	mov	r7, r3
 8013940:	42be      	cmp	r6, r7
 8013942:	680b      	ldr	r3, [r1, #0]
 8013944:	4682      	mov	sl, r0
 8013946:	460c      	mov	r4, r1
 8013948:	4690      	mov	r8, r2
 801394a:	d82d      	bhi.n	80139a8 <__ssputs_r+0x70>
 801394c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013950:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013954:	d026      	beq.n	80139a4 <__ssputs_r+0x6c>
 8013956:	6965      	ldr	r5, [r4, #20]
 8013958:	6909      	ldr	r1, [r1, #16]
 801395a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801395e:	eba3 0901 	sub.w	r9, r3, r1
 8013962:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013966:	1c7b      	adds	r3, r7, #1
 8013968:	444b      	add	r3, r9
 801396a:	106d      	asrs	r5, r5, #1
 801396c:	429d      	cmp	r5, r3
 801396e:	bf38      	it	cc
 8013970:	461d      	movcc	r5, r3
 8013972:	0553      	lsls	r3, r2, #21
 8013974:	d527      	bpl.n	80139c6 <__ssputs_r+0x8e>
 8013976:	4629      	mov	r1, r5
 8013978:	f7ff ff52 	bl	8013820 <_malloc_r>
 801397c:	4606      	mov	r6, r0
 801397e:	b360      	cbz	r0, 80139da <__ssputs_r+0xa2>
 8013980:	6921      	ldr	r1, [r4, #16]
 8013982:	464a      	mov	r2, r9
 8013984:	f7ff feab 	bl	80136de <memcpy>
 8013988:	89a3      	ldrh	r3, [r4, #12]
 801398a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801398e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013992:	81a3      	strh	r3, [r4, #12]
 8013994:	6126      	str	r6, [r4, #16]
 8013996:	6165      	str	r5, [r4, #20]
 8013998:	444e      	add	r6, r9
 801399a:	eba5 0509 	sub.w	r5, r5, r9
 801399e:	6026      	str	r6, [r4, #0]
 80139a0:	60a5      	str	r5, [r4, #8]
 80139a2:	463e      	mov	r6, r7
 80139a4:	42be      	cmp	r6, r7
 80139a6:	d900      	bls.n	80139aa <__ssputs_r+0x72>
 80139a8:	463e      	mov	r6, r7
 80139aa:	6820      	ldr	r0, [r4, #0]
 80139ac:	4632      	mov	r2, r6
 80139ae:	4641      	mov	r1, r8
 80139b0:	f7ff fd81 	bl	80134b6 <memmove>
 80139b4:	68a3      	ldr	r3, [r4, #8]
 80139b6:	1b9b      	subs	r3, r3, r6
 80139b8:	60a3      	str	r3, [r4, #8]
 80139ba:	6823      	ldr	r3, [r4, #0]
 80139bc:	4433      	add	r3, r6
 80139be:	6023      	str	r3, [r4, #0]
 80139c0:	2000      	movs	r0, #0
 80139c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139c6:	462a      	mov	r2, r5
 80139c8:	f000 fb71 	bl	80140ae <_realloc_r>
 80139cc:	4606      	mov	r6, r0
 80139ce:	2800      	cmp	r0, #0
 80139d0:	d1e0      	bne.n	8013994 <__ssputs_r+0x5c>
 80139d2:	6921      	ldr	r1, [r4, #16]
 80139d4:	4650      	mov	r0, sl
 80139d6:	f7ff feaf 	bl	8013738 <_free_r>
 80139da:	230c      	movs	r3, #12
 80139dc:	f8ca 3000 	str.w	r3, [sl]
 80139e0:	89a3      	ldrh	r3, [r4, #12]
 80139e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139e6:	81a3      	strh	r3, [r4, #12]
 80139e8:	f04f 30ff 	mov.w	r0, #4294967295
 80139ec:	e7e9      	b.n	80139c2 <__ssputs_r+0x8a>
	...

080139f0 <_svfiprintf_r>:
 80139f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139f4:	4698      	mov	r8, r3
 80139f6:	898b      	ldrh	r3, [r1, #12]
 80139f8:	061b      	lsls	r3, r3, #24
 80139fa:	b09d      	sub	sp, #116	@ 0x74
 80139fc:	4607      	mov	r7, r0
 80139fe:	460d      	mov	r5, r1
 8013a00:	4614      	mov	r4, r2
 8013a02:	d510      	bpl.n	8013a26 <_svfiprintf_r+0x36>
 8013a04:	690b      	ldr	r3, [r1, #16]
 8013a06:	b973      	cbnz	r3, 8013a26 <_svfiprintf_r+0x36>
 8013a08:	2140      	movs	r1, #64	@ 0x40
 8013a0a:	f7ff ff09 	bl	8013820 <_malloc_r>
 8013a0e:	6028      	str	r0, [r5, #0]
 8013a10:	6128      	str	r0, [r5, #16]
 8013a12:	b930      	cbnz	r0, 8013a22 <_svfiprintf_r+0x32>
 8013a14:	230c      	movs	r3, #12
 8013a16:	603b      	str	r3, [r7, #0]
 8013a18:	f04f 30ff 	mov.w	r0, #4294967295
 8013a1c:	b01d      	add	sp, #116	@ 0x74
 8013a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a22:	2340      	movs	r3, #64	@ 0x40
 8013a24:	616b      	str	r3, [r5, #20]
 8013a26:	2300      	movs	r3, #0
 8013a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a2a:	2320      	movs	r3, #32
 8013a2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a30:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a34:	2330      	movs	r3, #48	@ 0x30
 8013a36:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013bd4 <_svfiprintf_r+0x1e4>
 8013a3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a3e:	f04f 0901 	mov.w	r9, #1
 8013a42:	4623      	mov	r3, r4
 8013a44:	469a      	mov	sl, r3
 8013a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a4a:	b10a      	cbz	r2, 8013a50 <_svfiprintf_r+0x60>
 8013a4c:	2a25      	cmp	r2, #37	@ 0x25
 8013a4e:	d1f9      	bne.n	8013a44 <_svfiprintf_r+0x54>
 8013a50:	ebba 0b04 	subs.w	fp, sl, r4
 8013a54:	d00b      	beq.n	8013a6e <_svfiprintf_r+0x7e>
 8013a56:	465b      	mov	r3, fp
 8013a58:	4622      	mov	r2, r4
 8013a5a:	4629      	mov	r1, r5
 8013a5c:	4638      	mov	r0, r7
 8013a5e:	f7ff ff6b 	bl	8013938 <__ssputs_r>
 8013a62:	3001      	adds	r0, #1
 8013a64:	f000 80a7 	beq.w	8013bb6 <_svfiprintf_r+0x1c6>
 8013a68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a6a:	445a      	add	r2, fp
 8013a6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	f000 809f 	beq.w	8013bb6 <_svfiprintf_r+0x1c6>
 8013a78:	2300      	movs	r3, #0
 8013a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a82:	f10a 0a01 	add.w	sl, sl, #1
 8013a86:	9304      	str	r3, [sp, #16]
 8013a88:	9307      	str	r3, [sp, #28]
 8013a8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013a8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013a90:	4654      	mov	r4, sl
 8013a92:	2205      	movs	r2, #5
 8013a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a98:	484e      	ldr	r0, [pc, #312]	@ (8013bd4 <_svfiprintf_r+0x1e4>)
 8013a9a:	f7ec fc19 	bl	80002d0 <memchr>
 8013a9e:	9a04      	ldr	r2, [sp, #16]
 8013aa0:	b9d8      	cbnz	r0, 8013ada <_svfiprintf_r+0xea>
 8013aa2:	06d0      	lsls	r0, r2, #27
 8013aa4:	bf44      	itt	mi
 8013aa6:	2320      	movmi	r3, #32
 8013aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013aac:	0711      	lsls	r1, r2, #28
 8013aae:	bf44      	itt	mi
 8013ab0:	232b      	movmi	r3, #43	@ 0x2b
 8013ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8013aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8013abc:	d015      	beq.n	8013aea <_svfiprintf_r+0xfa>
 8013abe:	9a07      	ldr	r2, [sp, #28]
 8013ac0:	4654      	mov	r4, sl
 8013ac2:	2000      	movs	r0, #0
 8013ac4:	f04f 0c0a 	mov.w	ip, #10
 8013ac8:	4621      	mov	r1, r4
 8013aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ace:	3b30      	subs	r3, #48	@ 0x30
 8013ad0:	2b09      	cmp	r3, #9
 8013ad2:	d94b      	bls.n	8013b6c <_svfiprintf_r+0x17c>
 8013ad4:	b1b0      	cbz	r0, 8013b04 <_svfiprintf_r+0x114>
 8013ad6:	9207      	str	r2, [sp, #28]
 8013ad8:	e014      	b.n	8013b04 <_svfiprintf_r+0x114>
 8013ada:	eba0 0308 	sub.w	r3, r0, r8
 8013ade:	fa09 f303 	lsl.w	r3, r9, r3
 8013ae2:	4313      	orrs	r3, r2
 8013ae4:	9304      	str	r3, [sp, #16]
 8013ae6:	46a2      	mov	sl, r4
 8013ae8:	e7d2      	b.n	8013a90 <_svfiprintf_r+0xa0>
 8013aea:	9b03      	ldr	r3, [sp, #12]
 8013aec:	1d19      	adds	r1, r3, #4
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	9103      	str	r1, [sp, #12]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	bfbb      	ittet	lt
 8013af6:	425b      	neglt	r3, r3
 8013af8:	f042 0202 	orrlt.w	r2, r2, #2
 8013afc:	9307      	strge	r3, [sp, #28]
 8013afe:	9307      	strlt	r3, [sp, #28]
 8013b00:	bfb8      	it	lt
 8013b02:	9204      	strlt	r2, [sp, #16]
 8013b04:	7823      	ldrb	r3, [r4, #0]
 8013b06:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b08:	d10a      	bne.n	8013b20 <_svfiprintf_r+0x130>
 8013b0a:	7863      	ldrb	r3, [r4, #1]
 8013b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b0e:	d132      	bne.n	8013b76 <_svfiprintf_r+0x186>
 8013b10:	9b03      	ldr	r3, [sp, #12]
 8013b12:	1d1a      	adds	r2, r3, #4
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	9203      	str	r2, [sp, #12]
 8013b18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013b1c:	3402      	adds	r4, #2
 8013b1e:	9305      	str	r3, [sp, #20]
 8013b20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013be4 <_svfiprintf_r+0x1f4>
 8013b24:	7821      	ldrb	r1, [r4, #0]
 8013b26:	2203      	movs	r2, #3
 8013b28:	4650      	mov	r0, sl
 8013b2a:	f7ec fbd1 	bl	80002d0 <memchr>
 8013b2e:	b138      	cbz	r0, 8013b40 <_svfiprintf_r+0x150>
 8013b30:	9b04      	ldr	r3, [sp, #16]
 8013b32:	eba0 000a 	sub.w	r0, r0, sl
 8013b36:	2240      	movs	r2, #64	@ 0x40
 8013b38:	4082      	lsls	r2, r0
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	3401      	adds	r4, #1
 8013b3e:	9304      	str	r3, [sp, #16]
 8013b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b44:	4824      	ldr	r0, [pc, #144]	@ (8013bd8 <_svfiprintf_r+0x1e8>)
 8013b46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b4a:	2206      	movs	r2, #6
 8013b4c:	f7ec fbc0 	bl	80002d0 <memchr>
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d036      	beq.n	8013bc2 <_svfiprintf_r+0x1d2>
 8013b54:	4b21      	ldr	r3, [pc, #132]	@ (8013bdc <_svfiprintf_r+0x1ec>)
 8013b56:	bb1b      	cbnz	r3, 8013ba0 <_svfiprintf_r+0x1b0>
 8013b58:	9b03      	ldr	r3, [sp, #12]
 8013b5a:	3307      	adds	r3, #7
 8013b5c:	f023 0307 	bic.w	r3, r3, #7
 8013b60:	3308      	adds	r3, #8
 8013b62:	9303      	str	r3, [sp, #12]
 8013b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b66:	4433      	add	r3, r6
 8013b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b6a:	e76a      	b.n	8013a42 <_svfiprintf_r+0x52>
 8013b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b70:	460c      	mov	r4, r1
 8013b72:	2001      	movs	r0, #1
 8013b74:	e7a8      	b.n	8013ac8 <_svfiprintf_r+0xd8>
 8013b76:	2300      	movs	r3, #0
 8013b78:	3401      	adds	r4, #1
 8013b7a:	9305      	str	r3, [sp, #20]
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	f04f 0c0a 	mov.w	ip, #10
 8013b82:	4620      	mov	r0, r4
 8013b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b88:	3a30      	subs	r2, #48	@ 0x30
 8013b8a:	2a09      	cmp	r2, #9
 8013b8c:	d903      	bls.n	8013b96 <_svfiprintf_r+0x1a6>
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d0c6      	beq.n	8013b20 <_svfiprintf_r+0x130>
 8013b92:	9105      	str	r1, [sp, #20]
 8013b94:	e7c4      	b.n	8013b20 <_svfiprintf_r+0x130>
 8013b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	2301      	movs	r3, #1
 8013b9e:	e7f0      	b.n	8013b82 <_svfiprintf_r+0x192>
 8013ba0:	ab03      	add	r3, sp, #12
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	462a      	mov	r2, r5
 8013ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8013be0 <_svfiprintf_r+0x1f0>)
 8013ba8:	a904      	add	r1, sp, #16
 8013baa:	4638      	mov	r0, r7
 8013bac:	f3af 8000 	nop.w
 8013bb0:	1c42      	adds	r2, r0, #1
 8013bb2:	4606      	mov	r6, r0
 8013bb4:	d1d6      	bne.n	8013b64 <_svfiprintf_r+0x174>
 8013bb6:	89ab      	ldrh	r3, [r5, #12]
 8013bb8:	065b      	lsls	r3, r3, #25
 8013bba:	f53f af2d 	bmi.w	8013a18 <_svfiprintf_r+0x28>
 8013bbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013bc0:	e72c      	b.n	8013a1c <_svfiprintf_r+0x2c>
 8013bc2:	ab03      	add	r3, sp, #12
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	462a      	mov	r2, r5
 8013bc8:	4b05      	ldr	r3, [pc, #20]	@ (8013be0 <_svfiprintf_r+0x1f0>)
 8013bca:	a904      	add	r1, sp, #16
 8013bcc:	4638      	mov	r0, r7
 8013bce:	f000 f879 	bl	8013cc4 <_printf_i>
 8013bd2:	e7ed      	b.n	8013bb0 <_svfiprintf_r+0x1c0>
 8013bd4:	0802c67d 	.word	0x0802c67d
 8013bd8:	0802c687 	.word	0x0802c687
 8013bdc:	00000000 	.word	0x00000000
 8013be0:	08013939 	.word	0x08013939
 8013be4:	0802c683 	.word	0x0802c683

08013be8 <_printf_common>:
 8013be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bec:	4616      	mov	r6, r2
 8013bee:	4698      	mov	r8, r3
 8013bf0:	688a      	ldr	r2, [r1, #8]
 8013bf2:	690b      	ldr	r3, [r1, #16]
 8013bf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	bfb8      	it	lt
 8013bfc:	4613      	movlt	r3, r2
 8013bfe:	6033      	str	r3, [r6, #0]
 8013c00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013c04:	4607      	mov	r7, r0
 8013c06:	460c      	mov	r4, r1
 8013c08:	b10a      	cbz	r2, 8013c0e <_printf_common+0x26>
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	6033      	str	r3, [r6, #0]
 8013c0e:	6823      	ldr	r3, [r4, #0]
 8013c10:	0699      	lsls	r1, r3, #26
 8013c12:	bf42      	ittt	mi
 8013c14:	6833      	ldrmi	r3, [r6, #0]
 8013c16:	3302      	addmi	r3, #2
 8013c18:	6033      	strmi	r3, [r6, #0]
 8013c1a:	6825      	ldr	r5, [r4, #0]
 8013c1c:	f015 0506 	ands.w	r5, r5, #6
 8013c20:	d106      	bne.n	8013c30 <_printf_common+0x48>
 8013c22:	f104 0a19 	add.w	sl, r4, #25
 8013c26:	68e3      	ldr	r3, [r4, #12]
 8013c28:	6832      	ldr	r2, [r6, #0]
 8013c2a:	1a9b      	subs	r3, r3, r2
 8013c2c:	42ab      	cmp	r3, r5
 8013c2e:	dc26      	bgt.n	8013c7e <_printf_common+0x96>
 8013c30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013c34:	6822      	ldr	r2, [r4, #0]
 8013c36:	3b00      	subs	r3, #0
 8013c38:	bf18      	it	ne
 8013c3a:	2301      	movne	r3, #1
 8013c3c:	0692      	lsls	r2, r2, #26
 8013c3e:	d42b      	bmi.n	8013c98 <_printf_common+0xb0>
 8013c40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013c44:	4641      	mov	r1, r8
 8013c46:	4638      	mov	r0, r7
 8013c48:	47c8      	blx	r9
 8013c4a:	3001      	adds	r0, #1
 8013c4c:	d01e      	beq.n	8013c8c <_printf_common+0xa4>
 8013c4e:	6823      	ldr	r3, [r4, #0]
 8013c50:	6922      	ldr	r2, [r4, #16]
 8013c52:	f003 0306 	and.w	r3, r3, #6
 8013c56:	2b04      	cmp	r3, #4
 8013c58:	bf02      	ittt	eq
 8013c5a:	68e5      	ldreq	r5, [r4, #12]
 8013c5c:	6833      	ldreq	r3, [r6, #0]
 8013c5e:	1aed      	subeq	r5, r5, r3
 8013c60:	68a3      	ldr	r3, [r4, #8]
 8013c62:	bf0c      	ite	eq
 8013c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c68:	2500      	movne	r5, #0
 8013c6a:	4293      	cmp	r3, r2
 8013c6c:	bfc4      	itt	gt
 8013c6e:	1a9b      	subgt	r3, r3, r2
 8013c70:	18ed      	addgt	r5, r5, r3
 8013c72:	2600      	movs	r6, #0
 8013c74:	341a      	adds	r4, #26
 8013c76:	42b5      	cmp	r5, r6
 8013c78:	d11a      	bne.n	8013cb0 <_printf_common+0xc8>
 8013c7a:	2000      	movs	r0, #0
 8013c7c:	e008      	b.n	8013c90 <_printf_common+0xa8>
 8013c7e:	2301      	movs	r3, #1
 8013c80:	4652      	mov	r2, sl
 8013c82:	4641      	mov	r1, r8
 8013c84:	4638      	mov	r0, r7
 8013c86:	47c8      	blx	r9
 8013c88:	3001      	adds	r0, #1
 8013c8a:	d103      	bne.n	8013c94 <_printf_common+0xac>
 8013c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c94:	3501      	adds	r5, #1
 8013c96:	e7c6      	b.n	8013c26 <_printf_common+0x3e>
 8013c98:	18e1      	adds	r1, r4, r3
 8013c9a:	1c5a      	adds	r2, r3, #1
 8013c9c:	2030      	movs	r0, #48	@ 0x30
 8013c9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013ca2:	4422      	add	r2, r4
 8013ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013ca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013cac:	3302      	adds	r3, #2
 8013cae:	e7c7      	b.n	8013c40 <_printf_common+0x58>
 8013cb0:	2301      	movs	r3, #1
 8013cb2:	4622      	mov	r2, r4
 8013cb4:	4641      	mov	r1, r8
 8013cb6:	4638      	mov	r0, r7
 8013cb8:	47c8      	blx	r9
 8013cba:	3001      	adds	r0, #1
 8013cbc:	d0e6      	beq.n	8013c8c <_printf_common+0xa4>
 8013cbe:	3601      	adds	r6, #1
 8013cc0:	e7d9      	b.n	8013c76 <_printf_common+0x8e>
	...

08013cc4 <_printf_i>:
 8013cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cc8:	7e0f      	ldrb	r7, [r1, #24]
 8013cca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013ccc:	2f78      	cmp	r7, #120	@ 0x78
 8013cce:	4691      	mov	r9, r2
 8013cd0:	4680      	mov	r8, r0
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	469a      	mov	sl, r3
 8013cd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013cda:	d807      	bhi.n	8013cec <_printf_i+0x28>
 8013cdc:	2f62      	cmp	r7, #98	@ 0x62
 8013cde:	d80a      	bhi.n	8013cf6 <_printf_i+0x32>
 8013ce0:	2f00      	cmp	r7, #0
 8013ce2:	f000 80d2 	beq.w	8013e8a <_printf_i+0x1c6>
 8013ce6:	2f58      	cmp	r7, #88	@ 0x58
 8013ce8:	f000 80b9 	beq.w	8013e5e <_printf_i+0x19a>
 8013cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013cf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013cf4:	e03a      	b.n	8013d6c <_printf_i+0xa8>
 8013cf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013cfa:	2b15      	cmp	r3, #21
 8013cfc:	d8f6      	bhi.n	8013cec <_printf_i+0x28>
 8013cfe:	a101      	add	r1, pc, #4	@ (adr r1, 8013d04 <_printf_i+0x40>)
 8013d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013d04:	08013d5d 	.word	0x08013d5d
 8013d08:	08013d71 	.word	0x08013d71
 8013d0c:	08013ced 	.word	0x08013ced
 8013d10:	08013ced 	.word	0x08013ced
 8013d14:	08013ced 	.word	0x08013ced
 8013d18:	08013ced 	.word	0x08013ced
 8013d1c:	08013d71 	.word	0x08013d71
 8013d20:	08013ced 	.word	0x08013ced
 8013d24:	08013ced 	.word	0x08013ced
 8013d28:	08013ced 	.word	0x08013ced
 8013d2c:	08013ced 	.word	0x08013ced
 8013d30:	08013e71 	.word	0x08013e71
 8013d34:	08013d9b 	.word	0x08013d9b
 8013d38:	08013e2b 	.word	0x08013e2b
 8013d3c:	08013ced 	.word	0x08013ced
 8013d40:	08013ced 	.word	0x08013ced
 8013d44:	08013e93 	.word	0x08013e93
 8013d48:	08013ced 	.word	0x08013ced
 8013d4c:	08013d9b 	.word	0x08013d9b
 8013d50:	08013ced 	.word	0x08013ced
 8013d54:	08013ced 	.word	0x08013ced
 8013d58:	08013e33 	.word	0x08013e33
 8013d5c:	6833      	ldr	r3, [r6, #0]
 8013d5e:	1d1a      	adds	r2, r3, #4
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	6032      	str	r2, [r6, #0]
 8013d64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013d68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013d6c:	2301      	movs	r3, #1
 8013d6e:	e09d      	b.n	8013eac <_printf_i+0x1e8>
 8013d70:	6833      	ldr	r3, [r6, #0]
 8013d72:	6820      	ldr	r0, [r4, #0]
 8013d74:	1d19      	adds	r1, r3, #4
 8013d76:	6031      	str	r1, [r6, #0]
 8013d78:	0606      	lsls	r6, r0, #24
 8013d7a:	d501      	bpl.n	8013d80 <_printf_i+0xbc>
 8013d7c:	681d      	ldr	r5, [r3, #0]
 8013d7e:	e003      	b.n	8013d88 <_printf_i+0xc4>
 8013d80:	0645      	lsls	r5, r0, #25
 8013d82:	d5fb      	bpl.n	8013d7c <_printf_i+0xb8>
 8013d84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013d88:	2d00      	cmp	r5, #0
 8013d8a:	da03      	bge.n	8013d94 <_printf_i+0xd0>
 8013d8c:	232d      	movs	r3, #45	@ 0x2d
 8013d8e:	426d      	negs	r5, r5
 8013d90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013d94:	4859      	ldr	r0, [pc, #356]	@ (8013efc <_printf_i+0x238>)
 8013d96:	230a      	movs	r3, #10
 8013d98:	e011      	b.n	8013dbe <_printf_i+0xfa>
 8013d9a:	6821      	ldr	r1, [r4, #0]
 8013d9c:	6833      	ldr	r3, [r6, #0]
 8013d9e:	0608      	lsls	r0, r1, #24
 8013da0:	f853 5b04 	ldr.w	r5, [r3], #4
 8013da4:	d402      	bmi.n	8013dac <_printf_i+0xe8>
 8013da6:	0649      	lsls	r1, r1, #25
 8013da8:	bf48      	it	mi
 8013daa:	b2ad      	uxthmi	r5, r5
 8013dac:	2f6f      	cmp	r7, #111	@ 0x6f
 8013dae:	4853      	ldr	r0, [pc, #332]	@ (8013efc <_printf_i+0x238>)
 8013db0:	6033      	str	r3, [r6, #0]
 8013db2:	bf14      	ite	ne
 8013db4:	230a      	movne	r3, #10
 8013db6:	2308      	moveq	r3, #8
 8013db8:	2100      	movs	r1, #0
 8013dba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013dbe:	6866      	ldr	r6, [r4, #4]
 8013dc0:	60a6      	str	r6, [r4, #8]
 8013dc2:	2e00      	cmp	r6, #0
 8013dc4:	bfa2      	ittt	ge
 8013dc6:	6821      	ldrge	r1, [r4, #0]
 8013dc8:	f021 0104 	bicge.w	r1, r1, #4
 8013dcc:	6021      	strge	r1, [r4, #0]
 8013dce:	b90d      	cbnz	r5, 8013dd4 <_printf_i+0x110>
 8013dd0:	2e00      	cmp	r6, #0
 8013dd2:	d04b      	beq.n	8013e6c <_printf_i+0x1a8>
 8013dd4:	4616      	mov	r6, r2
 8013dd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8013dda:	fb03 5711 	mls	r7, r3, r1, r5
 8013dde:	5dc7      	ldrb	r7, [r0, r7]
 8013de0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013de4:	462f      	mov	r7, r5
 8013de6:	42bb      	cmp	r3, r7
 8013de8:	460d      	mov	r5, r1
 8013dea:	d9f4      	bls.n	8013dd6 <_printf_i+0x112>
 8013dec:	2b08      	cmp	r3, #8
 8013dee:	d10b      	bne.n	8013e08 <_printf_i+0x144>
 8013df0:	6823      	ldr	r3, [r4, #0]
 8013df2:	07df      	lsls	r7, r3, #31
 8013df4:	d508      	bpl.n	8013e08 <_printf_i+0x144>
 8013df6:	6923      	ldr	r3, [r4, #16]
 8013df8:	6861      	ldr	r1, [r4, #4]
 8013dfa:	4299      	cmp	r1, r3
 8013dfc:	bfde      	ittt	le
 8013dfe:	2330      	movle	r3, #48	@ 0x30
 8013e00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013e04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013e08:	1b92      	subs	r2, r2, r6
 8013e0a:	6122      	str	r2, [r4, #16]
 8013e0c:	f8cd a000 	str.w	sl, [sp]
 8013e10:	464b      	mov	r3, r9
 8013e12:	aa03      	add	r2, sp, #12
 8013e14:	4621      	mov	r1, r4
 8013e16:	4640      	mov	r0, r8
 8013e18:	f7ff fee6 	bl	8013be8 <_printf_common>
 8013e1c:	3001      	adds	r0, #1
 8013e1e:	d14a      	bne.n	8013eb6 <_printf_i+0x1f2>
 8013e20:	f04f 30ff 	mov.w	r0, #4294967295
 8013e24:	b004      	add	sp, #16
 8013e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e2a:	6823      	ldr	r3, [r4, #0]
 8013e2c:	f043 0320 	orr.w	r3, r3, #32
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	4833      	ldr	r0, [pc, #204]	@ (8013f00 <_printf_i+0x23c>)
 8013e34:	2778      	movs	r7, #120	@ 0x78
 8013e36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013e3a:	6823      	ldr	r3, [r4, #0]
 8013e3c:	6831      	ldr	r1, [r6, #0]
 8013e3e:	061f      	lsls	r7, r3, #24
 8013e40:	f851 5b04 	ldr.w	r5, [r1], #4
 8013e44:	d402      	bmi.n	8013e4c <_printf_i+0x188>
 8013e46:	065f      	lsls	r7, r3, #25
 8013e48:	bf48      	it	mi
 8013e4a:	b2ad      	uxthmi	r5, r5
 8013e4c:	6031      	str	r1, [r6, #0]
 8013e4e:	07d9      	lsls	r1, r3, #31
 8013e50:	bf44      	itt	mi
 8013e52:	f043 0320 	orrmi.w	r3, r3, #32
 8013e56:	6023      	strmi	r3, [r4, #0]
 8013e58:	b11d      	cbz	r5, 8013e62 <_printf_i+0x19e>
 8013e5a:	2310      	movs	r3, #16
 8013e5c:	e7ac      	b.n	8013db8 <_printf_i+0xf4>
 8013e5e:	4827      	ldr	r0, [pc, #156]	@ (8013efc <_printf_i+0x238>)
 8013e60:	e7e9      	b.n	8013e36 <_printf_i+0x172>
 8013e62:	6823      	ldr	r3, [r4, #0]
 8013e64:	f023 0320 	bic.w	r3, r3, #32
 8013e68:	6023      	str	r3, [r4, #0]
 8013e6a:	e7f6      	b.n	8013e5a <_printf_i+0x196>
 8013e6c:	4616      	mov	r6, r2
 8013e6e:	e7bd      	b.n	8013dec <_printf_i+0x128>
 8013e70:	6833      	ldr	r3, [r6, #0]
 8013e72:	6825      	ldr	r5, [r4, #0]
 8013e74:	6961      	ldr	r1, [r4, #20]
 8013e76:	1d18      	adds	r0, r3, #4
 8013e78:	6030      	str	r0, [r6, #0]
 8013e7a:	062e      	lsls	r6, r5, #24
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	d501      	bpl.n	8013e84 <_printf_i+0x1c0>
 8013e80:	6019      	str	r1, [r3, #0]
 8013e82:	e002      	b.n	8013e8a <_printf_i+0x1c6>
 8013e84:	0668      	lsls	r0, r5, #25
 8013e86:	d5fb      	bpl.n	8013e80 <_printf_i+0x1bc>
 8013e88:	8019      	strh	r1, [r3, #0]
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	6123      	str	r3, [r4, #16]
 8013e8e:	4616      	mov	r6, r2
 8013e90:	e7bc      	b.n	8013e0c <_printf_i+0x148>
 8013e92:	6833      	ldr	r3, [r6, #0]
 8013e94:	1d1a      	adds	r2, r3, #4
 8013e96:	6032      	str	r2, [r6, #0]
 8013e98:	681e      	ldr	r6, [r3, #0]
 8013e9a:	6862      	ldr	r2, [r4, #4]
 8013e9c:	2100      	movs	r1, #0
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	f7ec fa16 	bl	80002d0 <memchr>
 8013ea4:	b108      	cbz	r0, 8013eaa <_printf_i+0x1e6>
 8013ea6:	1b80      	subs	r0, r0, r6
 8013ea8:	6060      	str	r0, [r4, #4]
 8013eaa:	6863      	ldr	r3, [r4, #4]
 8013eac:	6123      	str	r3, [r4, #16]
 8013eae:	2300      	movs	r3, #0
 8013eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013eb4:	e7aa      	b.n	8013e0c <_printf_i+0x148>
 8013eb6:	6923      	ldr	r3, [r4, #16]
 8013eb8:	4632      	mov	r2, r6
 8013eba:	4649      	mov	r1, r9
 8013ebc:	4640      	mov	r0, r8
 8013ebe:	47d0      	blx	sl
 8013ec0:	3001      	adds	r0, #1
 8013ec2:	d0ad      	beq.n	8013e20 <_printf_i+0x15c>
 8013ec4:	6823      	ldr	r3, [r4, #0]
 8013ec6:	079b      	lsls	r3, r3, #30
 8013ec8:	d413      	bmi.n	8013ef2 <_printf_i+0x22e>
 8013eca:	68e0      	ldr	r0, [r4, #12]
 8013ecc:	9b03      	ldr	r3, [sp, #12]
 8013ece:	4298      	cmp	r0, r3
 8013ed0:	bfb8      	it	lt
 8013ed2:	4618      	movlt	r0, r3
 8013ed4:	e7a6      	b.n	8013e24 <_printf_i+0x160>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	4632      	mov	r2, r6
 8013eda:	4649      	mov	r1, r9
 8013edc:	4640      	mov	r0, r8
 8013ede:	47d0      	blx	sl
 8013ee0:	3001      	adds	r0, #1
 8013ee2:	d09d      	beq.n	8013e20 <_printf_i+0x15c>
 8013ee4:	3501      	adds	r5, #1
 8013ee6:	68e3      	ldr	r3, [r4, #12]
 8013ee8:	9903      	ldr	r1, [sp, #12]
 8013eea:	1a5b      	subs	r3, r3, r1
 8013eec:	42ab      	cmp	r3, r5
 8013eee:	dcf2      	bgt.n	8013ed6 <_printf_i+0x212>
 8013ef0:	e7eb      	b.n	8013eca <_printf_i+0x206>
 8013ef2:	2500      	movs	r5, #0
 8013ef4:	f104 0619 	add.w	r6, r4, #25
 8013ef8:	e7f5      	b.n	8013ee6 <_printf_i+0x222>
 8013efa:	bf00      	nop
 8013efc:	0802c68e 	.word	0x0802c68e
 8013f00:	0802c69f 	.word	0x0802c69f

08013f04 <__sflush_r>:
 8013f04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f0c:	0716      	lsls	r6, r2, #28
 8013f0e:	4605      	mov	r5, r0
 8013f10:	460c      	mov	r4, r1
 8013f12:	d454      	bmi.n	8013fbe <__sflush_r+0xba>
 8013f14:	684b      	ldr	r3, [r1, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	dc02      	bgt.n	8013f20 <__sflush_r+0x1c>
 8013f1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	dd48      	ble.n	8013fb2 <__sflush_r+0xae>
 8013f20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013f22:	2e00      	cmp	r6, #0
 8013f24:	d045      	beq.n	8013fb2 <__sflush_r+0xae>
 8013f26:	2300      	movs	r3, #0
 8013f28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013f2c:	682f      	ldr	r7, [r5, #0]
 8013f2e:	6a21      	ldr	r1, [r4, #32]
 8013f30:	602b      	str	r3, [r5, #0]
 8013f32:	d030      	beq.n	8013f96 <__sflush_r+0x92>
 8013f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013f36:	89a3      	ldrh	r3, [r4, #12]
 8013f38:	0759      	lsls	r1, r3, #29
 8013f3a:	d505      	bpl.n	8013f48 <__sflush_r+0x44>
 8013f3c:	6863      	ldr	r3, [r4, #4]
 8013f3e:	1ad2      	subs	r2, r2, r3
 8013f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013f42:	b10b      	cbz	r3, 8013f48 <__sflush_r+0x44>
 8013f44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013f46:	1ad2      	subs	r2, r2, r3
 8013f48:	2300      	movs	r3, #0
 8013f4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013f4c:	6a21      	ldr	r1, [r4, #32]
 8013f4e:	4628      	mov	r0, r5
 8013f50:	47b0      	blx	r6
 8013f52:	1c43      	adds	r3, r0, #1
 8013f54:	89a3      	ldrh	r3, [r4, #12]
 8013f56:	d106      	bne.n	8013f66 <__sflush_r+0x62>
 8013f58:	6829      	ldr	r1, [r5, #0]
 8013f5a:	291d      	cmp	r1, #29
 8013f5c:	d82b      	bhi.n	8013fb6 <__sflush_r+0xb2>
 8013f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8014008 <__sflush_r+0x104>)
 8013f60:	410a      	asrs	r2, r1
 8013f62:	07d6      	lsls	r6, r2, #31
 8013f64:	d427      	bmi.n	8013fb6 <__sflush_r+0xb2>
 8013f66:	2200      	movs	r2, #0
 8013f68:	6062      	str	r2, [r4, #4]
 8013f6a:	04d9      	lsls	r1, r3, #19
 8013f6c:	6922      	ldr	r2, [r4, #16]
 8013f6e:	6022      	str	r2, [r4, #0]
 8013f70:	d504      	bpl.n	8013f7c <__sflush_r+0x78>
 8013f72:	1c42      	adds	r2, r0, #1
 8013f74:	d101      	bne.n	8013f7a <__sflush_r+0x76>
 8013f76:	682b      	ldr	r3, [r5, #0]
 8013f78:	b903      	cbnz	r3, 8013f7c <__sflush_r+0x78>
 8013f7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8013f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013f7e:	602f      	str	r7, [r5, #0]
 8013f80:	b1b9      	cbz	r1, 8013fb2 <__sflush_r+0xae>
 8013f82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f86:	4299      	cmp	r1, r3
 8013f88:	d002      	beq.n	8013f90 <__sflush_r+0x8c>
 8013f8a:	4628      	mov	r0, r5
 8013f8c:	f7ff fbd4 	bl	8013738 <_free_r>
 8013f90:	2300      	movs	r3, #0
 8013f92:	6363      	str	r3, [r4, #52]	@ 0x34
 8013f94:	e00d      	b.n	8013fb2 <__sflush_r+0xae>
 8013f96:	2301      	movs	r3, #1
 8013f98:	4628      	mov	r0, r5
 8013f9a:	47b0      	blx	r6
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	1c50      	adds	r0, r2, #1
 8013fa0:	d1c9      	bne.n	8013f36 <__sflush_r+0x32>
 8013fa2:	682b      	ldr	r3, [r5, #0]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d0c6      	beq.n	8013f36 <__sflush_r+0x32>
 8013fa8:	2b1d      	cmp	r3, #29
 8013faa:	d001      	beq.n	8013fb0 <__sflush_r+0xac>
 8013fac:	2b16      	cmp	r3, #22
 8013fae:	d11e      	bne.n	8013fee <__sflush_r+0xea>
 8013fb0:	602f      	str	r7, [r5, #0]
 8013fb2:	2000      	movs	r0, #0
 8013fb4:	e022      	b.n	8013ffc <__sflush_r+0xf8>
 8013fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013fba:	b21b      	sxth	r3, r3
 8013fbc:	e01b      	b.n	8013ff6 <__sflush_r+0xf2>
 8013fbe:	690f      	ldr	r7, [r1, #16]
 8013fc0:	2f00      	cmp	r7, #0
 8013fc2:	d0f6      	beq.n	8013fb2 <__sflush_r+0xae>
 8013fc4:	0793      	lsls	r3, r2, #30
 8013fc6:	680e      	ldr	r6, [r1, #0]
 8013fc8:	bf08      	it	eq
 8013fca:	694b      	ldreq	r3, [r1, #20]
 8013fcc:	600f      	str	r7, [r1, #0]
 8013fce:	bf18      	it	ne
 8013fd0:	2300      	movne	r3, #0
 8013fd2:	eba6 0807 	sub.w	r8, r6, r7
 8013fd6:	608b      	str	r3, [r1, #8]
 8013fd8:	f1b8 0f00 	cmp.w	r8, #0
 8013fdc:	dde9      	ble.n	8013fb2 <__sflush_r+0xae>
 8013fde:	6a21      	ldr	r1, [r4, #32]
 8013fe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013fe2:	4643      	mov	r3, r8
 8013fe4:	463a      	mov	r2, r7
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	47b0      	blx	r6
 8013fea:	2800      	cmp	r0, #0
 8013fec:	dc08      	bgt.n	8014000 <__sflush_r+0xfc>
 8013fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ff6:	81a3      	strh	r3, [r4, #12]
 8013ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8013ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014000:	4407      	add	r7, r0
 8014002:	eba8 0800 	sub.w	r8, r8, r0
 8014006:	e7e7      	b.n	8013fd8 <__sflush_r+0xd4>
 8014008:	dfbffffe 	.word	0xdfbffffe

0801400c <_fflush_r>:
 801400c:	b538      	push	{r3, r4, r5, lr}
 801400e:	690b      	ldr	r3, [r1, #16]
 8014010:	4605      	mov	r5, r0
 8014012:	460c      	mov	r4, r1
 8014014:	b913      	cbnz	r3, 801401c <_fflush_r+0x10>
 8014016:	2500      	movs	r5, #0
 8014018:	4628      	mov	r0, r5
 801401a:	bd38      	pop	{r3, r4, r5, pc}
 801401c:	b118      	cbz	r0, 8014026 <_fflush_r+0x1a>
 801401e:	6a03      	ldr	r3, [r0, #32]
 8014020:	b90b      	cbnz	r3, 8014026 <_fflush_r+0x1a>
 8014022:	f7ff f99b 	bl	801335c <__sinit>
 8014026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d0f3      	beq.n	8014016 <_fflush_r+0xa>
 801402e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014030:	07d0      	lsls	r0, r2, #31
 8014032:	d404      	bmi.n	801403e <_fflush_r+0x32>
 8014034:	0599      	lsls	r1, r3, #22
 8014036:	d402      	bmi.n	801403e <_fflush_r+0x32>
 8014038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801403a:	f7ff fb4e 	bl	80136da <__retarget_lock_acquire_recursive>
 801403e:	4628      	mov	r0, r5
 8014040:	4621      	mov	r1, r4
 8014042:	f7ff ff5f 	bl	8013f04 <__sflush_r>
 8014046:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014048:	07da      	lsls	r2, r3, #31
 801404a:	4605      	mov	r5, r0
 801404c:	d4e4      	bmi.n	8014018 <_fflush_r+0xc>
 801404e:	89a3      	ldrh	r3, [r4, #12]
 8014050:	059b      	lsls	r3, r3, #22
 8014052:	d4e1      	bmi.n	8014018 <_fflush_r+0xc>
 8014054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014056:	f7ff fb41 	bl	80136dc <__retarget_lock_release_recursive>
 801405a:	e7dd      	b.n	8014018 <_fflush_r+0xc>

0801405c <fiprintf>:
 801405c:	b40e      	push	{r1, r2, r3}
 801405e:	b503      	push	{r0, r1, lr}
 8014060:	4601      	mov	r1, r0
 8014062:	ab03      	add	r3, sp, #12
 8014064:	4805      	ldr	r0, [pc, #20]	@ (801407c <fiprintf+0x20>)
 8014066:	f853 2b04 	ldr.w	r2, [r3], #4
 801406a:	6800      	ldr	r0, [r0, #0]
 801406c:	9301      	str	r3, [sp, #4]
 801406e:	f000 f875 	bl	801415c <_vfiprintf_r>
 8014072:	b002      	add	sp, #8
 8014074:	f85d eb04 	ldr.w	lr, [sp], #4
 8014078:	b003      	add	sp, #12
 801407a:	4770      	bx	lr
 801407c:	20000040 	.word	0x20000040

08014080 <_sbrk_r>:
 8014080:	b538      	push	{r3, r4, r5, lr}
 8014082:	4d06      	ldr	r5, [pc, #24]	@ (801409c <_sbrk_r+0x1c>)
 8014084:	2300      	movs	r3, #0
 8014086:	4604      	mov	r4, r0
 8014088:	4608      	mov	r0, r1
 801408a:	602b      	str	r3, [r5, #0]
 801408c:	f7ee fab8 	bl	8002600 <_sbrk>
 8014090:	1c43      	adds	r3, r0, #1
 8014092:	d102      	bne.n	801409a <_sbrk_r+0x1a>
 8014094:	682b      	ldr	r3, [r5, #0]
 8014096:	b103      	cbz	r3, 801409a <_sbrk_r+0x1a>
 8014098:	6023      	str	r3, [r4, #0]
 801409a:	bd38      	pop	{r3, r4, r5, pc}
 801409c:	200164a4 	.word	0x200164a4

080140a0 <abort>:
 80140a0:	b508      	push	{r3, lr}
 80140a2:	2006      	movs	r0, #6
 80140a4:	f000 fa2e 	bl	8014504 <raise>
 80140a8:	2001      	movs	r0, #1
 80140aa:	f7ee fa31 	bl	8002510 <_exit>

080140ae <_realloc_r>:
 80140ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b2:	4680      	mov	r8, r0
 80140b4:	4615      	mov	r5, r2
 80140b6:	460c      	mov	r4, r1
 80140b8:	b921      	cbnz	r1, 80140c4 <_realloc_r+0x16>
 80140ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140be:	4611      	mov	r1, r2
 80140c0:	f7ff bbae 	b.w	8013820 <_malloc_r>
 80140c4:	b92a      	cbnz	r2, 80140d2 <_realloc_r+0x24>
 80140c6:	f7ff fb37 	bl	8013738 <_free_r>
 80140ca:	2400      	movs	r4, #0
 80140cc:	4620      	mov	r0, r4
 80140ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d2:	f000 fa33 	bl	801453c <_malloc_usable_size_r>
 80140d6:	4285      	cmp	r5, r0
 80140d8:	4606      	mov	r6, r0
 80140da:	d802      	bhi.n	80140e2 <_realloc_r+0x34>
 80140dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80140e0:	d8f4      	bhi.n	80140cc <_realloc_r+0x1e>
 80140e2:	4629      	mov	r1, r5
 80140e4:	4640      	mov	r0, r8
 80140e6:	f7ff fb9b 	bl	8013820 <_malloc_r>
 80140ea:	4607      	mov	r7, r0
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d0ec      	beq.n	80140ca <_realloc_r+0x1c>
 80140f0:	42b5      	cmp	r5, r6
 80140f2:	462a      	mov	r2, r5
 80140f4:	4621      	mov	r1, r4
 80140f6:	bf28      	it	cs
 80140f8:	4632      	movcs	r2, r6
 80140fa:	f7ff faf0 	bl	80136de <memcpy>
 80140fe:	4621      	mov	r1, r4
 8014100:	4640      	mov	r0, r8
 8014102:	f7ff fb19 	bl	8013738 <_free_r>
 8014106:	463c      	mov	r4, r7
 8014108:	e7e0      	b.n	80140cc <_realloc_r+0x1e>

0801410a <__sfputc_r>:
 801410a:	6893      	ldr	r3, [r2, #8]
 801410c:	3b01      	subs	r3, #1
 801410e:	2b00      	cmp	r3, #0
 8014110:	b410      	push	{r4}
 8014112:	6093      	str	r3, [r2, #8]
 8014114:	da08      	bge.n	8014128 <__sfputc_r+0x1e>
 8014116:	6994      	ldr	r4, [r2, #24]
 8014118:	42a3      	cmp	r3, r4
 801411a:	db01      	blt.n	8014120 <__sfputc_r+0x16>
 801411c:	290a      	cmp	r1, #10
 801411e:	d103      	bne.n	8014128 <__sfputc_r+0x1e>
 8014120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014124:	f000 b932 	b.w	801438c <__swbuf_r>
 8014128:	6813      	ldr	r3, [r2, #0]
 801412a:	1c58      	adds	r0, r3, #1
 801412c:	6010      	str	r0, [r2, #0]
 801412e:	7019      	strb	r1, [r3, #0]
 8014130:	4608      	mov	r0, r1
 8014132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014136:	4770      	bx	lr

08014138 <__sfputs_r>:
 8014138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801413a:	4606      	mov	r6, r0
 801413c:	460f      	mov	r7, r1
 801413e:	4614      	mov	r4, r2
 8014140:	18d5      	adds	r5, r2, r3
 8014142:	42ac      	cmp	r4, r5
 8014144:	d101      	bne.n	801414a <__sfputs_r+0x12>
 8014146:	2000      	movs	r0, #0
 8014148:	e007      	b.n	801415a <__sfputs_r+0x22>
 801414a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801414e:	463a      	mov	r2, r7
 8014150:	4630      	mov	r0, r6
 8014152:	f7ff ffda 	bl	801410a <__sfputc_r>
 8014156:	1c43      	adds	r3, r0, #1
 8014158:	d1f3      	bne.n	8014142 <__sfputs_r+0xa>
 801415a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801415c <_vfiprintf_r>:
 801415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014160:	460d      	mov	r5, r1
 8014162:	b09d      	sub	sp, #116	@ 0x74
 8014164:	4614      	mov	r4, r2
 8014166:	4698      	mov	r8, r3
 8014168:	4606      	mov	r6, r0
 801416a:	b118      	cbz	r0, 8014174 <_vfiprintf_r+0x18>
 801416c:	6a03      	ldr	r3, [r0, #32]
 801416e:	b90b      	cbnz	r3, 8014174 <_vfiprintf_r+0x18>
 8014170:	f7ff f8f4 	bl	801335c <__sinit>
 8014174:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014176:	07d9      	lsls	r1, r3, #31
 8014178:	d405      	bmi.n	8014186 <_vfiprintf_r+0x2a>
 801417a:	89ab      	ldrh	r3, [r5, #12]
 801417c:	059a      	lsls	r2, r3, #22
 801417e:	d402      	bmi.n	8014186 <_vfiprintf_r+0x2a>
 8014180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014182:	f7ff faaa 	bl	80136da <__retarget_lock_acquire_recursive>
 8014186:	89ab      	ldrh	r3, [r5, #12]
 8014188:	071b      	lsls	r3, r3, #28
 801418a:	d501      	bpl.n	8014190 <_vfiprintf_r+0x34>
 801418c:	692b      	ldr	r3, [r5, #16]
 801418e:	b99b      	cbnz	r3, 80141b8 <_vfiprintf_r+0x5c>
 8014190:	4629      	mov	r1, r5
 8014192:	4630      	mov	r0, r6
 8014194:	f000 f938 	bl	8014408 <__swsetup_r>
 8014198:	b170      	cbz	r0, 80141b8 <_vfiprintf_r+0x5c>
 801419a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801419c:	07dc      	lsls	r4, r3, #31
 801419e:	d504      	bpl.n	80141aa <_vfiprintf_r+0x4e>
 80141a0:	f04f 30ff 	mov.w	r0, #4294967295
 80141a4:	b01d      	add	sp, #116	@ 0x74
 80141a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141aa:	89ab      	ldrh	r3, [r5, #12]
 80141ac:	0598      	lsls	r0, r3, #22
 80141ae:	d4f7      	bmi.n	80141a0 <_vfiprintf_r+0x44>
 80141b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141b2:	f7ff fa93 	bl	80136dc <__retarget_lock_release_recursive>
 80141b6:	e7f3      	b.n	80141a0 <_vfiprintf_r+0x44>
 80141b8:	2300      	movs	r3, #0
 80141ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80141bc:	2320      	movs	r3, #32
 80141be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80141c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80141c6:	2330      	movs	r3, #48	@ 0x30
 80141c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014378 <_vfiprintf_r+0x21c>
 80141cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80141d0:	f04f 0901 	mov.w	r9, #1
 80141d4:	4623      	mov	r3, r4
 80141d6:	469a      	mov	sl, r3
 80141d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80141dc:	b10a      	cbz	r2, 80141e2 <_vfiprintf_r+0x86>
 80141de:	2a25      	cmp	r2, #37	@ 0x25
 80141e0:	d1f9      	bne.n	80141d6 <_vfiprintf_r+0x7a>
 80141e2:	ebba 0b04 	subs.w	fp, sl, r4
 80141e6:	d00b      	beq.n	8014200 <_vfiprintf_r+0xa4>
 80141e8:	465b      	mov	r3, fp
 80141ea:	4622      	mov	r2, r4
 80141ec:	4629      	mov	r1, r5
 80141ee:	4630      	mov	r0, r6
 80141f0:	f7ff ffa2 	bl	8014138 <__sfputs_r>
 80141f4:	3001      	adds	r0, #1
 80141f6:	f000 80a7 	beq.w	8014348 <_vfiprintf_r+0x1ec>
 80141fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80141fc:	445a      	add	r2, fp
 80141fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8014200:	f89a 3000 	ldrb.w	r3, [sl]
 8014204:	2b00      	cmp	r3, #0
 8014206:	f000 809f 	beq.w	8014348 <_vfiprintf_r+0x1ec>
 801420a:	2300      	movs	r3, #0
 801420c:	f04f 32ff 	mov.w	r2, #4294967295
 8014210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014214:	f10a 0a01 	add.w	sl, sl, #1
 8014218:	9304      	str	r3, [sp, #16]
 801421a:	9307      	str	r3, [sp, #28]
 801421c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014220:	931a      	str	r3, [sp, #104]	@ 0x68
 8014222:	4654      	mov	r4, sl
 8014224:	2205      	movs	r2, #5
 8014226:	f814 1b01 	ldrb.w	r1, [r4], #1
 801422a:	4853      	ldr	r0, [pc, #332]	@ (8014378 <_vfiprintf_r+0x21c>)
 801422c:	f7ec f850 	bl	80002d0 <memchr>
 8014230:	9a04      	ldr	r2, [sp, #16]
 8014232:	b9d8      	cbnz	r0, 801426c <_vfiprintf_r+0x110>
 8014234:	06d1      	lsls	r1, r2, #27
 8014236:	bf44      	itt	mi
 8014238:	2320      	movmi	r3, #32
 801423a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801423e:	0713      	lsls	r3, r2, #28
 8014240:	bf44      	itt	mi
 8014242:	232b      	movmi	r3, #43	@ 0x2b
 8014244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014248:	f89a 3000 	ldrb.w	r3, [sl]
 801424c:	2b2a      	cmp	r3, #42	@ 0x2a
 801424e:	d015      	beq.n	801427c <_vfiprintf_r+0x120>
 8014250:	9a07      	ldr	r2, [sp, #28]
 8014252:	4654      	mov	r4, sl
 8014254:	2000      	movs	r0, #0
 8014256:	f04f 0c0a 	mov.w	ip, #10
 801425a:	4621      	mov	r1, r4
 801425c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014260:	3b30      	subs	r3, #48	@ 0x30
 8014262:	2b09      	cmp	r3, #9
 8014264:	d94b      	bls.n	80142fe <_vfiprintf_r+0x1a2>
 8014266:	b1b0      	cbz	r0, 8014296 <_vfiprintf_r+0x13a>
 8014268:	9207      	str	r2, [sp, #28]
 801426a:	e014      	b.n	8014296 <_vfiprintf_r+0x13a>
 801426c:	eba0 0308 	sub.w	r3, r0, r8
 8014270:	fa09 f303 	lsl.w	r3, r9, r3
 8014274:	4313      	orrs	r3, r2
 8014276:	9304      	str	r3, [sp, #16]
 8014278:	46a2      	mov	sl, r4
 801427a:	e7d2      	b.n	8014222 <_vfiprintf_r+0xc6>
 801427c:	9b03      	ldr	r3, [sp, #12]
 801427e:	1d19      	adds	r1, r3, #4
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	9103      	str	r1, [sp, #12]
 8014284:	2b00      	cmp	r3, #0
 8014286:	bfbb      	ittet	lt
 8014288:	425b      	neglt	r3, r3
 801428a:	f042 0202 	orrlt.w	r2, r2, #2
 801428e:	9307      	strge	r3, [sp, #28]
 8014290:	9307      	strlt	r3, [sp, #28]
 8014292:	bfb8      	it	lt
 8014294:	9204      	strlt	r2, [sp, #16]
 8014296:	7823      	ldrb	r3, [r4, #0]
 8014298:	2b2e      	cmp	r3, #46	@ 0x2e
 801429a:	d10a      	bne.n	80142b2 <_vfiprintf_r+0x156>
 801429c:	7863      	ldrb	r3, [r4, #1]
 801429e:	2b2a      	cmp	r3, #42	@ 0x2a
 80142a0:	d132      	bne.n	8014308 <_vfiprintf_r+0x1ac>
 80142a2:	9b03      	ldr	r3, [sp, #12]
 80142a4:	1d1a      	adds	r2, r3, #4
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	9203      	str	r2, [sp, #12]
 80142aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80142ae:	3402      	adds	r4, #2
 80142b0:	9305      	str	r3, [sp, #20]
 80142b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014388 <_vfiprintf_r+0x22c>
 80142b6:	7821      	ldrb	r1, [r4, #0]
 80142b8:	2203      	movs	r2, #3
 80142ba:	4650      	mov	r0, sl
 80142bc:	f7ec f808 	bl	80002d0 <memchr>
 80142c0:	b138      	cbz	r0, 80142d2 <_vfiprintf_r+0x176>
 80142c2:	9b04      	ldr	r3, [sp, #16]
 80142c4:	eba0 000a 	sub.w	r0, r0, sl
 80142c8:	2240      	movs	r2, #64	@ 0x40
 80142ca:	4082      	lsls	r2, r0
 80142cc:	4313      	orrs	r3, r2
 80142ce:	3401      	adds	r4, #1
 80142d0:	9304      	str	r3, [sp, #16]
 80142d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142d6:	4829      	ldr	r0, [pc, #164]	@ (801437c <_vfiprintf_r+0x220>)
 80142d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80142dc:	2206      	movs	r2, #6
 80142de:	f7eb fff7 	bl	80002d0 <memchr>
 80142e2:	2800      	cmp	r0, #0
 80142e4:	d03f      	beq.n	8014366 <_vfiprintf_r+0x20a>
 80142e6:	4b26      	ldr	r3, [pc, #152]	@ (8014380 <_vfiprintf_r+0x224>)
 80142e8:	bb1b      	cbnz	r3, 8014332 <_vfiprintf_r+0x1d6>
 80142ea:	9b03      	ldr	r3, [sp, #12]
 80142ec:	3307      	adds	r3, #7
 80142ee:	f023 0307 	bic.w	r3, r3, #7
 80142f2:	3308      	adds	r3, #8
 80142f4:	9303      	str	r3, [sp, #12]
 80142f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142f8:	443b      	add	r3, r7
 80142fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80142fc:	e76a      	b.n	80141d4 <_vfiprintf_r+0x78>
 80142fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8014302:	460c      	mov	r4, r1
 8014304:	2001      	movs	r0, #1
 8014306:	e7a8      	b.n	801425a <_vfiprintf_r+0xfe>
 8014308:	2300      	movs	r3, #0
 801430a:	3401      	adds	r4, #1
 801430c:	9305      	str	r3, [sp, #20]
 801430e:	4619      	mov	r1, r3
 8014310:	f04f 0c0a 	mov.w	ip, #10
 8014314:	4620      	mov	r0, r4
 8014316:	f810 2b01 	ldrb.w	r2, [r0], #1
 801431a:	3a30      	subs	r2, #48	@ 0x30
 801431c:	2a09      	cmp	r2, #9
 801431e:	d903      	bls.n	8014328 <_vfiprintf_r+0x1cc>
 8014320:	2b00      	cmp	r3, #0
 8014322:	d0c6      	beq.n	80142b2 <_vfiprintf_r+0x156>
 8014324:	9105      	str	r1, [sp, #20]
 8014326:	e7c4      	b.n	80142b2 <_vfiprintf_r+0x156>
 8014328:	fb0c 2101 	mla	r1, ip, r1, r2
 801432c:	4604      	mov	r4, r0
 801432e:	2301      	movs	r3, #1
 8014330:	e7f0      	b.n	8014314 <_vfiprintf_r+0x1b8>
 8014332:	ab03      	add	r3, sp, #12
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	462a      	mov	r2, r5
 8014338:	4b12      	ldr	r3, [pc, #72]	@ (8014384 <_vfiprintf_r+0x228>)
 801433a:	a904      	add	r1, sp, #16
 801433c:	4630      	mov	r0, r6
 801433e:	f3af 8000 	nop.w
 8014342:	4607      	mov	r7, r0
 8014344:	1c78      	adds	r0, r7, #1
 8014346:	d1d6      	bne.n	80142f6 <_vfiprintf_r+0x19a>
 8014348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801434a:	07d9      	lsls	r1, r3, #31
 801434c:	d405      	bmi.n	801435a <_vfiprintf_r+0x1fe>
 801434e:	89ab      	ldrh	r3, [r5, #12]
 8014350:	059a      	lsls	r2, r3, #22
 8014352:	d402      	bmi.n	801435a <_vfiprintf_r+0x1fe>
 8014354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014356:	f7ff f9c1 	bl	80136dc <__retarget_lock_release_recursive>
 801435a:	89ab      	ldrh	r3, [r5, #12]
 801435c:	065b      	lsls	r3, r3, #25
 801435e:	f53f af1f 	bmi.w	80141a0 <_vfiprintf_r+0x44>
 8014362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014364:	e71e      	b.n	80141a4 <_vfiprintf_r+0x48>
 8014366:	ab03      	add	r3, sp, #12
 8014368:	9300      	str	r3, [sp, #0]
 801436a:	462a      	mov	r2, r5
 801436c:	4b05      	ldr	r3, [pc, #20]	@ (8014384 <_vfiprintf_r+0x228>)
 801436e:	a904      	add	r1, sp, #16
 8014370:	4630      	mov	r0, r6
 8014372:	f7ff fca7 	bl	8013cc4 <_printf_i>
 8014376:	e7e4      	b.n	8014342 <_vfiprintf_r+0x1e6>
 8014378:	0802c67d 	.word	0x0802c67d
 801437c:	0802c687 	.word	0x0802c687
 8014380:	00000000 	.word	0x00000000
 8014384:	08014139 	.word	0x08014139
 8014388:	0802c683 	.word	0x0802c683

0801438c <__swbuf_r>:
 801438c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801438e:	460e      	mov	r6, r1
 8014390:	4614      	mov	r4, r2
 8014392:	4605      	mov	r5, r0
 8014394:	b118      	cbz	r0, 801439e <__swbuf_r+0x12>
 8014396:	6a03      	ldr	r3, [r0, #32]
 8014398:	b90b      	cbnz	r3, 801439e <__swbuf_r+0x12>
 801439a:	f7fe ffdf 	bl	801335c <__sinit>
 801439e:	69a3      	ldr	r3, [r4, #24]
 80143a0:	60a3      	str	r3, [r4, #8]
 80143a2:	89a3      	ldrh	r3, [r4, #12]
 80143a4:	071a      	lsls	r2, r3, #28
 80143a6:	d501      	bpl.n	80143ac <__swbuf_r+0x20>
 80143a8:	6923      	ldr	r3, [r4, #16]
 80143aa:	b943      	cbnz	r3, 80143be <__swbuf_r+0x32>
 80143ac:	4621      	mov	r1, r4
 80143ae:	4628      	mov	r0, r5
 80143b0:	f000 f82a 	bl	8014408 <__swsetup_r>
 80143b4:	b118      	cbz	r0, 80143be <__swbuf_r+0x32>
 80143b6:	f04f 37ff 	mov.w	r7, #4294967295
 80143ba:	4638      	mov	r0, r7
 80143bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143be:	6823      	ldr	r3, [r4, #0]
 80143c0:	6922      	ldr	r2, [r4, #16]
 80143c2:	1a98      	subs	r0, r3, r2
 80143c4:	6963      	ldr	r3, [r4, #20]
 80143c6:	b2f6      	uxtb	r6, r6
 80143c8:	4283      	cmp	r3, r0
 80143ca:	4637      	mov	r7, r6
 80143cc:	dc05      	bgt.n	80143da <__swbuf_r+0x4e>
 80143ce:	4621      	mov	r1, r4
 80143d0:	4628      	mov	r0, r5
 80143d2:	f7ff fe1b 	bl	801400c <_fflush_r>
 80143d6:	2800      	cmp	r0, #0
 80143d8:	d1ed      	bne.n	80143b6 <__swbuf_r+0x2a>
 80143da:	68a3      	ldr	r3, [r4, #8]
 80143dc:	3b01      	subs	r3, #1
 80143de:	60a3      	str	r3, [r4, #8]
 80143e0:	6823      	ldr	r3, [r4, #0]
 80143e2:	1c5a      	adds	r2, r3, #1
 80143e4:	6022      	str	r2, [r4, #0]
 80143e6:	701e      	strb	r6, [r3, #0]
 80143e8:	6962      	ldr	r2, [r4, #20]
 80143ea:	1c43      	adds	r3, r0, #1
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d004      	beq.n	80143fa <__swbuf_r+0x6e>
 80143f0:	89a3      	ldrh	r3, [r4, #12]
 80143f2:	07db      	lsls	r3, r3, #31
 80143f4:	d5e1      	bpl.n	80143ba <__swbuf_r+0x2e>
 80143f6:	2e0a      	cmp	r6, #10
 80143f8:	d1df      	bne.n	80143ba <__swbuf_r+0x2e>
 80143fa:	4621      	mov	r1, r4
 80143fc:	4628      	mov	r0, r5
 80143fe:	f7ff fe05 	bl	801400c <_fflush_r>
 8014402:	2800      	cmp	r0, #0
 8014404:	d0d9      	beq.n	80143ba <__swbuf_r+0x2e>
 8014406:	e7d6      	b.n	80143b6 <__swbuf_r+0x2a>

08014408 <__swsetup_r>:
 8014408:	b538      	push	{r3, r4, r5, lr}
 801440a:	4b29      	ldr	r3, [pc, #164]	@ (80144b0 <__swsetup_r+0xa8>)
 801440c:	4605      	mov	r5, r0
 801440e:	6818      	ldr	r0, [r3, #0]
 8014410:	460c      	mov	r4, r1
 8014412:	b118      	cbz	r0, 801441c <__swsetup_r+0x14>
 8014414:	6a03      	ldr	r3, [r0, #32]
 8014416:	b90b      	cbnz	r3, 801441c <__swsetup_r+0x14>
 8014418:	f7fe ffa0 	bl	801335c <__sinit>
 801441c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014420:	0719      	lsls	r1, r3, #28
 8014422:	d422      	bmi.n	801446a <__swsetup_r+0x62>
 8014424:	06da      	lsls	r2, r3, #27
 8014426:	d407      	bmi.n	8014438 <__swsetup_r+0x30>
 8014428:	2209      	movs	r2, #9
 801442a:	602a      	str	r2, [r5, #0]
 801442c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014430:	81a3      	strh	r3, [r4, #12]
 8014432:	f04f 30ff 	mov.w	r0, #4294967295
 8014436:	e033      	b.n	80144a0 <__swsetup_r+0x98>
 8014438:	0758      	lsls	r0, r3, #29
 801443a:	d512      	bpl.n	8014462 <__swsetup_r+0x5a>
 801443c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801443e:	b141      	cbz	r1, 8014452 <__swsetup_r+0x4a>
 8014440:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014444:	4299      	cmp	r1, r3
 8014446:	d002      	beq.n	801444e <__swsetup_r+0x46>
 8014448:	4628      	mov	r0, r5
 801444a:	f7ff f975 	bl	8013738 <_free_r>
 801444e:	2300      	movs	r3, #0
 8014450:	6363      	str	r3, [r4, #52]	@ 0x34
 8014452:	89a3      	ldrh	r3, [r4, #12]
 8014454:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014458:	81a3      	strh	r3, [r4, #12]
 801445a:	2300      	movs	r3, #0
 801445c:	6063      	str	r3, [r4, #4]
 801445e:	6923      	ldr	r3, [r4, #16]
 8014460:	6023      	str	r3, [r4, #0]
 8014462:	89a3      	ldrh	r3, [r4, #12]
 8014464:	f043 0308 	orr.w	r3, r3, #8
 8014468:	81a3      	strh	r3, [r4, #12]
 801446a:	6923      	ldr	r3, [r4, #16]
 801446c:	b94b      	cbnz	r3, 8014482 <__swsetup_r+0x7a>
 801446e:	89a3      	ldrh	r3, [r4, #12]
 8014470:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014478:	d003      	beq.n	8014482 <__swsetup_r+0x7a>
 801447a:	4621      	mov	r1, r4
 801447c:	4628      	mov	r0, r5
 801447e:	f000 f88b 	bl	8014598 <__smakebuf_r>
 8014482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014486:	f013 0201 	ands.w	r2, r3, #1
 801448a:	d00a      	beq.n	80144a2 <__swsetup_r+0x9a>
 801448c:	2200      	movs	r2, #0
 801448e:	60a2      	str	r2, [r4, #8]
 8014490:	6962      	ldr	r2, [r4, #20]
 8014492:	4252      	negs	r2, r2
 8014494:	61a2      	str	r2, [r4, #24]
 8014496:	6922      	ldr	r2, [r4, #16]
 8014498:	b942      	cbnz	r2, 80144ac <__swsetup_r+0xa4>
 801449a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801449e:	d1c5      	bne.n	801442c <__swsetup_r+0x24>
 80144a0:	bd38      	pop	{r3, r4, r5, pc}
 80144a2:	0799      	lsls	r1, r3, #30
 80144a4:	bf58      	it	pl
 80144a6:	6962      	ldrpl	r2, [r4, #20]
 80144a8:	60a2      	str	r2, [r4, #8]
 80144aa:	e7f4      	b.n	8014496 <__swsetup_r+0x8e>
 80144ac:	2000      	movs	r0, #0
 80144ae:	e7f7      	b.n	80144a0 <__swsetup_r+0x98>
 80144b0:	20000040 	.word	0x20000040

080144b4 <_raise_r>:
 80144b4:	291f      	cmp	r1, #31
 80144b6:	b538      	push	{r3, r4, r5, lr}
 80144b8:	4605      	mov	r5, r0
 80144ba:	460c      	mov	r4, r1
 80144bc:	d904      	bls.n	80144c8 <_raise_r+0x14>
 80144be:	2316      	movs	r3, #22
 80144c0:	6003      	str	r3, [r0, #0]
 80144c2:	f04f 30ff 	mov.w	r0, #4294967295
 80144c6:	bd38      	pop	{r3, r4, r5, pc}
 80144c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80144ca:	b112      	cbz	r2, 80144d2 <_raise_r+0x1e>
 80144cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80144d0:	b94b      	cbnz	r3, 80144e6 <_raise_r+0x32>
 80144d2:	4628      	mov	r0, r5
 80144d4:	f000 f830 	bl	8014538 <_getpid_r>
 80144d8:	4622      	mov	r2, r4
 80144da:	4601      	mov	r1, r0
 80144dc:	4628      	mov	r0, r5
 80144de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80144e2:	f000 b817 	b.w	8014514 <_kill_r>
 80144e6:	2b01      	cmp	r3, #1
 80144e8:	d00a      	beq.n	8014500 <_raise_r+0x4c>
 80144ea:	1c59      	adds	r1, r3, #1
 80144ec:	d103      	bne.n	80144f6 <_raise_r+0x42>
 80144ee:	2316      	movs	r3, #22
 80144f0:	6003      	str	r3, [r0, #0]
 80144f2:	2001      	movs	r0, #1
 80144f4:	e7e7      	b.n	80144c6 <_raise_r+0x12>
 80144f6:	2100      	movs	r1, #0
 80144f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80144fc:	4620      	mov	r0, r4
 80144fe:	4798      	blx	r3
 8014500:	2000      	movs	r0, #0
 8014502:	e7e0      	b.n	80144c6 <_raise_r+0x12>

08014504 <raise>:
 8014504:	4b02      	ldr	r3, [pc, #8]	@ (8014510 <raise+0xc>)
 8014506:	4601      	mov	r1, r0
 8014508:	6818      	ldr	r0, [r3, #0]
 801450a:	f7ff bfd3 	b.w	80144b4 <_raise_r>
 801450e:	bf00      	nop
 8014510:	20000040 	.word	0x20000040

08014514 <_kill_r>:
 8014514:	b538      	push	{r3, r4, r5, lr}
 8014516:	4d07      	ldr	r5, [pc, #28]	@ (8014534 <_kill_r+0x20>)
 8014518:	2300      	movs	r3, #0
 801451a:	4604      	mov	r4, r0
 801451c:	4608      	mov	r0, r1
 801451e:	4611      	mov	r1, r2
 8014520:	602b      	str	r3, [r5, #0]
 8014522:	f7ed ffe5 	bl	80024f0 <_kill>
 8014526:	1c43      	adds	r3, r0, #1
 8014528:	d102      	bne.n	8014530 <_kill_r+0x1c>
 801452a:	682b      	ldr	r3, [r5, #0]
 801452c:	b103      	cbz	r3, 8014530 <_kill_r+0x1c>
 801452e:	6023      	str	r3, [r4, #0]
 8014530:	bd38      	pop	{r3, r4, r5, pc}
 8014532:	bf00      	nop
 8014534:	200164a4 	.word	0x200164a4

08014538 <_getpid_r>:
 8014538:	f7ed bfd2 	b.w	80024e0 <_getpid>

0801453c <_malloc_usable_size_r>:
 801453c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014540:	1f18      	subs	r0, r3, #4
 8014542:	2b00      	cmp	r3, #0
 8014544:	bfbc      	itt	lt
 8014546:	580b      	ldrlt	r3, [r1, r0]
 8014548:	18c0      	addlt	r0, r0, r3
 801454a:	4770      	bx	lr

0801454c <__swhatbuf_r>:
 801454c:	b570      	push	{r4, r5, r6, lr}
 801454e:	460c      	mov	r4, r1
 8014550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014554:	2900      	cmp	r1, #0
 8014556:	b096      	sub	sp, #88	@ 0x58
 8014558:	4615      	mov	r5, r2
 801455a:	461e      	mov	r6, r3
 801455c:	da0d      	bge.n	801457a <__swhatbuf_r+0x2e>
 801455e:	89a3      	ldrh	r3, [r4, #12]
 8014560:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014564:	f04f 0100 	mov.w	r1, #0
 8014568:	bf14      	ite	ne
 801456a:	2340      	movne	r3, #64	@ 0x40
 801456c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014570:	2000      	movs	r0, #0
 8014572:	6031      	str	r1, [r6, #0]
 8014574:	602b      	str	r3, [r5, #0]
 8014576:	b016      	add	sp, #88	@ 0x58
 8014578:	bd70      	pop	{r4, r5, r6, pc}
 801457a:	466a      	mov	r2, sp
 801457c:	f000 f848 	bl	8014610 <_fstat_r>
 8014580:	2800      	cmp	r0, #0
 8014582:	dbec      	blt.n	801455e <__swhatbuf_r+0x12>
 8014584:	9901      	ldr	r1, [sp, #4]
 8014586:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801458a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801458e:	4259      	negs	r1, r3
 8014590:	4159      	adcs	r1, r3
 8014592:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014596:	e7eb      	b.n	8014570 <__swhatbuf_r+0x24>

08014598 <__smakebuf_r>:
 8014598:	898b      	ldrh	r3, [r1, #12]
 801459a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801459c:	079d      	lsls	r5, r3, #30
 801459e:	4606      	mov	r6, r0
 80145a0:	460c      	mov	r4, r1
 80145a2:	d507      	bpl.n	80145b4 <__smakebuf_r+0x1c>
 80145a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80145a8:	6023      	str	r3, [r4, #0]
 80145aa:	6123      	str	r3, [r4, #16]
 80145ac:	2301      	movs	r3, #1
 80145ae:	6163      	str	r3, [r4, #20]
 80145b0:	b003      	add	sp, #12
 80145b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145b4:	ab01      	add	r3, sp, #4
 80145b6:	466a      	mov	r2, sp
 80145b8:	f7ff ffc8 	bl	801454c <__swhatbuf_r>
 80145bc:	9f00      	ldr	r7, [sp, #0]
 80145be:	4605      	mov	r5, r0
 80145c0:	4639      	mov	r1, r7
 80145c2:	4630      	mov	r0, r6
 80145c4:	f7ff f92c 	bl	8013820 <_malloc_r>
 80145c8:	b948      	cbnz	r0, 80145de <__smakebuf_r+0x46>
 80145ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145ce:	059a      	lsls	r2, r3, #22
 80145d0:	d4ee      	bmi.n	80145b0 <__smakebuf_r+0x18>
 80145d2:	f023 0303 	bic.w	r3, r3, #3
 80145d6:	f043 0302 	orr.w	r3, r3, #2
 80145da:	81a3      	strh	r3, [r4, #12]
 80145dc:	e7e2      	b.n	80145a4 <__smakebuf_r+0xc>
 80145de:	89a3      	ldrh	r3, [r4, #12]
 80145e0:	6020      	str	r0, [r4, #0]
 80145e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145e6:	81a3      	strh	r3, [r4, #12]
 80145e8:	9b01      	ldr	r3, [sp, #4]
 80145ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80145ee:	b15b      	cbz	r3, 8014608 <__smakebuf_r+0x70>
 80145f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145f4:	4630      	mov	r0, r6
 80145f6:	f000 f81d 	bl	8014634 <_isatty_r>
 80145fa:	b128      	cbz	r0, 8014608 <__smakebuf_r+0x70>
 80145fc:	89a3      	ldrh	r3, [r4, #12]
 80145fe:	f023 0303 	bic.w	r3, r3, #3
 8014602:	f043 0301 	orr.w	r3, r3, #1
 8014606:	81a3      	strh	r3, [r4, #12]
 8014608:	89a3      	ldrh	r3, [r4, #12]
 801460a:	431d      	orrs	r5, r3
 801460c:	81a5      	strh	r5, [r4, #12]
 801460e:	e7cf      	b.n	80145b0 <__smakebuf_r+0x18>

08014610 <_fstat_r>:
 8014610:	b538      	push	{r3, r4, r5, lr}
 8014612:	4d07      	ldr	r5, [pc, #28]	@ (8014630 <_fstat_r+0x20>)
 8014614:	2300      	movs	r3, #0
 8014616:	4604      	mov	r4, r0
 8014618:	4608      	mov	r0, r1
 801461a:	4611      	mov	r1, r2
 801461c:	602b      	str	r3, [r5, #0]
 801461e:	f7ed ffc7 	bl	80025b0 <_fstat>
 8014622:	1c43      	adds	r3, r0, #1
 8014624:	d102      	bne.n	801462c <_fstat_r+0x1c>
 8014626:	682b      	ldr	r3, [r5, #0]
 8014628:	b103      	cbz	r3, 801462c <_fstat_r+0x1c>
 801462a:	6023      	str	r3, [r4, #0]
 801462c:	bd38      	pop	{r3, r4, r5, pc}
 801462e:	bf00      	nop
 8014630:	200164a4 	.word	0x200164a4

08014634 <_isatty_r>:
 8014634:	b538      	push	{r3, r4, r5, lr}
 8014636:	4d06      	ldr	r5, [pc, #24]	@ (8014650 <_isatty_r+0x1c>)
 8014638:	2300      	movs	r3, #0
 801463a:	4604      	mov	r4, r0
 801463c:	4608      	mov	r0, r1
 801463e:	602b      	str	r3, [r5, #0]
 8014640:	f7ed ffc6 	bl	80025d0 <_isatty>
 8014644:	1c43      	adds	r3, r0, #1
 8014646:	d102      	bne.n	801464e <_isatty_r+0x1a>
 8014648:	682b      	ldr	r3, [r5, #0]
 801464a:	b103      	cbz	r3, 801464e <_isatty_r+0x1a>
 801464c:	6023      	str	r3, [r4, #0]
 801464e:	bd38      	pop	{r3, r4, r5, pc}
 8014650:	200164a4 	.word	0x200164a4

08014654 <sqrtf>:
 8014654:	b508      	push	{r3, lr}
 8014656:	ed2d 8b02 	vpush	{d8}
 801465a:	eeb0 8a40 	vmov.f32	s16, s0
 801465e:	f000 f817 	bl	8014690 <__ieee754_sqrtf>
 8014662:	eeb4 8a48 	vcmp.f32	s16, s16
 8014666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801466a:	d60c      	bvs.n	8014686 <sqrtf+0x32>
 801466c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801468c <sqrtf+0x38>
 8014670:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014678:	d505      	bpl.n	8014686 <sqrtf+0x32>
 801467a:	f7ff f803 	bl	8013684 <__errno>
 801467e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8014682:	2321      	movs	r3, #33	@ 0x21
 8014684:	6003      	str	r3, [r0, #0]
 8014686:	ecbd 8b02 	vpop	{d8}
 801468a:	bd08      	pop	{r3, pc}
 801468c:	00000000 	.word	0x00000000

08014690 <__ieee754_sqrtf>:
 8014690:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014694:	4770      	bx	lr
	...

08014698 <_init>:
 8014698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801469a:	bf00      	nop
 801469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801469e:	bc08      	pop	{r3}
 80146a0:	469e      	mov	lr, r3
 80146a2:	4770      	bx	lr

080146a4 <_fini>:
 80146a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146a6:	bf00      	nop
 80146a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146aa:	bc08      	pop	{r3}
 80146ac:	469e      	mov	lr, r3
 80146ae:	4770      	bx	lr
