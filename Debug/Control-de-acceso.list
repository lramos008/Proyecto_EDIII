
Control-de-acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006da8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c0  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009108  08009108  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009110  08009110  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009110  08009110  00019110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009114  08009114  00019114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08009118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004540  20000028  08009140  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004568  08009140  00024568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d3a  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f58  00000000  00000000  00038dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0003cd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001238  00000000  00000000  0003e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000050fa  00000000  00000000  0003f6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fdfa  00000000  00000000  000447d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be2e  00000000  00000000  000645cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006100  00000000  00000000  001003fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001064fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f30 	.word	0x08006f30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	08006f30 	.word	0x08006f30

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2104      	movs	r1, #4
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <SELECT+0x18>)
 80004e6:	f002 f9c7 	bl	8002878 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ea:	2001      	movs	r0, #1
 80004ec:	f001 ff22 	bl	8002334 <HAL_Delay>
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40020c00 	.word	0x40020c00

080004f8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2104      	movs	r1, #4
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <DESELECT+0x18>)
 8000502:	f002 f9b9 	bl	8002878 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f001 ff14 	bl	8002334 <HAL_Delay>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40020c00 	.word	0x40020c00

08000514 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051e:	bf00      	nop
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <SPI_TxByte+0x30>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d1f8      	bne.n	8000520 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800052e:	1df9      	adds	r1, r7, #7
 8000530:	2364      	movs	r3, #100	; 0x64
 8000532:	2201      	movs	r2, #1
 8000534:	4803      	ldr	r0, [pc, #12]	; (8000544 <SPI_TxByte+0x30>)
 8000536:	f003 fbba 	bl	8003cae <HAL_SPI_Transmit>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200006f8 	.word	0x200006f8

08000548 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000554:	bf00      	nop
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <SPI_TxBuffer+0x30>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	2b02      	cmp	r3, #2
 8000562:	d1f8      	bne.n	8000556 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000564:	887a      	ldrh	r2, [r7, #2]
 8000566:	2364      	movs	r3, #100	; 0x64
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <SPI_TxBuffer+0x30>)
 800056c:	f003 fb9f 	bl	8003cae <HAL_SPI_Transmit>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200006f8 	.word	0x200006f8

0800057c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000582:	23ff      	movs	r3, #255	; 0xff
 8000584:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000586:	bf00      	nop
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <SPI_RxByte+0x34>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	2b02      	cmp	r3, #2
 8000594:	d1f8      	bne.n	8000588 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000596:	1dba      	adds	r2, r7, #6
 8000598:	1df9      	adds	r1, r7, #7
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2301      	movs	r3, #1
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <SPI_RxByte+0x34>)
 80005a2:	f003 fcc7 	bl	8003f34 <HAL_SPI_TransmitReceive>

	return data;
 80005a6:	79bb      	ldrb	r3, [r7, #6]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	200006f8 	.word	0x200006f8

080005b4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005bc:	f7ff ffde 	bl	800057c <SPI_RxByte>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	701a      	strb	r2, [r3, #0]
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <SD_ReadyWait+0x30>)
 80005d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005dc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005de:	f7ff ffcd 	bl	800057c <SPI_RxByte>
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2bff      	cmp	r3, #255	; 0xff
 80005ea:	d004      	beq.n	80005f6 <SD_ReadyWait+0x26>
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SD_ReadyWait+0x30>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d1f3      	bne.n	80005de <SD_ReadyWait+0xe>

	return res;
 80005f6:	79fb      	ldrb	r3, [r7, #7]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	200007ee 	.word	0x200007ee

08000604 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800060a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800060e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000610:	f7ff ff72 	bl	80004f8 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	e005      	b.n	8000626 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800061a:	20ff      	movs	r0, #255	; 0xff
 800061c:	f7ff ff7a 	bl	8000514 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3301      	adds	r3, #1
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	2b09      	cmp	r3, #9
 800062a:	ddf6      	ble.n	800061a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800062c:	f7ff ff56 	bl	80004dc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000644:	2395      	movs	r3, #149	; 0x95
 8000646:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000648:	463b      	mov	r3, r7
 800064a:	2106      	movs	r1, #6
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff7b 	bl	8000548 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000652:	e002      	b.n	800065a <SD_PowerOn+0x56>
	{
		cnt--;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3b01      	subs	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800065a:	f7ff ff8f 	bl	800057c <SPI_RxByte>
 800065e:	4603      	mov	r3, r0
 8000660:	2b01      	cmp	r3, #1
 8000662:	d002      	beq.n	800066a <SD_PowerOn+0x66>
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f4      	bne.n	8000654 <SD_PowerOn+0x50>
	}

	DESELECT();
 800066a:	f7ff ff45 	bl	80004f8 <DESELECT>
	SPI_TxByte(0XFF);
 800066e:	20ff      	movs	r0, #255	; 0xff
 8000670:	f7ff ff50 	bl	8000514 <SPI_TxByte>

	PowerFlag = 1;
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <SD_PowerOn+0x80>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000045 	.word	0x20000045

08000688 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <SD_PowerOff+0x14>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	20000045 	.word	0x20000045

080006a0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SD_CheckPower+0x14>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	20000045 	.word	0x20000045

080006b8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <SD_RxDataBlock+0x5c>)
 80006c4:	22c8      	movs	r2, #200	; 0xc8
 80006c6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006c8:	f7ff ff58 	bl	800057c <SPI_RxByte>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	2bff      	cmp	r3, #255	; 0xff
 80006d4:	d104      	bne.n	80006e0 <SD_RxDataBlock+0x28>
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SD_RxDataBlock+0x5c>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1f3      	bne.n	80006c8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2bfe      	cmp	r3, #254	; 0xfe
 80006e4:	d001      	beq.n	80006ea <SD_RxDataBlock+0x32>
 80006e6:	2300      	movs	r3, #0
 80006e8:	e00f      	b.n	800070a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff5f 	bl	80005b4 <SPI_RxBytePtr>
	} while(len--);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	603a      	str	r2, [r7, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f4      	bne.n	80006ea <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000700:	f7ff ff3c 	bl	800057c <SPI_RxByte>
	SPI_RxByte();
 8000704:	f7ff ff3a 	bl	800057c <SPI_RxByte>

	return TRUE;
 8000708:	2301      	movs	r3, #1
}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200007ed 	.word	0x200007ed

08000718 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000728:	f7ff ff52 	bl	80005d0 <SD_ReadyWait>
 800072c:	4603      	mov	r3, r0
 800072e:	2bff      	cmp	r3, #255	; 0xff
 8000730:	d001      	beq.n	8000736 <SD_TxDataBlock+0x1e>
 8000732:	2300      	movs	r3, #0
 8000734:	e02f      	b.n	8000796 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000736:	78fb      	ldrb	r3, [r7, #3]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff feeb 	bl	8000514 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	2bfd      	cmp	r3, #253	; 0xfd
 8000742:	d020      	beq.n	8000786 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff fefd 	bl	8000548 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800074e:	f7ff ff15 	bl	800057c <SPI_RxByte>
		SPI_RxByte();
 8000752:	f7ff ff13 	bl	800057c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000756:	e00b      	b.n	8000770 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000758:	f7ff ff10 	bl	800057c <SPI_RxByte>
 800075c:	4603      	mov	r3, r0
 800075e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	f003 031f 	and.w	r3, r3, #31
 8000766:	2b05      	cmp	r3, #5
 8000768:	d006      	beq.n	8000778 <SD_TxDataBlock+0x60>
			i++;
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	3301      	adds	r3, #1
 800076e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000770:	7bbb      	ldrb	r3, [r7, #14]
 8000772:	2b40      	cmp	r3, #64	; 0x40
 8000774:	d9f0      	bls.n	8000758 <SD_TxDataBlock+0x40>
 8000776:	e000      	b.n	800077a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000778:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800077a:	bf00      	nop
 800077c:	f7ff fefe 	bl	800057c <SPI_RxByte>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0fa      	beq.n	800077c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	f003 031f 	and.w	r3, r3, #31
 800078c:	2b05      	cmp	r3, #5
 800078e:	d101      	bne.n	8000794 <SD_TxDataBlock+0x7c>
 8000790:	2301      	movs	r3, #1
 8000792:	e000      	b.n	8000796 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b084      	sub	sp, #16
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	4603      	mov	r3, r0
 80007a6:	6039      	str	r1, [r7, #0]
 80007a8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007aa:	f7ff ff11 	bl	80005d0 <SD_ReadyWait>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2bff      	cmp	r3, #255	; 0xff
 80007b2:	d001      	beq.n	80007b8 <SD_SendCmd+0x1a>
 80007b4:	23ff      	movs	r3, #255	; 0xff
 80007b6:	e042      	b.n	800083e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff feaa 	bl	8000514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	0e1b      	lsrs	r3, r3, #24
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fea4 	bl	8000514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	0c1b      	lsrs	r3, r3, #16
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fe9e 	bl	8000514 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	0a1b      	lsrs	r3, r3, #8
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fe98 	bl	8000514 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe93 	bl	8000514 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	2b40      	cmp	r3, #64	; 0x40
 80007f2:	d102      	bne.n	80007fa <SD_SendCmd+0x5c>
 80007f4:	2395      	movs	r3, #149	; 0x95
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e007      	b.n	800080a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	2b48      	cmp	r3, #72	; 0x48
 80007fe:	d102      	bne.n	8000806 <SD_SendCmd+0x68>
 8000800:	2387      	movs	r3, #135	; 0x87
 8000802:	73fb      	strb	r3, [r7, #15]
 8000804:	e001      	b.n	800080a <SD_SendCmd+0x6c>
	else crc = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fe81 	bl	8000514 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b4c      	cmp	r3, #76	; 0x4c
 8000816:	d101      	bne.n	800081c <SD_SendCmd+0x7e>
 8000818:	f7ff feb0 	bl	800057c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000820:	f7ff feac 	bl	800057c <SPI_RxByte>
 8000824:	4603      	mov	r3, r0
 8000826:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000828:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da05      	bge.n	800083c <SD_SendCmd+0x9e>
 8000830:	7bbb      	ldrb	r3, [r7, #14]
 8000832:	3b01      	subs	r3, #1
 8000834:	73bb      	strb	r3, [r7, #14]
 8000836:	7bbb      	ldrb	r3, [r7, #14]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1f1      	bne.n	8000820 <SD_SendCmd+0x82>

	return res;
 800083c:	7b7b      	ldrb	r3, [r7, #13]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SD_disk_initialize+0x14>
 8000858:	2301      	movs	r3, #1
 800085a:	e0d6      	b.n	8000a0a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800085c:	4b6d      	ldr	r3, [pc, #436]	; (8000a14 <SD_disk_initialize+0x1cc>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <SD_disk_initialize+0x2a>
 800086a:	4b6a      	ldr	r3, [pc, #424]	; (8000a14 <SD_disk_initialize+0x1cc>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	e0cb      	b.n	8000a0a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000872:	f7ff fec7 	bl	8000604 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000876:	f7ff fe31 	bl	80004dc <SELECT>

	/* check disk type */
	type = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800087e:	2100      	movs	r1, #0
 8000880:	2040      	movs	r0, #64	; 0x40
 8000882:	f7ff ff8c 	bl	800079e <SD_SendCmd>
 8000886:	4603      	mov	r3, r0
 8000888:	2b01      	cmp	r3, #1
 800088a:	f040 80a6 	bne.w	80009da <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800088e:	4b62      	ldr	r3, [pc, #392]	; (8000a18 <SD_disk_initialize+0x1d0>)
 8000890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000894:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000896:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800089a:	2048      	movs	r0, #72	; 0x48
 800089c:	f7ff ff7f 	bl	800079e <SD_SendCmd>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d158      	bne.n	8000958 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e00c      	b.n	80008c6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008ac:	7bfc      	ldrb	r4, [r7, #15]
 80008ae:	f7ff fe65 	bl	800057c <SPI_RxByte>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	f104 0310 	add.w	r3, r4, #16
 80008ba:	443b      	add	r3, r7
 80008bc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
 80008c2:	3301      	adds	r3, #1
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	2b03      	cmp	r3, #3
 80008ca:	d9ef      	bls.n	80008ac <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008cc:	7abb      	ldrb	r3, [r7, #10]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	f040 8083 	bne.w	80009da <SD_disk_initialize+0x192>
 80008d4:	7afb      	ldrb	r3, [r7, #11]
 80008d6:	2baa      	cmp	r3, #170	; 0xaa
 80008d8:	d17f      	bne.n	80009da <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008da:	2100      	movs	r1, #0
 80008dc:	2077      	movs	r0, #119	; 0x77
 80008de:	f7ff ff5e 	bl	800079e <SD_SendCmd>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d807      	bhi.n	80008f8 <SD_disk_initialize+0xb0>
 80008e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008ec:	2069      	movs	r0, #105	; 0x69
 80008ee:	f7ff ff56 	bl	800079e <SD_SendCmd>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d005      	beq.n	8000904 <SD_disk_initialize+0xbc>
				} while (Timer1);
 80008f8:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <SD_disk_initialize+0x1d0>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1eb      	bne.n	80008da <SD_disk_initialize+0x92>
 8000902:	e000      	b.n	8000906 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000904:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <SD_disk_initialize+0x1d0>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29b      	uxth	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d064      	beq.n	80009da <SD_disk_initialize+0x192>
 8000910:	2100      	movs	r1, #0
 8000912:	207a      	movs	r0, #122	; 0x7a
 8000914:	f7ff ff43 	bl	800079e <SD_SendCmd>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d15d      	bne.n	80009da <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	e00c      	b.n	800093e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000924:	7bfc      	ldrb	r4, [r7, #15]
 8000926:	f7ff fe29 	bl	800057c <SPI_RxByte>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	f104 0310 	add.w	r3, r4, #16
 8000932:	443b      	add	r3, r7
 8000934:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	3301      	adds	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d9ef      	bls.n	8000924 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000944:	7a3b      	ldrb	r3, [r7, #8]
 8000946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SD_disk_initialize+0x10a>
 800094e:	230c      	movs	r3, #12
 8000950:	e000      	b.n	8000954 <SD_disk_initialize+0x10c>
 8000952:	2304      	movs	r3, #4
 8000954:	73bb      	strb	r3, [r7, #14]
 8000956:	e040      	b.n	80009da <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000958:	2100      	movs	r1, #0
 800095a:	2077      	movs	r0, #119	; 0x77
 800095c:	f7ff ff1f 	bl	800079e <SD_SendCmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d808      	bhi.n	8000978 <SD_disk_initialize+0x130>
 8000966:	2100      	movs	r1, #0
 8000968:	2069      	movs	r0, #105	; 0x69
 800096a:	f7ff ff18 	bl	800079e <SD_SendCmd>
 800096e:	4603      	mov	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d801      	bhi.n	8000978 <SD_disk_initialize+0x130>
 8000974:	2302      	movs	r3, #2
 8000976:	e000      	b.n	800097a <SD_disk_initialize+0x132>
 8000978:	2301      	movs	r3, #1
 800097a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800097c:	7bbb      	ldrb	r3, [r7, #14]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d10e      	bne.n	80009a0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000982:	2100      	movs	r1, #0
 8000984:	2077      	movs	r0, #119	; 0x77
 8000986:	f7ff ff0a 	bl	800079e <SD_SendCmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d80e      	bhi.n	80009ae <SD_disk_initialize+0x166>
 8000990:	2100      	movs	r1, #0
 8000992:	2069      	movs	r0, #105	; 0x69
 8000994:	f7ff ff03 	bl	800079e <SD_SendCmd>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d107      	bne.n	80009ae <SD_disk_initialize+0x166>
 800099e:	e00d      	b.n	80009bc <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009a0:	2100      	movs	r1, #0
 80009a2:	2041      	movs	r0, #65	; 0x41
 80009a4:	f7ff fefb 	bl	800079e <SD_SendCmd>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d005      	beq.n	80009ba <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <SD_disk_initialize+0x1d0>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1e1      	bne.n	800097c <SD_disk_initialize+0x134>
 80009b8:	e000      	b.n	80009bc <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009ba:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <SD_disk_initialize+0x1d0>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d007      	beq.n	80009d6 <SD_disk_initialize+0x18e>
 80009c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ca:	2050      	movs	r0, #80	; 0x50
 80009cc:	f7ff fee7 	bl	800079e <SD_SendCmd>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SD_disk_initialize+0x192>
 80009d6:	2300      	movs	r3, #0
 80009d8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <SD_disk_initialize+0x1d4>)
 80009dc:	7bbb      	ldrb	r3, [r7, #14]
 80009de:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009e0:	f7ff fd8a 	bl	80004f8 <DESELECT>
	SPI_RxByte();
 80009e4:	f7ff fdca 	bl	800057c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <SD_disk_initialize+0x1cc>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SD_disk_initialize+0x1cc>)
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e001      	b.n	8000a04 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a00:	f7ff fe42 	bl	8000688 <SD_PowerOff>
	}

	return Stat;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <SD_disk_initialize+0x1cc>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd90      	pop	{r4, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000000 	.word	0x20000000
 8000a18:	200007ed 	.word	0x200007ed
 8000a1c:	20000044 	.word	0x20000044

08000a20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SD_disk_status+0x14>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e002      	b.n	8000a3a <SD_disk_status+0x1a>
	return Stat;
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <SD_disk_status+0x28>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000000 	.word	0x20000000

08000a4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <SD_disk_read+0x1c>
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <SD_disk_read+0x20>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e051      	b.n	8000b10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	; (8000b18 <SD_disk_read+0xcc>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SD_disk_read+0x32>
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e048      	b.n	8000b10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a7e:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <SD_disk_read+0xd0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d102      	bne.n	8000a90 <SD_disk_read+0x44>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a90:	f7ff fd24 	bl	80004dc <SELECT>

	if (count == 1)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d111      	bne.n	8000abe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	2051      	movs	r0, #81	; 0x51
 8000a9e:	f7ff fe7e 	bl	800079e <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d129      	bne.n	8000afc <SD_disk_read+0xb0>
 8000aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aac:	68b8      	ldr	r0, [r7, #8]
 8000aae:	f7ff fe03 	bl	80006b8 <SD_RxDataBlock>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d021      	beq.n	8000afc <SD_disk_read+0xb0>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	e01e      	b.n	8000afc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	2052      	movs	r0, #82	; 0x52
 8000ac2:	f7ff fe6c 	bl	800079e <SD_SendCmd>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d117      	bne.n	8000afc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	68b8      	ldr	r0, [r7, #8]
 8000ad2:	f7ff fdf1 	bl	80006b8 <SD_RxDataBlock>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00a      	beq.n	8000af2 <SD_disk_read+0xa6>
				buff += 512;
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ae2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d1ed      	bne.n	8000acc <SD_disk_read+0x80>
 8000af0:	e000      	b.n	8000af4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000af2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000af4:	2100      	movs	r1, #0
 8000af6:	204c      	movs	r0, #76	; 0x4c
 8000af8:	f7ff fe51 	bl	800079e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000afc:	f7ff fcfc 	bl	80004f8 <DESELECT>
	SPI_RxByte();
 8000b00:	f7ff fd3c 	bl	800057c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000044 	.word	0x20000044

08000b20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <SD_disk_write+0x1c>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <SD_disk_write+0x20>
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	e06b      	b.n	8000c18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b40:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <SD_disk_write+0x100>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SD_disk_write+0x32>
 8000b4e:	2303      	movs	r3, #3
 8000b50:	e062      	b.n	8000c18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b52:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <SD_disk_write+0x100>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SD_disk_write+0x44>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e059      	b.n	8000c18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <SD_disk_write+0x104>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <SD_disk_write+0x56>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	025b      	lsls	r3, r3, #9
 8000b74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b76:	f7ff fcb1 	bl	80004dc <SELECT>

	if (count == 1)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d110      	bne.n	8000ba2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b80:	6879      	ldr	r1, [r7, #4]
 8000b82:	2058      	movs	r0, #88	; 0x58
 8000b84:	f7ff fe0b 	bl	800079e <SD_SendCmd>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d13a      	bne.n	8000c04 <SD_disk_write+0xe4>
 8000b8e:	21fe      	movs	r1, #254	; 0xfe
 8000b90:	68b8      	ldr	r0, [r7, #8]
 8000b92:	f7ff fdc1 	bl	8000718 <SD_TxDataBlock>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d033      	beq.n	8000c04 <SD_disk_write+0xe4>
			count = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	e030      	b.n	8000c04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <SD_disk_write+0x104>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d007      	beq.n	8000bbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2077      	movs	r0, #119	; 0x77
 8000bb2:	f7ff fdf4 	bl	800079e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	2057      	movs	r0, #87	; 0x57
 8000bba:	f7ff fdf0 	bl	800079e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2059      	movs	r0, #89	; 0x59
 8000bc2:	f7ff fdec 	bl	800079e <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11b      	bne.n	8000c04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bcc:	21fc      	movs	r1, #252	; 0xfc
 8000bce:	68b8      	ldr	r0, [r7, #8]
 8000bd0:	f7ff fda2 	bl	8000718 <SD_TxDataBlock>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00a      	beq.n	8000bf0 <SD_disk_write+0xd0>
				buff += 512;
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000be0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ee      	bne.n	8000bcc <SD_disk_write+0xac>
 8000bee:	e000      	b.n	8000bf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000bf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000bf2:	21fd      	movs	r1, #253	; 0xfd
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff fd8f 	bl	8000718 <SD_TxDataBlock>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c04:	f7ff fc78 	bl	80004f8 <DESELECT>
	SPI_RxByte();
 8000c08:	f7ff fcb8 	bl	800057c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bf14      	ite	ne
 8000c12:	2301      	movne	r3, #1
 8000c14:	2300      	moveq	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000044 	.word	0x20000044

08000c28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	603a      	str	r2, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	460b      	mov	r3, r1
 8000c36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SD_disk_ioctl+0x1e>
 8000c42:	2304      	movs	r3, #4
 8000c44:	e115      	b.n	8000e72 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d124      	bne.n	8000c9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d012      	beq.n	8000c80 <SD_disk_ioctl+0x58>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	dc1a      	bgt.n	8000c94 <SD_disk_ioctl+0x6c>
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <SD_disk_ioctl+0x40>
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d006      	beq.n	8000c74 <SD_disk_ioctl+0x4c>
 8000c66:	e015      	b.n	8000c94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c68:	f7ff fd0e 	bl	8000688 <SD_PowerOff>
			res = RES_OK;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c72:	e0fc      	b.n	8000e6e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c74:	f7ff fcc6 	bl	8000604 <SD_PowerOn>
			res = RES_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c7e:	e0f6      	b.n	8000e6e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c80:	6a3b      	ldr	r3, [r7, #32]
 8000c82:	1c5c      	adds	r4, r3, #1
 8000c84:	f7ff fd0c 	bl	80006a0 <SD_CheckPower>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c92:	e0ec      	b.n	8000e6e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c94:	2304      	movs	r3, #4
 8000c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c9a:	e0e8      	b.n	8000e6e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c9c:	4b77      	ldr	r3, [pc, #476]	; (8000e7c <SD_disk_ioctl+0x254>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SD_disk_ioctl+0x86>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e0e1      	b.n	8000e72 <SD_disk_ioctl+0x24a>

		SELECT();
 8000cae:	f7ff fc15 	bl	80004dc <SELECT>

		switch (ctrl)
 8000cb2:	79bb      	ldrb	r3, [r7, #6]
 8000cb4:	2b0d      	cmp	r3, #13
 8000cb6:	f200 80cb 	bhi.w	8000e50 <SD_disk_ioctl+0x228>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <SD_disk_ioctl+0x98>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000dbb 	.word	0x08000dbb
 8000cc4:	08000cf9 	.word	0x08000cf9
 8000cc8:	08000dab 	.word	0x08000dab
 8000ccc:	08000e51 	.word	0x08000e51
 8000cd0:	08000e51 	.word	0x08000e51
 8000cd4:	08000e51 	.word	0x08000e51
 8000cd8:	08000e51 	.word	0x08000e51
 8000cdc:	08000e51 	.word	0x08000e51
 8000ce0:	08000e51 	.word	0x08000e51
 8000ce4:	08000e51 	.word	0x08000e51
 8000ce8:	08000e51 	.word	0x08000e51
 8000cec:	08000dcd 	.word	0x08000dcd
 8000cf0:	08000df1 	.word	0x08000df1
 8000cf4:	08000e15 	.word	0x08000e15
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2049      	movs	r0, #73	; 0x49
 8000cfc:	f7ff fd4f 	bl	800079e <SD_SendCmd>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 80a8 	bne.w	8000e58 <SD_disk_ioctl+0x230>
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fcd2 	bl	80006b8 <SD_RxDataBlock>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 809e 	beq.w	8000e58 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d1c:	7b3b      	ldrb	r3, [r7, #12]
 8000d1e:	099b      	lsrs	r3, r3, #6
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d10e      	bne.n	8000d44 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d26:	7d7b      	ldrb	r3, [r7, #21]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	7d3b      	ldrb	r3, [r7, #20]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4413      	add	r3, r2
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	3301      	adds	r3, #1
 8000d38:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d3a:	8bfb      	ldrh	r3, [r7, #30]
 8000d3c:	029a      	lsls	r2, r3, #10
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	e02e      	b.n	8000da2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d44:	7c7b      	ldrb	r3, [r7, #17]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	09db      	lsrs	r3, r3, #7
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	7d7b      	ldrb	r3, [r7, #21]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f003 0306 	and.w	r3, r3, #6
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	4413      	add	r3, r2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	3302      	adds	r3, #2
 8000d68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d6c:	7d3b      	ldrb	r3, [r7, #20]
 8000d6e:	099b      	lsrs	r3, r3, #6
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	7cfb      	ldrb	r3, [r7, #19]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	7cbb      	ldrb	r3, [r7, #18]
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3301      	adds	r3, #1
 8000d92:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d94:	8bfa      	ldrh	r2, [r7, #30]
 8000d96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d9a:	3b09      	subs	r3, #9
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000da8:	e056      	b.n	8000e58 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000db8:	e055      	b.n	8000e66 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dba:	f7ff fc09 	bl	80005d0 <SD_ReadyWait>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2bff      	cmp	r3, #255	; 0xff
 8000dc2:	d14b      	bne.n	8000e5c <SD_disk_ioctl+0x234>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dca:	e047      	b.n	8000e5c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2049      	movs	r0, #73	; 0x49
 8000dd0:	f7ff fce5 	bl	800079e <SD_SendCmd>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d142      	bne.n	8000e60 <SD_disk_ioctl+0x238>
 8000dda:	2110      	movs	r1, #16
 8000ddc:	6a38      	ldr	r0, [r7, #32]
 8000dde:	f7ff fc6b 	bl	80006b8 <SD_RxDataBlock>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d03b      	beq.n	8000e60 <SD_disk_ioctl+0x238>
 8000de8:	2300      	movs	r3, #0
 8000dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000dee:	e037      	b.n	8000e60 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000df0:	2100      	movs	r1, #0
 8000df2:	204a      	movs	r0, #74	; 0x4a
 8000df4:	f7ff fcd3 	bl	800079e <SD_SendCmd>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d132      	bne.n	8000e64 <SD_disk_ioctl+0x23c>
 8000dfe:	2110      	movs	r1, #16
 8000e00:	6a38      	ldr	r0, [r7, #32]
 8000e02:	f7ff fc59 	bl	80006b8 <SD_RxDataBlock>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d02b      	beq.n	8000e64 <SD_disk_ioctl+0x23c>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e12:	e027      	b.n	8000e64 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e14:	2100      	movs	r1, #0
 8000e16:	207a      	movs	r0, #122	; 0x7a
 8000e18:	f7ff fcc1 	bl	800079e <SD_SendCmd>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d116      	bne.n	8000e50 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e28:	e00b      	b.n	8000e42 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e2a:	6a3c      	ldr	r4, [r7, #32]
 8000e2c:	1c63      	adds	r3, r4, #1
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	f7ff fba4 	bl	800057c <SPI_RxByte>
 8000e34:	4603      	mov	r3, r0
 8000e36:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d9ef      	bls.n	8000e2a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000e50:	2304      	movs	r3, #4
 8000e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e56:	e006      	b.n	8000e66 <SD_disk_ioctl+0x23e>
			break;
 8000e58:	bf00      	nop
 8000e5a:	e004      	b.n	8000e66 <SD_disk_ioctl+0x23e>
			break;
 8000e5c:	bf00      	nop
 8000e5e:	e002      	b.n	8000e66 <SD_disk_ioctl+0x23e>
			break;
 8000e60:	bf00      	nop
 8000e62:	e000      	b.n	8000e66 <SD_disk_ioctl+0x23e>
			break;
 8000e64:	bf00      	nop
		}

		DESELECT();
 8000e66:	f7ff fb47 	bl	80004f8 <DESELECT>
		SPI_RxByte();
 8000e6a:	f7ff fb87 	bl	800057c <SPI_RxByte>
	}

	return res;
 8000e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	372c      	adds	r7, #44	; 0x2c
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd90      	pop	{r4, r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000

08000e80 <HandleInput>:
#include "keypad.h"
/*Funciones relacionadas al keypad*/
eventoDisplay HandleInput(FSM *FSM1){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	eventoDisplay eventoEnviado;
	uint8_t KeyPressed;
	if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){		//Mientras no se supere el timeout puedo ingresar digito
 8000e88:	f005 f812 	bl	8005eb0 <xTaskGetTickCount>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d849      	bhi.n	8000f30 <HandleInput+0xb0>
		KeyPressed = GetKey();
 8000e9c:	f000 f852 	bl	8000f44 <GetKey>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73bb      	strb	r3, [r7, #14]
		if(KeyPressed != 0){
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d03f      	beq.n	8000f2a <HandleInput+0xaa>
			if(KeyPressed == BORRAR_DIGITO){
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	2b23      	cmp	r3, #35	; 0x23
 8000eae:	d119      	bne.n	8000ee4 <HandleInput+0x64>
				FSM1->CurrentIndex--;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	799b      	ldrb	r3, [r3, #6]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	719a      	strb	r2, [r3, #6]
				FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	799b      	ldrb	r3, [r3, #6]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	5499      	strb	r1, [r3, r2]
				FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 8000ec8:	f004 fff2 	bl	8005eb0 <xTaskGetTickCount>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
				FSM1->CurrentState--;									//Vuelvo al estado anterior
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	79db      	ldrb	r3, [r3, #7]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e02a      	b.n	8000f3a <HandleInput+0xba>
			}
			else{
				if(KeyPressed == ENTER){
 8000ee4:	7bbb      	ldrb	r3, [r7, #14]
 8000ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee8:	d105      	bne.n	8000ef6 <HandleInput+0x76>
					/*Esta seccion maneja el caso de secuencia incompleta*/
					FSM1->CurrentState = INCOMPLETO;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2208      	movs	r2, #8
 8000eee:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_SECUENCIA_INCOMPLETA;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e021      	b.n	8000f3a <HandleInput+0xba>
				}
				else{
					/*Esta seccion se encarga de tomar cualquier otro digito*/
					FSM1->Buffer[FSM1->CurrentIndex] = KeyPressed;			//Guardo el digito en el buffer
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	799b      	ldrb	r3, [r3, #6]
 8000efa:	4619      	mov	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7bba      	ldrb	r2, [r7, #14]
 8000f00:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	799b      	ldrb	r3, [r3, #6]
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();
 8000f0e:	f004 ffcf 	bl	8005eb0 <xTaskGetTickCount>
 8000f12:	4602      	mov	r2, r0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState++;									//Paso al siguiente estado
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	79db      	ldrb	r3, [r3, #7]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;
 8000f24:	2302      	movs	r3, #2
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e007      	b.n	8000f3a <HandleInput+0xba>
				}

			}
		}
		else{
			eventoEnviado = PANTALLA_IDLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	e004      	b.n	8000f3a <HandleInput+0xba>
		}
	}
	else{
		FSM1->CurrentState = TIMEOUT;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2207      	movs	r2, #7
 8000f34:	71da      	strb	r2, [r3, #7]
		eventoEnviado = PANTALLA_TIMEOUT;
 8000f36:	2306      	movs	r3, #6
 8000f38:	73fb      	strb	r3, [r7, #15]
	}
	return eventoEnviado;
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <GetKey>:

uint8_t GetKey(void){
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b08b      	sub	sp, #44	; 0x2c
 8000f48:	af00      	add	r7, sp, #0
	/*Esta funcion realiza un barrido al keypad matricial 4x4*/
	/*Si se presiona una tecla, devuelve el ascii asociado. Si no, devuelve 0*/
	uint16_t PinRows[ROWS] = {GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9};
 8000f4a:	4a43      	ldr	r2, [pc, #268]	; (8001058 <GetKey+0x114>)
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f54:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t PinCols[COLS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3};
 8000f58:	4a40      	ldr	r2, [pc, #256]	; (800105c <GetKey+0x118>)
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f62:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t KeyPressed;
	char Keypad[ROWS][COLS] = {
 8000f66:	4b3e      	ldr	r3, [pc, #248]	; (8001060 <GetKey+0x11c>)
 8000f68:	1d3c      	adds	r4, r7, #4
 8000f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      {'4', '5', '6', 'B'},
	      {'7', '8', '9', 'C'},
	      {'*', '0', '#', 'D'}
	 };
	 /*Escaneo el teclado en busca de 1 tecla presionada. Si hay tecla presionada*/
	 for(uint8_t i = 0; i < ROWS; i++){
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f76:	e066      	b.n	8001046 <GetKey+0x102>
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_SET);					//Prendo y apago secuencialmente las filas
 8000f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	3328      	adds	r3, #40	; 0x28
 8000f80:	443b      	add	r3, r7
 8000f82:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4836      	ldr	r0, [pc, #216]	; (8001064 <GetKey+0x120>)
 8000f8c:	f001 fc74 	bl	8002878 <HAL_GPIO_WritePin>
		 for(uint8_t j = 0; j < COLS; j++){
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f96:	e041      	b.n	800101c <GetKey+0xd8>
			 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){			//Barro las columnas y verifico si se presiona una tecla
 8000f98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	3328      	adds	r3, #40	; 0x28
 8000fa0:	443b      	add	r3, r7
 8000fa2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482e      	ldr	r0, [pc, #184]	; (8001064 <GetKey+0x120>)
 8000faa:	f001 fc4d 	bl	8002848 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d12e      	bne.n	8001012 <GetKey+0xce>
				 vTaskDelay(20 / portTICK_RATE_MS);								//Espero 20 ms y reconfirmo el estado. Si no se reconfirma sigue el barrido.
 8000fb4:	2014      	movs	r0, #20
 8000fb6:	f004 fe3d 	bl	8005c34 <vTaskDelay>
				 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){
 8000fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	3328      	adds	r3, #40	; 0x28
 8000fc2:	443b      	add	r3, r7
 8000fc4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4826      	ldr	r0, [pc, #152]	; (8001064 <GetKey+0x120>)
 8000fcc:	f001 fc3c 	bl	8002848 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d11d      	bne.n	8001012 <GetKey+0xce>
					 KeyPressed = (uint8_t) Keypad[i][j];
 8000fd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000fda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	3228      	adds	r2, #40	; 0x28
 8000fe2:	443a      	add	r2, r7
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3b24      	subs	r3, #36	; 0x24
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);		//Pongo fila a 0 antes de salir de la funcion.
 8000fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	3328      	adds	r3, #40	; 0x28
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <GetKey+0x120>)
 8001002:	f001 fc39 	bl	8002878 <HAL_GPIO_WritePin>
					 vTaskDelay(150/ portTICK_RATE_MS);
 8001006:	2096      	movs	r0, #150	; 0x96
 8001008:	f004 fe14 	bl	8005c34 <vTaskDelay>
					 return KeyPressed;
 800100c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001010:	e01e      	b.n	8001050 <GetKey+0x10c>
		 for(uint8_t j = 0; j < COLS; j++){
 8001012:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001016:	3301      	adds	r3, #1
 8001018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800101c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001020:	2b03      	cmp	r3, #3
 8001022:	d9b9      	bls.n	8000f98 <GetKey+0x54>
				 }
			 }
		 }
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);
 8001024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	3328      	adds	r3, #40	; 0x28
 800102c:	443b      	add	r3, r7
 800102e:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <GetKey+0x120>)
 8001038:	f001 fc1e 	bl	8002878 <HAL_GPIO_WritePin>
	 for(uint8_t i = 0; i < ROWS; i++){
 800103c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001040:	3301      	adds	r3, #1
 8001042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800104a:	2b03      	cmp	r3, #3
 800104c:	d994      	bls.n	8000f78 <GetKey+0x34>
	 }
	 return 0;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	372c      	adds	r7, #44	; 0x2c
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	08006f48 	.word	0x08006f48
 800105c:	08006f50 	.word	0x08006f50
 8001060:	08006f58 	.word	0x08006f58
 8001064:	40020800 	.word	0x40020800

08001068 <ClearBuffer>:
		str++;
	}
	return;
}

void ClearBuffer(uint8_t *Buffer, uint8_t size){
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	/*Limpia el buffer que guarda la secuencia ingresada*/
	for(uint8_t i = 0; i < size; i++){
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e007      	b.n	800108a <ClearBuffer+0x22>
		Buffer[i] = 0;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++){
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3301      	adds	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	429a      	cmp	r2, r3
 8001090:	d3f3      	bcc.n	800107a <ClearBuffer+0x12>
	}
	return;
 8001092:	bf00      	nop
}
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <openLock>:
#include "lock.h"

void openLock(void){
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <closeLock>:

void closeLock(void){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <displayInit>:
#include "screen.h"
extern QueueHandle_t uiQueue;

void displayInit(void){
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80010be:	f000 f917 	bl	80012f0 <ssd1306_Init>
	return;
 80010c2:	bf00      	nop
}
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <displayInsertKeyMsg>:

void displayInsertKeyMsg(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 80010ce:	2305      	movs	r3, #5
 80010d0:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f974 	bl	80013c4 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80010dc:	79ba      	ldrb	r2, [r7, #6]
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 faba 	bl	800165c <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <displayInsertKeyMsg+0x68>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	9200      	str	r2, [sp, #0]
 80010ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010f0:	4810      	ldr	r0, [pc, #64]	; (8001134 <displayInsertKeyMsg+0x6c>)
 80010f2:	f000 fa8d 	bl	8001610 <ssd1306_WriteString>
	x += 15;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	330f      	adds	r3, #15
 80010fa:	71fb      	strb	r3, [r7, #7]
	y += 26;
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	331a      	adds	r3, #26
 8001100:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001102:	79ba      	ldrb	r2, [r7, #6]
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f000 faa7 	bl	800165c <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <displayInsertKeyMsg+0x68>)
 8001110:	2201      	movs	r2, #1
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	4808      	ldr	r0, [pc, #32]	; (8001138 <displayInsertKeyMsg+0x70>)
 8001118:	f000 fa7a 	bl	8001610 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800111c:	f000 f96a 	bl	80013f4 <ssd1306_UpdateScreen>
	ssd1306_Fill(Black);								//Para preparar la sig secuencia
 8001120:	2000      	movs	r0, #0
 8001122:	f000 f94f 	bl	80013c4 <ssd1306_Fill>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	080090e4 	.word	0x080090e4
 8001134:	08006f68 	.word	0x08006f68
 8001138:	08006f70 	.word	0x08006f70

0800113c <displayTimeoutMsg>:

void displayTimeoutMsg(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8001142:	2305      	movs	r3, #5
 8001144:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 8001146:	2312      	movs	r3, #18
 8001148:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f93a 	bl	80013c4 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001150:	79ba      	ldrb	r2, [r7, #6]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fa80 	bl	800165c <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <displayTimeoutMsg+0x3c>)
 800115e:	2201      	movs	r2, #1
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	4805      	ldr	r0, [pc, #20]	; (800117c <displayTimeoutMsg+0x40>)
 8001166:	f000 fa53 	bl	8001610 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800116a:	f000 f943 	bl	80013f4 <ssd1306_UpdateScreen>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	080090d8 	.word	0x080090d8
 800117c:	08006f78 	.word	0x08006f78

08001180 <displayIncompleteMsg>:

void displayIncompleteMsg(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
	uint8_t x = 20;
 8001186:	2314      	movs	r3, #20
 8001188:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f918 	bl	80013c4 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001194:	79ba      	ldrb	r2, [r7, #6]
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fa5e 	bl	800165c <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <displayIncompleteMsg+0x84>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a8:	4817      	ldr	r0, [pc, #92]	; (8001208 <displayIncompleteMsg+0x88>)
 80011aa:	f000 fa31 	bl	8001610 <ssd1306_WriteString>
	x = 10;
 80011ae:	230a      	movs	r3, #10
 80011b0:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	3312      	adds	r3, #18
 80011b6:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80011b8:	79ba      	ldrb	r2, [r7, #6]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fa4c 	bl	800165c <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <displayIncompleteMsg+0x84>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	9200      	str	r2, [sp, #0]
 80011ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011cc:	480f      	ldr	r0, [pc, #60]	; (800120c <displayIncompleteMsg+0x8c>)
 80011ce:	f000 fa1f 	bl	8001610 <ssd1306_WriteString>
	x = 20;
 80011d2:	2314      	movs	r3, #20
 80011d4:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	3312      	adds	r3, #18
 80011da:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80011dc:	79ba      	ldrb	r2, [r7, #6]
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fa3a 	bl	800165c <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <displayIncompleteMsg+0x84>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	9200      	str	r2, [sp, #0]
 80011ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <displayIncompleteMsg+0x90>)
 80011f2:	f000 fa0d 	bl	8001610 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80011f6:	f000 f8fd 	bl	80013f4 <ssd1306_UpdateScreen>

}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	080090d8 	.word	0x080090d8
 8001208:	08006f68 	.word	0x08006f68
 800120c:	08006f84 	.word	0x08006f84
 8001210:	08006f90 	.word	0x08006f90

08001214 <displayAccessState>:

void displayAccessState(void){
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 800121a:	2305      	movs	r3, #5
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f8ce 	bl	80013c4 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001228:	79ba      	ldrb	r2, [r7, #6]
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fa14 	bl	800165c <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <displayAccessState+0x5c>)
 8001236:	2201      	movs	r2, #1
 8001238:	9200      	str	r2, [sp, #0]
 800123a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <displayAccessState+0x60>)
 800123e:	f000 f9e7 	bl	8001610 <ssd1306_WriteString>
	y += 18;
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	3312      	adds	r3, #18
 8001246:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001248:	79ba      	ldrb	r2, [r7, #6]
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fa04 	bl	800165c <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <displayAccessState+0x5c>)
 8001256:	2201      	movs	r2, #1
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <displayAccessState+0x64>)
 800125e:	f000 f9d7 	bl	8001610 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001262:	f000 f8c7 	bl	80013f4 <ssd1306_UpdateScreen>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	080090d8 	.word	0x080090d8
 8001274:	08006f98 	.word	0x08006f98
 8001278:	08006fa0 	.word	0x08006fa0

0800127c <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af04      	add	r7, sp, #16
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2301      	movs	r3, #1
 80012a6:	2200      	movs	r2, #0
 80012a8:	2178      	movs	r1, #120	; 0x78
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <ssd1306_WriteCommand+0x2c>)
 80012ac:	f001 fc42 	bl	8002b34 <HAL_I2C_Mem_Write>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200006a4 	.word	0x200006a4

080012bc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af04      	add	r7, sp, #16
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	f04f 32ff 	mov.w	r2, #4294967295
 80012ce:	9202      	str	r2, [sp, #8]
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	2240      	movs	r2, #64	; 0x40
 80012da:	2178      	movs	r1, #120	; 0x78
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <ssd1306_WriteData+0x30>)
 80012de:	f001 fc29 	bl	8002b34 <HAL_I2C_Mem_Write>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200006a4 	.word	0x200006a4

080012f0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80012f4:	f7ff ffc2 	bl	800127c <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f004 fc9b 	bl	8005c34 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f9d8 	bl	80016b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001304:	2020      	movs	r0, #32
 8001306:	f7ff ffc1 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff ffbe 	bl	800128c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001310:	20b0      	movs	r0, #176	; 0xb0
 8001312:	f7ff ffbb 	bl	800128c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001316:	20c8      	movs	r0, #200	; 0xc8
 8001318:	f7ff ffb8 	bl	800128c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ffb5 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001322:	2010      	movs	r0, #16
 8001324:	f7ff ffb2 	bl	800128c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001328:	2040      	movs	r0, #64	; 0x40
 800132a:	f7ff ffaf 	bl	800128c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800132e:	20ff      	movs	r0, #255	; 0xff
 8001330:	f000 f9ac 	bl	800168c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001334:	20a1      	movs	r0, #161	; 0xa1
 8001336:	f7ff ffa9 	bl	800128c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800133a:	20a6      	movs	r0, #166	; 0xa6
 800133c:	f7ff ffa6 	bl	800128c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001340:	20a8      	movs	r0, #168	; 0xa8
 8001342:	f7ff ffa3 	bl	800128c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001346:	203f      	movs	r0, #63	; 0x3f
 8001348:	f7ff ffa0 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800134c:	20a4      	movs	r0, #164	; 0xa4
 800134e:	f7ff ff9d 	bl	800128c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001352:	20d3      	movs	r0, #211	; 0xd3
 8001354:	f7ff ff9a 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff ff97 	bl	800128c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800135e:	20d5      	movs	r0, #213	; 0xd5
 8001360:	f7ff ff94 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001364:	20f0      	movs	r0, #240	; 0xf0
 8001366:	f7ff ff91 	bl	800128c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800136a:	20d9      	movs	r0, #217	; 0xd9
 800136c:	f7ff ff8e 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001370:	2022      	movs	r0, #34	; 0x22
 8001372:	f7ff ff8b 	bl	800128c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001376:	20da      	movs	r0, #218	; 0xda
 8001378:	f7ff ff88 	bl	800128c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800137c:	2012      	movs	r0, #18
 800137e:	f7ff ff85 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001382:	20db      	movs	r0, #219	; 0xdb
 8001384:	f7ff ff82 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001388:	2020      	movs	r0, #32
 800138a:	f7ff ff7f 	bl	800128c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800138e:	208d      	movs	r0, #141	; 0x8d
 8001390:	f7ff ff7c 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001394:	2014      	movs	r0, #20
 8001396:	f7ff ff79 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800139a:	2001      	movs	r0, #1
 800139c:	f000 f98a 	bl	80016b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f000 f80f 	bl	80013c4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80013a6:	f000 f825 	bl	80013f4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <ssd1306_Init+0xd0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <ssd1306_Init+0xd0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80013b6:	4b02      	ldr	r3, [pc, #8]	; (80013c0 <ssd1306_Init+0xd0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	711a      	strb	r2, [r3, #4]
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000448 	.word	0x20000448

080013c4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <ssd1306_Fill+0x14>
 80013d4:	2300      	movs	r3, #0
 80013d6:	e000      	b.n	80013da <ssd1306_Fill+0x16>
 80013d8:	23ff      	movs	r3, #255	; 0xff
 80013da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013de:	4619      	mov	r1, r3
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <ssd1306_Fill+0x2c>)
 80013e2:	f005 fd6b 	bl	8006ebc <memset>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000048 	.word	0x20000048

080013f4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	71fb      	strb	r3, [r7, #7]
 80013fe:	e016      	b.n	800142e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	3b50      	subs	r3, #80	; 0x50
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff40 	bl	800128c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff3d 	bl	800128c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001412:	2010      	movs	r0, #16
 8001414:	f7ff ff3a 	bl	800128c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	01db      	lsls	r3, r3, #7
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <ssd1306_UpdateScreen+0x4c>)
 800141e:	4413      	add	r3, r2
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff4a 	bl	80012bc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	3301      	adds	r3, #1
 800142c:	71fb      	strb	r3, [r7, #7]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b07      	cmp	r3, #7
 8001432:	d9e5      	bls.n	8001400 <ssd1306_UpdateScreen+0xc>
    }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000048 	.word	0x20000048

08001444 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	460b      	mov	r3, r1
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	4613      	mov	r3, r2
 8001454:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db3d      	blt.n	80014da <ssd1306_DrawPixel+0x96>
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	2b3f      	cmp	r3, #63	; 0x3f
 8001462:	d83a      	bhi.n	80014da <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001464:	797b      	ldrb	r3, [r7, #5]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d11a      	bne.n	80014a0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	b2d8      	uxtb	r0, r3
 8001472:	4603      	mov	r3, r0
 8001474:	01db      	lsls	r3, r3, #7
 8001476:	4413      	add	r3, r2
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <ssd1306_DrawPixel+0xa4>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	b25a      	sxtb	r2, r3
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	b25b      	sxtb	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b259      	sxtb	r1, r3
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	4603      	mov	r3, r0
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	4413      	add	r3, r2
 8001498:	b2c9      	uxtb	r1, r1
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <ssd1306_DrawPixel+0xa4>)
 800149c:	54d1      	strb	r1, [r2, r3]
 800149e:	e01d      	b.n	80014dc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	b2d8      	uxtb	r0, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	01db      	lsls	r3, r3, #7
 80014ac:	4413      	add	r3, r2
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <ssd1306_DrawPixel+0xa4>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	79bb      	ldrb	r3, [r7, #6]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	2101      	movs	r1, #1
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	4013      	ands	r3, r2
 80014c8:	b259      	sxtb	r1, r3
 80014ca:	79fa      	ldrb	r2, [r7, #7]
 80014cc:	4603      	mov	r3, r0
 80014ce:	01db      	lsls	r3, r3, #7
 80014d0:	4413      	add	r3, r2
 80014d2:	b2c9      	uxtb	r1, r1
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <ssd1306_DrawPixel+0xa4>)
 80014d6:	54d1      	strb	r1, [r2, r3]
 80014d8:	e000      	b.n	80014dc <ssd1306_DrawPixel+0x98>
        return;
 80014da:	bf00      	nop
    }
}
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000048 	.word	0x20000048

080014ec <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4604      	mov	r4, r0
 80014f4:	4638      	mov	r0, r7
 80014f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80014fa:	4623      	mov	r3, r4
 80014fc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	2b1f      	cmp	r3, #31
 8001502:	d902      	bls.n	800150a <ssd1306_WriteChar+0x1e>
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	2b7e      	cmp	r3, #126	; 0x7e
 8001508:	d901      	bls.n	800150e <ssd1306_WriteChar+0x22>
        return 0;
 800150a:	2300      	movs	r3, #0
 800150c:	e079      	b.n	8001602 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <ssd1306_WriteChar+0x120>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	783b      	ldrb	r3, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	2b80      	cmp	r3, #128	; 0x80
 800151a:	dc06      	bgt.n	800152a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800151c:	4b3b      	ldr	r3, [pc, #236]	; (800160c <ssd1306_WriteChar+0x120>)
 800151e:	885b      	ldrh	r3, [r3, #2]
 8001520:	461a      	mov	r2, r3
 8001522:	787b      	ldrb	r3, [r7, #1]
 8001524:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001526:	2b40      	cmp	r3, #64	; 0x40
 8001528:	dd01      	ble.n	800152e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800152a:	2300      	movs	r3, #0
 800152c:	e069      	b.n	8001602 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e04e      	b.n	80015d2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	3b20      	subs	r3, #32
 800153a:	7879      	ldrb	r1, [r7, #1]
 800153c:	fb01 f303 	mul.w	r3, r1, r3
 8001540:	4619      	mov	r1, r3
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	440b      	add	r3, r1
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	e036      	b.n	80015c2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d013      	beq.n	800158c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <ssd1306_WriteChar+0x120>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4413      	add	r3, r2
 8001570:	b2d8      	uxtb	r0, r3
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <ssd1306_WriteChar+0x120>)
 8001574:	885b      	ldrh	r3, [r3, #2]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4413      	add	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff ff5d 	bl	8001444 <ssd1306_DrawPixel>
 800158a:	e017      	b.n	80015bc <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <ssd1306_WriteChar+0x120>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4413      	add	r3, r2
 8001598:	b2d8      	uxtb	r0, r3
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <ssd1306_WriteChar+0x120>)
 800159c:	885b      	ldrh	r3, [r3, #2]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4413      	add	r3, r2
 80015a6:	b2d9      	uxtb	r1, r3
 80015a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	461a      	mov	r2, r3
 80015b8:	f7ff ff44 	bl	8001444 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	3301      	adds	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	783b      	ldrb	r3, [r7, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d3c3      	bcc.n	8001554 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	3301      	adds	r3, #1
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	787b      	ldrb	r3, [r7, #1]
 80015d4:	461a      	mov	r2, r3
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4293      	cmp	r3, r2
 80015da:	d3ab      	bcc.n	8001534 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <ssd1306_WriteChar+0x120>)
 80015de:	881a      	ldrh	r2, [r3, #0]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <ssd1306_WriteChar+0x108>
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	3b20      	subs	r3, #32
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	e001      	b.n	80015f8 <ssd1306_WriteChar+0x10c>
 80015f4:	783b      	ldrb	r3, [r7, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <ssd1306_WriteChar+0x120>)
 80015fe:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3724      	adds	r7, #36	; 0x24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	20000448 	.word	0x20000448

08001610 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af02      	add	r7, sp, #8
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	4638      	mov	r0, r7
 800161a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800161e:	e013      	b.n	8001648 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	7818      	ldrb	r0, [r3, #0]
 8001624:	7e3b      	ldrb	r3, [r7, #24]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	463b      	mov	r3, r7
 800162a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162c:	f7ff ff5e 	bl	80014ec <ssd1306_WriteChar>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d002      	beq.n	8001642 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	e008      	b.n	8001654 <ssd1306_WriteString+0x44>
        }
        str++;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3301      	adds	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e7      	bne.n	8001620 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	781b      	ldrb	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <ssd1306_SetCursor+0x2c>)
 8001672:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001674:	79bb      	ldrb	r3, [r7, #6]
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <ssd1306_SetCursor+0x2c>)
 800167a:	805a      	strh	r2, [r3, #2]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	20000448 	.word	0x20000448

0800168c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001696:	2381      	movs	r3, #129	; 0x81
 8001698:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fdf5 	bl	800128c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fdf1 	bl	800128c <ssd1306_WriteCommand>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80016c4:	23af      	movs	r3, #175	; 0xaf
 80016c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <ssd1306_SetDisplayOn+0x38>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	715a      	strb	r2, [r3, #5]
 80016ce:	e004      	b.n	80016da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80016d0:	23ae      	movs	r3, #174	; 0xae
 80016d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <ssd1306_SetDisplayOn+0x38>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fdd5 	bl	800128c <ssd1306_WriteCommand>
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000448 	.word	0x20000448

080016f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <vApplicationGetIdleTaskMemory+0x2c>)
 8001700:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <vApplicationGetIdleTaskMemory+0x30>)
 8001706:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000450 	.word	0x20000450
 8001720:	200004a4 	.word	0x200004a4

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172a:	f000 fdc1 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f863 	bl	80017f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f000 f95b 	bl	80019ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001736:	f000 f92f 	bl	8001998 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800173a:	f000 f8c9 	bl	80018d0 <MX_I2C1_Init>
  MX_SPI3_Init();
 800173e:	f000 f8f5 	bl	800192c <MX_SPI3_Init>
  MX_FATFS_Init();
 8001742:	f003 fbbb 	bl	8004ebc <MX_FATFS_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uiQueue = xQueueCreate(1, sizeof(eventoDisplay));
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	2001      	movs	r0, #1
 800174c:	f003 fd96 	bl	800527c <xQueueGenericCreate>
 8001750:	4603      	mov	r3, r0
 8001752:	4a1e      	ldr	r2, [pc, #120]	; (80017cc <main+0xa8>)
 8001754:	6013      	str	r3, [r2, #0]
  sequenceQueue = xQueueCreate(6, sizeof(char));
 8001756:	2200      	movs	r2, #0
 8001758:	2101      	movs	r1, #1
 800175a:	2006      	movs	r0, #6
 800175c:	f003 fd8e 	bl	800527c <xQueueGenericCreate>
 8001760:	4603      	mov	r3, r0
 8001762:	4a1b      	ldr	r2, [pc, #108]	; (80017d0 <main+0xac>)
 8001764:	6013      	str	r3, [r2, #0]
  lockQueue = xQueueCreate(1, sizeof(lockState));
 8001766:	2200      	movs	r2, #0
 8001768:	2101      	movs	r1, #1
 800176a:	2001      	movs	r0, #1
 800176c:	f003 fd86 	bl	800527c <xQueueGenericCreate>
 8001770:	4603      	mov	r3, r0
 8001772:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <main+0xb0>)
 8001774:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(ScreenManager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8001776:	2300      	movs	r3, #0
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	2304      	movs	r3, #4
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2300      	movs	r3, #0
 8001780:	2280      	movs	r2, #128	; 0x80
 8001782:	4915      	ldr	r1, [pc, #84]	; (80017d8 <main+0xb4>)
 8001784:	4815      	ldr	r0, [pc, #84]	; (80017dc <main+0xb8>)
 8001786:	f004 f91e 	bl	80059c6 <xTaskCreate>
  xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
 800178a:	2300      	movs	r3, #0
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2303      	movs	r3, #3
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	4912      	ldr	r1, [pc, #72]	; (80017e0 <main+0xbc>)
 8001798:	4812      	ldr	r0, [pc, #72]	; (80017e4 <main+0xc0>)
 800179a:	f004 f914 	bl	80059c6 <xTaskCreate>
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  //xTaskCreate(SavingOnSD, "Tarea 02", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(KeypadScanning, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800179e:	2300      	movs	r3, #0
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	2301      	movs	r3, #1
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	490f      	ldr	r1, [pc, #60]	; (80017e8 <main+0xc4>)
 80017ac:	480f      	ldr	r0, [pc, #60]	; (80017ec <main+0xc8>)
 80017ae:	f004 f90a 	bl	80059c6 <xTaskCreate>
  xTaskCreate(IdleTask, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 80017b2:	2300      	movs	r3, #0
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	2300      	movs	r3, #0
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	2280      	movs	r2, #128	; 0x80
 80017be:	490c      	ldr	r1, [pc, #48]	; (80017f0 <main+0xcc>)
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <main+0xd0>)
 80017c2:	f004 f900 	bl	80059c6 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80017c6:	f004 fa69 	bl	8005c9c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <main+0xa6>
 80017cc:	20000798 	.word	0x20000798
 80017d0:	2000079c 	.word	0x2000079c
 80017d4:	200007a0 	.word	0x200007a0
 80017d8:	08006fac 	.word	0x08006fac
 80017dc:	08002131 	.word	0x08002131
 80017e0:	08006fb8 	.word	0x08006fb8
 80017e4:	0800221d 	.word	0x0800221d
 80017e8:	08006fc4 	.word	0x08006fc4
 80017ec:	08001f49 	.word	0x08001f49
 80017f0:	08006fd0 	.word	0x08006fd0
 80017f4:	08002251 	.word	0x08002251

080017f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b094      	sub	sp, #80	; 0x50
 80017fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	2230      	movs	r2, #48	; 0x30
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f005 fb58 	bl	8006ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800181c:	2300      	movs	r3, #0
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <SystemClock_Config+0xd0>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	4a28      	ldr	r2, [pc, #160]	; (80018c8 <SystemClock_Config+0xd0>)
 8001826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
 800182c:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <SystemClock_Config+0xd0>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <SystemClock_Config+0xd4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001844:	4a21      	ldr	r2, [pc, #132]	; (80018cc <SystemClock_Config+0xd4>)
 8001846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <SystemClock_Config+0xd4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001858:	2302      	movs	r3, #2
 800185a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800185c:	2301      	movs	r3, #1
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001860:	2310      	movs	r3, #16
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001864:	2302      	movs	r3, #2
 8001866:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001868:	2300      	movs	r3, #0
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800186c:	2310      	movs	r3, #16
 800186e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001870:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001874:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001876:	2304      	movs	r3, #4
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800187a:	2307      	movs	r3, #7
 800187c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fcc0 	bl	8003208 <HAL_RCC_OscConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800188e:	f000 f96e 	bl	8001b6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001892:	230f      	movs	r3, #15
 8001894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001896:	2302      	movs	r3, #2
 8001898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2102      	movs	r1, #2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 ff22 	bl	80036f8 <HAL_RCC_ClockConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018ba:	f000 f958 	bl	8001b6e <Error_Handler>
  }
}
 80018be:	bf00      	nop
 80018c0:	3750      	adds	r7, #80	; 0x50
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40007000 	.word	0x40007000

080018d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_I2C1_Init+0x50>)
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <MX_I2C1_Init+0x54>)
 80018d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_I2C1_Init+0x50>)
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <MX_I2C1_Init+0x58>)
 80018de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_I2C1_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_I2C1_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_I2C1_Init+0x50>)
 80018ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_I2C1_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_I2C1_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_I2C1_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_I2C1_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_I2C1_Init+0x50>)
 800190e:	f000 ffcd 	bl	80028ac <HAL_I2C_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001918:	f000 f929 	bl	8001b6e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200006a4 	.word	0x200006a4
 8001924:	40005400 	.word	0x40005400
 8001928:	00061a80 	.word	0x00061a80

0800192c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_SPI3_Init+0x64>)
 8001932:	4a18      	ldr	r2, [pc, #96]	; (8001994 <MX_SPI3_Init+0x68>)
 8001934:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_SPI3_Init+0x64>)
 8001938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800193c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_SPI3_Init+0x64>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_SPI3_Init+0x64>)
 8001946:	2200      	movs	r2, #0
 8001948:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_SPI3_Init+0x64>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_SPI3_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <MX_SPI3_Init+0x64>)
 8001958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800195e:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <MX_SPI3_Init+0x64>)
 8001960:	2210      	movs	r2, #16
 8001962:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <MX_SPI3_Init+0x64>)
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800196a:	4b09      	ldr	r3, [pc, #36]	; (8001990 <MX_SPI3_Init+0x64>)
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <MX_SPI3_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <MX_SPI3_Init+0x64>)
 8001978:	220a      	movs	r2, #10
 800197a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_SPI3_Init+0x64>)
 800197e:	f002 f90d 	bl	8003b9c <HAL_SPI_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001988:	f000 f8f1 	bl	8001b6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200006f8 	.word	0x200006f8
 8001994:	40003c00 	.word	0x40003c00

08001998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <MX_USART2_UART_Init+0x50>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_USART2_UART_Init+0x4c>)
 80019d0:	f002 ffb0 	bl	8004934 <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019da:	f000 f8c8 	bl	8001b6e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000750 	.word	0x20000750
 80019e8:	40004400 	.word	0x40004400

080019ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b4b      	ldr	r3, [pc, #300]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a46      	ldr	r2, [pc, #280]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b44      	ldr	r3, [pc, #272]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a3f      	ldr	r2, [pc, #252]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a38      	ldr	r2, [pc, #224]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a31      	ldr	r2, [pc, #196]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <MX_GPIO_Init+0x154>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2120      	movs	r1, #32
 8001a92:	482c      	ldr	r0, [pc, #176]	; (8001b44 <MX_GPIO_Init+0x158>)
 8001a94:	f000 fef0 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001a9e:	482a      	ldr	r0, [pc, #168]	; (8001b48 <MX_GPIO_Init+0x15c>)
 8001aa0:	f000 feea 	bl	8002878 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4828      	ldr	r0, [pc, #160]	; (8001b4c <MX_GPIO_Init+0x160>)
 8001aaa:	f000 fee5 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ab4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4820      	ldr	r0, [pc, #128]	; (8001b48 <MX_GPIO_Init+0x15c>)
 8001ac6:	f000 fd3b 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001aca:	230f      	movs	r3, #15
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	481a      	ldr	r0, [pc, #104]	; (8001b48 <MX_GPIO_Init+0x15c>)
 8001ade:	f000 fd2f 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4812      	ldr	r0, [pc, #72]	; (8001b44 <MX_GPIO_Init+0x158>)
 8001afa:	f000 fd21 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001afe:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001b02:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_GPIO_Init+0x15c>)
 8001b18:	f000 fd12 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <MX_GPIO_Init+0x160>)
 8001b34:	f000 fd04 	bl	8002540 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020800 	.word	0x40020800
 8001b4c:	40020c00 	.word	0x40020c00

08001b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b62:	f000 fbc7 	bl	80022f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b72:	b672      	cpsid	i
}
 8001b74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <Error_Handler+0x8>

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_MspInit+0x54>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a11      	ldr	r2, [pc, #68]	; (8001bcc <HAL_MspInit+0x54>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_MspInit+0x54>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	603b      	str	r3, [r7, #0]
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_MspInit+0x54>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_MspInit+0x54>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_MspInit+0x54>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	210f      	movs	r1, #15
 8001bba:	f06f 0001 	mvn.w	r0, #1
 8001bbe:	f000 fc95 	bl	80024ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_I2C_MspInit+0x84>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12b      	bne.n	8001c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c0e:	23c0      	movs	r3, #192	; 0xc0
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c12:	2312      	movs	r3, #18
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <HAL_I2C_MspInit+0x8c>)
 8001c2a:	f000 fc89 	bl	8002540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <HAL_SPI_MspInit+0x84>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d12c      	bne.n	8001cdc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_SPI_MspInit+0x88>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <HAL_SPI_MspInit+0x88>)
 8001c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <HAL_SPI_MspInit+0x88>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <HAL_SPI_MspInit+0x88>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a10      	ldr	r2, [pc, #64]	; (8001ce8 <HAL_SPI_MspInit+0x88>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <HAL_SPI_MspInit+0x88>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001cba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ccc:	2306      	movs	r3, #6
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <HAL_SPI_MspInit+0x8c>)
 8001cd8:	f000 fc32 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40003c00 	.word	0x40003c00
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020800 	.word	0x40020800

08001cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_UART_MspInit+0x84>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12b      	bne.n	8001d6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a17      	ldr	r2, [pc, #92]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a10      	ldr	r2, [pc, #64]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <HAL_UART_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d4a:	230c      	movs	r3, #12
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	4805      	ldr	r0, [pc, #20]	; (8001d7c <HAL_UART_MspInit+0x8c>)
 8001d66:	f000 fbeb 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40004400 	.word	0x40004400
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020000 	.word	0x40020000

08001d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	; 0x38
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <HAL_InitTick+0xe8>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	4a33      	ldr	r2, [pc, #204]	; (8001e68 <HAL_InitTick+0xe8>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <HAL_InitTick+0xe8>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dac:	f107 0210 	add.w	r2, r7, #16
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 febe 	bl	8003b38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d103      	bne.n	8001dce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dc6:	f001 fe8f 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8001dca:	6378      	str	r0, [r7, #52]	; 0x34
 8001dcc:	e004      	b.n	8001dd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dce:	f001 fe8b 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dda:	4a24      	ldr	r2, [pc, #144]	; (8001e6c <HAL_InitTick+0xec>)
 8001ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8001de0:	0c9b      	lsrs	r3, r3, #18
 8001de2:	3b01      	subs	r3, #1
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_InitTick+0xf0>)
 8001de8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_InitTick+0xf0>)
 8001df0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001df4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_InitTick+0xf0>)
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_InitTick+0xf0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_InitTick+0xf0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_InitTick+0xf0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001e0e:	4818      	ldr	r0, [pc, #96]	; (8001e70 <HAL_InitTick+0xf0>)
 8001e10:	f002 fb1c 	bl	800444c <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11b      	bne.n	8001e5a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001e22:	4813      	ldr	r0, [pc, #76]	; (8001e70 <HAL_InitTick+0xf0>)
 8001e24:	f002 fb6c 	bl	8004500 <HAL_TIM_Base_Start_IT>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d111      	bne.n	8001e5a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e36:	201c      	movs	r0, #28
 8001e38:	f000 fb74 	bl	8002524 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	d808      	bhi.n	8001e54 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001e42:	2200      	movs	r2, #0
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	201c      	movs	r0, #28
 8001e48:	f000 fb50 	bl	80024ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4c:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_InitTick+0xf4>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e002      	b.n	8001e5a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3738      	adds	r7, #56	; 0x38
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	200007a4 	.word	0x200007a4
 8001e74:	20000008 	.word	0x20000008

08001e78 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <SDTimer_Handler+0x40>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <SDTimer_Handler+0x1c>
    Timer1--;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <SDTimer_Handler+0x40>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <SDTimer_Handler+0x40>)
 8001e92:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <SDTimer_Handler+0x44>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <SDTimer_Handler+0x34>
    Timer2--;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <SDTimer_Handler+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SDTimer_Handler+0x44>)
 8001eaa:	701a      	strb	r2, [r3, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200007ed 	.word	0x200007ed
 8001ebc:	200007ee 	.word	0x200007ee

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <HardFault_Handler+0x4>

08001ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <MemManage_Handler+0x4>

08001ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <UsageFault_Handler+0x4>

08001ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <TIM2_IRQHandler+0x30>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <TIM2_IRQHandler+0x30>)
 8001efc:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <TIM2_IRQHandler+0x30>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	d904      	bls.n	8001f12 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <TIM2_IRQHandler+0x30>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001f0e:	f7ff ffb3 	bl	8001e78 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f12:	4803      	ldr	r0, [pc, #12]	; (8001f20 <TIM2_IRQHandler+0x34>)
 8001f14:	f002 fb56 	bl	80045c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200007ec 	.word	0x200007ec
 8001f20:	200007a4 	.word	0x200007a4

08001f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <SystemInit+0x20>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <SystemInit+0x20>)
 8001f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <KeypadScanning>:

void VoiceProcessing(void *pvParameters){

}

void KeypadScanning (void *pvParameters){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	eventoDisplay eventoEnviado;
	uint8_t keyPressed;
	FSM *FSM1 = &StateMachine;
 8001f50:	4b75      	ldr	r3, [pc, #468]	; (8002128 <KeypadScanning+0x1e0>)
 8001f52:	60fb      	str	r3, [r7, #12]
	FSM1->CurrentState = ESPERA_DIGITO_1;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	71da      	strb	r2, [r3, #7]
	/*Inicio el funcionamiento con la pantalla inicial*/
	eventoEnviado = PANTALLA_INGRESE_CLAVE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	72bb      	strb	r3, [r7, #10]
	xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 8001f5e:	4b73      	ldr	r3, [pc, #460]	; (800212c <KeypadScanning+0x1e4>)
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	f107 010a 	add.w	r1, r7, #10
 8001f66:	2300      	movs	r3, #0
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	f003 f9e0 	bl	8005330 <xQueueGenericSend>
	while(1){
		switch(FSM1->CurrentState){
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	79db      	ldrb	r3, [r3, #7]
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	f200 80ba 	bhi.w	80020ee <KeypadScanning+0x1a6>
 8001f7a:	a201      	add	r2, pc, #4	; (adr r2, 8001f80 <KeypadScanning+0x38>)
 8001f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f80:	08001fa5 	.word	0x08001fa5
 8001f84:	08001ffd 	.word	0x08001ffd
 8001f88:	08002009 	.word	0x08002009
 8001f8c:	08002015 	.word	0x08002015
 8001f90:	08002021 	.word	0x08002021
 8001f94:	0800202d 	.word	0x0800202d
 8001f98:	08002039 	.word	0x08002039
 8001f9c:	080020c3 	.word	0x080020c3
 8001fa0:	080020d9 	.word	0x080020d9
		case ESPERA_DIGITO_1:
			/*Parseo la primer tecla*/
			keyPressed = GetKey();
 8001fa4:	f7fe ffce 	bl	8000f44 <GetKey>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	72fb      	strb	r3, [r7, #11]
			if(keyPressed != 0){
 8001fac:	7afb      	ldrb	r3, [r7, #11]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d021      	beq.n	8001ff6 <KeypadScanning+0xae>
            	if((keyPressed != BORRAR_DIGITO) && (keyPressed != ENTER)){
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	2b23      	cmp	r3, #35	; 0x23
 8001fb6:	f000 80a5 	beq.w	8002104 <KeypadScanning+0x1bc>
 8001fba:	7afb      	ldrb	r3, [r7, #11]
 8001fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8001fbe:	f000 80a1 	beq.w	8002104 <KeypadScanning+0x1bc>
					FSM1->CurrentIndex = 0;												//Reinicializo indice del buffer
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	719a      	strb	r2, [r3, #6]
					FSM1->Buffer[FSM1->CurrentIndex] = keyPressed;						//Guardo el primer digito
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	799b      	ldrb	r3, [r3, #6]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	7afa      	ldrb	r2, [r7, #11]
 8001fd2:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	799b      	ldrb	r3, [r3, #6]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();								//Guardo tiempo de inicio para el timeout
 8001fe0:	f003 ff66 	bl	8005eb0 <xTaskGetTickCount>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState = ESPERA_DIGITO_2;								//Config estado para parsear la sig tecla
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2201      	movs	r2, #1
 8001fee:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;							//Defino indicaciones para el display
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	72bb      	strb	r3, [r7, #10]
            	}
			}
			else{
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
			}
			break;
 8001ff4:	e086      	b.n	8002104 <KeypadScanning+0x1bc>
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	72bb      	strb	r3, [r7, #10]
			break;
 8001ffa:	e083      	b.n	8002104 <KeypadScanning+0x1bc>
		case ESPERA_DIGITO_2:
			eventoEnviado = HandleInput(FSM1);
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7fe ff3f 	bl	8000e80 <HandleInput>
 8002002:	4603      	mov	r3, r0
 8002004:	72bb      	strb	r3, [r7, #10]
			break;
 8002006:	e080      	b.n	800210a <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_3:
			eventoEnviado = HandleInput(FSM1);
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f7fe ff39 	bl	8000e80 <HandleInput>
 800200e:	4603      	mov	r3, r0
 8002010:	72bb      	strb	r3, [r7, #10]
			break;
 8002012:	e07a      	b.n	800210a <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_4:
			eventoEnviado = HandleInput(FSM1);
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7fe ff33 	bl	8000e80 <HandleInput>
 800201a:	4603      	mov	r3, r0
 800201c:	72bb      	strb	r3, [r7, #10]
			break;
 800201e:	e074      	b.n	800210a <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_5:
			eventoEnviado = HandleInput(FSM1);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7fe ff2d 	bl	8000e80 <HandleInput>
 8002026:	4603      	mov	r3, r0
 8002028:	72bb      	strb	r3, [r7, #10]
			break;
 800202a:	e06e      	b.n	800210a <KeypadScanning+0x1c2>
		case ESPERA_DIGITO_6:
			eventoEnviado = HandleInput(FSM1);
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7fe ff27 	bl	8000e80 <HandleInput>
 8002032:	4603      	mov	r3, r0
 8002034:	72bb      	strb	r3, [r7, #10]
			break;
 8002036:	e068      	b.n	800210a <KeypadScanning+0x1c2>
		case ESPERA_ENTER:
			if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8002038:	f003 ff3a 	bl	8005eb0 <xTaskGetTickCount>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3287 	movw	r2, #4999	; 0x1387
 8002048:	4293      	cmp	r3, r2
 800204a:	d834      	bhi.n	80020b6 <KeypadScanning+0x16e>
				keyPressed = GetKey();
 800204c:	f7fe ff7a 	bl	8000f44 <GetKey>
 8002050:	4603      	mov	r3, r0
 8002052:	72fb      	strb	r3, [r7, #11]
				if(keyPressed != 0){
 8002054:	7afb      	ldrb	r3, [r7, #11]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d02a      	beq.n	80020b0 <KeypadScanning+0x168>
					if(keyPressed == BORRAR_DIGITO){
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	2b23      	cmp	r3, #35	; 0x23
 800205e:	d119      	bne.n	8002094 <KeypadScanning+0x14c>
						FSM1->CurrentIndex--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	799b      	ldrb	r3, [r3, #6]
 8002064:	3b01      	subs	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	719a      	strb	r2, [r3, #6]
						FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	799b      	ldrb	r3, [r3, #6]
 8002070:	461a      	mov	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2100      	movs	r1, #0
 8002076:	5499      	strb	r1, [r3, r2]
						FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 8002078:	f003 ff1a 	bl	8005eb0 <xTaskGetTickCount>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	609a      	str	r2, [r3, #8]
						FSM1->CurrentState--;									//Vuelvo al estado anterior
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	79db      	ldrb	r3, [r3, #7]
 8002086:	3b01      	subs	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	71da      	strb	r2, [r3, #7]
						eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 800208e:	2303      	movs	r3, #3
 8002090:	72bb      	strb	r3, [r7, #10]
			else{
				FSM1->CurrentState = TIMEOUT;
				eventoEnviado = PANTALLA_TIMEOUT;

			}
			break;
 8002092:	e039      	b.n	8002108 <KeypadScanning+0x1c0>
						if(keyPressed == ENTER){
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	2b2a      	cmp	r3, #42	; 0x2a
 8002098:	d136      	bne.n	8002108 <KeypadScanning+0x1c0>
							eventoEnviado = PANTALLA_ACCESO_CONCEDIDO;
 800209a:	2304      	movs	r3, #4
 800209c:	72bb      	strb	r3, [r7, #10]
							ClearBuffer(FSM1->Buffer, 6);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2106      	movs	r1, #6
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe ffe0 	bl	8001068 <ClearBuffer>
							FSM1->CurrentState = ESPERA_DIGITO_1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	71da      	strb	r2, [r3, #7]
			break;
 80020ae:	e02b      	b.n	8002108 <KeypadScanning+0x1c0>
					eventoEnviado = PANTALLA_IDLE;								//No actualizar la pantalla
 80020b0:	2300      	movs	r3, #0
 80020b2:	72bb      	strb	r3, [r7, #10]
			break;
 80020b4:	e028      	b.n	8002108 <KeypadScanning+0x1c0>
				FSM1->CurrentState = TIMEOUT;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2207      	movs	r2, #7
 80020ba:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_TIMEOUT;
 80020bc:	2306      	movs	r3, #6
 80020be:	72bb      	strb	r3, [r7, #10]
			break;
 80020c0:	e022      	b.n	8002108 <KeypadScanning+0x1c0>
		case TIMEOUT:
			ClearBuffer(FSM1->Buffer, 6);								//Limpio buffer y vuelvo a estado inicial
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2106      	movs	r1, #6
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe ffce 	bl	8001068 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	72bb      	strb	r3, [r7, #10]
			break;
 80020d6:	e018      	b.n	800210a <KeypadScanning+0x1c2>
		case INCOMPLETO:
			ClearBuffer(FSM1->Buffer, 6);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2106      	movs	r1, #6
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe ffc3 	bl	8001068 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	72bb      	strb	r3, [r7, #10]
			break;
 80020ec:	e00d      	b.n	800210a <KeypadScanning+0x1c2>
		default:
			ClearBuffer(FSM1->Buffer, 6);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2106      	movs	r1, #6
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe ffb8 	bl	8001068 <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	72bb      	strb	r3, [r7, #10]
			break;
 8002102:	e002      	b.n	800210a <KeypadScanning+0x1c2>
			break;
 8002104:	bf00      	nop
 8002106:	e000      	b.n	800210a <KeypadScanning+0x1c2>
			break;
 8002108:	bf00      	nop
		}
		/*Si el evento es PANTALLA_IDLE no se envian indicaciones al display*/
		/*En ese caso se deja la pantalla previa*/
		if(eventoEnviado != PANTALLA_IDLE) xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 800210a:	7abb      	ldrb	r3, [r7, #10]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f43f af2f 	beq.w	8001f70 <KeypadScanning+0x28>
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <KeypadScanning+0x1e4>)
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	f107 010a 	add.w	r1, r7, #10
 800211a:	2300      	movs	r3, #0
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	f003 f906 	bl	8005330 <xQueueGenericSend>
		switch(FSM1->CurrentState){
 8002124:	e724      	b.n	8001f70 <KeypadScanning+0x28>
 8002126:	bf00      	nop
 8002128:	200007f0 	.word	0x200007f0
 800212c:	20000798 	.word	0x20000798

08002130 <ScreenManager>:
	}
}

void ScreenManager  (void *pvParameters){
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
	eventoDisplay eventoRecibido = PANTALLA_INGRESE_CLAVE;
 8002138:	2301      	movs	r3, #1
 800213a:	737b      	strb	r3, [r7, #13]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 800213c:	230a      	movs	r3, #10
 800213e:	73fb      	strb	r3, [r7, #15]
	uint8_t y = 26;
 8002140:	231a      	movs	r3, #26
 8002142:	73bb      	strb	r3, [r7, #14]
	displayInit();
 8002144:	f7fe ffb9 	bl	80010ba <displayInit>
	while(1){
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <ScreenManager+0xdc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f107 010d 	add.w	r1, r7, #13
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	4618      	mov	r0, r3
 8002156:	f003 f9e9 	bl	800552c <xQueueReceive>
		switch(eventoRecibido){
 800215a:	7b7b      	ldrb	r3, [r7, #13]
 800215c:	2b07      	cmp	r3, #7
 800215e:	d853      	bhi.n	8002208 <ScreenManager+0xd8>
 8002160:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <ScreenManager+0x38>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	08002209 	.word	0x08002209
 800216c:	08002189 	.word	0x08002189
 8002170:	08002193 	.word	0x08002193
 8002174:	080021b9 	.word	0x080021b9
 8002178:	080021fb 	.word	0x080021fb
 800217c:	08002209 	.word	0x08002209
 8002180:	080021df 	.word	0x080021df
 8002184:	080021ed 	.word	0x080021ed
		case PANTALLA_INGRESE_CLAVE:
			x = 10;
 8002188:	230a      	movs	r3, #10
 800218a:	73fb      	strb	r3, [r7, #15]
			displayInsertKeyMsg();
 800218c:	f7fe ff9c 	bl	80010c8 <displayInsertKeyMsg>
			break;
 8002190:	e03b      	b.n	800220a <ScreenManager+0xda>
		case PANTALLA_AÑADIR_ENTRADA:
			ssd1306_SetCursor(x, y);
 8002192:	7bba      	ldrb	r2, [r7, #14]
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fa5f 	bl	800165c <ssd1306_SetCursor>
			ssd1306_WriteString("*", Font_16x26, White);				//Añade *'s para representar ingreso de digitos
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <ScreenManager+0xe0>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	9200      	str	r2, [sp, #0]
 80021a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021a6:	481b      	ldr	r0, [pc, #108]	; (8002214 <ScreenManager+0xe4>)
 80021a8:	f7ff fa32 	bl	8001610 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80021ac:	f7ff f922 	bl	80013f4 <ssd1306_UpdateScreen>
			x += 16;													//Avanzo una posición en pantalla acorde al font seleccionado
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	3310      	adds	r3, #16
 80021b4:	73fb      	strb	r3, [r7, #15]
			break;
 80021b6:	e028      	b.n	800220a <ScreenManager+0xda>
		case PANTALLA_BORRAR_ENTRADA:
			x -= 16;													//Retrocedo una posicion en pantalla acorde al font seleccionado
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3b10      	subs	r3, #16
 80021bc:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(x, y);
 80021be:	7bba      	ldrb	r2, [r7, #14]
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fa49 	bl	800165c <ssd1306_SetCursor>
			ssd1306_WriteString(" ", Font_16x26, White);				//En caso de borrar relleno con espacio en blanco
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <ScreenManager+0xe0>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	9200      	str	r2, [sp, #0]
 80021d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d2:	4811      	ldr	r0, [pc, #68]	; (8002218 <ScreenManager+0xe8>)
 80021d4:	f7ff fa1c 	bl	8001610 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80021d8:	f7ff f90c 	bl	80013f4 <ssd1306_UpdateScreen>
			break;
 80021dc:	e015      	b.n	800220a <ScreenManager+0xda>
		case PANTALLA_TIMEOUT:
			displayTimeoutMsg();
 80021de:	f7fe ffad 	bl	800113c <displayTimeoutMsg>
			HAL_Delay(3000);											//Timer bloqueante para evitar el ingreso de otra secuencia
 80021e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021e6:	f000 f8a5 	bl	8002334 <HAL_Delay>
			break;														//mientras se muestra el mensaje.
 80021ea:	e00e      	b.n	800220a <ScreenManager+0xda>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			displayIncompleteMsg();
 80021ec:	f7fe ffc8 	bl	8001180 <displayIncompleteMsg>
			HAL_Delay(3000);
 80021f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80021f4:	f000 f89e 	bl	8002334 <HAL_Delay>
			break;
 80021f8:	e007      	b.n	800220a <ScreenManager+0xda>
		case PANTALLA_ACCESO_CONCEDIDO:
			displayAccessState();
 80021fa:	f7ff f80b 	bl	8001214 <displayAccessState>
			HAL_Delay(3000);
 80021fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002202:	f000 f897 	bl	8002334 <HAL_Delay>
			break;
 8002206:	e000      	b.n	800220a <ScreenManager+0xda>
			break;
		case PANTALLA_IDLE:
			/*No hacer nada*/
			break;
		default:
			break;
 8002208:	bf00      	nop
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 800220a:	e79d      	b.n	8002148 <ScreenManager+0x18>
 800220c:	20000798 	.word	0x20000798
 8002210:	080090e4 	.word	0x080090e4
 8002214:	08006fdc 	.word	0x08006fdc
 8002218:	08006fe0 	.word	0x08006fe0

0800221c <LockControl>:
		}
	vPortFree(userName);															//Libero memoria utilizada
	}
}

void LockControl(void *pvParameters){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	lockState magneticLockState = LOCK_ON;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
	while(1){
		xQueueReceive(lockQueue, &magneticLockState, portMAX_DELAY);
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <LockControl+0x30>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f107 010f 	add.w	r1, r7, #15
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	4618      	mov	r0, r3
 8002236:	f003 f979 	bl	800552c <xQueueReceive>
		if(magneticLockState == LOCK_OFF){
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f3      	bne.n	8002228 <LockControl+0xc>
			openLock();
 8002240:	f7fe ff2d 	bl	800109e <openLock>
			/*Esperar un tiempo*/
			closeLock();
 8002244:	f7fe ff32 	bl	80010ac <closeLock>
		xQueueReceive(lockQueue, &magneticLockState, portMAX_DELAY);
 8002248:	e7ee      	b.n	8002228 <LockControl+0xc>
 800224a:	bf00      	nop
 800224c:	200007a0 	.word	0x200007a0

08002250 <IdleTask>:
		}
	}
}

void IdleTask(void *pvParameters){
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	while(1){
 8002258:	e7fe      	b.n	8002258 <IdleTask+0x8>
	...

0800225c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800225c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002260:	f7ff fe60 	bl	8001f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	; (800229c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800228a:	f004 fe1f 	bl	8006ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800228e:	f7ff fa49 	bl	8001724 <main>
  bx  lr    
 8002292:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002294:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80022a0:	08009118 	.word	0x08009118
  ldr r2, =_sbss
 80022a4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80022a8:	20004568 	.word	0x20004568

080022ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_Init+0x40>)
 80022ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0a      	ldr	r2, [pc, #40]	; (80022f0 <HAL_Init+0x40>)
 80022c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_Init+0x40>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 f8fc 	bl	80024d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	200f      	movs	r0, #15
 80022e0:	f7ff fd4e 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e4:	f7ff fc48 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	2000000c 	.word	0x2000000c
 8002318:	200007fc 	.word	0x200007fc

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200007fc 	.word	0x200007fc

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2000000c 	.word	0x2000000c

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	; (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
         );
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff4c 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fe:	f7ff ff61 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002502:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	6978      	ldr	r0, [r7, #20]
 800250a:	f7ff ffb1 	bl	8002470 <NVIC_EncodePriority>
 800250e:	4602      	mov	r2, r0
 8002510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff80 	bl	800241c <__NVIC_SetPriority>
}
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff54 	bl	80023e0 <__NVIC_EnableIRQ>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	e159      	b.n	8002810 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800255c:	2201      	movs	r2, #1
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	429a      	cmp	r2, r3
 8002576:	f040 8148 	bne.w	800280a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d005      	beq.n	8002592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	2b02      	cmp	r3, #2
 8002590:	d130      	bne.n	80025f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2203      	movs	r2, #3
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c8:	2201      	movs	r2, #1
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0201 	and.w	r2, r3, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d017      	beq.n	8002630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d123      	bne.n	8002684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	08da      	lsrs	r2, r3, #3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3208      	adds	r2, #8
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0203 	and.w	r2, r3, #3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80a2 	beq.w	800280a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b57      	ldr	r3, [pc, #348]	; (8002828 <HAL_GPIO_Init+0x2e8>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a56      	ldr	r2, [pc, #344]	; (8002828 <HAL_GPIO_Init+0x2e8>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b54      	ldr	r3, [pc, #336]	; (8002828 <HAL_GPIO_Init+0x2e8>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e2:	4a52      	ldr	r2, [pc, #328]	; (800282c <HAL_GPIO_Init+0x2ec>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a49      	ldr	r2, [pc, #292]	; (8002830 <HAL_GPIO_Init+0x2f0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x202>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a48      	ldr	r2, [pc, #288]	; (8002834 <HAL_GPIO_Init+0x2f4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x1fe>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a47      	ldr	r2, [pc, #284]	; (8002838 <HAL_GPIO_Init+0x2f8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x1fa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a46      	ldr	r2, [pc, #280]	; (800283c <HAL_GPIO_Init+0x2fc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x1f6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a45      	ldr	r2, [pc, #276]	; (8002840 <HAL_GPIO_Init+0x300>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x1f2>
 800272e:	2304      	movs	r3, #4
 8002730:	e008      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002732:	2307      	movs	r3, #7
 8002734:	e006      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002736:	2303      	movs	r3, #3
 8002738:	e004      	b.n	8002744 <HAL_GPIO_Init+0x204>
 800273a:	2302      	movs	r3, #2
 800273c:	e002      	b.n	8002744 <HAL_GPIO_Init+0x204>
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_GPIO_Init+0x204>
 8002742:	2300      	movs	r3, #0
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	f002 0203 	and.w	r2, r2, #3
 800274a:	0092      	lsls	r2, r2, #2
 800274c:	4093      	lsls	r3, r2
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002754:	4935      	ldr	r1, [pc, #212]	; (800282c <HAL_GPIO_Init+0x2ec>)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	3302      	adds	r3, #2
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_GPIO_Init+0x304>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002786:	4a2f      	ldr	r2, [pc, #188]	; (8002844 <HAL_GPIO_Init+0x304>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800278c:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <HAL_GPIO_Init+0x304>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b0:	4a24      	ldr	r2, [pc, #144]	; (8002844 <HAL_GPIO_Init+0x304>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_GPIO_Init+0x304>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027da:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <HAL_GPIO_Init+0x304>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_GPIO_Init+0x304>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002804:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <HAL_GPIO_Init+0x304>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b0f      	cmp	r3, #15
 8002814:	f67f aea2 	bls.w	800255c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800
 800282c:	40013800 	.word	0x40013800
 8002830:	40020000 	.word	0x40020000
 8002834:	40020400 	.word	0x40020400
 8002838:	40020800 	.word	0x40020800
 800283c:	40020c00 	.word	0x40020c00
 8002840:	40021000 	.word	0x40021000
 8002844:	40013c00 	.word	0x40013c00

08002848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	e001      	b.n	800286a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
 8002884:	4613      	mov	r3, r2
 8002886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002888:	787b      	ldrb	r3, [r7, #1]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800288e:	887a      	ldrh	r2, [r7, #2]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002894:	e003      	b.n	800289e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	041a      	lsls	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e12b      	b.n	8002b16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff f97c 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2224      	movs	r2, #36	; 0x24
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800290e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002910:	f001 f8ea 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8002914:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a81      	ldr	r2, [pc, #516]	; (8002b20 <HAL_I2C_Init+0x274>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d807      	bhi.n	8002930 <HAL_I2C_Init+0x84>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a80      	ldr	r2, [pc, #512]	; (8002b24 <HAL_I2C_Init+0x278>)
 8002924:	4293      	cmp	r3, r2
 8002926:	bf94      	ite	ls
 8002928:	2301      	movls	r3, #1
 800292a:	2300      	movhi	r3, #0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	e006      	b.n	800293e <HAL_I2C_Init+0x92>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a7d      	ldr	r2, [pc, #500]	; (8002b28 <HAL_I2C_Init+0x27c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	bf94      	ite	ls
 8002938:	2301      	movls	r3, #1
 800293a:	2300      	movhi	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0e7      	b.n	8002b16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a78      	ldr	r2, [pc, #480]	; (8002b2c <HAL_I2C_Init+0x280>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	0c9b      	lsrs	r3, r3, #18
 8002950:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a6a      	ldr	r2, [pc, #424]	; (8002b20 <HAL_I2C_Init+0x274>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d802      	bhi.n	8002980 <HAL_I2C_Init+0xd4>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3301      	adds	r3, #1
 800297e:	e009      	b.n	8002994 <HAL_I2C_Init+0xe8>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002986:	fb02 f303 	mul.w	r3, r2, r3
 800298a:	4a69      	ldr	r2, [pc, #420]	; (8002b30 <HAL_I2C_Init+0x284>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	3301      	adds	r3, #1
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	430b      	orrs	r3, r1
 800299a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	495c      	ldr	r1, [pc, #368]	; (8002b20 <HAL_I2C_Init+0x274>)
 80029b0:	428b      	cmp	r3, r1
 80029b2:	d819      	bhi.n	80029e8 <HAL_I2C_Init+0x13c>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	1e59      	subs	r1, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029c8:	400b      	ands	r3, r1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_I2C_Init+0x138>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1e59      	subs	r1, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029e2:	e051      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 80029e4:	2304      	movs	r3, #4
 80029e6:	e04f      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <HAL_I2C_Init+0x168>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1e58      	subs	r0, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	460b      	mov	r3, r1
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	440b      	add	r3, r1
 80029fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e012      	b.n	8002a3a <HAL_I2C_Init+0x18e>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1e58      	subs	r0, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	0099      	lsls	r1, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Init+0x196>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e022      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10e      	bne.n	8002a68 <HAL_I2C_Init+0x1bc>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	1e58      	subs	r0, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	440b      	add	r3, r1
 8002a58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a66:	e00f      	b.n	8002a88 <HAL_I2C_Init+0x1dc>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	6809      	ldr	r1, [r1, #0]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ab6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	6911      	ldr	r1, [r2, #16]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68d2      	ldr	r2, [r2, #12]
 8002ac2:	4311      	orrs	r1, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	000186a0 	.word	0x000186a0
 8002b24:	001e847f 	.word	0x001e847f
 8002b28:	003d08ff 	.word	0x003d08ff
 8002b2c:	431bde83 	.word	0x431bde83
 8002b30:	10624dd3 	.word	0x10624dd3

08002b34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	817b      	strh	r3, [r7, #10]
 8002b46:	460b      	mov	r3, r1
 8002b48:	813b      	strh	r3, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b4e:	f7ff fbe5 	bl	800231c <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	f040 80d9 	bne.w	8002d14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2319      	movs	r3, #25
 8002b68:	2201      	movs	r2, #1
 8002b6a:	496d      	ldr	r1, [pc, #436]	; (8002d20 <HAL_I2C_Mem_Write+0x1ec>)
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f971 	bl	8002e54 <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0cc      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Mem_Write+0x56>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0c5      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d007      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	; 0x21
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a4d      	ldr	r2, [pc, #308]	; (8002d24 <HAL_I2C_Mem_Write+0x1f0>)
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bf2:	88f8      	ldrh	r0, [r7, #6]
 8002bf4:	893a      	ldrh	r2, [r7, #8]
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	4603      	mov	r3, r0
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f890 	bl	8002d28 <I2C_RequestMemoryWrite>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d052      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e081      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fa36 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d107      	bne.n	8002c3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06b      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d11b      	bne.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	781a      	ldrb	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1aa      	bne.n	8002c12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fa29 	bl	8003118 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e016      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e000      	b.n	8002d16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002d14:	2302      	movs	r3, #2
  }
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	00100002 	.word	0x00100002
 8002d24:	ffff0000 	.word	0xffff0000

08002d28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	813b      	strh	r3, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f878 	bl	8002e54 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00d      	beq.n	8002d86 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d78:	d103      	bne.n	8002d82 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e05f      	b.n	8002e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	492d      	ldr	r1, [pc, #180]	; (8002e50 <I2C_RequestMemoryWrite+0x128>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f8d3 	bl	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e04c      	b.n	8002e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	6a39      	ldr	r1, [r7, #32]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f95e 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00d      	beq.n	8002dee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d107      	bne.n	8002dea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e02b      	b.n	8002e46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d105      	bne.n	8002e00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df4:	893b      	ldrh	r3, [r7, #8]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e021      	b.n	8002e44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e10:	6a39      	ldr	r1, [r7, #32]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f938 	bl	8003088 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d107      	bne.n	8002e36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e005      	b.n	8002e46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3a:	893b      	ldrh	r3, [r7, #8]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	00010002 	.word	0x00010002

08002e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	4613      	mov	r3, r2
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e64:	e048      	b.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6c:	d044      	beq.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6e:	f7ff fa55 	bl	800231c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d302      	bcc.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d139      	bne.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d10d      	bne.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	43da      	mvns	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	e00c      	b.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	43da      	mvns	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d116      	bne.n	8002ef8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e023      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10d      	bne.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	e00c      	b.n	8002f38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d093      	beq.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f56:	e071      	b.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d123      	bne.n	8002fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f043 0204 	orr.w	r2, r3, #4
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e067      	b.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d041      	beq.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb8:	f7ff f9b0 	bl	800231c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d302      	bcc.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d136      	bne.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	0c1b      	lsrs	r3, r3, #16
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d10c      	bne.n	8002ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf14      	ite	ne
 8002fea:	2301      	movne	r3, #1
 8002fec:	2300      	moveq	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	e00b      	b.n	800300a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	43da      	mvns	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf14      	ite	ne
 8003004:	2301      	movne	r3, #1
 8003006:	2300      	moveq	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e021      	b.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10c      	bne.n	8003060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	43da      	mvns	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4013      	ands	r3, r2
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e00b      	b.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	43da      	mvns	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4013      	ands	r3, r2
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	bf14      	ite	ne
 8003072:	2301      	movne	r3, #1
 8003074:	2300      	moveq	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f af6d 	bne.w	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003094:	e034      	b.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f886 	bl	80031a8 <I2C_IsAcknowledgeFailed>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e034      	b.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d028      	beq.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7ff f935 	bl	800231c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d11d      	bne.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d016      	beq.n	8003100 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e007      	b.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b80      	cmp	r3, #128	; 0x80
 800310c:	d1c3      	bne.n	8003096 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003124:	e034      	b.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f83e 	bl	80031a8 <I2C_IsAcknowledgeFailed>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e034      	b.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d028      	beq.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7ff f8ed 	bl	800231c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11d      	bne.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d016      	beq.n	8003190 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e007      	b.n	80031a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b04      	cmp	r3, #4
 800319c:	d1c3      	bne.n	8003126 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031be:	d11b      	bne.n	80031f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	f043 0204 	orr.w	r2, r3, #4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e267      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d075      	beq.n	8003312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003226:	4b88      	ldr	r3, [pc, #544]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b04      	cmp	r3, #4
 8003230:	d00c      	beq.n	800324c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003232:	4b85      	ldr	r3, [pc, #532]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800323a:	2b08      	cmp	r3, #8
 800323c:	d112      	bne.n	8003264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323e:	4b82      	ldr	r3, [pc, #520]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324a:	d10b      	bne.n	8003264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	4b7e      	ldr	r3, [pc, #504]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d05b      	beq.n	8003310 <HAL_RCC_OscConfig+0x108>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d157      	bne.n	8003310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e242      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x74>
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e01d      	b.n	80032b8 <HAL_RCC_OscConfig+0xb0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x98>
 8003286:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a6f      	ldr	r2, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800328c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a6c      	ldr	r2, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0xb0>
 80032a0:	4b69      	ldr	r3, [pc, #420]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a68      	ldr	r2, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	4b66      	ldr	r3, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a65      	ldr	r2, [pc, #404]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d013      	beq.n	80032e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff f82c 	bl	800231c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7ff f828 	bl	800231c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e207      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCC_OscConfig+0xc0>
 80032e6:	e014      	b.n	8003312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7ff f818 	bl	800231c <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032f0:	f7ff f814 	bl	800231c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b64      	cmp	r3, #100	; 0x64
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1f3      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003302:	4b51      	ldr	r3, [pc, #324]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0xe8>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d063      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003332:	2b08      	cmp	r3, #8
 8003334:	d11c      	bne.n	8003370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003336:	4b44      	ldr	r3, [pc, #272]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_RCC_OscConfig+0x152>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e1c7      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335a:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4937      	ldr	r1, [pc, #220]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	e03a      	b.n	80033e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <HAL_RCC_OscConfig+0x244>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fe ffcd 	bl	800231c <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003386:	f7fe ffc9 	bl	800231c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e1a8      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a4:	4b28      	ldr	r3, [pc, #160]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4925      	ldr	r1, [pc, #148]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]
 80033b8:	e015      	b.n	80033e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCC_OscConfig+0x244>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe ffac 	bl	800231c <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c8:	f7fe ffa8 	bl	800231c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e187      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d036      	beq.n	8003460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d016      	beq.n	8003428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_RCC_OscConfig+0x248>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fe ff8c 	bl	800231c <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003408:	f7fe ff88 	bl	800231c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e167      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_OscConfig+0x240>)
 800341c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x200>
 8003426:	e01b      	b.n	8003460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_RCC_OscConfig+0x248>)
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342e:	f7fe ff75 	bl	800231c <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003434:	e00e      	b.n	8003454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003436:	f7fe ff71 	bl	800231c <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d907      	bls.n	8003454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e150      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
 8003448:	40023800 	.word	0x40023800
 800344c:	42470000 	.word	0x42470000
 8003450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003454:	4b88      	ldr	r3, [pc, #544]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ea      	bne.n	8003436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8097 	beq.w	800359c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b81      	ldr	r3, [pc, #516]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10f      	bne.n	800349e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	4b7d      	ldr	r3, [pc, #500]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a7c      	ldr	r2, [pc, #496]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b7a      	ldr	r3, [pc, #488]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b77      	ldr	r3, [pc, #476]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d118      	bne.n	80034dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034aa:	4b74      	ldr	r3, [pc, #464]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a73      	ldr	r2, [pc, #460]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b6:	f7fe ff31 	bl	800231c <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034be:	f7fe ff2d 	bl	800231c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e10c      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCC_OscConfig+0x474>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2ea>
 80034e4:	4b64      	ldr	r3, [pc, #400]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a63      	ldr	r2, [pc, #396]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	e01c      	b.n	800352c <HAL_RCC_OscConfig+0x324>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x30c>
 80034fa:	4b5f      	ldr	r3, [pc, #380]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a5e      	ldr	r2, [pc, #376]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	4b5c      	ldr	r3, [pc, #368]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a5b      	ldr	r2, [pc, #364]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0x324>
 8003514:	4b58      	ldr	r3, [pc, #352]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a57      	ldr	r2, [pc, #348]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
 8003520:	4b55      	ldr	r3, [pc, #340]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a54      	ldr	r2, [pc, #336]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003526:	f023 0304 	bic.w	r3, r3, #4
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003534:	f7fe fef2 	bl	800231c <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353a:	e00a      	b.n	8003552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353c:	f7fe feee 	bl	800231c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f241 3288 	movw	r2, #5000	; 0x1388
 800354a:	4293      	cmp	r3, r2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e0cb      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003552:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0ee      	beq.n	800353c <HAL_RCC_OscConfig+0x334>
 800355e:	e014      	b.n	800358a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003560:	f7fe fedc 	bl	800231c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003566:	e00a      	b.n	800357e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003568:	f7fe fed8 	bl	800231c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f241 3288 	movw	r2, #5000	; 0x1388
 8003576:	4293      	cmp	r3, r2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e0b5      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357e:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1ee      	bne.n	8003568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003590:	4b39      	ldr	r3, [pc, #228]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a1 	beq.w	80036e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a6:	4b34      	ldr	r3, [pc, #208]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d05c      	beq.n	800366c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d141      	bne.n	800363e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c0:	f7fe feac 	bl	800231c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fe fea8 	bl	800231c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e087      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035da:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	3b01      	subs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	061b      	lsls	r3, r3, #24
 800360a:	491b      	ldr	r1, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fe fe81 	bl	800231c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361e:	f7fe fe7d 	bl	800231c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e05c      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003630:	4b11      	ldr	r3, [pc, #68]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x416>
 800363c:	e054      	b.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <HAL_RCC_OscConfig+0x478>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe fe6a 	bl	800231c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fe66 	bl	800231c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e045      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCC_OscConfig+0x470>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x444>
 800366a:	e03d      	b.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e038      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
 8003678:	40023800 	.word	0x40023800
 800367c:	40007000 	.word	0x40007000
 8003680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <HAL_RCC_OscConfig+0x4ec>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d028      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d121      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d11a      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	3b01      	subs	r3, #1
 80036ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d107      	bne.n	80036e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023800 	.word	0x40023800

080036f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0cc      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800370c:	4b68      	ldr	r3, [pc, #416]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d90c      	bls.n	8003734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371a:	4b65      	ldr	r3, [pc, #404]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0b8      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800374c:	4b59      	ldr	r3, [pc, #356]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	4a58      	ldr	r2, [pc, #352]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003764:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	4a52      	ldr	r2, [pc, #328]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800376e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003770:	4b50      	ldr	r3, [pc, #320]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	494d      	ldr	r1, [pc, #308]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d044      	beq.n	8003818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d119      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e07f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d003      	beq.n	80037b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d107      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e06f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e067      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037d6:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4934      	ldr	r1, [pc, #208]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037e8:	f7fe fd98 	bl	800231c <HAL_GetTick>
 80037ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ee:	e00a      	b.n	8003806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f0:	f7fe fd94 	bl	800231c <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e04f      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003806:	4b2b      	ldr	r3, [pc, #172]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 020c 	and.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	429a      	cmp	r2, r3
 8003816:	d1eb      	bne.n	80037f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d20c      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b22      	ldr	r3, [pc, #136]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e032      	b.n	80038a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800384c:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4916      	ldr	r1, [pc, #88]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	490e      	ldr	r1, [pc, #56]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800387e:	f000 f821 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	490a      	ldr	r1, [pc, #40]	; (80038b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800389a:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fa6e 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023c00 	.word	0x40023c00
 80038b4:	40023800 	.word	0x40023800
 80038b8:	080090f0 	.word	0x080090f0
 80038bc:	20000004 	.word	0x20000004
 80038c0:	20000008 	.word	0x20000008

080038c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c8:	b094      	sub	sp, #80	; 0x50
 80038ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	647b      	str	r3, [r7, #68]	; 0x44
 80038d0:	2300      	movs	r3, #0
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d4:	2300      	movs	r3, #0
 80038d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d00d      	beq.n	8003904 <HAL_RCC_GetSysClockFreq+0x40>
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	f200 80e1 	bhi.w	8003ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_RCC_GetSysClockFreq+0x34>
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d003      	beq.n	80038fe <HAL_RCC_GetSysClockFreq+0x3a>
 80038f6:	e0db      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b73      	ldr	r3, [pc, #460]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038fc:	e0db      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038fe:	4b73      	ldr	r3, [pc, #460]	; (8003acc <HAL_RCC_GetSysClockFreq+0x208>)
 8003900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003902:	e0d8      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003904:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800390c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390e:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d063      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	2200      	movs	r2, #0
 8003922:	63bb      	str	r3, [r7, #56]	; 0x38
 8003924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392c:	633b      	str	r3, [r7, #48]	; 0x30
 800392e:	2300      	movs	r3, #0
 8003930:	637b      	str	r3, [r7, #52]	; 0x34
 8003932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003936:	4622      	mov	r2, r4
 8003938:	462b      	mov	r3, r5
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	0159      	lsls	r1, r3, #5
 8003944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003948:	0150      	lsls	r0, r2, #5
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4621      	mov	r1, r4
 8003950:	1a51      	subs	r1, r2, r1
 8003952:	6139      	str	r1, [r7, #16]
 8003954:	4629      	mov	r1, r5
 8003956:	eb63 0301 	sbc.w	r3, r3, r1
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003968:	4659      	mov	r1, fp
 800396a:	018b      	lsls	r3, r1, #6
 800396c:	4651      	mov	r1, sl
 800396e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003972:	4651      	mov	r1, sl
 8003974:	018a      	lsls	r2, r1, #6
 8003976:	4651      	mov	r1, sl
 8003978:	ebb2 0801 	subs.w	r8, r2, r1
 800397c:	4659      	mov	r1, fp
 800397e:	eb63 0901 	sbc.w	r9, r3, r1
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003996:	4690      	mov	r8, r2
 8003998:	4699      	mov	r9, r3
 800399a:	4623      	mov	r3, r4
 800399c:	eb18 0303 	adds.w	r3, r8, r3
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	462b      	mov	r3, r5
 80039a4:	eb49 0303 	adc.w	r3, r9, r3
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039b6:	4629      	mov	r1, r5
 80039b8:	024b      	lsls	r3, r1, #9
 80039ba:	4621      	mov	r1, r4
 80039bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039c0:	4621      	mov	r1, r4
 80039c2:	024a      	lsls	r2, r1, #9
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ca:	2200      	movs	r2, #0
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d4:	f7fc fc04 	bl	80001e0 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e0:	e058      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	2200      	movs	r2, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	4611      	mov	r1, r2
 80039ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039f2:	623b      	str	r3, [r7, #32]
 80039f4:	2300      	movs	r3, #0
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
 80039f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	f04f 0000 	mov.w	r0, #0
 8003a04:	f04f 0100 	mov.w	r1, #0
 8003a08:	0159      	lsls	r1, r3, #5
 8003a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a0e:	0150      	lsls	r0, r2, #5
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4641      	mov	r1, r8
 8003a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a34:	ebb2 040a 	subs.w	r4, r2, sl
 8003a38:	eb63 050b 	sbc.w	r5, r3, fp
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	00eb      	lsls	r3, r5, #3
 8003a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a4a:	00e2      	lsls	r2, r4, #3
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	461d      	mov	r5, r3
 8003a50:	4643      	mov	r3, r8
 8003a52:	18e3      	adds	r3, r4, r3
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	464b      	mov	r3, r9
 8003a58:	eb45 0303 	adc.w	r3, r5, r3
 8003a5c:	607b      	str	r3, [r7, #4]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	028b      	lsls	r3, r1, #10
 8003a6e:	4621      	mov	r1, r4
 8003a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a74:	4621      	mov	r1, r4
 8003a76:	028a      	lsls	r2, r1, #10
 8003a78:	4610      	mov	r0, r2
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a7e:	2200      	movs	r2, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	61fa      	str	r2, [r7, #28]
 8003a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a88:	f7fc fbaa 	bl	80001e0 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aae:	e002      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3750      	adds	r7, #80	; 0x50
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	007a1200 	.word	0x007a1200

08003ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000004 	.word	0x20000004

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0a9b      	lsrs	r3, r3, #10
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	08009100 	.word	0x08009100

08003b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b14:	f7ff ffdc 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	0b5b      	lsrs	r3, r3, #13
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	; (8003b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40023800 	.word	0x40023800
 8003b34:	08009100 	.word	0x08009100

08003b38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	220f      	movs	r2, #15
 8003b46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCC_GetClockConfig+0x5c>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <HAL_RCC_GetClockConfig+0x60>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0207 	and.w	r2, r3, #7
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	601a      	str	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40023c00 	.word	0x40023c00

08003b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07b      	b.n	8003ca6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d108      	bne.n	8003bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bbe:	d009      	beq.n	8003bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
 8003bc6:	e005      	b.n	8003bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d106      	bne.n	8003bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fe f836 	bl	8001c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	ea42 0103 	orr.w	r1, r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	0c1b      	lsrs	r3, r3, #16
 8003c72:	f003 0104 	and.w	r1, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f003 0210 	and.w	r2, r3, #16
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b088      	sub	sp, #32
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_SPI_Transmit+0x22>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e12d      	b.n	8003f2c <HAL_SPI_Transmit+0x27e>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cd8:	f7fe fb20 	bl	800231c <HAL_GetTick>
 8003cdc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cf2:	e116      	b.n	8003f22 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_Transmit+0x52>
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d04:	e10d      	b.n	8003f22 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2203      	movs	r2, #3
 8003d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	88fa      	ldrh	r2, [r7, #6]
 8003d1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	d10f      	bne.n	8003d6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d007      	beq.n	8003d8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d94:	d14f      	bne.n	8003e36 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_SPI_Transmit+0xf6>
 8003d9e:	8afb      	ldrh	r3, [r7, #22]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d142      	bne.n	8003e2a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	881a      	ldrh	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dc8:	e02f      	b.n	8003e2a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d112      	bne.n	8003dfe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	881a      	ldrh	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dfc:	e015      	b.n	8003e2a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dfe:	f7fe fa8d 	bl	800231c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d803      	bhi.n	8003e16 <HAL_SPI_Transmit+0x168>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e14:	d102      	bne.n	8003e1c <HAL_SPI_Transmit+0x16e>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e28:	e07b      	b.n	8003f22 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ca      	bne.n	8003dca <HAL_SPI_Transmit+0x11c>
 8003e34:	e050      	b.n	8003ed8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_SPI_Transmit+0x196>
 8003e3e:	8afb      	ldrh	r3, [r7, #22]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d144      	bne.n	8003ece <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e6a:	e030      	b.n	8003ece <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d113      	bne.n	8003ea2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ea0:	e015      	b.n	8003ece <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea2:	f7fe fa3b 	bl	800231c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d803      	bhi.n	8003eba <HAL_SPI_Transmit+0x20c>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d102      	bne.n	8003ec0 <HAL_SPI_Transmit+0x212>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ecc:	e029      	b.n	8003f22 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1c9      	bne.n	8003e6c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fa61 	bl	80043a4 <SPI_EndRxTxTransaction>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e003      	b.n	8003f22 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08c      	sub	sp, #48	; 0x30
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f42:	2301      	movs	r3, #1
 8003f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_SPI_TransmitReceive+0x26>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e198      	b.n	800428c <HAL_SPI_TransmitReceive+0x358>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f62:	f7fe f9db 	bl	800231c <HAL_GetTick>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d00f      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x70>
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8a:	d107      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <HAL_SPI_TransmitReceive+0x68>
 8003f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d003      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fa2:	e16d      	b.n	8004280 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_SPI_TransmitReceive+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_SPI_TransmitReceive+0x82>
 8003fb0:	887b      	ldrh	r3, [r7, #2]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fbc:	e160      	b.n	8004280 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d003      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2205      	movs	r2, #5
 8003fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	887a      	ldrh	r2, [r7, #2]
 8003fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	887a      	ldrh	r2, [r7, #2]
 8003ff4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	887a      	ldrh	r2, [r7, #2]
 8003ffa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d007      	beq.n	8004026 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402e:	d17c      	bne.n	800412a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_SPI_TransmitReceive+0x10a>
 8004038:	8b7b      	ldrh	r3, [r7, #26]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d16a      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	881a      	ldrh	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	1c9a      	adds	r2, r3, #2
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004062:	e057      	b.n	8004114 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b02      	cmp	r3, #2
 8004070:	d11b      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x176>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d016      	beq.n	80040aa <HAL_SPI_TransmitReceive+0x176>
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d113      	bne.n	80040aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	881a      	ldrh	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	1c9a      	adds	r2, r3, #2
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d119      	bne.n	80040ec <HAL_SPI_TransmitReceive+0x1b8>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d014      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	b292      	uxth	r2, r2
 80040ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	1c9a      	adds	r2, r3, #2
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040e8:	2301      	movs	r3, #1
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040ec:	f7fe f916 	bl	800231c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d80b      	bhi.n	8004114 <HAL_SPI_TransmitReceive+0x1e0>
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004102:	d007      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004112:	e0b5      	b.n	8004280 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1a2      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x130>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d19d      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x130>
 8004128:	e080      	b.n	800422c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_SPI_TransmitReceive+0x204>
 8004132:	8b7b      	ldrh	r3, [r7, #26]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d16f      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	7812      	ldrb	r2, [r2, #0]
 8004144:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415e:	e05b      	b.n	8004218 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b02      	cmp	r3, #2
 800416c:	d11c      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x274>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d017      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x274>
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d114      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	330c      	adds	r3, #12
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d119      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x2b6>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d014      	beq.n	80041ea <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e6:	2301      	movs	r3, #1
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041ea:	f7fe f897 	bl	800231c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d803      	bhi.n	8004202 <HAL_SPI_TransmitReceive+0x2ce>
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d102      	bne.n	8004208 <HAL_SPI_TransmitReceive+0x2d4>
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004216:	e033      	b.n	8004280 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d19e      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x22c>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d199      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f8b7 	bl	80043a4 <SPI_EndRxTxTransaction>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d006      	beq.n	800424a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004248:	e01a      	b.n	8004280 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10a      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004276:	e003      	b.n	8004280 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800428c:	4618      	mov	r0, r3
 800428e:	3730      	adds	r7, #48	; 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a4:	f7fe f83a 	bl	800231c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b4:	f7fe f832 	bl	800231c <HAL_GetTick>
 80042b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	015b      	lsls	r3, r3, #5
 80042c0:	0d1b      	lsrs	r3, r3, #20
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ca:	e054      	b.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d050      	beq.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d4:	f7fe f822 	bl	800231c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d902      	bls.n	80042ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d13d      	bne.n	8004366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004302:	d111      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d004      	beq.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d107      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004330:	d10f      	bne.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e017      	b.n	8004396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3b01      	subs	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	429a      	cmp	r2, r3
 8004392:	d19b      	bne.n	80042cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000004 	.word	0x20000004

080043a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2201      	movs	r2, #1
 80043b8:	2102      	movs	r1, #2
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff6a 	bl	8004294 <SPI_WaitFlagStateUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e032      	b.n	800443c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043d6:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <SPI_EndRxTxTransaction+0xa0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <SPI_EndRxTxTransaction+0xa4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	0d5b      	lsrs	r3, r3, #21
 80043e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f4:	d112      	bne.n	800441c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	2180      	movs	r1, #128	; 0x80
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff ff47 	bl	8004294 <SPI_WaitFlagStateUntilTimeout>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d016      	beq.n	800443a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	f043 0220 	orr.w	r2, r3, #32
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e00f      	b.n	800443c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3b01      	subs	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004432:	2b80      	cmp	r3, #128	; 0x80
 8004434:	d0f2      	beq.n	800441c <SPI_EndRxTxTransaction+0x78>
 8004436:	e000      	b.n	800443a <SPI_EndRxTxTransaction+0x96>
        break;
 8004438:	bf00      	nop
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000004 	.word	0x20000004
 8004448:	165e9f81 	.word	0x165e9f81

0800444c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e041      	b.n	80044e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f839 	bl	80044ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 f9b2 	bl	80047f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d001      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e044      	b.n	80045a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004542:	d013      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a17      	ldr	r2, [pc, #92]	; (80045bc <HAL_TIM_Base_Start_IT+0xbc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_TIM_Base_Start_IT+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d111      	bne.n	8004590 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b06      	cmp	r3, #6
 800457c:	d010      	beq.n	80045a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0201 	orr.w	r2, r2, #1
 800458c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458e:	e007      	b.n	80045a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00
 80045c0:	40014000 	.word	0x40014000

080045c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d020      	beq.n	8004628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01b      	beq.n	8004628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0202 	mvn.w	r2, #2
 80045f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f8d2 	bl	80047b8 <HAL_TIM_IC_CaptureCallback>
 8004614:	e005      	b.n	8004622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f8c4 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f8d5 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d020      	beq.n	8004674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01b      	beq.n	8004674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0204 	mvn.w	r2, #4
 8004644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8ac 	bl	80047b8 <HAL_TIM_IC_CaptureCallback>
 8004660:	e005      	b.n	800466e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f89e 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f8af 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d020      	beq.n	80046c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0308 	and.w	r3, r3, #8
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01b      	beq.n	80046c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0208 	mvn.w	r2, #8
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2204      	movs	r2, #4
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f886 	bl	80047b8 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f878 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f889 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d020      	beq.n	800470c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0210 	mvn.w	r2, #16
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2208      	movs	r2, #8
 80046e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f860 	bl	80047b8 <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f852 	bl	80047a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f863 	bl	80047cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d007      	beq.n	8004730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0201 	mvn.w	r2, #1
 8004728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7fd fa10 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00c      	beq.n	8004754 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800474c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8e6 	bl	8004920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f834 	bl	80047e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00c      	beq.n	800479c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0220 	mvn.w	r2, #32
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8b8 	bl	800490c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3a      	ldr	r2, [pc, #232]	; (80048f0 <TIM_Base_SetConfig+0xfc>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d00f      	beq.n	800482c <TIM_Base_SetConfig+0x38>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004812:	d00b      	beq.n	800482c <TIM_Base_SetConfig+0x38>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a37      	ldr	r2, [pc, #220]	; (80048f4 <TIM_Base_SetConfig+0x100>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0x38>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a36      	ldr	r2, [pc, #216]	; (80048f8 <TIM_Base_SetConfig+0x104>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0x38>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a35      	ldr	r2, [pc, #212]	; (80048fc <TIM_Base_SetConfig+0x108>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2b      	ldr	r2, [pc, #172]	; (80048f0 <TIM_Base_SetConfig+0xfc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01b      	beq.n	800487e <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d017      	beq.n	800487e <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <TIM_Base_SetConfig+0x100>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <TIM_Base_SetConfig+0x8a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a27      	ldr	r2, [pc, #156]	; (80048f8 <TIM_Base_SetConfig+0x104>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00f      	beq.n	800487e <TIM_Base_SetConfig+0x8a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a26      	ldr	r2, [pc, #152]	; (80048fc <TIM_Base_SetConfig+0x108>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d00b      	beq.n	800487e <TIM_Base_SetConfig+0x8a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a25      	ldr	r2, [pc, #148]	; (8004900 <TIM_Base_SetConfig+0x10c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d007      	beq.n	800487e <TIM_Base_SetConfig+0x8a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a24      	ldr	r2, [pc, #144]	; (8004904 <TIM_Base_SetConfig+0x110>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_Base_SetConfig+0x8a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a23      	ldr	r2, [pc, #140]	; (8004908 <TIM_Base_SetConfig+0x114>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d108      	bne.n	8004890 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0e      	ldr	r2, [pc, #56]	; (80048f0 <TIM_Base_SetConfig+0xfc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d103      	bne.n	80048c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f023 0201 	bic.w	r2, r3, #1
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]
  }
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40000c00 	.word	0x40000c00
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800

0800490c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e042      	b.n	80049cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fd f9c8 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2224      	movs	r2, #36	; 0x24
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f82b 	bl	80049d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800499c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68da      	ldr	r2, [r3, #12]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d8:	b0c0      	sub	sp, #256	; 0x100
 80049da:	af00      	add	r7, sp, #0
 80049dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	68d9      	ldr	r1, [r3, #12]
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	ea40 0301 	orr.w	r3, r0, r1
 80049fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	431a      	orrs	r2, r3
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a2c:	f021 010c 	bic.w	r1, r1, #12
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4e:	6999      	ldr	r1, [r3, #24]
 8004a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	ea40 0301 	orr.w	r3, r0, r1
 8004a5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b8f      	ldr	r3, [pc, #572]	; (8004ca0 <UART_SetConfig+0x2cc>)
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d005      	beq.n	8004a74 <UART_SetConfig+0xa0>
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4b8d      	ldr	r3, [pc, #564]	; (8004ca4 <UART_SetConfig+0x2d0>)
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d104      	bne.n	8004a7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a74:	f7ff f84c 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 8004a78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a7c:	e003      	b.n	8004a86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a7e:	f7ff f833 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8004a82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a90:	f040 810c 	bne.w	8004cac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004aa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	1891      	adds	r1, r2, r2
 8004aac:	65b9      	str	r1, [r7, #88]	; 0x58
 8004aae:	415b      	adcs	r3, r3
 8004ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	eb12 0801 	adds.w	r8, r2, r1
 8004abc:	4629      	mov	r1, r5
 8004abe:	eb43 0901 	adc.w	r9, r3, r1
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ad6:	4690      	mov	r8, r2
 8004ad8:	4699      	mov	r9, r3
 8004ada:	4623      	mov	r3, r4
 8004adc:	eb18 0303 	adds.w	r3, r8, r3
 8004ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	eb49 0303 	adc.w	r3, r9, r3
 8004aea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004afa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004afe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b02:	460b      	mov	r3, r1
 8004b04:	18db      	adds	r3, r3, r3
 8004b06:	653b      	str	r3, [r7, #80]	; 0x50
 8004b08:	4613      	mov	r3, r2
 8004b0a:	eb42 0303 	adc.w	r3, r2, r3
 8004b0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b18:	f7fb fb62 	bl	80001e0 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b61      	ldr	r3, [pc, #388]	; (8004ca8 <UART_SetConfig+0x2d4>)
 8004b22:	fba3 2302 	umull	r2, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	011c      	lsls	r4, r3, #4
 8004b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b44:	415b      	adcs	r3, r3
 8004b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004b52:	4649      	mov	r1, r9
 8004b54:	eb43 0b01 	adc.w	fp, r3, r1
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b6c:	4692      	mov	sl, r2
 8004b6e:	469b      	mov	fp, r3
 8004b70:	4643      	mov	r3, r8
 8004b72:	eb1a 0303 	adds.w	r3, sl, r3
 8004b76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004b80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	18db      	adds	r3, r3, r3
 8004b9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004baa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bae:	f7fb fb17 	bl	80001e0 <__aeabi_uldivmod>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4b3b      	ldr	r3, [pc, #236]	; (8004ca8 <UART_SetConfig+0x2d4>)
 8004bba:	fba3 2301 	umull	r2, r3, r3, r1
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2264      	movs	r2, #100	; 0x64
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	1acb      	subs	r3, r1, r3
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bce:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <UART_SetConfig+0x2d4>)
 8004bd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bdc:	441c      	add	r4, r3
 8004bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004be8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	464b      	mov	r3, r9
 8004bf4:	1891      	adds	r1, r2, r2
 8004bf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bf8:	415b      	adcs	r3, r3
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c00:	4641      	mov	r1, r8
 8004c02:	1851      	adds	r1, r2, r1
 8004c04:	6339      	str	r1, [r7, #48]	; 0x30
 8004c06:	4649      	mov	r1, r9
 8004c08:	414b      	adcs	r3, r1
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c18:	4659      	mov	r1, fp
 8004c1a:	00cb      	lsls	r3, r1, #3
 8004c1c:	4651      	mov	r1, sl
 8004c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c22:	4651      	mov	r1, sl
 8004c24:	00ca      	lsls	r2, r1, #3
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	4642      	mov	r2, r8
 8004c2e:	189b      	adds	r3, r3, r2
 8004c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c34:	464b      	mov	r3, r9
 8004c36:	460a      	mov	r2, r1
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c54:	460b      	mov	r3, r1
 8004c56:	18db      	adds	r3, r3, r3
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	eb42 0303 	adc.w	r3, r2, r3
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c6a:	f7fb fab9 	bl	80001e0 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4b0d      	ldr	r3, [pc, #52]	; (8004ca8 <UART_SetConfig+0x2d4>)
 8004c74:	fba3 1302 	umull	r1, r3, r3, r2
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	2164      	movs	r1, #100	; 0x64
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	3332      	adds	r3, #50	; 0x32
 8004c86:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <UART_SetConfig+0x2d4>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	f003 0207 	and.w	r2, r3, #7
 8004c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4422      	add	r2, r4
 8004c9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c9c:	e106      	b.n	8004eac <UART_SetConfig+0x4d8>
 8004c9e:	bf00      	nop
 8004ca0:	40011000 	.word	0x40011000
 8004ca4:	40011400 	.word	0x40011400
 8004ca8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004cba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	1891      	adds	r1, r2, r2
 8004cc4:	6239      	str	r1, [r7, #32]
 8004cc6:	415b      	adcs	r3, r3
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cce:	4641      	mov	r1, r8
 8004cd0:	1854      	adds	r4, r2, r1
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	eb43 0501 	adc.w	r5, r3, r1
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	00eb      	lsls	r3, r5, #3
 8004ce2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce6:	00e2      	lsls	r2, r4, #3
 8004ce8:	4614      	mov	r4, r2
 8004cea:	461d      	mov	r5, r3
 8004cec:	4643      	mov	r3, r8
 8004cee:	18e3      	adds	r3, r4, r3
 8004cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cf4:	464b      	mov	r3, r9
 8004cf6:	eb45 0303 	adc.w	r3, r5, r3
 8004cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	008b      	lsls	r3, r1, #2
 8004d1e:	4621      	mov	r1, r4
 8004d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d24:	4621      	mov	r1, r4
 8004d26:	008a      	lsls	r2, r1, #2
 8004d28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d2c:	f7fb fa58 	bl	80001e0 <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4b60      	ldr	r3, [pc, #384]	; (8004eb8 <UART_SetConfig+0x4e4>)
 8004d36:	fba3 2302 	umull	r2, r3, r3, r2
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	011c      	lsls	r4, r3, #4
 8004d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d50:	4642      	mov	r2, r8
 8004d52:	464b      	mov	r3, r9
 8004d54:	1891      	adds	r1, r2, r2
 8004d56:	61b9      	str	r1, [r7, #24]
 8004d58:	415b      	adcs	r3, r3
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d60:	4641      	mov	r1, r8
 8004d62:	1851      	adds	r1, r2, r1
 8004d64:	6139      	str	r1, [r7, #16]
 8004d66:	4649      	mov	r1, r9
 8004d68:	414b      	adcs	r3, r1
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d78:	4659      	mov	r1, fp
 8004d7a:	00cb      	lsls	r3, r1, #3
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d82:	4651      	mov	r1, sl
 8004d84:	00ca      	lsls	r2, r1, #3
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d94:	464b      	mov	r3, r9
 8004d96:	460a      	mov	r2, r1
 8004d98:	eb42 0303 	adc.w	r3, r2, r3
 8004d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004daa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004db8:	4649      	mov	r1, r9
 8004dba:	008b      	lsls	r3, r1, #2
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	008a      	lsls	r2, r1, #2
 8004dc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004dca:	f7fb fa09 	bl	80001e0 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4b38      	ldr	r3, [pc, #224]	; (8004eb8 <UART_SetConfig+0x4e4>)
 8004dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2264      	movs	r2, #100	; 0x64
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	1acb      	subs	r3, r1, r3
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	3332      	adds	r3, #50	; 0x32
 8004de8:	4a33      	ldr	r2, [pc, #204]	; (8004eb8 <UART_SetConfig+0x4e4>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df4:	441c      	add	r4, r3
 8004df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	673b      	str	r3, [r7, #112]	; 0x70
 8004dfe:	677a      	str	r2, [r7, #116]	; 0x74
 8004e00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e04:	4642      	mov	r2, r8
 8004e06:	464b      	mov	r3, r9
 8004e08:	1891      	adds	r1, r2, r2
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	415b      	adcs	r3, r3
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e14:	4641      	mov	r1, r8
 8004e16:	1851      	adds	r1, r2, r1
 8004e18:	6039      	str	r1, [r7, #0]
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	414b      	adcs	r3, r1
 8004e1e:	607b      	str	r3, [r7, #4]
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	00cb      	lsls	r3, r1, #3
 8004e30:	4651      	mov	r1, sl
 8004e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e36:	4651      	mov	r1, sl
 8004e38:	00ca      	lsls	r2, r1, #3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4642      	mov	r2, r8
 8004e42:	189b      	adds	r3, r3, r2
 8004e44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e46:	464b      	mov	r3, r9
 8004e48:	460a      	mov	r2, r1
 8004e4a:	eb42 0303 	adc.w	r3, r2, r3
 8004e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	663b      	str	r3, [r7, #96]	; 0x60
 8004e5a:	667a      	str	r2, [r7, #100]	; 0x64
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e68:	4649      	mov	r1, r9
 8004e6a:	008b      	lsls	r3, r1, #2
 8004e6c:	4641      	mov	r1, r8
 8004e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e72:	4641      	mov	r1, r8
 8004e74:	008a      	lsls	r2, r1, #2
 8004e76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e7a:	f7fb f9b1 	bl	80001e0 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <UART_SetConfig+0x4e4>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	2164      	movs	r1, #100	; 0x64
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	3332      	adds	r3, #50	; 0x32
 8004e96:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <UART_SetConfig+0x4e4>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 020f 	and.w	r2, r3, #15
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4422      	add	r2, r4
 8004eaa:	609a      	str	r2, [r3, #8]
}
 8004eac:	bf00      	nop
 8004eae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb8:	51eb851f 	.word	0x51eb851f

08004ebc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004ec0:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <MX_FATFS_Init+0x18>)
 8004ec2:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <MX_FATFS_Init+0x1c>)
 8004ec4:	f000 f8ae 	bl	8005024 <FATFS_LinkDriver>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4b03      	ldr	r3, [pc, #12]	; (8004edc <MX_FATFS_Init+0x20>)
 8004ece:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ed0:	bf00      	nop
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000804 	.word	0x20000804
 8004ed8:	20000010 	.word	0x20000010
 8004edc:	20000800 	.word	0x20000800

08004ee0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fb fcab 	bl	8000848 <SD_disk_initialize>
 8004ef2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fb fd89 	bl	8000a20 <SD_disk_status>
 8004f0e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004f28:	7bf8      	ldrb	r0, [r7, #15]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	68b9      	ldr	r1, [r7, #8]
 8004f30:	f7fb fd8c 	bl	8000a4c <SD_disk_read>
 8004f34:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004f4e:	7bf8      	ldrb	r0, [r7, #15]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	f7fb fde3 	bl	8000b20 <SD_disk_write>
 8004f5a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	603a      	str	r2, [r7, #0]
 8004f6e:	71fb      	strb	r3, [r7, #7]
 8004f70:	460b      	mov	r3, r1
 8004f72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004f74:	79b9      	ldrb	r1, [r7, #6]
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fb fe54 	bl	8000c28 <SD_disk_ioctl>
 8004f80:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	4613      	mov	r3, r2
 8004f98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fa4:	7a5b      	ldrb	r3, [r3, #9]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d131      	bne.n	8005010 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004fac:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fae:	7a5b      	ldrb	r3, [r3, #9]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004fba:	4b19      	ldr	r3, [pc, #100]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fbc:	7a5b      	ldrb	r3, [r3, #9]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	4a17      	ldr	r2, [pc, #92]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fcc:	7a5b      	ldrb	r3, [r3, #9]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fd4:	4413      	add	r3, r2
 8004fd6:	79fa      	ldrb	r2, [r7, #7]
 8004fd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004fda:	4b11      	ldr	r3, [pc, #68]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fdc:	7a5b      	ldrb	r3, [r3, #9]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	b2d1      	uxtb	r1, r2
 8004fe4:	4a0e      	ldr	r2, [pc, #56]	; (8005020 <FATFS_LinkDriverEx+0x94>)
 8004fe6:	7251      	strb	r1, [r2, #9]
 8004fe8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004fea:	7dbb      	ldrb	r3, [r7, #22]
 8004fec:	3330      	adds	r3, #48	; 0x30
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	223a      	movs	r2, #58	; 0x3a
 8004ffa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	3302      	adds	r3, #2
 8005000:	222f      	movs	r2, #47	; 0x2f
 8005002:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	3303      	adds	r3, #3
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005010:	7dfb      	ldrb	r3, [r7, #23]
}
 8005012:	4618      	mov	r0, r3
 8005014:	371c      	adds	r7, #28
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	20000808 	.word	0x20000808

08005024 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800502e:	2200      	movs	r2, #0
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff ffaa 	bl	8004f8c <FATFS_LinkDriverEx>
 8005038:	4603      	mov	r3, r0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f103 0208 	add.w	r2, r3, #8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f04f 32ff 	mov.w	r2, #4294967295
 800505a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f103 0208 	add.w	r2, r3, #8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f103 0208 	add.w	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	601a      	str	r2, [r3, #0]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fa:	d103      	bne.n	8005104 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	e00c      	b.n	800511e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3308      	adds	r3, #8
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e002      	b.n	8005112 <vListInsert+0x2e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d2f6      	bcs.n	800510c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	601a      	str	r2, [r3, #0]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6892      	ldr	r2, [r2, #8]
 800516c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6852      	ldr	r2, [r2, #4]
 8005176:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	d103      	bne.n	800518a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	1e5a      	subs	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051d6:	f001 fba5 	bl	8006924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e2:	68f9      	ldr	r1, [r7, #12]
 80051e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	441a      	add	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	3b01      	subs	r3, #1
 8005208:	68f9      	ldr	r1, [r7, #12]
 800520a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	441a      	add	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	22ff      	movs	r2, #255	; 0xff
 800521a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	22ff      	movs	r2, #255	; 0xff
 8005222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d114      	bne.n	8005256 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01a      	beq.n	800526a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3310      	adds	r3, #16
 8005238:	4618      	mov	r0, r3
 800523a:	f000 ff81 	bl	8006140 <xTaskRemoveFromEventList>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d012      	beq.n	800526a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <xQueueGenericReset+0xcc>)
 8005246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	e009      	b.n	800526a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3310      	adds	r3, #16
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff fef1 	bl	8005042 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3324      	adds	r3, #36	; 0x24
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff feec 	bl	8005042 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800526a:	f001 fb8b 	bl	8006984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800526e:	2301      	movs	r3, #1
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	4613      	mov	r3, r2
 8005288:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10a      	bne.n	80052a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	613b      	str	r3, [r7, #16]
}
 80052a2:	bf00      	nop
 80052a4:	e7fe      	b.n	80052a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	fb02 f303 	mul.w	r3, r2, r3
 80052ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3348      	adds	r3, #72	; 0x48
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fc17 	bl	8006ae8 <pvPortMalloc>
 80052ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d011      	beq.n	80052e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	3348      	adds	r3, #72	; 0x48
 80052ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052d4:	79fa      	ldrb	r2, [r7, #7]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	4613      	mov	r3, r2
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f805 	bl	80052f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052e6:	69bb      	ldr	r3, [r7, #24]
	}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e002      	b.n	8005312 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800531e:	2101      	movs	r1, #1
 8005320:	69b8      	ldr	r0, [r7, #24]
 8005322:	f7ff ff43 	bl	80051ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08e      	sub	sp, #56	; 0x38
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800533e:	2300      	movs	r3, #0
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10a      	bne.n	8005362 <xQueueGenericSend+0x32>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d103      	bne.n	8005370 <xQueueGenericSend+0x40>
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <xQueueGenericSend+0x44>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <xQueueGenericSend+0x46>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <xQueueGenericSend+0x60>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d103      	bne.n	800539e <xQueueGenericSend+0x6e>
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <xQueueGenericSend+0x72>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <xQueueGenericSend+0x74>
 80053a2:	2300      	movs	r3, #0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10a      	bne.n	80053be <xQueueGenericSend+0x8e>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	623b      	str	r3, [r7, #32]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053be:	f001 f87b 	bl	80064b8 <xTaskGetSchedulerState>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <xQueueGenericSend+0x9e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <xQueueGenericSend+0xa2>
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <xQueueGenericSend+0xa4>
 80053d2:	2300      	movs	r3, #0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xQueueGenericSend+0xbe>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	61fb      	str	r3, [r7, #28]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053ee:	f001 fa99 	bl	8006924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <xQueueGenericSend+0xd4>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d129      	bne.n	8005458 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800540a:	f000 f96f 	bl	80056ec <prvCopyDataToQueue>
 800540e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	2b00      	cmp	r3, #0
 8005416:	d010      	beq.n	800543a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	3324      	adds	r3, #36	; 0x24
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fe8f 	bl	8006140 <xTaskRemoveFromEventList>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d013      	beq.n	8005450 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005428:	4b3f      	ldr	r3, [pc, #252]	; (8005528 <xQueueGenericSend+0x1f8>)
 800542a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	e00a      	b.n	8005450 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <xQueueGenericSend+0x1f8>)
 8005442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005450:	f001 fa98 	bl	8006984 <vPortExitCritical>
				return pdPASS;
 8005454:	2301      	movs	r3, #1
 8005456:	e063      	b.n	8005520 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800545e:	f001 fa91 	bl	8006984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005462:	2300      	movs	r3, #0
 8005464:	e05c      	b.n	8005520 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800546c:	f107 0314 	add.w	r3, r7, #20
 8005470:	4618      	mov	r0, r3
 8005472:	f000 fec7 	bl	8006204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005476:	2301      	movs	r3, #1
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800547a:	f001 fa83 	bl	8006984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800547e:	f000 fc6d 	bl	8005d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005482:	f001 fa4f 	bl	8006924 <vPortEnterCritical>
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800548c:	b25b      	sxtb	r3, r3
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d103      	bne.n	800549c <xQueueGenericSend+0x16c>
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d103      	bne.n	80054b2 <xQueueGenericSend+0x182>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b2:	f001 fa67 	bl	8006984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054b6:	1d3a      	adds	r2, r7, #4
 80054b8:	f107 0314 	add.w	r3, r7, #20
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 feb6 	bl	8006230 <xTaskCheckForTimeOut>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d124      	bne.n	8005514 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054cc:	f000 fa06 	bl	80058dc <prvIsQueueFull>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	3310      	adds	r3, #16
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fe0a 	bl	80060f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e6:	f000 f991 	bl	800580c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054ea:	f000 fc45 	bl	8005d78 <xTaskResumeAll>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f47f af7c 	bne.w	80053ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <xQueueGenericSend+0x1f8>)
 80054f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	e772      	b.n	80053ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550a:	f000 f97f 	bl	800580c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800550e:	f000 fc33 	bl	8005d78 <xTaskResumeAll>
 8005512:	e76c      	b.n	80053ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005516:	f000 f979 	bl	800580c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800551a:	f000 fc2d 	bl	8005d78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800551e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005520:	4618      	mov	r0, r3
 8005522:	3738      	adds	r7, #56	; 0x38
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	; 0x30
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005538:	2300      	movs	r3, #0
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <xQueueReceive+0x30>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	623b      	str	r3, [r7, #32]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <xQueueReceive+0x3e>
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <xQueueReceive+0x42>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <xQueueReceive+0x44>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10a      	bne.n	800558a <xQueueReceive+0x5e>
	__asm volatile
 8005574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005578:	f383 8811 	msr	BASEPRI, r3
 800557c:	f3bf 8f6f 	isb	sy
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	61fb      	str	r3, [r7, #28]
}
 8005586:	bf00      	nop
 8005588:	e7fe      	b.n	8005588 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800558a:	f000 ff95 	bl	80064b8 <xTaskGetSchedulerState>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d102      	bne.n	800559a <xQueueReceive+0x6e>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <xQueueReceive+0x72>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <xQueueReceive+0x74>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10a      	bne.n	80055ba <xQueueReceive+0x8e>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	61bb      	str	r3, [r7, #24]
}
 80055b6:	bf00      	nop
 80055b8:	e7fe      	b.n	80055b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055ba:	f001 f9b3 	bl	8006924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d01f      	beq.n	800560a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ce:	f000 f8f7 	bl	80057c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	1e5a      	subs	r2, r3, #1
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00f      	beq.n	8005602 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	3310      	adds	r3, #16
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fdaa 	bl	8006140 <xTaskRemoveFromEventList>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055f2:	4b3d      	ldr	r3, [pc, #244]	; (80056e8 <xQueueReceive+0x1bc>)
 80055f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005602:	f001 f9bf 	bl	8006984 <vPortExitCritical>
				return pdPASS;
 8005606:	2301      	movs	r3, #1
 8005608:	e069      	b.n	80056de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005610:	f001 f9b8 	bl	8006984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005614:	2300      	movs	r3, #0
 8005616:	e062      	b.n	80056de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800561e:	f107 0310 	add.w	r3, r7, #16
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fdee 	bl	8006204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005628:	2301      	movs	r3, #1
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800562c:	f001 f9aa 	bl	8006984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005630:	f000 fb94 	bl	8005d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005634:	f001 f976 	bl	8006924 <vPortEnterCritical>
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800563e:	b25b      	sxtb	r3, r3
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d103      	bne.n	800564e <xQueueReceive+0x122>
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005654:	b25b      	sxtb	r3, r3
 8005656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565a:	d103      	bne.n	8005664 <xQueueReceive+0x138>
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005664:	f001 f98e 	bl	8006984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005668:	1d3a      	adds	r2, r7, #4
 800566a:	f107 0310 	add.w	r3, r7, #16
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fddd 	bl	8006230 <xTaskCheckForTimeOut>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d123      	bne.n	80056c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800567c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800567e:	f000 f917 	bl	80058b0 <prvIsQueueEmpty>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d017      	beq.n	80056b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	3324      	adds	r3, #36	; 0x24
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4611      	mov	r1, r2
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fd31 	bl	80060f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005698:	f000 f8b8 	bl	800580c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800569c:	f000 fb6c 	bl	8005d78 <xTaskResumeAll>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d189      	bne.n	80055ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80056a6:	4b10      	ldr	r3, [pc, #64]	; (80056e8 <xQueueReceive+0x1bc>)
 80056a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	e780      	b.n	80055ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ba:	f000 f8a7 	bl	800580c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056be:	f000 fb5b 	bl	8005d78 <xTaskResumeAll>
 80056c2:	e77a      	b.n	80055ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c6:	f000 f8a1 	bl	800580c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056ca:	f000 fb55 	bl	8005d78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056d0:	f000 f8ee 	bl	80058b0 <prvIsQueueEmpty>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f43f af6f 	beq.w	80055ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3730      	adds	r7, #48	; 0x30
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10d      	bne.n	8005726 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d14d      	bne.n	80057ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 feec 	bl	80064f4 <xTaskPriorityDisinherit>
 800571c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	609a      	str	r2, [r3, #8]
 8005724:	e043      	b.n	80057ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d119      	bne.n	8005760 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6858      	ldr	r0, [r3, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	461a      	mov	r2, r3
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	f001 fbec 	bl	8006f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	441a      	add	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	429a      	cmp	r2, r3
 8005754:	d32b      	bcc.n	80057ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	605a      	str	r2, [r3, #4]
 800575e:	e026      	b.n	80057ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68d8      	ldr	r0, [r3, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	461a      	mov	r2, r3
 800576a:	68b9      	ldr	r1, [r7, #8]
 800576c:	f001 fbd2 	bl	8006f14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	425b      	negs	r3, r3
 800577a:	441a      	add	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d207      	bcs.n	800579c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	425b      	negs	r3, r3
 8005796:	441a      	add	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d105      	bne.n	80057ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80057b6:	697b      	ldr	r3, [r7, #20]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d018      	beq.n	8005804 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	441a      	add	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d303      	bcc.n	80057f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68d9      	ldr	r1, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	461a      	mov	r2, r3
 80057fe:	6838      	ldr	r0, [r7, #0]
 8005800:	f001 fb88 	bl	8006f14 <memcpy>
	}
}
 8005804:	bf00      	nop
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005814:	f001 f886 	bl	8006924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800581e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005820:	e011      	b.n	8005846 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	2b00      	cmp	r3, #0
 8005828:	d012      	beq.n	8005850 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3324      	adds	r3, #36	; 0x24
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fc86 	bl	8006140 <xTaskRemoveFromEventList>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800583a:	f000 fd5b 	bl	80062f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	3b01      	subs	r3, #1
 8005842:	b2db      	uxtb	r3, r3
 8005844:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	dce9      	bgt.n	8005822 <prvUnlockQueue+0x16>
 800584e:	e000      	b.n	8005852 <prvUnlockQueue+0x46>
					break;
 8005850:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	22ff      	movs	r2, #255	; 0xff
 8005856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800585a:	f001 f893 	bl	8006984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800585e:	f001 f861 	bl	8006924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005868:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800586a:	e011      	b.n	8005890 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d012      	beq.n	800589a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3310      	adds	r3, #16
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fc61 	bl	8006140 <xTaskRemoveFromEventList>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005884:	f000 fd36 	bl	80062f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005888:	7bbb      	ldrb	r3, [r7, #14]
 800588a:	3b01      	subs	r3, #1
 800588c:	b2db      	uxtb	r3, r3
 800588e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005894:	2b00      	cmp	r3, #0
 8005896:	dce9      	bgt.n	800586c <prvUnlockQueue+0x60>
 8005898:	e000      	b.n	800589c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800589a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	22ff      	movs	r2, #255	; 0xff
 80058a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80058a4:	f001 f86e 	bl	8006984 <vPortExitCritical>
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058b8:	f001 f834 	bl	8006924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058c4:	2301      	movs	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	e001      	b.n	80058ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ce:	f001 f859 	bl	8006984 <vPortExitCritical>

	return xReturn;
 80058d2:	68fb      	ldr	r3, [r7, #12]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058e4:	f001 f81e 	bl	8006924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d102      	bne.n	80058fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e001      	b.n	80058fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058fe:	f001 f841 	bl	8006984 <vPortExitCritical>

	return xReturn;
 8005902:	68fb      	ldr	r3, [r7, #12]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08e      	sub	sp, #56	; 0x38
 8005910:	af04      	add	r7, sp, #16
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	623b      	str	r3, [r7, #32]
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <xTaskCreateStatic+0x46>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	61fb      	str	r3, [r7, #28]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005952:	2354      	movs	r3, #84	; 0x54
 8005954:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	2b54      	cmp	r3, #84	; 0x54
 800595a:	d00a      	beq.n	8005972 <xTaskCreateStatic+0x66>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	61bb      	str	r3, [r7, #24]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005972:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01e      	beq.n	80059b8 <xTaskCreateStatic+0xac>
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005988:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	2202      	movs	r2, #2
 800598e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005992:	2300      	movs	r3, #0
 8005994:	9303      	str	r3, [sp, #12]
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	9302      	str	r3, [sp, #8]
 800599a:	f107 0314 	add.w	r3, r7, #20
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f850 	bl	8005a50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059b2:	f000 f8d5 	bl	8005b60 <prvAddNewTaskToReadyList>
 80059b6:	e001      	b.n	80059bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059bc:	697b      	ldr	r3, [r7, #20]
	}
 80059be:	4618      	mov	r0, r3
 80059c0:	3728      	adds	r7, #40	; 0x28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08c      	sub	sp, #48	; 0x30
 80059ca:	af04      	add	r7, sp, #16
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f884 	bl	8006ae8 <pvPortMalloc>
 80059e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00e      	beq.n	8005a06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059e8:	2054      	movs	r0, #84	; 0x54
 80059ea:	f001 f87d 	bl	8006ae8 <pvPortMalloc>
 80059ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
 80059fc:	e005      	b.n	8005a0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059fe:	6978      	ldr	r0, [r7, #20]
 8005a00:	f001 f93e 	bl	8006c80 <vPortFree>
 8005a04:	e001      	b.n	8005a0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d017      	beq.n	8005a40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a18:	88fa      	ldrh	r2, [r7, #6]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	9303      	str	r3, [sp, #12]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	9302      	str	r3, [sp, #8]
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f80e 	bl	8005a50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a34:	69f8      	ldr	r0, [r7, #28]
 8005a36:	f000 f893 	bl	8005b60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e002      	b.n	8005a46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a40:	f04f 33ff 	mov.w	r3, #4294967295
 8005a44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a46:	69bb      	ldr	r3, [r7, #24]
	}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f023 0307 	bic.w	r3, r3, #7
 8005a76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	617b      	str	r3, [r7, #20]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01f      	beq.n	8005ade <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e012      	b.n	8005aca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	7819      	ldrb	r1, [r3, #0]
 8005aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3334      	adds	r3, #52	; 0x34
 8005ab4:	460a      	mov	r2, r1
 8005ab6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d006      	beq.n	8005ad2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	61fb      	str	r3, [r7, #28]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b0f      	cmp	r3, #15
 8005ace:	d9e9      	bls.n	8005aa4 <prvInitialiseNewTask+0x54>
 8005ad0:	e000      	b.n	8005ad4 <prvInitialiseNewTask+0x84>
			{
				break;
 8005ad2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005adc:	e003      	b.n	8005ae6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	2b06      	cmp	r3, #6
 8005aea:	d901      	bls.n	8005af0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005aec:	2306      	movs	r3, #6
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005afa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	2200      	movs	r2, #0
 8005b00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	3304      	adds	r3, #4
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff fabb 	bl	8005082 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	3318      	adds	r3, #24
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fab6 	bl	8005082 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	f1c3 0207 	rsb	r2, r3, #7
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	2200      	movs	r2, #0
 8005b30:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	68f9      	ldr	r1, [r7, #12]
 8005b3e:	69b8      	ldr	r0, [r7, #24]
 8005b40:	f000 fdc4 	bl	80066cc <pxPortInitialiseStack>
 8005b44:	4602      	mov	r2, r0
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b56:	bf00      	nop
 8005b58:	3720      	adds	r7, #32
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b68:	f000 fedc 	bl	8006924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b6c:	4b2a      	ldr	r3, [pc, #168]	; (8005c18 <prvAddNewTaskToReadyList+0xb8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	4a29      	ldr	r2, [pc, #164]	; (8005c18 <prvAddNewTaskToReadyList+0xb8>)
 8005b74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b76:	4b29      	ldr	r3, [pc, #164]	; (8005c1c <prvAddNewTaskToReadyList+0xbc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b7e:	4a27      	ldr	r2, [pc, #156]	; (8005c1c <prvAddNewTaskToReadyList+0xbc>)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b84:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <prvAddNewTaskToReadyList+0xb8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d110      	bne.n	8005bae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b8c:	f000 fbd6 	bl	800633c <prvInitialiseTaskLists>
 8005b90:	e00d      	b.n	8005bae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b92:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <prvAddNewTaskToReadyList+0xc0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b9a:	4b20      	ldr	r3, [pc, #128]	; (8005c1c <prvAddNewTaskToReadyList+0xbc>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d802      	bhi.n	8005bae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	; (8005c1c <prvAddNewTaskToReadyList+0xbc>)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bae:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <prvAddNewTaskToReadyList+0xc4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <prvAddNewTaskToReadyList+0xc4>)
 8005bb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	409a      	lsls	r2, r3
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <prvAddNewTaskToReadyList+0xc8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	4a18      	ldr	r2, [pc, #96]	; (8005c28 <prvAddNewTaskToReadyList+0xc8>)
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <prvAddNewTaskToReadyList+0xcc>)
 8005bd8:	441a      	add	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	3304      	adds	r3, #4
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f7ff fa5b 	bl	800509c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005be6:	f000 fecd 	bl	8006984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <prvAddNewTaskToReadyList+0xc0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bf2:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <prvAddNewTaskToReadyList+0xbc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d207      	bcs.n	8005c10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c00:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <prvAddNewTaskToReadyList+0xd0>)
 8005c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20000914 	.word	0x20000914
 8005c1c:	20000814 	.word	0x20000814
 8005c20:	20000920 	.word	0x20000920
 8005c24:	20000930 	.word	0x20000930
 8005c28:	2000091c 	.word	0x2000091c
 8005c2c:	20000818 	.word	0x20000818
 8005c30:	e000ed04 	.word	0xe000ed04

08005c34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d017      	beq.n	8005c76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c46:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <vTaskDelay+0x60>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00a      	beq.n	8005c64 <vTaskDelay+0x30>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60bb      	str	r3, [r7, #8]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c64:	f000 f87a 	bl	8005d5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c68:	2100      	movs	r1, #0
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fcc8 	bl	8006600 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c70:	f000 f882 	bl	8005d78 <xTaskResumeAll>
 8005c74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d107      	bne.n	8005c8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <vTaskDelay+0x64>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c8c:	bf00      	nop
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	2000093c 	.word	0x2000093c
 8005c98:	e000ed04 	.word	0xe000ed04

08005c9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08a      	sub	sp, #40	; 0x28
 8005ca0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005caa:	463a      	mov	r2, r7
 8005cac:	1d39      	adds	r1, r7, #4
 8005cae:	f107 0308 	add.w	r3, r7, #8
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fb fd1c 	bl	80016f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	9202      	str	r2, [sp, #8]
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	460a      	mov	r2, r1
 8005cca:	491e      	ldr	r1, [pc, #120]	; (8005d44 <vTaskStartScheduler+0xa8>)
 8005ccc:	481e      	ldr	r0, [pc, #120]	; (8005d48 <vTaskStartScheduler+0xac>)
 8005cce:	f7ff fe1d 	bl	800590c <xTaskCreateStatic>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	; (8005d4c <vTaskStartScheduler+0xb0>)
 8005cd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cd8:	4b1c      	ldr	r3, [pc, #112]	; (8005d4c <vTaskStartScheduler+0xb0>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e001      	b.n	8005cea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d116      	bne.n	8005d1e <vTaskStartScheduler+0x82>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d04:	4b12      	ldr	r3, [pc, #72]	; (8005d50 <vTaskStartScheduler+0xb4>)
 8005d06:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <vTaskStartScheduler+0xb8>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <vTaskStartScheduler+0xbc>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d18:	f000 fd62 	bl	80067e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d1c:	e00e      	b.n	8005d3c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d10a      	bne.n	8005d3c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2a:	f383 8811 	msr	BASEPRI, r3
 8005d2e:	f3bf 8f6f 	isb	sy
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	60fb      	str	r3, [r7, #12]
}
 8005d38:	bf00      	nop
 8005d3a:	e7fe      	b.n	8005d3a <vTaskStartScheduler+0x9e>
}
 8005d3c:	bf00      	nop
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	08007028 	.word	0x08007028
 8005d48:	0800630d 	.word	0x0800630d
 8005d4c:	20000938 	.word	0x20000938
 8005d50:	20000934 	.word	0x20000934
 8005d54:	20000920 	.word	0x20000920
 8005d58:	20000918 	.word	0x20000918

08005d5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <vTaskSuspendAll+0x18>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	4a03      	ldr	r2, [pc, #12]	; (8005d74 <vTaskSuspendAll+0x18>)
 8005d68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d6a:	bf00      	nop
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	2000093c 	.word	0x2000093c

08005d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d86:	4b41      	ldr	r3, [pc, #260]	; (8005e8c <xTaskResumeAll+0x114>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	603b      	str	r3, [r7, #0]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005da4:	f000 fdbe 	bl	8006924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005da8:	4b38      	ldr	r3, [pc, #224]	; (8005e8c <xTaskResumeAll+0x114>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	4a37      	ldr	r2, [pc, #220]	; (8005e8c <xTaskResumeAll+0x114>)
 8005db0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005db2:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <xTaskResumeAll+0x114>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d161      	bne.n	8005e7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dba:	4b35      	ldr	r3, [pc, #212]	; (8005e90 <xTaskResumeAll+0x118>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d05d      	beq.n	8005e7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dc2:	e02e      	b.n	8005e22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dc4:	4b33      	ldr	r3, [pc, #204]	; (8005e94 <xTaskResumeAll+0x11c>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3318      	adds	r3, #24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff f9c0 	bl	8005156 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff f9bb 	bl	8005156 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	2201      	movs	r2, #1
 8005de6:	409a      	lsls	r2, r3
 8005de8:	4b2b      	ldr	r3, [pc, #172]	; (8005e98 <xTaskResumeAll+0x120>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	4a2a      	ldr	r2, [pc, #168]	; (8005e98 <xTaskResumeAll+0x120>)
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df6:	4613      	mov	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4a27      	ldr	r2, [pc, #156]	; (8005e9c <xTaskResumeAll+0x124>)
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3304      	adds	r3, #4
 8005e06:	4619      	mov	r1, r3
 8005e08:	4610      	mov	r0, r2
 8005e0a:	f7ff f947 	bl	800509c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e12:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <xTaskResumeAll+0x128>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d302      	bcc.n	8005e22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e1c:	4b21      	ldr	r3, [pc, #132]	; (8005ea4 <xTaskResumeAll+0x12c>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <xTaskResumeAll+0x11c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1cc      	bne.n	8005dc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e30:	f000 fb22 	bl	8006478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e34:	4b1c      	ldr	r3, [pc, #112]	; (8005ea8 <xTaskResumeAll+0x130>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e40:	f000 f846 	bl	8005ed0 <xTaskIncrementTick>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005e4a:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <xTaskResumeAll+0x12c>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1f1      	bne.n	8005e40 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005e5c:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <xTaskResumeAll+0x130>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <xTaskResumeAll+0x12c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <xTaskResumeAll+0x134>)
 8005e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	f3bf 8f4f 	dsb	sy
 8005e7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e7e:	f000 fd81 	bl	8006984 <vPortExitCritical>

	return xAlreadyYielded;
 8005e82:	68bb      	ldr	r3, [r7, #8]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	2000093c 	.word	0x2000093c
 8005e90:	20000914 	.word	0x20000914
 8005e94:	200008d4 	.word	0x200008d4
 8005e98:	2000091c 	.word	0x2000091c
 8005e9c:	20000818 	.word	0x20000818
 8005ea0:	20000814 	.word	0x20000814
 8005ea4:	20000928 	.word	0x20000928
 8005ea8:	20000924 	.word	0x20000924
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005eb6:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <xTaskGetTickCount+0x1c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ebc:	687b      	ldr	r3, [r7, #4]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20000918 	.word	0x20000918

08005ed0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005eda:	4b4e      	ldr	r3, [pc, #312]	; (8006014 <xTaskIncrementTick+0x144>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 808e 	bne.w	8006000 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ee4:	4b4c      	ldr	r3, [pc, #304]	; (8006018 <xTaskIncrementTick+0x148>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005eec:	4a4a      	ldr	r2, [pc, #296]	; (8006018 <xTaskIncrementTick+0x148>)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d120      	bne.n	8005f3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ef8:	4b48      	ldr	r3, [pc, #288]	; (800601c <xTaskIncrementTick+0x14c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	603b      	str	r3, [r7, #0]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <xTaskIncrementTick+0x46>
 8005f18:	4b40      	ldr	r3, [pc, #256]	; (800601c <xTaskIncrementTick+0x14c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	4b40      	ldr	r3, [pc, #256]	; (8006020 <xTaskIncrementTick+0x150>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a3e      	ldr	r2, [pc, #248]	; (800601c <xTaskIncrementTick+0x14c>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4a3e      	ldr	r2, [pc, #248]	; (8006020 <xTaskIncrementTick+0x150>)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	4b3d      	ldr	r3, [pc, #244]	; (8006024 <xTaskIncrementTick+0x154>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3301      	adds	r3, #1
 8005f32:	4a3c      	ldr	r2, [pc, #240]	; (8006024 <xTaskIncrementTick+0x154>)
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	f000 fa9f 	bl	8006478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f3a:	4b3b      	ldr	r3, [pc, #236]	; (8006028 <xTaskIncrementTick+0x158>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d348      	bcc.n	8005fd6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f44:	4b35      	ldr	r3, [pc, #212]	; (800601c <xTaskIncrementTick+0x14c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4e:	4b36      	ldr	r3, [pc, #216]	; (8006028 <xTaskIncrementTick+0x158>)
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295
 8005f54:	601a      	str	r2, [r3, #0]
					break;
 8005f56:	e03e      	b.n	8005fd6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f58:	4b30      	ldr	r3, [pc, #192]	; (800601c <xTaskIncrementTick+0x14c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d203      	bcs.n	8005f78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f70:	4a2d      	ldr	r2, [pc, #180]	; (8006028 <xTaskIncrementTick+0x158>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f76:	e02e      	b.n	8005fd6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff f8ea 	bl	8005156 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	3318      	adds	r3, #24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff f8e1 	bl	8005156 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	2201      	movs	r2, #1
 8005f9a:	409a      	lsls	r2, r3
 8005f9c:	4b23      	ldr	r3, [pc, #140]	; (800602c <xTaskIncrementTick+0x15c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	4a22      	ldr	r2, [pc, #136]	; (800602c <xTaskIncrementTick+0x15c>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <xTaskIncrementTick+0x160>)
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7ff f86d 	bl	800509c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	; (8006034 <xTaskIncrementTick+0x164>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d3b9      	bcc.n	8005f44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fd4:	e7b6      	b.n	8005f44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fd6:	4b17      	ldr	r3, [pc, #92]	; (8006034 <xTaskIncrementTick+0x164>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fdc:	4914      	ldr	r1, [pc, #80]	; (8006030 <xTaskIncrementTick+0x160>)
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d901      	bls.n	8005ff2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ff2:	4b11      	ldr	r3, [pc, #68]	; (8006038 <xTaskIncrementTick+0x168>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	e004      	b.n	800600a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006000:	4b0e      	ldr	r3, [pc, #56]	; (800603c <xTaskIncrementTick+0x16c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3301      	adds	r3, #1
 8006006:	4a0d      	ldr	r2, [pc, #52]	; (800603c <xTaskIncrementTick+0x16c>)
 8006008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800600a:	697b      	ldr	r3, [r7, #20]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	2000093c 	.word	0x2000093c
 8006018:	20000918 	.word	0x20000918
 800601c:	200008cc 	.word	0x200008cc
 8006020:	200008d0 	.word	0x200008d0
 8006024:	2000092c 	.word	0x2000092c
 8006028:	20000934 	.word	0x20000934
 800602c:	2000091c 	.word	0x2000091c
 8006030:	20000818 	.word	0x20000818
 8006034:	20000814 	.word	0x20000814
 8006038:	20000928 	.word	0x20000928
 800603c:	20000924 	.word	0x20000924

08006040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006046:	4b27      	ldr	r3, [pc, #156]	; (80060e4 <vTaskSwitchContext+0xa4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800604e:	4b26      	ldr	r3, [pc, #152]	; (80060e8 <vTaskSwitchContext+0xa8>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006054:	e03f      	b.n	80060d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006056:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <vTaskSwitchContext+0xa8>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800605c:	4b23      	ldr	r3, [pc, #140]	; (80060ec <vTaskSwitchContext+0xac>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	fab3 f383 	clz	r3, r3
 8006068:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800606a:	7afb      	ldrb	r3, [r7, #11]
 800606c:	f1c3 031f 	rsb	r3, r3, #31
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	491f      	ldr	r1, [pc, #124]	; (80060f0 <vTaskSwitchContext+0xb0>)
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	440b      	add	r3, r1
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	607b      	str	r3, [r7, #4]
}
 8006098:	bf00      	nop
 800609a:	e7fe      	b.n	800609a <vTaskSwitchContext+0x5a>
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4613      	mov	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4a12      	ldr	r2, [pc, #72]	; (80060f0 <vTaskSwitchContext+0xb0>)
 80060a8:	4413      	add	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	3308      	adds	r3, #8
 80060be:	429a      	cmp	r2, r3
 80060c0:	d104      	bne.n	80060cc <vTaskSwitchContext+0x8c>
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <vTaskSwitchContext+0xb4>)
 80060d4:	6013      	str	r3, [r2, #0]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	2000093c 	.word	0x2000093c
 80060e8:	20000928 	.word	0x20000928
 80060ec:	2000091c 	.word	0x2000091c
 80060f0:	20000818 	.word	0x20000818
 80060f4:	20000814 	.word	0x20000814

080060f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	60fb      	str	r3, [r7, #12]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800611e:	4b07      	ldr	r3, [pc, #28]	; (800613c <vTaskPlaceOnEventList+0x44>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3318      	adds	r3, #24
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7fe ffdc 	bl	80050e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800612c:	2101      	movs	r1, #1
 800612e:	6838      	ldr	r0, [r7, #0]
 8006130:	f000 fa66 	bl	8006600 <prvAddCurrentTaskToDelayedList>
}
 8006134:	bf00      	nop
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000814 	.word	0x20000814

08006140 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60fb      	str	r3, [r7, #12]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	3318      	adds	r3, #24
 8006170:	4618      	mov	r0, r3
 8006172:	f7fe fff0 	bl	8005156 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <xTaskRemoveFromEventList+0xac>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d11c      	bne.n	80061b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	3304      	adds	r3, #4
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe ffe7 	bl	8005156 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	2201      	movs	r2, #1
 800618e:	409a      	lsls	r2, r3
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <xTaskRemoveFromEventList+0xb0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4313      	orrs	r3, r2
 8006196:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <xTaskRemoveFromEventList+0xb0>)
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <xTaskRemoveFromEventList+0xb4>)
 80061a8:	441a      	add	r2, r3
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f7fe ff73 	bl	800509c <vListInsertEnd>
 80061b6:	e005      	b.n	80061c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	3318      	adds	r3, #24
 80061bc:	4619      	mov	r1, r3
 80061be:	480e      	ldr	r0, [pc, #56]	; (80061f8 <xTaskRemoveFromEventList+0xb8>)
 80061c0:	f7fe ff6c 	bl	800509c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <xTaskRemoveFromEventList+0xbc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d905      	bls.n	80061de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061d2:	2301      	movs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <xTaskRemoveFromEventList+0xc0>)
 80061d8:	2201      	movs	r2, #1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	e001      	b.n	80061e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061e2:	697b      	ldr	r3, [r7, #20]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	2000093c 	.word	0x2000093c
 80061f0:	2000091c 	.word	0x2000091c
 80061f4:	20000818 	.word	0x20000818
 80061f8:	200008d4 	.word	0x200008d4
 80061fc:	20000814 	.word	0x20000814
 8006200:	20000928 	.word	0x20000928

08006204 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <vTaskInternalSetTimeOutState+0x24>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <vTaskInternalSetTimeOutState+0x28>)
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	605a      	str	r2, [r3, #4]
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	2000092c 	.word	0x2000092c
 800622c:	20000918 	.word	0x20000918

08006230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	613b      	str	r3, [r7, #16]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	60fb      	str	r3, [r7, #12]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006272:	f000 fb57 	bl	8006924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <xTaskCheckForTimeOut+0xbc>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	d102      	bne.n	8006296 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
 8006294:	e023      	b.n	80062de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <xTaskCheckForTimeOut+0xc0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d007      	beq.n	80062b2 <xTaskCheckForTimeOut+0x82>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d302      	bcc.n	80062b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	61fb      	str	r3, [r7, #28]
 80062b0:	e015      	b.n	80062de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d20b      	bcs.n	80062d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff ff9b 	bl	8006204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	e004      	b.n	80062de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062da:	2301      	movs	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062de:	f000 fb51 	bl	8006984 <vPortExitCritical>

	return xReturn;
 80062e2:	69fb      	ldr	r3, [r7, #28]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20000918 	.word	0x20000918
 80062f0:	2000092c 	.word	0x2000092c

080062f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062f8:	4b03      	ldr	r3, [pc, #12]	; (8006308 <vTaskMissedYield+0x14>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
}
 80062fe:	bf00      	nop
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	20000928 	.word	0x20000928

0800630c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006314:	f000 f852 	bl	80063bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <prvIdleTask+0x28>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d9f9      	bls.n	8006314 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <prvIdleTask+0x2c>)
 8006322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006330:	e7f0      	b.n	8006314 <prvIdleTask+0x8>
 8006332:	bf00      	nop
 8006334:	20000818 	.word	0x20000818
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006342:	2300      	movs	r3, #0
 8006344:	607b      	str	r3, [r7, #4]
 8006346:	e00c      	b.n	8006362 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4a12      	ldr	r2, [pc, #72]	; (800639c <prvInitialiseTaskLists+0x60>)
 8006354:	4413      	add	r3, r2
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fe73 	bl	8005042 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3301      	adds	r3, #1
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b06      	cmp	r3, #6
 8006366:	d9ef      	bls.n	8006348 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006368:	480d      	ldr	r0, [pc, #52]	; (80063a0 <prvInitialiseTaskLists+0x64>)
 800636a:	f7fe fe6a 	bl	8005042 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800636e:	480d      	ldr	r0, [pc, #52]	; (80063a4 <prvInitialiseTaskLists+0x68>)
 8006370:	f7fe fe67 	bl	8005042 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006374:	480c      	ldr	r0, [pc, #48]	; (80063a8 <prvInitialiseTaskLists+0x6c>)
 8006376:	f7fe fe64 	bl	8005042 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800637a:	480c      	ldr	r0, [pc, #48]	; (80063ac <prvInitialiseTaskLists+0x70>)
 800637c:	f7fe fe61 	bl	8005042 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006380:	480b      	ldr	r0, [pc, #44]	; (80063b0 <prvInitialiseTaskLists+0x74>)
 8006382:	f7fe fe5e 	bl	8005042 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <prvInitialiseTaskLists+0x78>)
 8006388:	4a05      	ldr	r2, [pc, #20]	; (80063a0 <prvInitialiseTaskLists+0x64>)
 800638a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <prvInitialiseTaskLists+0x7c>)
 800638e:	4a05      	ldr	r2, [pc, #20]	; (80063a4 <prvInitialiseTaskLists+0x68>)
 8006390:	601a      	str	r2, [r3, #0]
}
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000818 	.word	0x20000818
 80063a0:	200008a4 	.word	0x200008a4
 80063a4:	200008b8 	.word	0x200008b8
 80063a8:	200008d4 	.word	0x200008d4
 80063ac:	200008e8 	.word	0x200008e8
 80063b0:	20000900 	.word	0x20000900
 80063b4:	200008cc 	.word	0x200008cc
 80063b8:	200008d0 	.word	0x200008d0

080063bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063c2:	e019      	b.n	80063f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063c4:	f000 faae 	bl	8006924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c8:	4b10      	ldr	r3, [pc, #64]	; (800640c <prvCheckTasksWaitingTermination+0x50>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe febe 	bl	8005156 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063da:	4b0d      	ldr	r3, [pc, #52]	; (8006410 <prvCheckTasksWaitingTermination+0x54>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3b01      	subs	r3, #1
 80063e0:	4a0b      	ldr	r2, [pc, #44]	; (8006410 <prvCheckTasksWaitingTermination+0x54>)
 80063e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <prvCheckTasksWaitingTermination+0x58>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	4a0a      	ldr	r2, [pc, #40]	; (8006414 <prvCheckTasksWaitingTermination+0x58>)
 80063ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063ee:	f000 fac9 	bl	8006984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f810 	bl	8006418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063f8:	4b06      	ldr	r3, [pc, #24]	; (8006414 <prvCheckTasksWaitingTermination+0x58>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e1      	bne.n	80063c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	200008e8 	.word	0x200008e8
 8006410:	20000914 	.word	0x20000914
 8006414:	200008fc 	.word	0x200008fc

08006418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006426:	2b00      	cmp	r3, #0
 8006428:	d108      	bne.n	800643c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fc26 	bl	8006c80 <vPortFree>
				vPortFree( pxTCB );
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fc23 	bl	8006c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800643a:	e018      	b.n	800646e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006442:	2b01      	cmp	r3, #1
 8006444:	d103      	bne.n	800644e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fc1a 	bl	8006c80 <vPortFree>
	}
 800644c:	e00f      	b.n	800646e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006454:	2b02      	cmp	r3, #2
 8006456:	d00a      	beq.n	800646e <prvDeleteTCB+0x56>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	60fb      	str	r3, [r7, #12]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <prvDeleteTCB+0x54>
	}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800647e:	4b0c      	ldr	r3, [pc, #48]	; (80064b0 <prvResetNextTaskUnblockTime+0x38>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <prvResetNextTaskUnblockTime+0x3c>)
 800648a:	f04f 32ff 	mov.w	r2, #4294967295
 800648e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006490:	e008      	b.n	80064a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <prvResetNextTaskUnblockTime+0x38>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4a04      	ldr	r2, [pc, #16]	; (80064b4 <prvResetNextTaskUnblockTime+0x3c>)
 80064a2:	6013      	str	r3, [r2, #0]
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	200008cc 	.word	0x200008cc
 80064b4:	20000934 	.word	0x20000934

080064b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <xTaskGetSchedulerState+0x34>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064c6:	2301      	movs	r3, #1
 80064c8:	607b      	str	r3, [r7, #4]
 80064ca:	e008      	b.n	80064de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064cc:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <xTaskGetSchedulerState+0x38>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064d4:	2302      	movs	r3, #2
 80064d6:	607b      	str	r3, [r7, #4]
 80064d8:	e001      	b.n	80064de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064de:	687b      	ldr	r3, [r7, #4]
	}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	20000920 	.word	0x20000920
 80064f0:	2000093c 	.word	0x2000093c

080064f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d06e      	beq.n	80065e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800650a:	4b3a      	ldr	r3, [pc, #232]	; (80065f4 <xTaskPriorityDisinherit+0x100>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	429a      	cmp	r2, r3
 8006512:	d00a      	beq.n	800652a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
}
 8006526:	bf00      	nop
 8006528:	e7fe      	b.n	8006528 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	60bb      	str	r3, [r7, #8]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800654c:	1e5a      	subs	r2, r3, #1
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655a:	429a      	cmp	r2, r3
 800655c:	d044      	beq.n	80065e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006562:	2b00      	cmp	r3, #0
 8006564:	d140      	bne.n	80065e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	3304      	adds	r3, #4
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe fdf3 	bl	8005156 <uxListRemove>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d115      	bne.n	80065a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657a:	491f      	ldr	r1, [pc, #124]	; (80065f8 <xTaskPriorityDisinherit+0x104>)
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xTaskPriorityDisinherit+0xae>
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006590:	2201      	movs	r2, #1
 8006592:	fa02 f303 	lsl.w	r3, r2, r3
 8006596:	43da      	mvns	r2, r3
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <xTaskPriorityDisinherit+0x108>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4013      	ands	r3, r2
 800659e:	4a17      	ldr	r2, [pc, #92]	; (80065fc <xTaskPriorityDisinherit+0x108>)
 80065a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	f1c3 0207 	rsb	r2, r3, #7
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ba:	2201      	movs	r2, #1
 80065bc:	409a      	lsls	r2, r3
 80065be:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <xTaskPriorityDisinherit+0x108>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	4a0d      	ldr	r2, [pc, #52]	; (80065fc <xTaskPriorityDisinherit+0x108>)
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4a08      	ldr	r2, [pc, #32]	; (80065f8 <xTaskPriorityDisinherit+0x104>)
 80065d6:	441a      	add	r2, r3
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	3304      	adds	r3, #4
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f7fe fd5c 	bl	800509c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065e8:	697b      	ldr	r3, [r7, #20]
	}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000814 	.word	0x20000814
 80065f8:	20000818 	.word	0x20000818
 80065fc:	2000091c 	.word	0x2000091c

08006600 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800660a:	4b29      	ldr	r3, [pc, #164]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006610:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3304      	adds	r3, #4
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fd9d 	bl	8005156 <uxListRemove>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006622:	4b24      	ldr	r3, [pc, #144]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	2201      	movs	r2, #1
 800662a:	fa02 f303 	lsl.w	r3, r2, r3
 800662e:	43da      	mvns	r2, r3
 8006630:	4b21      	ldr	r3, [pc, #132]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4013      	ands	r3, r2
 8006636:	4a20      	ldr	r2, [pc, #128]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006638:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d10a      	bne.n	8006658 <prvAddCurrentTaskToDelayedList+0x58>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3304      	adds	r3, #4
 800664e:	4619      	mov	r1, r3
 8006650:	481a      	ldr	r0, [pc, #104]	; (80066bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006652:	f7fe fd23 	bl	800509c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006656:	e026      	b.n	80066a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006660:	4b14      	ldr	r3, [pc, #80]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	429a      	cmp	r2, r3
 800666e:	d209      	bcs.n	8006684 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006670:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3304      	adds	r3, #4
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f7fe fd31 	bl	80050e4 <vListInsert>
}
 8006682:	e010      	b.n	80066a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006684:	4b0f      	ldr	r3, [pc, #60]	; (80066c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3304      	adds	r3, #4
 800668e:	4619      	mov	r1, r3
 8006690:	4610      	mov	r0, r2
 8006692:	f7fe fd27 	bl	80050e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	429a      	cmp	r2, r3
 800669e:	d202      	bcs.n	80066a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80066a0:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6013      	str	r3, [r2, #0]
}
 80066a6:	bf00      	nop
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000918 	.word	0x20000918
 80066b4:	20000814 	.word	0x20000814
 80066b8:	2000091c 	.word	0x2000091c
 80066bc:	20000900 	.word	0x20000900
 80066c0:	200008d0 	.word	0x200008d0
 80066c4:	200008cc 	.word	0x200008cc
 80066c8:	20000934 	.word	0x20000934

080066cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3b04      	subs	r3, #4
 80066dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3b04      	subs	r3, #4
 80066ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f023 0201 	bic.w	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3b04      	subs	r3, #4
 80066fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066fc:	4a0c      	ldr	r2, [pc, #48]	; (8006730 <pxPortInitialiseStack+0x64>)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3b14      	subs	r3, #20
 8006706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3b04      	subs	r3, #4
 8006712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f06f 0202 	mvn.w	r2, #2
 800671a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3b20      	subs	r3, #32
 8006720:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006722:	68fb      	ldr	r3, [r7, #12]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	08006735 	.word	0x08006735

08006734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800673e:	4b12      	ldr	r3, [pc, #72]	; (8006788 <prvTaskExitError+0x54>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d00a      	beq.n	800675e <prvTaskExitError+0x2a>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	60fb      	str	r3, [r7, #12]
}
 800675a:	bf00      	nop
 800675c:	e7fe      	b.n	800675c <prvTaskExitError+0x28>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60bb      	str	r3, [r7, #8]
}
 8006770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006772:	bf00      	nop
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0fc      	beq.n	8006774 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	20000024 	.word	0x20000024
 800678c:	00000000 	.word	0x00000000

08006790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <pxCurrentTCBConst2>)
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	6808      	ldr	r0, [r1, #0]
 8006796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	f380 8809 	msr	PSP, r0
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8811 	msr	BASEPRI, r0
 80067aa:	4770      	bx	lr
 80067ac:	f3af 8000 	nop.w

080067b0 <pxCurrentTCBConst2>:
 80067b0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067b8:	4808      	ldr	r0, [pc, #32]	; (80067dc <prvPortStartFirstTask+0x24>)
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	6800      	ldr	r0, [r0, #0]
 80067be:	f380 8808 	msr	MSP, r0
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f380 8814 	msr	CONTROL, r0
 80067ca:	b662      	cpsie	i
 80067cc:	b661      	cpsie	f
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	df00      	svc	0
 80067d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067da:	bf00      	nop
 80067dc:	e000ed08 	.word	0xe000ed08

080067e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067e6:	4b46      	ldr	r3, [pc, #280]	; (8006900 <xPortStartScheduler+0x120>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a46      	ldr	r2, [pc, #280]	; (8006904 <xPortStartScheduler+0x124>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10a      	bne.n	8006806 <xPortStartScheduler+0x26>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	613b      	str	r3, [r7, #16]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006806:	4b3e      	ldr	r3, [pc, #248]	; (8006900 <xPortStartScheduler+0x120>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a3f      	ldr	r2, [pc, #252]	; (8006908 <xPortStartScheduler+0x128>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10a      	bne.n	8006826 <xPortStartScheduler+0x46>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	60fb      	str	r3, [r7, #12]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006826:	4b39      	ldr	r3, [pc, #228]	; (800690c <xPortStartScheduler+0x12c>)
 8006828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	22ff      	movs	r2, #255	; 0xff
 8006836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	b2db      	uxtb	r3, r3
 800683e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006848:	b2da      	uxtb	r2, r3
 800684a:	4b31      	ldr	r3, [pc, #196]	; (8006910 <xPortStartScheduler+0x130>)
 800684c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800684e:	4b31      	ldr	r3, [pc, #196]	; (8006914 <xPortStartScheduler+0x134>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006854:	e009      	b.n	800686a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006856:	4b2f      	ldr	r3, [pc, #188]	; (8006914 <xPortStartScheduler+0x134>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3b01      	subs	r3, #1
 800685c:	4a2d      	ldr	r2, [pc, #180]	; (8006914 <xPortStartScheduler+0x134>)
 800685e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800686a:	78fb      	ldrb	r3, [r7, #3]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006872:	2b80      	cmp	r3, #128	; 0x80
 8006874:	d0ef      	beq.n	8006856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006876:	4b27      	ldr	r3, [pc, #156]	; (8006914 <xPortStartScheduler+0x134>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f1c3 0307 	rsb	r3, r3, #7
 800687e:	2b04      	cmp	r3, #4
 8006880:	d00a      	beq.n	8006898 <xPortStartScheduler+0xb8>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006898:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <xPortStartScheduler+0x134>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <xPortStartScheduler+0x134>)
 80068a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068a2:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <xPortStartScheduler+0x134>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068aa:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <xPortStartScheduler+0x134>)
 80068ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068b6:	4b18      	ldr	r3, [pc, #96]	; (8006918 <xPortStartScheduler+0x138>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a17      	ldr	r2, [pc, #92]	; (8006918 <xPortStartScheduler+0x138>)
 80068bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068c2:	4b15      	ldr	r3, [pc, #84]	; (8006918 <xPortStartScheduler+0x138>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a14      	ldr	r2, [pc, #80]	; (8006918 <xPortStartScheduler+0x138>)
 80068c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068ce:	f000 f8dd 	bl	8006a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068d2:	4b12      	ldr	r3, [pc, #72]	; (800691c <xPortStartScheduler+0x13c>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068d8:	f000 f8fc 	bl	8006ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068dc:	4b10      	ldr	r3, [pc, #64]	; (8006920 <xPortStartScheduler+0x140>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a0f      	ldr	r2, [pc, #60]	; (8006920 <xPortStartScheduler+0x140>)
 80068e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068e8:	f7ff ff66 	bl	80067b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068ec:	f7ff fba8 	bl	8006040 <vTaskSwitchContext>
	prvTaskExitError();
 80068f0:	f7ff ff20 	bl	8006734 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	e000ed00 	.word	0xe000ed00
 8006904:	410fc271 	.word	0x410fc271
 8006908:	410fc270 	.word	0x410fc270
 800690c:	e000e400 	.word	0xe000e400
 8006910:	20000940 	.word	0x20000940
 8006914:	20000944 	.word	0x20000944
 8006918:	e000ed20 	.word	0xe000ed20
 800691c:	20000024 	.word	0x20000024
 8006920:	e000ef34 	.word	0xe000ef34

08006924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	607b      	str	r3, [r7, #4]
}
 800693c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <vPortEnterCritical+0x58>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a0d      	ldr	r2, [pc, #52]	; (800697c <vPortEnterCritical+0x58>)
 8006946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006948:	4b0c      	ldr	r3, [pc, #48]	; (800697c <vPortEnterCritical+0x58>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d10f      	bne.n	8006970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <vPortEnterCritical+0x5c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <vPortEnterCritical+0x4c>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	603b      	str	r3, [r7, #0]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <vPortEnterCritical+0x4a>
	}
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	20000024 	.word	0x20000024
 8006980:	e000ed04 	.word	0xe000ed04

08006984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800698a:	4b12      	ldr	r3, [pc, #72]	; (80069d4 <vPortExitCritical+0x50>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <vPortExitCritical+0x24>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	607b      	str	r3, [r7, #4]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <vPortExitCritical+0x50>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <vPortExitCritical+0x50>)
 80069b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <vPortExitCritical+0x50>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d105      	bne.n	80069c6 <vPortExitCritical+0x42>
 80069ba:	2300      	movs	r3, #0
 80069bc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000024 	.word	0x20000024
	...

080069e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069e0:	f3ef 8009 	mrs	r0, PSP
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	4b15      	ldr	r3, [pc, #84]	; (8006a40 <pxCurrentTCBConst>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	f01e 0f10 	tst.w	lr, #16
 80069f0:	bf08      	it	eq
 80069f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fa:	6010      	str	r0, [r2, #0]
 80069fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a04:	f380 8811 	msr	BASEPRI, r0
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f7ff fb16 	bl	8006040 <vTaskSwitchContext>
 8006a14:	f04f 0000 	mov.w	r0, #0
 8006a18:	f380 8811 	msr	BASEPRI, r0
 8006a1c:	bc09      	pop	{r0, r3}
 8006a1e:	6819      	ldr	r1, [r3, #0]
 8006a20:	6808      	ldr	r0, [r1, #0]
 8006a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a26:	f01e 0f10 	tst.w	lr, #16
 8006a2a:	bf08      	it	eq
 8006a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a30:	f380 8809 	msr	PSP, r0
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	f3af 8000 	nop.w

08006a40 <pxCurrentTCBConst>:
 8006a40:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop

08006a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a62:	f7ff fa35 	bl	8005ed0 <xTaskIncrementTick>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a6c:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <SysTick_Handler+0x40>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	2300      	movs	r3, #0
 8006a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f383 8811 	msr	BASEPRI, r3
}
 8006a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <vPortSetupTimerInterrupt+0x34>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a96:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <vPortSetupTimerInterrupt+0x38>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <vPortSetupTimerInterrupt+0x3c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a0a      	ldr	r2, [pc, #40]	; (8006acc <vPortSetupTimerInterrupt+0x40>)
 8006aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	4a09      	ldr	r2, [pc, #36]	; (8006ad0 <vPortSetupTimerInterrupt+0x44>)
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aae:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <vPortSetupTimerInterrupt+0x34>)
 8006ab0:	2207      	movs	r2, #7
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	e000e010 	.word	0xe000e010
 8006ac4:	e000e018 	.word	0xe000e018
 8006ac8:	20000004 	.word	0x20000004
 8006acc:	10624dd3 	.word	0x10624dd3
 8006ad0:	e000e014 	.word	0xe000e014

08006ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ae4 <vPortEnableVFP+0x10>
 8006ad8:	6801      	ldr	r1, [r0, #0]
 8006ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ade:	6001      	str	r1, [r0, #0]
 8006ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ae2:	bf00      	nop
 8006ae4:	e000ed88 	.word	0xe000ed88

08006ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006af4:	f7ff f932 	bl	8005d5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006af8:	4b5b      	ldr	r3, [pc, #364]	; (8006c68 <pvPortMalloc+0x180>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b00:	f000 f920 	bl	8006d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b04:	4b59      	ldr	r3, [pc, #356]	; (8006c6c <pvPortMalloc+0x184>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f040 8093 	bne.w	8006c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d01d      	beq.n	8006b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b18:	2208      	movs	r2, #8
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d014      	beq.n	8006b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f023 0307 	bic.w	r3, r3, #7
 8006b30:	3308      	adds	r3, #8
 8006b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <pvPortMalloc+0x6c>
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	617b      	str	r3, [r7, #20]
}
 8006b50:	bf00      	nop
 8006b52:	e7fe      	b.n	8006b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d06e      	beq.n	8006c38 <pvPortMalloc+0x150>
 8006b5a:	4b45      	ldr	r3, [pc, #276]	; (8006c70 <pvPortMalloc+0x188>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d869      	bhi.n	8006c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b64:	4b43      	ldr	r3, [pc, #268]	; (8006c74 <pvPortMalloc+0x18c>)
 8006b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b68:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <pvPortMalloc+0x18c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b6e:	e004      	b.n	8006b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d903      	bls.n	8006b8c <pvPortMalloc+0xa4>
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f1      	bne.n	8006b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b8c:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <pvPortMalloc+0x180>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d050      	beq.n	8006c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	4413      	add	r3, r2
 8006b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	2308      	movs	r3, #8
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d91f      	bls.n	8006bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	613b      	str	r3, [r7, #16]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bf2:	69b8      	ldr	r0, [r7, #24]
 8006bf4:	f000 f908 	bl	8006e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bf8:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <pvPortMalloc+0x188>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <pvPortMalloc+0x188>)
 8006c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c06:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <pvPortMalloc+0x188>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <pvPortMalloc+0x190>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d203      	bcs.n	8006c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c12:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <pvPortMalloc+0x188>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <pvPortMalloc+0x190>)
 8006c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <pvPortMalloc+0x184>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <pvPortMalloc+0x194>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <pvPortMalloc+0x194>)
 8006c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c38:	f7ff f89e 	bl	8005d78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <pvPortMalloc+0x174>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	60fb      	str	r3, [r7, #12]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <pvPortMalloc+0x172>
	return pvReturn;
 8006c5c:	69fb      	ldr	r3, [r7, #28]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3728      	adds	r7, #40	; 0x28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20004550 	.word	0x20004550
 8006c6c:	20004564 	.word	0x20004564
 8006c70:	20004554 	.word	0x20004554
 8006c74:	20004548 	.word	0x20004548
 8006c78:	20004558 	.word	0x20004558
 8006c7c:	2000455c 	.word	0x2000455c

08006c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d04d      	beq.n	8006d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c92:	2308      	movs	r3, #8
 8006c94:	425b      	negs	r3, r3
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4413      	add	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <vPortFree+0xb8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <vPortFree+0x44>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60fb      	str	r3, [r7, #12]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <vPortFree+0x62>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60bb      	str	r3, [r7, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <vPortFree+0xb8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01e      	beq.n	8006d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11a      	bne.n	8006d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <vPortFree+0xb8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d08:	f7ff f828 	bl	8005d5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <vPortFree+0xbc>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	4a09      	ldr	r2, [pc, #36]	; (8006d3c <vPortFree+0xbc>)
 8006d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f000 f874 	bl	8006e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <vPortFree+0xc0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	4a06      	ldr	r2, [pc, #24]	; (8006d40 <vPortFree+0xc0>)
 8006d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d2a:	f7ff f825 	bl	8005d78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20004564 	.word	0x20004564
 8006d3c:	20004554 	.word	0x20004554
 8006d40:	20004560 	.word	0x20004560

08006d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d50:	4b27      	ldr	r3, [pc, #156]	; (8006df0 <prvHeapInit+0xac>)
 8006d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3307      	adds	r3, #7
 8006d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0307 	bic.w	r3, r3, #7
 8006d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <prvHeapInit+0xac>)
 8006d74:	4413      	add	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	; (8006df4 <prvHeapInit+0xb0>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d82:	4b1c      	ldr	r3, [pc, #112]	; (8006df4 <prvHeapInit+0xb0>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d90:	2208      	movs	r2, #8
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a15      	ldr	r2, [pc, #84]	; (8006df8 <prvHeapInit+0xb4>)
 8006da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <prvHeapInit+0xb4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <prvHeapInit+0xb4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	1ad2      	subs	r2, r2, r3
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <prvHeapInit+0xb4>)
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <prvHeapInit+0xb8>)
 8006dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <prvHeapInit+0xbc>)
 8006dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <prvHeapInit+0xc0>)
 8006dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20000948 	.word	0x20000948
 8006df4:	20004548 	.word	0x20004548
 8006df8:	20004550 	.word	0x20004550
 8006dfc:	20004558 	.word	0x20004558
 8006e00:	20004554 	.word	0x20004554
 8006e04:	20004564 	.word	0x20004564

08006e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e10:	4b28      	ldr	r3, [pc, #160]	; (8006eb4 <prvInsertBlockIntoFreeList+0xac>)
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	e002      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x14>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d8f7      	bhi.n	8006e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	4413      	add	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d108      	bne.n	8006e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	441a      	add	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d118      	bne.n	8006e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d00d      	beq.n	8006e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	441a      	add	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e008      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	e003      	b.n	8006e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d002      	beq.n	8006ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20004548 	.word	0x20004548
 8006eb8:	20004550 	.word	0x20004550

08006ebc <memset>:
 8006ebc:	4402      	add	r2, r0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d100      	bne.n	8006ec6 <memset+0xa>
 8006ec4:	4770      	bx	lr
 8006ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8006eca:	e7f9      	b.n	8006ec0 <memset+0x4>

08006ecc <__libc_init_array>:
 8006ecc:	b570      	push	{r4, r5, r6, lr}
 8006ece:	4d0d      	ldr	r5, [pc, #52]	; (8006f04 <__libc_init_array+0x38>)
 8006ed0:	4c0d      	ldr	r4, [pc, #52]	; (8006f08 <__libc_init_array+0x3c>)
 8006ed2:	1b64      	subs	r4, r4, r5
 8006ed4:	10a4      	asrs	r4, r4, #2
 8006ed6:	2600      	movs	r6, #0
 8006ed8:	42a6      	cmp	r6, r4
 8006eda:	d109      	bne.n	8006ef0 <__libc_init_array+0x24>
 8006edc:	4d0b      	ldr	r5, [pc, #44]	; (8006f0c <__libc_init_array+0x40>)
 8006ede:	4c0c      	ldr	r4, [pc, #48]	; (8006f10 <__libc_init_array+0x44>)
 8006ee0:	f000 f826 	bl	8006f30 <_init>
 8006ee4:	1b64      	subs	r4, r4, r5
 8006ee6:	10a4      	asrs	r4, r4, #2
 8006ee8:	2600      	movs	r6, #0
 8006eea:	42a6      	cmp	r6, r4
 8006eec:	d105      	bne.n	8006efa <__libc_init_array+0x2e>
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef4:	4798      	blx	r3
 8006ef6:	3601      	adds	r6, #1
 8006ef8:	e7ee      	b.n	8006ed8 <__libc_init_array+0xc>
 8006efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efe:	4798      	blx	r3
 8006f00:	3601      	adds	r6, #1
 8006f02:	e7f2      	b.n	8006eea <__libc_init_array+0x1e>
 8006f04:	08009110 	.word	0x08009110
 8006f08:	08009110 	.word	0x08009110
 8006f0c:	08009110 	.word	0x08009110
 8006f10:	08009114 	.word	0x08009114

08006f14 <memcpy>:
 8006f14:	440a      	add	r2, r1
 8006f16:	4291      	cmp	r1, r2
 8006f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f1c:	d100      	bne.n	8006f20 <memcpy+0xc>
 8006f1e:	4770      	bx	lr
 8006f20:	b510      	push	{r4, lr}
 8006f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	d1f9      	bne.n	8006f22 <memcpy+0xe>
 8006f2e:	bd10      	pop	{r4, pc}

08006f30 <_init>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr

08006f3c <_fini>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr
